; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/pooling.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/pooling.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { {}*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"struct.tflite::PaddingValues" = type { i16, i16, i16, i16 }
%struct.TfLitePoolParams = type { i32, i32, i32, i32, i32, i32, %struct.anon }
%struct.anon = type { %struct.TfLitePaddingValues }
%struct.TfLitePaddingValues = type { i32, i32, i32, i32 }
%"struct.tflite::ops::builtin::pooling::OpData" = type { %struct.TfLitePaddingValues }
%"struct.tflite::PoolParams" = type { i8, i8, %"struct.tflite::PaddingValues", i32, i32, i32, i32, i32, i32, float, float }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"class.Eigen::Matrix" = type { %"class.Eigen::PlainObjectBase" }
%"class.Eigen::PlainObjectBase" = type { %"class.Eigen::DenseStorage" }
%"class.Eigen::DenseStorage" = type { float*, i64 }

$_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin7pooling11AverageEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin7pooling7MaxEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin7pooling6L2EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin7pooling11AverageEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin7pooling7MaxEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin7pooling6L2EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin7pooling16AverageEvalFloatILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedUint8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling24AverageEvalQuantizedInt8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedInt16ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf = comdat any

$_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph = comdat any

$_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa = comdat any

$_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps = comdat any

$_ZN6tflite3ops7builtin7pooling12MaxEvalFloatILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedUInt8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling20MaxEvalQuantizedInt8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedInt16ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf = comdat any

$_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph = comdat any

$_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa = comdat any

$_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps = comdat any

$_ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite13reference_ops6L2PoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf = comdat any

$_ZN6tflite3ops7builtin7pooling16AverageEvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedUint8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling24AverageEvalQuantizedInt8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedInt16ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite13optimized_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf = comdat any

$_ZN6tflite13optimized_ops13AveragePool32ERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph = comdat any

$_ZN6tflite13optimized_ops13AveragePool16ERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph = comdat any

$_ZN6tflite21optimized_integer_ops13AveragePool16ERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa = comdat any

$_ZN6tflite3ops7builtin7pooling12MaxEvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedUInt8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling20MaxEvalQuantizedInt8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedInt16ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite13optimized_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf = comdat any

$_ZN6tflite13optimized_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph = comdat any

$_ZN6tflite21optimized_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa = comdat any

$_ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = comdat any

$_ZN6tflite13optimized_ops6L2PoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf = comdat any

@_ZZN6tflite3ops7builtin25Register_AVERAGE_POOL_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin7pooling4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin7pooling4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling11AverageEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin21Register_MAX_POOL_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin7pooling4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin7pooling4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling7MaxEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin20Register_L2_POOL_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin7pooling4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin7pooling4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling6L2EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin33Register_AVERAGE_POOL_GENERIC_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin7pooling4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin7pooling4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling11AverageEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin29Register_MAX_POOL_GENERIC_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin7pooling4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin7pooling4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling7MaxEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin28Register_L2_POOL_GENERIC_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin7pooling4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin7pooling4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin7pooling6L2EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.4 = private unnamed_addr constant [64 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/pooling.cc\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"NumDimensions(input)\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"input->type\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"output->type\00", align 1
@.str.13 = private unnamed_addr constant [33 x i8] c"Type %s not currently supported.\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"kTfLiteFloat32\00", align 1
@.str.15 = private unnamed_addr constant [33 x i8] c"Type %d not currently supported.\00", align 1
@__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params = private unnamed_addr constant { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float } { i8 -86, i8 -86, %"struct.tflite::PaddingValues" { i16 -21846, i16 -21846, i16 -21846, i16 -21846 }, [2 x i8] c"\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_ = private unnamed_addr constant [3 x i32] [i32 0, i32 -1082130432, i32 0], align 4
@switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.27 = private unnamed_addr constant [3 x i32] [i32 2139095039, i32 1065353216, i32 1086324736], align 4

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin7pooling4InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 16) #12
  ret i8* %4
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin7pooling4FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #12
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin25Register_AVERAGE_POOL_REFEv() local_unnamed_addr #4 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin25Register_AVERAGE_POOL_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLitePoolParams**
  %5 = load %struct.TfLitePoolParams*, %struct.TfLitePoolParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::pooling::OpData"**
  %8 = load %"struct.tflite::ops::builtin::pooling::OpData"*, %"struct.tflite::ops::builtin::pooling::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %16 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %15, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %16(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 72, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 %12, i32 1) #13
  br label %139

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %19 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %18, align 8
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %26, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %25 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %24, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %25(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 73, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 %21, i32 1) #13
  br label %139

26:                                               ; preds = %17
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 1, i64 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %32 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %31, align 8
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 %33
  br label %35

35:                                               ; preds = %26, %30
  %36 = phi %struct.TfLiteTensor* [ %34, %30 ], [ null, %26 ]
  %37 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %42 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %41, align 8
  %43 = sext i32 %38 to i64
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 %43
  br label %45

45:                                               ; preds = %35, %40
  %46 = phi %struct.TfLiteTensor* [ %44, %40 ], [ null, %35 ]
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %46, i64 0, i32 2
  %48 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %47, align 8
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 4
  br i1 %51, label %55, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %54 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %53, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %54(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i32 %50, i32 4) #13
  br label %139

55:                                               ; preds = %45
  %56 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %46, i64 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %57, %59
  br i1 %60, label %67, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %63 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %62, align 8
  %64 = tail call i8* @TfLiteTypeGetName(i32 %57) #13
  %65 = load i32, i32* %58, align 8
  %66 = tail call i8* @TfLiteTypeGetName(i32 %65) #13
  tail call void (%struct.TfLiteContext*, i8*, ...) %63(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 77, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i8* %64, i8* %66) #13
  br label %139

67:                                               ; preds = %55
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 0
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 1
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 2
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 3
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 4
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 3
  %85 = load i32, i32* %84, align 4
  switch i32 %77, label %101 [
    i32 1, label %86
    i32 2, label %91
  ]

86:                                               ; preds = %67
  %87 = add nsw i32 %81, %73
  %88 = add nsw i32 %87, -1
  %89 = add nsw i32 %79, %71
  %90 = add nsw i32 %89, -1
  br label %96

91:                                               ; preds = %67
  %92 = add nsw i32 %81, %73
  %93 = sub i32 %92, %85
  %94 = add nsw i32 %79, %71
  %95 = sub i32 %94, %83
  br label %96

96:                                               ; preds = %91, %86
  %97 = phi i32 [ %90, %86 ], [ %95, %91 ]
  %98 = phi i32 [ %88, %86 ], [ %93, %91 ]
  %99 = sdiv i32 %98, %81
  %100 = sdiv i32 %97, %79
  br label %101

101:                                              ; preds = %96, %67
  %102 = phi i32 [ 0, %67 ], [ %99, %96 ]
  %103 = phi i32 [ 0, %67 ], [ %100, %96 ]
  %104 = add nsw i32 %103, -1
  %105 = mul nsw i32 %104, %79
  %106 = sub i32 %83, %71
  %107 = add i32 %106, %105
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = and i32 %109, 1
  %111 = lshr i32 %109, 1
  %112 = add nsw i32 %102, -1
  %113 = mul nsw i32 %112, %81
  %114 = sub i32 %85, %73
  %115 = add i32 %114, %113
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  %118 = and i32 %117, 1
  %119 = lshr i32 %117, 1
  %120 = zext i32 %111 to i64
  %121 = shl nuw nsw i64 %120, 32
  %122 = zext i32 %119 to i64
  %123 = or i64 %121, %122
  %124 = zext i32 %110 to i64
  %125 = shl nuw nsw i64 %124, 32
  %126 = zext i32 %118 to i64
  %127 = or i64 %125, %126
  %128 = bitcast %"struct.tflite::ops::builtin::pooling::OpData"* %8 to i64*
  store i64 %123, i64* %128, align 4
  %129 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %8, i64 0, i32 0, i32 2
  %130 = bitcast i32* %129 to i64*
  store i64 %127, i64* %130, align 4
  %131 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 4) #13
  %132 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %131, i64 0, i32 1, i64 0
  store i32 %69, i32* %132, align 4
  %133 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %131, i64 0, i32 1, i64 1
  store i32 %103, i32* %133, align 4
  %134 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %131, i64 0, i32 1, i64 2
  store i32 %102, i32* %134, align 4
  %135 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %131, i64 0, i32 1, i64 3
  store i32 %75, i32* %135, align 4
  %136 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %137 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %136, align 8
  %138 = tail call i32 %137(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %36, %struct.TfLiteIntArray* %131) #13
  br label %139

139:                                              ; preds = %52, %61, %101, %23, %14
  %140 = phi i32 [ 1, %14 ], [ 1, %23 ], [ 1, %52 ], [ 1, %61 ], [ %138, %101 ]
  ret i32 %140
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin7pooling11AverageEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLitePoolParams**
  %5 = load %struct.TfLitePoolParams*, %struct.TfLitePoolParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::pooling::OpData"**
  %8 = load %"struct.tflite::ops::builtin::pooling::OpData"*, %"struct.tflite::ops::builtin::pooling::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %19 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  switch i32 %34, label %39 [
    i32 1, label %35
    i32 3, label %36
    i32 9, label %37
    i32 7, label %38
  ]

35:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling16AverageEvalFloatILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

36:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedUint8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

37:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling24AverageEvalQuantizedInt8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

38:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedInt16ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %41 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %40, align 8
  %42 = tail call i8* @TfLiteTypeGetName(i32 %34) #13
  tail call void (%struct.TfLiteContext*, i8*, ...) %41(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0), i8* %42) #13
  br label %43

43:                                               ; preds = %35, %36, %37, %38, %39
  %44 = phi i32 [ 1, %39 ], [ 0, %38 ], [ 0, %37 ], [ 0, %36 ], [ 0, %35 ]
  ret i32 %44
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin21Register_MAX_POOL_REFEv() local_unnamed_addr #4 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin21Register_MAX_POOL_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLitePoolParams**
  %5 = load %struct.TfLitePoolParams*, %struct.TfLitePoolParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::pooling::OpData"**
  %8 = load %"struct.tflite::ops::builtin::pooling::OpData"*, %"struct.tflite::ops::builtin::pooling::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %16 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %15, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %16(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 72, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 %12, i32 1) #13
  br label %139

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %19 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %18, align 8
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %26, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %25 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %24, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %25(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 73, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 %21, i32 1) #13
  br label %139

26:                                               ; preds = %17
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 1, i64 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %32 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %31, align 8
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 %33
  br label %35

35:                                               ; preds = %26, %30
  %36 = phi %struct.TfLiteTensor* [ %34, %30 ], [ null, %26 ]
  %37 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %42 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %41, align 8
  %43 = sext i32 %38 to i64
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 %43
  br label %45

45:                                               ; preds = %35, %40
  %46 = phi %struct.TfLiteTensor* [ %44, %40 ], [ null, %35 ]
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %46, i64 0, i32 2
  %48 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %47, align 8
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 4
  br i1 %51, label %55, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %54 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %53, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %54(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i32 %50, i32 4) #13
  br label %139

55:                                               ; preds = %45
  %56 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %46, i64 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %57, %59
  br i1 %60, label %67, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %63 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %62, align 8
  %64 = tail call i8* @TfLiteTypeGetName(i32 %57) #13
  %65 = load i32, i32* %58, align 8
  %66 = tail call i8* @TfLiteTypeGetName(i32 %65) #13
  tail call void (%struct.TfLiteContext*, i8*, ...) %63(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 77, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i8* %64, i8* %66) #13
  br label %139

67:                                               ; preds = %55
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 0
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 1
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 2
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 3
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 4
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 3
  %85 = load i32, i32* %84, align 4
  switch i32 %77, label %101 [
    i32 1, label %86
    i32 2, label %91
  ]

86:                                               ; preds = %67
  %87 = add nsw i32 %81, %73
  %88 = add nsw i32 %87, -1
  %89 = add nsw i32 %79, %71
  %90 = add nsw i32 %89, -1
  br label %96

91:                                               ; preds = %67
  %92 = add nsw i32 %81, %73
  %93 = sub i32 %92, %85
  %94 = add nsw i32 %79, %71
  %95 = sub i32 %94, %83
  br label %96

96:                                               ; preds = %91, %86
  %97 = phi i32 [ %90, %86 ], [ %95, %91 ]
  %98 = phi i32 [ %88, %86 ], [ %93, %91 ]
  %99 = sdiv i32 %98, %81
  %100 = sdiv i32 %97, %79
  br label %101

101:                                              ; preds = %96, %67
  %102 = phi i32 [ 0, %67 ], [ %99, %96 ]
  %103 = phi i32 [ 0, %67 ], [ %100, %96 ]
  %104 = add nsw i32 %103, -1
  %105 = mul nsw i32 %104, %79
  %106 = sub i32 %83, %71
  %107 = add i32 %106, %105
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = and i32 %109, 1
  %111 = lshr i32 %109, 1
  %112 = add nsw i32 %102, -1
  %113 = mul nsw i32 %112, %81
  %114 = sub i32 %85, %73
  %115 = add i32 %114, %113
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  %118 = and i32 %117, 1
  %119 = lshr i32 %117, 1
  %120 = zext i32 %111 to i64
  %121 = shl nuw nsw i64 %120, 32
  %122 = zext i32 %119 to i64
  %123 = or i64 %121, %122
  %124 = zext i32 %110 to i64
  %125 = shl nuw nsw i64 %124, 32
  %126 = zext i32 %118 to i64
  %127 = or i64 %125, %126
  %128 = bitcast %"struct.tflite::ops::builtin::pooling::OpData"* %8 to i64*
  store i64 %123, i64* %128, align 4
  %129 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %8, i64 0, i32 0, i32 2
  %130 = bitcast i32* %129 to i64*
  store i64 %127, i64* %130, align 4
  %131 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 4) #13
  %132 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %131, i64 0, i32 1, i64 0
  store i32 %69, i32* %132, align 4
  %133 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %131, i64 0, i32 1, i64 1
  store i32 %103, i32* %133, align 4
  %134 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %131, i64 0, i32 1, i64 2
  store i32 %102, i32* %134, align 4
  %135 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %131, i64 0, i32 1, i64 3
  store i32 %75, i32* %135, align 4
  %136 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %137 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %136, align 8
  %138 = tail call i32 %137(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %36, %struct.TfLiteIntArray* %131) #13
  br label %139

139:                                              ; preds = %52, %61, %101, %23, %14
  %140 = phi i32 [ 1, %14 ], [ 1, %23 ], [ 1, %52 ], [ 1, %61 ], [ %138, %101 ]
  ret i32 %140
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin7pooling7MaxEvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLitePoolParams**
  %5 = load %struct.TfLitePoolParams*, %struct.TfLitePoolParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::pooling::OpData"**
  %8 = load %"struct.tflite::ops::builtin::pooling::OpData"*, %"struct.tflite::ops::builtin::pooling::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %19 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  switch i32 %34, label %39 [
    i32 1, label %35
    i32 3, label %36
    i32 9, label %37
    i32 7, label %38
  ]

35:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling12MaxEvalFloatILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

36:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedUInt8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

37:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling20MaxEvalQuantizedInt8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

38:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedInt16ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %41 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %40, align 8
  %42 = tail call i8* @TfLiteTypeGetName(i32 %34) #13
  tail call void (%struct.TfLiteContext*, i8*, ...) %41(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0), i8* %42) #13
  br label %43

43:                                               ; preds = %35, %36, %37, %38, %39
  %44 = phi i32 [ 1, %39 ], [ 0, %38 ], [ 0, %37 ], [ 0, %36 ], [ 0, %35 ]
  ret i32 %44
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin20Register_L2_POOL_REFEv() local_unnamed_addr #4 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin20Register_L2_POOL_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin7pooling14GenericPrepareILNS2_8PoolTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLitePoolParams**
  %5 = load %struct.TfLitePoolParams*, %struct.TfLitePoolParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::pooling::OpData"**
  %8 = load %"struct.tflite::ops::builtin::pooling::OpData"*, %"struct.tflite::ops::builtin::pooling::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %16 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %15, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %16(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 72, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 %12, i32 1) #13
  br label %146

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %19 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %18, align 8
  %20 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %26, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %25 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %24, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %25(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 73, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 %21, i32 1) #13
  br label %146

26:                                               ; preds = %17
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %19, i64 0, i32 1, i64 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %32 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %31, align 8
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 %33
  br label %35

35:                                               ; preds = %26, %30
  %36 = phi %struct.TfLiteTensor* [ %34, %30 ], [ null, %26 ]
  %37 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %42 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %41, align 8
  %43 = sext i32 %38 to i64
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 %43
  br label %45

45:                                               ; preds = %35, %40
  %46 = phi %struct.TfLiteTensor* [ %44, %40 ], [ null, %35 ]
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %46, i64 0, i32 2
  %48 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %47, align 8
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 4
  br i1 %51, label %55, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %54 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %53, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %54(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 76, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i32 %50, i32 4) #13
  br label %146

55:                                               ; preds = %45
  %56 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %46, i64 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %57, %59
  br i1 %60, label %67, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %63 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %62, align 8
  %64 = tail call i8* @TfLiteTypeGetName(i32 %57) #13
  %65 = load i32, i32* %58, align 8
  %66 = tail call i8* @TfLiteTypeGetName(i32 %65) #13
  tail call void (%struct.TfLiteContext*, i8*, ...) %63(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 77, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i8* %64, i8* %66) #13
  br label %146

67:                                               ; preds = %55
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 0
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 1
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 2
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %48, i64 0, i32 1, i64 3
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 4
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %5, i64 0, i32 3
  %85 = load i32, i32* %84, align 4
  switch i32 %77, label %101 [
    i32 1, label %86
    i32 2, label %91
  ]

86:                                               ; preds = %67
  %87 = add nsw i32 %81, %73
  %88 = add nsw i32 %87, -1
  %89 = add nsw i32 %79, %71
  %90 = add nsw i32 %89, -1
  br label %96

91:                                               ; preds = %67
  %92 = add nsw i32 %81, %73
  %93 = sub i32 %92, %85
  %94 = add nsw i32 %79, %71
  %95 = sub i32 %94, %83
  br label %96

96:                                               ; preds = %91, %86
  %97 = phi i32 [ %90, %86 ], [ %95, %91 ]
  %98 = phi i32 [ %88, %86 ], [ %93, %91 ]
  %99 = sdiv i32 %98, %81
  %100 = sdiv i32 %97, %79
  br label %101

101:                                              ; preds = %96, %67
  %102 = phi i32 [ 0, %67 ], [ %99, %96 ]
  %103 = phi i32 [ 0, %67 ], [ %100, %96 ]
  %104 = add nsw i32 %103, -1
  %105 = mul nsw i32 %104, %79
  %106 = sub i32 %83, %71
  %107 = add i32 %106, %105
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = and i32 %109, 1
  %111 = lshr i32 %109, 1
  %112 = add nsw i32 %102, -1
  %113 = mul nsw i32 %112, %81
  %114 = sub i32 %85, %73
  %115 = add i32 %114, %113
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  %118 = and i32 %117, 1
  %119 = lshr i32 %117, 1
  %120 = zext i32 %111 to i64
  %121 = shl nuw nsw i64 %120, 32
  %122 = zext i32 %119 to i64
  %123 = or i64 %121, %122
  %124 = zext i32 %110 to i64
  %125 = shl nuw nsw i64 %124, 32
  %126 = zext i32 %118 to i64
  %127 = or i64 %125, %126
  %128 = bitcast %"struct.tflite::ops::builtin::pooling::OpData"* %8 to i64*
  store i64 %123, i64* %128, align 4
  %129 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %8, i64 0, i32 0, i32 2
  %130 = bitcast i32* %129 to i64*
  store i64 %127, i64* %130, align 4
  %131 = load i32, i32* %56, align 8
  switch i32 %131, label %137 [
    i32 3, label %132
    i32 9, label %132
  ]

132:                                              ; preds = %101, %101
  %133 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %134 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %133, align 8
  %135 = tail call i8* @TfLiteTypeGetName(i32 %131) #13
  %136 = tail call i8* @TfLiteTypeGetName(i32 1) #13
  tail call void (%struct.TfLiteContext*, i8*, ...) %134(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 101, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i8* %135, i8* %136) #13
  br label %146

137:                                              ; preds = %101
  %138 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 4) #13
  %139 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %138, i64 0, i32 1, i64 0
  store i32 %69, i32* %139, align 4
  %140 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %138, i64 0, i32 1, i64 1
  store i32 %103, i32* %140, align 4
  %141 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %138, i64 0, i32 1, i64 2
  store i32 %102, i32* %141, align 4
  %142 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %138, i64 0, i32 1, i64 3
  store i32 %75, i32* %142, align 4
  %143 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %144 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %143, align 8
  %145 = tail call i32 %144(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %36, %struct.TfLiteIntArray* %138) #13
  br label %146

146:                                              ; preds = %132, %137, %52, %61, %23, %14
  %147 = phi i32 [ 1, %14 ], [ 1, %23 ], [ 1, %52 ], [ 1, %61 ], [ 1, %132 ], [ %145, %137 ]
  ret i32 %147
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin7pooling6L2EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLitePoolParams**
  %5 = load %struct.TfLitePoolParams*, %struct.TfLitePoolParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::pooling::OpData"**
  %8 = load %"struct.tflite::ops::builtin::pooling::OpData"*, %"struct.tflite::ops::builtin::pooling::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %19 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %37

36:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %40

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %39 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %38, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %39(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0), i32 %34) #13
  br label %40

40:                                               ; preds = %36, %37
  %41 = phi i32 [ 0, %36 ], [ 1, %37 ]
  ret i32 %41
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin33Register_AVERAGE_POOL_GENERIC_OPTEv() local_unnamed_addr #4 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin33Register_AVERAGE_POOL_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin7pooling11AverageEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLitePoolParams**
  %5 = load %struct.TfLitePoolParams*, %struct.TfLitePoolParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::pooling::OpData"**
  %8 = load %"struct.tflite::ops::builtin::pooling::OpData"*, %"struct.tflite::ops::builtin::pooling::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %19 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  switch i32 %34, label %39 [
    i32 1, label %35
    i32 3, label %36
    i32 9, label %37
    i32 7, label %38
  ]

35:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling16AverageEvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

36:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedUint8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

37:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling24AverageEvalQuantizedInt8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

38:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedInt16ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %41 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %40, align 8
  %42 = tail call i8* @TfLiteTypeGetName(i32 %34) #13
  tail call void (%struct.TfLiteContext*, i8*, ...) %41(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0), i8* %42) #13
  br label %43

43:                                               ; preds = %35, %36, %37, %38, %39
  %44 = phi i32 [ 1, %39 ], [ 0, %38 ], [ 0, %37 ], [ 0, %36 ], [ 0, %35 ]
  ret i32 %44
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin29Register_MAX_POOL_GENERIC_OPTEv() local_unnamed_addr #4 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin29Register_MAX_POOL_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin7pooling7MaxEvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLitePoolParams**
  %5 = load %struct.TfLitePoolParams*, %struct.TfLitePoolParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::pooling::OpData"**
  %8 = load %"struct.tflite::ops::builtin::pooling::OpData"*, %"struct.tflite::ops::builtin::pooling::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %19 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  switch i32 %34, label %39 [
    i32 1, label %35
    i32 3, label %36
    i32 9, label %37
    i32 7, label %38
  ]

35:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling12MaxEvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

36:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedUInt8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

37:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling20MaxEvalQuantizedInt8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

38:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedInt16ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %43

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %41 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %40, align 8
  %42 = tail call i8* @TfLiteTypeGetName(i32 %34) #13
  tail call void (%struct.TfLiteContext*, i8*, ...) %41(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0), i8* %42) #13
  br label %43

43:                                               ; preds = %35, %36, %37, %38, %39
  %44 = phi i32 [ 1, %39 ], [ 0, %38 ], [ 0, %37 ], [ 0, %36 ], [ 0, %35 ]
  ret i32 %44
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin28Register_L2_POOL_GENERIC_OPTEv() local_unnamed_addr #4 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin28Register_L2_POOL_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin7pooling6L2EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #2 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLitePoolParams**
  %5 = load %struct.TfLitePoolParams*, %struct.TfLitePoolParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::pooling::OpData"**
  %8 = load %"struct.tflite::ops::builtin::pooling::OpData"*, %"struct.tflite::ops::builtin::pooling::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %19 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %37

36:                                               ; preds = %31
  tail call void @_ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLitePoolParams* %5, %"struct.tflite::ops::builtin::pooling::OpData"* %8, %struct.TfLiteTensor* %32, %struct.TfLiteTensor* %20)
  br label %40

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %39 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %38, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %39(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0), i32 %34) #13
  br label %40

40:                                               ; preds = %36, %37
  %41 = phi i32 [ 0, %36 ], [ 1, %37 ]
  ret i32 %41
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin24Register_AVERAGE_POOL_2DEv() local_unnamed_addr #4 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin33Register_AVERAGE_POOL_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin20Register_MAX_POOL_2DEv() local_unnamed_addr #4 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin29Register_MAX_POOL_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin19Register_L2_POOL_2DEv() local_unnamed_addr #4 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin28Register_L2_POOL_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling16AverageEvalFloatILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca %"struct.tflite::PoolParams", align 4
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -1
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %14, label %21

14:                                               ; preds = %6
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %12 to i64
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.27, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %6, %14
  %22 = phi i32 [ %17, %14 ], [ -8388609, %6 ]
  %23 = phi i32 [ %20, %14 ], [ 2139095039, %6 ]
  %24 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %24) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 36, i1 false)
  %25 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 3
  %26 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %30 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = trunc i32 %32 to i16
  %34 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = trunc i32 %36 to i16
  %38 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 0
  store i16 %37, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 9
  %40 = bitcast float* %39 to i32*
  store i32 %22, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 10
  %42 = bitcast float* %41 to i32*
  store i32 %23, i32* %42, align 4
  %43 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #13
  %44 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %21
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %46, align 8, !alias.scope !2
  br label %75

47:                                               ; preds = %21
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %49 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %48, align 8, !noalias !2
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !2
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 1, i64 0
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %51, i32* %53, align 8, !alias.scope !2
  %54 = icmp sgt i32 %51, 5
  br i1 %54, label %55, label %62

55:                                               ; preds = %47
  %56 = sext i32 %51 to i64
  %57 = shl nsw i64 %56, 2
  %58 = tail call i8* @_Znam(i64 %57) #12, !noalias !2
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 8, !alias.scope !2
  %61 = bitcast i8* %58 to i32*
  br label %67

62:                                               ; preds = %47
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %64 = bitcast %union.anon* %63 to i32*
  %65 = sext i32 %51 to i64
  %66 = shl nsw i64 %65, 2
  br label %67

67:                                               ; preds = %62, %55
  %68 = phi i64 [ %57, %55 ], [ %66, %62 ]
  %69 = phi i32* [ %61, %55 ], [ %64, %62 ]
  %70 = bitcast i32* %69 to i8*
  %71 = bitcast i32* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %71, i64 %68, i1 false) #13
  %72 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %73 = bitcast %union.TfLitePtrUnion* %72 to float**
  %74 = load float*, float** %73, align 8
  br label %75

75:                                               ; preds = %45, %67
  %76 = phi float* [ %74, %67 ], [ null, %45 ]
  %77 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77) #13
  %78 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %80, align 8, !alias.scope !5
  br label %109

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %82, align 8, !noalias !5
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 4, !noalias !5
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 1, i64 0
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %85, i32* %87, align 8, !alias.scope !5
  %88 = icmp sgt i32 %85, 5
  br i1 %88, label %89, label %96

89:                                               ; preds = %81
  %90 = sext i32 %85 to i64
  %91 = shl nsw i64 %90, 2
  %92 = tail call i8* @_Znam(i64 %91) #12, !noalias !5
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %94 = bitcast i32** %93 to i8**
  store i8* %92, i8** %94, align 8, !alias.scope !5
  %95 = bitcast i8* %92 to i32*
  br label %101

96:                                               ; preds = %81
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %98 = bitcast %union.anon* %97 to i32*
  %99 = sext i32 %85 to i64
  %100 = shl nsw i64 %99, 2
  br label %101

101:                                              ; preds = %96, %89
  %102 = phi i64 [ %91, %89 ], [ %100, %96 ]
  %103 = phi i32* [ %95, %89 ], [ %98, %96 ]
  %104 = bitcast i32* %103 to i8*
  %105 = bitcast i32* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %102, i1 false) #13
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %107 = bitcast %union.TfLitePtrUnion* %106 to float**
  %108 = load float*, float** %107, align 8
  br label %109

109:                                              ; preds = %79, %101
  %110 = phi float* [ %108, %101 ], [ null, %79 ]
  call void @_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %7, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %8, float* %76, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, float* %110)
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp sgt i32 %112, 5
  br i1 %113, label %114, label %120

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %116 = load i32*, i32** %115, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = bitcast i32* %116 to i8*
  call void @_ZdaPv(i8* %119) #12
  br label %120

120:                                              ; preds = %109, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77) #13
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp sgt i32 %122, 5
  br i1 %123, label %124, label %130

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %124
  %129 = bitcast i32* %126 to i8*
  call void @_ZdaPv(i8* %129) #12
  br label %130

130:                                              ; preds = %120, %124, %128
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %24) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedUint8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !8
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !8
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !8
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !8
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !8
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !8
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i8* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !11
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !11
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !11
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !11
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !11
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !11
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i8* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling24AverageEvalQuantizedInt8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !14
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !14
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !14
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !14
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !14
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !14
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i8* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !17
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !17
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !17
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !17
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !17
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !17
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i8* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedInt16ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !20
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !20
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !20
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !20
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !20
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !20
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i16**
  %67 = load i16*, i16** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i16* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !23
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !23
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !23
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !23
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !23
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !23
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i16**
  %101 = load i16*, i16** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i16* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i16* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i16* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %8 = load i32, i32* %6, align 8
  %9 = icmp sgt i32 %8, 5
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %11 = load i32, i32* %7, align 8
  %12 = icmp sgt i32 %11, 5
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %14 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = bitcast %union.anon* %10 to i32*
  %17 = select i1 %9, i32* %15, i32* %16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %20 = load i32*, i32** %19, align 8
  %21 = bitcast %union.anon* %13 to [5 x i32]*
  %22 = bitcast %union.anon* %13 to i32*
  %23 = select i1 %12, i32* %20, i32* %22
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, %18
  %26 = select i1 %25, i32 %24, i32 %18
  %27 = getelementptr inbounds i32, i32* %15, i64 3
  %28 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = select i1 %9, i32* %27, i32* %29
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %20, i64 3
  %33 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = select i1 %12, i32* %32, i32* %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, %31
  %38 = select i1 %37, i32 %36, i32 %31
  %39 = getelementptr inbounds i32, i32* %15, i64 1
  %40 = getelementptr inbounds i32, i32* %15, i64 2
  %41 = bitcast %union.anon* %10 to [5 x i32]*
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %41, i64 0, i64 1
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %44 = bitcast [16 x i8]* %43 to i32*
  %45 = select i1 %9, i32* %39, i32* %42
  %46 = select i1 %9, i32* %40, i32* %44
  %47 = load i32, i32* %45, align 4
  %48 = load i32, i32* %46, align 4
  %49 = getelementptr inbounds i32, i32* %20, i64 1
  %50 = getelementptr inbounds i32, i32* %20, i64 2
  %51 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 1
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %53 = bitcast [16 x i8]* %52 to i32*
  %54 = select i1 %12, i32* %49, i32* %51
  %55 = select i1 %12, i32* %50, i32* %53
  %56 = load i32, i32* %54, align 4
  %57 = load i32, i32* %55, align 4
  %58 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %26, 0
  br i1 %62, label %63, label %77

63:                                               ; preds = %5
  %64 = icmp sgt i32 %56, 0
  %65 = icmp sgt i32 %57, 0
  %66 = icmp sgt i32 %38, 0
  %67 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %68 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %71 = getelementptr inbounds i32, i32* %16, i64 1
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 9
  %73 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 10
  %74 = getelementptr inbounds i32, i32* %22, i64 1
  br label %75

75:                                               ; preds = %63, %82
  %76 = phi i32 [ 0, %63 ], [ %83, %82 ]
  br i1 %64, label %78, label %82

77:                                               ; preds = %82, %5
  ret void

78:                                               ; preds = %75, %90
  %79 = phi i32 [ %91, %90 ], [ 0, %75 ]
  br i1 %65, label %80, label %90

80:                                               ; preds = %78
  %81 = mul nsw i32 %79, %59
  br label %85

82:                                               ; preds = %90, %75
  %83 = add nuw nsw i32 %76, 1
  %84 = icmp slt i32 %83, %26
  br i1 %84, label %75, label %77

85:                                               ; preds = %93, %80
  %86 = phi i32 [ 0, %80 ], [ %95, %93 ]
  %87 = phi i32 [ 0, %80 ], [ %94, %93 ]
  br i1 %66, label %88, label %93

88:                                               ; preds = %85
  %89 = mul nsw i32 %87, %61
  br label %97

90:                                               ; preds = %93, %78
  %91 = add nuw nsw i32 %79, 1
  %92 = icmp eq i32 %91, %56
  br i1 %92, label %82, label %78

93:                                               ; preds = %164, %85
  %94 = add nuw nsw i32 %87, 1
  %95 = sub i32 %86, %61
  %96 = icmp eq i32 %94, %57
  br i1 %96, label %90, label %85

97:                                               ; preds = %88, %164
  %98 = phi i32 [ 0, %88 ], [ %185, %164 ]
  %99 = load i16, i16* %67, align 2
  %100 = sext i16 %99 to i32
  %101 = sub nsw i32 %89, %100
  %102 = load i16, i16* %68, align 2
  %103 = sext i16 %102 to i32
  %104 = sub nsw i32 %81, %103
  %105 = sub nsw i32 0, %101
  %106 = icmp sgt i32 %105, 0
  %107 = select i1 %106, i32 %105, i32 0
  %108 = sub nsw i32 %48, %101
  %109 = load i32, i32* %69, align 4
  %110 = icmp slt i32 %108, %109
  %111 = select i1 %110, i32 %108, i32 %109
  %112 = sub nsw i32 0, %104
  %113 = icmp sgt i32 %112, 0
  %114 = select i1 %113, i32 %112, i32 0
  %115 = sub nsw i32 %47, %104
  %116 = load i32, i32* %70, align 4
  %117 = icmp slt i32 %115, %116
  %118 = select i1 %117, i32 %115, i32 %116
  %119 = icmp slt i32 %114, %118
  br i1 %119, label %120, label %164

120:                                              ; preds = %97
  %121 = icmp slt i32 %107, %111
  %122 = load i32, i32* %71, align 4
  %123 = mul nsw i32 %122, %76
  %124 = load i32, i32* %44, align 4
  %125 = load i32, i32* %29, align 4
  %126 = add i32 %86, %100
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = zext i32 %128 to i64
  %130 = sext i32 %111 to i64
  %131 = sub nsw i64 %130, %129
  %132 = xor i64 %129, -1
  %133 = and i64 %131, 1
  %134 = icmp eq i64 %133, 0
  %135 = add nsw i32 %107, %101
  %136 = add nuw nsw i64 %129, 1
  %137 = add nuw nsw i32 %107, 1
  %138 = sub nsw i64 0, %130
  %139 = icmp eq i64 %132, %138
  br label %140

140:                                              ; preds = %120, %187
  %141 = phi i32 [ %114, %120 ], [ %190, %187 ]
  %142 = phi float [ 0.000000e+00, %120 ], [ %189, %187 ]
  %143 = phi float [ 0.000000e+00, %120 ], [ %188, %187 ]
  br i1 %121, label %144, label %187

144:                                              ; preds = %140
  %145 = add nsw i32 %141, %104
  %146 = add nsw i32 %145, %123
  %147 = mul nsw i32 %146, %124
  br i1 %134, label %157, label %148

148:                                              ; preds = %144
  %149 = add nsw i32 %135, %147
  %150 = mul nsw i32 %149, %125
  %151 = add nsw i32 %150, %98
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %2, i64 %152
  %154 = load float, float* %153, align 4
  %155 = fadd float %143, %154
  %156 = fadd float %142, 1.000000e+00
  br label %157

157:                                              ; preds = %148, %144
  %158 = phi i64 [ %136, %148 ], [ %129, %144 ]
  %159 = phi i32 [ %137, %148 ], [ %107, %144 ]
  %160 = phi float [ %156, %148 ], [ %142, %144 ]
  %161 = phi float [ %155, %148 ], [ %143, %144 ]
  %162 = phi float [ %155, %148 ], [ undef, %144 ]
  %163 = phi float [ %156, %148 ], [ undef, %144 ]
  br i1 %139, label %187, label %192

164:                                              ; preds = %187, %97
  %165 = phi float [ 0.000000e+00, %97 ], [ %188, %187 ]
  %166 = phi float [ 0.000000e+00, %97 ], [ %189, %187 ]
  %167 = fdiv float %165, %166
  %168 = load float, float* %72, align 4
  %169 = load float, float* %73, align 4
  %170 = fcmp olt float %167, %168
  %171 = select i1 %170, float %168, float %167
  %172 = fcmp ogt float %171, %169
  %173 = select i1 %172, float %169, float %171
  %174 = load i32, i32* %74, align 4
  %175 = mul nsw i32 %174, %76
  %176 = add nsw i32 %175, %79
  %177 = load i32, i32* %53, align 4
  %178 = mul nsw i32 %176, %177
  %179 = add nsw i32 %178, %87
  %180 = load i32, i32* %34, align 4
  %181 = mul nsw i32 %179, %180
  %182 = add nsw i32 %181, %98
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %4, i64 %183
  store float %173, float* %184, align 4
  %185 = add nuw nsw i32 %98, 1
  %186 = icmp slt i32 %185, %38
  br i1 %186, label %97, label %93

187:                                              ; preds = %157, %192, %140
  %188 = phi float [ %143, %140 ], [ %162, %157 ], [ %214, %192 ]
  %189 = phi float [ %142, %140 ], [ %163, %157 ], [ %215, %192 ]
  %190 = add nuw nsw i32 %141, 1
  %191 = icmp slt i32 %190, %118
  br i1 %191, label %140, label %164

192:                                              ; preds = %157, %192
  %193 = phi i64 [ %216, %192 ], [ %158, %157 ]
  %194 = phi i32 [ %217, %192 ], [ %159, %157 ]
  %195 = phi float [ %215, %192 ], [ %160, %157 ]
  %196 = phi float [ %214, %192 ], [ %161, %157 ]
  %197 = add nsw i32 %194, %101
  %198 = add nsw i32 %197, %147
  %199 = mul nsw i32 %198, %125
  %200 = add nsw i32 %199, %98
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds float, float* %2, i64 %201
  %203 = load float, float* %202, align 4
  %204 = fadd float %196, %203
  %205 = fadd float %195, 1.000000e+00
  %206 = add nuw nsw i32 %194, 1
  %207 = add nsw i32 %206, %101
  %208 = add nsw i32 %207, %147
  %209 = mul nsw i32 %208, %125
  %210 = add nsw i32 %209, %98
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds float, float* %2, i64 %211
  %213 = load float, float* %212, align 4
  %214 = fadd float %204, %213
  %215 = fadd float %205, 1.000000e+00
  %216 = add nuw nsw i64 %193, 2
  %217 = add nuw nsw i32 %194, 2
  %218 = icmp slt i64 %216, %130
  br i1 %218, label %192, label %187
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #1

declare i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext*, i32, %struct.TfLiteTensor*, i32*, i32*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %8 = load i32, i32* %6, align 8
  %9 = icmp sgt i32 %8, 5
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %11 = load i32, i32* %7, align 8
  %12 = icmp sgt i32 %11, 5
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %14 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = bitcast %union.anon* %10 to i32*
  %17 = select i1 %9, i32* %15, i32* %16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %20 = load i32*, i32** %19, align 8
  %21 = bitcast %union.anon* %13 to [5 x i32]*
  %22 = bitcast %union.anon* %13 to i32*
  %23 = select i1 %12, i32* %20, i32* %22
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, %18
  %26 = select i1 %25, i32 %24, i32 %18
  %27 = getelementptr inbounds i32, i32* %15, i64 3
  %28 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = select i1 %9, i32* %27, i32* %29
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %20, i64 3
  %33 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = select i1 %12, i32* %32, i32* %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, %31
  %38 = select i1 %37, i32 %36, i32 %31
  %39 = getelementptr inbounds i32, i32* %15, i64 1
  %40 = getelementptr inbounds i32, i32* %15, i64 2
  %41 = bitcast %union.anon* %10 to [5 x i32]*
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %41, i64 0, i64 1
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %44 = bitcast [16 x i8]* %43 to i32*
  %45 = select i1 %9, i32* %39, i32* %42
  %46 = select i1 %9, i32* %40, i32* %44
  %47 = load i32, i32* %45, align 4
  %48 = load i32, i32* %46, align 4
  %49 = getelementptr inbounds i32, i32* %20, i64 1
  %50 = getelementptr inbounds i32, i32* %20, i64 2
  %51 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 1
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %53 = bitcast [16 x i8]* %52 to i32*
  %54 = select i1 %12, i32* %49, i32* %51
  %55 = select i1 %12, i32* %50, i32* %53
  %56 = load i32, i32* %54, align 4
  %57 = load i32, i32* %55, align 4
  %58 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %26, 0
  br i1 %62, label %63, label %77

63:                                               ; preds = %5
  %64 = icmp sgt i32 %56, 0
  %65 = icmp sgt i32 %57, 0
  %66 = icmp sgt i32 %38, 0
  %67 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %68 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %71 = getelementptr inbounds i32, i32* %16, i64 1
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %73 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %74 = getelementptr inbounds i32, i32* %22, i64 1
  br label %75

75:                                               ; preds = %63, %83
  %76 = phi i32 [ 0, %63 ], [ %84, %83 ]
  br i1 %64, label %78, label %83

77:                                               ; preds = %83, %5
  ret void

78:                                               ; preds = %75, %92
  %79 = phi i32 [ %93, %92 ], [ 0, %75 ]
  %80 = mul i32 %59, %79
  br i1 %65, label %81, label %92

81:                                               ; preds = %78
  %82 = mul nsw i32 %79, %59
  br label %86

83:                                               ; preds = %92, %75
  %84 = add nuw nsw i32 %76, 1
  %85 = icmp slt i32 %84, %26
  br i1 %85, label %75, label %77

86:                                               ; preds = %95, %81
  %87 = phi i32 [ 0, %81 ], [ %97, %95 ]
  %88 = phi i32 [ 0, %81 ], [ %96, %95 ]
  %89 = mul i32 %61, %88
  br i1 %66, label %90, label %95

90:                                               ; preds = %86
  %91 = mul nsw i32 %88, %61
  br label %99

92:                                               ; preds = %95, %78
  %93 = add nuw nsw i32 %79, 1
  %94 = icmp eq i32 %93, %56
  br i1 %94, label %83, label %78

95:                                               ; preds = %218, %86
  %96 = add nuw nsw i32 %88, 1
  %97 = sub i32 %87, %61
  %98 = icmp eq i32 %96, %57
  br i1 %98, label %92, label %86

99:                                               ; preds = %90, %218
  %100 = phi i32 [ 0, %90 ], [ %242, %218 ]
  %101 = load i16, i16* %67, align 2
  %102 = sext i16 %101 to i32
  %103 = sub nsw i32 %91, %102
  %104 = load i16, i16* %68, align 2
  %105 = sext i16 %104 to i32
  %106 = sub nsw i32 %82, %105
  %107 = sub nsw i32 0, %103
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = sub nsw i32 %48, %103
  %111 = load i32, i32* %69, align 4
  %112 = icmp slt i32 %110, %111
  %113 = select i1 %112, i32 %110, i32 %111
  %114 = sub nsw i32 0, %106
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = sub nsw i32 %47, %106
  %118 = load i32, i32* %70, align 4
  %119 = icmp slt i32 %117, %118
  %120 = select i1 %119, i32 %117, i32 %118
  %121 = icmp slt i32 %116, %120
  br i1 %121, label %122, label %218

122:                                              ; preds = %99
  %123 = add i32 %89, %100
  %124 = icmp slt i32 %109, %113
  %125 = load i32, i32* %71, align 4
  %126 = mul nsw i32 %125, %76
  %127 = load i32, i32* %44, align 4
  %128 = load i32, i32* %29, align 4
  %129 = add i32 %87, %102
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = zext i32 %131 to i64
  %133 = sext i32 %113 to i64
  %134 = sub nsw i64 %133, %132
  %135 = xor i64 %132, -1
  %136 = add nsw i64 %135, %133
  %137 = add i32 %131, %123
  %138 = add i32 %80, %116
  %139 = mul i32 %76, %125
  %140 = add i32 %138, %139
  %141 = sub i32 %140, %105
  %142 = mul i32 %127, %141
  %143 = add i32 %137, %142
  %144 = sub i32 %143, %102
  %145 = icmp ult i64 %134, 8
  %146 = icmp ne i32 %128, 1
  %147 = trunc i64 %136 to i32
  %148 = icmp ugt i64 %136, 4294967295
  %149 = and i64 %134, -8
  %150 = add nsw i64 %149, %132
  %151 = trunc i64 %149 to i32
  %152 = add i32 %109, %151
  %153 = icmp eq i64 %134, %149
  br label %154

154:                                              ; preds = %122, %244
  %155 = phi i32 [ 0, %122 ], [ %249, %244 ]
  %156 = phi i32 [ %116, %122 ], [ %247, %244 ]
  %157 = phi i32 [ 0, %122 ], [ %246, %244 ]
  %158 = phi i32 [ 0, %122 ], [ %245, %244 ]
  %159 = mul i32 %127, %155
  %160 = add i32 %144, %159
  br i1 %124, label %161, label %244

161:                                              ; preds = %154
  %162 = add nsw i32 %156, %106
  %163 = add nsw i32 %162, %126
  %164 = mul nsw i32 %163, %127
  br i1 %145, label %165, label %170

165:                                              ; preds = %205, %170, %161
  %166 = phi i64 [ %132, %170 ], [ %132, %161 ], [ %150, %205 ]
  %167 = phi i32 [ %109, %170 ], [ %109, %161 ], [ %152, %205 ]
  %168 = phi i32 [ %157, %170 ], [ %157, %161 ], [ %217, %205 ]
  %169 = phi i32 [ %158, %170 ], [ %158, %161 ], [ %211, %205 ]
  br label %250

170:                                              ; preds = %161
  %171 = add i32 %160, %147
  %172 = icmp slt i32 %171, %160
  %173 = or i1 %172, %148
  %174 = or i1 %146, %173
  br i1 %174, label %165, label %175

175:                                              ; preds = %170
  %176 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %157, i32 0
  %177 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %158, i32 0
  br label %178

178:                                              ; preds = %178, %175
  %179 = phi i64 [ 0, %175 ], [ %203, %178 ]
  %180 = phi <4 x i32> [ %176, %175 ], [ %201, %178 ]
  %181 = phi <4 x i32> [ zeroinitializer, %175 ], [ %202, %178 ]
  %182 = phi <4 x i32> [ %177, %175 ], [ %199, %178 ]
  %183 = phi <4 x i32> [ zeroinitializer, %175 ], [ %200, %178 ]
  %184 = trunc i64 %179 to i32
  %185 = add i32 %109, %184
  %186 = add nsw i32 %185, %103
  %187 = add nsw i32 %186, %164
  %188 = mul nsw i32 %187, %128
  %189 = add nsw i32 %188, %100
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %2, i64 %190
  %192 = bitcast i8* %191 to <4 x i8>*
  %193 = load <4 x i8>, <4 x i8>* %192, align 1
  %194 = getelementptr inbounds i8, i8* %191, i64 4
  %195 = bitcast i8* %194 to <4 x i8>*
  %196 = load <4 x i8>, <4 x i8>* %195, align 1
  %197 = zext <4 x i8> %193 to <4 x i32>
  %198 = zext <4 x i8> %196 to <4 x i32>
  %199 = add nsw <4 x i32> %182, %197
  %200 = add nuw nsw <4 x i32> %183, %198
  %201 = add nsw <4 x i32> %180, <i32 1, i32 1, i32 1, i32 1>
  %202 = add nuw nsw <4 x i32> %181, <i32 1, i32 1, i32 1, i32 1>
  %203 = add i64 %179, 8
  %204 = icmp eq i64 %203, %149
  br i1 %204, label %205, label %178, !llvm.loop !26

205:                                              ; preds = %178
  %206 = add <4 x i32> %200, %199
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %208 = add <4 x i32> %206, %207
  %209 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %210 = add <4 x i32> %208, %209
  %211 = extractelement <4 x i32> %210, i32 0
  %212 = add <4 x i32> %202, %201
  %213 = shufflevector <4 x i32> %212, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %214 = add <4 x i32> %212, %213
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %216 = add <4 x i32> %214, %215
  %217 = extractelement <4 x i32> %216, i32 0
  br i1 %153, label %244, label %165

218:                                              ; preds = %244, %99
  %219 = phi i32 [ 0, %99 ], [ %245, %244 ]
  %220 = phi i32 [ 0, %99 ], [ %246, %244 ]
  %221 = sdiv i32 %220, 2
  %222 = add nsw i32 %221, %219
  %223 = sdiv i32 %222, %220
  %224 = load i32, i32* %72, align 4
  %225 = icmp slt i32 %223, %224
  %226 = select i1 %225, i32 %224, i32 %223
  %227 = load i32, i32* %73, align 4
  %228 = icmp slt i32 %227, %226
  %229 = select i1 %228, i32 %227, i32 %226
  %230 = trunc i32 %229 to i8
  %231 = load i32, i32* %74, align 4
  %232 = mul nsw i32 %231, %76
  %233 = add nsw i32 %232, %79
  %234 = load i32, i32* %53, align 4
  %235 = mul nsw i32 %233, %234
  %236 = add nsw i32 %235, %88
  %237 = load i32, i32* %34, align 4
  %238 = mul nsw i32 %236, %237
  %239 = add nsw i32 %238, %100
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %4, i64 %240
  store i8 %230, i8* %241, align 1
  %242 = add nuw nsw i32 %100, 1
  %243 = icmp slt i32 %242, %38
  br i1 %243, label %99, label %95

244:                                              ; preds = %250, %205, %154
  %245 = phi i32 [ %158, %154 ], [ %211, %205 ], [ %263, %250 ]
  %246 = phi i32 [ %157, %154 ], [ %217, %205 ], [ %264, %250 ]
  %247 = add nuw nsw i32 %156, 1
  %248 = icmp slt i32 %247, %120
  %249 = add i32 %155, 1
  br i1 %248, label %154, label %218

250:                                              ; preds = %165, %250
  %251 = phi i64 [ %265, %250 ], [ %166, %165 ]
  %252 = phi i32 [ %266, %250 ], [ %167, %165 ]
  %253 = phi i32 [ %264, %250 ], [ %168, %165 ]
  %254 = phi i32 [ %263, %250 ], [ %169, %165 ]
  %255 = add nsw i32 %252, %103
  %256 = add nsw i32 %255, %164
  %257 = mul nsw i32 %256, %128
  %258 = add nsw i32 %257, %100
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds i8, i8* %2, i64 %259
  %261 = load i8, i8* %260, align 1
  %262 = zext i8 %261 to i32
  %263 = add nsw i32 %254, %262
  %264 = add nsw i32 %253, 1
  %265 = add nuw nsw i64 %251, 1
  %266 = add nuw nsw i32 %252, 1
  %267 = icmp slt i64 %265, %133
  br i1 %267, label %250, label %244, !llvm.loop !28
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %8 = load i32, i32* %6, align 8
  %9 = icmp sgt i32 %8, 5
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %11 = load i32, i32* %7, align 8
  %12 = icmp sgt i32 %11, 5
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %14 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = bitcast %union.anon* %10 to i32*
  %17 = select i1 %9, i32* %15, i32* %16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %20 = load i32*, i32** %19, align 8
  %21 = bitcast %union.anon* %13 to [5 x i32]*
  %22 = bitcast %union.anon* %13 to i32*
  %23 = select i1 %12, i32* %20, i32* %22
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, %18
  %26 = select i1 %25, i32 %24, i32 %18
  %27 = getelementptr inbounds i32, i32* %15, i64 3
  %28 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = select i1 %9, i32* %27, i32* %29
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %20, i64 3
  %33 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = select i1 %12, i32* %32, i32* %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, %31
  %38 = select i1 %37, i32 %36, i32 %31
  %39 = getelementptr inbounds i32, i32* %15, i64 1
  %40 = getelementptr inbounds i32, i32* %15, i64 2
  %41 = bitcast %union.anon* %10 to [5 x i32]*
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %41, i64 0, i64 1
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %44 = bitcast [16 x i8]* %43 to i32*
  %45 = select i1 %9, i32* %39, i32* %42
  %46 = select i1 %9, i32* %40, i32* %44
  %47 = load i32, i32* %45, align 4
  %48 = load i32, i32* %46, align 4
  %49 = getelementptr inbounds i32, i32* %20, i64 1
  %50 = getelementptr inbounds i32, i32* %20, i64 2
  %51 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 1
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %53 = bitcast [16 x i8]* %52 to i32*
  %54 = select i1 %12, i32* %49, i32* %51
  %55 = select i1 %12, i32* %50, i32* %53
  %56 = load i32, i32* %54, align 4
  %57 = load i32, i32* %55, align 4
  %58 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %26, 0
  br i1 %62, label %63, label %77

63:                                               ; preds = %5
  %64 = icmp sgt i32 %56, 0
  %65 = icmp sgt i32 %57, 0
  %66 = icmp sgt i32 %38, 0
  %67 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %68 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %71 = getelementptr inbounds i32, i32* %16, i64 1
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %73 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %74 = getelementptr inbounds i32, i32* %22, i64 1
  br label %75

75:                                               ; preds = %63, %83
  %76 = phi i32 [ 0, %63 ], [ %84, %83 ]
  br i1 %64, label %78, label %83

77:                                               ; preds = %83, %5
  ret void

78:                                               ; preds = %75, %92
  %79 = phi i32 [ %93, %92 ], [ 0, %75 ]
  %80 = mul i32 %59, %79
  br i1 %65, label %81, label %92

81:                                               ; preds = %78
  %82 = mul nsw i32 %79, %59
  br label %86

83:                                               ; preds = %92, %75
  %84 = add nuw nsw i32 %76, 1
  %85 = icmp slt i32 %84, %26
  br i1 %85, label %75, label %77

86:                                               ; preds = %95, %81
  %87 = phi i32 [ 0, %81 ], [ %97, %95 ]
  %88 = phi i32 [ 0, %81 ], [ %96, %95 ]
  %89 = mul i32 %61, %88
  br i1 %66, label %90, label %95

90:                                               ; preds = %86
  %91 = mul nsw i32 %88, %61
  br label %99

92:                                               ; preds = %95, %78
  %93 = add nuw nsw i32 %79, 1
  %94 = icmp eq i32 %93, %56
  br i1 %94, label %83, label %78

95:                                               ; preds = %223, %86
  %96 = add nuw nsw i32 %88, 1
  %97 = sub i32 %87, %61
  %98 = icmp eq i32 %96, %57
  br i1 %98, label %92, label %86

99:                                               ; preds = %90, %223
  %100 = phi i32 [ 0, %90 ], [ %247, %223 ]
  %101 = load i16, i16* %67, align 2
  %102 = sext i16 %101 to i32
  %103 = sub nsw i32 %91, %102
  %104 = load i16, i16* %68, align 2
  %105 = sext i16 %104 to i32
  %106 = sub nsw i32 %82, %105
  %107 = sub nsw i32 0, %103
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = sub nsw i32 %48, %103
  %111 = load i32, i32* %69, align 4
  %112 = icmp slt i32 %110, %111
  %113 = select i1 %112, i32 %110, i32 %111
  %114 = sub nsw i32 0, %106
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = sub nsw i32 %47, %106
  %118 = load i32, i32* %70, align 4
  %119 = icmp slt i32 %117, %118
  %120 = select i1 %119, i32 %117, i32 %118
  %121 = icmp slt i32 %116, %120
  br i1 %121, label %122, label %223

122:                                              ; preds = %99
  %123 = add i32 %89, %100
  %124 = icmp slt i32 %109, %113
  %125 = load i32, i32* %71, align 4
  %126 = mul nsw i32 %125, %76
  %127 = load i32, i32* %44, align 4
  %128 = load i32, i32* %29, align 4
  %129 = add i32 %87, %102
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = zext i32 %131 to i64
  %133 = sext i32 %113 to i64
  %134 = sub nsw i64 %133, %132
  %135 = xor i64 %132, -1
  %136 = add nsw i64 %135, %133
  %137 = add i32 %131, %123
  %138 = add i32 %80, %116
  %139 = mul i32 %76, %125
  %140 = add i32 %138, %139
  %141 = sub i32 %140, %105
  %142 = mul i32 %127, %141
  %143 = add i32 %137, %142
  %144 = sub i32 %143, %102
  %145 = icmp ult i64 %134, 8
  %146 = icmp ne i32 %128, 1
  %147 = trunc i64 %136 to i32
  %148 = icmp ugt i64 %136, 4294967295
  %149 = and i64 %134, -8
  %150 = add nsw i64 %149, %132
  %151 = trunc i64 %149 to i32
  %152 = add i32 %109, %151
  %153 = icmp eq i64 %134, %149
  br label %154

154:                                              ; preds = %122, %249
  %155 = phi i32 [ 0, %122 ], [ %254, %249 ]
  %156 = phi i32 [ %116, %122 ], [ %252, %249 ]
  %157 = phi i32 [ 0, %122 ], [ %251, %249 ]
  %158 = phi i32 [ 0, %122 ], [ %250, %249 ]
  %159 = mul i32 %127, %155
  %160 = add i32 %144, %159
  br i1 %124, label %161, label %249

161:                                              ; preds = %154
  %162 = add nsw i32 %156, %106
  %163 = add nsw i32 %162, %126
  %164 = mul nsw i32 %163, %127
  br i1 %145, label %165, label %170

165:                                              ; preds = %205, %170, %161
  %166 = phi i64 [ %132, %170 ], [ %132, %161 ], [ %150, %205 ]
  %167 = phi i32 [ %109, %170 ], [ %109, %161 ], [ %152, %205 ]
  %168 = phi i32 [ %157, %170 ], [ %157, %161 ], [ %217, %205 ]
  %169 = phi i32 [ %158, %170 ], [ %158, %161 ], [ %211, %205 ]
  br label %255

170:                                              ; preds = %161
  %171 = add i32 %160, %147
  %172 = icmp slt i32 %171, %160
  %173 = or i1 %172, %148
  %174 = or i1 %146, %173
  br i1 %174, label %165, label %175

175:                                              ; preds = %170
  %176 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %157, i32 0
  %177 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %158, i32 0
  br label %178

178:                                              ; preds = %178, %175
  %179 = phi i64 [ 0, %175 ], [ %203, %178 ]
  %180 = phi <4 x i32> [ %176, %175 ], [ %201, %178 ]
  %181 = phi <4 x i32> [ zeroinitializer, %175 ], [ %202, %178 ]
  %182 = phi <4 x i32> [ %177, %175 ], [ %199, %178 ]
  %183 = phi <4 x i32> [ zeroinitializer, %175 ], [ %200, %178 ]
  %184 = trunc i64 %179 to i32
  %185 = add i32 %109, %184
  %186 = add nsw i32 %185, %103
  %187 = add nsw i32 %186, %164
  %188 = mul nsw i32 %187, %128
  %189 = add nsw i32 %188, %100
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %2, i64 %190
  %192 = bitcast i8* %191 to <4 x i8>*
  %193 = load <4 x i8>, <4 x i8>* %192, align 1
  %194 = getelementptr inbounds i8, i8* %191, i64 4
  %195 = bitcast i8* %194 to <4 x i8>*
  %196 = load <4 x i8>, <4 x i8>* %195, align 1
  %197 = sext <4 x i8> %193 to <4 x i32>
  %198 = sext <4 x i8> %196 to <4 x i32>
  %199 = add nsw <4 x i32> %182, %197
  %200 = add nsw <4 x i32> %183, %198
  %201 = add nsw <4 x i32> %180, <i32 1, i32 1, i32 1, i32 1>
  %202 = add nuw nsw <4 x i32> %181, <i32 1, i32 1, i32 1, i32 1>
  %203 = add i64 %179, 8
  %204 = icmp eq i64 %203, %149
  br i1 %204, label %205, label %178, !llvm.loop !29

205:                                              ; preds = %178
  %206 = add <4 x i32> %200, %199
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %208 = add <4 x i32> %206, %207
  %209 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %210 = add <4 x i32> %208, %209
  %211 = extractelement <4 x i32> %210, i32 0
  %212 = add <4 x i32> %202, %201
  %213 = shufflevector <4 x i32> %212, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %214 = add <4 x i32> %212, %213
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %216 = add <4 x i32> %214, %215
  %217 = extractelement <4 x i32> %216, i32 0
  br i1 %153, label %249, label %165

218:                                              ; preds = %249
  %219 = icmp sgt i32 %250, 0
  %220 = sdiv i32 %251, 2
  %221 = sub nsw i32 0, %220
  %222 = select i1 %219, i32 %220, i32 %221
  br label %223

223:                                              ; preds = %218, %99
  %224 = phi i32 [ 0, %99 ], [ %251, %218 ]
  %225 = phi i32 [ 0, %99 ], [ %250, %218 ]
  %226 = phi i32 [ 0, %99 ], [ %222, %218 ]
  %227 = add i32 %226, %225
  %228 = sdiv i32 %227, %224
  %229 = load i32, i32* %72, align 4
  %230 = icmp slt i32 %228, %229
  %231 = select i1 %230, i32 %229, i32 %228
  %232 = load i32, i32* %73, align 4
  %233 = icmp slt i32 %232, %231
  %234 = select i1 %233, i32 %232, i32 %231
  %235 = trunc i32 %234 to i8
  %236 = load i32, i32* %74, align 4
  %237 = mul nsw i32 %236, %76
  %238 = add nsw i32 %237, %79
  %239 = load i32, i32* %53, align 4
  %240 = mul nsw i32 %238, %239
  %241 = add nsw i32 %240, %88
  %242 = load i32, i32* %34, align 4
  %243 = mul nsw i32 %241, %242
  %244 = add nsw i32 %243, %100
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds i8, i8* %4, i64 %245
  store i8 %235, i8* %246, align 1
  %247 = add nuw nsw i32 %100, 1
  %248 = icmp slt i32 %247, %38
  br i1 %248, label %99, label %95

249:                                              ; preds = %255, %205, %154
  %250 = phi i32 [ %158, %154 ], [ %211, %205 ], [ %268, %255 ]
  %251 = phi i32 [ %157, %154 ], [ %217, %205 ], [ %269, %255 ]
  %252 = add nuw nsw i32 %156, 1
  %253 = icmp slt i32 %252, %120
  %254 = add i32 %155, 1
  br i1 %253, label %154, label %218

255:                                              ; preds = %165, %255
  %256 = phi i64 [ %270, %255 ], [ %166, %165 ]
  %257 = phi i32 [ %271, %255 ], [ %167, %165 ]
  %258 = phi i32 [ %269, %255 ], [ %168, %165 ]
  %259 = phi i32 [ %268, %255 ], [ %169, %165 ]
  %260 = add nsw i32 %257, %103
  %261 = add nsw i32 %260, %164
  %262 = mul nsw i32 %261, %128
  %263 = add nsw i32 %262, %100
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds i8, i8* %2, i64 %264
  %266 = load i8, i8* %265, align 1
  %267 = sext i8 %266 to i32
  %268 = add nsw i32 %259, %267
  %269 = add nsw i32 %258, 1
  %270 = add nuw nsw i64 %256, 1
  %271 = add nuw nsw i32 %257, 1
  %272 = icmp slt i64 %270, %133
  br i1 %272, label %255, label %249, !llvm.loop !30
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i16*, %"class.tflite::RuntimeShape"* dereferenceable(32), i16*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %8 = load i32, i32* %6, align 8
  %9 = icmp sgt i32 %8, 5
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %11 = load i32, i32* %7, align 8
  %12 = icmp sgt i32 %11, 5
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %14 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = bitcast %union.anon* %10 to i32*
  %17 = select i1 %9, i32* %15, i32* %16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %20 = load i32*, i32** %19, align 8
  %21 = bitcast %union.anon* %13 to [5 x i32]*
  %22 = bitcast %union.anon* %13 to i32*
  %23 = select i1 %12, i32* %20, i32* %22
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, %18
  %26 = select i1 %25, i32 %24, i32 %18
  %27 = getelementptr inbounds i32, i32* %15, i64 3
  %28 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = select i1 %9, i32* %27, i32* %29
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %20, i64 3
  %33 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = select i1 %12, i32* %32, i32* %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, %31
  %38 = select i1 %37, i32 %36, i32 %31
  %39 = getelementptr inbounds i32, i32* %15, i64 1
  %40 = getelementptr inbounds i32, i32* %15, i64 2
  %41 = bitcast %union.anon* %10 to [5 x i32]*
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %41, i64 0, i64 1
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %44 = bitcast [16 x i8]* %43 to i32*
  %45 = select i1 %9, i32* %39, i32* %42
  %46 = select i1 %9, i32* %40, i32* %44
  %47 = load i32, i32* %45, align 4
  %48 = load i32, i32* %46, align 4
  %49 = getelementptr inbounds i32, i32* %20, i64 1
  %50 = getelementptr inbounds i32, i32* %20, i64 2
  %51 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 1
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %53 = bitcast [16 x i8]* %52 to i32*
  %54 = select i1 %12, i32* %49, i32* %51
  %55 = select i1 %12, i32* %50, i32* %53
  %56 = load i32, i32* %54, align 4
  %57 = load i32, i32* %55, align 4
  %58 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %26, 0
  br i1 %62, label %63, label %77

63:                                               ; preds = %5
  %64 = icmp sgt i32 %56, 0
  %65 = icmp sgt i32 %57, 0
  %66 = icmp sgt i32 %38, 0
  %67 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %68 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %71 = getelementptr inbounds i32, i32* %16, i64 1
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %73 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %74 = getelementptr inbounds i32, i32* %22, i64 1
  br label %75

75:                                               ; preds = %63, %83
  %76 = phi i32 [ 0, %63 ], [ %84, %83 ]
  br i1 %64, label %78, label %83

77:                                               ; preds = %83, %5
  ret void

78:                                               ; preds = %75, %92
  %79 = phi i32 [ %93, %92 ], [ 0, %75 ]
  %80 = mul i32 %59, %79
  br i1 %65, label %81, label %92

81:                                               ; preds = %78
  %82 = mul nsw i32 %79, %59
  br label %86

83:                                               ; preds = %92, %75
  %84 = add nuw nsw i32 %76, 1
  %85 = icmp slt i32 %84, %26
  br i1 %85, label %75, label %77

86:                                               ; preds = %95, %81
  %87 = phi i32 [ 0, %81 ], [ %97, %95 ]
  %88 = phi i32 [ 0, %81 ], [ %96, %95 ]
  %89 = mul i32 %61, %88
  br i1 %66, label %90, label %95

90:                                               ; preds = %86
  %91 = mul nsw i32 %88, %61
  br label %99

92:                                               ; preds = %95, %78
  %93 = add nuw nsw i32 %79, 1
  %94 = icmp eq i32 %93, %56
  br i1 %94, label %83, label %78

95:                                               ; preds = %223, %86
  %96 = add nuw nsw i32 %88, 1
  %97 = sub i32 %87, %61
  %98 = icmp eq i32 %96, %57
  br i1 %98, label %92, label %86

99:                                               ; preds = %90, %223
  %100 = phi i32 [ 0, %90 ], [ %247, %223 ]
  %101 = load i16, i16* %67, align 2
  %102 = sext i16 %101 to i32
  %103 = sub nsw i32 %91, %102
  %104 = load i16, i16* %68, align 2
  %105 = sext i16 %104 to i32
  %106 = sub nsw i32 %82, %105
  %107 = sub nsw i32 0, %103
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = sub nsw i32 %48, %103
  %111 = load i32, i32* %69, align 4
  %112 = icmp slt i32 %110, %111
  %113 = select i1 %112, i32 %110, i32 %111
  %114 = sub nsw i32 0, %106
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = sub nsw i32 %47, %106
  %118 = load i32, i32* %70, align 4
  %119 = icmp slt i32 %117, %118
  %120 = select i1 %119, i32 %117, i32 %118
  %121 = icmp slt i32 %116, %120
  br i1 %121, label %122, label %223

122:                                              ; preds = %99
  %123 = add i32 %89, %100
  %124 = icmp slt i32 %109, %113
  %125 = load i32, i32* %71, align 4
  %126 = mul nsw i32 %125, %76
  %127 = load i32, i32* %44, align 4
  %128 = load i32, i32* %29, align 4
  %129 = add i32 %87, %102
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = zext i32 %131 to i64
  %133 = sext i32 %113 to i64
  %134 = sub nsw i64 %133, %132
  %135 = xor i64 %132, -1
  %136 = add nsw i64 %135, %133
  %137 = add i32 %131, %123
  %138 = add i32 %80, %116
  %139 = mul i32 %76, %125
  %140 = add i32 %138, %139
  %141 = sub i32 %140, %105
  %142 = mul i32 %127, %141
  %143 = add i32 %137, %142
  %144 = sub i32 %143, %102
  %145 = icmp ult i64 %134, 8
  %146 = icmp ne i32 %128, 1
  %147 = trunc i64 %136 to i32
  %148 = icmp ugt i64 %136, 4294967295
  %149 = and i64 %134, -8
  %150 = add nsw i64 %149, %132
  %151 = trunc i64 %149 to i32
  %152 = add i32 %109, %151
  %153 = icmp eq i64 %134, %149
  br label %154

154:                                              ; preds = %122, %249
  %155 = phi i32 [ 0, %122 ], [ %254, %249 ]
  %156 = phi i32 [ %116, %122 ], [ %252, %249 ]
  %157 = phi i32 [ 0, %122 ], [ %251, %249 ]
  %158 = phi i32 [ 0, %122 ], [ %250, %249 ]
  %159 = mul i32 %127, %155
  %160 = add i32 %144, %159
  br i1 %124, label %161, label %249

161:                                              ; preds = %154
  %162 = add nsw i32 %156, %106
  %163 = add nsw i32 %162, %126
  %164 = mul nsw i32 %163, %127
  br i1 %145, label %165, label %170

165:                                              ; preds = %205, %170, %161
  %166 = phi i64 [ %132, %170 ], [ %132, %161 ], [ %150, %205 ]
  %167 = phi i32 [ %109, %170 ], [ %109, %161 ], [ %152, %205 ]
  %168 = phi i32 [ %157, %170 ], [ %157, %161 ], [ %217, %205 ]
  %169 = phi i32 [ %158, %170 ], [ %158, %161 ], [ %211, %205 ]
  br label %255

170:                                              ; preds = %161
  %171 = add i32 %160, %147
  %172 = icmp slt i32 %171, %160
  %173 = or i1 %172, %148
  %174 = or i1 %146, %173
  br i1 %174, label %165, label %175

175:                                              ; preds = %170
  %176 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %157, i32 0
  %177 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %158, i32 0
  br label %178

178:                                              ; preds = %178, %175
  %179 = phi i64 [ 0, %175 ], [ %203, %178 ]
  %180 = phi <4 x i32> [ %176, %175 ], [ %201, %178 ]
  %181 = phi <4 x i32> [ zeroinitializer, %175 ], [ %202, %178 ]
  %182 = phi <4 x i32> [ %177, %175 ], [ %199, %178 ]
  %183 = phi <4 x i32> [ zeroinitializer, %175 ], [ %200, %178 ]
  %184 = trunc i64 %179 to i32
  %185 = add i32 %109, %184
  %186 = add nsw i32 %185, %103
  %187 = add nsw i32 %186, %164
  %188 = mul nsw i32 %187, %128
  %189 = add nsw i32 %188, %100
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i16, i16* %2, i64 %190
  %192 = bitcast i16* %191 to <4 x i16>*
  %193 = load <4 x i16>, <4 x i16>* %192, align 2
  %194 = getelementptr inbounds i16, i16* %191, i64 4
  %195 = bitcast i16* %194 to <4 x i16>*
  %196 = load <4 x i16>, <4 x i16>* %195, align 2
  %197 = sext <4 x i16> %193 to <4 x i32>
  %198 = sext <4 x i16> %196 to <4 x i32>
  %199 = add nsw <4 x i32> %182, %197
  %200 = add nsw <4 x i32> %183, %198
  %201 = add nsw <4 x i32> %180, <i32 1, i32 1, i32 1, i32 1>
  %202 = add nuw nsw <4 x i32> %181, <i32 1, i32 1, i32 1, i32 1>
  %203 = add i64 %179, 8
  %204 = icmp eq i64 %203, %149
  br i1 %204, label %205, label %178, !llvm.loop !31

205:                                              ; preds = %178
  %206 = add <4 x i32> %200, %199
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %208 = add <4 x i32> %206, %207
  %209 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %210 = add <4 x i32> %208, %209
  %211 = extractelement <4 x i32> %210, i32 0
  %212 = add <4 x i32> %202, %201
  %213 = shufflevector <4 x i32> %212, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %214 = add <4 x i32> %212, %213
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %216 = add <4 x i32> %214, %215
  %217 = extractelement <4 x i32> %216, i32 0
  br i1 %153, label %249, label %165

218:                                              ; preds = %249
  %219 = icmp sgt i32 %250, 0
  %220 = sdiv i32 %251, 2
  %221 = sub nsw i32 0, %220
  %222 = select i1 %219, i32 %220, i32 %221
  br label %223

223:                                              ; preds = %218, %99
  %224 = phi i32 [ 0, %99 ], [ %251, %218 ]
  %225 = phi i32 [ 0, %99 ], [ %250, %218 ]
  %226 = phi i32 [ 0, %99 ], [ %222, %218 ]
  %227 = add i32 %226, %225
  %228 = sdiv i32 %227, %224
  %229 = load i32, i32* %72, align 4
  %230 = icmp slt i32 %228, %229
  %231 = select i1 %230, i32 %229, i32 %228
  %232 = load i32, i32* %73, align 4
  %233 = icmp slt i32 %232, %231
  %234 = select i1 %233, i32 %232, i32 %231
  %235 = trunc i32 %234 to i16
  %236 = load i32, i32* %74, align 4
  %237 = mul nsw i32 %236, %76
  %238 = add nsw i32 %237, %79
  %239 = load i32, i32* %53, align 4
  %240 = mul nsw i32 %238, %239
  %241 = add nsw i32 %240, %88
  %242 = load i32, i32* %34, align 4
  %243 = mul nsw i32 %241, %242
  %244 = add nsw i32 %243, %100
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds i16, i16* %4, i64 %245
  store i16 %235, i16* %246, align 2
  %247 = add nuw nsw i32 %100, 1
  %248 = icmp slt i32 %247, %38
  br i1 %248, label %99, label %95

249:                                              ; preds = %255, %205, %154
  %250 = phi i32 [ %158, %154 ], [ %211, %205 ], [ %268, %255 ]
  %251 = phi i32 [ %157, %154 ], [ %217, %205 ], [ %269, %255 ]
  %252 = add nuw nsw i32 %156, 1
  %253 = icmp slt i32 %252, %120
  %254 = add i32 %155, 1
  br i1 %253, label %154, label %218

255:                                              ; preds = %165, %255
  %256 = phi i64 [ %270, %255 ], [ %166, %165 ]
  %257 = phi i32 [ %271, %255 ], [ %167, %165 ]
  %258 = phi i32 [ %269, %255 ], [ %168, %165 ]
  %259 = phi i32 [ %268, %255 ], [ %169, %165 ]
  %260 = add nsw i32 %257, %103
  %261 = add nsw i32 %260, %164
  %262 = mul nsw i32 %261, %128
  %263 = add nsw i32 %262, %100
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds i16, i16* %2, i64 %264
  %266 = load i16, i16* %265, align 2
  %267 = sext i16 %266 to i32
  %268 = add nsw i32 %259, %267
  %269 = add nsw i32 %258, 1
  %270 = add nuw nsw i64 %256, 1
  %271 = add nuw nsw i32 %257, 1
  %272 = icmp slt i64 %270, %133
  br i1 %272, label %255, label %249, !llvm.loop !32
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling12MaxEvalFloatILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca %"struct.tflite::PoolParams", align 4
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -1
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %14, label %21

14:                                               ; preds = %6
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %12 to i64
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.27, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %6, %14
  %22 = phi i32 [ %17, %14 ], [ -8388609, %6 ]
  %23 = phi i32 [ %20, %14 ], [ 2139095039, %6 ]
  %24 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %24) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 36, i1 false)
  %25 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 3
  %26 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %30 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = trunc i32 %32 to i16
  %34 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = trunc i32 %36 to i16
  %38 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 0
  store i16 %37, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 9
  %40 = bitcast float* %39 to i32*
  store i32 %22, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 10
  %42 = bitcast float* %41 to i32*
  store i32 %23, i32* %42, align 4
  %43 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #13
  %44 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %21
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %46, align 8, !alias.scope !33
  br label %75

47:                                               ; preds = %21
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %49 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %48, align 8, !noalias !33
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !33
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 1, i64 0
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %51, i32* %53, align 8, !alias.scope !33
  %54 = icmp sgt i32 %51, 5
  br i1 %54, label %55, label %62

55:                                               ; preds = %47
  %56 = sext i32 %51 to i64
  %57 = shl nsw i64 %56, 2
  %58 = tail call i8* @_Znam(i64 %57) #12, !noalias !33
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 8, !alias.scope !33
  %61 = bitcast i8* %58 to i32*
  br label %67

62:                                               ; preds = %47
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %64 = bitcast %union.anon* %63 to i32*
  %65 = sext i32 %51 to i64
  %66 = shl nsw i64 %65, 2
  br label %67

67:                                               ; preds = %62, %55
  %68 = phi i64 [ %57, %55 ], [ %66, %62 ]
  %69 = phi i32* [ %61, %55 ], [ %64, %62 ]
  %70 = bitcast i32* %69 to i8*
  %71 = bitcast i32* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %71, i64 %68, i1 false) #13
  %72 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %73 = bitcast %union.TfLitePtrUnion* %72 to float**
  %74 = load float*, float** %73, align 8
  br label %75

75:                                               ; preds = %45, %67
  %76 = phi float* [ %74, %67 ], [ null, %45 ]
  %77 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77) #13
  %78 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %80, align 8, !alias.scope !36
  br label %109

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %82, align 8, !noalias !36
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 4, !noalias !36
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 1, i64 0
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %85, i32* %87, align 8, !alias.scope !36
  %88 = icmp sgt i32 %85, 5
  br i1 %88, label %89, label %96

89:                                               ; preds = %81
  %90 = sext i32 %85 to i64
  %91 = shl nsw i64 %90, 2
  %92 = tail call i8* @_Znam(i64 %91) #12, !noalias !36
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %94 = bitcast i32** %93 to i8**
  store i8* %92, i8** %94, align 8, !alias.scope !36
  %95 = bitcast i8* %92 to i32*
  br label %101

96:                                               ; preds = %81
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %98 = bitcast %union.anon* %97 to i32*
  %99 = sext i32 %85 to i64
  %100 = shl nsw i64 %99, 2
  br label %101

101:                                              ; preds = %96, %89
  %102 = phi i64 [ %91, %89 ], [ %100, %96 ]
  %103 = phi i32* [ %95, %89 ], [ %98, %96 ]
  %104 = bitcast i32* %103 to i8*
  %105 = bitcast i32* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %102, i1 false) #13
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %107 = bitcast %union.TfLitePtrUnion* %106 to float**
  %108 = load float*, float** %107, align 8
  br label %109

109:                                              ; preds = %79, %101
  %110 = phi float* [ %108, %101 ], [ null, %79 ]
  call void @_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %7, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %8, float* %76, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, float* %110)
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp sgt i32 %112, 5
  br i1 %113, label %114, label %120

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %116 = load i32*, i32** %115, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = bitcast i32* %116 to i8*
  call void @_ZdaPv(i8* %119) #12
  br label %120

120:                                              ; preds = %109, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77) #13
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp sgt i32 %122, 5
  br i1 %123, label %124, label %130

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %124
  %129 = bitcast i32* %126 to i8*
  call void @_ZdaPv(i8* %129) #12
  br label %130

130:                                              ; preds = %120, %124, %128
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %24) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedUInt8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !39
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !39
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !39
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !39
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !39
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !39
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i8* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !42
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !42
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !42
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !42
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !42
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !42
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i8* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling20MaxEvalQuantizedInt8ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !45
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !45
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !45
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !45
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !45
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !45
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i8* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !48
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !48
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !48
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !48
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !48
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !48
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i8* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedInt16ILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !51
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !51
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !51
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !51
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !51
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !51
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i16**
  %67 = load i16*, i16** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i16* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !54
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !54
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !54
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !54
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !54
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !54
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i16**
  %101 = load i16*, i16** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i16* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i16* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i16* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %8 = load i32, i32* %6, align 8
  %9 = icmp sgt i32 %8, 5
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %11 = load i32, i32* %7, align 8
  %12 = icmp sgt i32 %11, 5
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %14 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = bitcast %union.anon* %10 to i32*
  %17 = select i1 %9, i32* %15, i32* %16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %20 = load i32*, i32** %19, align 8
  %21 = bitcast %union.anon* %13 to [5 x i32]*
  %22 = bitcast %union.anon* %13 to i32*
  %23 = select i1 %12, i32* %20, i32* %22
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, %18
  %26 = select i1 %25, i32 %24, i32 %18
  %27 = getelementptr inbounds i32, i32* %15, i64 3
  %28 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = select i1 %9, i32* %27, i32* %29
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %20, i64 3
  %33 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = select i1 %12, i32* %32, i32* %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, %31
  %38 = select i1 %37, i32 %36, i32 %31
  %39 = getelementptr inbounds i32, i32* %15, i64 1
  %40 = getelementptr inbounds i32, i32* %15, i64 2
  %41 = bitcast %union.anon* %10 to [5 x i32]*
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %41, i64 0, i64 1
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %44 = bitcast [16 x i8]* %43 to i32*
  %45 = select i1 %9, i32* %39, i32* %42
  %46 = select i1 %9, i32* %40, i32* %44
  %47 = load i32, i32* %45, align 4
  %48 = load i32, i32* %46, align 4
  %49 = getelementptr inbounds i32, i32* %20, i64 1
  %50 = getelementptr inbounds i32, i32* %20, i64 2
  %51 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 1
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %53 = bitcast [16 x i8]* %52 to i32*
  %54 = select i1 %12, i32* %49, i32* %51
  %55 = select i1 %12, i32* %50, i32* %53
  %56 = load i32, i32* %54, align 4
  %57 = load i32, i32* %55, align 4
  %58 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %26, 0
  br i1 %62, label %63, label %77

63:                                               ; preds = %5
  %64 = icmp sgt i32 %56, 0
  %65 = icmp sgt i32 %57, 0
  %66 = icmp sgt i32 %38, 0
  %67 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %68 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %71 = getelementptr inbounds i32, i32* %16, i64 1
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 9
  %73 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 10
  %74 = getelementptr inbounds i32, i32* %22, i64 1
  br label %75

75:                                               ; preds = %63, %82
  %76 = phi i32 [ 0, %63 ], [ %83, %82 ]
  br i1 %64, label %78, label %82

77:                                               ; preds = %82, %5
  ret void

78:                                               ; preds = %75, %90
  %79 = phi i32 [ %91, %90 ], [ 0, %75 ]
  br i1 %65, label %80, label %90

80:                                               ; preds = %78
  %81 = mul nsw i32 %79, %59
  br label %85

82:                                               ; preds = %90, %75
  %83 = add nuw nsw i32 %76, 1
  %84 = icmp slt i32 %83, %26
  br i1 %84, label %75, label %77

85:                                               ; preds = %93, %80
  %86 = phi i32 [ 0, %80 ], [ %95, %93 ]
  %87 = phi i32 [ 0, %80 ], [ %94, %93 ]
  br i1 %66, label %88, label %93

88:                                               ; preds = %85
  %89 = mul nsw i32 %87, %61
  br label %97

90:                                               ; preds = %93, %78
  %91 = add nuw nsw i32 %79, 1
  %92 = icmp eq i32 %91, %56
  br i1 %92, label %82, label %78

93:                                               ; preds = %161, %85
  %94 = add nuw nsw i32 %87, 1
  %95 = sub i32 %86, %61
  %96 = icmp eq i32 %94, %57
  br i1 %96, label %90, label %85

97:                                               ; preds = %88, %161
  %98 = phi i32 [ 0, %88 ], [ %180, %161 ]
  %99 = load i16, i16* %67, align 2
  %100 = sext i16 %99 to i32
  %101 = sub nsw i32 %89, %100
  %102 = load i16, i16* %68, align 2
  %103 = sext i16 %102 to i32
  %104 = sub nsw i32 %81, %103
  %105 = sub nsw i32 0, %101
  %106 = icmp sgt i32 %105, 0
  %107 = select i1 %106, i32 %105, i32 0
  %108 = sub nsw i32 %48, %101
  %109 = load i32, i32* %69, align 4
  %110 = icmp slt i32 %108, %109
  %111 = select i1 %110, i32 %108, i32 %109
  %112 = sub nsw i32 0, %104
  %113 = icmp sgt i32 %112, 0
  %114 = select i1 %113, i32 %112, i32 0
  %115 = sub nsw i32 %47, %104
  %116 = load i32, i32* %70, align 4
  %117 = icmp slt i32 %115, %116
  %118 = select i1 %117, i32 %115, i32 %116
  %119 = icmp slt i32 %114, %118
  br i1 %119, label %120, label %161

120:                                              ; preds = %97
  %121 = icmp slt i32 %107, %111
  %122 = load i32, i32* %71, align 4
  %123 = mul nsw i32 %122, %76
  %124 = load i32, i32* %44, align 4
  %125 = load i32, i32* %29, align 4
  %126 = add i32 %86, %100
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = zext i32 %128 to i64
  %130 = sext i32 %111 to i64
  %131 = sub nsw i64 %130, %129
  %132 = xor i64 %129, -1
  %133 = and i64 %131, 1
  %134 = icmp eq i64 %133, 0
  %135 = add nsw i32 %107, %101
  %136 = add nuw nsw i64 %129, 1
  %137 = add nuw nsw i32 %107, 1
  %138 = sub nsw i64 0, %130
  %139 = icmp eq i64 %132, %138
  br label %140

140:                                              ; preds = %120, %182
  %141 = phi float [ 0xC7EFFFFFE0000000, %120 ], [ %183, %182 ]
  %142 = phi i32 [ %114, %120 ], [ %184, %182 ]
  br i1 %121, label %143, label %182

143:                                              ; preds = %140
  %144 = add nsw i32 %142, %104
  %145 = add nsw i32 %144, %123
  %146 = mul nsw i32 %145, %124
  br i1 %134, label %156, label %147

147:                                              ; preds = %143
  %148 = add nsw i32 %135, %146
  %149 = mul nsw i32 %148, %125
  %150 = add nsw i32 %149, %98
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %2, i64 %151
  %153 = load float, float* %152, align 4
  %154 = fcmp olt float %141, %153
  %155 = select i1 %154, float %153, float %141
  br label %156

156:                                              ; preds = %147, %143
  %157 = phi i64 [ %136, %147 ], [ %129, %143 ]
  %158 = phi float [ %155, %147 ], [ %141, %143 ]
  %159 = phi i32 [ %137, %147 ], [ %107, %143 ]
  %160 = phi float [ %155, %147 ], [ undef, %143 ]
  br i1 %139, label %182, label %186

161:                                              ; preds = %182, %97
  %162 = phi float [ 0xC7EFFFFFE0000000, %97 ], [ %183, %182 ]
  %163 = load float, float* %72, align 4
  %164 = load float, float* %73, align 4
  %165 = fcmp olt float %162, %163
  %166 = select i1 %165, float %163, float %162
  %167 = fcmp ogt float %166, %164
  %168 = select i1 %167, float %164, float %166
  %169 = load i32, i32* %74, align 4
  %170 = mul nsw i32 %169, %76
  %171 = add nsw i32 %170, %79
  %172 = load i32, i32* %53, align 4
  %173 = mul nsw i32 %171, %172
  %174 = add nsw i32 %173, %87
  %175 = load i32, i32* %34, align 4
  %176 = mul nsw i32 %174, %175
  %177 = add nsw i32 %176, %98
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds float, float* %4, i64 %178
  store float %168, float* %179, align 4
  %180 = add nuw nsw i32 %98, 1
  %181 = icmp slt i32 %180, %38
  br i1 %181, label %97, label %93

182:                                              ; preds = %156, %186, %140
  %183 = phi float [ %141, %140 ], [ %160, %156 ], [ %208, %186 ]
  %184 = add nuw nsw i32 %142, 1
  %185 = icmp slt i32 %184, %118
  br i1 %185, label %140, label %161

186:                                              ; preds = %156, %186
  %187 = phi i64 [ %209, %186 ], [ %157, %156 ]
  %188 = phi float [ %208, %186 ], [ %158, %156 ]
  %189 = phi i32 [ %210, %186 ], [ %159, %156 ]
  %190 = add nsw i32 %189, %101
  %191 = add nsw i32 %190, %146
  %192 = mul nsw i32 %191, %125
  %193 = add nsw i32 %192, %98
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds float, float* %2, i64 %194
  %196 = load float, float* %195, align 4
  %197 = fcmp olt float %188, %196
  %198 = select i1 %197, float %196, float %188
  %199 = add nuw nsw i32 %189, 1
  %200 = add nsw i32 %199, %101
  %201 = add nsw i32 %200, %146
  %202 = mul nsw i32 %201, %125
  %203 = add nsw i32 %202, %98
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds float, float* %2, i64 %204
  %206 = load float, float* %205, align 4
  %207 = fcmp olt float %198, %206
  %208 = select i1 %207, float %206, float %198
  %209 = add nuw nsw i64 %187, 2
  %210 = add nuw nsw i32 %189, 2
  %211 = icmp slt i64 %209, %130
  br i1 %211, label %186, label %182
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %7 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %10 = load i32, i32* %8, align 8
  %11 = icmp sgt i32 %10, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %12 to i32*
  %19 = select i1 %11, i32* %17, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %15 to [5 x i32]*
  %24 = bitcast %union.anon* %15 to i32*
  %25 = select i1 %14, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %17, i64 3
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = select i1 %11, i32* %29, i32* %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %22, i64 3
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = select i1 %14, i32* %34, i32* %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %33
  %40 = select i1 %39, i32 %38, i32 %33
  %41 = getelementptr inbounds i32, i32* %17, i64 1
  %42 = getelementptr inbounds i32, i32* %17, i64 2
  %43 = bitcast %union.anon* %12 to [5 x i32]*
  %44 = getelementptr inbounds [5 x i32], [5 x i32]* %43, i64 0, i64 1
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %46 = bitcast [16 x i8]* %45 to i32*
  %47 = select i1 %11, i32* %41, i32* %44
  %48 = select i1 %11, i32* %42, i32* %46
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = getelementptr inbounds i32, i32* %22, i64 1
  %52 = getelementptr inbounds i32, i32* %22, i64 2
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %55 = bitcast [16 x i8]* %54 to i32*
  %56 = select i1 %14, i32* %51, i32* %53
  %57 = select i1 %14, i32* %52, i32* %55
  %58 = load i32, i32* %56, align 4
  %59 = load i32, i32* %57, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %28, 0
  br i1 %64, label %65, label %77

65:                                               ; preds = %5
  %66 = icmp sgt i32 %58, 0
  %67 = icmp sgt i32 %59, 0
  %68 = icmp sgt i32 %40, 0
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %71 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %73 = getelementptr inbounds i32, i32* %18, i64 1
  %74 = getelementptr inbounds i32, i32* %24, i64 1
  br label %75

75:                                               ; preds = %65, %83
  %76 = phi i32 [ 0, %65 ], [ %84, %83 ]
  br i1 %66, label %78, label %83

77:                                               ; preds = %83, %5
  ret void

78:                                               ; preds = %75, %92
  %79 = phi i32 [ %93, %92 ], [ 0, %75 ]
  %80 = mul i32 %61, %79
  br i1 %67, label %81, label %92

81:                                               ; preds = %78
  %82 = mul nsw i32 %79, %61
  br label %86

83:                                               ; preds = %92, %75
  %84 = add nuw nsw i32 %76, 1
  %85 = icmp slt i32 %84, %28
  br i1 %85, label %75, label %77

86:                                               ; preds = %95, %81
  %87 = phi i32 [ 0, %81 ], [ %97, %95 ]
  %88 = phi i32 [ 0, %81 ], [ %96, %95 ]
  %89 = mul i32 %63, %88
  br i1 %68, label %90, label %95

90:                                               ; preds = %86
  %91 = mul nsw i32 %88, %63
  br label %99

92:                                               ; preds = %95, %78
  %93 = add nuw nsw i32 %79, 1
  %94 = icmp eq i32 %93, %58
  br i1 %94, label %83, label %78

95:                                               ; preds = %269, %86
  %96 = add nuw nsw i32 %88, 1
  %97 = sub i32 %87, %63
  %98 = icmp eq i32 %96, %59
  br i1 %98, label %92, label %86

99:                                               ; preds = %90, %269
  %100 = phi i32 [ 0, %90 ], [ %290, %269 ]
  %101 = load i16, i16* %69, align 2
  %102 = sext i16 %101 to i32
  %103 = sub nsw i32 %91, %102
  %104 = load i16, i16* %70, align 2
  %105 = sext i16 %104 to i32
  %106 = sub nsw i32 %82, %105
  %107 = sub nsw i32 0, %103
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = sub nsw i32 %50, %103
  %111 = load i32, i32* %71, align 4
  %112 = icmp slt i32 %110, %111
  %113 = select i1 %112, i32 %110, i32 %111
  %114 = sub nsw i32 0, %106
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = sub nsw i32 %49, %106
  %118 = load i32, i32* %72, align 4
  %119 = icmp slt i32 %117, %118
  %120 = select i1 %119, i32 %117, i32 %118
  %121 = icmp slt i32 %116, %120
  br i1 %121, label %122, label %269

122:                                              ; preds = %99
  %123 = add i32 %89, %100
  %124 = icmp slt i32 %109, %113
  %125 = load i32, i32* %73, align 4
  %126 = mul nsw i32 %125, %76
  %127 = load i32, i32* %46, align 4
  %128 = load i32, i32* %31, align 4
  %129 = add i32 %87, %102
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = zext i32 %131 to i64
  %133 = sext i32 %113 to i64
  %134 = sub nsw i64 %133, %132
  %135 = xor i64 %132, -1
  %136 = add nsw i64 %135, %133
  %137 = add i32 %131, %123
  %138 = add i32 %80, %116
  %139 = mul i32 %76, %125
  %140 = add i32 %138, %139
  %141 = sub i32 %140, %105
  %142 = mul i32 %127, %141
  %143 = add i32 %137, %142
  %144 = sub i32 %143, %102
  %145 = sub nsw i64 %133, %132
  %146 = add nsw i64 %145, -32
  %147 = lshr i64 %146, 5
  %148 = add nuw nsw i64 %147, 1
  %149 = icmp ult i64 %134, 32
  %150 = icmp ne i32 %128, 1
  %151 = trunc i64 %136 to i32
  %152 = icmp ugt i64 %136, 4294967295
  %153 = and i64 %134, -32
  %154 = add nsw i64 %153, %132
  %155 = trunc i64 %153 to i32
  %156 = add i32 %109, %155
  %157 = and i64 %148, 1
  %158 = icmp eq i64 %147, 0
  %159 = sub nuw nsw i64 %148, %157
  %160 = icmp eq i64 %157, 0
  %161 = icmp eq i64 %134, %153
  br label %162

162:                                              ; preds = %122, %292
  %163 = phi i32 [ 0, %122 ], [ %296, %292 ]
  %164 = phi i32 [ %116, %122 ], [ %294, %292 ]
  %165 = phi i8 [ 0, %122 ], [ %293, %292 ]
  %166 = mul i32 %127, %163
  %167 = add i32 %144, %166
  br i1 %124, label %168, label %292

168:                                              ; preds = %162
  %169 = add nsw i32 %164, %106
  %170 = add nsw i32 %169, %126
  %171 = mul nsw i32 %170, %127
  br i1 %149, label %172, label %176

172:                                              ; preds = %251, %176, %168
  %173 = phi i64 [ %132, %176 ], [ %132, %168 ], [ %154, %251 ]
  %174 = phi i32 [ %109, %176 ], [ %109, %168 ], [ %156, %251 ]
  %175 = phi i8 [ %165, %176 ], [ %165, %168 ], [ %268, %251 ]
  br label %297

176:                                              ; preds = %168
  %177 = add i32 %167, %151
  %178 = icmp slt i32 %177, %167
  %179 = or i1 %178, %152
  %180 = or i1 %150, %179
  br i1 %180, label %172, label %181

181:                                              ; preds = %176
  %182 = insertelement <16 x i8> undef, i8 %165, i32 0
  %183 = shufflevector <16 x i8> %182, <16 x i8> undef, <16 x i32> zeroinitializer
  br i1 %158, label %227, label %184

184:                                              ; preds = %181, %184
  %185 = phi i64 [ %224, %184 ], [ 0, %181 ]
  %186 = phi <16 x i8> [ %222, %184 ], [ %183, %181 ]
  %187 = phi <16 x i8> [ %223, %184 ], [ %183, %181 ]
  %188 = phi i64 [ %225, %184 ], [ %159, %181 ]
  %189 = trunc i64 %185 to i32
  %190 = add i32 %109, %189
  %191 = add nsw i32 %190, %103
  %192 = add nsw i32 %191, %171
  %193 = mul nsw i32 %192, %128
  %194 = add nsw i32 %193, %100
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %2, i64 %195
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = getelementptr inbounds i8, i8* %196, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1
  %202 = icmp ult <16 x i8> %186, %198
  %203 = icmp ult <16 x i8> %187, %201
  %204 = select <16 x i1> %202, <16 x i8> %198, <16 x i8> %186
  %205 = select <16 x i1> %203, <16 x i8> %201, <16 x i8> %187
  %206 = trunc i64 %185 to i32
  %207 = or i32 %206, 32
  %208 = add i32 %109, %207
  %209 = add nsw i32 %208, %103
  %210 = add nsw i32 %209, %171
  %211 = mul nsw i32 %210, %128
  %212 = add nsw i32 %211, %100
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %2, i64 %213
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %214, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = icmp ult <16 x i8> %204, %216
  %221 = icmp ult <16 x i8> %205, %219
  %222 = select <16 x i1> %220, <16 x i8> %216, <16 x i8> %204
  %223 = select <16 x i1> %221, <16 x i8> %219, <16 x i8> %205
  %224 = add i64 %185, 64
  %225 = add i64 %188, -2
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %184, !llvm.loop !57

227:                                              ; preds = %184, %181
  %228 = phi <16 x i8> [ undef, %181 ], [ %222, %184 ]
  %229 = phi <16 x i8> [ undef, %181 ], [ %223, %184 ]
  %230 = phi i64 [ 0, %181 ], [ %224, %184 ]
  %231 = phi <16 x i8> [ %183, %181 ], [ %222, %184 ]
  %232 = phi <16 x i8> [ %183, %181 ], [ %223, %184 ]
  br i1 %160, label %251, label %233

233:                                              ; preds = %227
  %234 = trunc i64 %230 to i32
  %235 = add i32 %109, %234
  %236 = add nsw i32 %235, %103
  %237 = add nsw i32 %236, %171
  %238 = mul nsw i32 %237, %128
  %239 = add nsw i32 %238, %100
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %2, i64 %240
  %242 = bitcast i8* %241 to <16 x i8>*
  %243 = load <16 x i8>, <16 x i8>* %242, align 1
  %244 = getelementptr inbounds i8, i8* %241, i64 16
  %245 = bitcast i8* %244 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1
  %247 = icmp ult <16 x i8> %232, %246
  %248 = select <16 x i1> %247, <16 x i8> %246, <16 x i8> %232
  %249 = icmp ult <16 x i8> %231, %243
  %250 = select <16 x i1> %249, <16 x i8> %243, <16 x i8> %231
  br label %251

251:                                              ; preds = %227, %233
  %252 = phi <16 x i8> [ %228, %227 ], [ %250, %233 ]
  %253 = phi <16 x i8> [ %229, %227 ], [ %248, %233 ]
  %254 = icmp ugt <16 x i8> %252, %253
  %255 = select <16 x i1> %254, <16 x i8> %252, <16 x i8> %253
  %256 = shufflevector <16 x i8> %255, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %257 = icmp ugt <16 x i8> %255, %256
  %258 = select <16 x i1> %257, <16 x i8> %255, <16 x i8> %256
  %259 = shufflevector <16 x i8> %258, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %260 = icmp ugt <16 x i8> %258, %259
  %261 = select <16 x i1> %260, <16 x i8> %258, <16 x i8> %259
  %262 = shufflevector <16 x i8> %261, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %263 = icmp ugt <16 x i8> %261, %262
  %264 = select <16 x i1> %263, <16 x i8> %261, <16 x i8> %262
  %265 = shufflevector <16 x i8> %264, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %266 = icmp ugt <16 x i8> %264, %265
  %267 = select <16 x i1> %266, <16 x i8> %264, <16 x i8> %265
  %268 = extractelement <16 x i8> %267, i32 0
  br i1 %161, label %292, label %172

269:                                              ; preds = %292, %99
  %270 = phi i8 [ 0, %99 ], [ %293, %292 ]
  %271 = load i32, i32* %6, align 4
  %272 = trunc i32 %271 to i8
  %273 = icmp ult i8 %270, %272
  %274 = select i1 %273, i8 %272, i8 %270
  %275 = load i32, i32* %7, align 4
  %276 = trunc i32 %275 to i8
  %277 = icmp ugt i8 %274, %276
  %278 = select i1 %277, i8 %276, i8 %274
  %279 = load i32, i32* %74, align 4
  %280 = mul nsw i32 %279, %76
  %281 = add nsw i32 %280, %79
  %282 = load i32, i32* %55, align 4
  %283 = mul nsw i32 %281, %282
  %284 = add nsw i32 %283, %88
  %285 = load i32, i32* %36, align 4
  %286 = mul nsw i32 %284, %285
  %287 = add nsw i32 %286, %100
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds i8, i8* %4, i64 %288
  store i8 %278, i8* %289, align 1
  %290 = add nuw nsw i32 %100, 1
  %291 = icmp slt i32 %290, %40
  br i1 %291, label %99, label %95

292:                                              ; preds = %297, %251, %162
  %293 = phi i8 [ %165, %162 ], [ %268, %251 ], [ %309, %297 ]
  %294 = add nuw nsw i32 %164, 1
  %295 = icmp slt i32 %294, %120
  %296 = add i32 %163, 1
  br i1 %295, label %162, label %269

297:                                              ; preds = %172, %297
  %298 = phi i64 [ %310, %297 ], [ %173, %172 ]
  %299 = phi i32 [ %311, %297 ], [ %174, %172 ]
  %300 = phi i8 [ %309, %297 ], [ %175, %172 ]
  %301 = add nsw i32 %299, %103
  %302 = add nsw i32 %301, %171
  %303 = mul nsw i32 %302, %128
  %304 = add nsw i32 %303, %100
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i8, i8* %2, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = icmp ult i8 %300, %307
  %309 = select i1 %308, i8 %307, i8 %300
  %310 = add nuw nsw i64 %298, 1
  %311 = add nuw nsw i32 %299, 1
  %312 = icmp slt i64 %310, %133
  br i1 %312, label %297, label %292, !llvm.loop !58
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %7 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %10 = load i32, i32* %8, align 8
  %11 = icmp sgt i32 %10, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %12 to i32*
  %19 = select i1 %11, i32* %17, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %15 to [5 x i32]*
  %24 = bitcast %union.anon* %15 to i32*
  %25 = select i1 %14, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %17, i64 3
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = select i1 %11, i32* %29, i32* %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %22, i64 3
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = select i1 %14, i32* %34, i32* %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %33
  %40 = select i1 %39, i32 %38, i32 %33
  %41 = getelementptr inbounds i32, i32* %17, i64 1
  %42 = getelementptr inbounds i32, i32* %17, i64 2
  %43 = bitcast %union.anon* %12 to [5 x i32]*
  %44 = getelementptr inbounds [5 x i32], [5 x i32]* %43, i64 0, i64 1
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %46 = bitcast [16 x i8]* %45 to i32*
  %47 = select i1 %11, i32* %41, i32* %44
  %48 = select i1 %11, i32* %42, i32* %46
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = getelementptr inbounds i32, i32* %22, i64 1
  %52 = getelementptr inbounds i32, i32* %22, i64 2
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %55 = bitcast [16 x i8]* %54 to i32*
  %56 = select i1 %14, i32* %51, i32* %53
  %57 = select i1 %14, i32* %52, i32* %55
  %58 = load i32, i32* %56, align 4
  %59 = load i32, i32* %57, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %28, 0
  br i1 %64, label %65, label %77

65:                                               ; preds = %5
  %66 = icmp sgt i32 %58, 0
  %67 = icmp sgt i32 %59, 0
  %68 = icmp sgt i32 %40, 0
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %71 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %73 = getelementptr inbounds i32, i32* %18, i64 1
  %74 = getelementptr inbounds i32, i32* %24, i64 1
  br label %75

75:                                               ; preds = %65, %83
  %76 = phi i32 [ 0, %65 ], [ %84, %83 ]
  br i1 %66, label %78, label %83

77:                                               ; preds = %83, %5
  ret void

78:                                               ; preds = %75, %92
  %79 = phi i32 [ %93, %92 ], [ 0, %75 ]
  %80 = mul i32 %61, %79
  br i1 %67, label %81, label %92

81:                                               ; preds = %78
  %82 = mul nsw i32 %79, %61
  br label %86

83:                                               ; preds = %92, %75
  %84 = add nuw nsw i32 %76, 1
  %85 = icmp slt i32 %84, %28
  br i1 %85, label %75, label %77

86:                                               ; preds = %95, %81
  %87 = phi i32 [ 0, %81 ], [ %97, %95 ]
  %88 = phi i32 [ 0, %81 ], [ %96, %95 ]
  %89 = mul i32 %63, %88
  br i1 %68, label %90, label %95

90:                                               ; preds = %86
  %91 = mul nsw i32 %88, %63
  br label %99

92:                                               ; preds = %95, %78
  %93 = add nuw nsw i32 %79, 1
  %94 = icmp eq i32 %93, %58
  br i1 %94, label %83, label %78

95:                                               ; preds = %269, %86
  %96 = add nuw nsw i32 %88, 1
  %97 = sub i32 %87, %63
  %98 = icmp eq i32 %96, %59
  br i1 %98, label %92, label %86

99:                                               ; preds = %90, %269
  %100 = phi i32 [ 0, %90 ], [ %290, %269 ]
  %101 = load i16, i16* %69, align 2
  %102 = sext i16 %101 to i32
  %103 = sub nsw i32 %91, %102
  %104 = load i16, i16* %70, align 2
  %105 = sext i16 %104 to i32
  %106 = sub nsw i32 %82, %105
  %107 = sub nsw i32 0, %103
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = sub nsw i32 %50, %103
  %111 = load i32, i32* %71, align 4
  %112 = icmp slt i32 %110, %111
  %113 = select i1 %112, i32 %110, i32 %111
  %114 = sub nsw i32 0, %106
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = sub nsw i32 %49, %106
  %118 = load i32, i32* %72, align 4
  %119 = icmp slt i32 %117, %118
  %120 = select i1 %119, i32 %117, i32 %118
  %121 = icmp slt i32 %116, %120
  br i1 %121, label %122, label %269

122:                                              ; preds = %99
  %123 = add i32 %89, %100
  %124 = icmp slt i32 %109, %113
  %125 = load i32, i32* %73, align 4
  %126 = mul nsw i32 %125, %76
  %127 = load i32, i32* %46, align 4
  %128 = load i32, i32* %31, align 4
  %129 = add i32 %87, %102
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = zext i32 %131 to i64
  %133 = sext i32 %113 to i64
  %134 = sub nsw i64 %133, %132
  %135 = xor i64 %132, -1
  %136 = add nsw i64 %135, %133
  %137 = add i32 %131, %123
  %138 = add i32 %80, %116
  %139 = mul i32 %76, %125
  %140 = add i32 %138, %139
  %141 = sub i32 %140, %105
  %142 = mul i32 %127, %141
  %143 = add i32 %137, %142
  %144 = sub i32 %143, %102
  %145 = sub nsw i64 %133, %132
  %146 = add nsw i64 %145, -32
  %147 = lshr i64 %146, 5
  %148 = add nuw nsw i64 %147, 1
  %149 = icmp ult i64 %134, 32
  %150 = icmp ne i32 %128, 1
  %151 = trunc i64 %136 to i32
  %152 = icmp ugt i64 %136, 4294967295
  %153 = and i64 %134, -32
  %154 = add nsw i64 %153, %132
  %155 = trunc i64 %153 to i32
  %156 = add i32 %109, %155
  %157 = and i64 %148, 1
  %158 = icmp eq i64 %147, 0
  %159 = sub nuw nsw i64 %148, %157
  %160 = icmp eq i64 %157, 0
  %161 = icmp eq i64 %134, %153
  br label %162

162:                                              ; preds = %122, %292
  %163 = phi i32 [ 0, %122 ], [ %296, %292 ]
  %164 = phi i32 [ %116, %122 ], [ %294, %292 ]
  %165 = phi i8 [ -128, %122 ], [ %293, %292 ]
  %166 = mul i32 %127, %163
  %167 = add i32 %144, %166
  br i1 %124, label %168, label %292

168:                                              ; preds = %162
  %169 = add nsw i32 %164, %106
  %170 = add nsw i32 %169, %126
  %171 = mul nsw i32 %170, %127
  br i1 %149, label %172, label %176

172:                                              ; preds = %251, %176, %168
  %173 = phi i64 [ %132, %176 ], [ %132, %168 ], [ %154, %251 ]
  %174 = phi i32 [ %109, %176 ], [ %109, %168 ], [ %156, %251 ]
  %175 = phi i8 [ %165, %176 ], [ %165, %168 ], [ %268, %251 ]
  br label %297

176:                                              ; preds = %168
  %177 = add i32 %167, %151
  %178 = icmp slt i32 %177, %167
  %179 = or i1 %178, %152
  %180 = or i1 %150, %179
  br i1 %180, label %172, label %181

181:                                              ; preds = %176
  %182 = insertelement <16 x i8> undef, i8 %165, i32 0
  %183 = shufflevector <16 x i8> %182, <16 x i8> undef, <16 x i32> zeroinitializer
  br i1 %158, label %227, label %184

184:                                              ; preds = %181, %184
  %185 = phi i64 [ %224, %184 ], [ 0, %181 ]
  %186 = phi <16 x i8> [ %222, %184 ], [ %183, %181 ]
  %187 = phi <16 x i8> [ %223, %184 ], [ %183, %181 ]
  %188 = phi i64 [ %225, %184 ], [ %159, %181 ]
  %189 = trunc i64 %185 to i32
  %190 = add i32 %109, %189
  %191 = add nsw i32 %190, %103
  %192 = add nsw i32 %191, %171
  %193 = mul nsw i32 %192, %128
  %194 = add nsw i32 %193, %100
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %2, i64 %195
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = getelementptr inbounds i8, i8* %196, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1
  %202 = icmp slt <16 x i8> %186, %198
  %203 = icmp slt <16 x i8> %187, %201
  %204 = select <16 x i1> %202, <16 x i8> %198, <16 x i8> %186
  %205 = select <16 x i1> %203, <16 x i8> %201, <16 x i8> %187
  %206 = trunc i64 %185 to i32
  %207 = or i32 %206, 32
  %208 = add i32 %109, %207
  %209 = add nsw i32 %208, %103
  %210 = add nsw i32 %209, %171
  %211 = mul nsw i32 %210, %128
  %212 = add nsw i32 %211, %100
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %2, i64 %213
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = getelementptr inbounds i8, i8* %214, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = icmp slt <16 x i8> %204, %216
  %221 = icmp slt <16 x i8> %205, %219
  %222 = select <16 x i1> %220, <16 x i8> %216, <16 x i8> %204
  %223 = select <16 x i1> %221, <16 x i8> %219, <16 x i8> %205
  %224 = add i64 %185, 64
  %225 = add i64 %188, -2
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %184, !llvm.loop !59

227:                                              ; preds = %184, %181
  %228 = phi <16 x i8> [ undef, %181 ], [ %222, %184 ]
  %229 = phi <16 x i8> [ undef, %181 ], [ %223, %184 ]
  %230 = phi i64 [ 0, %181 ], [ %224, %184 ]
  %231 = phi <16 x i8> [ %183, %181 ], [ %222, %184 ]
  %232 = phi <16 x i8> [ %183, %181 ], [ %223, %184 ]
  br i1 %160, label %251, label %233

233:                                              ; preds = %227
  %234 = trunc i64 %230 to i32
  %235 = add i32 %109, %234
  %236 = add nsw i32 %235, %103
  %237 = add nsw i32 %236, %171
  %238 = mul nsw i32 %237, %128
  %239 = add nsw i32 %238, %100
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %2, i64 %240
  %242 = bitcast i8* %241 to <16 x i8>*
  %243 = load <16 x i8>, <16 x i8>* %242, align 1
  %244 = getelementptr inbounds i8, i8* %241, i64 16
  %245 = bitcast i8* %244 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1
  %247 = icmp slt <16 x i8> %232, %246
  %248 = select <16 x i1> %247, <16 x i8> %246, <16 x i8> %232
  %249 = icmp slt <16 x i8> %231, %243
  %250 = select <16 x i1> %249, <16 x i8> %243, <16 x i8> %231
  br label %251

251:                                              ; preds = %227, %233
  %252 = phi <16 x i8> [ %228, %227 ], [ %250, %233 ]
  %253 = phi <16 x i8> [ %229, %227 ], [ %248, %233 ]
  %254 = icmp sgt <16 x i8> %252, %253
  %255 = select <16 x i1> %254, <16 x i8> %252, <16 x i8> %253
  %256 = shufflevector <16 x i8> %255, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %257 = icmp sgt <16 x i8> %255, %256
  %258 = select <16 x i1> %257, <16 x i8> %255, <16 x i8> %256
  %259 = shufflevector <16 x i8> %258, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %260 = icmp sgt <16 x i8> %258, %259
  %261 = select <16 x i1> %260, <16 x i8> %258, <16 x i8> %259
  %262 = shufflevector <16 x i8> %261, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %263 = icmp sgt <16 x i8> %261, %262
  %264 = select <16 x i1> %263, <16 x i8> %261, <16 x i8> %262
  %265 = shufflevector <16 x i8> %264, <16 x i8> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %266 = icmp sgt <16 x i8> %264, %265
  %267 = select <16 x i1> %266, <16 x i8> %264, <16 x i8> %265
  %268 = extractelement <16 x i8> %267, i32 0
  br i1 %161, label %292, label %172

269:                                              ; preds = %292, %99
  %270 = phi i8 [ -128, %99 ], [ %293, %292 ]
  %271 = load i32, i32* %6, align 4
  %272 = trunc i32 %271 to i8
  %273 = icmp slt i8 %270, %272
  %274 = select i1 %273, i8 %272, i8 %270
  %275 = load i32, i32* %7, align 4
  %276 = trunc i32 %275 to i8
  %277 = icmp sgt i8 %274, %276
  %278 = select i1 %277, i8 %276, i8 %274
  %279 = load i32, i32* %74, align 4
  %280 = mul nsw i32 %279, %76
  %281 = add nsw i32 %280, %79
  %282 = load i32, i32* %55, align 4
  %283 = mul nsw i32 %281, %282
  %284 = add nsw i32 %283, %88
  %285 = load i32, i32* %36, align 4
  %286 = mul nsw i32 %284, %285
  %287 = add nsw i32 %286, %100
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds i8, i8* %4, i64 %288
  store i8 %278, i8* %289, align 1
  %290 = add nuw nsw i32 %100, 1
  %291 = icmp slt i32 %290, %40
  br i1 %291, label %99, label %95

292:                                              ; preds = %297, %251, %162
  %293 = phi i8 [ %165, %162 ], [ %268, %251 ], [ %309, %297 ]
  %294 = add nuw nsw i32 %164, 1
  %295 = icmp slt i32 %294, %120
  %296 = add i32 %163, 1
  br i1 %295, label %162, label %269

297:                                              ; preds = %172, %297
  %298 = phi i64 [ %310, %297 ], [ %173, %172 ]
  %299 = phi i32 [ %311, %297 ], [ %174, %172 ]
  %300 = phi i8 [ %309, %297 ], [ %175, %172 ]
  %301 = add nsw i32 %299, %103
  %302 = add nsw i32 %301, %171
  %303 = mul nsw i32 %302, %128
  %304 = add nsw i32 %303, %100
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i8, i8* %2, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = icmp slt i8 %300, %307
  %309 = select i1 %308, i8 %307, i8 %300
  %310 = add nuw nsw i64 %298, 1
  %311 = add nuw nsw i32 %299, 1
  %312 = icmp slt i64 %310, %133
  br i1 %312, label %297, label %292, !llvm.loop !60
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i16*, %"class.tflite::RuntimeShape"* dereferenceable(32), i16*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %7 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %10 = load i32, i32* %8, align 8
  %11 = icmp sgt i32 %10, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %12 to i32*
  %19 = select i1 %11, i32* %17, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %15 to [5 x i32]*
  %24 = bitcast %union.anon* %15 to i32*
  %25 = select i1 %14, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %17, i64 3
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = select i1 %11, i32* %29, i32* %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %22, i64 3
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = select i1 %14, i32* %34, i32* %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %33
  %40 = select i1 %39, i32 %38, i32 %33
  %41 = getelementptr inbounds i32, i32* %17, i64 1
  %42 = getelementptr inbounds i32, i32* %17, i64 2
  %43 = bitcast %union.anon* %12 to [5 x i32]*
  %44 = getelementptr inbounds [5 x i32], [5 x i32]* %43, i64 0, i64 1
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %46 = bitcast [16 x i8]* %45 to i32*
  %47 = select i1 %11, i32* %41, i32* %44
  %48 = select i1 %11, i32* %42, i32* %46
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = getelementptr inbounds i32, i32* %22, i64 1
  %52 = getelementptr inbounds i32, i32* %22, i64 2
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %55 = bitcast [16 x i8]* %54 to i32*
  %56 = select i1 %14, i32* %51, i32* %53
  %57 = select i1 %14, i32* %52, i32* %55
  %58 = load i32, i32* %56, align 4
  %59 = load i32, i32* %57, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %28, 0
  br i1 %64, label %65, label %77

65:                                               ; preds = %5
  %66 = icmp sgt i32 %58, 0
  %67 = icmp sgt i32 %59, 0
  %68 = icmp sgt i32 %40, 0
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %71 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %73 = getelementptr inbounds i32, i32* %18, i64 1
  %74 = getelementptr inbounds i32, i32* %24, i64 1
  br label %75

75:                                               ; preds = %65, %83
  %76 = phi i32 [ 0, %65 ], [ %84, %83 ]
  br i1 %66, label %78, label %83

77:                                               ; preds = %83, %5
  ret void

78:                                               ; preds = %75, %92
  %79 = phi i32 [ %93, %92 ], [ 0, %75 ]
  %80 = mul i32 %61, %79
  br i1 %67, label %81, label %92

81:                                               ; preds = %78
  %82 = mul nsw i32 %79, %61
  br label %86

83:                                               ; preds = %92, %75
  %84 = add nuw nsw i32 %76, 1
  %85 = icmp slt i32 %84, %28
  br i1 %85, label %75, label %77

86:                                               ; preds = %95, %81
  %87 = phi i32 [ 0, %81 ], [ %97, %95 ]
  %88 = phi i32 [ 0, %81 ], [ %96, %95 ]
  %89 = mul i32 %63, %88
  br i1 %68, label %90, label %95

90:                                               ; preds = %86
  %91 = mul nsw i32 %88, %63
  br label %99

92:                                               ; preds = %95, %78
  %93 = add nuw nsw i32 %79, 1
  %94 = icmp eq i32 %93, %58
  br i1 %94, label %83, label %78

95:                                               ; preds = %266, %86
  %96 = add nuw nsw i32 %88, 1
  %97 = sub i32 %87, %63
  %98 = icmp eq i32 %96, %59
  br i1 %98, label %92, label %86

99:                                               ; preds = %90, %266
  %100 = phi i32 [ 0, %90 ], [ %287, %266 ]
  %101 = load i16, i16* %69, align 2
  %102 = sext i16 %101 to i32
  %103 = sub nsw i32 %91, %102
  %104 = load i16, i16* %70, align 2
  %105 = sext i16 %104 to i32
  %106 = sub nsw i32 %82, %105
  %107 = sub nsw i32 0, %103
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = sub nsw i32 %50, %103
  %111 = load i32, i32* %71, align 4
  %112 = icmp slt i32 %110, %111
  %113 = select i1 %112, i32 %110, i32 %111
  %114 = sub nsw i32 0, %106
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = sub nsw i32 %49, %106
  %118 = load i32, i32* %72, align 4
  %119 = icmp slt i32 %117, %118
  %120 = select i1 %119, i32 %117, i32 %118
  %121 = icmp slt i32 %116, %120
  br i1 %121, label %122, label %266

122:                                              ; preds = %99
  %123 = add i32 %89, %100
  %124 = icmp slt i32 %109, %113
  %125 = load i32, i32* %73, align 4
  %126 = mul nsw i32 %125, %76
  %127 = load i32, i32* %46, align 4
  %128 = load i32, i32* %31, align 4
  %129 = add i32 %87, %102
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = zext i32 %131 to i64
  %133 = sext i32 %113 to i64
  %134 = sub nsw i64 %133, %132
  %135 = xor i64 %132, -1
  %136 = add nsw i64 %135, %133
  %137 = add i32 %131, %123
  %138 = add i32 %80, %116
  %139 = mul i32 %76, %125
  %140 = add i32 %138, %139
  %141 = sub i32 %140, %105
  %142 = mul i32 %127, %141
  %143 = add i32 %137, %142
  %144 = sub i32 %143, %102
  %145 = sub nsw i64 %133, %132
  %146 = add nsw i64 %145, -16
  %147 = lshr i64 %146, 4
  %148 = add nuw nsw i64 %147, 1
  %149 = icmp ult i64 %134, 16
  %150 = icmp ne i32 %128, 1
  %151 = trunc i64 %136 to i32
  %152 = icmp ugt i64 %136, 4294967295
  %153 = and i64 %134, -16
  %154 = add nsw i64 %153, %132
  %155 = trunc i64 %153 to i32
  %156 = add i32 %109, %155
  %157 = and i64 %148, 1
  %158 = icmp eq i64 %147, 0
  %159 = sub nuw nsw i64 %148, %157
  %160 = icmp eq i64 %157, 0
  %161 = icmp eq i64 %134, %153
  br label %162

162:                                              ; preds = %122, %289
  %163 = phi i32 [ 0, %122 ], [ %293, %289 ]
  %164 = phi i32 [ %116, %122 ], [ %291, %289 ]
  %165 = phi i16 [ -32768, %122 ], [ %290, %289 ]
  %166 = mul i32 %127, %163
  %167 = add i32 %144, %166
  br i1 %124, label %168, label %289

168:                                              ; preds = %162
  %169 = add nsw i32 %164, %106
  %170 = add nsw i32 %169, %126
  %171 = mul nsw i32 %170, %127
  br i1 %149, label %172, label %176

172:                                              ; preds = %251, %176, %168
  %173 = phi i64 [ %132, %176 ], [ %132, %168 ], [ %154, %251 ]
  %174 = phi i32 [ %109, %176 ], [ %109, %168 ], [ %156, %251 ]
  %175 = phi i16 [ %165, %176 ], [ %165, %168 ], [ %265, %251 ]
  br label %294

176:                                              ; preds = %168
  %177 = add i32 %167, %151
  %178 = icmp slt i32 %177, %167
  %179 = or i1 %178, %152
  %180 = or i1 %150, %179
  br i1 %180, label %172, label %181

181:                                              ; preds = %176
  %182 = insertelement <8 x i16> undef, i16 %165, i32 0
  %183 = shufflevector <8 x i16> %182, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %158, label %227, label %184

184:                                              ; preds = %181, %184
  %185 = phi i64 [ %224, %184 ], [ 0, %181 ]
  %186 = phi <8 x i16> [ %222, %184 ], [ %183, %181 ]
  %187 = phi <8 x i16> [ %223, %184 ], [ %183, %181 ]
  %188 = phi i64 [ %225, %184 ], [ %159, %181 ]
  %189 = trunc i64 %185 to i32
  %190 = add i32 %109, %189
  %191 = add nsw i32 %190, %103
  %192 = add nsw i32 %191, %171
  %193 = mul nsw i32 %192, %128
  %194 = add nsw i32 %193, %100
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i16, i16* %2, i64 %195
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 2
  %199 = getelementptr inbounds i16, i16* %196, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 2
  %202 = icmp slt <8 x i16> %186, %198
  %203 = icmp slt <8 x i16> %187, %201
  %204 = select <8 x i1> %202, <8 x i16> %198, <8 x i16> %186
  %205 = select <8 x i1> %203, <8 x i16> %201, <8 x i16> %187
  %206 = trunc i64 %185 to i32
  %207 = or i32 %206, 16
  %208 = add i32 %109, %207
  %209 = add nsw i32 %208, %103
  %210 = add nsw i32 %209, %171
  %211 = mul nsw i32 %210, %128
  %212 = add nsw i32 %211, %100
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i16, i16* %2, i64 %213
  %215 = bitcast i16* %214 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 2
  %217 = getelementptr inbounds i16, i16* %214, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2
  %220 = icmp slt <8 x i16> %204, %216
  %221 = icmp slt <8 x i16> %205, %219
  %222 = select <8 x i1> %220, <8 x i16> %216, <8 x i16> %204
  %223 = select <8 x i1> %221, <8 x i16> %219, <8 x i16> %205
  %224 = add i64 %185, 32
  %225 = add i64 %188, -2
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %184, !llvm.loop !61

227:                                              ; preds = %184, %181
  %228 = phi <8 x i16> [ undef, %181 ], [ %222, %184 ]
  %229 = phi <8 x i16> [ undef, %181 ], [ %223, %184 ]
  %230 = phi i64 [ 0, %181 ], [ %224, %184 ]
  %231 = phi <8 x i16> [ %183, %181 ], [ %222, %184 ]
  %232 = phi <8 x i16> [ %183, %181 ], [ %223, %184 ]
  br i1 %160, label %251, label %233

233:                                              ; preds = %227
  %234 = trunc i64 %230 to i32
  %235 = add i32 %109, %234
  %236 = add nsw i32 %235, %103
  %237 = add nsw i32 %236, %171
  %238 = mul nsw i32 %237, %128
  %239 = add nsw i32 %238, %100
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i16, i16* %2, i64 %240
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2
  %244 = getelementptr inbounds i16, i16* %241, i64 8
  %245 = bitcast i16* %244 to <8 x i16>*
  %246 = load <8 x i16>, <8 x i16>* %245, align 2
  %247 = icmp slt <8 x i16> %232, %246
  %248 = select <8 x i1> %247, <8 x i16> %246, <8 x i16> %232
  %249 = icmp slt <8 x i16> %231, %243
  %250 = select <8 x i1> %249, <8 x i16> %243, <8 x i16> %231
  br label %251

251:                                              ; preds = %227, %233
  %252 = phi <8 x i16> [ %228, %227 ], [ %250, %233 ]
  %253 = phi <8 x i16> [ %229, %227 ], [ %248, %233 ]
  %254 = icmp sgt <8 x i16> %252, %253
  %255 = select <8 x i1> %254, <8 x i16> %252, <8 x i16> %253
  %256 = shufflevector <8 x i16> %255, <8 x i16> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %257 = icmp sgt <8 x i16> %255, %256
  %258 = select <8 x i1> %257, <8 x i16> %255, <8 x i16> %256
  %259 = shufflevector <8 x i16> %258, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %260 = icmp sgt <8 x i16> %258, %259
  %261 = select <8 x i1> %260, <8 x i16> %258, <8 x i16> %259
  %262 = shufflevector <8 x i16> %261, <8 x i16> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %263 = icmp sgt <8 x i16> %261, %262
  %264 = select <8 x i1> %263, <8 x i16> %261, <8 x i16> %262
  %265 = extractelement <8 x i16> %264, i32 0
  br i1 %161, label %289, label %172

266:                                              ; preds = %289, %99
  %267 = phi i16 [ -32768, %99 ], [ %290, %289 ]
  %268 = load i32, i32* %6, align 4
  %269 = trunc i32 %268 to i16
  %270 = icmp slt i16 %267, %269
  %271 = select i1 %270, i16 %269, i16 %267
  %272 = load i32, i32* %7, align 4
  %273 = trunc i32 %272 to i16
  %274 = icmp sgt i16 %271, %273
  %275 = select i1 %274, i16 %273, i16 %271
  %276 = load i32, i32* %74, align 4
  %277 = mul nsw i32 %276, %76
  %278 = add nsw i32 %277, %79
  %279 = load i32, i32* %55, align 4
  %280 = mul nsw i32 %278, %279
  %281 = add nsw i32 %280, %88
  %282 = load i32, i32* %36, align 4
  %283 = mul nsw i32 %281, %282
  %284 = add nsw i32 %283, %100
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i16, i16* %4, i64 %285
  store i16 %275, i16* %286, align 2
  %287 = add nuw nsw i32 %100, 1
  %288 = icmp slt i32 %287, %40
  br i1 %288, label %99, label %95

289:                                              ; preds = %294, %251, %162
  %290 = phi i16 [ %165, %162 ], [ %265, %251 ], [ %306, %294 ]
  %291 = add nuw nsw i32 %164, 1
  %292 = icmp slt i32 %291, %120
  %293 = add i32 %163, 1
  br i1 %292, label %162, label %266

294:                                              ; preds = %172, %294
  %295 = phi i64 [ %307, %294 ], [ %173, %172 ]
  %296 = phi i32 [ %308, %294 ], [ %174, %172 ]
  %297 = phi i16 [ %306, %294 ], [ %175, %172 ]
  %298 = add nsw i32 %296, %103
  %299 = add nsw i32 %298, %171
  %300 = mul nsw i32 %299, %128
  %301 = add nsw i32 %300, %100
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds i16, i16* %2, i64 %302
  %304 = load i16, i16* %303, align 2
  %305 = icmp slt i16 %297, %304
  %306 = select i1 %305, i16 %304, i16 %297
  %307 = add nuw nsw i64 %295, 1
  %308 = add nuw nsw i32 %296, 1
  %309 = icmp slt i64 %307, %133
  br i1 %309, label %294, label %289, !llvm.loop !62
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca %"struct.tflite::PoolParams", align 4
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -1
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %14, label %21

14:                                               ; preds = %6
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %12 to i64
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.27, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %6, %14
  %22 = phi i32 [ %17, %14 ], [ -8388609, %6 ]
  %23 = phi i32 [ %20, %14 ], [ 2139095039, %6 ]
  %24 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %24) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 36, i1 false)
  %25 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 3
  %26 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %30 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = trunc i32 %32 to i16
  %34 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = trunc i32 %36 to i16
  %38 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 0
  store i16 %37, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 9
  %40 = bitcast float* %39 to i32*
  store i32 %22, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 10
  %42 = bitcast float* %41 to i32*
  store i32 %23, i32* %42, align 4
  %43 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #13
  %44 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %21
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %46, align 8, !alias.scope !63
  br label %75

47:                                               ; preds = %21
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %49 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %48, align 8, !noalias !63
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !63
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 1, i64 0
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %51, i32* %53, align 8, !alias.scope !63
  %54 = icmp sgt i32 %51, 5
  br i1 %54, label %55, label %62

55:                                               ; preds = %47
  %56 = sext i32 %51 to i64
  %57 = shl nsw i64 %56, 2
  %58 = tail call i8* @_Znam(i64 %57) #12, !noalias !63
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 8, !alias.scope !63
  %61 = bitcast i8* %58 to i32*
  br label %67

62:                                               ; preds = %47
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %64 = bitcast %union.anon* %63 to i32*
  %65 = sext i32 %51 to i64
  %66 = shl nsw i64 %65, 2
  br label %67

67:                                               ; preds = %62, %55
  %68 = phi i64 [ %57, %55 ], [ %66, %62 ]
  %69 = phi i32* [ %61, %55 ], [ %64, %62 ]
  %70 = bitcast i32* %69 to i8*
  %71 = bitcast i32* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %71, i64 %68, i1 false) #13
  %72 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %73 = bitcast %union.TfLitePtrUnion* %72 to float**
  %74 = load float*, float** %73, align 8
  br label %75

75:                                               ; preds = %45, %67
  %76 = phi float* [ %74, %67 ], [ null, %45 ]
  %77 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77) #13
  %78 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %80, align 8, !alias.scope !66
  br label %109

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %82, align 8, !noalias !66
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 4, !noalias !66
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 1, i64 0
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %85, i32* %87, align 8, !alias.scope !66
  %88 = icmp sgt i32 %85, 5
  br i1 %88, label %89, label %96

89:                                               ; preds = %81
  %90 = sext i32 %85 to i64
  %91 = shl nsw i64 %90, 2
  %92 = tail call i8* @_Znam(i64 %91) #12, !noalias !66
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %94 = bitcast i32** %93 to i8**
  store i8* %92, i8** %94, align 8, !alias.scope !66
  %95 = bitcast i8* %92 to i32*
  br label %101

96:                                               ; preds = %81
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %98 = bitcast %union.anon* %97 to i32*
  %99 = sext i32 %85 to i64
  %100 = shl nsw i64 %99, 2
  br label %101

101:                                              ; preds = %96, %89
  %102 = phi i64 [ %91, %89 ], [ %100, %96 ]
  %103 = phi i32* [ %95, %89 ], [ %98, %96 ]
  %104 = bitcast i32* %103 to i8*
  %105 = bitcast i32* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %102, i1 false) #13
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %107 = bitcast %union.TfLitePtrUnion* %106 to float**
  %108 = load float*, float** %107, align 8
  br label %109

109:                                              ; preds = %79, %101
  %110 = phi float* [ %108, %101 ], [ null, %79 ]
  call void @_ZN6tflite13reference_ops6L2PoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %7, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %8, float* %76, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, float* %110)
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp sgt i32 %112, 5
  br i1 %113, label %114, label %120

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %116 = load i32*, i32** %115, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = bitcast i32* %116 to i8*
  call void @_ZdaPv(i8* %119) #12
  br label %120

120:                                              ; preds = %109, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77) #13
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp sgt i32 %122, 5
  br i1 %123, label %124, label %130

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %124
  %129 = bitcast i32* %126 to i8*
  call void @_ZdaPv(i8* %129) #12
  br label %130

130:                                              ; preds = %120, %124, %128
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %24) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops6L2PoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %8 = load i32, i32* %6, align 8
  %9 = icmp sgt i32 %8, 5
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %11 = load i32, i32* %7, align 8
  %12 = icmp sgt i32 %11, 5
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %14 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = bitcast %union.anon* %10 to i32*
  %17 = select i1 %9, i32* %15, i32* %16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %20 = load i32*, i32** %19, align 8
  %21 = bitcast %union.anon* %13 to [5 x i32]*
  %22 = bitcast %union.anon* %13 to i32*
  %23 = select i1 %12, i32* %20, i32* %22
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, %18
  %26 = select i1 %25, i32 %24, i32 %18
  %27 = getelementptr inbounds i32, i32* %15, i64 3
  %28 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = select i1 %9, i32* %27, i32* %29
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %20, i64 3
  %33 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = select i1 %12, i32* %32, i32* %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, %31
  %38 = select i1 %37, i32 %36, i32 %31
  %39 = getelementptr inbounds i32, i32* %15, i64 1
  %40 = getelementptr inbounds i32, i32* %15, i64 2
  %41 = bitcast %union.anon* %10 to [5 x i32]*
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* %41, i64 0, i64 1
  %43 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %44 = bitcast [16 x i8]* %43 to i32*
  %45 = select i1 %9, i32* %39, i32* %42
  %46 = select i1 %9, i32* %40, i32* %44
  %47 = load i32, i32* %45, align 4
  %48 = load i32, i32* %46, align 4
  %49 = getelementptr inbounds i32, i32* %20, i64 1
  %50 = getelementptr inbounds i32, i32* %20, i64 2
  %51 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 1
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %53 = bitcast [16 x i8]* %52 to i32*
  %54 = select i1 %12, i32* %49, i32* %51
  %55 = select i1 %12, i32* %50, i32* %53
  %56 = load i32, i32* %54, align 4
  %57 = load i32, i32* %55, align 4
  %58 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %26, 0
  br i1 %62, label %63, label %77

63:                                               ; preds = %5
  %64 = icmp sgt i32 %56, 0
  %65 = icmp sgt i32 %57, 0
  %66 = icmp sgt i32 %38, 0
  %67 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %68 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %71 = getelementptr inbounds i32, i32* %16, i64 1
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 9
  %73 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 10
  %74 = getelementptr inbounds i32, i32* %22, i64 1
  br label %75

75:                                               ; preds = %63, %82
  %76 = phi i32 [ 0, %63 ], [ %83, %82 ]
  br i1 %64, label %78, label %82

77:                                               ; preds = %82, %5
  ret void

78:                                               ; preds = %75, %90
  %79 = phi i32 [ %91, %90 ], [ 0, %75 ]
  br i1 %65, label %80, label %90

80:                                               ; preds = %78
  %81 = mul nsw i32 %79, %59
  br label %85

82:                                               ; preds = %90, %75
  %83 = add nuw nsw i32 %76, 1
  %84 = icmp slt i32 %83, %26
  br i1 %84, label %75, label %77

85:                                               ; preds = %93, %80
  %86 = phi i32 [ 0, %80 ], [ %95, %93 ]
  %87 = phi i32 [ 0, %80 ], [ %94, %93 ]
  br i1 %66, label %88, label %93

88:                                               ; preds = %85
  %89 = mul nsw i32 %87, %61
  br label %97

90:                                               ; preds = %93, %78
  %91 = add nuw nsw i32 %79, 1
  %92 = icmp eq i32 %91, %56
  br i1 %92, label %82, label %78

93:                                               ; preds = %165, %85
  %94 = add nuw nsw i32 %87, 1
  %95 = sub i32 %86, %61
  %96 = icmp eq i32 %94, %57
  br i1 %96, label %90, label %85

97:                                               ; preds = %88, %165
  %98 = phi i32 [ 0, %88 ], [ %188, %165 ]
  %99 = load i16, i16* %67, align 2
  %100 = sext i16 %99 to i32
  %101 = sub nsw i32 %89, %100
  %102 = load i16, i16* %68, align 2
  %103 = sext i16 %102 to i32
  %104 = sub nsw i32 %81, %103
  %105 = sub nsw i32 0, %101
  %106 = icmp sgt i32 %105, 0
  %107 = select i1 %106, i32 %105, i32 0
  %108 = sub nsw i32 %48, %101
  %109 = load i32, i32* %69, align 4
  %110 = icmp slt i32 %108, %109
  %111 = select i1 %110, i32 %108, i32 %109
  %112 = sub nsw i32 0, %104
  %113 = icmp sgt i32 %112, 0
  %114 = select i1 %113, i32 %112, i32 0
  %115 = sub nsw i32 %47, %104
  %116 = load i32, i32* %70, align 4
  %117 = icmp slt i32 %115, %116
  %118 = select i1 %117, i32 %115, i32 %116
  %119 = icmp slt i32 %114, %118
  br i1 %119, label %120, label %165

120:                                              ; preds = %97
  %121 = icmp slt i32 %107, %111
  %122 = load i32, i32* %71, align 4
  %123 = mul nsw i32 %122, %76
  %124 = load i32, i32* %44, align 4
  %125 = load i32, i32* %29, align 4
  %126 = add i32 %86, %100
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = zext i32 %128 to i64
  %130 = sext i32 %111 to i64
  %131 = sub nsw i64 %130, %129
  %132 = xor i64 %129, -1
  %133 = and i64 %131, 1
  %134 = icmp eq i64 %133, 0
  %135 = add nsw i32 %107, %101
  %136 = add nuw nsw i64 %129, 1
  %137 = add nuw nsw i32 %107, 1
  %138 = sub nsw i64 0, %130
  %139 = icmp eq i64 %132, %138
  br label %140

140:                                              ; preds = %120, %190
  %141 = phi i32 [ %114, %120 ], [ %193, %190 ]
  %142 = phi i32 [ 0, %120 ], [ %192, %190 ]
  %143 = phi float [ 0.000000e+00, %120 ], [ %191, %190 ]
  br i1 %121, label %144, label %190

144:                                              ; preds = %140
  %145 = add nsw i32 %141, %104
  %146 = add nsw i32 %145, %123
  %147 = mul nsw i32 %146, %124
  br i1 %134, label %158, label %148

148:                                              ; preds = %144
  %149 = add nsw i32 %135, %147
  %150 = mul nsw i32 %149, %125
  %151 = add nsw i32 %150, %98
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %2, i64 %152
  %154 = load float, float* %153, align 4
  %155 = fmul float %154, %154
  %156 = fadd float %143, %155
  %157 = add nsw i32 %142, 1
  br label %158

158:                                              ; preds = %148, %144
  %159 = phi i64 [ %136, %148 ], [ %129, %144 ]
  %160 = phi i32 [ %137, %148 ], [ %107, %144 ]
  %161 = phi i32 [ %157, %148 ], [ %142, %144 ]
  %162 = phi float [ %156, %148 ], [ %143, %144 ]
  %163 = phi float [ %156, %148 ], [ undef, %144 ]
  %164 = phi i32 [ %157, %148 ], [ undef, %144 ]
  br i1 %139, label %190, label %195

165:                                              ; preds = %190, %97
  %166 = phi float [ 0.000000e+00, %97 ], [ %191, %190 ]
  %167 = phi i32 [ 0, %97 ], [ %192, %190 ]
  %168 = sitofp i32 %167 to float
  %169 = fdiv float %166, %168
  %170 = tail call float @sqrtf(float %169) #13
  %171 = load float, float* %72, align 4
  %172 = load float, float* %73, align 4
  %173 = fcmp olt float %170, %171
  %174 = select i1 %173, float %171, float %170
  %175 = fcmp ogt float %174, %172
  %176 = select i1 %175, float %172, float %174
  %177 = load i32, i32* %74, align 4
  %178 = mul nsw i32 %177, %76
  %179 = add nsw i32 %178, %79
  %180 = load i32, i32* %53, align 4
  %181 = mul nsw i32 %179, %180
  %182 = add nsw i32 %181, %87
  %183 = load i32, i32* %34, align 4
  %184 = mul nsw i32 %182, %183
  %185 = add nsw i32 %184, %98
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds float, float* %4, i64 %186
  store float %176, float* %187, align 4
  %188 = add nuw nsw i32 %98, 1
  %189 = icmp slt i32 %188, %38
  br i1 %189, label %97, label %93

190:                                              ; preds = %158, %195, %140
  %191 = phi float [ %143, %140 ], [ %163, %158 ], [ %218, %195 ]
  %192 = phi i32 [ %142, %140 ], [ %164, %158 ], [ %219, %195 ]
  %193 = add nuw nsw i32 %141, 1
  %194 = icmp slt i32 %193, %118
  br i1 %194, label %140, label %165

195:                                              ; preds = %158, %195
  %196 = phi i64 [ %220, %195 ], [ %159, %158 ]
  %197 = phi i32 [ %221, %195 ], [ %160, %158 ]
  %198 = phi i32 [ %219, %195 ], [ %161, %158 ]
  %199 = phi float [ %218, %195 ], [ %162, %158 ]
  %200 = add nsw i32 %197, %101
  %201 = add nsw i32 %200, %147
  %202 = mul nsw i32 %201, %125
  %203 = add nsw i32 %202, %98
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds float, float* %2, i64 %204
  %206 = load float, float* %205, align 4
  %207 = fmul float %206, %206
  %208 = fadd float %199, %207
  %209 = add nuw nsw i32 %197, 1
  %210 = add nsw i32 %209, %101
  %211 = add nsw i32 %210, %147
  %212 = mul nsw i32 %211, %125
  %213 = add nsw i32 %212, %98
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds float, float* %2, i64 %214
  %216 = load float, float* %215, align 4
  %217 = fmul float %216, %216
  %218 = fadd float %208, %217
  %219 = add nsw i32 %198, 2
  %220 = add nuw nsw i64 %196, 2
  %221 = add nuw nsw i32 %197, 2
  %222 = icmp slt i64 %220, %130
  br i1 %222, label %195, label %190
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling16AverageEvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca %"struct.tflite::PoolParams", align 4
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -1
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %14, label %21

14:                                               ; preds = %6
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %12 to i64
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.27, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %6, %14
  %22 = phi i32 [ %17, %14 ], [ -8388609, %6 ]
  %23 = phi i32 [ %20, %14 ], [ 2139095039, %6 ]
  %24 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %24) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 36, i1 false)
  %25 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 3
  %26 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %30 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = trunc i32 %32 to i16
  %34 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = trunc i32 %36 to i16
  %38 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 0
  store i16 %37, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 9
  %40 = bitcast float* %39 to i32*
  store i32 %22, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 10
  %42 = bitcast float* %41 to i32*
  store i32 %23, i32* %42, align 4
  %43 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #13
  %44 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %21
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %46, align 8, !alias.scope !69
  br label %75

47:                                               ; preds = %21
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %49 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %48, align 8, !noalias !69
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !69
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 1, i64 0
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %51, i32* %53, align 8, !alias.scope !69
  %54 = icmp sgt i32 %51, 5
  br i1 %54, label %55, label %62

55:                                               ; preds = %47
  %56 = sext i32 %51 to i64
  %57 = shl nsw i64 %56, 2
  %58 = tail call i8* @_Znam(i64 %57) #12, !noalias !69
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 8, !alias.scope !69
  %61 = bitcast i8* %58 to i32*
  br label %67

62:                                               ; preds = %47
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %64 = bitcast %union.anon* %63 to i32*
  %65 = sext i32 %51 to i64
  %66 = shl nsw i64 %65, 2
  br label %67

67:                                               ; preds = %62, %55
  %68 = phi i64 [ %57, %55 ], [ %66, %62 ]
  %69 = phi i32* [ %61, %55 ], [ %64, %62 ]
  %70 = bitcast i32* %69 to i8*
  %71 = bitcast i32* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %71, i64 %68, i1 false) #13
  %72 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %73 = bitcast %union.TfLitePtrUnion* %72 to float**
  %74 = load float*, float** %73, align 8
  br label %75

75:                                               ; preds = %45, %67
  %76 = phi float* [ %74, %67 ], [ null, %45 ]
  %77 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77) #13
  %78 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %80, align 8, !alias.scope !72
  br label %109

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %82, align 8, !noalias !72
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 4, !noalias !72
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 1, i64 0
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %85, i32* %87, align 8, !alias.scope !72
  %88 = icmp sgt i32 %85, 5
  br i1 %88, label %89, label %96

89:                                               ; preds = %81
  %90 = sext i32 %85 to i64
  %91 = shl nsw i64 %90, 2
  %92 = tail call i8* @_Znam(i64 %91) #12, !noalias !72
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %94 = bitcast i32** %93 to i8**
  store i8* %92, i8** %94, align 8, !alias.scope !72
  %95 = bitcast i8* %92 to i32*
  br label %101

96:                                               ; preds = %81
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %98 = bitcast %union.anon* %97 to i32*
  %99 = sext i32 %85 to i64
  %100 = shl nsw i64 %99, 2
  br label %101

101:                                              ; preds = %96, %89
  %102 = phi i64 [ %91, %89 ], [ %100, %96 ]
  %103 = phi i32* [ %95, %89 ], [ %98, %96 ]
  %104 = bitcast i32* %103 to i8*
  %105 = bitcast i32* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %102, i1 false) #13
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %107 = bitcast %union.TfLitePtrUnion* %106 to float**
  %108 = load float*, float** %107, align 8
  br label %109

109:                                              ; preds = %79, %101
  %110 = phi float* [ %108, %101 ], [ null, %79 ]
  call void @_ZN6tflite13optimized_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %7, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %8, float* %76, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, float* %110)
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp sgt i32 %112, 5
  br i1 %113, label %114, label %120

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %116 = load i32*, i32** %115, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = bitcast i32* %116 to i8*
  call void @_ZdaPv(i8* %119) #12
  br label %120

120:                                              ; preds = %109, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77) #13
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp sgt i32 %122, 5
  br i1 %123, label %124, label %130

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %124
  %129 = bitcast i32* %126 to i8*
  call void @_ZdaPv(i8* %129) #12
  br label %130

130:                                              ; preds = %120, %124, %128
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %24) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedUint8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !75
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !75
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !75
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !75
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !75
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !75
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i8* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !78
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !78
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !78
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !78
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !78
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !78
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i8* [ %101, %94 ], [ null, %72 ]
  %104 = extractelement <4 x i32> %21, i32 3
  %105 = extractelement <4 x i32> %21, i32 2
  %106 = mul nsw i32 %105, %104
  %107 = icmp sgt i32 %106, 256
  br i1 %107, label %108, label %109

108:                                              ; preds = %102
  call void @_ZN6tflite13optimized_ops13AveragePool32ERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103) #13
  br label %110

109:                                              ; preds = %102
  call void @_ZN6tflite13optimized_ops13AveragePool16ERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103) #13
  br label %110

110:                                              ; preds = %108, %109
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp sgt i32 %112, 5
  br i1 %113, label %114, label %120

114:                                              ; preds = %110
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %116 = load i32*, i32** %115, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = bitcast i32* %116 to i8*
  call void @_ZdaPv(i8* %119) #12
  br label %120

120:                                              ; preds = %110, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp sgt i32 %122, 5
  br i1 %123, label %124, label %130

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %124
  %129 = bitcast i32* %126 to i8*
  call void @_ZdaPv(i8* %129) #12
  br label %130

130:                                              ; preds = %120, %124, %128
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling24AverageEvalQuantizedInt8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !81
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !81
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !81
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !81
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !81
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !81
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i8* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !84
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !84
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !84
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !84
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !84
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !84
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i8* [ %101, %94 ], [ null, %72 ]
  %104 = extractelement <4 x i32> %21, i32 3
  %105 = extractelement <4 x i32> %21, i32 2
  %106 = mul nsw i32 %105, %104
  %107 = icmp sgt i32 %106, 256
  br i1 %107, label %108, label %109

108:                                              ; preds = %102
  call void @_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103) #13
  br label %110

109:                                              ; preds = %102
  call void @_ZN6tflite21optimized_integer_ops13AveragePool16ERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103) #13
  br label %110

110:                                              ; preds = %108, %109
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp sgt i32 %112, 5
  br i1 %113, label %114, label %120

114:                                              ; preds = %110
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %116 = load i32*, i32** %115, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = bitcast i32* %116 to i8*
  call void @_ZdaPv(i8* %119) #12
  br label %120

120:                                              ; preds = %110, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp sgt i32 %122, 5
  br i1 %123, label %124, label %130

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %124
  %129 = bitcast i32* %126 to i8*
  call void @_ZdaPv(i8* %129) #12
  br label %130

130:                                              ; preds = %120, %124, %128
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling25AverageEvalQuantizedInt16ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !87
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !87
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !87
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !87
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !87
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !87
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i16**
  %67 = load i16*, i16** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i16* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !90
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !90
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !90
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !90
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !90
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !90
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i16**
  %101 = load i16*, i16** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i16* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i16* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i16* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #9 comdat {
  %6 = bitcast float* %4 to i8*
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %9 = load i32, i32* %7, align 8
  %10 = icmp sgt i32 %9, 5
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %12 = load i32, i32* %8, align 8
  %13 = icmp sgt i32 %12, 5
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %15 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %16 = load i32*, i32** %15, align 8
  %17 = bitcast %union.anon* %11 to [5 x i32]*
  %18 = bitcast %union.anon* %11 to i32*
  %19 = select i1 %10, i32* %16, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %14 to [5 x i32]*
  %24 = bitcast %union.anon* %14 to i32*
  %25 = select i1 %13, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %16, i64 1
  %30 = getelementptr inbounds i32, i32* %16, i64 2
  %31 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %33 = bitcast [16 x i8]* %32 to i32*
  %34 = select i1 %10, i32* %29, i32* %31
  %35 = select i1 %10, i32* %30, i32* %33
  %36 = load i32, i32* %34, align 4
  %37 = load i32, i32* %35, align 4
  %38 = getelementptr inbounds i32, i32* %22, i64 1
  %39 = getelementptr inbounds i32, i32* %22, i64 2
  %40 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %41 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %42 = bitcast [16 x i8]* %41 to i32*
  %43 = select i1 %13, i32* %38, i32* %40
  %44 = select i1 %13, i32* %39, i32* %42
  %45 = load i32, i32* %43, align 4
  %46 = load i32, i32* %44, align 4
  %47 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %50 = load i32, i32* %49, align 4
  %51 = add nsw i32 %9, -1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %16, i64 %52
  %54 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %52
  %55 = select i1 %10, i32* %53, i32* %54
  %56 = load i32, i32* %55, align 4, !noalias !93
  %57 = sext i32 %56 to i64
  %58 = add nsw i32 %12, -1
  %59 = sext i32 %58 to i64
  br i1 %13, label %60, label %63

60:                                               ; preds = %5
  %61 = getelementptr inbounds i32, i32* %22, i64 %59
  %62 = load i32, i32* %61, align 4, !noalias !96
  br label %70

63:                                               ; preds = %5
  %64 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 %59
  %65 = load i32, i32* %64, align 4, !noalias !96
  %66 = icmp sgt i32 %12, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %63
  %68 = sext i32 %65 to i64
  %69 = ptrtoint float* %4 to i64
  br label %118

70:                                               ; preds = %63, %60
  %71 = phi i32* [ %22, %60 ], [ %24, %63 ]
  %72 = phi i32 [ %62, %60 ], [ %65, %63 ]
  %73 = zext i32 %58 to i64
  %74 = zext i32 %12 to i64
  %75 = add nsw i64 %74, -1
  %76 = and i64 %74, 3
  %77 = icmp ult i64 %75, 3
  br i1 %77, label %93, label %78

78:                                               ; preds = %70
  %79 = sub nsw i64 %74, %76
  br label %80

80:                                               ; preds = %979, %78
  %81 = phi i64 [ 0, %78 ], [ %982, %979 ]
  %82 = phi i32 [ 1, %78 ], [ %981, %979 ]
  %83 = phi i64 [ %79, %78 ], [ %983, %979 ]
  %84 = icmp eq i64 %81, %73
  br i1 %84, label %88, label %85

85:                                               ; preds = %80
  %86 = getelementptr inbounds i32, i32* %71, i64 %81
  %87 = load i32, i32* %86, align 4, !noalias !96
  br label %88

88:                                               ; preds = %85, %80
  %89 = phi i32 [ %87, %85 ], [ 1, %80 ]
  %90 = mul nsw i32 %89, %82
  %91 = or i64 %81, 1
  %92 = icmp eq i64 %91, %73
  br i1 %92, label %963, label %960

93:                                               ; preds = %979, %70
  %94 = phi i32 [ undef, %70 ], [ %981, %979 ]
  %95 = phi i64 [ 0, %70 ], [ %982, %979 ]
  %96 = phi i32 [ 1, %70 ], [ %981, %979 ]
  %97 = icmp eq i64 %76, 0
  br i1 %97, label %112, label %98

98:                                               ; preds = %93, %106
  %99 = phi i64 [ %109, %106 ], [ %95, %93 ]
  %100 = phi i32 [ %108, %106 ], [ %96, %93 ]
  %101 = phi i64 [ %110, %106 ], [ %76, %93 ]
  %102 = icmp eq i64 %99, %73
  br i1 %102, label %106, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds i32, i32* %71, i64 %99
  %105 = load i32, i32* %104, align 4, !noalias !96
  br label %106

106:                                              ; preds = %103, %98
  %107 = phi i32 [ %105, %103 ], [ 1, %98 ]
  %108 = mul nsw i32 %107, %100
  %109 = add nuw nsw i64 %99, 1
  %110 = add i64 %101, -1
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %98, !llvm.loop !99

112:                                              ; preds = %106, %93
  %113 = phi i32 [ %94, %93 ], [ %108, %106 ]
  %114 = sext i32 %113 to i64
  %115 = sext i32 %72 to i64
  %116 = ptrtoint float* %4 to i64
  %117 = icmp sgt i32 %113, 0
  br i1 %117, label %118, label %136

118:                                              ; preds = %112, %67
  %119 = phi i64 [ 1, %67 ], [ %114, %112 ]
  %120 = phi i64 [ %68, %67 ], [ %115, %112 ]
  %121 = phi i64 [ %69, %67 ], [ %116, %112 ]
  %122 = shl nsw i64 %119, 2
  %123 = add nuw nsw i64 %122, 64
  %124 = tail call noalias i8* @malloc(i64 %123) #13
  %125 = icmp eq i8* %124, null
  br i1 %125, label %134, label %126

126:                                              ; preds = %118
  %127 = ptrtoint i8* %124 to i64
  %128 = add i64 %127, 64
  %129 = and i64 %128, -64
  %130 = inttoptr i64 %129 to i8*
  %131 = inttoptr i64 %129 to i8**
  %132 = getelementptr inbounds i8*, i8** %131, i64 -1
  store i8* %124, i8** %132, align 8
  %133 = icmp eq i64 %129, 0
  br i1 %133, label %134, label %139

134:                                              ; preds = %118, %126
  %135 = tail call i8* @_Znwm(i64 -1) #13
  br label %139

136:                                              ; preds = %112
  %137 = sdiv i64 %114, 4
  %138 = shl nsw i64 %137, 2
  br label %153

139:                                              ; preds = %126, %134
  %140 = phi i8* [ %130, %126 ], [ null, %134 ]
  %141 = bitcast i8* %140 to float*
  %142 = lshr i64 %119, 2
  %143 = and i64 %142, 1073741823
  %144 = shl nuw nsw i64 %143, 2
  %145 = icmp sgt i64 %119, 3
  br i1 %145, label %146, label %153

146:                                              ; preds = %139
  %147 = icmp ugt i64 %144, 4
  %148 = select i1 %147, i64 %144, i64 4
  %149 = add nuw nsw i64 %148, 4611686018427387903
  %150 = lshr i64 %149, 2
  %151 = shl i64 %150, 4
  %152 = add i64 %151, 16
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %140, i8 0, i64 %152, i1 false) #13
  br label %153

153:                                              ; preds = %136, %146, %139
  %154 = phi i64 [ %138, %136 ], [ %144, %146 ], [ %144, %139 ]
  %155 = phi i64 [ %137, %136 ], [ %143, %146 ], [ %143, %139 ]
  %156 = phi float* [ null, %136 ], [ %141, %146 ], [ %141, %139 ]
  %157 = phi i64 [ %114, %136 ], [ %119, %146 ], [ %119, %139 ]
  %158 = phi i64 [ %115, %136 ], [ %120, %146 ], [ %120, %139 ]
  %159 = phi i64 [ %116, %136 ], [ %121, %146 ], [ %121, %139 ]
  %160 = icmp slt i64 %154, %157
  br i1 %160, label %161, label %167

161:                                              ; preds = %153
  %162 = getelementptr float, float* %156, i64 %154
  %163 = bitcast float* %162 to i8*
  %164 = shl nsw i64 %157, 2
  %165 = shl nsw i64 %155, 4
  %166 = sub nsw i64 %164, %165
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %163, i8 0, i64 %166, i1 false) #13
  br label %167

167:                                              ; preds = %153, %161
  %168 = mul nsw i64 %158, %157
  %169 = and i64 %159, 3
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %177

171:                                              ; preds = %167
  %172 = lshr i64 %159, 2
  %173 = sub nsw i64 0, %172
  %174 = and i64 %173, 3
  %175 = icmp slt i64 %174, %168
  %176 = select i1 %175, i64 %174, i64 %168
  br label %177

177:                                              ; preds = %171, %167
  %178 = phi i64 [ %176, %171 ], [ %168, %167 ]
  %179 = sub nsw i64 %168, %178
  %180 = sdiv i64 %179, 4
  %181 = shl nsw i64 %180, 2
  %182 = add i64 %181, %178
  %183 = icmp sgt i64 %178, 0
  br i1 %183, label %184, label %187

184:                                              ; preds = %177
  %185 = inttoptr i64 %159 to i8*
  %186 = shl nuw i64 %178, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %185, i8 0, i64 %186, i1 false) #13
  br label %187

187:                                              ; preds = %184, %177
  %188 = icmp sgt i64 %179, 3
  br i1 %188, label %189, label %200

189:                                              ; preds = %187
  %190 = getelementptr float, float* %4, i64 %178
  %191 = bitcast float* %190 to i8*
  %192 = add nsw i64 %178, 4
  %193 = icmp sgt i64 %182, %192
  %194 = select i1 %193, i64 %182, i64 %192
  %195 = xor i64 %178, 4611686018427387903
  %196 = add i64 %194, %195
  %197 = lshr i64 %196, 2
  %198 = shl i64 %197, 4
  %199 = add i64 %198, 16
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %191, i8 0, i64 %199, i1 false) #13
  br label %200

200:                                              ; preds = %189, %187
  %201 = icmp slt i64 %182, %168
  br i1 %201, label %202, label %207

202:                                              ; preds = %200
  %203 = getelementptr float, float* %4, i64 %182
  %204 = bitcast float* %203 to i8*
  %205 = sub i64 %179, %181
  %206 = shl nuw i64 %205, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %204, i8 0, i64 %206, i1 false) #13
  br label %207

207:                                              ; preds = %200, %202
  %208 = icmp sgt i32 %28, 0
  br i1 %208, label %209, label %241

209:                                              ; preds = %207
  %210 = icmp sgt i32 %36, 0
  %211 = icmp sgt i32 %37, 0
  %212 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %213 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %214 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %215 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %216 = sext i32 %46 to i64
  %217 = sext i32 %37 to i64
  %218 = sext i32 %36 to i64
  %219 = sext i32 %45 to i64
  %220 = sext i32 %28 to i64
  %221 = zext i32 %36 to i64
  %222 = zext i32 %37 to i64
  %223 = mul nsw i64 %158, %216
  %224 = mul nsw i64 %218, %217
  %225 = mul i64 %224, %57
  %226 = mul nsw i64 %217, %57
  %227 = mul nsw i64 %158, %216
  %228 = mul nsw i64 %218, %217
  %229 = mul i64 %228, %57
  %230 = mul nsw i64 %217, %57
  br label %231

231:                                              ; preds = %209, %534
  %232 = phi i64 [ 0, %209 ], [ %535, %534 ]
  %233 = mul i64 %232, %219
  %234 = mul i64 %229, %232
  %235 = mul i64 %232, %219
  %236 = mul i64 %225, %232
  %237 = add i64 %158, %236
  br i1 %210, label %238, label %534

238:                                              ; preds = %231
  %239 = mul nsw i64 %232, %219
  %240 = mul nsw i64 %232, %218
  br label %523

241:                                              ; preds = %534, %207
  %242 = sdiv i64 %157, 8
  %243 = shl nsw i64 %242, 3
  %244 = add nsw i64 %157, 3
  %245 = icmp ugt i64 %244, 6
  %246 = icmp sgt i64 %157, 15
  %247 = and i1 %245, %246
  br i1 %247, label %248, label %252

248:                                              ; preds = %241, %248
  %249 = phi i64 [ %250, %248 ], [ 8, %241 ]
  %250 = add nuw nsw i64 %249, 8
  %251 = icmp slt i64 %250, %243
  br i1 %251, label %248, label %252

252:                                              ; preds = %248, %241
  %253 = icmp sgt i64 %157, 0
  br i1 %253, label %254, label %346

254:                                              ; preds = %252
  %255 = icmp sgt i64 %158, 1
  %256 = select i1 %255, i64 %158, i64 1
  %257 = icmp sgt i64 %158, 1
  %258 = select i1 %257, i64 %158, i64 1
  %259 = and i64 %256, 9223372036854775804
  %260 = add nsw i64 %259, -4
  %261 = lshr exact i64 %260, 2
  %262 = add nuw nsw i64 %261, 1
  %263 = icmp ult i64 %256, 4
  %264 = and i64 %256, 9223372036854775804
  %265 = and i64 %262, 1
  %266 = icmp eq i64 %260, 0
  %267 = sub nuw nsw i64 %262, %265
  %268 = icmp eq i64 %265, 0
  %269 = icmp eq i64 %256, %264
  br label %270

270:                                              ; preds = %254, %332
  %271 = phi i64 [ %333, %332 ], [ %157, %254 ]
  %272 = phi i64 [ %334, %332 ], [ %158, %254 ]
  %273 = phi i64 [ %335, %332 ], [ 0, %254 ]
  %274 = mul i64 %158, %273
  %275 = getelementptr float, float* %4, i64 %274
  %276 = bitcast float* %275 to i8*
  %277 = add i64 %258, %274
  %278 = getelementptr float, float* %4, i64 %277
  %279 = getelementptr float, float* %156, i64 %273
  %280 = bitcast float* %279 to i8*
  %281 = getelementptr i8, i8* %280, i64 1
  %282 = icmp sgt i64 %272, 0
  br i1 %282, label %283, label %332

283:                                              ; preds = %270
  %284 = mul nsw i64 %273, %158
  %285 = getelementptr inbounds float, float* %156, i64 %273
  br i1 %263, label %286, label %288

286:                                              ; preds = %331, %288, %283
  %287 = phi i64 [ 0, %288 ], [ 0, %283 ], [ %264, %331 ]
  br label %337

288:                                              ; preds = %283
  %289 = icmp ugt i8* %281, %276
  %290 = icmp ult float* %285, %278
  %291 = and i1 %289, %290
  br i1 %291, label %286, label %292

292:                                              ; preds = %288
  br i1 %266, label %319, label %293

293:                                              ; preds = %292
  %294 = load float, float* %285, align 4, !alias.scope !101
  %295 = insertelement <4 x float> undef, float %294, i32 0
  %296 = shufflevector <4 x float> %295, <4 x float> undef, <4 x i32> zeroinitializer
  %297 = load float, float* %285, align 4, !alias.scope !101
  %298 = insertelement <4 x float> undef, float %297, i32 0
  %299 = shufflevector <4 x float> %298, <4 x float> undef, <4 x i32> zeroinitializer
  br label %300

300:                                              ; preds = %300, %293
  %301 = phi i64 [ 0, %293 ], [ %316, %300 ]
  %302 = phi i64 [ %267, %293 ], [ %317, %300 ]
  %303 = add nsw i64 %301, %284
  %304 = getelementptr inbounds float, float* %4, i64 %303
  %305 = bitcast float* %304 to <4 x float>*
  %306 = load <4 x float>, <4 x float>* %305, align 4, !alias.scope !104, !noalias !101
  %307 = fdiv <4 x float> %306, %296
  %308 = bitcast float* %304 to <4 x float>*
  store <4 x float> %307, <4 x float>* %308, align 4, !alias.scope !104, !noalias !101
  %309 = or i64 %301, 4
  %310 = add nsw i64 %309, %284
  %311 = getelementptr inbounds float, float* %4, i64 %310
  %312 = bitcast float* %311 to <4 x float>*
  %313 = load <4 x float>, <4 x float>* %312, align 4, !alias.scope !104, !noalias !101
  %314 = fdiv <4 x float> %313, %299
  %315 = bitcast float* %311 to <4 x float>*
  store <4 x float> %314, <4 x float>* %315, align 4, !alias.scope !104, !noalias !101
  %316 = add i64 %301, 8
  %317 = add i64 %302, -2
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %319, label %300, !llvm.loop !106

319:                                              ; preds = %300, %292
  %320 = phi i64 [ 0, %292 ], [ %316, %300 ]
  br i1 %268, label %331, label %321

321:                                              ; preds = %319
  %322 = add nsw i64 %320, %284
  %323 = getelementptr inbounds float, float* %4, i64 %322
  %324 = load float, float* %285, align 4, !alias.scope !101
  %325 = insertelement <4 x float> undef, float %324, i32 0
  %326 = shufflevector <4 x float> %325, <4 x float> undef, <4 x i32> zeroinitializer
  %327 = bitcast float* %323 to <4 x float>*
  %328 = load <4 x float>, <4 x float>* %327, align 4, !alias.scope !104, !noalias !101
  %329 = fdiv <4 x float> %328, %326
  %330 = bitcast float* %323 to <4 x float>*
  store <4 x float> %329, <4 x float>* %330, align 4, !alias.scope !104, !noalias !101
  br label %331

331:                                              ; preds = %319, %321
  br i1 %269, label %332, label %286

332:                                              ; preds = %337, %331, %270
  %333 = phi i64 [ %271, %270 ], [ %157, %331 ], [ %157, %337 ]
  %334 = phi i64 [ %272, %270 ], [ %158, %331 ], [ %158, %337 ]
  %335 = add nuw nsw i64 %273, 1
  %336 = icmp slt i64 %335, %333
  br i1 %336, label %270, label %346

337:                                              ; preds = %286, %337
  %338 = phi i64 [ %344, %337 ], [ %287, %286 ]
  %339 = add nsw i64 %338, %284
  %340 = getelementptr inbounds float, float* %4, i64 %339
  %341 = load float, float* %285, align 4
  %342 = load float, float* %340, align 4
  %343 = fdiv float %342, %341
  store float %343, float* %340, align 4
  %344 = add nuw nsw i64 %338, 1
  %345 = icmp slt i64 %344, %158
  br i1 %345, label %337, label %332, !llvm.loop !107

346:                                              ; preds = %332, %252
  %347 = load i32, i32* %8, align 8
  %348 = icmp sgt i32 %347, 5
  br i1 %348, label %349, label %351

349:                                              ; preds = %346
  %350 = load i32*, i32** %21, align 8
  br label %353

351:                                              ; preds = %346
  %352 = icmp sgt i32 %347, 0
  br i1 %352, label %353, label %456

353:                                              ; preds = %351, %349
  %354 = phi i32* [ %350, %349 ], [ %24, %351 ]
  %355 = zext i32 %347 to i64
  %356 = icmp ult i32 %347, 8
  br i1 %356, label %442, label %357

357:                                              ; preds = %353
  %358 = and i64 %355, 4294967288
  %359 = add nsw i64 %358, -8
  %360 = lshr exact i64 %359, 3
  %361 = add nuw nsw i64 %360, 1
  %362 = and i64 %361, 3
  %363 = icmp ult i64 %359, 24
  br i1 %363, label %409, label %364

364:                                              ; preds = %357
  %365 = sub nsw i64 %361, %362
  br label %366

366:                                              ; preds = %366, %364
  %367 = phi i64 [ 0, %364 ], [ %406, %366 ]
  %368 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %364 ], [ %404, %366 ]
  %369 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %364 ], [ %405, %366 ]
  %370 = phi i64 [ %365, %364 ], [ %407, %366 ]
  %371 = getelementptr inbounds i32, i32* %354, i64 %367
  %372 = bitcast i32* %371 to <4 x i32>*
  %373 = load <4 x i32>, <4 x i32>* %372, align 4
  %374 = getelementptr inbounds i32, i32* %371, i64 4
  %375 = bitcast i32* %374 to <4 x i32>*
  %376 = load <4 x i32>, <4 x i32>* %375, align 4
  %377 = mul nsw <4 x i32> %373, %368
  %378 = mul nsw <4 x i32> %376, %369
  %379 = or i64 %367, 8
  %380 = getelementptr inbounds i32, i32* %354, i64 %379
  %381 = bitcast i32* %380 to <4 x i32>*
  %382 = load <4 x i32>, <4 x i32>* %381, align 4
  %383 = getelementptr inbounds i32, i32* %380, i64 4
  %384 = bitcast i32* %383 to <4 x i32>*
  %385 = load <4 x i32>, <4 x i32>* %384, align 4
  %386 = mul nsw <4 x i32> %382, %377
  %387 = mul nsw <4 x i32> %385, %378
  %388 = or i64 %367, 16
  %389 = getelementptr inbounds i32, i32* %354, i64 %388
  %390 = bitcast i32* %389 to <4 x i32>*
  %391 = load <4 x i32>, <4 x i32>* %390, align 4
  %392 = getelementptr inbounds i32, i32* %389, i64 4
  %393 = bitcast i32* %392 to <4 x i32>*
  %394 = load <4 x i32>, <4 x i32>* %393, align 4
  %395 = mul nsw <4 x i32> %391, %386
  %396 = mul nsw <4 x i32> %394, %387
  %397 = or i64 %367, 24
  %398 = getelementptr inbounds i32, i32* %354, i64 %397
  %399 = bitcast i32* %398 to <4 x i32>*
  %400 = load <4 x i32>, <4 x i32>* %399, align 4
  %401 = getelementptr inbounds i32, i32* %398, i64 4
  %402 = bitcast i32* %401 to <4 x i32>*
  %403 = load <4 x i32>, <4 x i32>* %402, align 4
  %404 = mul nsw <4 x i32> %400, %395
  %405 = mul nsw <4 x i32> %403, %396
  %406 = add i64 %367, 32
  %407 = add i64 %370, -4
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %409, label %366, !llvm.loop !108

409:                                              ; preds = %366, %357
  %410 = phi <4 x i32> [ undef, %357 ], [ %404, %366 ]
  %411 = phi <4 x i32> [ undef, %357 ], [ %405, %366 ]
  %412 = phi i64 [ 0, %357 ], [ %406, %366 ]
  %413 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %357 ], [ %404, %366 ]
  %414 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %357 ], [ %405, %366 ]
  %415 = icmp eq i64 %362, 0
  br i1 %415, label %432, label %416

416:                                              ; preds = %409, %416
  %417 = phi i64 [ %429, %416 ], [ %412, %409 ]
  %418 = phi <4 x i32> [ %427, %416 ], [ %413, %409 ]
  %419 = phi <4 x i32> [ %428, %416 ], [ %414, %409 ]
  %420 = phi i64 [ %430, %416 ], [ %362, %409 ]
  %421 = getelementptr inbounds i32, i32* %354, i64 %417
  %422 = bitcast i32* %421 to <4 x i32>*
  %423 = load <4 x i32>, <4 x i32>* %422, align 4
  %424 = getelementptr inbounds i32, i32* %421, i64 4
  %425 = bitcast i32* %424 to <4 x i32>*
  %426 = load <4 x i32>, <4 x i32>* %425, align 4
  %427 = mul nsw <4 x i32> %423, %418
  %428 = mul nsw <4 x i32> %426, %419
  %429 = add i64 %417, 8
  %430 = add i64 %420, -1
  %431 = icmp eq i64 %430, 0
  br i1 %431, label %432, label %416, !llvm.loop !109

432:                                              ; preds = %416, %409
  %433 = phi <4 x i32> [ %410, %409 ], [ %427, %416 ]
  %434 = phi <4 x i32> [ %411, %409 ], [ %428, %416 ]
  %435 = mul <4 x i32> %434, %433
  %436 = shufflevector <4 x i32> %435, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %437 = mul <4 x i32> %435, %436
  %438 = shufflevector <4 x i32> %437, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %439 = mul <4 x i32> %437, %438
  %440 = extractelement <4 x i32> %439, i32 0
  %441 = icmp eq i64 %358, %355
  br i1 %441, label %453, label %442

442:                                              ; preds = %432, %353
  %443 = phi i64 [ 0, %353 ], [ %358, %432 ]
  %444 = phi i32 [ 1, %353 ], [ %440, %432 ]
  br label %445

445:                                              ; preds = %442, %445
  %446 = phi i64 [ %451, %445 ], [ %443, %442 ]
  %447 = phi i32 [ %450, %445 ], [ %444, %442 ]
  %448 = getelementptr inbounds i32, i32* %354, i64 %446
  %449 = load i32, i32* %448, align 4
  %450 = mul nsw i32 %449, %447
  %451 = add nuw nsw i64 %446, 1
  %452 = icmp eq i64 %451, %355
  br i1 %452, label %453, label %445, !llvm.loop !110

453:                                              ; preds = %445, %432
  %454 = phi i32 [ %440, %432 ], [ %450, %445 ]
  %455 = icmp sgt i32 %454, 0
  br i1 %455, label %456, label %932

456:                                              ; preds = %351, %453
  %457 = phi i32 [ %454, %453 ], [ 1, %351 ]
  %458 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 9
  %459 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 10
  %460 = zext i32 %457 to i64
  %461 = icmp ult i32 %457, 8
  br i1 %461, label %462, label %481

462:                                              ; preds = %521, %481, %456
  %463 = phi i64 [ 0, %481 ], [ 0, %456 ], [ %490, %521 ]
  %464 = xor i64 %463, -1
  %465 = and i64 %460, 1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %477, label %467

467:                                              ; preds = %462
  %468 = getelementptr inbounds float, float* %4, i64 %463
  %469 = load float, float* %468, align 4
  %470 = load float, float* %458, align 4
  %471 = load float, float* %459, align 4
  %472 = fcmp olt float %469, %470
  %473 = select i1 %472, float %470, float %469
  %474 = fcmp ogt float %473, %471
  %475 = select i1 %474, float %471, float %473
  store float %475, float* %468, align 4
  %476 = or i64 %463, 1
  br label %477

477:                                              ; preds = %462, %467
  %478 = phi i64 [ %463, %462 ], [ %476, %467 ]
  %479 = sub nsw i64 0, %460
  %480 = icmp eq i64 %464, %479
  br i1 %480, label %932, label %939

481:                                              ; preds = %456
  %482 = getelementptr float, float* %4, i64 %460
  %483 = getelementptr %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 10
  %484 = bitcast float* %483 to i8*
  %485 = getelementptr i8, i8* %484, i64 1
  %486 = icmp ugt i8* %485, %6
  %487 = icmp ult float* %459, %482
  %488 = and i1 %486, %487
  br i1 %488, label %462, label %489

489:                                              ; preds = %481
  %490 = and i64 %460, 4294967288
  %491 = load float, float* %458, align 4, !alias.scope !112
  %492 = insertelement <4 x float> undef, float %491, i32 0
  %493 = shufflevector <4 x float> %492, <4 x float> undef, <4 x i32> zeroinitializer
  %494 = insertelement <4 x float> undef, float %491, i32 0
  %495 = shufflevector <4 x float> %494, <4 x float> undef, <4 x i32> zeroinitializer
  %496 = load float, float* %459, align 4, !alias.scope !112
  %497 = insertelement <4 x float> undef, float %496, i32 0
  %498 = shufflevector <4 x float> %497, <4 x float> undef, <4 x i32> zeroinitializer
  %499 = insertelement <4 x float> undef, float %496, i32 0
  %500 = shufflevector <4 x float> %499, <4 x float> undef, <4 x i32> zeroinitializer
  br label %501

501:                                              ; preds = %501, %489
  %502 = phi i64 [ 0, %489 ], [ %519, %501 ]
  %503 = getelementptr inbounds float, float* %4, i64 %502
  %504 = bitcast float* %503 to <4 x float>*
  %505 = load <4 x float>, <4 x float>* %504, align 4, !alias.scope !115, !noalias !112
  %506 = getelementptr inbounds float, float* %503, i64 4
  %507 = bitcast float* %506 to <4 x float>*
  %508 = load <4 x float>, <4 x float>* %507, align 4, !alias.scope !115, !noalias !112
  %509 = fcmp olt <4 x float> %505, %493
  %510 = fcmp olt <4 x float> %508, %495
  %511 = select <4 x i1> %509, <4 x float> %493, <4 x float> %505
  %512 = select <4 x i1> %510, <4 x float> %495, <4 x float> %508
  %513 = fcmp ogt <4 x float> %511, %498
  %514 = fcmp ogt <4 x float> %512, %500
  %515 = select <4 x i1> %513, <4 x float> %498, <4 x float> %511
  %516 = select <4 x i1> %514, <4 x float> %500, <4 x float> %512
  %517 = bitcast float* %503 to <4 x float>*
  store <4 x float> %515, <4 x float>* %517, align 4, !alias.scope !115, !noalias !112
  %518 = bitcast float* %506 to <4 x float>*
  store <4 x float> %516, <4 x float>* %518, align 4, !alias.scope !115, !noalias !112
  %519 = add i64 %502, 8
  %520 = icmp eq i64 %519, %490
  br i1 %520, label %521, label %501, !llvm.loop !117

521:                                              ; preds = %501
  %522 = icmp eq i64 %490, %460
  br i1 %522, label %932, label %462

523:                                              ; preds = %537, %238
  %524 = phi i64 [ 0, %238 ], [ %538, %537 ]
  %525 = mul i64 %230, %524
  %526 = add i64 %234, %525
  %527 = mul i64 %226, %524
  %528 = add i64 %236, %527
  %529 = add i64 %237, %527
  br i1 %211, label %530, label %537

530:                                              ; preds = %523
  %531 = add nsw i64 %524, %240
  %532 = mul nsw i64 %531, %217
  %533 = trunc i64 %524 to i32
  br label %540

534:                                              ; preds = %537, %231
  %535 = add nuw nsw i64 %232, 1
  %536 = icmp slt i64 %535, %220
  br i1 %536, label %231, label %241

537:                                              ; preds = %612, %523
  %538 = add nuw nsw i64 %524, 1
  %539 = icmp eq i64 %538, %221
  br i1 %539, label %534, label %523

540:                                              ; preds = %612, %530
  %541 = phi i64 [ 0, %530 ], [ %613, %612 ]
  %542 = mul i64 %541, %57
  %543 = add i64 %526, %542
  %544 = getelementptr float, float* %2, i64 %543
  %545 = mul i64 %541, %57
  %546 = add i64 %528, %545
  %547 = getelementptr float, float* %2, i64 %546
  %548 = add i64 %529, %545
  %549 = getelementptr float, float* %2, i64 %548
  %550 = load i16, i16* %212, align 2
  %551 = sext i16 %550 to i32
  %552 = add nsw i32 %533, %551
  %553 = load i16, i16* %213, align 2
  %554 = sext i16 %553 to i32
  %555 = trunc i64 %541 to i32
  %556 = add nsw i32 %555, %554
  %557 = load i32, i32* %214, align 4
  %558 = icmp slt i32 %552, %557
  br i1 %558, label %563, label %559

559:                                              ; preds = %540
  %560 = sub nsw i32 %552, %557
  %561 = sdiv i32 %560, %48
  %562 = add nsw i32 %561, 1
  br label %563

563:                                              ; preds = %540, %559
  %564 = phi i32 [ %562, %559 ], [ 0, %540 ]
  %565 = sdiv i32 %552, %48
  %566 = add nsw i32 %565, 1
  %567 = icmp slt i32 %45, %566
  %568 = select i1 %567, i32 %45, i32 %566
  %569 = load i32, i32* %215, align 4
  %570 = icmp slt i32 %556, %569
  br i1 %570, label %575, label %571

571:                                              ; preds = %563
  %572 = sub nsw i32 %556, %569
  %573 = sdiv i32 %572, %50
  %574 = add nsw i32 %573, 1
  br label %575

575:                                              ; preds = %563, %571
  %576 = phi i32 [ %574, %571 ], [ 0, %563 ]
  %577 = sdiv i32 %556, %50
  %578 = add nsw i32 %577, 1
  %579 = icmp slt i32 %46, %578
  %580 = select i1 %579, i32 %46, i32 %578
  %581 = icmp slt i32 %564, %568
  br i1 %581, label %582, label %612

582:                                              ; preds = %575
  %583 = icmp slt i32 %576, %580
  %584 = add nsw i64 %541, %532
  %585 = mul nsw i64 %584, %57
  %586 = getelementptr inbounds float, float* %2, i64 %585
  %587 = sext i32 %576 to i64
  %588 = sext i32 %580 to i64
  %589 = sext i32 %564 to i64
  %590 = sext i32 %568 to i64
  %591 = add i64 %235, %589
  %592 = mul i64 %591, %216
  %593 = add i64 %592, %587
  %594 = mul i64 %158, %593
  %595 = shl i64 %593, 2
  %596 = add i64 %595, 4
  %597 = mul i64 %158, %596
  %598 = add i64 %233, %589
  %599 = mul i64 %598, %216
  %600 = add i64 %599, %587
  %601 = mul i64 %158, %600
  br label %602

602:                                              ; preds = %582, %615
  %603 = phi i64 [ 0, %582 ], [ %618, %615 ]
  %604 = phi i64 [ %589, %582 ], [ %616, %615 ]
  %605 = mul i64 %227, %603
  %606 = add i64 %601, %605
  %607 = mul i64 %223, %603
  %608 = add i64 %594, %607
  br i1 %583, label %609, label %615

609:                                              ; preds = %602
  %610 = add nsw i64 %604, %239
  %611 = mul nsw i64 %610, %216
  br label %619

612:                                              ; preds = %615, %575
  %613 = add nuw nsw i64 %541, 1
  %614 = icmp eq i64 %613, %222
  br i1 %614, label %537, label %540

615:                                              ; preds = %925, %602
  %616 = add nsw i64 %604, 1
  %617 = icmp slt i64 %616, %590
  %618 = add i64 %603, 1
  br i1 %617, label %602, label %612

619:                                              ; preds = %609, %925
  %620 = phi i64 [ 0, %609 ], [ %931, %925 ]
  %621 = phi i64 [ %587, %609 ], [ %929, %925 ]
  %622 = mul i64 %158, %620
  %623 = add i64 %606, %622
  %624 = getelementptr float, float* %4, i64 %623
  %625 = mul i64 %158, %620
  %626 = add i64 %608, %625
  %627 = getelementptr float, float* %4, i64 %626
  %628 = add i64 %607, %625
  %629 = getelementptr float, float* %4, i64 %628
  %630 = bitcast float* %629 to i8*
  %631 = getelementptr i8, i8* %630, i64 %597
  %632 = add nsw i64 %621, %611
  %633 = mul nsw i64 %158, %632
  %634 = getelementptr inbounds float, float* %4, i64 %633
  %635 = ptrtoint float* %634 to i64
  %636 = and i64 %635, 3
  %637 = icmp eq i64 %636, 0
  br i1 %637, label %638, label %644

638:                                              ; preds = %619
  %639 = lshr i64 %635, 2
  %640 = sub nsw i64 0, %639
  %641 = and i64 %640, 3
  %642 = icmp slt i64 %641, %158
  %643 = select i1 %642, i64 %641, i64 %158
  br label %644

644:                                              ; preds = %638, %619
  %645 = phi i64 [ %643, %638 ], [ %158, %619 ]
  %646 = sub nsw i64 %158, %645
  %647 = sdiv i64 %646, 4
  %648 = shl nsw i64 %647, 2
  %649 = add nsw i64 %648, %645
  %650 = icmp sgt i64 %645, 0
  br i1 %650, label %651, label %776

651:                                              ; preds = %644
  %652 = icmp ult i64 %645, 8
  br i1 %652, label %729, label %653

653:                                              ; preds = %651
  %654 = getelementptr float, float* %624, i64 %645
  %655 = getelementptr float, float* %544, i64 %645
  %656 = icmp ult float* %624, %655
  %657 = icmp ult float* %544, %654
  %658 = and i1 %656, %657
  br i1 %658, label %729, label %659

659:                                              ; preds = %653
  %660 = and i64 %645, -8
  %661 = add nsw i64 %660, -8
  %662 = lshr exact i64 %661, 3
  %663 = add nuw nsw i64 %662, 1
  %664 = and i64 %663, 1
  %665 = icmp eq i64 %661, 0
  br i1 %665, label %707, label %666

666:                                              ; preds = %659
  %667 = sub nuw nsw i64 %663, %664
  br label %668

668:                                              ; preds = %668, %666
  %669 = phi i64 [ 0, %666 ], [ %704, %668 ]
  %670 = phi i64 [ %667, %666 ], [ %705, %668 ]
  %671 = getelementptr inbounds float, float* %634, i64 %669
  %672 = getelementptr inbounds float, float* %586, i64 %669
  %673 = bitcast float* %672 to <4 x float>*
  %674 = load <4 x float>, <4 x float>* %673, align 4, !alias.scope !118
  %675 = getelementptr inbounds float, float* %672, i64 4
  %676 = bitcast float* %675 to <4 x float>*
  %677 = load <4 x float>, <4 x float>* %676, align 4, !alias.scope !118
  %678 = bitcast float* %671 to <4 x float>*
  %679 = load <4 x float>, <4 x float>* %678, align 4, !alias.scope !121, !noalias !118
  %680 = getelementptr inbounds float, float* %671, i64 4
  %681 = bitcast float* %680 to <4 x float>*
  %682 = load <4 x float>, <4 x float>* %681, align 4, !alias.scope !121, !noalias !118
  %683 = fadd <4 x float> %674, %679
  %684 = fadd <4 x float> %677, %682
  %685 = bitcast float* %671 to <4 x float>*
  store <4 x float> %683, <4 x float>* %685, align 4, !alias.scope !121, !noalias !118
  %686 = bitcast float* %680 to <4 x float>*
  store <4 x float> %684, <4 x float>* %686, align 4, !alias.scope !121, !noalias !118
  %687 = or i64 %669, 8
  %688 = getelementptr inbounds float, float* %634, i64 %687
  %689 = getelementptr inbounds float, float* %586, i64 %687
  %690 = bitcast float* %689 to <4 x float>*
  %691 = load <4 x float>, <4 x float>* %690, align 4, !alias.scope !118
  %692 = getelementptr inbounds float, float* %689, i64 4
  %693 = bitcast float* %692 to <4 x float>*
  %694 = load <4 x float>, <4 x float>* %693, align 4, !alias.scope !118
  %695 = bitcast float* %688 to <4 x float>*
  %696 = load <4 x float>, <4 x float>* %695, align 4, !alias.scope !121, !noalias !118
  %697 = getelementptr inbounds float, float* %688, i64 4
  %698 = bitcast float* %697 to <4 x float>*
  %699 = load <4 x float>, <4 x float>* %698, align 4, !alias.scope !121, !noalias !118
  %700 = fadd <4 x float> %691, %696
  %701 = fadd <4 x float> %694, %699
  %702 = bitcast float* %688 to <4 x float>*
  store <4 x float> %700, <4 x float>* %702, align 4, !alias.scope !121, !noalias !118
  %703 = bitcast float* %697 to <4 x float>*
  store <4 x float> %701, <4 x float>* %703, align 4, !alias.scope !121, !noalias !118
  %704 = add i64 %669, 16
  %705 = add i64 %670, -2
  %706 = icmp eq i64 %705, 0
  br i1 %706, label %707, label %668, !llvm.loop !123

707:                                              ; preds = %668, %659
  %708 = phi i64 [ 0, %659 ], [ %704, %668 ]
  %709 = icmp eq i64 %664, 0
  br i1 %709, label %727, label %710

710:                                              ; preds = %707
  %711 = getelementptr inbounds float, float* %634, i64 %708
  %712 = getelementptr inbounds float, float* %586, i64 %708
  %713 = bitcast float* %712 to <4 x float>*
  %714 = load <4 x float>, <4 x float>* %713, align 4, !alias.scope !118
  %715 = getelementptr inbounds float, float* %712, i64 4
  %716 = bitcast float* %715 to <4 x float>*
  %717 = load <4 x float>, <4 x float>* %716, align 4, !alias.scope !118
  %718 = bitcast float* %711 to <4 x float>*
  %719 = load <4 x float>, <4 x float>* %718, align 4, !alias.scope !121, !noalias !118
  %720 = getelementptr inbounds float, float* %711, i64 4
  %721 = bitcast float* %720 to <4 x float>*
  %722 = load <4 x float>, <4 x float>* %721, align 4, !alias.scope !121, !noalias !118
  %723 = fadd <4 x float> %714, %719
  %724 = fadd <4 x float> %717, %722
  %725 = bitcast float* %711 to <4 x float>*
  store <4 x float> %723, <4 x float>* %725, align 4, !alias.scope !121, !noalias !118
  %726 = bitcast float* %720 to <4 x float>*
  store <4 x float> %724, <4 x float>* %726, align 4, !alias.scope !121, !noalias !118
  br label %727

727:                                              ; preds = %707, %710
  %728 = icmp eq i64 %645, %660
  br i1 %728, label %776, label %729

729:                                              ; preds = %727, %653, %651
  %730 = phi i64 [ 0, %653 ], [ 0, %651 ], [ %660, %727 ]
  %731 = xor i64 %730, -1
  %732 = add i64 %645, %731
  %733 = and i64 %645, 3
  %734 = icmp eq i64 %733, 0
  br i1 %734, label %746, label %735

735:                                              ; preds = %729, %735
  %736 = phi i64 [ %743, %735 ], [ %730, %729 ]
  %737 = phi i64 [ %744, %735 ], [ %733, %729 ]
  %738 = getelementptr inbounds float, float* %634, i64 %736
  %739 = getelementptr inbounds float, float* %586, i64 %736
  %740 = load float, float* %739, align 4
  %741 = load float, float* %738, align 4
  %742 = fadd float %740, %741
  store float %742, float* %738, align 4
  %743 = add nuw nsw i64 %736, 1
  %744 = add i64 %737, -1
  %745 = icmp eq i64 %744, 0
  br i1 %745, label %746, label %735, !llvm.loop !124

746:                                              ; preds = %735, %729
  %747 = phi i64 [ %730, %729 ], [ %743, %735 ]
  %748 = icmp ult i64 %732, 3
  br i1 %748, label %776, label %749

749:                                              ; preds = %746, %749
  %750 = phi i64 [ %774, %749 ], [ %747, %746 ]
  %751 = getelementptr inbounds float, float* %634, i64 %750
  %752 = getelementptr inbounds float, float* %586, i64 %750
  %753 = load float, float* %752, align 4
  %754 = load float, float* %751, align 4
  %755 = fadd float %753, %754
  store float %755, float* %751, align 4
  %756 = add nuw nsw i64 %750, 1
  %757 = getelementptr inbounds float, float* %634, i64 %756
  %758 = getelementptr inbounds float, float* %586, i64 %756
  %759 = load float, float* %758, align 4
  %760 = load float, float* %757, align 4
  %761 = fadd float %759, %760
  store float %761, float* %757, align 4
  %762 = add nuw nsw i64 %750, 2
  %763 = getelementptr inbounds float, float* %634, i64 %762
  %764 = getelementptr inbounds float, float* %586, i64 %762
  %765 = load float, float* %764, align 4
  %766 = load float, float* %763, align 4
  %767 = fadd float %765, %766
  store float %767, float* %763, align 4
  %768 = add nuw nsw i64 %750, 3
  %769 = getelementptr inbounds float, float* %634, i64 %768
  %770 = getelementptr inbounds float, float* %586, i64 %768
  %771 = load float, float* %770, align 4
  %772 = load float, float* %769, align 4
  %773 = fadd float %771, %772
  store float %773, float* %769, align 4
  %774 = add nuw nsw i64 %750, 4
  %775 = icmp eq i64 %774, %645
  br i1 %775, label %776, label %749, !llvm.loop !125

776:                                              ; preds = %746, %749, %727, %644
  %777 = icmp sgt i64 %646, 3
  br i1 %777, label %914, label %778

778:                                              ; preds = %914, %776
  %779 = icmp slt i64 %649, %158
  br i1 %779, label %780, label %925

780:                                              ; preds = %778
  %781 = sub nsw i64 %158, %645
  %782 = sub i64 %781, %648
  %783 = icmp ult i64 %782, 8
  br i1 %783, label %866, label %784

784:                                              ; preds = %780
  %785 = add i64 %645, %648
  %786 = getelementptr float, float* %627, i64 %785
  %787 = getelementptr float, float* %547, i64 %785
  %788 = bitcast float* %787 to i8*
  %789 = icmp ult float* %786, %549
  %790 = icmp ugt i8* %631, %788
  %791 = and i1 %789, %790
  br i1 %791, label %866, label %792

792:                                              ; preds = %784
  %793 = and i64 %782, -8
  %794 = add i64 %649, %793
  %795 = add i64 %793, -8
  %796 = lshr exact i64 %795, 3
  %797 = add nuw nsw i64 %796, 1
  %798 = and i64 %797, 1
  %799 = icmp eq i64 %795, 0
  br i1 %799, label %843, label %800

800:                                              ; preds = %792
  %801 = sub nuw nsw i64 %797, %798
  br label %802

802:                                              ; preds = %802, %800
  %803 = phi i64 [ 0, %800 ], [ %840, %802 ]
  %804 = phi i64 [ %801, %800 ], [ %841, %802 ]
  %805 = add i64 %649, %803
  %806 = getelementptr inbounds float, float* %634, i64 %805
  %807 = getelementptr inbounds float, float* %586, i64 %805
  %808 = bitcast float* %807 to <4 x float>*
  %809 = load <4 x float>, <4 x float>* %808, align 4, !alias.scope !126
  %810 = getelementptr inbounds float, float* %807, i64 4
  %811 = bitcast float* %810 to <4 x float>*
  %812 = load <4 x float>, <4 x float>* %811, align 4, !alias.scope !126
  %813 = bitcast float* %806 to <4 x float>*
  %814 = load <4 x float>, <4 x float>* %813, align 4, !alias.scope !129, !noalias !126
  %815 = getelementptr inbounds float, float* %806, i64 4
  %816 = bitcast float* %815 to <4 x float>*
  %817 = load <4 x float>, <4 x float>* %816, align 4, !alias.scope !129, !noalias !126
  %818 = fadd <4 x float> %809, %814
  %819 = fadd <4 x float> %812, %817
  %820 = bitcast float* %806 to <4 x float>*
  store <4 x float> %818, <4 x float>* %820, align 4, !alias.scope !129, !noalias !126
  %821 = bitcast float* %815 to <4 x float>*
  store <4 x float> %819, <4 x float>* %821, align 4, !alias.scope !129, !noalias !126
  %822 = or i64 %803, 8
  %823 = add i64 %649, %822
  %824 = getelementptr inbounds float, float* %634, i64 %823
  %825 = getelementptr inbounds float, float* %586, i64 %823
  %826 = bitcast float* %825 to <4 x float>*
  %827 = load <4 x float>, <4 x float>* %826, align 4, !alias.scope !126
  %828 = getelementptr inbounds float, float* %825, i64 4
  %829 = bitcast float* %828 to <4 x float>*
  %830 = load <4 x float>, <4 x float>* %829, align 4, !alias.scope !126
  %831 = bitcast float* %824 to <4 x float>*
  %832 = load <4 x float>, <4 x float>* %831, align 4, !alias.scope !129, !noalias !126
  %833 = getelementptr inbounds float, float* %824, i64 4
  %834 = bitcast float* %833 to <4 x float>*
  %835 = load <4 x float>, <4 x float>* %834, align 4, !alias.scope !129, !noalias !126
  %836 = fadd <4 x float> %827, %832
  %837 = fadd <4 x float> %830, %835
  %838 = bitcast float* %824 to <4 x float>*
  store <4 x float> %836, <4 x float>* %838, align 4, !alias.scope !129, !noalias !126
  %839 = bitcast float* %833 to <4 x float>*
  store <4 x float> %837, <4 x float>* %839, align 4, !alias.scope !129, !noalias !126
  %840 = add i64 %803, 16
  %841 = add i64 %804, -2
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %802, !llvm.loop !131

843:                                              ; preds = %802, %792
  %844 = phi i64 [ 0, %792 ], [ %840, %802 ]
  %845 = icmp eq i64 %798, 0
  br i1 %845, label %864, label %846

846:                                              ; preds = %843
  %847 = add i64 %649, %844
  %848 = getelementptr inbounds float, float* %634, i64 %847
  %849 = getelementptr inbounds float, float* %586, i64 %847
  %850 = bitcast float* %849 to <4 x float>*
  %851 = load <4 x float>, <4 x float>* %850, align 4, !alias.scope !126
  %852 = getelementptr inbounds float, float* %849, i64 4
  %853 = bitcast float* %852 to <4 x float>*
  %854 = load <4 x float>, <4 x float>* %853, align 4, !alias.scope !126
  %855 = bitcast float* %848 to <4 x float>*
  %856 = load <4 x float>, <4 x float>* %855, align 4, !alias.scope !129, !noalias !126
  %857 = getelementptr inbounds float, float* %848, i64 4
  %858 = bitcast float* %857 to <4 x float>*
  %859 = load <4 x float>, <4 x float>* %858, align 4, !alias.scope !129, !noalias !126
  %860 = fadd <4 x float> %851, %856
  %861 = fadd <4 x float> %854, %859
  %862 = bitcast float* %848 to <4 x float>*
  store <4 x float> %860, <4 x float>* %862, align 4, !alias.scope !129, !noalias !126
  %863 = bitcast float* %857 to <4 x float>*
  store <4 x float> %861, <4 x float>* %863, align 4, !alias.scope !129, !noalias !126
  br label %864

864:                                              ; preds = %843, %846
  %865 = icmp eq i64 %782, %793
  br i1 %865, label %925, label %866

866:                                              ; preds = %864, %784, %780
  %867 = phi i64 [ %649, %784 ], [ %649, %780 ], [ %794, %864 ]
  %868 = sub i64 %158, %867
  %869 = xor i64 %867, -1
  %870 = add i64 %158, %869
  %871 = and i64 %868, 3
  %872 = icmp eq i64 %871, 0
  br i1 %872, label %884, label %873

873:                                              ; preds = %866, %873
  %874 = phi i64 [ %881, %873 ], [ %867, %866 ]
  %875 = phi i64 [ %882, %873 ], [ %871, %866 ]
  %876 = getelementptr inbounds float, float* %634, i64 %874
  %877 = getelementptr inbounds float, float* %586, i64 %874
  %878 = load float, float* %877, align 4
  %879 = load float, float* %876, align 4
  %880 = fadd float %878, %879
  store float %880, float* %876, align 4
  %881 = add nsw i64 %874, 1
  %882 = add i64 %875, -1
  %883 = icmp eq i64 %882, 0
  br i1 %883, label %884, label %873, !llvm.loop !132

884:                                              ; preds = %873, %866
  %885 = phi i64 [ %867, %866 ], [ %881, %873 ]
  %886 = icmp ult i64 %870, 3
  br i1 %886, label %925, label %887

887:                                              ; preds = %884, %887
  %888 = phi i64 [ %912, %887 ], [ %885, %884 ]
  %889 = getelementptr inbounds float, float* %634, i64 %888
  %890 = getelementptr inbounds float, float* %586, i64 %888
  %891 = load float, float* %890, align 4
  %892 = load float, float* %889, align 4
  %893 = fadd float %891, %892
  store float %893, float* %889, align 4
  %894 = add nsw i64 %888, 1
  %895 = getelementptr inbounds float, float* %634, i64 %894
  %896 = getelementptr inbounds float, float* %586, i64 %894
  %897 = load float, float* %896, align 4
  %898 = load float, float* %895, align 4
  %899 = fadd float %897, %898
  store float %899, float* %895, align 4
  %900 = add nsw i64 %888, 2
  %901 = getelementptr inbounds float, float* %634, i64 %900
  %902 = getelementptr inbounds float, float* %586, i64 %900
  %903 = load float, float* %902, align 4
  %904 = load float, float* %901, align 4
  %905 = fadd float %903, %904
  store float %905, float* %901, align 4
  %906 = add nsw i64 %888, 3
  %907 = getelementptr inbounds float, float* %634, i64 %906
  %908 = getelementptr inbounds float, float* %586, i64 %906
  %909 = load float, float* %908, align 4
  %910 = load float, float* %907, align 4
  %911 = fadd float %909, %910
  store float %911, float* %907, align 4
  %912 = add nsw i64 %888, 4
  %913 = icmp eq i64 %912, %158
  br i1 %913, label %925, label %887, !llvm.loop !133

914:                                              ; preds = %776, %914
  %915 = phi i64 [ %923, %914 ], [ %645, %776 ]
  %916 = getelementptr inbounds float, float* %634, i64 %915
  %917 = getelementptr inbounds float, float* %586, i64 %915
  %918 = bitcast float* %917 to <4 x float>*
  %919 = load <4 x float>, <4 x float>* %918, align 1
  %920 = bitcast float* %916 to <4 x float>*
  %921 = load <4 x float>, <4 x float>* %920, align 16
  %922 = fadd <4 x float> %919, %921
  store <4 x float> %922, <4 x float>* %920, align 16
  %923 = add nsw i64 %915, 4
  %924 = icmp slt i64 %923, %649
  br i1 %924, label %914, label %778

925:                                              ; preds = %884, %887, %864, %778
  %926 = getelementptr inbounds float, float* %156, i64 %632
  %927 = load float, float* %926, align 4
  %928 = fadd float %927, 1.000000e+00
  store float %928, float* %926, align 4
  %929 = add nsw i64 %621, 1
  %930 = icmp slt i64 %929, %588
  %931 = add i64 %620, 1
  br i1 %930, label %619, label %615

932:                                              ; preds = %477, %939, %521, %453
  %933 = icmp eq float* %156, null
  br i1 %933, label %938, label %934

934:                                              ; preds = %932
  %935 = getelementptr inbounds float, float* %156, i64 -2
  %936 = bitcast float* %935 to i8**
  %937 = load i8*, i8** %936, align 8
  tail call void @free(i8* %937) #13
  br label %938

938:                                              ; preds = %932, %934
  ret void

939:                                              ; preds = %477, %939
  %940 = phi i64 [ %958, %939 ], [ %478, %477 ]
  %941 = getelementptr inbounds float, float* %4, i64 %940
  %942 = load float, float* %941, align 4
  %943 = load float, float* %458, align 4
  %944 = load float, float* %459, align 4
  %945 = fcmp olt float %942, %943
  %946 = select i1 %945, float %943, float %942
  %947 = fcmp ogt float %946, %944
  %948 = select i1 %947, float %944, float %946
  store float %948, float* %941, align 4
  %949 = add nuw nsw i64 %940, 1
  %950 = getelementptr inbounds float, float* %4, i64 %949
  %951 = load float, float* %950, align 4
  %952 = load float, float* %458, align 4
  %953 = load float, float* %459, align 4
  %954 = fcmp olt float %951, %952
  %955 = select i1 %954, float %952, float %951
  %956 = fcmp ogt float %955, %953
  %957 = select i1 %956, float %953, float %955
  store float %957, float* %950, align 4
  %958 = add nuw nsw i64 %940, 2
  %959 = icmp eq i64 %958, %460
  br i1 %959, label %932, label %939, !llvm.loop !134

960:                                              ; preds = %88
  %961 = getelementptr inbounds i32, i32* %71, i64 %91
  %962 = load i32, i32* %961, align 4, !noalias !96
  br label %963

963:                                              ; preds = %960, %88
  %964 = phi i32 [ %962, %960 ], [ 1, %88 ]
  %965 = mul nsw i32 %964, %90
  %966 = or i64 %81, 2
  %967 = icmp eq i64 %966, %73
  br i1 %967, label %971, label %968

968:                                              ; preds = %963
  %969 = getelementptr inbounds i32, i32* %71, i64 %966
  %970 = load i32, i32* %969, align 4, !noalias !96
  br label %971

971:                                              ; preds = %968, %963
  %972 = phi i32 [ %970, %968 ], [ 1, %963 ]
  %973 = mul nsw i32 %972, %965
  %974 = or i64 %81, 3
  %975 = icmp eq i64 %974, %73
  br i1 %975, label %979, label %976

976:                                              ; preds = %971
  %977 = getelementptr inbounds i32, i32* %71, i64 %974
  %978 = load i32, i32* %977, align 4, !noalias !96
  br label %979

979:                                              ; preds = %976, %971
  %980 = phi i32 [ %978, %976 ], [ 1, %971 ]
  %981 = mul nsw i32 %980, %973
  %982 = add nuw nsw i64 %81, 4
  %983 = add i64 %83, -4
  %984 = icmp eq i64 %983, 0
  br i1 %984, label %93, label %80
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #10

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops13AveragePool32ERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %6 = alloca [256 x i32], align 16
  %7 = bitcast [256 x i32]* %6 to i8*
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %10 = load i32, i32* %8, align 8
  %11 = icmp sgt i32 %10, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %12 to i32*
  %19 = select i1 %11, i32* %17, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %15 to [5 x i32]*
  %24 = bitcast %union.anon* %15 to i32*
  %25 = select i1 %14, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %17, i64 3
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = select i1 %11, i32* %29, i32* %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %22, i64 3
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = select i1 %14, i32* %34, i32* %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %33
  %40 = select i1 %39, i32 %38, i32 %33
  %41 = getelementptr inbounds i32, i32* %17, i64 1
  %42 = getelementptr inbounds i32, i32* %17, i64 2
  %43 = bitcast %union.anon* %12 to [5 x i32]*
  %44 = getelementptr inbounds [5 x i32], [5 x i32]* %43, i64 0, i64 1
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %46 = bitcast [16 x i8]* %45 to i32*
  %47 = select i1 %11, i32* %41, i32* %44
  %48 = select i1 %11, i32* %42, i32* %46
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = getelementptr inbounds i32, i32* %22, i64 1
  %52 = getelementptr inbounds i32, i32* %22, i64 2
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %55 = bitcast [16 x i8]* %54 to i32*
  %56 = select i1 %14, i32* %51, i32* %53
  %57 = select i1 %14, i32* %52, i32* %55
  %58 = load i32, i32* %56, align 4
  %59 = load i32, i32* %57, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 4
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %7) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 1024, i1 false)
  %64 = icmp sgt i32 %28, 0
  br i1 %64, label %65, label %83

65:                                               ; preds = %5
  %66 = icmp sgt i32 %40, 0
  %67 = icmp sgt i32 %58, 0
  %68 = icmp sgt i32 %59, 0
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %71 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %73 = sext i32 %40 to i64
  %74 = getelementptr inbounds i32, i32* %24, i64 1
  %75 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %76 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %77 = sext i32 %50 to i64
  %78 = mul nsw i64 %77, %73
  br label %79

79:                                               ; preds = %65, %84
  %80 = phi i32 [ 0, %65 ], [ %85, %84 ]
  br i1 %66, label %81, label %84

81:                                               ; preds = %79
  %82 = mul nsw i32 %80, %49
  br label %87

83:                                               ; preds = %84, %5
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %7) #13
  ret void

84:                                               ; preds = %143, %79
  %85 = add nuw nsw i32 %80, 1
  %86 = icmp slt i32 %85, %28
  br i1 %86, label %79, label %83

87:                                               ; preds = %81, %143
  %88 = phi i64 [ 0, %81 ], [ %147, %143 ]
  %89 = phi i32 [ 0, %81 ], [ %146, %143 ]
  %90 = phi i64 [ 0, %81 ], [ %144, %143 ]
  %91 = trunc i64 %88 to i32
  %92 = mul i32 %91, -256
  %93 = add i32 %40, %92
  %94 = icmp slt i32 %93, 256
  %95 = select i1 %94, i32 %93, i32 256
  %96 = sext i32 %95 to i64
  %97 = icmp sgt i64 %96, 1
  %98 = select i1 %97, i64 %96, i64 1
  %99 = and i64 %98, 9223372036854775800
  %100 = add nsw i64 %99, -8
  %101 = lshr exact i64 %100, 3
  %102 = add nuw nsw i64 %101, 1
  %103 = mul i32 %89, -256
  %104 = add i32 %40, %103
  %105 = icmp slt i32 %104, 256
  %106 = select i1 %105, i32 %104, i32 256
  %107 = sext i32 %106 to i64
  %108 = icmp sgt i64 %107, 1
  %109 = select i1 %108, i64 %107, i64 1
  %110 = getelementptr [256 x i32], [256 x i32]* %6, i64 0, i64 %109
  %111 = bitcast i32* %110 to i8*
  %112 = shl nuw nsw i64 %88, 8
  %113 = mul i32 %89, -256
  %114 = add i32 %40, %113
  %115 = icmp slt i32 %114, 256
  %116 = select i1 %115, i32 %114, i32 256
  %117 = sext i32 %116 to i64
  %118 = icmp sgt i64 %117, 1
  %119 = select i1 %118, i64 %117, i64 1
  %120 = trunc i64 %90 to i32
  %121 = sub nsw i32 %40, %120
  br i1 %67, label %122, label %143

122:                                              ; preds = %87
  %123 = getelementptr i8, i8* %2, i64 %112
  %124 = icmp slt i32 %121, 256
  %125 = select i1 %124, i32 %121, i32 256
  %126 = sext i32 %125 to i64
  %127 = shl nsw i64 %126, 2
  %128 = getelementptr inbounds i8, i8* %2, i64 %90
  %129 = icmp sgt i32 %121, 0
  %130 = getelementptr i8, i8* %123, i64 %109
  %131 = icmp ult i64 %119, 8
  %132 = and i64 %119, 9223372036854775800
  %133 = and i64 %102, 1
  %134 = icmp eq i64 %100, 0
  %135 = sub nuw nsw i64 %102, %133
  %136 = icmp eq i64 %133, 0
  %137 = icmp eq i64 %119, %132
  br label %138

138:                                              ; preds = %148, %122
  %139 = phi i32 [ 0, %122 ], [ %150, %148 ]
  %140 = phi i32 [ 0, %122 ], [ %149, %148 ]
  br i1 %68, label %141, label %148

141:                                              ; preds = %138
  %142 = mul nsw i32 %140, %61
  br label %152

143:                                              ; preds = %148, %87
  %144 = add nuw nsw i64 %90, 256
  %145 = icmp slt i64 %144, %73
  %146 = add i32 %89, 1
  %147 = add i64 %88, 1
  br i1 %145, label %87, label %84

148:                                              ; preds = %347, %138
  %149 = add nuw nsw i32 %140, 1
  %150 = sub i32 %139, %61
  %151 = icmp eq i32 %149, %58
  br i1 %151, label %143, label %138

152:                                              ; preds = %347, %141
  %153 = phi i32 [ 0, %141 ], [ %348, %347 ]
  %154 = mul nsw i32 %153, %63
  %155 = load i16, i16* %69, align 2
  %156 = sext i16 %155 to i32
  %157 = sub nsw i32 %154, %156
  %158 = load i16, i16* %70, align 2
  %159 = sext i16 %158 to i32
  %160 = sub nsw i32 %142, %159
  %161 = sub nsw i32 0, %157
  %162 = icmp sgt i32 %161, 0
  %163 = select i1 %162, i32 %161, i32 0
  %164 = sub nsw i32 %50, %157
  %165 = load i32, i32* %71, align 4
  %166 = icmp slt i32 %164, %165
  %167 = select i1 %166, i32 %164, i32 %165
  %168 = sub nsw i32 0, %160
  %169 = icmp sgt i32 %168, 0
  %170 = select i1 %169, i32 %168, i32 0
  %171 = sub nsw i32 %49, %160
  %172 = load i32, i32* %72, align 4
  %173 = icmp slt i32 %171, %172
  %174 = select i1 %173, i32 %171, i32 %172
  %175 = sub nsw i32 %167, %163
  %176 = sub nsw i32 %174, %170
  %177 = mul nsw i32 %176, %175
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 %127, i1 false)
  %178 = add nsw i32 %160, %82
  %179 = mul nsw i32 %178, %50
  %180 = add nsw i32 %179, %157
  %181 = mul nsw i32 %180, %40
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %128, i64 %182
  %184 = icmp sgt i32 %174, %170
  br i1 %184, label %185, label %200

185:                                              ; preds = %152
  %186 = icmp sgt i32 %167, %163
  %187 = add i32 %139, %159
  %188 = icmp sgt i32 %187, 0
  %189 = select i1 %188, i32 %187, i32 0
  %190 = zext i32 %189 to i64
  %191 = zext i32 %163 to i64
  %192 = sext i32 %174 to i64
  %193 = mul nsw i64 %77, %190
  %194 = add i64 %193, %191
  %195 = mul i64 %194, %73
  %196 = add i64 %112, %195
  %197 = add i64 %196, %182
  %198 = add i64 %195, %182
  %199 = getelementptr i8, i8* %130, i64 %198
  br label %214

200:                                              ; preds = %308, %152
  %201 = load i32, i32* %74, align 4
  %202 = mul nsw i32 %201, %80
  %203 = add nsw i32 %202, %140
  %204 = load i32, i32* %55, align 4
  %205 = mul nsw i32 %203, %204
  %206 = add nsw i32 %205, %153
  %207 = load i32, i32* %36, align 4
  %208 = mul nsw i32 %206, %207
  %209 = add nsw i32 %208, %120
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %4, i64 %210
  br i1 %129, label %212, label %347

212:                                              ; preds = %200
  %213 = sdiv i32 %177, 2
  br label %328

214:                                              ; preds = %185, %308
  %215 = phi i64 [ 0, %185 ], [ %311, %308 ]
  %216 = phi i64 [ %190, %185 ], [ %309, %308 ]
  %217 = mul i64 %78, %215
  %218 = add i64 %197, %217
  %219 = getelementptr i8, i8* %199, i64 %217
  br i1 %186, label %220, label %308

220:                                              ; preds = %214
  %221 = mul nsw i64 %216, %77
  %222 = add nsw i64 %221, %191
  %223 = mul nsw i64 %222, %73
  %224 = getelementptr inbounds i8, i8* %183, i64 %223
  br label %225

225:                                              ; preds = %220, %323
  %226 = phi i64 [ 0, %220 ], [ %327, %323 ]
  %227 = phi i32 [ %163, %220 ], [ %325, %323 ]
  %228 = phi i8* [ %224, %220 ], [ %324, %323 ]
  %229 = mul i64 %226, %73
  %230 = add i64 %218, %229
  %231 = getelementptr i8, i8* %2, i64 %230
  %232 = getelementptr i8, i8* %219, i64 %229
  br i1 %129, label %233, label %323

233:                                              ; preds = %225
  br i1 %131, label %234, label %237

234:                                              ; preds = %307, %237, %233
  %235 = phi i64 [ 0, %237 ], [ 0, %233 ], [ %132, %307 ]
  %236 = phi i8* [ %228, %237 ], [ %228, %233 ], [ %242, %307 ]
  br label %312

237:                                              ; preds = %233
  %238 = icmp ugt i8* %232, %7
  %239 = icmp ult i8* %231, %111
  %240 = and i1 %238, %239
  br i1 %240, label %234, label %241

241:                                              ; preds = %237
  %242 = getelementptr i8, i8* %228, i64 %132
  br i1 %134, label %286, label %243

243:                                              ; preds = %241, %243
  %244 = phi i64 [ %283, %243 ], [ 0, %241 ]
  %245 = phi i64 [ %284, %243 ], [ %135, %241 ]
  %246 = getelementptr i8, i8* %228, i64 %244
  %247 = bitcast i8* %246 to <4 x i8>*
  %248 = load <4 x i8>, <4 x i8>* %247, align 1, !alias.scope !135
  %249 = getelementptr i8, i8* %246, i64 4
  %250 = bitcast i8* %249 to <4 x i8>*
  %251 = load <4 x i8>, <4 x i8>* %250, align 1, !alias.scope !135
  %252 = zext <4 x i8> %248 to <4 x i32>
  %253 = zext <4 x i8> %251 to <4 x i32>
  %254 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i64 0, i64 %244
  %255 = bitcast i32* %254 to <4 x i32>*
  %256 = load <4 x i32>, <4 x i32>* %255, align 16, !alias.scope !138, !noalias !135
  %257 = getelementptr inbounds i32, i32* %254, i64 4
  %258 = bitcast i32* %257 to <4 x i32>*
  %259 = load <4 x i32>, <4 x i32>* %258, align 16, !alias.scope !138, !noalias !135
  %260 = add <4 x i32> %256, %252
  %261 = add <4 x i32> %259, %253
  %262 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %262, align 16, !alias.scope !138, !noalias !135
  %263 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %261, <4 x i32>* %263, align 16, !alias.scope !138, !noalias !135
  %264 = or i64 %244, 8
  %265 = getelementptr i8, i8* %228, i64 %264
  %266 = bitcast i8* %265 to <4 x i8>*
  %267 = load <4 x i8>, <4 x i8>* %266, align 1, !alias.scope !135
  %268 = getelementptr i8, i8* %265, i64 4
  %269 = bitcast i8* %268 to <4 x i8>*
  %270 = load <4 x i8>, <4 x i8>* %269, align 1, !alias.scope !135
  %271 = zext <4 x i8> %267 to <4 x i32>
  %272 = zext <4 x i8> %270 to <4 x i32>
  %273 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i64 0, i64 %264
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 16, !alias.scope !138, !noalias !135
  %276 = getelementptr inbounds i32, i32* %273, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 16, !alias.scope !138, !noalias !135
  %279 = add <4 x i32> %275, %271
  %280 = add <4 x i32> %278, %272
  %281 = bitcast i32* %273 to <4 x i32>*
  store <4 x i32> %279, <4 x i32>* %281, align 16, !alias.scope !138, !noalias !135
  %282 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> %280, <4 x i32>* %282, align 16, !alias.scope !138, !noalias !135
  %283 = add i64 %244, 16
  %284 = add i64 %245, -2
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %243, !llvm.loop !140

286:                                              ; preds = %243, %241
  %287 = phi i64 [ 0, %241 ], [ %283, %243 ]
  br i1 %136, label %307, label %288

288:                                              ; preds = %286
  %289 = getelementptr i8, i8* %228, i64 %287
  %290 = bitcast i8* %289 to <4 x i8>*
  %291 = load <4 x i8>, <4 x i8>* %290, align 1, !alias.scope !135
  %292 = getelementptr i8, i8* %289, i64 4
  %293 = bitcast i8* %292 to <4 x i8>*
  %294 = load <4 x i8>, <4 x i8>* %293, align 1, !alias.scope !135
  %295 = zext <4 x i8> %291 to <4 x i32>
  %296 = zext <4 x i8> %294 to <4 x i32>
  %297 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i64 0, i64 %287
  %298 = bitcast i32* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 16, !alias.scope !138, !noalias !135
  %300 = getelementptr inbounds i32, i32* %297, i64 4
  %301 = bitcast i32* %300 to <4 x i32>*
  %302 = load <4 x i32>, <4 x i32>* %301, align 16, !alias.scope !138, !noalias !135
  %303 = add <4 x i32> %299, %295
  %304 = add <4 x i32> %302, %296
  %305 = bitcast i32* %297 to <4 x i32>*
  store <4 x i32> %303, <4 x i32>* %305, align 16, !alias.scope !138, !noalias !135
  %306 = bitcast i32* %300 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %306, align 16, !alias.scope !138, !noalias !135
  br label %307

307:                                              ; preds = %286, %288
  br i1 %137, label %323, label %234

308:                                              ; preds = %323, %214
  %309 = add nuw nsw i64 %216, 1
  %310 = icmp slt i64 %309, %192
  %311 = add i64 %215, 1
  br i1 %310, label %214, label %200

312:                                              ; preds = %234, %312
  %313 = phi i64 [ %321, %312 ], [ %235, %234 ]
  %314 = phi i8* [ %315, %312 ], [ %236, %234 ]
  %315 = getelementptr inbounds i8, i8* %314, i64 1
  %316 = load i8, i8* %314, align 1
  %317 = zext i8 %316 to i32
  %318 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i64 0, i64 %313
  %319 = load i32, i32* %318, align 4
  %320 = add i32 %319, %317
  store i32 %320, i32* %318, align 4
  %321 = add nuw nsw i64 %313, 1
  %322 = icmp slt i64 %321, %126
  br i1 %322, label %312, label %323, !llvm.loop !141

323:                                              ; preds = %312, %307, %225
  %324 = getelementptr inbounds i8, i8* %228, i64 %73
  %325 = add nuw nsw i32 %227, 1
  %326 = icmp slt i32 %325, %167
  %327 = add i64 %226, 1
  br i1 %326, label %225, label %308

328:                                              ; preds = %212, %328
  %329 = phi i64 [ 0, %212 ], [ %345, %328 ]
  %330 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i64 0, i64 %329
  %331 = load i32, i32* %330, align 4
  %332 = add i32 %331, %213
  %333 = udiv i32 %332, %177
  %334 = trunc i32 %333 to i16
  %335 = load i32, i32* %75, align 4
  %336 = trunc i32 %335 to i16
  %337 = icmp ult i16 %334, %336
  %338 = select i1 %337, i16 %336, i16 %334
  %339 = load i32, i32* %76, align 4
  %340 = trunc i32 %339 to i16
  %341 = icmp ugt i16 %338, %340
  %342 = select i1 %341, i16 %340, i16 %338
  %343 = trunc i16 %342 to i8
  %344 = getelementptr inbounds i8, i8* %211, i64 %329
  store i8 %343, i8* %344, align 1
  %345 = add nuw nsw i64 %329, 1
  %346 = icmp slt i64 %345, %126
  br i1 %346, label %328, label %347

347:                                              ; preds = %328, %200
  %348 = add nuw nsw i32 %153, 1
  %349 = icmp eq i32 %348, %59
  br i1 %349, label %148, label %152
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops13AveragePool16ERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %6 = alloca [256 x i16], align 16
  %7 = bitcast [256 x i16]* %6 to i8*
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %10 = load i32, i32* %8, align 8
  %11 = icmp sgt i32 %10, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %12 to i32*
  %19 = select i1 %11, i32* %17, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %15 to [5 x i32]*
  %24 = bitcast %union.anon* %15 to i32*
  %25 = select i1 %14, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %17, i64 3
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = select i1 %11, i32* %29, i32* %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %22, i64 3
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = select i1 %14, i32* %34, i32* %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %33
  %40 = select i1 %39, i32 %38, i32 %33
  %41 = getelementptr inbounds i32, i32* %17, i64 1
  %42 = getelementptr inbounds i32, i32* %17, i64 2
  %43 = bitcast %union.anon* %12 to [5 x i32]*
  %44 = getelementptr inbounds [5 x i32], [5 x i32]* %43, i64 0, i64 1
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %46 = bitcast [16 x i8]* %45 to i32*
  %47 = select i1 %11, i32* %41, i32* %44
  %48 = select i1 %11, i32* %42, i32* %46
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = getelementptr inbounds i32, i32* %22, i64 1
  %52 = getelementptr inbounds i32, i32* %22, i64 2
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %55 = bitcast [16 x i8]* %54 to i32*
  %56 = select i1 %14, i32* %51, i32* %53
  %57 = select i1 %14, i32* %52, i32* %55
  %58 = load i32, i32* %56, align 4
  %59 = load i32, i32* %57, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 4
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %7) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 512, i1 false)
  %64 = icmp sgt i32 %28, 0
  br i1 %64, label %65, label %83

65:                                               ; preds = %5
  %66 = icmp sgt i32 %40, 0
  %67 = icmp sgt i32 %58, 0
  %68 = icmp sgt i32 %59, 0
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %71 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %73 = sext i32 %40 to i64
  %74 = getelementptr inbounds i32, i32* %24, i64 1
  %75 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %76 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %77 = sext i32 %50 to i64
  %78 = mul nsw i64 %77, %73
  br label %79

79:                                               ; preds = %65, %84
  %80 = phi i32 [ 0, %65 ], [ %85, %84 ]
  br i1 %66, label %81, label %84

81:                                               ; preds = %79
  %82 = mul nsw i32 %80, %49
  br label %87

83:                                               ; preds = %84, %5
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %7) #13
  ret void

84:                                               ; preds = %143, %79
  %85 = add nuw nsw i32 %80, 1
  %86 = icmp slt i32 %85, %28
  br i1 %86, label %79, label %83

87:                                               ; preds = %81, %143
  %88 = phi i64 [ 0, %81 ], [ %147, %143 ]
  %89 = phi i32 [ 0, %81 ], [ %146, %143 ]
  %90 = phi i64 [ 0, %81 ], [ %144, %143 ]
  %91 = trunc i64 %88 to i32
  %92 = mul i32 %91, -256
  %93 = add i32 %40, %92
  %94 = icmp slt i32 %93, 256
  %95 = select i1 %94, i32 %93, i32 256
  %96 = sext i32 %95 to i64
  %97 = icmp sgt i64 %96, 1
  %98 = select i1 %97, i64 %96, i64 1
  %99 = and i64 %98, 9223372036854775792
  %100 = add nsw i64 %99, -16
  %101 = lshr exact i64 %100, 4
  %102 = add nuw nsw i64 %101, 1
  %103 = mul i32 %89, -256
  %104 = add i32 %40, %103
  %105 = icmp slt i32 %104, 256
  %106 = select i1 %105, i32 %104, i32 256
  %107 = sext i32 %106 to i64
  %108 = icmp sgt i64 %107, 1
  %109 = select i1 %108, i64 %107, i64 1
  %110 = getelementptr [256 x i16], [256 x i16]* %6, i64 0, i64 %109
  %111 = bitcast i16* %110 to i8*
  %112 = shl nuw nsw i64 %88, 8
  %113 = mul i32 %89, -256
  %114 = add i32 %40, %113
  %115 = icmp slt i32 %114, 256
  %116 = select i1 %115, i32 %114, i32 256
  %117 = sext i32 %116 to i64
  %118 = icmp sgt i64 %117, 1
  %119 = select i1 %118, i64 %117, i64 1
  %120 = trunc i64 %90 to i32
  %121 = sub nsw i32 %40, %120
  br i1 %67, label %122, label %143

122:                                              ; preds = %87
  %123 = getelementptr i8, i8* %2, i64 %112
  %124 = icmp slt i32 %121, 256
  %125 = select i1 %124, i32 %121, i32 256
  %126 = sext i32 %125 to i64
  %127 = shl nsw i64 %126, 1
  %128 = getelementptr inbounds i8, i8* %2, i64 %90
  %129 = icmp sgt i32 %121, 0
  %130 = getelementptr i8, i8* %123, i64 %109
  %131 = icmp ult i64 %119, 16
  %132 = and i64 %119, 9223372036854775792
  %133 = and i64 %102, 1
  %134 = icmp eq i64 %100, 0
  %135 = sub nuw nsw i64 %102, %133
  %136 = icmp eq i64 %133, 0
  %137 = icmp eq i64 %119, %132
  br label %138

138:                                              ; preds = %148, %122
  %139 = phi i32 [ 0, %122 ], [ %150, %148 ]
  %140 = phi i32 [ 0, %122 ], [ %149, %148 ]
  br i1 %68, label %141, label %148

141:                                              ; preds = %138
  %142 = mul nsw i32 %140, %61
  br label %152

143:                                              ; preds = %148, %87
  %144 = add nuw nsw i64 %90, 256
  %145 = icmp slt i64 %144, %73
  %146 = add i32 %89, 1
  %147 = add i64 %88, 1
  br i1 %145, label %87, label %84

148:                                              ; preds = %348, %138
  %149 = add nuw nsw i32 %140, 1
  %150 = sub i32 %139, %61
  %151 = icmp eq i32 %149, %58
  br i1 %151, label %143, label %138

152:                                              ; preds = %348, %141
  %153 = phi i32 [ 0, %141 ], [ %349, %348 ]
  %154 = mul nsw i32 %153, %63
  %155 = load i16, i16* %69, align 2
  %156 = sext i16 %155 to i32
  %157 = sub nsw i32 %154, %156
  %158 = load i16, i16* %70, align 2
  %159 = sext i16 %158 to i32
  %160 = sub nsw i32 %142, %159
  %161 = sub nsw i32 0, %157
  %162 = icmp sgt i32 %161, 0
  %163 = select i1 %162, i32 %161, i32 0
  %164 = sub nsw i32 %50, %157
  %165 = load i32, i32* %71, align 4
  %166 = icmp slt i32 %164, %165
  %167 = select i1 %166, i32 %164, i32 %165
  %168 = sub nsw i32 0, %160
  %169 = icmp sgt i32 %168, 0
  %170 = select i1 %169, i32 %168, i32 0
  %171 = sub nsw i32 %49, %160
  %172 = load i32, i32* %72, align 4
  %173 = icmp slt i32 %171, %172
  %174 = select i1 %173, i32 %171, i32 %172
  %175 = sub nsw i32 %167, %163
  %176 = sub nsw i32 %174, %170
  %177 = mul nsw i32 %176, %175
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 %127, i1 false)
  %178 = add nsw i32 %160, %82
  %179 = mul nsw i32 %178, %50
  %180 = add nsw i32 %179, %157
  %181 = mul nsw i32 %180, %40
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %128, i64 %182
  %184 = icmp sgt i32 %174, %170
  br i1 %184, label %185, label %200

185:                                              ; preds = %152
  %186 = icmp sgt i32 %167, %163
  %187 = add i32 %139, %159
  %188 = icmp sgt i32 %187, 0
  %189 = select i1 %188, i32 %187, i32 0
  %190 = zext i32 %189 to i64
  %191 = zext i32 %163 to i64
  %192 = sext i32 %174 to i64
  %193 = mul nsw i64 %77, %190
  %194 = add i64 %193, %191
  %195 = mul i64 %194, %73
  %196 = add i64 %112, %195
  %197 = add i64 %196, %182
  %198 = add i64 %195, %182
  %199 = getelementptr i8, i8* %130, i64 %198
  br label %214

200:                                              ; preds = %308, %152
  %201 = load i32, i32* %74, align 4
  %202 = mul nsw i32 %201, %80
  %203 = add nsw i32 %202, %140
  %204 = load i32, i32* %55, align 4
  %205 = mul nsw i32 %203, %204
  %206 = add nsw i32 %205, %153
  %207 = load i32, i32* %36, align 4
  %208 = mul nsw i32 %206, %207
  %209 = add nsw i32 %208, %120
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %4, i64 %210
  br i1 %129, label %212, label %348

212:                                              ; preds = %200
  %213 = sdiv i32 %177, 2
  br label %328

214:                                              ; preds = %185, %308
  %215 = phi i64 [ 0, %185 ], [ %311, %308 ]
  %216 = phi i64 [ %190, %185 ], [ %309, %308 ]
  %217 = mul i64 %78, %215
  %218 = add i64 %197, %217
  %219 = getelementptr i8, i8* %199, i64 %217
  br i1 %186, label %220, label %308

220:                                              ; preds = %214
  %221 = mul nsw i64 %216, %77
  %222 = add nsw i64 %221, %191
  %223 = mul nsw i64 %222, %73
  %224 = getelementptr inbounds i8, i8* %183, i64 %223
  br label %225

225:                                              ; preds = %220, %323
  %226 = phi i64 [ 0, %220 ], [ %327, %323 ]
  %227 = phi i32 [ %163, %220 ], [ %325, %323 ]
  %228 = phi i8* [ %224, %220 ], [ %324, %323 ]
  %229 = mul i64 %226, %73
  %230 = add i64 %218, %229
  %231 = getelementptr i8, i8* %2, i64 %230
  %232 = getelementptr i8, i8* %219, i64 %229
  br i1 %129, label %233, label %323

233:                                              ; preds = %225
  br i1 %131, label %234, label %237

234:                                              ; preds = %307, %237, %233
  %235 = phi i64 [ 0, %237 ], [ 0, %233 ], [ %132, %307 ]
  %236 = phi i8* [ %228, %237 ], [ %228, %233 ], [ %242, %307 ]
  br label %312

237:                                              ; preds = %233
  %238 = icmp ugt i8* %232, %7
  %239 = icmp ult i8* %231, %111
  %240 = and i1 %238, %239
  br i1 %240, label %234, label %241

241:                                              ; preds = %237
  %242 = getelementptr i8, i8* %228, i64 %132
  br i1 %134, label %286, label %243

243:                                              ; preds = %241, %243
  %244 = phi i64 [ %283, %243 ], [ 0, %241 ]
  %245 = phi i64 [ %284, %243 ], [ %135, %241 ]
  %246 = getelementptr i8, i8* %228, i64 %244
  %247 = bitcast i8* %246 to <8 x i8>*
  %248 = load <8 x i8>, <8 x i8>* %247, align 1, !alias.scope !142
  %249 = getelementptr i8, i8* %246, i64 8
  %250 = bitcast i8* %249 to <8 x i8>*
  %251 = load <8 x i8>, <8 x i8>* %250, align 1, !alias.scope !142
  %252 = zext <8 x i8> %248 to <8 x i16>
  %253 = zext <8 x i8> %251 to <8 x i16>
  %254 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %244
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 16, !alias.scope !145, !noalias !142
  %257 = getelementptr inbounds i16, i16* %254, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 16, !alias.scope !145, !noalias !142
  %260 = add <8 x i16> %256, %252
  %261 = add <8 x i16> %259, %253
  %262 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %262, align 16, !alias.scope !145, !noalias !142
  %263 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %261, <8 x i16>* %263, align 16, !alias.scope !145, !noalias !142
  %264 = or i64 %244, 16
  %265 = getelementptr i8, i8* %228, i64 %264
  %266 = bitcast i8* %265 to <8 x i8>*
  %267 = load <8 x i8>, <8 x i8>* %266, align 1, !alias.scope !142
  %268 = getelementptr i8, i8* %265, i64 8
  %269 = bitcast i8* %268 to <8 x i8>*
  %270 = load <8 x i8>, <8 x i8>* %269, align 1, !alias.scope !142
  %271 = zext <8 x i8> %267 to <8 x i16>
  %272 = zext <8 x i8> %270 to <8 x i16>
  %273 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %264
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 16, !alias.scope !145, !noalias !142
  %276 = getelementptr inbounds i16, i16* %273, i64 8
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 16, !alias.scope !145, !noalias !142
  %279 = add <8 x i16> %275, %271
  %280 = add <8 x i16> %278, %272
  %281 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %279, <8 x i16>* %281, align 16, !alias.scope !145, !noalias !142
  %282 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %280, <8 x i16>* %282, align 16, !alias.scope !145, !noalias !142
  %283 = add i64 %244, 32
  %284 = add i64 %245, -2
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %243, !llvm.loop !147

286:                                              ; preds = %243, %241
  %287 = phi i64 [ 0, %241 ], [ %283, %243 ]
  br i1 %136, label %307, label %288

288:                                              ; preds = %286
  %289 = getelementptr i8, i8* %228, i64 %287
  %290 = bitcast i8* %289 to <8 x i8>*
  %291 = load <8 x i8>, <8 x i8>* %290, align 1, !alias.scope !142
  %292 = getelementptr i8, i8* %289, i64 8
  %293 = bitcast i8* %292 to <8 x i8>*
  %294 = load <8 x i8>, <8 x i8>* %293, align 1, !alias.scope !142
  %295 = zext <8 x i8> %291 to <8 x i16>
  %296 = zext <8 x i8> %294 to <8 x i16>
  %297 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %287
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 16, !alias.scope !145, !noalias !142
  %300 = getelementptr inbounds i16, i16* %297, i64 8
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 16, !alias.scope !145, !noalias !142
  %303 = add <8 x i16> %299, %295
  %304 = add <8 x i16> %302, %296
  %305 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %303, <8 x i16>* %305, align 16, !alias.scope !145, !noalias !142
  %306 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %306, align 16, !alias.scope !145, !noalias !142
  br label %307

307:                                              ; preds = %286, %288
  br i1 %137, label %323, label %234

308:                                              ; preds = %323, %214
  %309 = add nuw nsw i64 %216, 1
  %310 = icmp slt i64 %309, %192
  %311 = add i64 %215, 1
  br i1 %310, label %214, label %200

312:                                              ; preds = %234, %312
  %313 = phi i64 [ %321, %312 ], [ %235, %234 ]
  %314 = phi i8* [ %315, %312 ], [ %236, %234 ]
  %315 = getelementptr inbounds i8, i8* %314, i64 1
  %316 = load i8, i8* %314, align 1
  %317 = zext i8 %316 to i16
  %318 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %313
  %319 = load i16, i16* %318, align 2
  %320 = add i16 %319, %317
  store i16 %320, i16* %318, align 2
  %321 = add nuw nsw i64 %313, 1
  %322 = icmp slt i64 %321, %126
  br i1 %322, label %312, label %323, !llvm.loop !148

323:                                              ; preds = %312, %307, %225
  %324 = getelementptr inbounds i8, i8* %228, i64 %73
  %325 = add nuw nsw i32 %227, 1
  %326 = icmp slt i32 %325, %167
  %327 = add i64 %226, 1
  br i1 %326, label %225, label %308

328:                                              ; preds = %212, %328
  %329 = phi i64 [ 0, %212 ], [ %346, %328 ]
  %330 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %329
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nsw i32 %213, %332
  %334 = sdiv i32 %333, %177
  %335 = trunc i32 %334 to i16
  %336 = load i32, i32* %75, align 4
  %337 = trunc i32 %336 to i16
  %338 = icmp ult i16 %335, %337
  %339 = select i1 %338, i16 %337, i16 %335
  %340 = load i32, i32* %76, align 4
  %341 = trunc i32 %340 to i16
  %342 = icmp ugt i16 %339, %341
  %343 = select i1 %342, i16 %341, i16 %339
  %344 = trunc i16 %343 to i8
  %345 = getelementptr inbounds i8, i8* %211, i64 %329
  store i8 %344, i8* %345, align 1
  %346 = add nuw nsw i64 %329, 1
  %347 = icmp slt i64 %346, %126
  br i1 %347, label %328, label %348

348:                                              ; preds = %328, %200
  %349 = add nuw nsw i32 %153, 1
  %350 = icmp eq i32 %349, %59
  br i1 %350, label %148, label %152
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21optimized_integer_ops13AveragePool16ERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %6 = alloca [256 x i16], align 16
  %7 = bitcast [256 x i16]* %6 to i8*
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %10 = load i32, i32* %8, align 8
  %11 = icmp sgt i32 %10, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %12 to i32*
  %19 = select i1 %11, i32* %17, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %15 to [5 x i32]*
  %24 = bitcast %union.anon* %15 to i32*
  %25 = select i1 %14, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %17, i64 3
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = select i1 %11, i32* %29, i32* %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %22, i64 3
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = select i1 %14, i32* %34, i32* %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %33
  %40 = select i1 %39, i32 %38, i32 %33
  %41 = getelementptr inbounds i32, i32* %17, i64 1
  %42 = getelementptr inbounds i32, i32* %17, i64 2
  %43 = bitcast %union.anon* %12 to [5 x i32]*
  %44 = getelementptr inbounds [5 x i32], [5 x i32]* %43, i64 0, i64 1
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %46 = bitcast [16 x i8]* %45 to i32*
  %47 = select i1 %11, i32* %41, i32* %44
  %48 = select i1 %11, i32* %42, i32* %46
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = getelementptr inbounds i32, i32* %22, i64 1
  %52 = getelementptr inbounds i32, i32* %22, i64 2
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %55 = bitcast [16 x i8]* %54 to i32*
  %56 = select i1 %14, i32* %51, i32* %53
  %57 = select i1 %14, i32* %52, i32* %55
  %58 = load i32, i32* %56, align 4
  %59 = load i32, i32* %57, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 4
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %7) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 512, i1 false)
  %64 = icmp sgt i32 %28, 0
  br i1 %64, label %65, label %83

65:                                               ; preds = %5
  %66 = icmp sgt i32 %40, 0
  %67 = icmp sgt i32 %58, 0
  %68 = icmp sgt i32 %59, 0
  %69 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %71 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %73 = sext i32 %40 to i64
  %74 = getelementptr inbounds i32, i32* %24, i64 1
  %75 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %76 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %77 = sext i32 %50 to i64
  %78 = mul nsw i64 %77, %73
  br label %79

79:                                               ; preds = %65, %84
  %80 = phi i32 [ 0, %65 ], [ %85, %84 ]
  br i1 %66, label %81, label %84

81:                                               ; preds = %79
  %82 = mul nsw i32 %80, %49
  br label %87

83:                                               ; preds = %84, %5
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %7) #13
  ret void

84:                                               ; preds = %143, %79
  %85 = add nuw nsw i32 %80, 1
  %86 = icmp slt i32 %85, %28
  br i1 %86, label %79, label %83

87:                                               ; preds = %81, %143
  %88 = phi i64 [ 0, %81 ], [ %147, %143 ]
  %89 = phi i32 [ 0, %81 ], [ %146, %143 ]
  %90 = phi i64 [ 0, %81 ], [ %144, %143 ]
  %91 = trunc i64 %88 to i32
  %92 = mul i32 %91, -256
  %93 = add i32 %40, %92
  %94 = icmp slt i32 %93, 256
  %95 = select i1 %94, i32 %93, i32 256
  %96 = sext i32 %95 to i64
  %97 = icmp sgt i64 %96, 1
  %98 = select i1 %97, i64 %96, i64 1
  %99 = and i64 %98, 9223372036854775792
  %100 = add nsw i64 %99, -16
  %101 = lshr exact i64 %100, 4
  %102 = add nuw nsw i64 %101, 1
  %103 = mul i32 %89, -256
  %104 = add i32 %40, %103
  %105 = icmp slt i32 %104, 256
  %106 = select i1 %105, i32 %104, i32 256
  %107 = sext i32 %106 to i64
  %108 = icmp sgt i64 %107, 1
  %109 = select i1 %108, i64 %107, i64 1
  %110 = getelementptr [256 x i16], [256 x i16]* %6, i64 0, i64 %109
  %111 = bitcast i16* %110 to i8*
  %112 = shl nuw nsw i64 %88, 8
  %113 = mul i32 %89, -256
  %114 = add i32 %40, %113
  %115 = icmp slt i32 %114, 256
  %116 = select i1 %115, i32 %114, i32 256
  %117 = sext i32 %116 to i64
  %118 = icmp sgt i64 %117, 1
  %119 = select i1 %118, i64 %117, i64 1
  %120 = trunc i64 %90 to i32
  %121 = sub nsw i32 %40, %120
  br i1 %67, label %122, label %143

122:                                              ; preds = %87
  %123 = getelementptr i8, i8* %2, i64 %112
  %124 = icmp slt i32 %121, 256
  %125 = select i1 %124, i32 %121, i32 256
  %126 = sext i32 %125 to i64
  %127 = shl nsw i64 %126, 1
  %128 = getelementptr inbounds i8, i8* %2, i64 %90
  %129 = icmp sgt i32 %121, 0
  %130 = getelementptr i8, i8* %123, i64 %109
  %131 = icmp ult i64 %119, 16
  %132 = and i64 %119, 9223372036854775792
  %133 = and i64 %102, 1
  %134 = icmp eq i64 %100, 0
  %135 = sub nuw nsw i64 %102, %133
  %136 = icmp eq i64 %133, 0
  %137 = icmp eq i64 %119, %132
  br label %138

138:                                              ; preds = %148, %122
  %139 = phi i32 [ 0, %122 ], [ %150, %148 ]
  %140 = phi i32 [ 0, %122 ], [ %149, %148 ]
  br i1 %68, label %141, label %148

141:                                              ; preds = %138
  %142 = mul nsw i32 %140, %61
  br label %152

143:                                              ; preds = %148, %87
  %144 = add nuw nsw i64 %90, 256
  %145 = icmp slt i64 %144, %73
  %146 = add i32 %89, 1
  %147 = add i64 %88, 1
  br i1 %145, label %87, label %84

148:                                              ; preds = %351, %138
  %149 = add nuw nsw i32 %140, 1
  %150 = sub i32 %139, %61
  %151 = icmp eq i32 %149, %58
  br i1 %151, label %143, label %138

152:                                              ; preds = %351, %141
  %153 = phi i32 [ 0, %141 ], [ %352, %351 ]
  %154 = mul nsw i32 %153, %63
  %155 = load i16, i16* %69, align 2
  %156 = sext i16 %155 to i32
  %157 = sub nsw i32 %154, %156
  %158 = load i16, i16* %70, align 2
  %159 = sext i16 %158 to i32
  %160 = sub nsw i32 %142, %159
  %161 = sub nsw i32 0, %157
  %162 = icmp sgt i32 %161, 0
  %163 = select i1 %162, i32 %161, i32 0
  %164 = sub nsw i32 %50, %157
  %165 = load i32, i32* %71, align 4
  %166 = icmp slt i32 %164, %165
  %167 = select i1 %166, i32 %164, i32 %165
  %168 = sub nsw i32 0, %160
  %169 = icmp sgt i32 %168, 0
  %170 = select i1 %169, i32 %168, i32 0
  %171 = sub nsw i32 %49, %160
  %172 = load i32, i32* %72, align 4
  %173 = icmp slt i32 %171, %172
  %174 = select i1 %173, i32 %171, i32 %172
  %175 = sub nsw i32 %167, %163
  %176 = sub nsw i32 %174, %170
  %177 = mul nsw i32 %176, %175
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 %127, i1 false)
  %178 = add nsw i32 %160, %82
  %179 = mul nsw i32 %178, %50
  %180 = add nsw i32 %179, %157
  %181 = mul nsw i32 %180, %40
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %128, i64 %182
  %184 = icmp sgt i32 %174, %170
  br i1 %184, label %185, label %200

185:                                              ; preds = %152
  %186 = icmp sgt i32 %167, %163
  %187 = add i32 %139, %159
  %188 = icmp sgt i32 %187, 0
  %189 = select i1 %188, i32 %187, i32 0
  %190 = zext i32 %189 to i64
  %191 = zext i32 %163 to i64
  %192 = sext i32 %174 to i64
  %193 = mul nsw i64 %77, %190
  %194 = add i64 %193, %191
  %195 = mul i64 %194, %73
  %196 = add i64 %112, %195
  %197 = add i64 %196, %182
  %198 = add i64 %195, %182
  %199 = getelementptr i8, i8* %130, i64 %198
  br label %215

200:                                              ; preds = %309, %152
  %201 = load i32, i32* %74, align 4
  %202 = mul nsw i32 %201, %80
  %203 = add nsw i32 %202, %140
  %204 = load i32, i32* %55, align 4
  %205 = mul nsw i32 %203, %204
  %206 = add nsw i32 %205, %153
  %207 = load i32, i32* %36, align 4
  %208 = mul nsw i32 %206, %207
  %209 = add nsw i32 %208, %120
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %4, i64 %210
  br i1 %129, label %212, label %351

212:                                              ; preds = %200
  %213 = sdiv i32 %177, 2
  %214 = sub nsw i32 0, %213
  br label %329

215:                                              ; preds = %185, %309
  %216 = phi i64 [ 0, %185 ], [ %312, %309 ]
  %217 = phi i64 [ %190, %185 ], [ %310, %309 ]
  %218 = mul i64 %78, %216
  %219 = add i64 %197, %218
  %220 = getelementptr i8, i8* %199, i64 %218
  br i1 %186, label %221, label %309

221:                                              ; preds = %215
  %222 = mul nsw i64 %217, %77
  %223 = add nsw i64 %222, %191
  %224 = mul nsw i64 %223, %73
  %225 = getelementptr inbounds i8, i8* %183, i64 %224
  br label %226

226:                                              ; preds = %221, %324
  %227 = phi i64 [ 0, %221 ], [ %328, %324 ]
  %228 = phi i32 [ %163, %221 ], [ %326, %324 ]
  %229 = phi i8* [ %225, %221 ], [ %325, %324 ]
  %230 = mul i64 %227, %73
  %231 = add i64 %219, %230
  %232 = getelementptr i8, i8* %2, i64 %231
  %233 = getelementptr i8, i8* %220, i64 %230
  br i1 %129, label %234, label %324

234:                                              ; preds = %226
  br i1 %131, label %235, label %238

235:                                              ; preds = %308, %238, %234
  %236 = phi i64 [ 0, %238 ], [ 0, %234 ], [ %132, %308 ]
  %237 = phi i8* [ %229, %238 ], [ %229, %234 ], [ %243, %308 ]
  br label %313

238:                                              ; preds = %234
  %239 = icmp ugt i8* %233, %7
  %240 = icmp ult i8* %232, %111
  %241 = and i1 %239, %240
  br i1 %241, label %235, label %242

242:                                              ; preds = %238
  %243 = getelementptr i8, i8* %229, i64 %132
  br i1 %134, label %287, label %244

244:                                              ; preds = %242, %244
  %245 = phi i64 [ %284, %244 ], [ 0, %242 ]
  %246 = phi i64 [ %285, %244 ], [ %135, %242 ]
  %247 = getelementptr i8, i8* %229, i64 %245
  %248 = bitcast i8* %247 to <8 x i8>*
  %249 = load <8 x i8>, <8 x i8>* %248, align 1, !alias.scope !149
  %250 = getelementptr i8, i8* %247, i64 8
  %251 = bitcast i8* %250 to <8 x i8>*
  %252 = load <8 x i8>, <8 x i8>* %251, align 1, !alias.scope !149
  %253 = sext <8 x i8> %249 to <8 x i16>
  %254 = sext <8 x i8> %252 to <8 x i16>
  %255 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %245
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 16, !alias.scope !152, !noalias !149
  %258 = getelementptr inbounds i16, i16* %255, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 16, !alias.scope !152, !noalias !149
  %261 = add <8 x i16> %257, %253
  %262 = add <8 x i16> %260, %254
  %263 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %261, <8 x i16>* %263, align 16, !alias.scope !152, !noalias !149
  %264 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %264, align 16, !alias.scope !152, !noalias !149
  %265 = or i64 %245, 16
  %266 = getelementptr i8, i8* %229, i64 %265
  %267 = bitcast i8* %266 to <8 x i8>*
  %268 = load <8 x i8>, <8 x i8>* %267, align 1, !alias.scope !149
  %269 = getelementptr i8, i8* %266, i64 8
  %270 = bitcast i8* %269 to <8 x i8>*
  %271 = load <8 x i8>, <8 x i8>* %270, align 1, !alias.scope !149
  %272 = sext <8 x i8> %268 to <8 x i16>
  %273 = sext <8 x i8> %271 to <8 x i16>
  %274 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %265
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 16, !alias.scope !152, !noalias !149
  %277 = getelementptr inbounds i16, i16* %274, i64 8
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 16, !alias.scope !152, !noalias !149
  %280 = add <8 x i16> %276, %272
  %281 = add <8 x i16> %279, %273
  %282 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %280, <8 x i16>* %282, align 16, !alias.scope !152, !noalias !149
  %283 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %283, align 16, !alias.scope !152, !noalias !149
  %284 = add i64 %245, 32
  %285 = add i64 %246, -2
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %287, label %244, !llvm.loop !154

287:                                              ; preds = %244, %242
  %288 = phi i64 [ 0, %242 ], [ %284, %244 ]
  br i1 %136, label %308, label %289

289:                                              ; preds = %287
  %290 = getelementptr i8, i8* %229, i64 %288
  %291 = bitcast i8* %290 to <8 x i8>*
  %292 = load <8 x i8>, <8 x i8>* %291, align 1, !alias.scope !149
  %293 = getelementptr i8, i8* %290, i64 8
  %294 = bitcast i8* %293 to <8 x i8>*
  %295 = load <8 x i8>, <8 x i8>* %294, align 1, !alias.scope !149
  %296 = sext <8 x i8> %292 to <8 x i16>
  %297 = sext <8 x i8> %295 to <8 x i16>
  %298 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %288
  %299 = bitcast i16* %298 to <8 x i16>*
  %300 = load <8 x i16>, <8 x i16>* %299, align 16, !alias.scope !152, !noalias !149
  %301 = getelementptr inbounds i16, i16* %298, i64 8
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 16, !alias.scope !152, !noalias !149
  %304 = add <8 x i16> %300, %296
  %305 = add <8 x i16> %303, %297
  %306 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %306, align 16, !alias.scope !152, !noalias !149
  %307 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %307, align 16, !alias.scope !152, !noalias !149
  br label %308

308:                                              ; preds = %287, %289
  br i1 %137, label %324, label %235

309:                                              ; preds = %324, %215
  %310 = add nuw nsw i64 %217, 1
  %311 = icmp slt i64 %310, %192
  %312 = add i64 %216, 1
  br i1 %311, label %215, label %200

313:                                              ; preds = %235, %313
  %314 = phi i64 [ %322, %313 ], [ %236, %235 ]
  %315 = phi i8* [ %316, %313 ], [ %237, %235 ]
  %316 = getelementptr inbounds i8, i8* %315, i64 1
  %317 = load i8, i8* %315, align 1
  %318 = sext i8 %317 to i16
  %319 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %314
  %320 = load i16, i16* %319, align 2
  %321 = add i16 %320, %318
  store i16 %321, i16* %319, align 2
  %322 = add nuw nsw i64 %314, 1
  %323 = icmp slt i64 %322, %126
  br i1 %323, label %313, label %324, !llvm.loop !155

324:                                              ; preds = %313, %308, %226
  %325 = getelementptr inbounds i8, i8* %229, i64 %73
  %326 = add nuw nsw i32 %228, 1
  %327 = icmp slt i32 %326, %167
  %328 = add i64 %227, 1
  br i1 %327, label %226, label %309

329:                                              ; preds = %212, %329
  %330 = phi i64 [ 0, %212 ], [ %349, %329 ]
  %331 = getelementptr inbounds [256 x i16], [256 x i16]* %6, i64 0, i64 %330
  %332 = load i16, i16* %331, align 2
  %333 = sext i16 %332 to i32
  %334 = icmp sgt i16 %332, 0
  %335 = select i1 %334, i32 %213, i32 %214
  %336 = add i32 %335, %333
  %337 = sdiv i32 %336, %177
  %338 = trunc i32 %337 to i16
  %339 = load i32, i32* %75, align 4
  %340 = trunc i32 %339 to i16
  %341 = icmp slt i16 %338, %340
  %342 = select i1 %341, i16 %340, i16 %338
  %343 = load i32, i32* %76, align 4
  %344 = trunc i32 %343 to i16
  %345 = icmp sgt i16 %342, %344
  %346 = select i1 %345, i16 %344, i16 %342
  %347 = trunc i16 %346 to i8
  %348 = getelementptr inbounds i8, i8* %211, i64 %330
  store i8 %347, i8* %348, align 1
  %349 = add nuw nsw i64 %330, 1
  %350 = icmp slt i64 %349, %126
  br i1 %350, label %329, label %351

351:                                              ; preds = %329, %200
  %352 = add nuw nsw i32 %153, 1
  %353 = icmp eq i32 %352, %59
  br i1 %353, label %148, label %152
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling12MaxEvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca %"struct.tflite::PoolParams", align 4
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -1
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %14, label %21

14:                                               ; preds = %6
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %12 to i64
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.27, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %6, %14
  %22 = phi i32 [ %17, %14 ], [ -8388609, %6 ]
  %23 = phi i32 [ %20, %14 ], [ 2139095039, %6 ]
  %24 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %24) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 36, i1 false)
  %25 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 3
  %26 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %30 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = trunc i32 %32 to i16
  %34 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = trunc i32 %36 to i16
  %38 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 0
  store i16 %37, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 9
  %40 = bitcast float* %39 to i32*
  store i32 %22, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 10
  %42 = bitcast float* %41 to i32*
  store i32 %23, i32* %42, align 4
  %43 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #13
  %44 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %21
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %46, align 8, !alias.scope !156
  br label %75

47:                                               ; preds = %21
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %49 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %48, align 8, !noalias !156
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !156
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 1, i64 0
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %51, i32* %53, align 8, !alias.scope !156
  %54 = icmp sgt i32 %51, 5
  br i1 %54, label %55, label %62

55:                                               ; preds = %47
  %56 = sext i32 %51 to i64
  %57 = shl nsw i64 %56, 2
  %58 = tail call i8* @_Znam(i64 %57) #12, !noalias !156
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 8, !alias.scope !156
  %61 = bitcast i8* %58 to i32*
  br label %67

62:                                               ; preds = %47
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %64 = bitcast %union.anon* %63 to i32*
  %65 = sext i32 %51 to i64
  %66 = shl nsw i64 %65, 2
  br label %67

67:                                               ; preds = %62, %55
  %68 = phi i64 [ %57, %55 ], [ %66, %62 ]
  %69 = phi i32* [ %61, %55 ], [ %64, %62 ]
  %70 = bitcast i32* %69 to i8*
  %71 = bitcast i32* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %71, i64 %68, i1 false) #13
  %72 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %73 = bitcast %union.TfLitePtrUnion* %72 to float**
  %74 = load float*, float** %73, align 8
  br label %75

75:                                               ; preds = %45, %67
  %76 = phi float* [ %74, %67 ], [ null, %45 ]
  %77 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77) #13
  %78 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %80, align 8, !alias.scope !159
  br label %109

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %82, align 8, !noalias !159
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 4, !noalias !159
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 1, i64 0
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %85, i32* %87, align 8, !alias.scope !159
  %88 = icmp sgt i32 %85, 5
  br i1 %88, label %89, label %96

89:                                               ; preds = %81
  %90 = sext i32 %85 to i64
  %91 = shl nsw i64 %90, 2
  %92 = tail call i8* @_Znam(i64 %91) #12, !noalias !159
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %94 = bitcast i32** %93 to i8**
  store i8* %92, i8** %94, align 8, !alias.scope !159
  %95 = bitcast i8* %92 to i32*
  br label %101

96:                                               ; preds = %81
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %98 = bitcast %union.anon* %97 to i32*
  %99 = sext i32 %85 to i64
  %100 = shl nsw i64 %99, 2
  br label %101

101:                                              ; preds = %96, %89
  %102 = phi i64 [ %91, %89 ], [ %100, %96 ]
  %103 = phi i32* [ %95, %89 ], [ %98, %96 ]
  %104 = bitcast i32* %103 to i8*
  %105 = bitcast i32* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %102, i1 false) #13
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %107 = bitcast %union.TfLitePtrUnion* %106 to float**
  %108 = load float*, float** %107, align 8
  br label %109

109:                                              ; preds = %79, %101
  %110 = phi float* [ %108, %101 ], [ null, %79 ]
  call void @_ZN6tflite13optimized_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %7, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %8, float* %76, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, float* %110)
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp sgt i32 %112, 5
  br i1 %113, label %114, label %120

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %116 = load i32*, i32** %115, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = bitcast i32* %116 to i8*
  call void @_ZdaPv(i8* %119) #12
  br label %120

120:                                              ; preds = %109, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77) #13
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp sgt i32 %122, 5
  br i1 %123, label %124, label %130

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %124
  %129 = bitcast i32* %126 to i8*
  call void @_ZdaPv(i8* %129) #12
  br label %130

130:                                              ; preds = %120, %124, %128
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %24) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedUInt8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !162
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !162
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !162
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !162
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !162
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !162
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i8* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !165
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !165
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !165
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !165
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !165
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !165
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i8* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite13optimized_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling20MaxEvalQuantizedInt8ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !168
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !168
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !168
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !168
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !168
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !168
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i8* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !171
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !171
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !171
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !171
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !171
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !171
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i8**
  %101 = load i8*, i8** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i8* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite21optimized_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i8* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling21MaxEvalQuantizedInt16ILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"struct.tflite::PoolParams", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #13
  store i32 -1431655766, i32* %7, align 4
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #13
  store i32 -1431655766, i32* %8, align 4
  %14 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %15, %struct.TfLiteTensor* %5, i32* nonnull %7, i32* nonnull %8) #13
  %17 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %17, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 44, i1 false)
  %18 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 3
  %19 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %23 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %23, align 4
  %24 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 1
  store i16 %26, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 2, i32 0
  store i16 %30, i16* %31, align 2
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %8, align 4
  %35 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %9, i64 0, i32 8
  store i32 %34, i32* %35, align 4
  %36 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13
  %37 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %6
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !174
  br label %68

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !174
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !174
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !174
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = call i8* @_Znam(i64 %50) #12, !noalias !174
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !174
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #13
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i16**
  %67 = load i16*, i16** %66, align 8
  br label %68

68:                                               ; preds = %38, %60
  %69 = phi i16* [ %67, %60 ], [ null, %38 ]
  %70 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %70) #13
  %71 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %73, align 8, !alias.scope !177
  br label %102

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %76 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %75, align 8, !noalias !177
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4, !noalias !177
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %76, i64 0, i32 1, i64 0
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %78, i32* %80, align 8, !alias.scope !177
  %81 = icmp sgt i32 %78, 5
  br i1 %81, label %82, label %89

82:                                               ; preds = %74
  %83 = sext i32 %78 to i64
  %84 = shl nsw i64 %83, 2
  %85 = call i8* @_Znam(i64 %84) #12, !noalias !177
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %87 = bitcast i32** %86 to i8**
  store i8* %85, i8** %87, align 8, !alias.scope !177
  %88 = bitcast i8* %85 to i32*
  br label %94

89:                                               ; preds = %74
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %91 = bitcast %union.anon* %90 to i32*
  %92 = sext i32 %78 to i64
  %93 = shl nsw i64 %92, 2
  br label %94

94:                                               ; preds = %89, %82
  %95 = phi i64 [ %84, %82 ], [ %93, %89 ]
  %96 = phi i32* [ %88, %82 ], [ %91, %89 ]
  %97 = bitcast i32* %96 to i8*
  %98 = bitcast i32* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 %95, i1 false) #13
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %100 = bitcast %union.TfLitePtrUnion* %99 to i16**
  %101 = load i16*, i16** %100, align 8
  br label %102

102:                                              ; preds = %72, %94
  %103 = phi i16* [ %101, %94 ], [ null, %72 ]
  call void @_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, i16* %69, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i16* %103)
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 5
  br i1 %106, label %107, label %113

107:                                              ; preds = %102
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = bitcast i32* %109 to i8*
  call void @_ZdaPv(i8* %112) #12
  br label %113

113:                                              ; preds = %102, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %70) #13
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 5
  br i1 %116, label %117, label %123

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %119 = load i32*, i32** %118, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %117
  %122 = bitcast i32* %119 to i8*
  call void @_ZdaPv(i8* %122) #12
  br label %123

123:                                              ; preds = %113, %117, %121
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #9 comdat {
  %6 = bitcast float* %4 to i8*
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %9 = load i32, i32* %7, align 8
  %10 = icmp sgt i32 %9, 5
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %12 = load i32, i32* %8, align 8
  %13 = icmp sgt i32 %12, 5
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %15 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %16 = load i32*, i32** %15, align 8
  %17 = bitcast %union.anon* %11 to [5 x i32]*
  %18 = bitcast %union.anon* %11 to i32*
  %19 = select i1 %10, i32* %16, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %14 to [5 x i32]*
  %24 = bitcast %union.anon* %14 to i32*
  %25 = select i1 %13, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %16, i64 1
  %30 = getelementptr inbounds i32, i32* %16, i64 2
  %31 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %33 = bitcast [16 x i8]* %32 to i32*
  %34 = select i1 %10, i32* %29, i32* %31
  %35 = select i1 %10, i32* %30, i32* %33
  %36 = load i32, i32* %34, align 4
  %37 = load i32, i32* %35, align 4
  %38 = getelementptr inbounds i32, i32* %22, i64 1
  %39 = getelementptr inbounds i32, i32* %22, i64 2
  %40 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %41 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %42 = bitcast [16 x i8]* %41 to i32*
  %43 = select i1 %13, i32* %38, i32* %40
  %44 = select i1 %13, i32* %39, i32* %42
  %45 = load i32, i32* %43, align 4
  %46 = load i32, i32* %44, align 4
  %47 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %50 = load i32, i32* %49, align 4
  %51 = add nsw i32 %9, -1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %16, i64 %52
  %54 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i64 0, i64 %52
  %55 = select i1 %10, i32* %53, i32* %54
  %56 = load i32, i32* %55, align 4, !noalias !180
  %57 = sext i32 %56 to i64
  %58 = add nsw i32 %12, -1
  %59 = sext i32 %58 to i64
  br i1 %13, label %60, label %63

60:                                               ; preds = %5
  %61 = getelementptr inbounds i32, i32* %22, i64 %59
  %62 = load i32, i32* %61, align 4, !noalias !183
  br label %67

63:                                               ; preds = %5
  %64 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 %59
  %65 = load i32, i32* %64, align 4, !noalias !183
  %66 = icmp sgt i32 %12, 0
  br i1 %66, label %67, label %112

67:                                               ; preds = %63, %60
  %68 = phi i32* [ %22, %60 ], [ %24, %63 ]
  %69 = phi i32 [ %62, %60 ], [ %65, %63 ]
  %70 = zext i32 %58 to i64
  %71 = zext i32 %12 to i64
  %72 = add nsw i64 %71, -1
  %73 = and i64 %71, 3
  %74 = icmp ult i64 %72, 3
  br i1 %74, label %90, label %75

75:                                               ; preds = %67
  %76 = sub nsw i64 %71, %73
  br label %77

77:                                               ; preds = %933, %75
  %78 = phi i64 [ 0, %75 ], [ %936, %933 ]
  %79 = phi i32 [ 1, %75 ], [ %935, %933 ]
  %80 = phi i64 [ %76, %75 ], [ %937, %933 ]
  %81 = icmp eq i64 %78, %70
  br i1 %81, label %85, label %82

82:                                               ; preds = %77
  %83 = getelementptr inbounds i32, i32* %68, i64 %78
  %84 = load i32, i32* %83, align 4, !noalias !183
  br label %85

85:                                               ; preds = %82, %77
  %86 = phi i32 [ %84, %82 ], [ 1, %77 ]
  %87 = mul nsw i32 %86, %79
  %88 = or i64 %78, 1
  %89 = icmp eq i64 %88, %70
  br i1 %89, label %917, label %914

90:                                               ; preds = %933, %67
  %91 = phi i32 [ undef, %67 ], [ %935, %933 ]
  %92 = phi i64 [ 0, %67 ], [ %936, %933 ]
  %93 = phi i32 [ 1, %67 ], [ %935, %933 ]
  %94 = icmp eq i64 %73, 0
  br i1 %94, label %109, label %95

95:                                               ; preds = %90, %103
  %96 = phi i64 [ %106, %103 ], [ %92, %90 ]
  %97 = phi i32 [ %105, %103 ], [ %93, %90 ]
  %98 = phi i64 [ %107, %103 ], [ %73, %90 ]
  %99 = icmp eq i64 %96, %70
  br i1 %99, label %103, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds i32, i32* %68, i64 %96
  %102 = load i32, i32* %101, align 4, !noalias !183
  br label %103

103:                                              ; preds = %100, %95
  %104 = phi i32 [ %102, %100 ], [ 1, %95 ]
  %105 = mul nsw i32 %104, %97
  %106 = add nuw nsw i64 %96, 1
  %107 = add i64 %98, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %95, !llvm.loop !186

109:                                              ; preds = %103, %90
  %110 = phi i32 [ %91, %90 ], [ %105, %103 ]
  %111 = sext i32 %110 to i64
  br label %112

112:                                              ; preds = %63, %109
  %113 = phi i32 [ %65, %63 ], [ %69, %109 ]
  %114 = phi i64 [ 1, %63 ], [ %111, %109 ]
  %115 = sext i32 %113 to i64
  %116 = ptrtoint float* %4 to i64
  %117 = mul nsw i64 %114, %115
  %118 = and i64 %116, 3
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %126

120:                                              ; preds = %112
  %121 = lshr i64 %116, 2
  %122 = sub nsw i64 0, %121
  %123 = and i64 %122, 3
  %124 = icmp slt i64 %123, %117
  %125 = select i1 %124, i64 %123, i64 %117
  br label %126

126:                                              ; preds = %120, %112
  %127 = phi i64 [ %125, %120 ], [ %117, %112 ]
  %128 = sub nsw i64 %117, %127
  %129 = sdiv i64 %128, 4
  %130 = shl nsw i64 %129, 2
  %131 = add nsw i64 %130, %127
  %132 = icmp sgt i64 %127, 0
  br i1 %132, label %133, label %212

133:                                              ; preds = %126
  %134 = icmp ult i64 %127, 8
  br i1 %134, label %204, label %135

135:                                              ; preds = %133
  %136 = and i64 %127, -8
  %137 = add i64 %136, -8
  %138 = lshr exact i64 %137, 3
  %139 = add nuw nsw i64 %138, 1
  %140 = and i64 %139, 7
  %141 = icmp ult i64 %137, 56
  br i1 %141, label %189, label %142

142:                                              ; preds = %135
  %143 = sub nsw i64 %139, %140
  br label %144

144:                                              ; preds = %144, %142
  %145 = phi i64 [ 0, %142 ], [ %186, %144 ]
  %146 = phi i64 [ %143, %142 ], [ %187, %144 ]
  %147 = getelementptr inbounds float, float* %4, i64 %145
  %148 = bitcast float* %147 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %148, align 4
  %149 = getelementptr inbounds float, float* %147, i64 4
  %150 = bitcast float* %149 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %150, align 4
  %151 = or i64 %145, 8
  %152 = getelementptr inbounds float, float* %4, i64 %151
  %153 = bitcast float* %152 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %153, align 4
  %154 = getelementptr inbounds float, float* %152, i64 4
  %155 = bitcast float* %154 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %155, align 4
  %156 = or i64 %145, 16
  %157 = getelementptr inbounds float, float* %4, i64 %156
  %158 = bitcast float* %157 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %158, align 4
  %159 = getelementptr inbounds float, float* %157, i64 4
  %160 = bitcast float* %159 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %160, align 4
  %161 = or i64 %145, 24
  %162 = getelementptr inbounds float, float* %4, i64 %161
  %163 = bitcast float* %162 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %163, align 4
  %164 = getelementptr inbounds float, float* %162, i64 4
  %165 = bitcast float* %164 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %165, align 4
  %166 = or i64 %145, 32
  %167 = getelementptr inbounds float, float* %4, i64 %166
  %168 = bitcast float* %167 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %168, align 4
  %169 = getelementptr inbounds float, float* %167, i64 4
  %170 = bitcast float* %169 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %170, align 4
  %171 = or i64 %145, 40
  %172 = getelementptr inbounds float, float* %4, i64 %171
  %173 = bitcast float* %172 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %173, align 4
  %174 = getelementptr inbounds float, float* %172, i64 4
  %175 = bitcast float* %174 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %175, align 4
  %176 = or i64 %145, 48
  %177 = getelementptr inbounds float, float* %4, i64 %176
  %178 = bitcast float* %177 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %178, align 4
  %179 = getelementptr inbounds float, float* %177, i64 4
  %180 = bitcast float* %179 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %180, align 4
  %181 = or i64 %145, 56
  %182 = getelementptr inbounds float, float* %4, i64 %181
  %183 = bitcast float* %182 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %183, align 4
  %184 = getelementptr inbounds float, float* %182, i64 4
  %185 = bitcast float* %184 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %185, align 4
  %186 = add i64 %145, 64
  %187 = add i64 %146, -8
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %144, !llvm.loop !187

189:                                              ; preds = %144, %135
  %190 = phi i64 [ 0, %135 ], [ %186, %144 ]
  %191 = icmp eq i64 %140, 0
  br i1 %191, label %202, label %192

192:                                              ; preds = %189, %192
  %193 = phi i64 [ %199, %192 ], [ %190, %189 ]
  %194 = phi i64 [ %200, %192 ], [ %140, %189 ]
  %195 = getelementptr inbounds float, float* %4, i64 %193
  %196 = bitcast float* %195 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %196, align 4
  %197 = getelementptr inbounds float, float* %195, i64 4
  %198 = bitcast float* %197 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %198, align 4
  %199 = add i64 %193, 8
  %200 = add i64 %194, -1
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %192, !llvm.loop !188

202:                                              ; preds = %192, %189
  %203 = icmp eq i64 %127, %136
  br i1 %203, label %212, label %204

204:                                              ; preds = %202, %133
  %205 = phi i64 [ 0, %133 ], [ %136, %202 ]
  br label %206

206:                                              ; preds = %204, %206
  %207 = phi i64 [ %210, %206 ], [ %205, %204 ]
  %208 = getelementptr inbounds float, float* %4, i64 %207
  %209 = bitcast float* %208 to i32*
  store i32 -8388609, i32* %209, align 4
  %210 = add nuw nsw i64 %207, 1
  %211 = icmp eq i64 %210, %127
  br i1 %211, label %212, label %206, !llvm.loop !189

212:                                              ; preds = %206, %202, %126
  %213 = icmp sgt i64 %128, 3
  br i1 %213, label %284, label %214

214:                                              ; preds = %284, %212
  %215 = icmp slt i64 %131, %117
  br i1 %215, label %216, label %290

216:                                              ; preds = %214
  %217 = mul nsw i64 %114, %115
  %218 = sub i64 %217, %127
  %219 = sub i64 %218, %130
  %220 = icmp ult i64 %219, 8
  br i1 %220, label %276, label %221

221:                                              ; preds = %216
  %222 = and i64 %219, -8
  %223 = add i64 %131, %222
  %224 = add i64 %222, -8
  %225 = lshr exact i64 %224, 3
  %226 = add nuw nsw i64 %225, 1
  %227 = and i64 %226, 3
  %228 = icmp ult i64 %224, 24
  br i1 %228, label %260, label %229

229:                                              ; preds = %221
  %230 = sub nsw i64 %226, %227
  br label %231

231:                                              ; preds = %231, %229
  %232 = phi i64 [ 0, %229 ], [ %257, %231 ]
  %233 = phi i64 [ %230, %229 ], [ %258, %231 ]
  %234 = add i64 %131, %232
  %235 = getelementptr inbounds float, float* %4, i64 %234
  %236 = bitcast float* %235 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %236, align 4
  %237 = getelementptr inbounds float, float* %235, i64 4
  %238 = bitcast float* %237 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %238, align 4
  %239 = or i64 %232, 8
  %240 = add i64 %131, %239
  %241 = getelementptr inbounds float, float* %4, i64 %240
  %242 = bitcast float* %241 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %242, align 4
  %243 = getelementptr inbounds float, float* %241, i64 4
  %244 = bitcast float* %243 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %244, align 4
  %245 = or i64 %232, 16
  %246 = add i64 %131, %245
  %247 = getelementptr inbounds float, float* %4, i64 %246
  %248 = bitcast float* %247 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %248, align 4
  %249 = getelementptr inbounds float, float* %247, i64 4
  %250 = bitcast float* %249 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %250, align 4
  %251 = or i64 %232, 24
  %252 = add i64 %131, %251
  %253 = getelementptr inbounds float, float* %4, i64 %252
  %254 = bitcast float* %253 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %254, align 4
  %255 = getelementptr inbounds float, float* %253, i64 4
  %256 = bitcast float* %255 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %256, align 4
  %257 = add i64 %232, 32
  %258 = add i64 %233, -4
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %231, !llvm.loop !190

260:                                              ; preds = %231, %221
  %261 = phi i64 [ 0, %221 ], [ %257, %231 ]
  %262 = icmp eq i64 %227, 0
  br i1 %262, label %274, label %263

263:                                              ; preds = %260, %263
  %264 = phi i64 [ %271, %263 ], [ %261, %260 ]
  %265 = phi i64 [ %272, %263 ], [ %227, %260 ]
  %266 = add i64 %131, %264
  %267 = getelementptr inbounds float, float* %4, i64 %266
  %268 = bitcast float* %267 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %268, align 4
  %269 = getelementptr inbounds float, float* %267, i64 4
  %270 = bitcast float* %269 to <4 x i32>*
  store <4 x i32> <i32 -8388609, i32 -8388609, i32 -8388609, i32 -8388609>, <4 x i32>* %270, align 4
  %271 = add i64 %264, 8
  %272 = add i64 %265, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %263, !llvm.loop !191

274:                                              ; preds = %263, %260
  %275 = icmp eq i64 %219, %222
  br i1 %275, label %290, label %276

276:                                              ; preds = %274, %216
  %277 = phi i64 [ %131, %216 ], [ %223, %274 ]
  br label %278

278:                                              ; preds = %276, %278
  %279 = phi i64 [ %282, %278 ], [ %277, %276 ]
  %280 = getelementptr inbounds float, float* %4, i64 %279
  %281 = bitcast float* %280 to i32*
  store i32 -8388609, i32* %281, align 4
  %282 = add nsw i64 %279, 1
  %283 = icmp eq i64 %282, %117
  br i1 %283, label %290, label %278, !llvm.loop !192

284:                                              ; preds = %212, %284
  %285 = phi i64 [ %288, %284 ], [ %127, %212 ]
  %286 = getelementptr inbounds float, float* %4, i64 %285
  %287 = bitcast float* %286 to <4 x float>*
  store <4 x float> <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, <4 x float>* %287, align 16
  %288 = add nsw i64 %285, 4
  %289 = icmp slt i64 %288, %131
  br i1 %289, label %284, label %214

290:                                              ; preds = %278, %274, %214
  %291 = icmp sgt i32 %28, 0
  br i1 %291, label %292, label %325

292:                                              ; preds = %290
  %293 = icmp sgt i32 %36, 0
  %294 = icmp sgt i32 %37, 0
  %295 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %296 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %297 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %298 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %299 = sext i32 %46 to i64
  %300 = sext i32 %37 to i64
  %301 = sext i32 %36 to i64
  %302 = sext i32 %45 to i64
  %303 = sext i32 %28 to i64
  %304 = zext i32 %36 to i64
  %305 = zext i32 %37 to i64
  %306 = mul nsw i64 %115, %299
  %307 = mul nsw i64 %301, %300
  %308 = mul i64 %307, %57
  %309 = mul nsw i64 %300, %57
  %310 = mul nsw i64 %115, %299
  %311 = mul nsw i64 %301, %300
  %312 = mul i64 %311, %57
  %313 = mul nsw i64 %300, %57
  %314 = sub nsw i64 0, %115
  br label %315

315:                                              ; preds = %292, %513
  %316 = phi i64 [ 0, %292 ], [ %514, %513 ]
  %317 = mul i64 %316, %302
  %318 = mul i64 %312, %316
  %319 = mul i64 %316, %302
  %320 = mul i64 %308, %316
  %321 = add i64 %320, %115
  br i1 %293, label %322, label %513

322:                                              ; preds = %315
  %323 = mul nsw i64 %316, %302
  %324 = mul nsw i64 %316, %301
  br label %502

325:                                              ; preds = %513, %290
  %326 = load i32, i32* %8, align 8
  %327 = icmp sgt i32 %326, 5
  br i1 %327, label %328, label %330

328:                                              ; preds = %325
  %329 = load i32*, i32** %21, align 8
  br label %332

330:                                              ; preds = %325
  %331 = icmp sgt i32 %326, 0
  br i1 %331, label %332, label %435

332:                                              ; preds = %330, %328
  %333 = phi i32* [ %329, %328 ], [ %24, %330 ]
  %334 = zext i32 %326 to i64
  %335 = icmp ult i32 %326, 8
  br i1 %335, label %421, label %336

336:                                              ; preds = %332
  %337 = and i64 %334, 4294967288
  %338 = add nsw i64 %337, -8
  %339 = lshr exact i64 %338, 3
  %340 = add nuw nsw i64 %339, 1
  %341 = and i64 %340, 3
  %342 = icmp ult i64 %338, 24
  br i1 %342, label %388, label %343

343:                                              ; preds = %336
  %344 = sub nsw i64 %340, %341
  br label %345

345:                                              ; preds = %345, %343
  %346 = phi i64 [ 0, %343 ], [ %385, %345 ]
  %347 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %383, %345 ]
  %348 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %384, %345 ]
  %349 = phi i64 [ %344, %343 ], [ %386, %345 ]
  %350 = getelementptr inbounds i32, i32* %333, i64 %346
  %351 = bitcast i32* %350 to <4 x i32>*
  %352 = load <4 x i32>, <4 x i32>* %351, align 4
  %353 = getelementptr inbounds i32, i32* %350, i64 4
  %354 = bitcast i32* %353 to <4 x i32>*
  %355 = load <4 x i32>, <4 x i32>* %354, align 4
  %356 = mul nsw <4 x i32> %352, %347
  %357 = mul nsw <4 x i32> %355, %348
  %358 = or i64 %346, 8
  %359 = getelementptr inbounds i32, i32* %333, i64 %358
  %360 = bitcast i32* %359 to <4 x i32>*
  %361 = load <4 x i32>, <4 x i32>* %360, align 4
  %362 = getelementptr inbounds i32, i32* %359, i64 4
  %363 = bitcast i32* %362 to <4 x i32>*
  %364 = load <4 x i32>, <4 x i32>* %363, align 4
  %365 = mul nsw <4 x i32> %361, %356
  %366 = mul nsw <4 x i32> %364, %357
  %367 = or i64 %346, 16
  %368 = getelementptr inbounds i32, i32* %333, i64 %367
  %369 = bitcast i32* %368 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 4
  %371 = getelementptr inbounds i32, i32* %368, i64 4
  %372 = bitcast i32* %371 to <4 x i32>*
  %373 = load <4 x i32>, <4 x i32>* %372, align 4
  %374 = mul nsw <4 x i32> %370, %365
  %375 = mul nsw <4 x i32> %373, %366
  %376 = or i64 %346, 24
  %377 = getelementptr inbounds i32, i32* %333, i64 %376
  %378 = bitcast i32* %377 to <4 x i32>*
  %379 = load <4 x i32>, <4 x i32>* %378, align 4
  %380 = getelementptr inbounds i32, i32* %377, i64 4
  %381 = bitcast i32* %380 to <4 x i32>*
  %382 = load <4 x i32>, <4 x i32>* %381, align 4
  %383 = mul nsw <4 x i32> %379, %374
  %384 = mul nsw <4 x i32> %382, %375
  %385 = add i64 %346, 32
  %386 = add i64 %349, -4
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %388, label %345, !llvm.loop !193

388:                                              ; preds = %345, %336
  %389 = phi <4 x i32> [ undef, %336 ], [ %383, %345 ]
  %390 = phi <4 x i32> [ undef, %336 ], [ %384, %345 ]
  %391 = phi i64 [ 0, %336 ], [ %385, %345 ]
  %392 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %336 ], [ %383, %345 ]
  %393 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %336 ], [ %384, %345 ]
  %394 = icmp eq i64 %341, 0
  br i1 %394, label %411, label %395

395:                                              ; preds = %388, %395
  %396 = phi i64 [ %408, %395 ], [ %391, %388 ]
  %397 = phi <4 x i32> [ %406, %395 ], [ %392, %388 ]
  %398 = phi <4 x i32> [ %407, %395 ], [ %393, %388 ]
  %399 = phi i64 [ %409, %395 ], [ %341, %388 ]
  %400 = getelementptr inbounds i32, i32* %333, i64 %396
  %401 = bitcast i32* %400 to <4 x i32>*
  %402 = load <4 x i32>, <4 x i32>* %401, align 4
  %403 = getelementptr inbounds i32, i32* %400, i64 4
  %404 = bitcast i32* %403 to <4 x i32>*
  %405 = load <4 x i32>, <4 x i32>* %404, align 4
  %406 = mul nsw <4 x i32> %402, %397
  %407 = mul nsw <4 x i32> %405, %398
  %408 = add i64 %396, 8
  %409 = add i64 %399, -1
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %411, label %395, !llvm.loop !194

411:                                              ; preds = %395, %388
  %412 = phi <4 x i32> [ %389, %388 ], [ %406, %395 ]
  %413 = phi <4 x i32> [ %390, %388 ], [ %407, %395 ]
  %414 = mul <4 x i32> %413, %412
  %415 = shufflevector <4 x i32> %414, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %416 = mul <4 x i32> %414, %415
  %417 = shufflevector <4 x i32> %416, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %418 = mul <4 x i32> %416, %417
  %419 = extractelement <4 x i32> %418, i32 0
  %420 = icmp eq i64 %337, %334
  br i1 %420, label %432, label %421

421:                                              ; preds = %411, %332
  %422 = phi i64 [ 0, %332 ], [ %337, %411 ]
  %423 = phi i32 [ 1, %332 ], [ %419, %411 ]
  br label %424

424:                                              ; preds = %421, %424
  %425 = phi i64 [ %430, %424 ], [ %422, %421 ]
  %426 = phi i32 [ %429, %424 ], [ %423, %421 ]
  %427 = getelementptr inbounds i32, i32* %333, i64 %425
  %428 = load i32, i32* %427, align 4
  %429 = mul nsw i32 %428, %426
  %430 = add nuw nsw i64 %425, 1
  %431 = icmp eq i64 %430, %334
  br i1 %431, label %432, label %424, !llvm.loop !195

432:                                              ; preds = %424, %411
  %433 = phi i32 [ %419, %411 ], [ %429, %424 ]
  %434 = icmp sgt i32 %433, 0
  br i1 %434, label %435, label %892

435:                                              ; preds = %330, %432
  %436 = phi i32 [ %433, %432 ], [ 1, %330 ]
  %437 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 9
  %438 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 10
  %439 = zext i32 %436 to i64
  %440 = icmp ult i32 %436, 8
  br i1 %440, label %441, label %460

441:                                              ; preds = %500, %460, %435
  %442 = phi i64 [ 0, %460 ], [ 0, %435 ], [ %469, %500 ]
  %443 = xor i64 %442, -1
  %444 = and i64 %439, 1
  %445 = icmp eq i64 %444, 0
  br i1 %445, label %456, label %446

446:                                              ; preds = %441
  %447 = getelementptr inbounds float, float* %4, i64 %442
  %448 = load float, float* %447, align 4
  %449 = load float, float* %437, align 4
  %450 = load float, float* %438, align 4
  %451 = fcmp olt float %448, %449
  %452 = select i1 %451, float %449, float %448
  %453 = fcmp ogt float %452, %450
  %454 = select i1 %453, float %450, float %452
  store float %454, float* %447, align 4
  %455 = or i64 %442, 1
  br label %456

456:                                              ; preds = %441, %446
  %457 = phi i64 [ %442, %441 ], [ %455, %446 ]
  %458 = sub nsw i64 0, %439
  %459 = icmp eq i64 %443, %458
  br i1 %459, label %892, label %893

460:                                              ; preds = %435
  %461 = getelementptr float, float* %4, i64 %439
  %462 = getelementptr %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 10
  %463 = bitcast float* %462 to i8*
  %464 = getelementptr i8, i8* %463, i64 1
  %465 = icmp ugt i8* %464, %6
  %466 = icmp ult float* %438, %461
  %467 = and i1 %465, %466
  br i1 %467, label %441, label %468

468:                                              ; preds = %460
  %469 = and i64 %439, 4294967288
  %470 = load float, float* %437, align 4, !alias.scope !196
  %471 = insertelement <4 x float> undef, float %470, i32 0
  %472 = shufflevector <4 x float> %471, <4 x float> undef, <4 x i32> zeroinitializer
  %473 = insertelement <4 x float> undef, float %470, i32 0
  %474 = shufflevector <4 x float> %473, <4 x float> undef, <4 x i32> zeroinitializer
  %475 = load float, float* %438, align 4, !alias.scope !196
  %476 = insertelement <4 x float> undef, float %475, i32 0
  %477 = shufflevector <4 x float> %476, <4 x float> undef, <4 x i32> zeroinitializer
  %478 = insertelement <4 x float> undef, float %475, i32 0
  %479 = shufflevector <4 x float> %478, <4 x float> undef, <4 x i32> zeroinitializer
  br label %480

480:                                              ; preds = %480, %468
  %481 = phi i64 [ 0, %468 ], [ %498, %480 ]
  %482 = getelementptr inbounds float, float* %4, i64 %481
  %483 = bitcast float* %482 to <4 x float>*
  %484 = load <4 x float>, <4 x float>* %483, align 4, !alias.scope !199, !noalias !196
  %485 = getelementptr inbounds float, float* %482, i64 4
  %486 = bitcast float* %485 to <4 x float>*
  %487 = load <4 x float>, <4 x float>* %486, align 4, !alias.scope !199, !noalias !196
  %488 = fcmp olt <4 x float> %484, %472
  %489 = fcmp olt <4 x float> %487, %474
  %490 = select <4 x i1> %488, <4 x float> %472, <4 x float> %484
  %491 = select <4 x i1> %489, <4 x float> %474, <4 x float> %487
  %492 = fcmp ogt <4 x float> %490, %477
  %493 = fcmp ogt <4 x float> %491, %479
  %494 = select <4 x i1> %492, <4 x float> %477, <4 x float> %490
  %495 = select <4 x i1> %493, <4 x float> %479, <4 x float> %491
  %496 = bitcast float* %482 to <4 x float>*
  store <4 x float> %494, <4 x float>* %496, align 4, !alias.scope !199, !noalias !196
  %497 = bitcast float* %485 to <4 x float>*
  store <4 x float> %495, <4 x float>* %497, align 4, !alias.scope !199, !noalias !196
  %498 = add i64 %481, 8
  %499 = icmp eq i64 %498, %469
  br i1 %499, label %500, label %480, !llvm.loop !201

500:                                              ; preds = %480
  %501 = icmp eq i64 %469, %439
  br i1 %501, label %892, label %441

502:                                              ; preds = %516, %322
  %503 = phi i64 [ 0, %322 ], [ %517, %516 ]
  %504 = mul i64 %313, %503
  %505 = add i64 %318, %504
  %506 = mul i64 %309, %503
  %507 = add i64 %320, %506
  %508 = add i64 %321, %506
  br i1 %294, label %509, label %516

509:                                              ; preds = %502
  %510 = add nsw i64 %503, %324
  %511 = mul nsw i64 %510, %300
  %512 = trunc i64 %503 to i32
  br label %519

513:                                              ; preds = %516, %315
  %514 = add nuw nsw i64 %316, 1
  %515 = icmp slt i64 %514, %303
  br i1 %515, label %315, label %325

516:                                              ; preds = %591, %502
  %517 = add nuw nsw i64 %503, 1
  %518 = icmp eq i64 %517, %304
  br i1 %518, label %513, label %502

519:                                              ; preds = %591, %509
  %520 = phi i64 [ 0, %509 ], [ %592, %591 ]
  %521 = mul i64 %520, %57
  %522 = add i64 %505, %521
  %523 = getelementptr float, float* %2, i64 %522
  %524 = mul i64 %520, %57
  %525 = add i64 %507, %524
  %526 = getelementptr float, float* %2, i64 %525
  %527 = add i64 %508, %524
  %528 = getelementptr float, float* %2, i64 %527
  %529 = load i16, i16* %295, align 2
  %530 = sext i16 %529 to i32
  %531 = add nsw i32 %512, %530
  %532 = load i16, i16* %296, align 2
  %533 = sext i16 %532 to i32
  %534 = trunc i64 %520 to i32
  %535 = add nsw i32 %534, %533
  %536 = load i32, i32* %297, align 4
  %537 = icmp slt i32 %531, %536
  br i1 %537, label %542, label %538

538:                                              ; preds = %519
  %539 = sub nsw i32 %531, %536
  %540 = sdiv i32 %539, %48
  %541 = add nsw i32 %540, 1
  br label %542

542:                                              ; preds = %519, %538
  %543 = phi i32 [ %541, %538 ], [ 0, %519 ]
  %544 = sdiv i32 %531, %48
  %545 = add nsw i32 %544, 1
  %546 = icmp slt i32 %45, %545
  %547 = select i1 %546, i32 %45, i32 %545
  %548 = load i32, i32* %298, align 4
  %549 = icmp slt i32 %535, %548
  br i1 %549, label %554, label %550

550:                                              ; preds = %542
  %551 = sub nsw i32 %535, %548
  %552 = sdiv i32 %551, %50
  %553 = add nsw i32 %552, 1
  br label %554

554:                                              ; preds = %542, %550
  %555 = phi i32 [ %553, %550 ], [ 0, %542 ]
  %556 = sdiv i32 %535, %50
  %557 = add nsw i32 %556, 1
  %558 = icmp slt i32 %46, %557
  %559 = select i1 %558, i32 %46, i32 %557
  %560 = icmp slt i32 %543, %547
  br i1 %560, label %561, label %591

561:                                              ; preds = %554
  %562 = icmp slt i32 %555, %559
  %563 = add nsw i64 %520, %511
  %564 = mul nsw i64 %563, %57
  %565 = getelementptr inbounds float, float* %2, i64 %564
  %566 = sext i32 %555 to i64
  %567 = sext i32 %559 to i64
  %568 = sext i32 %543 to i64
  %569 = sext i32 %547 to i64
  %570 = add i64 %319, %568
  %571 = mul i64 %570, %299
  %572 = add i64 %571, %566
  %573 = mul i64 %572, %115
  %574 = shl i64 %572, 2
  %575 = add i64 %574, 4
  %576 = mul i64 %575, %115
  %577 = add i64 %317, %568
  %578 = mul i64 %577, %299
  %579 = add i64 %578, %566
  %580 = mul i64 %579, %115
  br label %581

581:                                              ; preds = %561, %594
  %582 = phi i64 [ 0, %561 ], [ %597, %594 ]
  %583 = phi i64 [ %568, %561 ], [ %595, %594 ]
  %584 = mul i64 %310, %582
  %585 = add i64 %580, %584
  %586 = mul i64 %306, %582
  %587 = add i64 %573, %586
  br i1 %562, label %588, label %594

588:                                              ; preds = %581
  %589 = add nsw i64 %583, %323
  %590 = mul nsw i64 %589, %299
  br label %598

591:                                              ; preds = %594, %554
  %592 = add nuw nsw i64 %520, 1
  %593 = icmp eq i64 %592, %305
  br i1 %593, label %516, label %519

594:                                              ; preds = %888, %581
  %595 = add nsw i64 %583, 1
  %596 = icmp slt i64 %595, %569
  %597 = add i64 %582, 1
  br i1 %596, label %581, label %591

598:                                              ; preds = %588, %888
  %599 = phi i64 [ 0, %588 ], [ %891, %888 ]
  %600 = phi i64 [ %566, %588 ], [ %889, %888 ]
  %601 = mul i64 %599, %115
  %602 = add i64 %585, %601
  %603 = getelementptr float, float* %4, i64 %602
  %604 = mul i64 %599, %115
  %605 = add i64 %587, %604
  %606 = getelementptr float, float* %4, i64 %605
  %607 = add i64 %586, %604
  %608 = getelementptr float, float* %4, i64 %607
  %609 = bitcast float* %608 to i8*
  %610 = getelementptr i8, i8* %609, i64 %576
  %611 = add nsw i64 %600, %590
  %612 = mul nsw i64 %611, %115
  %613 = getelementptr inbounds float, float* %4, i64 %612
  %614 = ptrtoint float* %613 to i64
  %615 = and i64 %614, 3
  %616 = icmp eq i64 %615, 0
  br i1 %616, label %617, label %623

617:                                              ; preds = %598
  %618 = lshr i64 %614, 2
  %619 = sub nsw i64 0, %618
  %620 = and i64 %619, 3
  %621 = icmp slt i64 %620, %115
  %622 = select i1 %621, i64 %620, i64 %115
  br label %623

623:                                              ; preds = %617, %598
  %624 = phi i64 [ %622, %617 ], [ %115, %598 ]
  %625 = sub nsw i64 %115, %624
  %626 = sdiv i64 %625, 4
  %627 = shl nsw i64 %626, 2
  %628 = add nsw i64 %627, %624
  %629 = icmp sgt i64 %624, 0
  br i1 %629, label %630, label %747

630:                                              ; preds = %623
  %631 = icmp ult i64 %624, 8
  br i1 %631, label %714, label %632

632:                                              ; preds = %630
  %633 = getelementptr float, float* %603, i64 %624
  %634 = getelementptr float, float* %523, i64 %624
  %635 = icmp ult float* %603, %634
  %636 = icmp ult float* %523, %633
  %637 = and i1 %635, %636
  br i1 %637, label %714, label %638

638:                                              ; preds = %632
  %639 = and i64 %624, -8
  %640 = add nsw i64 %639, -8
  %641 = lshr exact i64 %640, 3
  %642 = add nuw nsw i64 %641, 1
  %643 = and i64 %642, 1
  %644 = icmp eq i64 %640, 0
  br i1 %644, label %690, label %645

645:                                              ; preds = %638
  %646 = sub nuw nsw i64 %642, %643
  br label %647

647:                                              ; preds = %647, %645
  %648 = phi i64 [ 0, %645 ], [ %687, %647 ]
  %649 = phi i64 [ %646, %645 ], [ %688, %647 ]
  %650 = getelementptr inbounds float, float* %613, i64 %648
  %651 = getelementptr inbounds float, float* %565, i64 %648
  %652 = bitcast float* %651 to <4 x float>*
  %653 = load <4 x float>, <4 x float>* %652, align 4, !alias.scope !202
  %654 = getelementptr inbounds float, float* %651, i64 4
  %655 = bitcast float* %654 to <4 x float>*
  %656 = load <4 x float>, <4 x float>* %655, align 4, !alias.scope !202
  %657 = bitcast float* %650 to <4 x float>*
  %658 = load <4 x float>, <4 x float>* %657, align 4, !alias.scope !205, !noalias !202
  %659 = getelementptr inbounds float, float* %650, i64 4
  %660 = bitcast float* %659 to <4 x float>*
  %661 = load <4 x float>, <4 x float>* %660, align 4, !alias.scope !205, !noalias !202
  %662 = fcmp olt <4 x float> %658, %653
  %663 = fcmp olt <4 x float> %661, %656
  %664 = select <4 x i1> %662, <4 x float> %653, <4 x float> %658
  %665 = select <4 x i1> %663, <4 x float> %656, <4 x float> %661
  %666 = bitcast float* %650 to <4 x float>*
  store <4 x float> %664, <4 x float>* %666, align 4, !alias.scope !205, !noalias !202
  %667 = bitcast float* %659 to <4 x float>*
  store <4 x float> %665, <4 x float>* %667, align 4, !alias.scope !205, !noalias !202
  %668 = or i64 %648, 8
  %669 = getelementptr inbounds float, float* %613, i64 %668
  %670 = getelementptr inbounds float, float* %565, i64 %668
  %671 = bitcast float* %670 to <4 x float>*
  %672 = load <4 x float>, <4 x float>* %671, align 4, !alias.scope !202
  %673 = getelementptr inbounds float, float* %670, i64 4
  %674 = bitcast float* %673 to <4 x float>*
  %675 = load <4 x float>, <4 x float>* %674, align 4, !alias.scope !202
  %676 = bitcast float* %669 to <4 x float>*
  %677 = load <4 x float>, <4 x float>* %676, align 4, !alias.scope !205, !noalias !202
  %678 = getelementptr inbounds float, float* %669, i64 4
  %679 = bitcast float* %678 to <4 x float>*
  %680 = load <4 x float>, <4 x float>* %679, align 4, !alias.scope !205, !noalias !202
  %681 = fcmp olt <4 x float> %677, %672
  %682 = fcmp olt <4 x float> %680, %675
  %683 = select <4 x i1> %681, <4 x float> %672, <4 x float> %677
  %684 = select <4 x i1> %682, <4 x float> %675, <4 x float> %680
  %685 = bitcast float* %669 to <4 x float>*
  store <4 x float> %683, <4 x float>* %685, align 4, !alias.scope !205, !noalias !202
  %686 = bitcast float* %678 to <4 x float>*
  store <4 x float> %684, <4 x float>* %686, align 4, !alias.scope !205, !noalias !202
  %687 = add i64 %648, 16
  %688 = add i64 %649, -2
  %689 = icmp eq i64 %688, 0
  br i1 %689, label %690, label %647, !llvm.loop !207

690:                                              ; preds = %647, %638
  %691 = phi i64 [ 0, %638 ], [ %687, %647 ]
  %692 = icmp eq i64 %643, 0
  br i1 %692, label %712, label %693

693:                                              ; preds = %690
  %694 = getelementptr inbounds float, float* %613, i64 %691
  %695 = getelementptr inbounds float, float* %565, i64 %691
  %696 = bitcast float* %695 to <4 x float>*
  %697 = load <4 x float>, <4 x float>* %696, align 4, !alias.scope !202
  %698 = getelementptr inbounds float, float* %695, i64 4
  %699 = bitcast float* %698 to <4 x float>*
  %700 = load <4 x float>, <4 x float>* %699, align 4, !alias.scope !202
  %701 = bitcast float* %694 to <4 x float>*
  %702 = load <4 x float>, <4 x float>* %701, align 4, !alias.scope !205, !noalias !202
  %703 = getelementptr inbounds float, float* %694, i64 4
  %704 = bitcast float* %703 to <4 x float>*
  %705 = load <4 x float>, <4 x float>* %704, align 4, !alias.scope !205, !noalias !202
  %706 = fcmp olt <4 x float> %702, %697
  %707 = fcmp olt <4 x float> %705, %700
  %708 = select <4 x i1> %706, <4 x float> %697, <4 x float> %702
  %709 = select <4 x i1> %707, <4 x float> %700, <4 x float> %705
  %710 = bitcast float* %694 to <4 x float>*
  store <4 x float> %708, <4 x float>* %710, align 4, !alias.scope !205, !noalias !202
  %711 = bitcast float* %703 to <4 x float>*
  store <4 x float> %709, <4 x float>* %711, align 4, !alias.scope !205, !noalias !202
  br label %712

712:                                              ; preds = %690, %693
  %713 = icmp eq i64 %624, %639
  br i1 %713, label %747, label %714

714:                                              ; preds = %712, %632, %630
  %715 = phi i64 [ 0, %632 ], [ 0, %630 ], [ %639, %712 ]
  %716 = and i64 %624, 1
  %717 = icmp eq i64 %716, 0
  br i1 %717, label %726, label %718

718:                                              ; preds = %714
  %719 = getelementptr inbounds float, float* %613, i64 %715
  %720 = getelementptr inbounds float, float* %565, i64 %715
  %721 = load float, float* %720, align 4
  %722 = load float, float* %719, align 4
  %723 = fcmp olt float %722, %721
  %724 = select i1 %723, float %721, float %722
  store float %724, float* %719, align 4
  %725 = or i64 %715, 1
  br label %726

726:                                              ; preds = %718, %714
  %727 = phi i64 [ %725, %718 ], [ %715, %714 ]
  %728 = or i64 %715, 1
  %729 = icmp eq i64 %624, %728
  br i1 %729, label %747, label %730

730:                                              ; preds = %726, %730
  %731 = phi i64 [ %745, %730 ], [ %727, %726 ]
  %732 = getelementptr inbounds float, float* %613, i64 %731
  %733 = getelementptr inbounds float, float* %565, i64 %731
  %734 = load float, float* %733, align 4
  %735 = load float, float* %732, align 4
  %736 = fcmp olt float %735, %734
  %737 = select i1 %736, float %734, float %735
  store float %737, float* %732, align 4
  %738 = add nuw nsw i64 %731, 1
  %739 = getelementptr inbounds float, float* %613, i64 %738
  %740 = getelementptr inbounds float, float* %565, i64 %738
  %741 = load float, float* %740, align 4
  %742 = load float, float* %739, align 4
  %743 = fcmp olt float %742, %741
  %744 = select i1 %743, float %741, float %742
  store float %744, float* %739, align 4
  %745 = add nuw nsw i64 %731, 2
  %746 = icmp eq i64 %745, %624
  br i1 %746, label %747, label %730, !llvm.loop !208

747:                                              ; preds = %726, %730, %712, %623
  %748 = icmp sgt i64 %625, 3
  br i1 %748, label %877, label %749

749:                                              ; preds = %877, %747
  %750 = icmp slt i64 %628, %115
  br i1 %750, label %751, label %888

751:                                              ; preds = %749
  %752 = sub nsw i64 %115, %624
  %753 = sub nsw i64 %752, %627
  %754 = icmp ult i64 %753, 8
  br i1 %754, label %843, label %755

755:                                              ; preds = %751
  %756 = add nsw i64 %624, %627
  %757 = getelementptr float, float* %606, i64 %756
  %758 = getelementptr float, float* %526, i64 %756
  %759 = bitcast float* %758 to i8*
  %760 = icmp ult float* %757, %528
  %761 = icmp ugt i8* %610, %759
  %762 = and i1 %760, %761
  br i1 %762, label %843, label %763

763:                                              ; preds = %755
  %764 = and i64 %753, -8
  %765 = add i64 %628, %764
  %766 = add i64 %764, -8
  %767 = lshr exact i64 %766, 3
  %768 = add nuw nsw i64 %767, 1
  %769 = and i64 %768, 1
  %770 = icmp eq i64 %766, 0
  br i1 %770, label %818, label %771

771:                                              ; preds = %763
  %772 = sub nuw nsw i64 %768, %769
  br label %773

773:                                              ; preds = %773, %771
  %774 = phi i64 [ 0, %771 ], [ %815, %773 ]
  %775 = phi i64 [ %772, %771 ], [ %816, %773 ]
  %776 = add i64 %628, %774
  %777 = getelementptr inbounds float, float* %613, i64 %776
  %778 = getelementptr inbounds float, float* %565, i64 %776
  %779 = bitcast float* %778 to <4 x float>*
  %780 = load <4 x float>, <4 x float>* %779, align 4, !alias.scope !209
  %781 = getelementptr inbounds float, float* %778, i64 4
  %782 = bitcast float* %781 to <4 x float>*
  %783 = load <4 x float>, <4 x float>* %782, align 4, !alias.scope !209
  %784 = bitcast float* %777 to <4 x float>*
  %785 = load <4 x float>, <4 x float>* %784, align 4, !alias.scope !212, !noalias !209
  %786 = getelementptr inbounds float, float* %777, i64 4
  %787 = bitcast float* %786 to <4 x float>*
  %788 = load <4 x float>, <4 x float>* %787, align 4, !alias.scope !212, !noalias !209
  %789 = fcmp olt <4 x float> %785, %780
  %790 = fcmp olt <4 x float> %788, %783
  %791 = select <4 x i1> %789, <4 x float> %780, <4 x float> %785
  %792 = select <4 x i1> %790, <4 x float> %783, <4 x float> %788
  %793 = bitcast float* %777 to <4 x float>*
  store <4 x float> %791, <4 x float>* %793, align 4, !alias.scope !212, !noalias !209
  %794 = bitcast float* %786 to <4 x float>*
  store <4 x float> %792, <4 x float>* %794, align 4, !alias.scope !212, !noalias !209
  %795 = or i64 %774, 8
  %796 = add i64 %628, %795
  %797 = getelementptr inbounds float, float* %613, i64 %796
  %798 = getelementptr inbounds float, float* %565, i64 %796
  %799 = bitcast float* %798 to <4 x float>*
  %800 = load <4 x float>, <4 x float>* %799, align 4, !alias.scope !209
  %801 = getelementptr inbounds float, float* %798, i64 4
  %802 = bitcast float* %801 to <4 x float>*
  %803 = load <4 x float>, <4 x float>* %802, align 4, !alias.scope !209
  %804 = bitcast float* %797 to <4 x float>*
  %805 = load <4 x float>, <4 x float>* %804, align 4, !alias.scope !212, !noalias !209
  %806 = getelementptr inbounds float, float* %797, i64 4
  %807 = bitcast float* %806 to <4 x float>*
  %808 = load <4 x float>, <4 x float>* %807, align 4, !alias.scope !212, !noalias !209
  %809 = fcmp olt <4 x float> %805, %800
  %810 = fcmp olt <4 x float> %808, %803
  %811 = select <4 x i1> %809, <4 x float> %800, <4 x float> %805
  %812 = select <4 x i1> %810, <4 x float> %803, <4 x float> %808
  %813 = bitcast float* %797 to <4 x float>*
  store <4 x float> %811, <4 x float>* %813, align 4, !alias.scope !212, !noalias !209
  %814 = bitcast float* %806 to <4 x float>*
  store <4 x float> %812, <4 x float>* %814, align 4, !alias.scope !212, !noalias !209
  %815 = add i64 %774, 16
  %816 = add i64 %775, -2
  %817 = icmp eq i64 %816, 0
  br i1 %817, label %818, label %773, !llvm.loop !214

818:                                              ; preds = %773, %763
  %819 = phi i64 [ 0, %763 ], [ %815, %773 ]
  %820 = icmp eq i64 %769, 0
  br i1 %820, label %841, label %821

821:                                              ; preds = %818
  %822 = add i64 %628, %819
  %823 = getelementptr inbounds float, float* %613, i64 %822
  %824 = getelementptr inbounds float, float* %565, i64 %822
  %825 = bitcast float* %824 to <4 x float>*
  %826 = load <4 x float>, <4 x float>* %825, align 4, !alias.scope !209
  %827 = getelementptr inbounds float, float* %824, i64 4
  %828 = bitcast float* %827 to <4 x float>*
  %829 = load <4 x float>, <4 x float>* %828, align 4, !alias.scope !209
  %830 = bitcast float* %823 to <4 x float>*
  %831 = load <4 x float>, <4 x float>* %830, align 4, !alias.scope !212, !noalias !209
  %832 = getelementptr inbounds float, float* %823, i64 4
  %833 = bitcast float* %832 to <4 x float>*
  %834 = load <4 x float>, <4 x float>* %833, align 4, !alias.scope !212, !noalias !209
  %835 = fcmp olt <4 x float> %831, %826
  %836 = fcmp olt <4 x float> %834, %829
  %837 = select <4 x i1> %835, <4 x float> %826, <4 x float> %831
  %838 = select <4 x i1> %836, <4 x float> %829, <4 x float> %834
  %839 = bitcast float* %823 to <4 x float>*
  store <4 x float> %837, <4 x float>* %839, align 4, !alias.scope !212, !noalias !209
  %840 = bitcast float* %832 to <4 x float>*
  store <4 x float> %838, <4 x float>* %840, align 4, !alias.scope !212, !noalias !209
  br label %841

841:                                              ; preds = %818, %821
  %842 = icmp eq i64 %753, %764
  br i1 %842, label %888, label %843

843:                                              ; preds = %841, %755, %751
  %844 = phi i64 [ %628, %755 ], [ %628, %751 ], [ %765, %841 ]
  %845 = sub i64 %115, %844
  %846 = xor i64 %844, -1
  %847 = and i64 %845, 1
  %848 = icmp eq i64 %847, 0
  br i1 %848, label %857, label %849

849:                                              ; preds = %843
  %850 = getelementptr inbounds float, float* %613, i64 %844
  %851 = getelementptr inbounds float, float* %565, i64 %844
  %852 = load float, float* %851, align 4
  %853 = load float, float* %850, align 4
  %854 = fcmp olt float %853, %852
  %855 = select i1 %854, float %852, float %853
  store float %855, float* %850, align 4
  %856 = add nsw i64 %844, 1
  br label %857

857:                                              ; preds = %849, %843
  %858 = phi i64 [ %856, %849 ], [ %844, %843 ]
  %859 = icmp eq i64 %846, %314
  br i1 %859, label %888, label %860

860:                                              ; preds = %857, %860
  %861 = phi i64 [ %875, %860 ], [ %858, %857 ]
  %862 = getelementptr inbounds float, float* %613, i64 %861
  %863 = getelementptr inbounds float, float* %565, i64 %861
  %864 = load float, float* %863, align 4
  %865 = load float, float* %862, align 4
  %866 = fcmp olt float %865, %864
  %867 = select i1 %866, float %864, float %865
  store float %867, float* %862, align 4
  %868 = add nsw i64 %861, 1
  %869 = getelementptr inbounds float, float* %613, i64 %868
  %870 = getelementptr inbounds float, float* %565, i64 %868
  %871 = load float, float* %870, align 4
  %872 = load float, float* %869, align 4
  %873 = fcmp olt float %872, %871
  %874 = select i1 %873, float %871, float %872
  store float %874, float* %869, align 4
  %875 = add nsw i64 %861, 2
  %876 = icmp eq i64 %875, %115
  br i1 %876, label %888, label %860, !llvm.loop !215

877:                                              ; preds = %747, %877
  %878 = phi i64 [ %886, %877 ], [ %624, %747 ]
  %879 = getelementptr inbounds float, float* %613, i64 %878
  %880 = bitcast float* %879 to <4 x float>*
  %881 = load <4 x float>, <4 x float>* %880, align 1
  %882 = getelementptr inbounds float, float* %565, i64 %878
  %883 = bitcast float* %882 to <4 x float>*
  %884 = load <4 x float>, <4 x float>* %883, align 1
  %885 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %881, <4 x float> %884) #14, !srcloc !216
  store <4 x float> %885, <4 x float>* %880, align 16
  %886 = add nsw i64 %878, 4
  %887 = icmp slt i64 %886, %628
  br i1 %887, label %877, label %749

888:                                              ; preds = %857, %860, %841, %749
  %889 = add nsw i64 %600, 1
  %890 = icmp slt i64 %889, %567
  %891 = add i64 %599, 1
  br i1 %890, label %598, label %594

892:                                              ; preds = %456, %893, %500, %432
  ret void

893:                                              ; preds = %456, %893
  %894 = phi i64 [ %912, %893 ], [ %457, %456 ]
  %895 = getelementptr inbounds float, float* %4, i64 %894
  %896 = load float, float* %895, align 4
  %897 = load float, float* %437, align 4
  %898 = load float, float* %438, align 4
  %899 = fcmp olt float %896, %897
  %900 = select i1 %899, float %897, float %896
  %901 = fcmp ogt float %900, %898
  %902 = select i1 %901, float %898, float %900
  store float %902, float* %895, align 4
  %903 = add nuw nsw i64 %894, 1
  %904 = getelementptr inbounds float, float* %4, i64 %903
  %905 = load float, float* %904, align 4
  %906 = load float, float* %437, align 4
  %907 = load float, float* %438, align 4
  %908 = fcmp olt float %905, %906
  %909 = select i1 %908, float %906, float %905
  %910 = fcmp ogt float %909, %907
  %911 = select i1 %910, float %907, float %909
  store float %911, float* %904, align 4
  %912 = add nuw nsw i64 %894, 2
  %913 = icmp eq i64 %912, %439
  br i1 %913, label %892, label %893, !llvm.loop !217

914:                                              ; preds = %85
  %915 = getelementptr inbounds i32, i32* %68, i64 %88
  %916 = load i32, i32* %915, align 4, !noalias !183
  br label %917

917:                                              ; preds = %914, %85
  %918 = phi i32 [ %916, %914 ], [ 1, %85 ]
  %919 = mul nsw i32 %918, %87
  %920 = or i64 %78, 2
  %921 = icmp eq i64 %920, %70
  br i1 %921, label %925, label %922

922:                                              ; preds = %917
  %923 = getelementptr inbounds i32, i32* %68, i64 %920
  %924 = load i32, i32* %923, align 4, !noalias !183
  br label %925

925:                                              ; preds = %922, %917
  %926 = phi i32 [ %924, %922 ], [ 1, %917 ]
  %927 = mul nsw i32 %926, %919
  %928 = or i64 %78, 3
  %929 = icmp eq i64 %928, %70
  br i1 %929, label %933, label %930

930:                                              ; preds = %925
  %931 = getelementptr inbounds i32, i32* %68, i64 %928
  %932 = load i32, i32* %931, align 4, !noalias !183
  br label %933

933:                                              ; preds = %930, %925
  %934 = phi i32 [ %932, %930 ], [ 1, %925 ]
  %935 = mul nsw i32 %934, %927
  %936 = add nuw nsw i64 %78, 4
  %937 = add i64 %80, -4
  %938 = icmp eq i64 %937, 0
  br i1 %938, label %90, label %77
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %6 = alloca [256 x i8], align 16
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %10 = load i32, i32* %8, align 8
  %11 = icmp sgt i32 %10, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %12 to i32*
  %19 = select i1 %11, i32* %17, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %15 to [5 x i32]*
  %24 = bitcast %union.anon* %15 to i32*
  %25 = select i1 %14, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %17, i64 3
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = select i1 %11, i32* %29, i32* %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %22, i64 3
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = select i1 %14, i32* %34, i32* %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %33
  %40 = select i1 %39, i32 %38, i32 %33
  %41 = getelementptr inbounds i32, i32* %17, i64 1
  %42 = getelementptr inbounds i32, i32* %17, i64 2
  %43 = bitcast %union.anon* %12 to [5 x i32]*
  %44 = getelementptr inbounds [5 x i32], [5 x i32]* %43, i64 0, i64 1
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %46 = bitcast [16 x i8]* %45 to i32*
  %47 = select i1 %11, i32* %41, i32* %44
  %48 = select i1 %11, i32* %42, i32* %46
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = getelementptr inbounds i32, i32* %22, i64 1
  %52 = getelementptr inbounds i32, i32* %22, i64 2
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %55 = bitcast [16 x i8]* %54 to i32*
  %56 = select i1 %14, i32* %51, i32* %53
  %57 = select i1 %14, i32* %52, i32* %55
  %58 = load i32, i32* %56, align 4
  %59 = load i32, i32* %57, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %64) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %64, i8 -86, i64 256, i1 false)
  %65 = icmp sgt i32 %28, 0
  br i1 %65, label %66, label %88

66:                                               ; preds = %5
  %67 = icmp sgt i32 %40, 0
  %68 = icmp sgt i32 %58, 0
  %69 = icmp sgt i32 %59, 0
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %71 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %73 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %74 = sext i32 %40 to i64
  %75 = getelementptr inbounds i32, i32* %24, i64 1
  %76 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %77 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %78 = sext i32 %50 to i64
  %79 = getelementptr %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %80 = bitcast i32* %79 to i8*
  %81 = getelementptr i8, i8* %80, i64 1
  %82 = mul nsw i64 %78, %74
  %83 = bitcast i32* %77 to i8*
  br label %84

84:                                               ; preds = %66, %89
  %85 = phi i32 [ 0, %66 ], [ %90, %89 ]
  br i1 %67, label %86, label %89

86:                                               ; preds = %84
  %87 = mul nsw i32 %85, %49
  br label %92

88:                                               ; preds = %89, %5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %64) #13
  ret void

89:                                               ; preds = %180, %84
  %90 = add nuw nsw i32 %85, 1
  %91 = icmp slt i32 %90, %28
  br i1 %91, label %84, label %88

92:                                               ; preds = %86, %180
  %93 = phi i64 [ 0, %86 ], [ %184, %180 ]
  %94 = phi i32 [ 0, %86 ], [ %183, %180 ]
  %95 = phi i64 [ 0, %86 ], [ %181, %180 ]
  %96 = trunc i64 %93 to i32
  %97 = mul i32 %96, -256
  %98 = add i32 %40, %97
  %99 = icmp slt i32 %98, 256
  %100 = select i1 %99, i32 %98, i32 256
  %101 = sext i32 %100 to i64
  %102 = icmp sgt i64 %101, 1
  %103 = select i1 %102, i64 %101, i64 1
  %104 = and i64 %103, 9223372036854775804
  %105 = add nsw i64 %104, -4
  %106 = lshr exact i64 %105, 2
  %107 = add nuw nsw i64 %106, 1
  %108 = trunc i64 %93 to i32
  %109 = mul i32 %108, -256
  %110 = add i32 %40, %109
  %111 = icmp slt i32 %110, 256
  %112 = select i1 %111, i32 %110, i32 256
  %113 = sext i32 %112 to i64
  %114 = icmp sgt i64 %113, 1
  %115 = select i1 %114, i64 %113, i64 1
  %116 = and i64 %115, 9223372036854775776
  %117 = add nsw i64 %116, -32
  %118 = lshr exact i64 %117, 5
  %119 = add nuw nsw i64 %118, 1
  %120 = mul i32 %94, -256
  %121 = add i32 %40, %120
  %122 = icmp slt i32 %121, 256
  %123 = select i1 %122, i32 %121, i32 256
  %124 = sext i32 %123 to i64
  %125 = icmp sgt i64 %124, 1
  %126 = select i1 %125, i64 %124, i64 1
  %127 = getelementptr [256 x i8], [256 x i8]* %6, i64 0, i64 %126
  %128 = shl nuw nsw i64 %93, 8
  %129 = mul i32 %94, -256
  %130 = add i32 %40, %129
  %131 = icmp slt i32 %130, 256
  %132 = select i1 %131, i32 %130, i32 256
  %133 = sext i32 %132 to i64
  %134 = icmp sgt i64 %133, 1
  %135 = select i1 %134, i64 %133, i64 1
  %136 = mul i32 %94, -256
  %137 = add i32 %40, %136
  %138 = icmp slt i32 %137, 256
  %139 = select i1 %138, i32 %137, i32 256
  %140 = sext i32 %139 to i64
  %141 = mul i32 %94, -256
  %142 = add i32 %40, %141
  %143 = icmp slt i32 %142, 256
  %144 = select i1 %143, i32 %142, i32 256
  %145 = sext i32 %144 to i64
  %146 = icmp sgt i64 %145, 1
  %147 = select i1 %146, i64 %145, i64 1
  %148 = trunc i64 %95 to i32
  %149 = sub nsw i32 %40, %148
  br i1 %68, label %150, label %180

150:                                              ; preds = %92
  %151 = icmp sgt i64 %140, 1
  %152 = select i1 %151, i64 %140, i64 1
  %153 = getelementptr i8, i8* %2, i64 %128
  %154 = icmp slt i32 %149, 256
  %155 = select i1 %154, i32 %149, i32 256
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %2, i64 %95
  %158 = icmp sgt i32 %149, 0
  %159 = getelementptr i8, i8* %4, i64 %152
  %160 = getelementptr i8, i8* %153, i64 %126
  %161 = icmp ult i64 %135, 32
  %162 = and i64 %135, 9223372036854775776
  %163 = and i64 %119, 1
  %164 = icmp eq i64 %117, 0
  %165 = sub nuw nsw i64 %119, %163
  %166 = icmp eq i64 %163, 0
  %167 = icmp eq i64 %135, %162
  %168 = icmp ult i64 %147, 4
  %169 = and i64 %147, 9223372036854775804
  %170 = and i64 %107, 1
  %171 = icmp eq i64 %105, 0
  %172 = sub nuw nsw i64 %107, %170
  %173 = icmp eq i64 %170, 0
  %174 = icmp eq i64 %147, %169
  br label %175

175:                                              ; preds = %185, %150
  %176 = phi i32 [ 0, %150 ], [ %187, %185 ]
  %177 = phi i32 [ 0, %150 ], [ %186, %185 ]
  br i1 %69, label %178, label %185

178:                                              ; preds = %175
  %179 = mul nsw i32 %177, %61
  br label %189

180:                                              ; preds = %185, %92
  %181 = add nuw nsw i64 %95, 256
  %182 = icmp slt i64 %181, %74
  %183 = add i32 %94, 1
  %184 = add i64 %93, 1
  br i1 %182, label %92, label %89

185:                                              ; preds = %447, %175
  %186 = add nuw nsw i32 %177, 1
  %187 = sub i32 %176, %61
  %188 = icmp eq i32 %186, %58
  br i1 %188, label %180, label %175

189:                                              ; preds = %447, %178
  %190 = phi i32 [ 0, %178 ], [ %448, %447 ]
  %191 = mul nsw i32 %190, %63
  %192 = load i16, i16* %70, align 2
  %193 = sext i16 %192 to i32
  %194 = sub nsw i32 %191, %193
  %195 = load i16, i16* %71, align 2
  %196 = sext i16 %195 to i32
  %197 = sub nsw i32 %179, %196
  %198 = sub nsw i32 0, %194
  %199 = icmp sgt i32 %198, 0
  %200 = select i1 %199, i32 %198, i32 0
  %201 = sub nsw i32 %50, %194
  %202 = load i32, i32* %72, align 4
  %203 = icmp slt i32 %201, %202
  %204 = select i1 %203, i32 %201, i32 %202
  %205 = sub nsw i32 0, %197
  %206 = icmp sgt i32 %205, 0
  %207 = select i1 %206, i32 %205, i32 0
  %208 = sub nsw i32 %49, %197
  %209 = load i32, i32* %73, align 4
  %210 = icmp slt i32 %208, %209
  %211 = select i1 %210, i32 %208, i32 %209
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %64, i8 0, i64 %156, i1 false)
  %212 = add nsw i32 %197, %87
  %213 = mul nsw i32 %212, %50
  %214 = add nsw i32 %213, %194
  %215 = mul nsw i32 %214, %40
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i8, i8* %157, i64 %216
  %218 = icmp slt i32 %207, %211
  br i1 %218, label %219, label %234

219:                                              ; preds = %189
  %220 = icmp slt i32 %200, %204
  %221 = add i32 %176, %196
  %222 = icmp sgt i32 %221, 0
  %223 = select i1 %222, i32 %221, i32 0
  %224 = zext i32 %223 to i64
  %225 = zext i32 %200 to i64
  %226 = sext i32 %211 to i64
  %227 = mul nsw i64 %78, %224
  %228 = add i64 %227, %225
  %229 = mul i64 %228, %74
  %230 = add i64 %128, %229
  %231 = add i64 %230, %216
  %232 = add i64 %229, %216
  %233 = getelementptr i8, i8* %160, i64 %232
  br label %318

234:                                              ; preds = %412, %189
  %235 = load i32, i32* %75, align 4
  %236 = mul nsw i32 %235, %85
  %237 = add nsw i32 %236, %177
  %238 = load i32, i32* %55, align 4
  %239 = mul nsw i32 %237, %238
  %240 = add nsw i32 %239, %190
  %241 = load i32, i32* %36, align 4
  %242 = mul nsw i32 %240, %241
  %243 = add nsw i32 %242, %148
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i8, i8* %4, i64 %244
  br i1 %158, label %246, label %447

246:                                              ; preds = %234
  br i1 %168, label %247, label %249

247:                                              ; preds = %317, %249, %246
  %248 = phi i64 [ 0, %249 ], [ 0, %246 ], [ %169, %317 ]
  br label %432

249:                                              ; preds = %246
  %250 = getelementptr i8, i8* %159, i64 %244
  %251 = icmp ult i8* %245, %81
  %252 = icmp ugt i8* %250, %83
  %253 = and i1 %251, %252
  br i1 %253, label %247, label %254

254:                                              ; preds = %249
  br i1 %171, label %297, label %255

255:                                              ; preds = %254
  %256 = load i32, i32* %76, align 4, !alias.scope !218
  %257 = trunc i32 %256 to i8
  %258 = insertelement <4 x i8> undef, i8 %257, i32 0
  %259 = shufflevector <4 x i8> %258, <4 x i8> undef, <4 x i32> zeroinitializer
  %260 = load i32, i32* %77, align 4, !alias.scope !218
  %261 = trunc i32 %260 to i8
  %262 = insertelement <4 x i8> undef, i8 %261, i32 0
  %263 = shufflevector <4 x i8> %262, <4 x i8> undef, <4 x i32> zeroinitializer
  %264 = load i32, i32* %76, align 4, !alias.scope !218
  %265 = trunc i32 %264 to i8
  %266 = insertelement <4 x i8> undef, i8 %265, i32 0
  %267 = shufflevector <4 x i8> %266, <4 x i8> undef, <4 x i32> zeroinitializer
  %268 = load i32, i32* %77, align 4, !alias.scope !218
  %269 = trunc i32 %268 to i8
  %270 = insertelement <4 x i8> undef, i8 %269, i32 0
  %271 = shufflevector <4 x i8> %270, <4 x i8> undef, <4 x i32> zeroinitializer
  br label %272

272:                                              ; preds = %272, %255
  %273 = phi i64 [ 0, %255 ], [ %294, %272 ]
  %274 = phi i64 [ %172, %255 ], [ %295, %272 ]
  %275 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %273
  %276 = bitcast i8* %275 to <4 x i8>*
  %277 = load <4 x i8>, <4 x i8>* %276, align 8, !alias.scope !221
  %278 = icmp ult <4 x i8> %277, %259
  %279 = select <4 x i1> %278, <4 x i8> %259, <4 x i8> %277
  %280 = icmp ugt <4 x i8> %279, %263
  %281 = select <4 x i1> %280, <4 x i8> %263, <4 x i8> %279
  %282 = getelementptr inbounds i8, i8* %245, i64 %273
  %283 = bitcast i8* %282 to <4 x i8>*
  store <4 x i8> %281, <4 x i8>* %283, align 1, !alias.scope !223, !noalias !218
  %284 = or i64 %273, 4
  %285 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %284
  %286 = bitcast i8* %285 to <4 x i8>*
  %287 = load <4 x i8>, <4 x i8>* %286, align 4, !alias.scope !221
  %288 = icmp ult <4 x i8> %287, %267
  %289 = select <4 x i1> %288, <4 x i8> %267, <4 x i8> %287
  %290 = icmp ugt <4 x i8> %289, %271
  %291 = select <4 x i1> %290, <4 x i8> %271, <4 x i8> %289
  %292 = getelementptr inbounds i8, i8* %245, i64 %284
  %293 = bitcast i8* %292 to <4 x i8>*
  store <4 x i8> %291, <4 x i8>* %293, align 1, !alias.scope !223, !noalias !218
  %294 = add i64 %273, 8
  %295 = add i64 %274, -2
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %297, label %272, !llvm.loop !225

297:                                              ; preds = %272, %254
  %298 = phi i64 [ 0, %254 ], [ %294, %272 ]
  br i1 %173, label %317, label %299

299:                                              ; preds = %297
  %300 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %298
  %301 = bitcast i8* %300 to <4 x i8>*
  %302 = load <4 x i8>, <4 x i8>* %301, align 4, !alias.scope !221
  %303 = load i32, i32* %76, align 4, !alias.scope !218
  %304 = trunc i32 %303 to i8
  %305 = insertelement <4 x i8> undef, i8 %304, i32 0
  %306 = shufflevector <4 x i8> %305, <4 x i8> undef, <4 x i32> zeroinitializer
  %307 = icmp ult <4 x i8> %302, %306
  %308 = select <4 x i1> %307, <4 x i8> %306, <4 x i8> %302
  %309 = load i32, i32* %77, align 4, !alias.scope !218
  %310 = trunc i32 %309 to i8
  %311 = insertelement <4 x i8> undef, i8 %310, i32 0
  %312 = shufflevector <4 x i8> %311, <4 x i8> undef, <4 x i32> zeroinitializer
  %313 = icmp ugt <4 x i8> %308, %312
  %314 = select <4 x i1> %313, <4 x i8> %312, <4 x i8> %308
  %315 = getelementptr inbounds i8, i8* %245, i64 %298
  %316 = bitcast i8* %315 to <4 x i8>*
  store <4 x i8> %314, <4 x i8>* %316, align 1, !alias.scope !223, !noalias !218
  br label %317

317:                                              ; preds = %297, %299
  br i1 %174, label %447, label %247

318:                                              ; preds = %219, %412
  %319 = phi i64 [ 0, %219 ], [ %415, %412 ]
  %320 = phi i64 [ %224, %219 ], [ %413, %412 ]
  %321 = mul i64 %82, %319
  %322 = add i64 %231, %321
  %323 = getelementptr i8, i8* %233, i64 %321
  br i1 %220, label %324, label %412

324:                                              ; preds = %318
  %325 = mul nsw i64 %320, %78
  %326 = add nsw i64 %325, %225
  %327 = mul nsw i64 %326, %74
  %328 = getelementptr inbounds i8, i8* %217, i64 %327
  br label %329

329:                                              ; preds = %324, %427
  %330 = phi i64 [ 0, %324 ], [ %431, %427 ]
  %331 = phi i32 [ %200, %324 ], [ %429, %427 ]
  %332 = phi i8* [ %328, %324 ], [ %428, %427 ]
  %333 = mul i64 %330, %74
  %334 = add i64 %322, %333
  %335 = getelementptr i8, i8* %2, i64 %334
  %336 = getelementptr i8, i8* %323, i64 %333
  br i1 %158, label %337, label %427

337:                                              ; preds = %329
  br i1 %161, label %338, label %341

338:                                              ; preds = %411, %341, %337
  %339 = phi i64 [ 0, %341 ], [ 0, %337 ], [ %162, %411 ]
  %340 = phi i8* [ %332, %341 ], [ %332, %337 ], [ %346, %411 ]
  br label %416

341:                                              ; preds = %337
  %342 = icmp ult i8* %7, %336
  %343 = icmp ult i8* %335, %127
  %344 = and i1 %342, %343
  br i1 %344, label %338, label %345

345:                                              ; preds = %341
  %346 = getelementptr i8, i8* %332, i64 %162
  br i1 %164, label %390, label %347

347:                                              ; preds = %345, %347
  %348 = phi i64 [ %387, %347 ], [ 0, %345 ]
  %349 = phi i64 [ %388, %347 ], [ %165, %345 ]
  %350 = getelementptr i8, i8* %332, i64 %348
  %351 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %348
  %352 = bitcast i8* %351 to <16 x i8>*
  %353 = load <16 x i8>, <16 x i8>* %352, align 16, !alias.scope !226, !noalias !229
  %354 = getelementptr inbounds i8, i8* %351, i64 16
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 16, !alias.scope !226, !noalias !229
  %357 = bitcast i8* %350 to <16 x i8>*
  %358 = load <16 x i8>, <16 x i8>* %357, align 1, !alias.scope !229
  %359 = getelementptr i8, i8* %350, i64 16
  %360 = bitcast i8* %359 to <16 x i8>*
  %361 = load <16 x i8>, <16 x i8>* %360, align 1, !alias.scope !229
  %362 = icmp ult <16 x i8> %353, %358
  %363 = icmp ult <16 x i8> %356, %361
  %364 = select <16 x i1> %362, <16 x i8> %358, <16 x i8> %353
  %365 = select <16 x i1> %363, <16 x i8> %361, <16 x i8> %356
  %366 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %364, <16 x i8>* %366, align 16, !alias.scope !226, !noalias !229
  %367 = bitcast i8* %354 to <16 x i8>*
  store <16 x i8> %365, <16 x i8>* %367, align 16, !alias.scope !226, !noalias !229
  %368 = or i64 %348, 32
  %369 = getelementptr i8, i8* %332, i64 %368
  %370 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %368
  %371 = bitcast i8* %370 to <16 x i8>*
  %372 = load <16 x i8>, <16 x i8>* %371, align 16, !alias.scope !226, !noalias !229
  %373 = getelementptr inbounds i8, i8* %370, i64 16
  %374 = bitcast i8* %373 to <16 x i8>*
  %375 = load <16 x i8>, <16 x i8>* %374, align 16, !alias.scope !226, !noalias !229
  %376 = bitcast i8* %369 to <16 x i8>*
  %377 = load <16 x i8>, <16 x i8>* %376, align 1, !alias.scope !229
  %378 = getelementptr i8, i8* %369, i64 16
  %379 = bitcast i8* %378 to <16 x i8>*
  %380 = load <16 x i8>, <16 x i8>* %379, align 1, !alias.scope !229
  %381 = icmp ult <16 x i8> %372, %377
  %382 = icmp ult <16 x i8> %375, %380
  %383 = select <16 x i1> %381, <16 x i8> %377, <16 x i8> %372
  %384 = select <16 x i1> %382, <16 x i8> %380, <16 x i8> %375
  %385 = bitcast i8* %370 to <16 x i8>*
  store <16 x i8> %383, <16 x i8>* %385, align 16, !alias.scope !226, !noalias !229
  %386 = bitcast i8* %373 to <16 x i8>*
  store <16 x i8> %384, <16 x i8>* %386, align 16, !alias.scope !226, !noalias !229
  %387 = add i64 %348, 64
  %388 = add i64 %349, -2
  %389 = icmp eq i64 %388, 0
  br i1 %389, label %390, label %347, !llvm.loop !231

390:                                              ; preds = %347, %345
  %391 = phi i64 [ 0, %345 ], [ %387, %347 ]
  br i1 %166, label %411, label %392

392:                                              ; preds = %390
  %393 = getelementptr i8, i8* %332, i64 %391
  %394 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %391
  %395 = bitcast i8* %394 to <16 x i8>*
  %396 = load <16 x i8>, <16 x i8>* %395, align 16, !alias.scope !226, !noalias !229
  %397 = getelementptr inbounds i8, i8* %394, i64 16
  %398 = bitcast i8* %397 to <16 x i8>*
  %399 = load <16 x i8>, <16 x i8>* %398, align 16, !alias.scope !226, !noalias !229
  %400 = bitcast i8* %393 to <16 x i8>*
  %401 = load <16 x i8>, <16 x i8>* %400, align 1, !alias.scope !229
  %402 = getelementptr i8, i8* %393, i64 16
  %403 = bitcast i8* %402 to <16 x i8>*
  %404 = load <16 x i8>, <16 x i8>* %403, align 1, !alias.scope !229
  %405 = icmp ult <16 x i8> %396, %401
  %406 = icmp ult <16 x i8> %399, %404
  %407 = select <16 x i1> %405, <16 x i8> %401, <16 x i8> %396
  %408 = select <16 x i1> %406, <16 x i8> %404, <16 x i8> %399
  %409 = bitcast i8* %394 to <16 x i8>*
  store <16 x i8> %407, <16 x i8>* %409, align 16, !alias.scope !226, !noalias !229
  %410 = bitcast i8* %397 to <16 x i8>*
  store <16 x i8> %408, <16 x i8>* %410, align 16, !alias.scope !226, !noalias !229
  br label %411

411:                                              ; preds = %390, %392
  br i1 %167, label %427, label %338

412:                                              ; preds = %427, %318
  %413 = add nuw nsw i64 %320, 1
  %414 = icmp slt i64 %413, %226
  %415 = add i64 %319, 1
  br i1 %414, label %318, label %234

416:                                              ; preds = %338, %416
  %417 = phi i64 [ %425, %416 ], [ %339, %338 ]
  %418 = phi i8* [ %420, %416 ], [ %340, %338 ]
  %419 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %417
  %420 = getelementptr inbounds i8, i8* %418, i64 1
  %421 = load i8, i8* %419, align 1
  %422 = load i8, i8* %418, align 1
  %423 = icmp ult i8 %421, %422
  %424 = select i1 %423, i8 %422, i8 %421
  store i8 %424, i8* %419, align 1
  %425 = add nuw nsw i64 %417, 1
  %426 = icmp slt i64 %425, %156
  br i1 %426, label %416, label %427, !llvm.loop !232

427:                                              ; preds = %416, %411, %329
  %428 = getelementptr inbounds i8, i8* %332, i64 %74
  %429 = add nuw nsw i32 %331, 1
  %430 = icmp slt i32 %429, %204
  %431 = add i64 %330, 1
  br i1 %430, label %329, label %412

432:                                              ; preds = %247, %432
  %433 = phi i64 [ %445, %432 ], [ %248, %247 ]
  %434 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = load i32, i32* %76, align 4
  %437 = trunc i32 %436 to i8
  %438 = icmp ult i8 %435, %437
  %439 = select i1 %438, i8 %437, i8 %435
  %440 = load i32, i32* %77, align 4
  %441 = trunc i32 %440 to i8
  %442 = icmp ugt i8 %439, %441
  %443 = select i1 %442, i8 %441, i8 %439
  %444 = getelementptr inbounds i8, i8* %245, i64 %433
  store i8 %443, i8* %444, align 1
  %445 = add nuw nsw i64 %433, 1
  %446 = icmp slt i64 %445, %156
  br i1 %446, label %432, label %447, !llvm.loop !233

447:                                              ; preds = %432, %317, %234
  %448 = add nuw nsw i32 %190, 1
  %449 = icmp eq i32 %448, %59
  br i1 %449, label %185, label %189
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21optimized_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %6 = alloca [256 x i8], align 16
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %10 = load i32, i32* %8, align 8
  %11 = icmp sgt i32 %10, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %12 to i32*
  %19 = select i1 %11, i32* %17, i32* %18
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast %union.anon* %15 to [5 x i32]*
  %24 = bitcast %union.anon* %15 to i32*
  %25 = select i1 %14, i32* %22, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %20
  %28 = select i1 %27, i32 %26, i32 %20
  %29 = getelementptr inbounds i32, i32* %17, i64 3
  %30 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = select i1 %11, i32* %29, i32* %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %22, i64 3
  %35 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = select i1 %14, i32* %34, i32* %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %33
  %40 = select i1 %39, i32 %38, i32 %33
  %41 = getelementptr inbounds i32, i32* %17, i64 1
  %42 = getelementptr inbounds i32, i32* %17, i64 2
  %43 = bitcast %union.anon* %12 to [5 x i32]*
  %44 = getelementptr inbounds [5 x i32], [5 x i32]* %43, i64 0, i64 1
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %46 = bitcast [16 x i8]* %45 to i32*
  %47 = select i1 %11, i32* %41, i32* %44
  %48 = select i1 %11, i32* %42, i32* %46
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = getelementptr inbounds i32, i32* %22, i64 1
  %52 = getelementptr inbounds i32, i32* %22, i64 2
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i64 0, i64 1
  %54 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %55 = bitcast [16 x i8]* %54 to i32*
  %56 = select i1 %14, i32* %51, i32* %53
  %57 = select i1 %14, i32* %52, i32* %55
  %58 = load i32, i32* %56, align 4
  %59 = load i32, i32* %57, align 4
  %60 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %64) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %64, i8 -86, i64 256, i1 false)
  %65 = icmp sgt i32 %28, 0
  br i1 %65, label %66, label %90

66:                                               ; preds = %5
  %67 = icmp sgt i32 %40, 0
  %68 = icmp sgt i32 %58, 0
  %69 = icmp sgt i32 %59, 0
  %70 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %71 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %72 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %73 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %74 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 7
  %75 = sext i32 %40 to i64
  %76 = getelementptr inbounds i32, i32* %24, i64 1
  %77 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %78 = sext i32 %50 to i64
  %79 = getelementptr i8, i8* %4, i64 1
  %80 = getelementptr %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 8
  %81 = bitcast i32* %80 to i8*
  %82 = getelementptr i8, i8* %81, i64 1
  %83 = mul nsw i64 %78, %75
  %84 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  %85 = bitcast i32* %77 to i8*
  br label %86

86:                                               ; preds = %66, %91
  %87 = phi i32 [ 0, %66 ], [ %92, %91 ]
  br i1 %67, label %88, label %91

88:                                               ; preds = %86
  %89 = mul nsw i32 %87, %49
  br label %94

90:                                               ; preds = %91, %5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %64) #13
  ret void

91:                                               ; preds = %165, %86
  %92 = add nuw nsw i32 %87, 1
  %93 = icmp slt i32 %92, %28
  br i1 %93, label %86, label %90

94:                                               ; preds = %88, %165
  %95 = phi i64 [ 0, %88 ], [ %169, %165 ]
  %96 = phi i32 [ 0, %88 ], [ %168, %165 ]
  %97 = phi i64 [ 0, %88 ], [ %166, %165 ]
  %98 = trunc i64 %95 to i32
  %99 = mul i32 %98, -256
  %100 = add i32 %40, %99
  %101 = icmp slt i32 %100, 256
  %102 = select i1 %101, i32 %100, i32 256
  %103 = sext i32 %102 to i64
  %104 = icmp sgt i64 %103, 1
  %105 = select i1 %104, i64 %103, i64 1
  %106 = and i64 %105, 9223372036854775776
  %107 = add nsw i64 %106, -32
  %108 = lshr exact i64 %107, 5
  %109 = add nuw nsw i64 %108, 1
  %110 = mul i32 %96, -256
  %111 = add i32 %40, %110
  %112 = icmp slt i32 %111, 256
  %113 = select i1 %112, i32 %111, i32 256
  %114 = sext i32 %113 to i64
  %115 = icmp sgt i64 %114, 1
  %116 = select i1 %115, i64 %114, i64 1
  %117 = getelementptr [256 x i8], [256 x i8]* %6, i64 0, i64 %116
  %118 = shl nuw nsw i64 %95, 8
  %119 = mul i32 %96, -256
  %120 = add i32 %40, %119
  %121 = icmp slt i32 %120, 256
  %122 = select i1 %121, i32 %120, i32 256
  %123 = sext i32 %122 to i64
  %124 = icmp sgt i64 %123, 1
  %125 = select i1 %124, i64 %123, i64 1
  %126 = mul i32 %96, -256
  %127 = add i32 %40, %126
  %128 = mul i32 %96, -256
  %129 = add i32 %40, %128
  %130 = icmp slt i32 %129, 256
  %131 = select i1 %130, i32 %129, i32 256
  %132 = sext i32 %131 to i64
  %133 = add nsw i64 %132, -1
  %134 = trunc i64 %97 to i32
  %135 = sub nsw i32 %40, %134
  br i1 %68, label %136, label %165

136:                                              ; preds = %94
  %137 = icmp slt i32 %127, 256
  %138 = select i1 %137, i32 %127, i32 256
  %139 = sext i32 %138 to i64
  %140 = getelementptr i8, i8* %2, i64 %118
  %141 = icmp slt i32 %135, 256
  %142 = select i1 %141, i32 %135, i32 256
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %2, i64 %97
  %145 = icmp sgt i32 %135, 0
  %146 = getelementptr i8, i8* %4, i64 %139
  %147 = getelementptr i8, i8* %140, i64 %116
  %148 = icmp ult i64 %125, 32
  %149 = and i64 %125, 9223372036854775776
  %150 = and i64 %109, 1
  %151 = icmp eq i64 %107, 0
  %152 = sub nuw nsw i64 %109, %150
  %153 = icmp eq i64 %150, 0
  %154 = icmp eq i64 %125, %149
  %155 = icmp sgt i32 %142, 1
  %156 = icmp ult i64 %133, 4
  %157 = and i64 %133, -4
  %158 = or i64 %157, 1
  %159 = icmp eq i64 %133, %157
  br label %160

160:                                              ; preds = %170, %136
  %161 = phi i32 [ 0, %136 ], [ %172, %170 ]
  %162 = phi i32 [ 0, %136 ], [ %171, %170 ]
  br i1 %69, label %163, label %170

163:                                              ; preds = %160
  %164 = mul nsw i32 %162, %61
  br label %174

165:                                              ; preds = %170, %94
  %166 = add nuw nsw i64 %97, 256
  %167 = icmp slt i64 %166, %75
  %168 = add i32 %96, 1
  %169 = add i64 %95, 1
  br i1 %167, label %94, label %91

170:                                              ; preds = %404, %160
  %171 = add nuw nsw i32 %162, 1
  %172 = sub i32 %161, %61
  %173 = icmp eq i32 %171, %58
  br i1 %173, label %165, label %160

174:                                              ; preds = %404, %163
  %175 = phi i32 [ 0, %163 ], [ %405, %404 ]
  %176 = mul nsw i32 %175, %63
  %177 = load i16, i16* %70, align 2
  %178 = sext i16 %177 to i32
  %179 = sub nsw i32 %176, %178
  %180 = load i16, i16* %71, align 2
  %181 = sext i16 %180 to i32
  %182 = sub nsw i32 %164, %181
  %183 = sub nsw i32 0, %179
  %184 = icmp sgt i32 %183, 0
  %185 = select i1 %184, i32 %183, i32 0
  %186 = sub nsw i32 %50, %179
  %187 = load i32, i32* %72, align 4
  %188 = icmp slt i32 %186, %187
  %189 = select i1 %188, i32 %186, i32 %187
  %190 = sub nsw i32 0, %182
  %191 = icmp sgt i32 %190, 0
  %192 = select i1 %191, i32 %190, i32 0
  %193 = sub nsw i32 %49, %182
  %194 = load i32, i32* %73, align 4
  %195 = icmp slt i32 %193, %194
  %196 = select i1 %195, i32 %193, i32 %194
  %197 = load i32, i32* %74, align 4
  %198 = trunc i32 %197 to i8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %64, i8 %198, i64 %143, i1 false)
  %199 = add nsw i32 %182, %89
  %200 = mul nsw i32 %199, %50
  %201 = add nsw i32 %200, %179
  %202 = mul nsw i32 %201, %40
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %144, i64 %203
  %205 = icmp slt i32 %192, %196
  br i1 %205, label %206, label %221

206:                                              ; preds = %174
  %207 = icmp slt i32 %185, %189
  %208 = add i32 %161, %181
  %209 = icmp sgt i32 %208, 0
  %210 = select i1 %209, i32 %208, i32 0
  %211 = zext i32 %210 to i64
  %212 = zext i32 %185 to i64
  %213 = sext i32 %196 to i64
  %214 = mul nsw i64 %78, %211
  %215 = add i64 %214, %212
  %216 = mul i64 %215, %75
  %217 = add i64 %118, %216
  %218 = add i64 %217, %203
  %219 = add i64 %216, %203
  %220 = getelementptr i8, i8* %147, i64 %219
  br label %275

221:                                              ; preds = %369, %174
  %222 = load i32, i32* %76, align 4
  %223 = mul nsw i32 %222, %87
  %224 = add nsw i32 %223, %162
  %225 = load i32, i32* %55, align 4
  %226 = mul nsw i32 %224, %225
  %227 = add nsw i32 %226, %175
  %228 = load i32, i32* %36, align 4
  %229 = mul nsw i32 %227, %228
  %230 = add nsw i32 %229, %134
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %4, i64 %231
  br i1 %145, label %233, label %404

233:                                              ; preds = %221
  %234 = load i8, i8* %84, align 16
  %235 = trunc i32 %197 to i8
  %236 = icmp slt i8 %234, %235
  %237 = select i1 %236, i8 %235, i8 %234
  %238 = load i32, i32* %77, align 4
  %239 = trunc i32 %238 to i8
  %240 = icmp sgt i8 %237, %239
  %241 = select i1 %240, i8 %239, i8 %237
  store i8 %241, i8* %232, align 1
  br i1 %155, label %242, label %404

242:                                              ; preds = %233
  br i1 %156, label %243, label %245

243:                                              ; preds = %274, %245, %242
  %244 = phi i64 [ 1, %245 ], [ 1, %242 ], [ %158, %274 ]
  br label %389

245:                                              ; preds = %242
  %246 = getelementptr i8, i8* %79, i64 %231
  %247 = getelementptr i8, i8* %146, i64 %231
  %248 = icmp ult i8* %246, %82
  %249 = icmp ugt i8* %247, %85
  %250 = and i1 %248, %249
  br i1 %250, label %243, label %251

251:                                              ; preds = %245
  %252 = load i32, i32* %74, align 4, !alias.scope !234
  %253 = trunc i32 %252 to i8
  %254 = insertelement <4 x i8> undef, i8 %253, i32 0
  %255 = shufflevector <4 x i8> %254, <4 x i8> undef, <4 x i32> zeroinitializer
  %256 = load i32, i32* %77, align 4, !alias.scope !234
  %257 = trunc i32 %256 to i8
  %258 = insertelement <4 x i8> undef, i8 %257, i32 0
  %259 = shufflevector <4 x i8> %258, <4 x i8> undef, <4 x i32> zeroinitializer
  br label %260

260:                                              ; preds = %260, %251
  %261 = phi i64 [ 0, %251 ], [ %272, %260 ]
  %262 = or i64 %261, 1
  %263 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %262
  %264 = bitcast i8* %263 to <4 x i8>*
  %265 = load <4 x i8>, <4 x i8>* %264, align 1, !alias.scope !237
  %266 = icmp slt <4 x i8> %265, %255
  %267 = select <4 x i1> %266, <4 x i8> %255, <4 x i8> %265
  %268 = icmp sgt <4 x i8> %267, %259
  %269 = select <4 x i1> %268, <4 x i8> %259, <4 x i8> %267
  %270 = getelementptr inbounds i8, i8* %232, i64 %262
  %271 = bitcast i8* %270 to <4 x i8>*
  store <4 x i8> %269, <4 x i8>* %271, align 1, !alias.scope !239, !noalias !234
  %272 = add i64 %261, 4
  %273 = icmp eq i64 %272, %157
  br i1 %273, label %274, label %260, !llvm.loop !241

274:                                              ; preds = %260
  br i1 %159, label %404, label %243

275:                                              ; preds = %206, %369
  %276 = phi i64 [ 0, %206 ], [ %372, %369 ]
  %277 = phi i64 [ %211, %206 ], [ %370, %369 ]
  %278 = mul i64 %83, %276
  %279 = add i64 %218, %278
  %280 = getelementptr i8, i8* %220, i64 %278
  br i1 %207, label %281, label %369

281:                                              ; preds = %275
  %282 = mul nsw i64 %277, %78
  %283 = add nsw i64 %282, %212
  %284 = mul nsw i64 %283, %75
  %285 = getelementptr inbounds i8, i8* %204, i64 %284
  br label %286

286:                                              ; preds = %281, %384
  %287 = phi i64 [ 0, %281 ], [ %388, %384 ]
  %288 = phi i32 [ %185, %281 ], [ %386, %384 ]
  %289 = phi i8* [ %285, %281 ], [ %385, %384 ]
  %290 = mul i64 %287, %75
  %291 = add i64 %279, %290
  %292 = getelementptr i8, i8* %2, i64 %291
  %293 = getelementptr i8, i8* %280, i64 %290
  br i1 %145, label %294, label %384

294:                                              ; preds = %286
  br i1 %148, label %295, label %298

295:                                              ; preds = %368, %298, %294
  %296 = phi i64 [ 0, %298 ], [ 0, %294 ], [ %149, %368 ]
  %297 = phi i8* [ %289, %298 ], [ %289, %294 ], [ %303, %368 ]
  br label %373

298:                                              ; preds = %294
  %299 = icmp ult i8* %7, %293
  %300 = icmp ult i8* %292, %117
  %301 = and i1 %299, %300
  br i1 %301, label %295, label %302

302:                                              ; preds = %298
  %303 = getelementptr i8, i8* %289, i64 %149
  br i1 %151, label %347, label %304

304:                                              ; preds = %302, %304
  %305 = phi i64 [ %344, %304 ], [ 0, %302 ]
  %306 = phi i64 [ %345, %304 ], [ %152, %302 ]
  %307 = getelementptr i8, i8* %289, i64 %305
  %308 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %305
  %309 = bitcast i8* %308 to <16 x i8>*
  %310 = load <16 x i8>, <16 x i8>* %309, align 16, !alias.scope !242, !noalias !245
  %311 = getelementptr inbounds i8, i8* %308, i64 16
  %312 = bitcast i8* %311 to <16 x i8>*
  %313 = load <16 x i8>, <16 x i8>* %312, align 16, !alias.scope !242, !noalias !245
  %314 = bitcast i8* %307 to <16 x i8>*
  %315 = load <16 x i8>, <16 x i8>* %314, align 1, !alias.scope !245
  %316 = getelementptr i8, i8* %307, i64 16
  %317 = bitcast i8* %316 to <16 x i8>*
  %318 = load <16 x i8>, <16 x i8>* %317, align 1, !alias.scope !245
  %319 = icmp slt <16 x i8> %310, %315
  %320 = icmp slt <16 x i8> %313, %318
  %321 = select <16 x i1> %319, <16 x i8> %315, <16 x i8> %310
  %322 = select <16 x i1> %320, <16 x i8> %318, <16 x i8> %313
  %323 = bitcast i8* %308 to <16 x i8>*
  store <16 x i8> %321, <16 x i8>* %323, align 16, !alias.scope !242, !noalias !245
  %324 = bitcast i8* %311 to <16 x i8>*
  store <16 x i8> %322, <16 x i8>* %324, align 16, !alias.scope !242, !noalias !245
  %325 = or i64 %305, 32
  %326 = getelementptr i8, i8* %289, i64 %325
  %327 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %325
  %328 = bitcast i8* %327 to <16 x i8>*
  %329 = load <16 x i8>, <16 x i8>* %328, align 16, !alias.scope !242, !noalias !245
  %330 = getelementptr inbounds i8, i8* %327, i64 16
  %331 = bitcast i8* %330 to <16 x i8>*
  %332 = load <16 x i8>, <16 x i8>* %331, align 16, !alias.scope !242, !noalias !245
  %333 = bitcast i8* %326 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !245
  %335 = getelementptr i8, i8* %326, i64 16
  %336 = bitcast i8* %335 to <16 x i8>*
  %337 = load <16 x i8>, <16 x i8>* %336, align 1, !alias.scope !245
  %338 = icmp slt <16 x i8> %329, %334
  %339 = icmp slt <16 x i8> %332, %337
  %340 = select <16 x i1> %338, <16 x i8> %334, <16 x i8> %329
  %341 = select <16 x i1> %339, <16 x i8> %337, <16 x i8> %332
  %342 = bitcast i8* %327 to <16 x i8>*
  store <16 x i8> %340, <16 x i8>* %342, align 16, !alias.scope !242, !noalias !245
  %343 = bitcast i8* %330 to <16 x i8>*
  store <16 x i8> %341, <16 x i8>* %343, align 16, !alias.scope !242, !noalias !245
  %344 = add i64 %305, 64
  %345 = add i64 %306, -2
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %304, !llvm.loop !247

347:                                              ; preds = %304, %302
  %348 = phi i64 [ 0, %302 ], [ %344, %304 ]
  br i1 %153, label %368, label %349

349:                                              ; preds = %347
  %350 = getelementptr i8, i8* %289, i64 %348
  %351 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %348
  %352 = bitcast i8* %351 to <16 x i8>*
  %353 = load <16 x i8>, <16 x i8>* %352, align 16, !alias.scope !242, !noalias !245
  %354 = getelementptr inbounds i8, i8* %351, i64 16
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 16, !alias.scope !242, !noalias !245
  %357 = bitcast i8* %350 to <16 x i8>*
  %358 = load <16 x i8>, <16 x i8>* %357, align 1, !alias.scope !245
  %359 = getelementptr i8, i8* %350, i64 16
  %360 = bitcast i8* %359 to <16 x i8>*
  %361 = load <16 x i8>, <16 x i8>* %360, align 1, !alias.scope !245
  %362 = icmp slt <16 x i8> %353, %358
  %363 = icmp slt <16 x i8> %356, %361
  %364 = select <16 x i1> %362, <16 x i8> %358, <16 x i8> %353
  %365 = select <16 x i1> %363, <16 x i8> %361, <16 x i8> %356
  %366 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %364, <16 x i8>* %366, align 16, !alias.scope !242, !noalias !245
  %367 = bitcast i8* %354 to <16 x i8>*
  store <16 x i8> %365, <16 x i8>* %367, align 16, !alias.scope !242, !noalias !245
  br label %368

368:                                              ; preds = %347, %349
  br i1 %154, label %384, label %295

369:                                              ; preds = %384, %275
  %370 = add nuw nsw i64 %277, 1
  %371 = icmp slt i64 %370, %213
  %372 = add i64 %276, 1
  br i1 %371, label %275, label %221

373:                                              ; preds = %295, %373
  %374 = phi i64 [ %382, %373 ], [ %296, %295 ]
  %375 = phi i8* [ %377, %373 ], [ %297, %295 ]
  %376 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %374
  %377 = getelementptr inbounds i8, i8* %375, i64 1
  %378 = load i8, i8* %376, align 1
  %379 = load i8, i8* %375, align 1
  %380 = icmp slt i8 %378, %379
  %381 = select i1 %380, i8 %379, i8 %378
  store i8 %381, i8* %376, align 1
  %382 = add nuw nsw i64 %374, 1
  %383 = icmp slt i64 %382, %143
  br i1 %383, label %373, label %384, !llvm.loop !248

384:                                              ; preds = %373, %368, %286
  %385 = getelementptr inbounds i8, i8* %289, i64 %75
  %386 = add nuw nsw i32 %288, 1
  %387 = icmp slt i32 %386, %189
  %388 = add i64 %287, 1
  br i1 %387, label %286, label %369

389:                                              ; preds = %243, %389
  %390 = phi i64 [ %402, %389 ], [ %244, %243 ]
  %391 = load i32, i32* %74, align 4
  %392 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %390
  %393 = load i8, i8* %392, align 1
  %394 = trunc i32 %391 to i8
  %395 = icmp slt i8 %393, %394
  %396 = select i1 %395, i8 %394, i8 %393
  %397 = load i32, i32* %77, align 4
  %398 = trunc i32 %397 to i8
  %399 = icmp sgt i8 %396, %398
  %400 = select i1 %399, i8 %398, i8 %396
  %401 = getelementptr inbounds i8, i8* %232, i64 %390
  store i8 %400, i8* %401, align 1
  %402 = add nuw nsw i64 %390, 1
  %403 = icmp slt i64 %402, %143
  br i1 %403, label %389, label %404, !llvm.loop !249

404:                                              ; preds = %389, %233, %274, %221
  %405 = add nuw nsw i32 %175, 1
  %406 = icmp eq i32 %405, %59
  br i1 %406, label %170, label %174
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLitePoolParams*, %"struct.tflite::ops::builtin::pooling::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #2 comdat {
  %7 = alloca %"struct.tflite::PoolParams", align 4
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -1
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %14, label %21

14:                                               ; preds = %6
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %12 to i64
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.27, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %6, %14
  %22 = phi i32 [ %17, %14 ], [ -8388609, %6 ]
  %23 = phi i32 [ %20, %14 ], [ 2139095039, %6 ]
  %24 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %24) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 getelementptr inbounds ({ i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }, { i8, i8, %"struct.tflite::PaddingValues", [2 x i8], i32, i32, i32, i32, i32, i32, float, float }* @__const._ZN6tflite3ops7builtin7pooling11L2EvalFloatILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS2_6OpDataEPK12TfLiteTensorPSD_.op_params, i64 0, i32 0), i64 36, i1 false)
  %25 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 3
  %26 = getelementptr inbounds %struct.TfLitePoolParams, %struct.TfLitePoolParams* %2, i64 0, i32 1
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %30 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = trunc i32 %32 to i16
  %34 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds %"struct.tflite::ops::builtin::pooling::OpData", %"struct.tflite::ops::builtin::pooling::OpData"* %3, i64 0, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = trunc i32 %36 to i16
  %38 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 2, i32 0
  store i16 %37, i16* %38, align 2
  %39 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 9
  %40 = bitcast float* %39 to i32*
  store i32 %22, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %7, i64 0, i32 10
  %42 = bitcast float* %41 to i32*
  store i32 %23, i32* %42, align 4
  %43 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #13
  %44 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %21
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %46, align 8, !alias.scope !250
  br label %75

47:                                               ; preds = %21
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %49 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %48, align 8, !noalias !250
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !250
  %52 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %49, i64 0, i32 1, i64 0
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %51, i32* %53, align 8, !alias.scope !250
  %54 = icmp sgt i32 %51, 5
  br i1 %54, label %55, label %62

55:                                               ; preds = %47
  %56 = sext i32 %51 to i64
  %57 = shl nsw i64 %56, 2
  %58 = tail call i8* @_Znam(i64 %57) #12, !noalias !250
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 8, !alias.scope !250
  %61 = bitcast i8* %58 to i32*
  br label %67

62:                                               ; preds = %47
  %63 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %64 = bitcast %union.anon* %63 to i32*
  %65 = sext i32 %51 to i64
  %66 = shl nsw i64 %65, 2
  br label %67

67:                                               ; preds = %62, %55
  %68 = phi i64 [ %57, %55 ], [ %66, %62 ]
  %69 = phi i32* [ %61, %55 ], [ %64, %62 ]
  %70 = bitcast i32* %69 to i8*
  %71 = bitcast i32* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %71, i64 %68, i1 false) #13
  %72 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %73 = bitcast %union.TfLitePtrUnion* %72 to float**
  %74 = load float*, float** %73, align 8
  br label %75

75:                                               ; preds = %45, %67
  %76 = phi float* [ %74, %67 ], [ null, %45 ]
  %77 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77) #13
  %78 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %80, align 8, !alias.scope !253
  br label %109

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %82, align 8, !noalias !253
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 4, !noalias !253
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 1, i64 0
  %87 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %85, i32* %87, align 8, !alias.scope !253
  %88 = icmp sgt i32 %85, 5
  br i1 %88, label %89, label %96

89:                                               ; preds = %81
  %90 = sext i32 %85 to i64
  %91 = shl nsw i64 %90, 2
  %92 = tail call i8* @_Znam(i64 %91) #12, !noalias !253
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %94 = bitcast i32** %93 to i8**
  store i8* %92, i8** %94, align 8, !alias.scope !253
  %95 = bitcast i8* %92 to i32*
  br label %101

96:                                               ; preds = %81
  %97 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %98 = bitcast %union.anon* %97 to i32*
  %99 = sext i32 %85 to i64
  %100 = shl nsw i64 %99, 2
  br label %101

101:                                              ; preds = %96, %89
  %102 = phi i64 [ %91, %89 ], [ %100, %96 ]
  %103 = phi i32* [ %95, %89 ], [ %98, %96 ]
  %104 = bitcast i32* %103 to i8*
  %105 = bitcast i32* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %102, i1 false) #13
  %106 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %107 = bitcast %union.TfLitePtrUnion* %106 to float**
  %108 = load float*, float** %107, align 8
  br label %109

109:                                              ; preds = %79, %101
  %110 = phi float* [ %108, %101 ], [ null, %79 ]
  call void @_ZN6tflite13optimized_ops6L2PoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* nonnull dereferenceable(44) %7, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %8, float* %76, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, float* %110)
  %111 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = icmp sgt i32 %112, 5
  br i1 %113, label %114, label %120

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %116 = load i32*, i32** %115, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = bitcast i32* %116 to i8*
  call void @_ZdaPv(i8* %119) #12
  br label %120

120:                                              ; preds = %109, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77) #13
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp sgt i32 %122, 5
  br i1 %123, label %124, label %130

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = icmp eq i32* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %124
  %129 = bitcast i32* %126 to i8*
  call void @_ZdaPv(i8* %129) #12
  br label %130

130:                                              ; preds = %120, %124, %128
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %24) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops6L2PoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf(%"struct.tflite::PoolParams"* dereferenceable(44), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #9 comdat {
  %6 = bitcast float* %4 to i8*
  %7 = alloca %"class.Eigen::Matrix", align 8
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %10 = load i32, i32* %8, align 8
  %11 = icmp sgt i32 %10, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = load i32, i32* %9, align 8
  %14 = icmp sgt i32 %13, 5
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %16 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast %union.anon* %12 to [5 x i32]*
  %19 = bitcast %union.anon* %12 to i32*
  %20 = select i1 %11, i32* %17, i32* %19
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %union.anon, %union.anon* %15, i64 0, i32 0
  %23 = load i32*, i32** %22, align 8
  %24 = bitcast %union.anon* %15 to [5 x i32]*
  %25 = bitcast %union.anon* %15 to i32*
  %26 = select i1 %14, i32* %23, i32* %25
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, %21
  %29 = select i1 %28, i32 %27, i32 %21
  %30 = getelementptr inbounds i32, i32* %17, i64 1
  %31 = getelementptr inbounds i32, i32* %17, i64 2
  %32 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 1
  %33 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1, i32 1
  %34 = bitcast [16 x i8]* %33 to i32*
  %35 = select i1 %11, i32* %30, i32* %32
  %36 = select i1 %11, i32* %31, i32* %34
  %37 = load i32, i32* %35, align 4
  %38 = load i32, i32* %36, align 4
  %39 = getelementptr inbounds i32, i32* %23, i64 1
  %40 = getelementptr inbounds i32, i32* %23, i64 2
  %41 = getelementptr inbounds [5 x i32], [5 x i32]* %24, i64 0, i64 1
  %42 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 1
  %43 = bitcast [16 x i8]* %42 to i32*
  %44 = select i1 %14, i32* %39, i32* %41
  %45 = select i1 %14, i32* %40, i32* %43
  %46 = load i32, i32* %44, align 4
  %47 = load i32, i32* %45, align 4
  %48 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 4
  %51 = load i32, i32* %50, align 4
  %52 = add nsw i32 %10, -1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %17, i64 %53
  %55 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %53
  %56 = select i1 %11, i32* %54, i32* %55
  %57 = load i32, i32* %56, align 4, !noalias !256
  %58 = sext i32 %57 to i64
  %59 = add nsw i32 %13, -1
  %60 = sext i32 %59 to i64
  br i1 %14, label %61, label %64

61:                                               ; preds = %5
  %62 = getelementptr inbounds i32, i32* %23, i64 %60
  %63 = load i32, i32* %62, align 4, !noalias !259
  br label %68

64:                                               ; preds = %5
  %65 = getelementptr inbounds [5 x i32], [5 x i32]* %24, i64 0, i64 %60
  %66 = load i32, i32* %65, align 4, !noalias !259
  %67 = icmp sgt i32 %13, 0
  br i1 %67, label %68, label %113

68:                                               ; preds = %64, %61
  %69 = phi i32* [ %23, %61 ], [ %25, %64 ]
  %70 = phi i32 [ %63, %61 ], [ %66, %64 ]
  %71 = zext i32 %59 to i64
  %72 = zext i32 %13 to i64
  %73 = add nsw i64 %72, -1
  %74 = and i64 %72, 3
  %75 = icmp ult i64 %73, 3
  br i1 %75, label %91, label %76

76:                                               ; preds = %68
  %77 = sub nsw i64 %72, %74
  br label %78

78:                                               ; preds = %1222, %76
  %79 = phi i64 [ 0, %76 ], [ %1225, %1222 ]
  %80 = phi i32 [ 1, %76 ], [ %1224, %1222 ]
  %81 = phi i64 [ %77, %76 ], [ %1226, %1222 ]
  %82 = icmp eq i64 %79, %71
  br i1 %82, label %86, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds i32, i32* %69, i64 %79
  %85 = load i32, i32* %84, align 4, !noalias !259
  br label %86

86:                                               ; preds = %83, %78
  %87 = phi i32 [ %85, %83 ], [ 1, %78 ]
  %88 = mul nsw i32 %87, %80
  %89 = or i64 %79, 1
  %90 = icmp eq i64 %89, %71
  br i1 %90, label %1206, label %1203

91:                                               ; preds = %1222, %68
  %92 = phi i32 [ undef, %68 ], [ %1224, %1222 ]
  %93 = phi i64 [ 0, %68 ], [ %1225, %1222 ]
  %94 = phi i32 [ 1, %68 ], [ %1224, %1222 ]
  %95 = icmp eq i64 %74, 0
  br i1 %95, label %110, label %96

96:                                               ; preds = %91, %104
  %97 = phi i64 [ %107, %104 ], [ %93, %91 ]
  %98 = phi i32 [ %106, %104 ], [ %94, %91 ]
  %99 = phi i64 [ %108, %104 ], [ %74, %91 ]
  %100 = icmp eq i64 %97, %71
  br i1 %100, label %104, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds i32, i32* %69, i64 %97
  %103 = load i32, i32* %102, align 4, !noalias !259
  br label %104

104:                                              ; preds = %101, %96
  %105 = phi i32 [ %103, %101 ], [ 1, %96 ]
  %106 = mul nsw i32 %105, %98
  %107 = add nuw nsw i64 %97, 1
  %108 = add i64 %99, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %96, !llvm.loop !262

110:                                              ; preds = %104, %91
  %111 = phi i32 [ %92, %91 ], [ %106, %104 ]
  %112 = sext i32 %111 to i64
  br label %113

113:                                              ; preds = %64, %110
  %114 = phi i32 [ %66, %64 ], [ %70, %110 ]
  %115 = phi i64 [ 1, %64 ], [ %112, %110 ]
  %116 = sext i32 %114 to i64
  %117 = ptrtoint float* %4 to i64
  %118 = icmp sgt i32 %57, 0
  br i1 %118, label %119, label %138

119:                                              ; preds = %113
  %120 = shl nsw i64 %58, 2
  %121 = add nsw i64 %120, 64
  %122 = tail call noalias i8* @malloc(i64 %121) #13
  %123 = icmp eq i8* %122, null
  br i1 %123, label %131, label %124

124:                                              ; preds = %119
  %125 = ptrtoint i8* %122 to i64
  %126 = add i64 %125, 64
  %127 = and i64 %126, -64
  %128 = inttoptr i64 %127 to i8*
  %129 = inttoptr i64 %127 to i8**
  %130 = getelementptr inbounds i8*, i8** %129, i64 -1
  store i8* %122, i8** %130, align 8
  br label %131

131:                                              ; preds = %124, %119
  %132 = phi i8* [ %128, %124 ], [ null, %119 ]
  %133 = icmp eq i8* %132, null
  br i1 %133, label %134, label %136

134:                                              ; preds = %131
  %135 = tail call i8* @_Znwm(i64 -1) #13
  br label %136

136:                                              ; preds = %134, %131
  %137 = ptrtoint i8* %132 to i64
  br label %138

138:                                              ; preds = %113, %136
  %139 = phi i64 [ 0, %113 ], [ %137, %136 ]
  %140 = bitcast %"class.Eigen::Matrix"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %140) #13
  %141 = getelementptr inbounds %"class.Eigen::Matrix", %"class.Eigen::Matrix"* %7, i64 0, i32 0, i32 0, i32 0
  %142 = getelementptr inbounds %"class.Eigen::Matrix", %"class.Eigen::Matrix"* %7, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 0, i64 16, i1 false) #13
  %143 = icmp eq i64 %115, 0
  br i1 %143, label %162, label %144

144:                                              ; preds = %138
  %145 = icmp sgt i64 %115, 0
  br i1 %145, label %146, label %161

146:                                              ; preds = %144
  %147 = shl nsw i64 %115, 2
  %148 = add nuw nsw i64 %147, 64
  %149 = tail call noalias i8* @malloc(i64 %148) #13
  %150 = icmp eq i8* %149, null
  br i1 %150, label %159, label %151

151:                                              ; preds = %146
  %152 = ptrtoint i8* %149 to i64
  %153 = add i64 %152, 64
  %154 = and i64 %153, -64
  %155 = inttoptr i64 %154 to i8*
  %156 = inttoptr i64 %154 to i8**
  %157 = getelementptr inbounds i8*, i8** %156, i64 -1
  store i8* %149, i8** %157, align 8
  %158 = icmp eq i64 %154, 0
  br i1 %158, label %159, label %165

159:                                              ; preds = %146, %151
  %160 = tail call i8* @_Znwm(i64 -1) #13
  br label %165

161:                                              ; preds = %144
  store float* null, float** %141, align 8
  br label %162

162:                                              ; preds = %138, %161
  store i64 %115, i64* %142, align 8
  %163 = sdiv i64 %115, 4
  %164 = shl nsw i64 %163, 2
  br label %181

165:                                              ; preds = %151, %159
  %166 = phi i8* [ null, %159 ], [ %155, %151 ]
  %167 = bitcast %"class.Eigen::Matrix"* %7 to i8**
  store i8* %166, i8** %167, align 8
  %168 = bitcast i8* %166 to float*
  %169 = ptrtoint i8* %166 to i64
  store i64 %115, i64* %142, align 8
  %170 = lshr i64 %115, 2
  %171 = and i64 %170, 1073741823
  %172 = shl nuw nsw i64 %171, 2
  %173 = icmp sgt i64 %115, 3
  br i1 %173, label %174, label %181

174:                                              ; preds = %165
  %175 = icmp ugt i64 %172, 4
  %176 = select i1 %175, i64 %172, i64 4
  %177 = add nuw nsw i64 %176, 4611686018427387903
  %178 = lshr i64 %177, 2
  %179 = shl i64 %178, 4
  %180 = add i64 %179, 16
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %166, i8 0, i64 %180, i1 false) #13
  br label %181

181:                                              ; preds = %162, %174, %165
  %182 = phi i64 [ %164, %162 ], [ %172, %174 ], [ %172, %165 ]
  %183 = phi i64 [ %163, %162 ], [ %171, %174 ], [ %171, %165 ]
  %184 = phi float* [ null, %162 ], [ %168, %174 ], [ %168, %165 ]
  %185 = phi i64 [ 0, %162 ], [ %169, %174 ], [ %169, %165 ]
  %186 = icmp slt i64 %182, %115
  br i1 %186, label %187, label %193

187:                                              ; preds = %181
  %188 = getelementptr float, float* %184, i64 %182
  %189 = bitcast float* %188 to i8*
  %190 = shl nsw i64 %115, 2
  %191 = shl nsw i64 %183, 4
  %192 = sub nsw i64 %190, %191
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %189, i8 0, i64 %192, i1 false) #13
  br label %193

193:                                              ; preds = %181, %187
  %194 = mul nsw i64 %115, %116
  %195 = and i64 %117, 3
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %203

197:                                              ; preds = %193
  %198 = lshr i64 %117, 2
  %199 = sub nsw i64 0, %198
  %200 = and i64 %199, 3
  %201 = icmp slt i64 %200, %194
  %202 = select i1 %201, i64 %200, i64 %194
  br label %203

203:                                              ; preds = %197, %193
  %204 = phi i64 [ %202, %197 ], [ %194, %193 ]
  %205 = sub nsw i64 %194, %204
  %206 = sdiv i64 %205, 4
  %207 = shl nsw i64 %206, 2
  %208 = add i64 %207, %204
  %209 = icmp sgt i64 %204, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %203
  %211 = shl nuw i64 %204, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 %211, i1 false) #13
  br label %212

212:                                              ; preds = %210, %203
  %213 = icmp sgt i64 %205, 3
  br i1 %213, label %214, label %225

214:                                              ; preds = %212
  %215 = getelementptr float, float* %4, i64 %204
  %216 = bitcast float* %215 to i8*
  %217 = add nsw i64 %204, 4
  %218 = icmp sgt i64 %208, %217
  %219 = select i1 %218, i64 %208, i64 %217
  %220 = xor i64 %204, 4611686018427387903
  %221 = add i64 %219, %220
  %222 = lshr i64 %221, 2
  %223 = shl i64 %222, 4
  %224 = add i64 %223, 16
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %216, i8 0, i64 %224, i1 false) #13
  br label %225

225:                                              ; preds = %214, %212
  %226 = icmp slt i64 %208, %194
  br i1 %226, label %227, label %232

227:                                              ; preds = %225
  %228 = getelementptr float, float* %4, i64 %208
  %229 = bitcast float* %228 to i8*
  %230 = sub i64 %205, %207
  %231 = shl nuw i64 %230, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %229, i8 0, i64 %231, i1 false) #13
  br label %232

232:                                              ; preds = %225, %227
  %233 = icmp sgt i32 %29, 0
  br i1 %233, label %234, label %291

234:                                              ; preds = %232
  %235 = icmp sgt i32 %37, 0
  %236 = icmp sgt i32 %38, 0
  %237 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 1
  %238 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 2, i32 0
  %239 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 5
  %240 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 6
  %241 = sdiv i64 %58, 4
  %242 = shl nsw i64 %241, 2
  %243 = icmp sgt i32 %57, 3
  %244 = inttoptr i64 %139 to float*
  %245 = inttoptr i64 %139 to i8*
  %246 = icmp slt i64 %242, %58
  %247 = sext i32 %47 to i64
  %248 = sext i32 %38 to i64
  %249 = sext i32 %46 to i64
  %250 = sext i32 %37 to i64
  %251 = sext i32 %29 to i64
  %252 = zext i32 %37 to i64
  %253 = zext i32 %38 to i64
  %254 = mul nsw i64 %116, %247
  %255 = getelementptr float, float* %244, i64 %116
  %256 = mul nsw i64 %116, %247
  %257 = sub nsw i64 %58, %242
  %258 = getelementptr float, float* %244, i64 %242
  %259 = getelementptr float, float* %244, i64 %58
  %260 = mul nsw i64 %250, %248
  %261 = mul i64 %260, %58
  %262 = mul nsw i64 %248, %58
  %263 = sub nsw i64 %58, %242
  %264 = add nsw i64 %263, -8
  %265 = lshr i64 %264, 3
  %266 = add nuw nsw i64 %265, 1
  %267 = icmp ult i64 %257, 8
  %268 = and i64 %257, -8
  %269 = add nsw i64 %242, %268
  %270 = and i64 %266, 1
  %271 = icmp eq i64 %265, 0
  %272 = sub nuw nsw i64 %266, %270
  %273 = icmp eq i64 %270, 0
  %274 = icmp eq i64 %257, %268
  br label %275

275:                                              ; preds = %234, %660
  %276 = phi i64 [ 0, %234 ], [ %661, %660 ]
  %277 = mul i64 %261, %276
  %278 = add i64 %242, %277
  %279 = add i64 %277, %58
  %280 = mul i64 %276, %249
  %281 = mul i64 %276, %249
  br i1 %235, label %282, label %660

282:                                              ; preds = %275
  %283 = mul nsw i64 %276, %250
  %284 = mul nsw i64 %276, %249
  br label %651

285:                                              ; preds = %660
  %286 = bitcast %"class.Eigen::Matrix"* %7 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = load i64, i64* %142, align 8
  %289 = sdiv i64 %288, 4
  %290 = shl nsw i64 %289, 2
  br label %291

291:                                              ; preds = %232, %285
  %292 = phi i64 [ %290, %285 ], [ %182, %232 ]
  %293 = phi i64 [ %288, %285 ], [ %115, %232 ]
  %294 = phi i64 [ %287, %285 ], [ %185, %232 ]
  %295 = inttoptr i64 %294 to float*
  %296 = icmp sgt i64 %293, 3
  br i1 %296, label %352, label %297

297:                                              ; preds = %352, %291
  %298 = icmp sgt i64 %293, %292
  br i1 %298, label %299, label %360

299:                                              ; preds = %297
  %300 = sub i64 %293, %292
  %301 = icmp ult i64 %300, 4
  br i1 %301, label %343, label %302

302:                                              ; preds = %299
  %303 = and i64 %300, -4
  %304 = add i64 %292, %303
  %305 = add i64 %303, -4
  %306 = lshr exact i64 %305, 2
  %307 = add nuw nsw i64 %306, 1
  %308 = and i64 %307, 1
  %309 = icmp eq i64 %305, 0
  br i1 %309, label %331, label %310

310:                                              ; preds = %302
  %311 = sub nuw nsw i64 %307, %308
  br label %312

312:                                              ; preds = %312, %310
  %313 = phi i64 [ 0, %310 ], [ %328, %312 ]
  %314 = phi i64 [ %311, %310 ], [ %329, %312 ]
  %315 = add i64 %292, %313
  %316 = getelementptr inbounds float, float* %295, i64 %315
  %317 = bitcast float* %316 to <4 x float>*
  %318 = load <4 x float>, <4 x float>* %317, align 4
  %319 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %318
  %320 = bitcast float* %316 to <4 x float>*
  store <4 x float> %319, <4 x float>* %320, align 4
  %321 = or i64 %313, 4
  %322 = add i64 %292, %321
  %323 = getelementptr inbounds float, float* %295, i64 %322
  %324 = bitcast float* %323 to <4 x float>*
  %325 = load <4 x float>, <4 x float>* %324, align 4
  %326 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %325
  %327 = bitcast float* %323 to <4 x float>*
  store <4 x float> %326, <4 x float>* %327, align 4
  %328 = add i64 %313, 8
  %329 = add i64 %314, -2
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %312, !llvm.loop !263

331:                                              ; preds = %312, %302
  %332 = phi i64 [ 0, %302 ], [ %328, %312 ]
  %333 = icmp eq i64 %308, 0
  br i1 %333, label %341, label %334

334:                                              ; preds = %331
  %335 = add i64 %292, %332
  %336 = getelementptr inbounds float, float* %295, i64 %335
  %337 = bitcast float* %336 to <4 x float>*
  %338 = load <4 x float>, <4 x float>* %337, align 4
  %339 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %338
  %340 = bitcast float* %336 to <4 x float>*
  store <4 x float> %339, <4 x float>* %340, align 4
  br label %341

341:                                              ; preds = %331, %334
  %342 = icmp eq i64 %300, %303
  br i1 %342, label %360, label %343

343:                                              ; preds = %341, %299
  %344 = phi i64 [ %292, %299 ], [ %304, %341 ]
  br label %345

345:                                              ; preds = %343, %345
  %346 = phi i64 [ %350, %345 ], [ %344, %343 ]
  %347 = getelementptr inbounds float, float* %295, i64 %346
  %348 = load float, float* %347, align 4
  %349 = fdiv float 1.000000e+00, %348
  store float %349, float* %347, align 4
  %350 = add nsw i64 %346, 1
  %351 = icmp eq i64 %350, %293
  br i1 %351, label %360, label %345, !llvm.loop !264

352:                                              ; preds = %291, %352
  %353 = phi i64 [ %358, %352 ], [ 0, %291 ]
  %354 = getelementptr inbounds float, float* %295, i64 %353
  %355 = bitcast float* %354 to <4 x float>*
  %356 = load <4 x float>, <4 x float>* %355, align 16
  %357 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %356
  store <4 x float> %357, <4 x float>* %355, align 16
  %358 = add nuw nsw i64 %353, 4
  %359 = icmp slt i64 %358, %292
  br i1 %359, label %352, label %297

360:                                              ; preds = %345, %341, %297
  %361 = load float*, float** %141, align 8
  %362 = icmp sgt i64 %115, 0
  br i1 %362, label %363, label %474

363:                                              ; preds = %360
  %364 = icmp sgt i32 %114, 0
  %365 = add nsw i64 %116, -4
  %366 = lshr i64 %365, 2
  %367 = add nuw nsw i64 %366, 1
  %368 = icmp ult i32 %114, 4
  %369 = and i64 %116, -4
  %370 = and i64 %367, 1
  %371 = icmp eq i64 %366, 0
  %372 = sub nuw nsw i64 %367, %370
  %373 = icmp eq i64 %370, 0
  %374 = icmp eq i64 %369, %116
  %375 = and i64 %116, 1
  %376 = icmp eq i64 %375, 0
  %377 = sub nsw i64 0, %116
  br label %378

378:                                              ; preds = %363, %453
  %379 = phi i64 [ %454, %453 ], [ %115, %363 ]
  %380 = phi i64 [ %455, %453 ], [ 0, %363 ]
  %381 = mul i64 %380, %116
  %382 = getelementptr float, float* %4, i64 %381
  %383 = bitcast float* %382 to i8*
  %384 = add i64 %381, %116
  %385 = getelementptr float, float* %4, i64 %384
  %386 = getelementptr float, float* %361, i64 %380
  %387 = bitcast float* %386 to i8*
  %388 = getelementptr i8, i8* %387, i64 1
  br i1 %364, label %389, label %453

389:                                              ; preds = %378
  %390 = mul nsw i64 %380, %116
  %391 = getelementptr inbounds float, float* %361, i64 %380
  br i1 %368, label %392, label %406

392:                                              ; preds = %452, %406, %389
  %393 = phi i64 [ 0, %406 ], [ 0, %389 ], [ %369, %452 ]
  %394 = xor i64 %393, -1
  br i1 %376, label %403, label %395

395:                                              ; preds = %392
  %396 = add nsw i64 %393, %390
  %397 = getelementptr inbounds float, float* %4, i64 %396
  %398 = load float, float* %391, align 4
  %399 = load float, float* %397, align 4
  %400 = fmul float %398, %399
  %401 = tail call float @llvm.sqrt.f32(float %400) #13
  store float %401, float* %397, align 4
  %402 = or i64 %393, 1
  br label %403

403:                                              ; preds = %395, %392
  %404 = phi i64 [ %402, %395 ], [ %393, %392 ]
  %405 = icmp eq i64 %394, %377
  br i1 %405, label %453, label %457

406:                                              ; preds = %389
  %407 = icmp ugt i8* %388, %383
  %408 = icmp ult float* %391, %385
  %409 = and i1 %407, %408
  br i1 %409, label %392, label %410

410:                                              ; preds = %406
  br i1 %371, label %439, label %411

411:                                              ; preds = %410
  %412 = load float, float* %391, align 4, !alias.scope !265
  %413 = insertelement <4 x float> undef, float %412, i32 0
  %414 = shufflevector <4 x float> %413, <4 x float> undef, <4 x i32> zeroinitializer
  %415 = load float, float* %391, align 4, !alias.scope !265
  %416 = insertelement <4 x float> undef, float %415, i32 0
  %417 = shufflevector <4 x float> %416, <4 x float> undef, <4 x i32> zeroinitializer
  br label %418

418:                                              ; preds = %418, %411
  %419 = phi i64 [ 0, %411 ], [ %436, %418 ]
  %420 = phi i64 [ %372, %411 ], [ %437, %418 ]
  %421 = add nsw i64 %419, %390
  %422 = getelementptr inbounds float, float* %4, i64 %421
  %423 = bitcast float* %422 to <4 x float>*
  %424 = load <4 x float>, <4 x float>* %423, align 4, !alias.scope !268, !noalias !265
  %425 = fmul <4 x float> %414, %424
  %426 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %425)
  %427 = bitcast float* %422 to <4 x float>*
  store <4 x float> %426, <4 x float>* %427, align 4, !alias.scope !268, !noalias !265
  %428 = or i64 %419, 4
  %429 = add nsw i64 %428, %390
  %430 = getelementptr inbounds float, float* %4, i64 %429
  %431 = bitcast float* %430 to <4 x float>*
  %432 = load <4 x float>, <4 x float>* %431, align 4, !alias.scope !268, !noalias !265
  %433 = fmul <4 x float> %417, %432
  %434 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %433)
  %435 = bitcast float* %430 to <4 x float>*
  store <4 x float> %434, <4 x float>* %435, align 4, !alias.scope !268, !noalias !265
  %436 = add i64 %419, 8
  %437 = add i64 %420, -2
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %439, label %418, !llvm.loop !270

439:                                              ; preds = %418, %410
  %440 = phi i64 [ 0, %410 ], [ %436, %418 ]
  br i1 %373, label %452, label %441

441:                                              ; preds = %439
  %442 = add nsw i64 %440, %390
  %443 = getelementptr inbounds float, float* %4, i64 %442
  %444 = load float, float* %391, align 4, !alias.scope !265
  %445 = insertelement <4 x float> undef, float %444, i32 0
  %446 = shufflevector <4 x float> %445, <4 x float> undef, <4 x i32> zeroinitializer
  %447 = bitcast float* %443 to <4 x float>*
  %448 = load <4 x float>, <4 x float>* %447, align 4, !alias.scope !268, !noalias !265
  %449 = fmul <4 x float> %446, %448
  %450 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %449)
  %451 = bitcast float* %443 to <4 x float>*
  store <4 x float> %450, <4 x float>* %451, align 4, !alias.scope !268, !noalias !265
  br label %452

452:                                              ; preds = %439, %441
  br i1 %374, label %453, label %392

453:                                              ; preds = %403, %457, %452, %378
  %454 = phi i64 [ %379, %378 ], [ %115, %452 ], [ %115, %457 ], [ %115, %403 ]
  %455 = add nuw nsw i64 %380, 1
  %456 = icmp slt i64 %455, %454
  br i1 %456, label %378, label %474

457:                                              ; preds = %403, %457
  %458 = phi i64 [ %472, %457 ], [ %404, %403 ]
  %459 = add nsw i64 %458, %390
  %460 = getelementptr inbounds float, float* %4, i64 %459
  %461 = load float, float* %391, align 4
  %462 = load float, float* %460, align 4
  %463 = fmul float %461, %462
  %464 = tail call float @llvm.sqrt.f32(float %463) #13
  store float %464, float* %460, align 4
  %465 = add nuw nsw i64 %458, 1
  %466 = add nsw i64 %465, %390
  %467 = getelementptr inbounds float, float* %4, i64 %466
  %468 = load float, float* %391, align 4
  %469 = load float, float* %467, align 4
  %470 = fmul float %468, %469
  %471 = tail call float @llvm.sqrt.f32(float %470) #13
  store float %471, float* %467, align 4
  %472 = add nuw nsw i64 %458, 2
  %473 = icmp eq i64 %472, %116
  br i1 %473, label %453, label %457, !llvm.loop !271

474:                                              ; preds = %453, %360
  %475 = load i32, i32* %9, align 8
  %476 = icmp sgt i32 %475, 5
  br i1 %476, label %477, label %479

477:                                              ; preds = %474
  %478 = load i32*, i32** %22, align 8
  br label %481

479:                                              ; preds = %474
  %480 = icmp sgt i32 %475, 0
  br i1 %480, label %481, label %584

481:                                              ; preds = %479, %477
  %482 = phi i32* [ %478, %477 ], [ %25, %479 ]
  %483 = zext i32 %475 to i64
  %484 = icmp ult i32 %475, 8
  br i1 %484, label %570, label %485

485:                                              ; preds = %481
  %486 = and i64 %483, 4294967288
  %487 = add nsw i64 %486, -8
  %488 = lshr exact i64 %487, 3
  %489 = add nuw nsw i64 %488, 1
  %490 = and i64 %489, 3
  %491 = icmp ult i64 %487, 24
  br i1 %491, label %537, label %492

492:                                              ; preds = %485
  %493 = sub nsw i64 %489, %490
  br label %494

494:                                              ; preds = %494, %492
  %495 = phi i64 [ 0, %492 ], [ %534, %494 ]
  %496 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %492 ], [ %532, %494 ]
  %497 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %492 ], [ %533, %494 ]
  %498 = phi i64 [ %493, %492 ], [ %535, %494 ]
  %499 = getelementptr inbounds i32, i32* %482, i64 %495
  %500 = bitcast i32* %499 to <4 x i32>*
  %501 = load <4 x i32>, <4 x i32>* %500, align 4
  %502 = getelementptr inbounds i32, i32* %499, i64 4
  %503 = bitcast i32* %502 to <4 x i32>*
  %504 = load <4 x i32>, <4 x i32>* %503, align 4
  %505 = mul nsw <4 x i32> %501, %496
  %506 = mul nsw <4 x i32> %504, %497
  %507 = or i64 %495, 8
  %508 = getelementptr inbounds i32, i32* %482, i64 %507
  %509 = bitcast i32* %508 to <4 x i32>*
  %510 = load <4 x i32>, <4 x i32>* %509, align 4
  %511 = getelementptr inbounds i32, i32* %508, i64 4
  %512 = bitcast i32* %511 to <4 x i32>*
  %513 = load <4 x i32>, <4 x i32>* %512, align 4
  %514 = mul nsw <4 x i32> %510, %505
  %515 = mul nsw <4 x i32> %513, %506
  %516 = or i64 %495, 16
  %517 = getelementptr inbounds i32, i32* %482, i64 %516
  %518 = bitcast i32* %517 to <4 x i32>*
  %519 = load <4 x i32>, <4 x i32>* %518, align 4
  %520 = getelementptr inbounds i32, i32* %517, i64 4
  %521 = bitcast i32* %520 to <4 x i32>*
  %522 = load <4 x i32>, <4 x i32>* %521, align 4
  %523 = mul nsw <4 x i32> %519, %514
  %524 = mul nsw <4 x i32> %522, %515
  %525 = or i64 %495, 24
  %526 = getelementptr inbounds i32, i32* %482, i64 %525
  %527 = bitcast i32* %526 to <4 x i32>*
  %528 = load <4 x i32>, <4 x i32>* %527, align 4
  %529 = getelementptr inbounds i32, i32* %526, i64 4
  %530 = bitcast i32* %529 to <4 x i32>*
  %531 = load <4 x i32>, <4 x i32>* %530, align 4
  %532 = mul nsw <4 x i32> %528, %523
  %533 = mul nsw <4 x i32> %531, %524
  %534 = add i64 %495, 32
  %535 = add i64 %498, -4
  %536 = icmp eq i64 %535, 0
  br i1 %536, label %537, label %494, !llvm.loop !272

537:                                              ; preds = %494, %485
  %538 = phi <4 x i32> [ undef, %485 ], [ %532, %494 ]
  %539 = phi <4 x i32> [ undef, %485 ], [ %533, %494 ]
  %540 = phi i64 [ 0, %485 ], [ %534, %494 ]
  %541 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %485 ], [ %532, %494 ]
  %542 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %485 ], [ %533, %494 ]
  %543 = icmp eq i64 %490, 0
  br i1 %543, label %560, label %544

544:                                              ; preds = %537, %544
  %545 = phi i64 [ %557, %544 ], [ %540, %537 ]
  %546 = phi <4 x i32> [ %555, %544 ], [ %541, %537 ]
  %547 = phi <4 x i32> [ %556, %544 ], [ %542, %537 ]
  %548 = phi i64 [ %558, %544 ], [ %490, %537 ]
  %549 = getelementptr inbounds i32, i32* %482, i64 %545
  %550 = bitcast i32* %549 to <4 x i32>*
  %551 = load <4 x i32>, <4 x i32>* %550, align 4
  %552 = getelementptr inbounds i32, i32* %549, i64 4
  %553 = bitcast i32* %552 to <4 x i32>*
  %554 = load <4 x i32>, <4 x i32>* %553, align 4
  %555 = mul nsw <4 x i32> %551, %546
  %556 = mul nsw <4 x i32> %554, %547
  %557 = add i64 %545, 8
  %558 = add i64 %548, -1
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %560, label %544, !llvm.loop !273

560:                                              ; preds = %544, %537
  %561 = phi <4 x i32> [ %538, %537 ], [ %555, %544 ]
  %562 = phi <4 x i32> [ %539, %537 ], [ %556, %544 ]
  %563 = mul <4 x i32> %562, %561
  %564 = shufflevector <4 x i32> %563, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %565 = mul <4 x i32> %563, %564
  %566 = shufflevector <4 x i32> %565, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %567 = mul <4 x i32> %565, %566
  %568 = extractelement <4 x i32> %567, i32 0
  %569 = icmp eq i64 %486, %483
  br i1 %569, label %581, label %570

570:                                              ; preds = %560, %481
  %571 = phi i64 [ 0, %481 ], [ %486, %560 ]
  %572 = phi i32 [ 1, %481 ], [ %568, %560 ]
  br label %573

573:                                              ; preds = %570, %573
  %574 = phi i64 [ %579, %573 ], [ %571, %570 ]
  %575 = phi i32 [ %578, %573 ], [ %572, %570 ]
  %576 = getelementptr inbounds i32, i32* %482, i64 %574
  %577 = load i32, i32* %576, align 4
  %578 = mul nsw i32 %577, %575
  %579 = add nuw nsw i64 %574, 1
  %580 = icmp eq i64 %579, %483
  br i1 %580, label %581, label %573, !llvm.loop !274

581:                                              ; preds = %573, %560
  %582 = phi i32 [ %568, %560 ], [ %578, %573 ]
  %583 = icmp sgt i32 %582, 0
  br i1 %583, label %584, label %1168

584:                                              ; preds = %479, %581
  %585 = phi i32 [ %582, %581 ], [ 1, %479 ]
  %586 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 9
  %587 = getelementptr inbounds %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 10
  %588 = zext i32 %585 to i64
  %589 = icmp ult i32 %585, 8
  br i1 %589, label %590, label %609

590:                                              ; preds = %649, %609, %584
  %591 = phi i64 [ 0, %609 ], [ 0, %584 ], [ %618, %649 ]
  %592 = xor i64 %591, -1
  %593 = and i64 %588, 1
  %594 = icmp eq i64 %593, 0
  br i1 %594, label %605, label %595

595:                                              ; preds = %590
  %596 = getelementptr inbounds float, float* %4, i64 %591
  %597 = load float, float* %596, align 4
  %598 = load float, float* %586, align 4
  %599 = load float, float* %587, align 4
  %600 = fcmp olt float %597, %598
  %601 = select i1 %600, float %598, float %597
  %602 = fcmp ogt float %601, %599
  %603 = select i1 %602, float %599, float %601
  store float %603, float* %596, align 4
  %604 = or i64 %591, 1
  br label %605

605:                                              ; preds = %590, %595
  %606 = phi i64 [ %591, %590 ], [ %604, %595 ]
  %607 = sub nsw i64 0, %588
  %608 = icmp eq i64 %592, %607
  br i1 %608, label %1168, label %1182

609:                                              ; preds = %584
  %610 = getelementptr float, float* %4, i64 %588
  %611 = getelementptr %"struct.tflite::PoolParams", %"struct.tflite::PoolParams"* %0, i64 0, i32 10
  %612 = bitcast float* %611 to i8*
  %613 = getelementptr i8, i8* %612, i64 1
  %614 = icmp ugt i8* %613, %6
  %615 = icmp ult float* %587, %610
  %616 = and i1 %614, %615
  br i1 %616, label %590, label %617

617:                                              ; preds = %609
  %618 = and i64 %588, 4294967288
  %619 = load float, float* %586, align 4, !alias.scope !275
  %620 = insertelement <4 x float> undef, float %619, i32 0
  %621 = shufflevector <4 x float> %620, <4 x float> undef, <4 x i32> zeroinitializer
  %622 = insertelement <4 x float> undef, float %619, i32 0
  %623 = shufflevector <4 x float> %622, <4 x float> undef, <4 x i32> zeroinitializer
  %624 = load float, float* %587, align 4, !alias.scope !275
  %625 = insertelement <4 x float> undef, float %624, i32 0
  %626 = shufflevector <4 x float> %625, <4 x float> undef, <4 x i32> zeroinitializer
  %627 = insertelement <4 x float> undef, float %624, i32 0
  %628 = shufflevector <4 x float> %627, <4 x float> undef, <4 x i32> zeroinitializer
  br label %629

629:                                              ; preds = %629, %617
  %630 = phi i64 [ 0, %617 ], [ %647, %629 ]
  %631 = getelementptr inbounds float, float* %4, i64 %630
  %632 = bitcast float* %631 to <4 x float>*
  %633 = load <4 x float>, <4 x float>* %632, align 4, !alias.scope !278, !noalias !275
  %634 = getelementptr inbounds float, float* %631, i64 4
  %635 = bitcast float* %634 to <4 x float>*
  %636 = load <4 x float>, <4 x float>* %635, align 4, !alias.scope !278, !noalias !275
  %637 = fcmp olt <4 x float> %633, %621
  %638 = fcmp olt <4 x float> %636, %623
  %639 = select <4 x i1> %637, <4 x float> %621, <4 x float> %633
  %640 = select <4 x i1> %638, <4 x float> %623, <4 x float> %636
  %641 = fcmp ogt <4 x float> %639, %626
  %642 = fcmp ogt <4 x float> %640, %628
  %643 = select <4 x i1> %641, <4 x float> %626, <4 x float> %639
  %644 = select <4 x i1> %642, <4 x float> %628, <4 x float> %640
  %645 = bitcast float* %631 to <4 x float>*
  store <4 x float> %643, <4 x float>* %645, align 4, !alias.scope !278, !noalias !275
  %646 = bitcast float* %634 to <4 x float>*
  store <4 x float> %644, <4 x float>* %646, align 4, !alias.scope !278, !noalias !275
  %647 = add i64 %630, 8
  %648 = icmp eq i64 %647, %618
  br i1 %648, label %649, label %629, !llvm.loop !280

649:                                              ; preds = %629
  %650 = icmp eq i64 %618, %588
  br i1 %650, label %1168, label %590

651:                                              ; preds = %663, %282
  %652 = phi i64 [ 0, %282 ], [ %664, %663 ]
  %653 = mul i64 %262, %652
  %654 = add i64 %278, %653
  %655 = add i64 %279, %653
  br i1 %236, label %656, label %663

656:                                              ; preds = %651
  %657 = add nsw i64 %652, %283
  %658 = mul nsw i64 %657, %248
  %659 = trunc i64 %652 to i32
  br label %666

660:                                              ; preds = %663, %275
  %661 = add nuw nsw i64 %276, 1
  %662 = icmp slt i64 %661, %251
  br i1 %662, label %275, label %285

663:                                              ; preds = %846, %651
  %664 = add nuw nsw i64 %652, 1
  %665 = icmp eq i64 %664, %252
  br i1 %665, label %660, label %651

666:                                              ; preds = %846, %656
  %667 = phi i64 [ 0, %656 ], [ %847, %846 ]
  %668 = mul i64 %667, %58
  %669 = add i64 %654, %668
  %670 = getelementptr float, float* %2, i64 %669
  %671 = add i64 %655, %668
  %672 = getelementptr float, float* %2, i64 %671
  %673 = load i16, i16* %237, align 2
  %674 = sext i16 %673 to i32
  %675 = add nsw i32 %659, %674
  %676 = load i16, i16* %238, align 2
  %677 = sext i16 %676 to i32
  %678 = trunc i64 %667 to i32
  %679 = add nsw i32 %678, %677
  %680 = load i32, i32* %239, align 4
  %681 = icmp slt i32 %675, %680
  br i1 %681, label %686, label %682

682:                                              ; preds = %666
  %683 = sub nsw i32 %675, %680
  %684 = sdiv i32 %683, %49
  %685 = add nsw i32 %684, 1
  br label %686

686:                                              ; preds = %666, %682
  %687 = phi i32 [ %685, %682 ], [ 0, %666 ]
  %688 = sdiv i32 %675, %49
  %689 = add nsw i32 %688, 1
  %690 = icmp slt i32 %46, %689
  %691 = select i1 %690, i32 %46, i32 %689
  %692 = load i32, i32* %240, align 4
  %693 = icmp slt i32 %679, %692
  br i1 %693, label %698, label %694

694:                                              ; preds = %686
  %695 = sub nsw i32 %679, %692
  %696 = sdiv i32 %695, %51
  %697 = add nsw i32 %696, 1
  br label %698

698:                                              ; preds = %686, %694
  %699 = phi i32 [ %697, %694 ], [ 0, %686 ]
  %700 = sdiv i32 %679, %51
  %701 = add nsw i32 %700, 1
  %702 = icmp slt i32 %47, %701
  %703 = select i1 %702, i32 %47, i32 %701
  %704 = add nsw i64 %667, %658
  %705 = mul nsw i64 %704, %58
  %706 = getelementptr inbounds float, float* %2, i64 %705
  br i1 %243, label %807, label %707

707:                                              ; preds = %807, %698
  br i1 %246, label %708, label %817

708:                                              ; preds = %707
  br i1 %267, label %764, label %709

709:                                              ; preds = %708
  %710 = icmp ult float* %258, %672
  %711 = icmp ult float* %670, %259
  %712 = and i1 %710, %711
  br i1 %712, label %764, label %713

713:                                              ; preds = %709
  br i1 %271, label %747, label %714

714:                                              ; preds = %713, %714
  %715 = phi i64 [ %744, %714 ], [ 0, %713 ]
  %716 = phi i64 [ %745, %714 ], [ %272, %713 ]
  %717 = add i64 %242, %715
  %718 = getelementptr inbounds float, float* %244, i64 %717
  %719 = getelementptr inbounds float, float* %706, i64 %717
  %720 = bitcast float* %719 to <4 x float>*
  %721 = load <4 x float>, <4 x float>* %720, align 4, !alias.scope !281
  %722 = getelementptr inbounds float, float* %719, i64 4
  %723 = bitcast float* %722 to <4 x float>*
  %724 = load <4 x float>, <4 x float>* %723, align 4, !alias.scope !281
  %725 = fmul <4 x float> %721, %721
  %726 = fmul <4 x float> %724, %724
  %727 = bitcast float* %718 to <4 x float>*
  store <4 x float> %725, <4 x float>* %727, align 4, !alias.scope !284, !noalias !281
  %728 = getelementptr inbounds float, float* %718, i64 4
  %729 = bitcast float* %728 to <4 x float>*
  store <4 x float> %726, <4 x float>* %729, align 4, !alias.scope !284, !noalias !281
  %730 = or i64 %715, 8
  %731 = add i64 %242, %730
  %732 = getelementptr inbounds float, float* %244, i64 %731
  %733 = getelementptr inbounds float, float* %706, i64 %731
  %734 = bitcast float* %733 to <4 x float>*
  %735 = load <4 x float>, <4 x float>* %734, align 4, !alias.scope !281
  %736 = getelementptr inbounds float, float* %733, i64 4
  %737 = bitcast float* %736 to <4 x float>*
  %738 = load <4 x float>, <4 x float>* %737, align 4, !alias.scope !281
  %739 = fmul <4 x float> %735, %735
  %740 = fmul <4 x float> %738, %738
  %741 = bitcast float* %732 to <4 x float>*
  store <4 x float> %739, <4 x float>* %741, align 4, !alias.scope !284, !noalias !281
  %742 = getelementptr inbounds float, float* %732, i64 4
  %743 = bitcast float* %742 to <4 x float>*
  store <4 x float> %740, <4 x float>* %743, align 4, !alias.scope !284, !noalias !281
  %744 = add i64 %715, 16
  %745 = add i64 %716, -2
  %746 = icmp eq i64 %745, 0
  br i1 %746, label %747, label %714, !llvm.loop !286

747:                                              ; preds = %714, %713
  %748 = phi i64 [ 0, %713 ], [ %744, %714 ]
  br i1 %273, label %763, label %749

749:                                              ; preds = %747
  %750 = add i64 %242, %748
  %751 = getelementptr inbounds float, float* %244, i64 %750
  %752 = getelementptr inbounds float, float* %706, i64 %750
  %753 = bitcast float* %752 to <4 x float>*
  %754 = load <4 x float>, <4 x float>* %753, align 4, !alias.scope !281
  %755 = getelementptr inbounds float, float* %752, i64 4
  %756 = bitcast float* %755 to <4 x float>*
  %757 = load <4 x float>, <4 x float>* %756, align 4, !alias.scope !281
  %758 = fmul <4 x float> %754, %754
  %759 = fmul <4 x float> %757, %757
  %760 = bitcast float* %751 to <4 x float>*
  store <4 x float> %758, <4 x float>* %760, align 4, !alias.scope !284, !noalias !281
  %761 = getelementptr inbounds float, float* %751, i64 4
  %762 = bitcast float* %761 to <4 x float>*
  store <4 x float> %759, <4 x float>* %762, align 4, !alias.scope !284, !noalias !281
  br label %763

763:                                              ; preds = %747, %749
  br i1 %274, label %817, label %764

764:                                              ; preds = %763, %709, %708
  %765 = phi i64 [ %242, %709 ], [ %242, %708 ], [ %269, %763 ]
  %766 = sub i64 %58, %765
  %767 = xor i64 %765, -1
  %768 = add i64 %767, %58
  %769 = and i64 %766, 3
  %770 = icmp eq i64 %769, 0
  br i1 %770, label %781, label %771

771:                                              ; preds = %764, %771
  %772 = phi i64 [ %778, %771 ], [ %765, %764 ]
  %773 = phi i64 [ %779, %771 ], [ %769, %764 ]
  %774 = getelementptr inbounds float, float* %244, i64 %772
  %775 = getelementptr inbounds float, float* %706, i64 %772
  %776 = load float, float* %775, align 4
  %777 = fmul float %776, %776
  store float %777, float* %774, align 4
  %778 = add nsw i64 %772, 1
  %779 = add i64 %773, -1
  %780 = icmp eq i64 %779, 0
  br i1 %780, label %781, label %771, !llvm.loop !287

781:                                              ; preds = %771, %764
  %782 = phi i64 [ %765, %764 ], [ %778, %771 ]
  %783 = icmp ult i64 %768, 3
  br i1 %783, label %817, label %784

784:                                              ; preds = %781, %784
  %785 = phi i64 [ %805, %784 ], [ %782, %781 ]
  %786 = getelementptr inbounds float, float* %244, i64 %785
  %787 = getelementptr inbounds float, float* %706, i64 %785
  %788 = load float, float* %787, align 4
  %789 = fmul float %788, %788
  store float %789, float* %786, align 4
  %790 = add nsw i64 %785, 1
  %791 = getelementptr inbounds float, float* %244, i64 %790
  %792 = getelementptr inbounds float, float* %706, i64 %790
  %793 = load float, float* %792, align 4
  %794 = fmul float %793, %793
  store float %794, float* %791, align 4
  %795 = add nsw i64 %785, 2
  %796 = getelementptr inbounds float, float* %244, i64 %795
  %797 = getelementptr inbounds float, float* %706, i64 %795
  %798 = load float, float* %797, align 4
  %799 = fmul float %798, %798
  store float %799, float* %796, align 4
  %800 = add nsw i64 %785, 3
  %801 = getelementptr inbounds float, float* %244, i64 %800
  %802 = getelementptr inbounds float, float* %706, i64 %800
  %803 = load float, float* %802, align 4
  %804 = fmul float %803, %803
  store float %804, float* %801, align 4
  %805 = add nsw i64 %785, 4
  %806 = icmp eq i64 %805, %58
  br i1 %806, label %817, label %784, !llvm.loop !288

807:                                              ; preds = %698, %807
  %808 = phi i64 [ %815, %807 ], [ 0, %698 ]
  %809 = getelementptr inbounds float, float* %244, i64 %808
  %810 = getelementptr inbounds float, float* %706, i64 %808
  %811 = bitcast float* %810 to <4 x float>*
  %812 = load <4 x float>, <4 x float>* %811, align 1
  %813 = fmul <4 x float> %812, %812
  %814 = bitcast float* %809 to <4 x float>*
  store <4 x float> %813, <4 x float>* %814, align 16
  %815 = add nuw nsw i64 %808, 4
  %816 = icmp slt i64 %815, %242
  br i1 %816, label %807, label %707

817:                                              ; preds = %781, %784, %763, %707
  %818 = icmp slt i32 %687, %691
  br i1 %818, label %819, label %846

819:                                              ; preds = %817
  %820 = icmp slt i32 %699, %703
  %821 = sext i32 %699 to i64
  %822 = sext i32 %703 to i64
  %823 = sext i32 %687 to i64
  %824 = sext i32 %691 to i64
  %825 = add i64 %281, %823
  %826 = mul i64 %825, %247
  %827 = add i64 %826, %821
  %828 = mul i64 %827, %116
  %829 = shl i64 %827, 2
  %830 = add i64 %829, 4
  %831 = mul i64 %830, %116
  %832 = add i64 %280, %823
  %833 = mul i64 %832, %247
  %834 = add i64 %833, %821
  %835 = mul i64 %834, %116
  br label %836

836:                                              ; preds = %819, %849
  %837 = phi i64 [ 0, %819 ], [ %852, %849 ]
  %838 = phi i64 [ %823, %819 ], [ %850, %849 ]
  %839 = mul i64 %256, %837
  %840 = add i64 %835, %839
  %841 = mul i64 %254, %837
  %842 = add i64 %828, %841
  br i1 %820, label %843, label %849

843:                                              ; preds = %836
  %844 = add nsw i64 %838, %284
  %845 = mul nsw i64 %844, %247
  br label %853

846:                                              ; preds = %849, %817
  %847 = add nuw nsw i64 %667, 1
  %848 = icmp eq i64 %847, %253
  br i1 %848, label %663, label %666

849:                                              ; preds = %1160, %836
  %850 = add nsw i64 %838, 1
  %851 = icmp slt i64 %850, %824
  %852 = add i64 %837, 1
  br i1 %851, label %836, label %846

853:                                              ; preds = %843, %1160
  %854 = phi i64 [ 0, %843 ], [ %1167, %1160 ]
  %855 = phi i64 [ %821, %843 ], [ %1165, %1160 ]
  %856 = mul i64 %854, %116
  %857 = add i64 %840, %856
  %858 = getelementptr float, float* %4, i64 %857
  %859 = mul i64 %854, %116
  %860 = add i64 %842, %859
  %861 = getelementptr float, float* %4, i64 %860
  %862 = add i64 %841, %859
  %863 = getelementptr float, float* %4, i64 %862
  %864 = bitcast float* %863 to i8*
  %865 = getelementptr i8, i8* %864, i64 %831
  %866 = add nsw i64 %855, %845
  %867 = mul nsw i64 %866, %116
  %868 = getelementptr inbounds float, float* %4, i64 %867
  %869 = ptrtoint float* %868 to i64
  %870 = and i64 %869, 3
  %871 = icmp eq i64 %870, 0
  br i1 %871, label %872, label %878

872:                                              ; preds = %853
  %873 = lshr i64 %869, 2
  %874 = sub nsw i64 0, %873
  %875 = and i64 %874, 3
  %876 = icmp slt i64 %875, %116
  %877 = select i1 %876, i64 %875, i64 %116
  br label %878

878:                                              ; preds = %872, %853
  %879 = phi i64 [ %877, %872 ], [ %116, %853 ]
  %880 = sub nsw i64 %116, %879
  %881 = sdiv i64 %880, 4
  %882 = shl nsw i64 %881, 2
  %883 = add nsw i64 %882, %879
  %884 = icmp sgt i64 %879, 0
  br i1 %884, label %885, label %1011

885:                                              ; preds = %878
  %886 = icmp ult i64 %879, 8
  br i1 %886, label %964, label %887

887:                                              ; preds = %885
  %888 = getelementptr float, float* %858, i64 %879
  %889 = bitcast float* %888 to i8*
  %890 = getelementptr float, float* %244, i64 %879
  %891 = icmp ult float* %858, %890
  %892 = icmp ult i8* %245, %889
  %893 = and i1 %891, %892
  br i1 %893, label %964, label %894

894:                                              ; preds = %887
  %895 = and i64 %879, -8
  %896 = add nsw i64 %895, -8
  %897 = lshr exact i64 %896, 3
  %898 = add nuw nsw i64 %897, 1
  %899 = and i64 %898, 1
  %900 = icmp eq i64 %896, 0
  br i1 %900, label %942, label %901

901:                                              ; preds = %894
  %902 = sub nuw nsw i64 %898, %899
  br label %903

903:                                              ; preds = %903, %901
  %904 = phi i64 [ 0, %901 ], [ %939, %903 ]
  %905 = phi i64 [ %902, %901 ], [ %940, %903 ]
  %906 = getelementptr inbounds float, float* %868, i64 %904
  %907 = getelementptr inbounds float, float* %244, i64 %904
  %908 = bitcast float* %907 to <4 x float>*
  %909 = load <4 x float>, <4 x float>* %908, align 4, !alias.scope !289
  %910 = getelementptr inbounds float, float* %907, i64 4
  %911 = bitcast float* %910 to <4 x float>*
  %912 = load <4 x float>, <4 x float>* %911, align 4, !alias.scope !289
  %913 = bitcast float* %906 to <4 x float>*
  %914 = load <4 x float>, <4 x float>* %913, align 4, !alias.scope !292, !noalias !289
  %915 = getelementptr inbounds float, float* %906, i64 4
  %916 = bitcast float* %915 to <4 x float>*
  %917 = load <4 x float>, <4 x float>* %916, align 4, !alias.scope !292, !noalias !289
  %918 = fadd <4 x float> %909, %914
  %919 = fadd <4 x float> %912, %917
  %920 = bitcast float* %906 to <4 x float>*
  store <4 x float> %918, <4 x float>* %920, align 4, !alias.scope !292, !noalias !289
  %921 = bitcast float* %915 to <4 x float>*
  store <4 x float> %919, <4 x float>* %921, align 4, !alias.scope !292, !noalias !289
  %922 = or i64 %904, 8
  %923 = getelementptr inbounds float, float* %868, i64 %922
  %924 = getelementptr inbounds float, float* %244, i64 %922
  %925 = bitcast float* %924 to <4 x float>*
  %926 = load <4 x float>, <4 x float>* %925, align 4, !alias.scope !289
  %927 = getelementptr inbounds float, float* %924, i64 4
  %928 = bitcast float* %927 to <4 x float>*
  %929 = load <4 x float>, <4 x float>* %928, align 4, !alias.scope !289
  %930 = bitcast float* %923 to <4 x float>*
  %931 = load <4 x float>, <4 x float>* %930, align 4, !alias.scope !292, !noalias !289
  %932 = getelementptr inbounds float, float* %923, i64 4
  %933 = bitcast float* %932 to <4 x float>*
  %934 = load <4 x float>, <4 x float>* %933, align 4, !alias.scope !292, !noalias !289
  %935 = fadd <4 x float> %926, %931
  %936 = fadd <4 x float> %929, %934
  %937 = bitcast float* %923 to <4 x float>*
  store <4 x float> %935, <4 x float>* %937, align 4, !alias.scope !292, !noalias !289
  %938 = bitcast float* %932 to <4 x float>*
  store <4 x float> %936, <4 x float>* %938, align 4, !alias.scope !292, !noalias !289
  %939 = add i64 %904, 16
  %940 = add i64 %905, -2
  %941 = icmp eq i64 %940, 0
  br i1 %941, label %942, label %903, !llvm.loop !294

942:                                              ; preds = %903, %894
  %943 = phi i64 [ 0, %894 ], [ %939, %903 ]
  %944 = icmp eq i64 %899, 0
  br i1 %944, label %962, label %945

945:                                              ; preds = %942
  %946 = getelementptr inbounds float, float* %868, i64 %943
  %947 = getelementptr inbounds float, float* %244, i64 %943
  %948 = bitcast float* %947 to <4 x float>*
  %949 = load <4 x float>, <4 x float>* %948, align 4, !alias.scope !289
  %950 = getelementptr inbounds float, float* %947, i64 4
  %951 = bitcast float* %950 to <4 x float>*
  %952 = load <4 x float>, <4 x float>* %951, align 4, !alias.scope !289
  %953 = bitcast float* %946 to <4 x float>*
  %954 = load <4 x float>, <4 x float>* %953, align 4, !alias.scope !292, !noalias !289
  %955 = getelementptr inbounds float, float* %946, i64 4
  %956 = bitcast float* %955 to <4 x float>*
  %957 = load <4 x float>, <4 x float>* %956, align 4, !alias.scope !292, !noalias !289
  %958 = fadd <4 x float> %949, %954
  %959 = fadd <4 x float> %952, %957
  %960 = bitcast float* %946 to <4 x float>*
  store <4 x float> %958, <4 x float>* %960, align 4, !alias.scope !292, !noalias !289
  %961 = bitcast float* %955 to <4 x float>*
  store <4 x float> %959, <4 x float>* %961, align 4, !alias.scope !292, !noalias !289
  br label %962

962:                                              ; preds = %942, %945
  %963 = icmp eq i64 %879, %895
  br i1 %963, label %1011, label %964

964:                                              ; preds = %962, %887, %885
  %965 = phi i64 [ 0, %887 ], [ 0, %885 ], [ %895, %962 ]
  %966 = xor i64 %965, -1
  %967 = add nsw i64 %879, %966
  %968 = and i64 %879, 3
  %969 = icmp eq i64 %968, 0
  br i1 %969, label %981, label %970

970:                                              ; preds = %964, %970
  %971 = phi i64 [ %978, %970 ], [ %965, %964 ]
  %972 = phi i64 [ %979, %970 ], [ %968, %964 ]
  %973 = getelementptr inbounds float, float* %868, i64 %971
  %974 = getelementptr inbounds float, float* %244, i64 %971
  %975 = load float, float* %974, align 4
  %976 = load float, float* %973, align 4
  %977 = fadd float %975, %976
  store float %977, float* %973, align 4
  %978 = add nuw nsw i64 %971, 1
  %979 = add i64 %972, -1
  %980 = icmp eq i64 %979, 0
  br i1 %980, label %981, label %970, !llvm.loop !295

981:                                              ; preds = %970, %964
  %982 = phi i64 [ %965, %964 ], [ %978, %970 ]
  %983 = icmp ult i64 %967, 3
  br i1 %983, label %1011, label %984

984:                                              ; preds = %981, %984
  %985 = phi i64 [ %1009, %984 ], [ %982, %981 ]
  %986 = getelementptr inbounds float, float* %868, i64 %985
  %987 = getelementptr inbounds float, float* %244, i64 %985
  %988 = load float, float* %987, align 4
  %989 = load float, float* %986, align 4
  %990 = fadd float %988, %989
  store float %990, float* %986, align 4
  %991 = add nuw nsw i64 %985, 1
  %992 = getelementptr inbounds float, float* %868, i64 %991
  %993 = getelementptr inbounds float, float* %244, i64 %991
  %994 = load float, float* %993, align 4
  %995 = load float, float* %992, align 4
  %996 = fadd float %994, %995
  store float %996, float* %992, align 4
  %997 = add nuw nsw i64 %985, 2
  %998 = getelementptr inbounds float, float* %868, i64 %997
  %999 = getelementptr inbounds float, float* %244, i64 %997
  %1000 = load float, float* %999, align 4
  %1001 = load float, float* %998, align 4
  %1002 = fadd float %1000, %1001
  store float %1002, float* %998, align 4
  %1003 = add nuw nsw i64 %985, 3
  %1004 = getelementptr inbounds float, float* %868, i64 %1003
  %1005 = getelementptr inbounds float, float* %244, i64 %1003
  %1006 = load float, float* %1005, align 4
  %1007 = load float, float* %1004, align 4
  %1008 = fadd float %1006, %1007
  store float %1008, float* %1004, align 4
  %1009 = add nuw nsw i64 %985, 4
  %1010 = icmp eq i64 %1009, %879
  br i1 %1010, label %1011, label %984, !llvm.loop !296

1011:                                             ; preds = %981, %984, %962, %878
  %1012 = icmp sgt i64 %880, 3
  br i1 %1012, label %1149, label %1013

1013:                                             ; preds = %1149, %1011
  %1014 = icmp slt i64 %883, %116
  br i1 %1014, label %1015, label %1160

1015:                                             ; preds = %1013
  %1016 = sub nsw i64 %116, %879
  %1017 = sub nsw i64 %1016, %882
  %1018 = icmp ult i64 %1017, 8
  br i1 %1018, label %1101, label %1019

1019:                                             ; preds = %1015
  %1020 = add nsw i64 %879, %882
  %1021 = getelementptr float, float* %861, i64 %1020
  %1022 = getelementptr float, float* %244, i64 %1020
  %1023 = bitcast float* %1022 to i8*
  %1024 = icmp ult float* %1021, %255
  %1025 = icmp ugt i8* %865, %1023
  %1026 = and i1 %1024, %1025
  br i1 %1026, label %1101, label %1027

1027:                                             ; preds = %1019
  %1028 = and i64 %1017, -8
  %1029 = add i64 %883, %1028
  %1030 = add i64 %1028, -8
  %1031 = lshr exact i64 %1030, 3
  %1032 = add nuw nsw i64 %1031, 1
  %1033 = and i64 %1032, 1
  %1034 = icmp eq i64 %1030, 0
  br i1 %1034, label %1078, label %1035

1035:                                             ; preds = %1027
  %1036 = sub nuw nsw i64 %1032, %1033
  br label %1037

1037:                                             ; preds = %1037, %1035
  %1038 = phi i64 [ 0, %1035 ], [ %1075, %1037 ]
  %1039 = phi i64 [ %1036, %1035 ], [ %1076, %1037 ]
  %1040 = add i64 %883, %1038
  %1041 = getelementptr inbounds float, float* %868, i64 %1040
  %1042 = getelementptr inbounds float, float* %244, i64 %1040
  %1043 = bitcast float* %1042 to <4 x float>*
  %1044 = load <4 x float>, <4 x float>* %1043, align 4, !alias.scope !297
  %1045 = getelementptr inbounds float, float* %1042, i64 4
  %1046 = bitcast float* %1045 to <4 x float>*
  %1047 = load <4 x float>, <4 x float>* %1046, align 4, !alias.scope !297
  %1048 = bitcast float* %1041 to <4 x float>*
  %1049 = load <4 x float>, <4 x float>* %1048, align 4, !alias.scope !300, !noalias !297
  %1050 = getelementptr inbounds float, float* %1041, i64 4
  %1051 = bitcast float* %1050 to <4 x float>*
  %1052 = load <4 x float>, <4 x float>* %1051, align 4, !alias.scope !300, !noalias !297
  %1053 = fadd <4 x float> %1044, %1049
  %1054 = fadd <4 x float> %1047, %1052
  %1055 = bitcast float* %1041 to <4 x float>*
  store <4 x float> %1053, <4 x float>* %1055, align 4, !alias.scope !300, !noalias !297
  %1056 = bitcast float* %1050 to <4 x float>*
  store <4 x float> %1054, <4 x float>* %1056, align 4, !alias.scope !300, !noalias !297
  %1057 = or i64 %1038, 8
  %1058 = add i64 %883, %1057
  %1059 = getelementptr inbounds float, float* %868, i64 %1058
  %1060 = getelementptr inbounds float, float* %244, i64 %1058
  %1061 = bitcast float* %1060 to <4 x float>*
  %1062 = load <4 x float>, <4 x float>* %1061, align 4, !alias.scope !297
  %1063 = getelementptr inbounds float, float* %1060, i64 4
  %1064 = bitcast float* %1063 to <4 x float>*
  %1065 = load <4 x float>, <4 x float>* %1064, align 4, !alias.scope !297
  %1066 = bitcast float* %1059 to <4 x float>*
  %1067 = load <4 x float>, <4 x float>* %1066, align 4, !alias.scope !300, !noalias !297
  %1068 = getelementptr inbounds float, float* %1059, i64 4
  %1069 = bitcast float* %1068 to <4 x float>*
  %1070 = load <4 x float>, <4 x float>* %1069, align 4, !alias.scope !300, !noalias !297
  %1071 = fadd <4 x float> %1062, %1067
  %1072 = fadd <4 x float> %1065, %1070
  %1073 = bitcast float* %1059 to <4 x float>*
  store <4 x float> %1071, <4 x float>* %1073, align 4, !alias.scope !300, !noalias !297
  %1074 = bitcast float* %1068 to <4 x float>*
  store <4 x float> %1072, <4 x float>* %1074, align 4, !alias.scope !300, !noalias !297
  %1075 = add i64 %1038, 16
  %1076 = add i64 %1039, -2
  %1077 = icmp eq i64 %1076, 0
  br i1 %1077, label %1078, label %1037, !llvm.loop !302

1078:                                             ; preds = %1037, %1027
  %1079 = phi i64 [ 0, %1027 ], [ %1075, %1037 ]
  %1080 = icmp eq i64 %1033, 0
  br i1 %1080, label %1099, label %1081

1081:                                             ; preds = %1078
  %1082 = add i64 %883, %1079
  %1083 = getelementptr inbounds float, float* %868, i64 %1082
  %1084 = getelementptr inbounds float, float* %244, i64 %1082
  %1085 = bitcast float* %1084 to <4 x float>*
  %1086 = load <4 x float>, <4 x float>* %1085, align 4, !alias.scope !297
  %1087 = getelementptr inbounds float, float* %1084, i64 4
  %1088 = bitcast float* %1087 to <4 x float>*
  %1089 = load <4 x float>, <4 x float>* %1088, align 4, !alias.scope !297
  %1090 = bitcast float* %1083 to <4 x float>*
  %1091 = load <4 x float>, <4 x float>* %1090, align 4, !alias.scope !300, !noalias !297
  %1092 = getelementptr inbounds float, float* %1083, i64 4
  %1093 = bitcast float* %1092 to <4 x float>*
  %1094 = load <4 x float>, <4 x float>* %1093, align 4, !alias.scope !300, !noalias !297
  %1095 = fadd <4 x float> %1086, %1091
  %1096 = fadd <4 x float> %1089, %1094
  %1097 = bitcast float* %1083 to <4 x float>*
  store <4 x float> %1095, <4 x float>* %1097, align 4, !alias.scope !300, !noalias !297
  %1098 = bitcast float* %1092 to <4 x float>*
  store <4 x float> %1096, <4 x float>* %1098, align 4, !alias.scope !300, !noalias !297
  br label %1099

1099:                                             ; preds = %1078, %1081
  %1100 = icmp eq i64 %1017, %1028
  br i1 %1100, label %1160, label %1101

1101:                                             ; preds = %1099, %1019, %1015
  %1102 = phi i64 [ %883, %1019 ], [ %883, %1015 ], [ %1029, %1099 ]
  %1103 = sub i64 %116, %1102
  %1104 = xor i64 %1102, -1
  %1105 = add i64 %1104, %116
  %1106 = and i64 %1103, 3
  %1107 = icmp eq i64 %1106, 0
  br i1 %1107, label %1119, label %1108

1108:                                             ; preds = %1101, %1108
  %1109 = phi i64 [ %1116, %1108 ], [ %1102, %1101 ]
  %1110 = phi i64 [ %1117, %1108 ], [ %1106, %1101 ]
  %1111 = getelementptr inbounds float, float* %868, i64 %1109
  %1112 = getelementptr inbounds float, float* %244, i64 %1109
  %1113 = load float, float* %1112, align 4
  %1114 = load float, float* %1111, align 4
  %1115 = fadd float %1113, %1114
  store float %1115, float* %1111, align 4
  %1116 = add nsw i64 %1109, 1
  %1117 = add i64 %1110, -1
  %1118 = icmp eq i64 %1117, 0
  br i1 %1118, label %1119, label %1108, !llvm.loop !303

1119:                                             ; preds = %1108, %1101
  %1120 = phi i64 [ %1102, %1101 ], [ %1116, %1108 ]
  %1121 = icmp ult i64 %1105, 3
  br i1 %1121, label %1160, label %1122

1122:                                             ; preds = %1119, %1122
  %1123 = phi i64 [ %1147, %1122 ], [ %1120, %1119 ]
  %1124 = getelementptr inbounds float, float* %868, i64 %1123
  %1125 = getelementptr inbounds float, float* %244, i64 %1123
  %1126 = load float, float* %1125, align 4
  %1127 = load float, float* %1124, align 4
  %1128 = fadd float %1126, %1127
  store float %1128, float* %1124, align 4
  %1129 = add nsw i64 %1123, 1
  %1130 = getelementptr inbounds float, float* %868, i64 %1129
  %1131 = getelementptr inbounds float, float* %244, i64 %1129
  %1132 = load float, float* %1131, align 4
  %1133 = load float, float* %1130, align 4
  %1134 = fadd float %1132, %1133
  store float %1134, float* %1130, align 4
  %1135 = add nsw i64 %1123, 2
  %1136 = getelementptr inbounds float, float* %868, i64 %1135
  %1137 = getelementptr inbounds float, float* %244, i64 %1135
  %1138 = load float, float* %1137, align 4
  %1139 = load float, float* %1136, align 4
  %1140 = fadd float %1138, %1139
  store float %1140, float* %1136, align 4
  %1141 = add nsw i64 %1123, 3
  %1142 = getelementptr inbounds float, float* %868, i64 %1141
  %1143 = getelementptr inbounds float, float* %244, i64 %1141
  %1144 = load float, float* %1143, align 4
  %1145 = load float, float* %1142, align 4
  %1146 = fadd float %1144, %1145
  store float %1146, float* %1142, align 4
  %1147 = add nsw i64 %1123, 4
  %1148 = icmp eq i64 %1147, %116
  br i1 %1148, label %1160, label %1122, !llvm.loop !304

1149:                                             ; preds = %1011, %1149
  %1150 = phi i64 [ %1158, %1149 ], [ %879, %1011 ]
  %1151 = getelementptr inbounds float, float* %868, i64 %1150
  %1152 = getelementptr inbounds float, float* %244, i64 %1150
  %1153 = bitcast float* %1152 to <4 x float>*
  %1154 = load <4 x float>, <4 x float>* %1153, align 1
  %1155 = bitcast float* %1151 to <4 x float>*
  %1156 = load <4 x float>, <4 x float>* %1155, align 16
  %1157 = fadd <4 x float> %1154, %1156
  store <4 x float> %1157, <4 x float>* %1155, align 16
  %1158 = add nsw i64 %1150, 4
  %1159 = icmp slt i64 %1158, %883
  br i1 %1159, label %1149, label %1013

1160:                                             ; preds = %1119, %1122, %1099, %1013
  %1161 = load float*, float** %141, align 8
  %1162 = getelementptr inbounds float, float* %1161, i64 %866
  %1163 = load float, float* %1162, align 4
  %1164 = fadd float %1163, 1.000000e+00
  store float %1164, float* %1162, align 4
  %1165 = add nsw i64 %855, 1
  %1166 = icmp slt i64 %1165, %822
  %1167 = add i64 %854, 1
  br i1 %1166, label %853, label %849

1168:                                             ; preds = %605, %1182, %649, %581
  %1169 = icmp eq float* %361, null
  br i1 %1169, label %1174, label %1170

1170:                                             ; preds = %1168
  %1171 = getelementptr inbounds float, float* %361, i64 -2
  %1172 = bitcast float* %1171 to i8**
  %1173 = load i8*, i8** %1172, align 8
  tail call void @free(i8* %1173) #13
  br label %1174

1174:                                             ; preds = %1168, %1170
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %140) #13
  %1175 = icmp eq i64 %139, 0
  br i1 %1175, label %1181, label %1176

1176:                                             ; preds = %1174
  %1177 = inttoptr i64 %139 to float*
  %1178 = getelementptr inbounds float, float* %1177, i64 -2
  %1179 = bitcast float* %1178 to i8**
  %1180 = load i8*, i8** %1179, align 8
  tail call void @free(i8* %1180) #13
  br label %1181

1181:                                             ; preds = %1174, %1176
  ret void

1182:                                             ; preds = %605, %1182
  %1183 = phi i64 [ %1201, %1182 ], [ %606, %605 ]
  %1184 = getelementptr inbounds float, float* %4, i64 %1183
  %1185 = load float, float* %1184, align 4
  %1186 = load float, float* %586, align 4
  %1187 = load float, float* %587, align 4
  %1188 = fcmp olt float %1185, %1186
  %1189 = select i1 %1188, float %1186, float %1185
  %1190 = fcmp ogt float %1189, %1187
  %1191 = select i1 %1190, float %1187, float %1189
  store float %1191, float* %1184, align 4
  %1192 = add nuw nsw i64 %1183, 1
  %1193 = getelementptr inbounds float, float* %4, i64 %1192
  %1194 = load float, float* %1193, align 4
  %1195 = load float, float* %586, align 4
  %1196 = load float, float* %587, align 4
  %1197 = fcmp olt float %1194, %1195
  %1198 = select i1 %1197, float %1195, float %1194
  %1199 = fcmp ogt float %1198, %1196
  %1200 = select i1 %1199, float %1196, float %1198
  store float %1200, float* %1193, align 4
  %1201 = add nuw nsw i64 %1183, 2
  %1202 = icmp eq i64 %1201, %588
  br i1 %1202, label %1168, label %1182, !llvm.loop !305

1203:                                             ; preds = %86
  %1204 = getelementptr inbounds i32, i32* %69, i64 %89
  %1205 = load i32, i32* %1204, align 4, !noalias !259
  br label %1206

1206:                                             ; preds = %1203, %86
  %1207 = phi i32 [ %1205, %1203 ], [ 1, %86 ]
  %1208 = mul nsw i32 %1207, %88
  %1209 = or i64 %79, 2
  %1210 = icmp eq i64 %1209, %71
  br i1 %1210, label %1214, label %1211

1211:                                             ; preds = %1206
  %1212 = getelementptr inbounds i32, i32* %69, i64 %1209
  %1213 = load i32, i32* %1212, align 4, !noalias !259
  br label %1214

1214:                                             ; preds = %1211, %1206
  %1215 = phi i32 [ %1213, %1211 ], [ 1, %1206 ]
  %1216 = mul nsw i32 %1215, %1208
  %1217 = or i64 %79, 3
  %1218 = icmp eq i64 %1217, %71
  br i1 %1218, label %1222, label %1219

1219:                                             ; preds = %1214
  %1220 = getelementptr inbounds i32, i32* %69, i64 %1217
  %1221 = load i32, i32* %1220, align 4, !noalias !259
  br label %1222

1222:                                             ; preds = %1219, %1214
  %1223 = phi i32 [ %1221, %1219 ], [ 1, %1214 ]
  %1224 = mul nsw i32 %1223, %1216
  %1225 = add nuw nsw i64 %79, 4
  %1226 = add i64 %81, -4
  %1227 = icmp eq i64 %1226, 0
  br i1 %1227, label %91, label %78
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sqrt.f32(float) #11

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #11

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind }
attributes #14 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!10 = distinct !{!10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!13 = distinct !{!13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!16 = distinct !{!16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!19 = distinct !{!19, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!22 = distinct !{!22, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!25 = distinct !{!25, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!26 = distinct !{!26, !27}
!27 = !{!"llvm.loop.isvectorized", i32 1}
!28 = distinct !{!28, !27}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !27}
!31 = distinct !{!31, !27}
!32 = distinct !{!32, !27}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!35 = distinct !{!35, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!38 = distinct !{!38, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!41 = distinct !{!41, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!44 = distinct !{!44, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!47 = distinct !{!47, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!50 = distinct !{!50, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!53 = distinct !{!53, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!56 = distinct !{!56, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!57 = distinct !{!57, !27}
!58 = distinct !{!58, !27}
!59 = distinct !{!59, !27}
!60 = distinct !{!60, !27}
!61 = distinct !{!61, !27}
!62 = distinct !{!62, !27}
!63 = !{!64}
!64 = distinct !{!64, !65, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!65 = distinct !{!65, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!68 = distinct !{!68, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!71 = distinct !{!71, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!72 = !{!73}
!73 = distinct !{!73, !74, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!74 = distinct !{!74, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!77 = distinct !{!77, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!78 = !{!79}
!79 = distinct !{!79, !80, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!80 = distinct !{!80, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!81 = !{!82}
!82 = distinct !{!82, !83, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!83 = distinct !{!83, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!86 = distinct !{!86, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!87 = !{!88}
!88 = distinct !{!88, !89, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!89 = distinct !{!89, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!90 = !{!91}
!91 = distinct !{!91, !92, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!92 = distinct !{!92, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!93 = !{!94}
!94 = distinct !{!94, !95, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELin1ELi0ELin1ELin1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!95 = distinct !{!95, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELin1ELi0ELin1ELin1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELin1ELi0ELin1ELin1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!98 = distinct !{!98, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELin1ELi0ELin1ELin1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!99 = distinct !{!99, !100}
!100 = !{!"llvm.loop.unroll.disable"}
!101 = !{!102}
!102 = distinct !{!102, !103}
!103 = distinct !{!103, !"LVerDomain"}
!104 = !{!105}
!105 = distinct !{!105, !103}
!106 = distinct !{!106, !27}
!107 = distinct !{!107, !27}
!108 = distinct !{!108, !27}
!109 = distinct !{!109, !100}
!110 = distinct !{!110, !111, !27}
!111 = !{!"llvm.loop.unroll.runtime.disable"}
!112 = !{!113}
!113 = distinct !{!113, !114}
!114 = distinct !{!114, !"LVerDomain"}
!115 = !{!116}
!116 = distinct !{!116, !114}
!117 = distinct !{!117, !27}
!118 = !{!119}
!119 = distinct !{!119, !120}
!120 = distinct !{!120, !"LVerDomain"}
!121 = !{!122}
!122 = distinct !{!122, !120}
!123 = distinct !{!123, !27}
!124 = distinct !{!124, !100}
!125 = distinct !{!125, !27}
!126 = !{!127}
!127 = distinct !{!127, !128}
!128 = distinct !{!128, !"LVerDomain"}
!129 = !{!130}
!130 = distinct !{!130, !128}
!131 = distinct !{!131, !27}
!132 = distinct !{!132, !100}
!133 = distinct !{!133, !27}
!134 = distinct !{!134, !27}
!135 = !{!136}
!136 = distinct !{!136, !137}
!137 = distinct !{!137, !"LVerDomain"}
!138 = !{!139}
!139 = distinct !{!139, !137}
!140 = distinct !{!140, !27}
!141 = distinct !{!141, !27}
!142 = !{!143}
!143 = distinct !{!143, !144}
!144 = distinct !{!144, !"LVerDomain"}
!145 = !{!146}
!146 = distinct !{!146, !144}
!147 = distinct !{!147, !27}
!148 = distinct !{!148, !27}
!149 = !{!150}
!150 = distinct !{!150, !151}
!151 = distinct !{!151, !"LVerDomain"}
!152 = !{!153}
!153 = distinct !{!153, !151}
!154 = distinct !{!154, !27}
!155 = distinct !{!155, !27}
!156 = !{!157}
!157 = distinct !{!157, !158, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!158 = distinct !{!158, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!159 = !{!160}
!160 = distinct !{!160, !161, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!161 = distinct !{!161, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!162 = !{!163}
!163 = distinct !{!163, !164, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!164 = distinct !{!164, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!165 = !{!166}
!166 = distinct !{!166, !167, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!167 = distinct !{!167, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!168 = !{!169}
!169 = distinct !{!169, !170, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!170 = distinct !{!170, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!171 = !{!172}
!172 = distinct !{!172, !173, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!173 = distinct !{!173, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!174 = !{!175}
!175 = distinct !{!175, !176, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!176 = distinct !{!176, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!177 = !{!178}
!178 = distinct !{!178, !179, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!179 = distinct !{!179, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!180 = !{!181}
!181 = distinct !{!181, !182, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELin1ELi0ELin1ELin1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!182 = distinct !{!182, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELin1ELi0ELin1ELin1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!183 = !{!184}
!184 = distinct !{!184, !185, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELin1ELi0ELin1ELin1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!185 = distinct !{!185, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELin1ELi0ELin1ELin1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!186 = distinct !{!186, !100}
!187 = distinct !{!187, !27}
!188 = distinct !{!188, !100}
!189 = distinct !{!189, !111, !27}
!190 = distinct !{!190, !27}
!191 = distinct !{!191, !100}
!192 = distinct !{!192, !111, !27}
!193 = distinct !{!193, !27}
!194 = distinct !{!194, !100}
!195 = distinct !{!195, !111, !27}
!196 = !{!197}
!197 = distinct !{!197, !198}
!198 = distinct !{!198, !"LVerDomain"}
!199 = !{!200}
!200 = distinct !{!200, !198}
!201 = distinct !{!201, !27}
!202 = !{!203}
!203 = distinct !{!203, !204}
!204 = distinct !{!204, !"LVerDomain"}
!205 = !{!206}
!206 = distinct !{!206, !204}
!207 = distinct !{!207, !27}
!208 = distinct !{!208, !27}
!209 = !{!210}
!210 = distinct !{!210, !211}
!211 = distinct !{!211, !"LVerDomain"}
!212 = !{!213}
!213 = distinct !{!213, !211}
!214 = distinct !{!214, !27}
!215 = distinct !{!215, !27}
!216 = !{i32 5687835}
!217 = distinct !{!217, !27}
!218 = !{!219}
!219 = distinct !{!219, !220}
!220 = distinct !{!220, !"LVerDomain"}
!221 = !{!222}
!222 = distinct !{!222, !220}
!223 = !{!224}
!224 = distinct !{!224, !220}
!225 = distinct !{!225, !27}
!226 = !{!227}
!227 = distinct !{!227, !228}
!228 = distinct !{!228, !"LVerDomain"}
!229 = !{!230}
!230 = distinct !{!230, !228}
!231 = distinct !{!231, !27}
!232 = distinct !{!232, !27}
!233 = distinct !{!233, !27}
!234 = !{!235}
!235 = distinct !{!235, !236}
!236 = distinct !{!236, !"LVerDomain"}
!237 = !{!238}
!238 = distinct !{!238, !236}
!239 = !{!240}
!240 = distinct !{!240, !236}
!241 = distinct !{!241, !27}
!242 = !{!243}
!243 = distinct !{!243, !244}
!244 = distinct !{!244, !"LVerDomain"}
!245 = !{!246}
!246 = distinct !{!246, !244}
!247 = distinct !{!247, !27}
!248 = distinct !{!248, !27}
!249 = distinct !{!249, !27}
!250 = !{!251}
!251 = distinct !{!251, !252, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!252 = distinct !{!252, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!253 = !{!254}
!254 = distinct !{!254, !255, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!255 = distinct !{!255, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!256 = !{!257}
!257 = distinct !{!257, !258, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELin1ELi0ELin1ELin1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!258 = distinct !{!258, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIKfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELin1ELi0ELin1ELin1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!259 = !{!260}
!260 = distinct !{!260, !261, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELin1ELi0ELin1ELin1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!261 = distinct !{!261, !"_ZN6tflite13optimized_ops28MapAsMatrixWithLastDimAsRowsIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELin1ELi0ELin1ELin1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELin1ELi0ELin1ELin1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!262 = distinct !{!262, !100}
!263 = distinct !{!263, !27}
!264 = distinct !{!264, !111, !27}
!265 = !{!266}
!266 = distinct !{!266, !267}
!267 = distinct !{!267, !"LVerDomain"}
!268 = !{!269}
!269 = distinct !{!269, !267}
!270 = distinct !{!270, !27}
!271 = distinct !{!271, !27}
!272 = distinct !{!272, !27}
!273 = distinct !{!273, !100}
!274 = distinct !{!274, !111, !27}
!275 = !{!276}
!276 = distinct !{!276, !277}
!277 = distinct !{!277, !"LVerDomain"}
!278 = !{!279}
!279 = distinct !{!279, !277}
!280 = distinct !{!280, !27}
!281 = !{!282}
!282 = distinct !{!282, !283}
!283 = distinct !{!283, !"LVerDomain"}
!284 = !{!285}
!285 = distinct !{!285, !283}
!286 = distinct !{!286, !27}
!287 = distinct !{!287, !100}
!288 = distinct !{!288, !27}
!289 = !{!290}
!290 = distinct !{!290, !291}
!291 = distinct !{!291, !"LVerDomain"}
!292 = !{!293}
!293 = distinct !{!293, !291}
!294 = distinct !{!294, !27}
!295 = distinct !{!295, !100}
!296 = distinct !{!296, !27}
!297 = !{!298}
!298 = distinct !{!298, !299}
!299 = distinct !{!299, !"LVerDomain"}
!300 = !{!301}
!301 = distinct !{!301, !299}
!302 = distinct !{!302, !27}
!303 = distinct !{!303, !100}
!304 = distinct !{!304, !27}
!305 = distinct !{!305, !27}
