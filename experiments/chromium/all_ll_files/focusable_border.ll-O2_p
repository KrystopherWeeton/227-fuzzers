; ModuleID = '../../ui/views/controls/focusable_border.cc'
source_filename = "../../ui/views/controls/focusable_border.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::PaintFlags" = type <{ %class.sk_sp.188, %class.sk_sp.189, %class.sk_sp.219, %class.sk_sp.220, %class.sk_sp.221, %class.sk_sp.222, i32, float, float, i32, %union.anon.223, [4 x i8] }>
%class.sk_sp.188 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.53" }
%"struct.std::__1::__atomic_base.53" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.189 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional.190", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.89, i32, %"class.absl::optional.199", %"class.std::__1::vector.204", %"class.std::__1::vector.211", %class.sk_sp.218, %class.sk_sp.195, i32, [4 x i8] }>
%"class.absl::optional.190" = type { %"class.absl::optional_internal::optional_data.191" }
%"class.absl::optional_internal::optional_data.191" = type { %"class.absl::optional_internal::optional_data_base.192" }
%"class.absl::optional_internal::optional_data_base.192" = type { %"class.absl::optional_internal::optional_data_dtor_base.193" }
%"class.absl::optional_internal::optional_data_dtor_base.193" = type { i8, %union.anon.194 }
%union.anon.194 = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.cc::PaintImage" = type { %class.sk_sp.195, %class.sk_sp.89, %"class.gfx::Rect", i32, %class.sk_sp.196, %class.sk_sp.197, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.195, %class.scoped_refptr.198 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.196 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.197 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.scoped_refptr.198 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type opaque
%class.sk_sp.89 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.90", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { i8* }
%"class.absl::optional.199" = type { %"class.absl::optional_internal::optional_data.200" }
%"class.absl::optional_internal::optional_data.200" = type { %"class.absl::optional_internal::optional_data_base.201" }
%"class.absl::optional_internal::optional_data_base.201" = type { %"class.absl::optional_internal::optional_data_dtor_base.202" }
%"class.absl::optional_internal::optional_data_dtor_base.202" = type { i8, %union.anon.203 }
%union.anon.203 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.204" = type { %"class.std::__1::__vector_base.205" }
%"class.std::__1::__vector_base.205" = type { i32*, i32*, %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { i32* }
%"class.std::__1::vector.211" = type { %"class.std::__1::__vector_base.212" }
%"class.std::__1::__vector_base.212" = type { float*, float*, %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { float* }
%class.sk_sp.218 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.62", [7 x i8] }>
%"struct.std::__1::atomic.62" = type { %"struct.std::__1::__atomic_base.63" }
%"struct.std::__1::__atomic_base.63" = type { %"struct.std::__1::__cxx_atomic_impl.64" }
%"struct.std::__1::__cxx_atomic_impl.64" = type { %"struct.std::__1::__cxx_atomic_base_impl.65" }
%"struct.std::__1::__cxx_atomic_base_impl.65" = type { i8 }
%class.sk_sp.195 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.156, i32, i32 }
%class.sk_sp.156 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.157, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.157 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.56" }
%"struct.std::__1::atomic.56" = type { %"struct.std::__1::__atomic_base.57" }
%"struct.std::__1::__atomic_base.57" = type { %"struct.std::__1::__atomic_base.58" }
%"struct.std::__1::__atomic_base.58" = type { %"struct.std::__1::__cxx_atomic_impl.59" }
%"struct.std::__1::__cxx_atomic_impl.59" = type { %"struct.std::__1::__cxx_atomic_base_impl.60" }
%"struct.std::__1::__cxx_atomic_base_impl.60" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.219 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.220 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.221 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.222 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type opaque
%union.anon.223 = type { i32 }
%"class.views::FocusableBorder" = type { %"class.views::Border.base", %"class.gfx::Insets", %"class.absl::optional", [4 x i8] }
%"class.views::Border.base" = type <{ i32 (...)**, i32 }>
%"class.gfx::Insets" = type { i32, i32, i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.views::Border" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.views::View" = type <{ %"class.ui::LayerDelegate", %"class.ui::LayerObserver", %"class.ui::LayerOwner", %"class.ui::AcceleratorTarget", %"class.ui::EventTarget", %"class.ui::EventHandler", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", i8, [3 x i8], i32, i32, [4 x i8], %"class.views::View"*, %"class.std::__1::vector.35", i8, [3 x i8], %"class.absl::optional.42", %"class.gfx::Rect", i8, i8, i8, i8, [4 x i8], %"class.std::__1::unique_ptr.47", %class.SkPath, i8, [7 x i8], %"class.std::__1::unique_ptr.66", %"class.absl::optional.72", i8, [7 x i8], %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.83", %"class.ui::PaintCache", i8, [7 x i8], %"class.ui::NativeTheme"*, i8, %"class.absl::optional.109", i8, i8, [3 x i8], %"class.std::__1::vector.114", %"class.std::__1::unique_ptr.121", %"class.views::FocusManager"*, %"class.std::__1::unique_ptr.127", i64, %"class.views::View"*, %"class.views::View"*, i32, [4 x i8], %"class.views::ContextMenuController"*, %"class.views::DragController"*, %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.140", %"class.base::ObserverList.146", i32, [4 x i8] }>
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerObserver" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.1" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::AcceleratorTarget" = type { i32 (...)** }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.4", %"class.std::__1::vector.11", %"class.ui::EventHandler"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.6" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i64 }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.26" }
%"class.std::__1::map.26" = type { %"class.std::__1::__tree.27" }
%"class.std::__1::__tree.27" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.28", %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.views::View"**, %"class.views::View"**, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.views::View"** }
%"class.absl::optional.42" = type { %"class.absl::optional_internal::optional_data.43" }
%"class.absl::optional_internal::optional_data.43" = type { %"class.absl::optional_internal::optional_data_base.44" }
%"class.absl::optional_internal::optional_data_base.44" = type { %"class.absl::optional_internal::optional_data_dtor_base.45" }
%"class.absl::optional_internal::optional_data_dtor_base.45" = type { i8, %union.anon.46 }
%union.anon.46 = type { %"class.gfx::Size" }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.std::__1::vector.35"* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.56", %"struct.std::__1::atomic.56", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.54, %class.SkTDArray.55, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.54 = type { i8*, i32, i32 }
%class.SkTDArray.55 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.61 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.61 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.62", [3 x i8] }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.views::LayoutManager"* }
%"class.views::LayoutManager" = type { i32 (...)**, %"class.views::View"* }
%"class.absl::optional.72" = type { %"class.absl::optional_internal::optional_data.73" }
%"class.absl::optional_internal::optional_data.73" = type { %"class.absl::optional_internal::optional_data_base.74" }
%"class.absl::optional_internal::optional_data_base.74" = type { %"class.absl::optional_internal::optional_data_dtor_base.75" }
%"class.absl::optional_internal::optional_data_dtor_base.75" = type { i8, %union.anon.76 }
%union.anon.76 = type { %"class.views::View::DefaultFillLayout" }
%"class.views::View::DefaultFillLayout" = type { %"class.views::LayoutManager" }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.views::Background"* }
%"class.views::Background" = type opaque
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.views::Border"* }
%"class.ui::PaintCache" = type <{ %class.sk_sp.89, float, [4 x i8] }>
%"class.ui::NativeTheme" = type <{ i32 (...)**, %"class.std::__1::map.94", %"class.base::ObserverList.105", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::map.94" = type { %"class.std::__1::__tree.95" }
%"class.std::__1::__tree.95" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.96", %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.base::ObserverList.105" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.106", i64, i32, [4 x i8] }>
%"class.base::LinkedList.106" = type { %"class.base::LinkNode.107" }
%"class.base::LinkNode.107" = type { %"class.base::internal::LinkNodeBase" }
%"class.absl::optional.109" = type { %"class.absl::optional_internal::optional_data.110" }
%"class.absl::optional_internal::optional_data.110" = type { %"class.absl::optional_internal::optional_data_base.111" }
%"class.absl::optional_internal::optional_data_base.111" = type { %"class.absl::optional_internal::optional_data_dtor_base.112" }
%"class.absl::optional_internal::optional_data_dtor_base.112" = type { i8, %union.anon.113 }
%union.anon.113 = type { i8 }
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"class.ui::Layer"**, %"class.ui::Layer"**, %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.ui::Layer"** }
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.views::ViewMaskLayer"* }
%"class.views::ViewMaskLayer" = type opaque
%"class.views::FocusManager" = type opaque
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.std::__1::vector.130"* }
%"class.std::__1::vector.130" = type opaque
%"class.views::ContextMenuController" = type { i32 (...)**, i8, %"class.base::WeakPtrFactory" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.56" }
%"class.views::DragController" = type { i32 (...)** }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.views::ViewTargeter"* }
%"class.views::ViewTargeter" = type { %"class.ui::EventTargeter", %"class.views::ViewTargeterDelegate"* }
%"class.ui::EventTargeter" = type { i32 (...)** }
%"class.views::ViewTargeterDelegate" = type opaque
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.views::ViewAccessibility"* }
%"class.views::ViewAccessibility" = type opaque
%"class.base::ObserverList.146" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.147", i64, i32, [4 x i8] }>
%"class.base::LinkedList.147" = type { %"class.base::LinkNode.148" }
%"class.base::LinkNode.148" = type { %"class.base::internal::LinkNodeBase" }
%"class.gfx::Canvas" = type { i32 (...)**, float, %"class.absl::optional.150", %"class.absl::optional.159", %"class.cc::PaintCanvas"* }
%"class.absl::optional.150" = type { %"class.absl::optional_internal::optional_data.151" }
%"class.absl::optional_internal::optional_data.151" = type { %"class.absl::optional_internal::optional_data_base.152" }
%"class.absl::optional_internal::optional_data_base.152" = type { %"class.absl::optional_internal::optional_data_dtor_base.153" }
%"class.absl::optional_internal::optional_data_dtor_base.153" = type { i8, %union.anon.154 }
%union.anon.154 = type { %class.SkBitmap }
%class.SkBitmap = type { %class.sk_sp.155, %class.SkPixmap, %class.sk_sp.158 }
%class.sk_sp.155 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.158 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.absl::optional.159" = type { %"class.absl::optional_internal::optional_data.160" }
%"class.absl::optional_internal::optional_data.160" = type { %"class.absl::optional_internal::optional_data_base.161" }
%"class.absl::optional_internal::optional_data_base.161" = type { %"class.absl::optional_internal::optional_data_dtor_base.162" }
%"class.absl::optional_internal::optional_data_dtor_base.162" = type { i8, [7 x i8], %union.anon.163 }
%union.anon.163 = type { %"class.cc::SkiaPaintCanvas" }
%"class.cc::SkiaPaintCanvas" = type <{ %"class.cc::PaintCanvas", %class.SkCanvas*, %class.SkBitmap, %"class.std::__1::unique_ptr.178", %"class.cc::ImageProvider"*, %"struct.cc::SkiaPaintCanvas::ContextFlushes", i32, [4 x i8] }>
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.164, [384 x i64], %class.sk_sp.165, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.166", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.172" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.164 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.165 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %class.SkCanvas* }
%"class.cc::ImageProvider" = type opaque
%"struct.cc::SkiaPaintCanvas::ContextFlushes" = type { i8, i32 }
%"class.gfx::ScopedCanvas" = type { i32 (...)**, %"class.gfx::Canvas"* }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::InsetsF" = type { float, float, float, float }

@_ZTVN5views15FocusableBorderE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.views::FocusableBorder"*)* @_ZN5views15FocusableBorderD2Ev to i8*), i8* bitcast (void (%"class.views::FocusableBorder"*)* @_ZN5views15FocusableBorderD0Ev to i8*), i8* bitcast (void (%"class.views::FocusableBorder"*, %"class.views::View"*, %"class.gfx::Canvas"*)* @_ZN5views15FocusableBorder5PaintERKNS_4ViewEPN3gfx6CanvasE to i8*), i8* bitcast ({ i64, i64 } (%"class.views::FocusableBorder"*)* @_ZNK5views15FocusableBorder9GetInsetsEv to i8*), i8* bitcast (i64 (%"class.views::FocusableBorder"*)* @_ZNK5views15FocusableBorder14GetMinimumSizeEv to i8*)] }, align 8
@__const._ZN5views15FocusableBorder5PaintERKNS_4ViewEPN3gfx6CanvasE.flags = private unnamed_addr constant %"class.cc::PaintFlags" <{ %class.sk_sp.188 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.189 { %"class.cc::PaintShader"* inttoptr (i64 -6148914691236517206 to %"class.cc::PaintShader"*) }, %class.sk_sp.219 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.220 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.221 { %class.SkDrawLooper* inttoptr (i64 -6148914691236517206 to %class.SkDrawLooper*) }, %class.sk_sp.222 { %"class.cc::PaintFilter"* inttoptr (i64 -6148914691236517206 to %"class.cc::PaintFilter"*) }, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, %union.anon.223 { i32 -1431655766 }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8

@_ZN5views15FocusableBorderC1Ev = hidden unnamed_addr alias void (%"class.views::FocusableBorder"*), void (%"class.views::FocusableBorder"*)* @_ZN5views15FocusableBorderC2Ev
@_ZN5views15FocusableBorderD1Ev = hidden unnamed_addr alias void (%"class.views::FocusableBorder"*), void (%"class.views::FocusableBorder"*)* @_ZN5views15FocusableBorderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views15FocusableBorderC2Ev(%"class.views::FocusableBorder"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.views::FocusableBorder"* %0 to %"class.views::Border"*
  tail call void @_ZN5views6BorderC2Ev(%"class.views::Border"* %2) #10
  %3 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5views15FocusableBorderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 0
  %5 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %5, align 4
  %6 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 4
  ret void
}

declare void @_ZN5views6BorderC2Ev(%"class.views::Border"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5views6BorderD2Ev(%"class.views::Border"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views15FocusableBorderD2Ev(%"class.views::FocusableBorder"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.views::FocusableBorder"* %0 to %"class.views::Border"*
  tail call void @_ZN5views6BorderD2Ev(%"class.views::Border"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views15FocusableBorderD0Ev(%"class.views::FocusableBorder"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.views::FocusableBorder"* %0 to %"class.views::Border"*
  tail call void @_ZN5views6BorderD2Ev(%"class.views::Border"* %2) #10
  %3 = bitcast %"class.views::FocusableBorder"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5views15FocusableBorder10SetColorIdERKN4absl8optionalIN2ui11NativeTheme7ColorIdEEE(%"class.views::FocusableBorder"* nocapture, %"class.absl::optional"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.absl::optional"* %1 to i64*
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %4, align 4
  store i64 %6, i64* %5, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views15FocusableBorder5PaintERKNS_4ViewEPN3gfx6CanvasE(%"class.views::FocusableBorder"* nocapture readonly, %"class.views::View"* dereferenceable(664), %"class.gfx::Canvas"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.cc::PaintFlags", align 8
  %5 = alloca %"class.gfx::ScopedCanvas", align 8
  %6 = alloca %"class.gfx::RectF", align 4
  %7 = alloca <4 x float>, align 16
  %8 = bitcast <4 x float>* %7 to %"class.gfx::InsetsF"*
  %9 = alloca %class.SkPath, align 8
  %10 = alloca { <2 x float>, <2 x float> }, align 8
  %11 = bitcast { <2 x float>, <2 x float> }* %10 to %struct.SkRect*
  %12 = bitcast %"class.cc::PaintFlags"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %12) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 bitcast (%"class.cc::PaintFlags"* @__const._ZN5views15FocusableBorder5PaintERKNS_4ViewEPN3gfx6CanvasE.flags to i8*), i64 72, i1 false)
  call void @_ZN2cc10PaintFlagsC1Ev(%"class.cc::PaintFlags"* nonnull %4) #10
  %13 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %4, i64 0, i32 10
  %14 = bitcast %union.anon.223* %13 to i16*
  %15 = load i16, i16* %14, align 8
  %16 = and i16 %15, -193
  %17 = or i16 %16, 64
  store i16 %17, i16* %14, align 8
  %18 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %19 = load i8, i8* %18, align 4, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %3
  %22 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %23 = load i32, i32* %22, align 4
  br label %24

24:                                               ; preds = %21, %3
  %25 = phi i32 [ %23, %21 ], [ 9, %3 ]
  %26 = call %"class.ui::NativeTheme"* @_ZNK5views4View14GetNativeThemeEv(%"class.views::View"* %1) #10
  %27 = call i32 @_ZNK2ui11NativeTheme14GetSystemColorENS0_7ColorIdENS0_11ColorSchemeE(%"class.ui::NativeTheme"* %26, i32 %25, i32 0) #10
  %28 = call zeroext i1 @_ZNK5views4View10GetEnabledEv(%"class.views::View"* %1) #10
  br i1 %28, label %31, label %29

29:                                               ; preds = %24
  %30 = call i32 @_ZN11color_utils22BlendTowardMaxContrastEjh(i32 %27, i8 zeroext 97) #10
  br label %31

31:                                               ; preds = %24, %29
  %32 = phi i32 [ %30, %29 ], [ %27, %24 ]
  %33 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %4, i64 0, i32 6
  store i32 %32, i32* %33, align 8
  %34 = bitcast %"class.gfx::ScopedCanvas"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #10
  %35 = bitcast %"class.gfx::ScopedCanvas"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 16, i1 false)
  call void @_ZN3gfx12ScopedCanvasC1EPNS_6CanvasE(%"class.gfx::ScopedCanvas"* nonnull %5, %"class.gfx::Canvas"* %2) #10
  %36 = call float @_ZN3gfx6Canvas21UndoDeviceScaleFactorEv(%"class.gfx::Canvas"* %2) #10
  %37 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %4, i64 0, i32 7
  store float 1.000000e+00, float* %37, align 4
  %38 = bitcast %"class.gfx::RectF"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #10
  %39 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 1, i32 0
  %42 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 1, i32 1
  %43 = bitcast %"class.gfx::RectF"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %43, i8 -1, i64 16, i1 false)
  %44 = call { i64, i64 } @_ZNK5views4View14GetLocalBoundsEv(%"class.views::View"* %1) #10
  %45 = extractvalue { i64, i64 } %44, 0
  %46 = trunc i64 %45 to i32
  %47 = lshr i64 %45, 32
  %48 = trunc i64 %47 to i32
  %49 = extractvalue { i64, i64 } %44, 1
  %50 = fcmp oeq float %36, 1.000000e+00
  br i1 %50, label %105, label %51

51:                                               ; preds = %31
  %52 = sitofp i32 %46 to float
  %53 = fmul float %36, %52
  %54 = call float @llvm.ceil.f32(float %53) #10
  %55 = fptosi float %54 to i32
  %56 = sitofp i32 %48 to float
  %57 = fmul float %36, %56
  %58 = call float @llvm.ceil.f32(float %57) #10
  %59 = fptosi float %58 to i32
  %60 = trunc i64 %49 to i32
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %68, label %62

62:                                               ; preds = %51
  %63 = add nsw i32 %60, %46
  %64 = sitofp i32 %63 to float
  %65 = fmul float %36, %64
  %66 = call float @llvm.floor.f32(float %65) #10
  %67 = fptosi float %66 to i32
  br label %68

68:                                               ; preds = %62, %51
  %69 = phi i32 [ %67, %62 ], [ %55, %51 ]
  %70 = lshr i64 %49, 32
  %71 = trunc i64 %70 to i32
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %68
  %74 = add nsw i32 %71, %48
  %75 = sitofp i32 %74 to float
  %76 = fmul float %36, %75
  %77 = call float @llvm.floor.f32(float %76) #10
  %78 = fptosi float %77 to i32
  br label %79

79:                                               ; preds = %73, %68
  %80 = phi i32 [ %78, %73 ], [ %59, %68 ]
  %81 = sub nsw i32 %69, %55
  %82 = sub nsw i32 %80, %59
  %83 = icmp sgt i32 %55, 0
  %84 = icmp sgt i32 %81, 0
  %85 = and i1 %83, %84
  %86 = sub nuw nsw i32 2147483647, %55
  %87 = icmp ult i32 %86, %81
  %88 = and i1 %87, %85
  %89 = select i1 %88, i32 %86, i32 %81
  %90 = icmp sgt i32 %59, 0
  %91 = icmp sgt i32 %82, 0
  %92 = and i1 %90, %91
  %93 = sub nuw nsw i32 2147483647, %59
  %94 = icmp ult i32 %93, %82
  %95 = and i1 %94, %92
  %96 = select i1 %95, i32 %93, i32 %82
  %97 = icmp sgt i32 %89, 0
  %98 = select i1 %97, i32 %89, i32 0
  %99 = zext i32 %98 to i64
  %100 = icmp sgt i32 %96, 0
  %101 = select i1 %100, i32 %96, i32 0
  %102 = zext i32 %101 to i64
  %103 = shl nuw nsw i64 %102, 32
  %104 = or i64 %103, %99
  br label %105

105:                                              ; preds = %31, %79
  %106 = phi i32 [ %59, %79 ], [ %48, %31 ]
  %107 = phi i32 [ %55, %79 ], [ %46, %31 ]
  %108 = phi i64 [ %104, %79 ], [ %49, %31 ]
  %109 = sitofp i32 %107 to float
  %110 = sitofp i32 %106 to float
  %111 = trunc i64 %108 to i32
  %112 = lshr i64 %108, 32
  %113 = trunc i64 %112 to i32
  store float %109, float* %39, align 4
  store float %110, float* %40, align 4
  %114 = icmp sgt i32 %111, 0
  %115 = select i1 %114, i32 %111, i32 0
  %116 = sitofp i32 %115 to float
  store float %116, float* %41, align 4
  %117 = icmp sgt i32 %113, 0
  %118 = select i1 %117, i32 %113, i32 0
  %119 = sitofp i32 %118 to float
  store float %119, float* %42, align 4
  %120 = bitcast <4 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %120) #10
  store <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <4 x float>* %7, align 16
  call void @_ZN3gfx5RectF5InsetERKNS_7InsetsFE(%"class.gfx::RectF"* nonnull %6, %"class.gfx::InsetsF"* nonnull dereferenceable(16) %8) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %120) #10
  %121 = bitcast %class.SkPath* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121) #10
  %122 = bitcast %class.SkPath* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %122, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %9) #10
  %123 = load i16, i16* %14, align 8
  %124 = or i16 %123, 1
  store i16 %124, i16* %14, align 8
  %125 = fmul float %36, 2.000000e+00
  %126 = bitcast { <2 x float>, <2 x float> }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %126) #10
  %127 = call { <2 x float>, <2 x float> } @_ZN3gfx13RectFToSkRectERKNS_5RectFE(%"class.gfx::RectF"* nonnull dereferenceable(16) %6) #10
  %128 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 0
  %129 = extractvalue { <2 x float>, <2 x float> } %127, 0
  store <2 x float> %129, <2 x float>* %128, align 8
  %130 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 1
  %131 = extractvalue { <2 x float>, <2 x float> } %127, 1
  store <2 x float> %131, <2 x float>* %130, align 8
  %132 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath12addRoundRectERK6SkRectff15SkPathDirection(%class.SkPath* nonnull %9, %struct.SkRect* nonnull dereferenceable(16) %11, float %125, float %125, i32 0) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %126) #10
  call void @_ZN3gfx6Canvas8DrawPathERK6SkPathRKN2cc10PaintFlagsE(%"class.gfx::Canvas"* %2, %class.SkPath* nonnull dereferenceable(16) %9, %"class.cc::PaintFlags"* nonnull dereferenceable(72) %4) #10
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #10
  call void @_ZN3gfx12ScopedCanvasD1Ev(%"class.gfx::ScopedCanvas"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #10
  call void @_ZN2cc10PaintFlagsD1Ev(%"class.cc::PaintFlags"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %12) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN2cc10PaintFlagsC1Ev(%"class.cc::PaintFlags"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5views15FocusableBorder15GetCurrentColorERKNS_4ViewE(%"class.views::FocusableBorder"* nocapture readonly, %"class.views::View"* dereferenceable(664)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 9, %2 ]
  %11 = tail call %"class.ui::NativeTheme"* @_ZNK5views4View14GetNativeThemeEv(%"class.views::View"* %1) #10
  %12 = tail call i32 @_ZNK2ui11NativeTheme14GetSystemColorENS0_7ColorIdENS0_11ColorSchemeE(%"class.ui::NativeTheme"* %11, i32 %10, i32 0) #10
  %13 = tail call zeroext i1 @_ZNK5views4View10GetEnabledEv(%"class.views::View"* %1) #10
  br i1 %13, label %16, label %14

14:                                               ; preds = %9
  %15 = tail call i32 @_ZN11color_utils22BlendTowardMaxContrastEjh(i32 %12, i8 zeroext 97) #10
  br label %16

16:                                               ; preds = %9, %14
  %17 = phi i32 [ %15, %14 ], [ %12, %9 ]
  ret i32 %17
}

declare void @_ZN3gfx12ScopedCanvasC1EPNS_6CanvasE(%"class.gfx::ScopedCanvas"*, %"class.gfx::Canvas"*) unnamed_addr #1

declare float @_ZN3gfx6Canvas21UndoDeviceScaleFactorEv(%"class.gfx::Canvas"*) local_unnamed_addr #1

declare { i64, i64 } @_ZNK5views4View14GetLocalBoundsEv(%"class.views::View"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN3gfx5RectF5InsetERKNS_7InsetsFE(%"class.gfx::RectF"*, %"class.gfx::InsetsF"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath12addRoundRectERK6SkRectff15SkPathDirection(%class.SkPath*, %struct.SkRect* dereferenceable(16), float, float, i32) local_unnamed_addr #1

declare { <2 x float>, <2 x float> } @_ZN3gfx13RectFToSkRectERKNS_5RectFE(%"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN3gfx6Canvas8DrawPathERK6SkPathRKN2cc10PaintFlagsE(%"class.gfx::Canvas"*, %class.SkPath* dereferenceable(16), %"class.cc::PaintFlags"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3gfx12ScopedCanvasD1Ev(%"class.gfx::ScopedCanvas"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2cc10PaintFlagsD1Ev(%"class.cc::PaintFlags"*) unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK5views15FocusableBorder9GetInsetsEv(%"class.views::FocusableBorder"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1
  %3 = bitcast %"class.gfx::Insets"* %2 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 2
  %6 = bitcast i32* %5 to i64*
  %7 = load i64, i64* %6, align 4
  %8 = insertvalue { i64, i64 } undef, i64 %4, 0
  %9 = insertvalue { i64, i64 } %8, i64 %7, 1
  ret { i64, i64 } %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK5views15FocusableBorder14GetMinimumSizeEv(%"class.views::FocusableBorder"* nocapture readnone) unnamed_addr #7 align 2 {
  ret i64 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5views15FocusableBorder9SetInsetsEiiii(%"class.views::FocusableBorder"* nocapture, i32, i32, i32, i32) local_unnamed_addr #8 align 2 {
  %6 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 0
  store i32 %1, i32* %6, align 4
  %7 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 1
  store i32 %2, i32* %7, align 4
  %8 = icmp sgt i32 %1, 0
  %9 = icmp sgt i32 %3, 0
  %10 = and i1 %8, %9
  %11 = sub nuw nsw i32 2147483647, %1
  %12 = icmp ult i32 %11, %3
  %13 = and i1 %12, %10
  br i1 %13, label %21, label %14

14:                                               ; preds = %5
  %15 = and i32 %3, %1
  %16 = icmp slt i32 %15, 0
  %17 = sub nsw i32 -2147483648, %1
  %18 = icmp sgt i32 %17, %3
  %19 = and i1 %18, %16
  %20 = select i1 %19, i32 %17, i32 %3
  br label %21

21:                                               ; preds = %14, %5
  %22 = phi i32 [ %20, %14 ], [ %11, %5 ]
  %23 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 2
  store i32 %22, i32* %23, align 4
  %24 = icmp sgt i32 %2, 0
  %25 = icmp sgt i32 %4, 0
  %26 = and i1 %24, %25
  %27 = sub nuw nsw i32 2147483647, %2
  %28 = icmp ult i32 %27, %4
  %29 = and i1 %28, %26
  br i1 %29, label %37, label %30

30:                                               ; preds = %21
  %31 = and i32 %4, %2
  %32 = icmp slt i32 %31, 0
  %33 = sub nsw i32 -2147483648, %2
  %34 = icmp sgt i32 %33, %4
  %35 = and i1 %34, %32
  %36 = select i1 %35, i32 %33, i32 %4
  br label %37

37:                                               ; preds = %21, %30
  %38 = phi i32 [ %36, %30 ], [ %27, %21 ]
  %39 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 3
  store i32 %38, i32* %39, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5views15FocusableBorder9SetInsetsEii(%"class.views::FocusableBorder"* nocapture, i32, i32) local_unnamed_addr #8 align 2 {
  %4 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 0
  store i32 %1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 1
  store i32 %2, i32* %5, align 4
  %6 = icmp sgt i32 %1, 0
  %7 = sub nuw nsw i32 2147483647, %1
  %8 = icmp ult i32 %7, %1
  %9 = and i1 %6, %8
  br i1 %9, label %16, label %10

10:                                               ; preds = %3
  %11 = icmp slt i32 %1, 0
  %12 = sub nsw i32 -2147483648, %1
  %13 = icmp sgt i32 %12, %1
  %14 = and i1 %11, %13
  %15 = select i1 %14, i32 %12, i32 %1
  br label %16

16:                                               ; preds = %10, %3
  %17 = phi i32 [ %15, %10 ], [ %7, %3 ]
  %18 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 2
  store i32 %17, i32* %18, align 4
  %19 = icmp sgt i32 %2, 0
  %20 = sub nuw nsw i32 2147483647, %2
  %21 = icmp ult i32 %20, %2
  %22 = and i1 %19, %21
  br i1 %22, label %29, label %23

23:                                               ; preds = %16
  %24 = icmp slt i32 %2, 0
  %25 = sub nsw i32 -2147483648, %2
  %26 = icmp sgt i32 %25, %2
  %27 = and i1 %24, %26
  %28 = select i1 %27, i32 %25, i32 %2
  br label %29

29:                                               ; preds = %16, %23
  %30 = phi i32 [ %28, %23 ], [ %20, %16 ]
  %31 = getelementptr inbounds %"class.views::FocusableBorder", %"class.views::FocusableBorder"* %0, i64 0, i32 1, i32 3
  store i32 %30, i32* %31, align 4
  ret void
}

declare %"class.ui::NativeTheme"* @_ZNK5views4View14GetNativeThemeEv(%"class.views::View"*) local_unnamed_addr #1

declare i32 @_ZNK2ui11NativeTheme14GetSystemColorENS0_7ColorIdENS0_11ColorSchemeE(%"class.ui::NativeTheme"*, i32, i32) local_unnamed_addr #1

declare zeroext i1 @_ZNK5views4View10GetEnabledEv(%"class.views::View"*) local_unnamed_addr #1

declare i32 @_ZN11color_utils22BlendTowardMaxContrastEjh(i32, i8 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
