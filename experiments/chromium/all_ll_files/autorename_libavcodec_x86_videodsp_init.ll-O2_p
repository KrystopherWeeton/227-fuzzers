; ModuleID = '../../third_party/ffmpeg/libavcodec/x86/autorename_libavcodec_x86_videodsp_init.c'
source_filename = "../../third_party/ffmpeg/libavcodec/x86/autorename_libavcodec_x86_videodsp_init.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VideoDSPContext = type { void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i64, i32)* }

@vfixtbl_sse = internal unnamed_addr constant [22 x void (i8*, i64, i8*, i64, i64, i64, i64)*] [void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix1_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix2_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix3_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix4_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix5_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix6_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix7_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix8_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix9_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix10_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix11_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix12_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix13_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix14_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix15_mmx, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix16_sse, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix17_sse, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix18_sse, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix19_sse, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix20_sse, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix21_sse, void (i8*, i64, i8*, i64, i64, i64, i64)* @ff_emu_edge_vfix22_sse], align 16
@hfixtbl_sse2 = internal unnamed_addr constant [11 x void (i8*, i64, i64, i64)*] [void (i8*, i64, i64, i64)* @ff_emu_edge_hfix2_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix4_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix6_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix8_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix10_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix12_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix14_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix16_sse2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix18_sse2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix20_sse2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix22_sse2], align 16
@hfixtbl_avx2 = internal unnamed_addr constant [11 x void (i8*, i64, i64, i64)*] [void (i8*, i64, i64, i64)* @ff_emu_edge_hfix2_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix4_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix6_mmx, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix8_avx2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix10_avx2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix12_avx2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix14_avx2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix16_avx2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix18_avx2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix20_avx2, void (i8*, i64, i64, i64)* @ff_emu_edge_hfix22_avx2], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_videodsp_init_x86(%struct.VideoDSPContext* nocapture, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @av_get_cpu_flags() #3
  %4 = and i32 %3, 2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VideoDSPContext, %struct.VideoDSPContext* %0, i64 0, i32 1
  store void (i8*, i64, i32)* @ff_prefetch_mmxext, void (i8*, i64, i32)** %7, align 8
  br label %8

8:                                                ; preds = %2, %6
  %9 = and i32 %3, 16
  %10 = icmp ne i32 %9, 0
  %11 = icmp slt i32 %1, 9
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %15

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.VideoDSPContext, %struct.VideoDSPContext* %0, i64 0, i32 0
  store void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)* @emulated_edge_mc_sse2, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %14, align 8
  br label %15

15:                                               ; preds = %13, %8
  %16 = trunc i32 %3 to i16
  %17 = icmp slt i16 %16, 0
  %18 = and i1 %11, %17
  br i1 %18, label %19, label %21

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VideoDSPContext, %struct.VideoDSPContext* %0, i64 0, i32 0
  store void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)* @emulated_edge_mc_avx2, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %20, align 8
  br label %21

21:                                               ; preds = %19, %15
  ret void
}

declare i32 @av_get_cpu_flags() local_unnamed_addr #1

declare void @ff_prefetch_mmxext(i8*, i64, i32) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal void @emulated_edge_mc_sse2(i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32) #2 {
  %11 = sext i32 %4 to i64
  %12 = sext i32 %5 to i64
  %13 = sext i32 %6 to i64
  %14 = sext i32 %7 to i64
  %15 = sext i32 %8 to i64
  %16 = sext i32 %9 to i64
  %17 = icmp ne i32 %8, 0
  %18 = icmp ne i32 %9, 0
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %115

20:                                               ; preds = %10
  %21 = icmp slt i32 %7, %9
  br i1 %21, label %27, label %22

22:                                               ; preds = %20
  %23 = mul nsw i64 %14, %3
  %24 = sub i64 0, %23
  %25 = getelementptr inbounds i8, i8* %1, i64 %24
  %26 = add nsw i64 %16, -1
  br label %35

27:                                               ; preds = %20
  %28 = sub nsw i64 0, %12
  %29 = icmp slt i64 %28, %14
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = mul nsw i64 %14, %3
  %32 = sub i64 0, %31
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  %34 = sub nsw i64 1, %12
  br label %35

35:                                               ; preds = %30, %27, %22
  %36 = phi i64 [ %26, %22 ], [ %34, %30 ], [ %14, %27 ]
  %37 = phi i8* [ %25, %22 ], [ %33, %30 ], [ %1, %27 ]
  %38 = phi i64 [ %26, %22 ], [ %34, %30 ], [ 0, %27 ]
  %39 = icmp slt i32 %6, %8
  br i1 %39, label %44, label %40

40:                                               ; preds = %35
  %41 = add nsw i64 %15, -1
  %42 = sub nsw i64 %41, %13
  %43 = getelementptr inbounds i8, i8* %37, i64 %42
  br label %51

44:                                               ; preds = %35
  %45 = sub nsw i64 0, %11
  %46 = icmp slt i64 %45, %13
  br i1 %46, label %51, label %47

47:                                               ; preds = %44
  %48 = sub nsw i64 1, %11
  %49 = sub nsw i64 %48, %13
  %50 = getelementptr inbounds i8, i8* %37, i64 %49
  br label %51

51:                                               ; preds = %47, %44, %40
  %52 = phi i64 [ %41, %40 ], [ %48, %47 ], [ %13, %44 ]
  %53 = phi i8* [ %43, %40 ], [ %50, %47 ], [ %37, %44 ]
  %54 = sub nsw i64 0, %36
  %55 = icmp sgt i64 %54, 0
  %56 = select i1 %55, i64 %54, i64 0
  %57 = sub nsw i64 0, %52
  %58 = icmp slt i64 %52, 0
  %59 = select i1 %58, i64 %57, i64 0
  %60 = sub nsw i64 %16, %36
  %61 = icmp slt i64 %60, %12
  %62 = select i1 %61, i64 %60, i64 %12
  %63 = sub nsw i64 %15, %52
  %64 = icmp slt i64 %63, %11
  %65 = select i1 %64, i64 %63, i64 %11
  %66 = add nsw i64 %38, %56
  %67 = mul nsw i64 %66, %3
  %68 = add nsw i64 %59, %67
  %69 = getelementptr inbounds i8, i8* %53, i64 %68
  %70 = sub nsw i64 %65, %59
  %71 = icmp slt i64 %70, 23
  br i1 %71, label %72, label %77

72:                                               ; preds = %51
  %73 = add nsw i64 %70, -1
  %74 = getelementptr inbounds [22 x void (i8*, i64, i8*, i64, i64, i64, i64)*], [22 x void (i8*, i64, i8*, i64, i64, i64, i64)*]* @vfixtbl_sse, i64 0, i64 %73
  %75 = load void (i8*, i64, i8*, i64, i64, i64, i64)*, void (i8*, i64, i8*, i64, i64, i64, i64)** %74, align 8
  %76 = getelementptr inbounds i8, i8* %0, i64 %59
  tail call void %75(i8* %76, i64 %2, i8* %69, i64 %3, i64 %56, i64 %62, i64 %12) #3
  br label %79

77:                                               ; preds = %51
  %78 = getelementptr inbounds i8, i8* %0, i64 %59
  tail call void @ff_emu_edge_vvar_sse(i8* %78, i64 %2, i8* %69, i64 %3, i64 %56, i64 %62, i64 %12, i64 %70) #3
  br label %79

79:                                               ; preds = %77, %72
  br i1 %58, label %80, label %90

80:                                               ; preds = %79
  %81 = icmp slt i64 %59, 23
  br i1 %81, label %82, label %87

82:                                               ; preds = %80
  %83 = add nsw i64 %59, -1
  %84 = ashr i64 %83, 1
  %85 = getelementptr inbounds [11 x void (i8*, i64, i64, i64)*], [11 x void (i8*, i64, i64, i64)*]* @hfixtbl_sse2, i64 0, i64 %84
  %86 = load void (i8*, i64, i64, i64)*, void (i8*, i64, i64, i64)** %85, align 8
  tail call void %86(i8* %0, i64 %2, i64 %59, i64 %12) #3
  br label %90

87:                                               ; preds = %80
  %88 = add nuw nsw i64 %59, 1
  %89 = lshr i64 %88, 1
  tail call void @ff_emu_edge_hvar_sse2(i8* %0, i64 %2, i64 %59, i64 %89, i64 %12) #3, !callees !2
  br label %90

90:                                               ; preds = %87, %82, %79
  %91 = sub nsw i64 %11, %65
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %115, label %93

93:                                               ; preds = %90
  %94 = icmp slt i64 %91, 23
  br i1 %94, label %95, label %106

95:                                               ; preds = %93
  %96 = add nsw i64 %91, -1
  %97 = ashr i64 %96, 1
  %98 = getelementptr inbounds [11 x void (i8*, i64, i64, i64)*], [11 x void (i8*, i64, i64, i64)*]* @hfixtbl_sse2, i64 0, i64 %97
  %99 = load void (i8*, i64, i64, i64)*, void (i8*, i64, i64, i64)** %98, align 8
  %100 = getelementptr inbounds i8, i8* %0, i64 %65
  %101 = and i64 %91, 1
  %102 = sub nsw i64 0, %101
  %103 = getelementptr inbounds i8, i8* %100, i64 %102
  %104 = xor i64 %101, 1
  %105 = sub nsw i64 0, %104
  tail call void %99(i8* %103, i64 %2, i64 %105, i64 %12) #3
  br label %115

106:                                              ; preds = %93
  %107 = getelementptr inbounds i8, i8* %0, i64 %65
  %108 = and i64 %91, 1
  %109 = sub nsw i64 0, %108
  %110 = getelementptr inbounds i8, i8* %107, i64 %109
  %111 = xor i64 %108, 1
  %112 = sub nsw i64 0, %111
  %113 = add nuw nsw i64 %91, 1
  %114 = ashr i64 %113, 1
  tail call void @ff_emu_edge_hvar_sse2(i8* %110, i64 %2, i64 %112, i64 %114, i64 %12) #3, !callees !2
  br label %115

115:                                              ; preds = %10, %90, %95, %106
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @emulated_edge_mc_avx2(i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32) #2 {
  %11 = sext i32 %4 to i64
  %12 = sext i32 %5 to i64
  %13 = sext i32 %6 to i64
  %14 = sext i32 %7 to i64
  %15 = sext i32 %8 to i64
  %16 = sext i32 %9 to i64
  %17 = icmp ne i32 %8, 0
  %18 = icmp ne i32 %9, 0
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %115

20:                                               ; preds = %10
  %21 = icmp slt i32 %7, %9
  br i1 %21, label %27, label %22

22:                                               ; preds = %20
  %23 = mul nsw i64 %14, %3
  %24 = sub i64 0, %23
  %25 = getelementptr inbounds i8, i8* %1, i64 %24
  %26 = add nsw i64 %16, -1
  br label %35

27:                                               ; preds = %20
  %28 = sub nsw i64 0, %12
  %29 = icmp slt i64 %28, %14
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = mul nsw i64 %14, %3
  %32 = sub i64 0, %31
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  %34 = sub nsw i64 1, %12
  br label %35

35:                                               ; preds = %30, %27, %22
  %36 = phi i64 [ %26, %22 ], [ %34, %30 ], [ %14, %27 ]
  %37 = phi i8* [ %25, %22 ], [ %33, %30 ], [ %1, %27 ]
  %38 = phi i64 [ %26, %22 ], [ %34, %30 ], [ 0, %27 ]
  %39 = icmp slt i32 %6, %8
  br i1 %39, label %44, label %40

40:                                               ; preds = %35
  %41 = add nsw i64 %15, -1
  %42 = sub nsw i64 %41, %13
  %43 = getelementptr inbounds i8, i8* %37, i64 %42
  br label %51

44:                                               ; preds = %35
  %45 = sub nsw i64 0, %11
  %46 = icmp slt i64 %45, %13
  br i1 %46, label %51, label %47

47:                                               ; preds = %44
  %48 = sub nsw i64 1, %11
  %49 = sub nsw i64 %48, %13
  %50 = getelementptr inbounds i8, i8* %37, i64 %49
  br label %51

51:                                               ; preds = %47, %44, %40
  %52 = phi i64 [ %41, %40 ], [ %48, %47 ], [ %13, %44 ]
  %53 = phi i8* [ %43, %40 ], [ %50, %47 ], [ %37, %44 ]
  %54 = sub nsw i64 0, %36
  %55 = icmp sgt i64 %54, 0
  %56 = select i1 %55, i64 %54, i64 0
  %57 = sub nsw i64 0, %52
  %58 = icmp slt i64 %52, 0
  %59 = select i1 %58, i64 %57, i64 0
  %60 = sub nsw i64 %16, %36
  %61 = icmp slt i64 %60, %12
  %62 = select i1 %61, i64 %60, i64 %12
  %63 = sub nsw i64 %15, %52
  %64 = icmp slt i64 %63, %11
  %65 = select i1 %64, i64 %63, i64 %11
  %66 = add nsw i64 %38, %56
  %67 = mul nsw i64 %66, %3
  %68 = add nsw i64 %59, %67
  %69 = getelementptr inbounds i8, i8* %53, i64 %68
  %70 = sub nsw i64 %65, %59
  %71 = icmp slt i64 %70, 23
  br i1 %71, label %72, label %77

72:                                               ; preds = %51
  %73 = add nsw i64 %70, -1
  %74 = getelementptr inbounds [22 x void (i8*, i64, i8*, i64, i64, i64, i64)*], [22 x void (i8*, i64, i8*, i64, i64, i64, i64)*]* @vfixtbl_sse, i64 0, i64 %73
  %75 = load void (i8*, i64, i8*, i64, i64, i64, i64)*, void (i8*, i64, i8*, i64, i64, i64, i64)** %74, align 8
  %76 = getelementptr inbounds i8, i8* %0, i64 %59
  tail call void %75(i8* %76, i64 %2, i8* %69, i64 %3, i64 %56, i64 %62, i64 %12) #3
  br label %79

77:                                               ; preds = %51
  %78 = getelementptr inbounds i8, i8* %0, i64 %59
  tail call void @ff_emu_edge_vvar_sse(i8* %78, i64 %2, i8* %69, i64 %3, i64 %56, i64 %62, i64 %12, i64 %70) #3
  br label %79

79:                                               ; preds = %77, %72
  br i1 %58, label %80, label %90

80:                                               ; preds = %79
  %81 = icmp slt i64 %59, 23
  br i1 %81, label %82, label %87

82:                                               ; preds = %80
  %83 = add nsw i64 %59, -1
  %84 = ashr i64 %83, 1
  %85 = getelementptr inbounds [11 x void (i8*, i64, i64, i64)*], [11 x void (i8*, i64, i64, i64)*]* @hfixtbl_avx2, i64 0, i64 %84
  %86 = load void (i8*, i64, i64, i64)*, void (i8*, i64, i64, i64)** %85, align 8
  tail call void %86(i8* %0, i64 %2, i64 %59, i64 %12) #3
  br label %90

87:                                               ; preds = %80
  %88 = add nuw nsw i64 %59, 1
  %89 = lshr i64 %88, 1
  tail call void @ff_emu_edge_hvar_avx2(i8* %0, i64 %2, i64 %59, i64 %89, i64 %12) #3, !callees !2
  br label %90

90:                                               ; preds = %87, %82, %79
  %91 = sub nsw i64 %11, %65
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %115, label %93

93:                                               ; preds = %90
  %94 = icmp slt i64 %91, 23
  br i1 %94, label %95, label %106

95:                                               ; preds = %93
  %96 = add nsw i64 %91, -1
  %97 = ashr i64 %96, 1
  %98 = getelementptr inbounds [11 x void (i8*, i64, i64, i64)*], [11 x void (i8*, i64, i64, i64)*]* @hfixtbl_avx2, i64 0, i64 %97
  %99 = load void (i8*, i64, i64, i64)*, void (i8*, i64, i64, i64)** %98, align 8
  %100 = getelementptr inbounds i8, i8* %0, i64 %65
  %101 = and i64 %91, 1
  %102 = sub nsw i64 0, %101
  %103 = getelementptr inbounds i8, i8* %100, i64 %102
  %104 = xor i64 %101, 1
  %105 = sub nsw i64 0, %104
  tail call void %99(i8* %103, i64 %2, i64 %105, i64 %12) #3
  br label %115

106:                                              ; preds = %93
  %107 = getelementptr inbounds i8, i8* %0, i64 %65
  %108 = and i64 %91, 1
  %109 = sub nsw i64 0, %108
  %110 = getelementptr inbounds i8, i8* %107, i64 %109
  %111 = xor i64 %108, 1
  %112 = sub nsw i64 0, %111
  %113 = add nuw nsw i64 %91, 1
  %114 = ashr i64 %113, 1
  tail call void @ff_emu_edge_hvar_avx2(i8* %110, i64 %2, i64 %112, i64 %114, i64 %12) #3, !callees !2
  br label %115

115:                                              ; preds = %10, %90, %95, %106
  ret void
}

declare void @ff_emu_edge_vvar_sse(i8*, i64, i8*, i64, i64, i64, i64, i64) local_unnamed_addr #1

declare void @ff_emu_edge_hvar_sse2(i8*, i64, i64, i64, i64) local_unnamed_addr #1

declare void @ff_emu_edge_vfix1_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix2_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix3_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix4_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix5_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix6_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix7_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix8_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix9_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix10_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix11_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix12_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix13_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix14_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix15_mmx(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix16_sse(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix17_sse(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix18_sse(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix19_sse(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix20_sse(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix21_sse(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_vfix22_sse(i8*, i64, i8*, i64, i64, i64, i64) #1

declare void @ff_emu_edge_hfix2_mmx(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix4_mmx(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix6_mmx(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix8_mmx(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix10_mmx(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix12_mmx(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix14_mmx(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix16_sse2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix18_sse2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix20_sse2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix22_sse2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hvar_avx2(i8*, i64, i64, i64, i64) local_unnamed_addr #1

declare void @ff_emu_edge_hfix8_avx2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix10_avx2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix12_avx2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix14_avx2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix16_avx2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix18_avx2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix20_avx2(i8*, i64, i64, i64) #1

declare void @ff_emu_edge_hfix22_avx2(i8*, i64, i64, i64) #1

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i8*, i64, i64, i64, i64)* @ff_emu_edge_hvar_avx2, void (i8*, i64, i64, i64, i64)* @ff_emu_edge_hvar_sse2}
