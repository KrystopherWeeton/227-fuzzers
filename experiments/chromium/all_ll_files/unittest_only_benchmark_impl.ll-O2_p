; ModuleID = '../../cc/benchmarks/unittest_only_benchmark_impl.cc'
source_filename = "../../cc/benchmarks/unittest_only_benchmark_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::UnittestOnlyBenchmarkImpl" = type { %"class.cc::MicroBenchmarkImpl" }
%"class.cc::MicroBenchmarkImpl" = type { i32 (...)**, %"class.base::OnceCallback", i8, %class.scoped_refptr.1 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.1 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"union.absl::variant_internal::DestructibleUnionImpl.5" }
%"union.absl::variant_internal::DestructibleUnionImpl.5" = type { %"union.absl::variant_internal::DestructibleUnionImpl.6" }
%"union.absl::variant_internal::DestructibleUnionImpl.6" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2", [4 x i8] }>
%"class.cc::LayerTreeHostImpl" = type opaque
%"class.cc::LayerImpl" = type opaque
%"class.cc::PictureLayerImpl" = type opaque

@_ZTVN2cc25UnittestOnlyBenchmarkImplE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::UnittestOnlyBenchmarkImpl"*)* @_ZN2cc25UnittestOnlyBenchmarkImplD2Ev to i8*), i8* bitcast (void (%"class.cc::UnittestOnlyBenchmarkImpl"*)* @_ZN2cc25UnittestOnlyBenchmarkImplD0Ev to i8*), i8* bitcast (void (%"class.cc::UnittestOnlyBenchmarkImpl"*, %"class.cc::LayerTreeHostImpl"*)* @_ZN2cc25UnittestOnlyBenchmarkImpl17DidCompleteCommitEPNS_17LayerTreeHostImplE to i8*), i8* bitcast (void (%"class.cc::MicroBenchmarkImpl"*, %"class.cc::LayerImpl"*)* @_ZN2cc18MicroBenchmarkImpl10RunOnLayerEPNS_9LayerImplE to i8*), i8* bitcast (void (%"class.cc::MicroBenchmarkImpl"*, %"class.cc::PictureLayerImpl"*)* @_ZN2cc18MicroBenchmarkImpl10RunOnLayerEPNS_16PictureLayerImplE to i8*)] }, align 8

@_ZN2cc25UnittestOnlyBenchmarkImplC1E13scoped_refptrIN4base22SingleThreadTaskRunnerEEPNS2_5ValueENS2_12OnceCallbackIFvNSt3__110unique_ptrIS5_NS8_14default_deleteIS5_EEEEEEE = hidden unnamed_addr alias void (%"class.cc::UnittestOnlyBenchmarkImpl"*, %"class.base::SingleThreadTaskRunner"*, %"class.base::Value"*, %"class.base::OnceCallback"*), void (%"class.cc::UnittestOnlyBenchmarkImpl"*, %"class.base::SingleThreadTaskRunner"*, %"class.base::Value"*, %"class.base::OnceCallback"*)* @_ZN2cc25UnittestOnlyBenchmarkImplC2E13scoped_refptrIN4base22SingleThreadTaskRunnerEEPNS2_5ValueENS2_12OnceCallbackIFvNSt3__110unique_ptrIS5_NS8_14default_deleteIS5_EEEEEEE
@_ZN2cc25UnittestOnlyBenchmarkImplD1Ev = hidden unnamed_addr alias void (%"class.cc::UnittestOnlyBenchmarkImpl"*), void (%"class.cc::UnittestOnlyBenchmarkImpl"*)* @_ZN2cc25UnittestOnlyBenchmarkImplD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc25UnittestOnlyBenchmarkImplC2E13scoped_refptrIN4base22SingleThreadTaskRunnerEEPNS2_5ValueENS2_12OnceCallbackIFvNSt3__110unique_ptrIS5_NS8_14default_deleteIS5_EEEEEEE(%"class.cc::UnittestOnlyBenchmarkImpl"*, %"class.base::SingleThreadTaskRunner"*, %"class.base::Value"* nocapture readnone, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmarkImpl", %"class.cc::UnittestOnlyBenchmarkImpl"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %8 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %9, i64* %10, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %7, align 8
  %11 = icmp eq %"class.base::SingleThreadTaskRunner"* %1, null
  br i1 %11, label %24, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 1 monotonic
  call void @_ZN2cc18MicroBenchmarkImplC2EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE13scoped_refptrINS1_22SingleThreadTaskRunnerEE(%"class.cc::MicroBenchmarkImpl"* %6, %"class.base::OnceCallback"* nonnull %5, %"class.base::SingleThreadTaskRunner"* nonnull %1) #4
  %15 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %15) #4
  %16 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmarkImpl", %"class.cc::UnittestOnlyBenchmarkImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2cc25UnittestOnlyBenchmarkImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %17 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.base::RefCountedThreadSafe.2", %"class.base::RefCountedThreadSafe.2"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe.2", %"class.base::RefCountedThreadSafe.2"* %17, i64 -2
  %23 = bitcast %"class.base::RefCountedThreadSafe.2"* %22 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %23) #4
  br label %27

24:                                               ; preds = %4
  call void @_ZN2cc18MicroBenchmarkImplC2EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE13scoped_refptrINS1_22SingleThreadTaskRunnerEE(%"class.cc::MicroBenchmarkImpl"* %6, %"class.base::OnceCallback"* nonnull %5, %"class.base::SingleThreadTaskRunner"* null) #4
  %25 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %25) #4
  %26 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmarkImpl", %"class.cc::UnittestOnlyBenchmarkImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2cc25UnittestOnlyBenchmarkImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  br label %27

27:                                               ; preds = %24, %12, %21
  ret void
}

declare void @_ZN2cc18MicroBenchmarkImplC2EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE13scoped_refptrINS1_22SingleThreadTaskRunnerEE(%"class.cc::MicroBenchmarkImpl"*, %"class.base::OnceCallback"*, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2cc18MicroBenchmarkImplD2Ev(%"class.cc::MicroBenchmarkImpl"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc25UnittestOnlyBenchmarkImplD2Ev(%"class.cc::UnittestOnlyBenchmarkImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmarkImpl", %"class.cc::UnittestOnlyBenchmarkImpl"* %0, i64 0, i32 0
  tail call void @_ZN2cc18MicroBenchmarkImplD2Ev(%"class.cc::MicroBenchmarkImpl"* %2) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc25UnittestOnlyBenchmarkImplD0Ev(%"class.cc::UnittestOnlyBenchmarkImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmarkImpl", %"class.cc::UnittestOnlyBenchmarkImpl"* %0, i64 0, i32 0
  tail call void @_ZN2cc18MicroBenchmarkImplD2Ev(%"class.cc::MicroBenchmarkImpl"* %2) #4
  %3 = bitcast %"class.cc::UnittestOnlyBenchmarkImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc25UnittestOnlyBenchmarkImpl17DidCompleteCommitEPNS_17LayerTreeHostImplE(%"class.cc::UnittestOnlyBenchmarkImpl"*, %"class.cc::LayerTreeHostImpl"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::UnittestOnlyBenchmarkImpl", %"class.cc::UnittestOnlyBenchmarkImpl"* %0, i64 0, i32 0
  tail call void @_ZN2cc18MicroBenchmarkImpl10NotifyDoneENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::MicroBenchmarkImpl"* %3, %"class.base::Value"* null) #4
  ret void
}

declare void @_ZN2cc18MicroBenchmarkImpl10NotifyDoneENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::MicroBenchmarkImpl"*, %"class.base::Value"*) local_unnamed_addr #1

declare void @_ZN2cc18MicroBenchmarkImpl10RunOnLayerEPNS_9LayerImplE(%"class.cc::MicroBenchmarkImpl"*, %"class.cc::LayerImpl"*) unnamed_addr #1

declare void @_ZN2cc18MicroBenchmarkImpl10RunOnLayerEPNS_16PictureLayerImplE(%"class.cc::MicroBenchmarkImpl"*, %"class.cc::PictureLayerImpl"*) unnamed_addr #1

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
