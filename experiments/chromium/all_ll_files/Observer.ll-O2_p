; ModuleID = '../../third_party/angle/src/libANGLE/Observer.cpp'
source_filename = "../../third_party/angle/src/libANGLE/Observer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.angle::ObserverInterface" = type { i32 (...)** }
%"class.angle::Subject" = type { i32 (...)**, %"class.angle::FastVector" }
%"class.angle::FastVector" = type { %"struct.std::__1::array", %"class.angle::ObserverBindingBase"**, i64, i64 }
%"struct.std::__1::array" = type { [8 x %"class.angle::ObserverBindingBase"*] }
%"class.angle::ObserverBindingBase" = type { i32 (...)**, %"class.angle::ObserverInterface"*, i64 }
%"class.angle::ObserverBinding" = type { %"class.angle::ObserverBindingBase", %"class.angle::Subject"* }

$_ZN5angle19ObserverBindingBaseD2Ev = comdat any

$_ZN5angle19ObserverBindingBaseD0Ev = comdat any

$_ZN5angle19ObserverBindingBase14onSubjectResetEv = comdat any

$_ZTVN5angle19ObserverBindingBaseE = comdat any

@_ZTVN5angle7SubjectE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.angle::Subject"*)* @_ZN5angle7SubjectD2Ev to i8*), i8* bitcast (void (%"class.angle::Subject"*)* @_ZN5angle7SubjectD0Ev to i8*)] }, align 8
@_ZTVN5angle15ObserverBindingE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.angle::ObserverBinding"*)* @_ZN5angle15ObserverBindingD2Ev to i8*), i8* bitcast (void (%"class.angle::ObserverBinding"*)* @_ZN5angle15ObserverBindingD0Ev to i8*), i8* bitcast (void (%"class.angle::ObserverBinding"*)* @_ZN5angle15ObserverBinding14onSubjectResetEv to i8*)] }, align 8
@_ZTVN5angle17ObserverInterfaceE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.angle::ObserverInterface"*)* @_ZN5angle17ObserverInterfaceD2Ev to i8*), i8* bitcast (void (%"class.angle::ObserverInterface"*)* @_ZN5angle17ObserverInterfaceD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN5angle19ObserverBindingBaseE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.angle::ObserverBindingBase"*)* @_ZN5angle19ObserverBindingBaseD2Ev to i8*), i8* bitcast (void (%"class.angle::ObserverBindingBase"*)* @_ZN5angle19ObserverBindingBaseD0Ev to i8*), i8* bitcast (void (%"class.angle::ObserverBindingBase"*)* @_ZN5angle19ObserverBindingBase14onSubjectResetEv to i8*)] }, comdat, align 8

@_ZN5angle17ObserverInterfaceD1Ev = hidden unnamed_addr alias void (%"class.angle::ObserverInterface"*), void (%"class.angle::ObserverInterface"*)* @_ZN5angle17ObserverInterfaceD2Ev
@_ZN5angle7SubjectC1Ev = hidden unnamed_addr alias void (%"class.angle::Subject"*), void (%"class.angle::Subject"*)* @_ZN5angle7SubjectC2Ev
@_ZN5angle7SubjectD1Ev = hidden unnamed_addr alias void (%"class.angle::Subject"*), void (%"class.angle::Subject"*)* @_ZN5angle7SubjectD2Ev
@_ZN5angle15ObserverBindingC1EPNS_17ObserverInterfaceEm = hidden unnamed_addr alias void (%"class.angle::ObserverBinding"*, %"class.angle::ObserverInterface"*, i64), void (%"class.angle::ObserverBinding"*, %"class.angle::ObserverInterface"*, i64)* @_ZN5angle15ObserverBindingC2EPNS_17ObserverInterfaceEm
@_ZN5angle15ObserverBindingD1Ev = hidden unnamed_addr alias void (%"class.angle::ObserverBinding"*), void (%"class.angle::ObserverBinding"*)* @_ZN5angle15ObserverBindingD2Ev
@_ZN5angle15ObserverBindingC1ERKS0_ = hidden unnamed_addr alias void (%"class.angle::ObserverBinding"*, %"class.angle::ObserverBinding"*), void (%"class.angle::ObserverBinding"*, %"class.angle::ObserverBinding"*)* @_ZN5angle15ObserverBindingC2ERKS0_

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5angle17ObserverInterfaceD2Ev(%"class.angle::ObserverInterface"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5angle17ObserverInterfaceD0Ev(%"class.angle::ObserverInterface"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5angle7SubjectC2Ev(%"class.angle::Subject"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5angle7SubjectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 1
  %4 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  store %"class.angle::ObserverBindingBase"** %4, %"class.angle::ObserverBindingBase"*** %3, align 8
  %5 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 2
  %6 = bitcast i64* %5 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8>, <2 x i64>* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle7SubjectD2Ev(%"class.angle::Subject"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5angle7SubjectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 1
  %4 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %3, align 8
  %5 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %4, i64 %6
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %20, label %9

9:                                                ; preds = %1, %9
  %10 = phi %"class.angle::ObserverBindingBase"** [ %16, %9 ], [ %4, %1 ]
  %11 = load %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %10, align 8
  %12 = bitcast %"class.angle::ObserverBindingBase"* %11 to void (%"class.angle::ObserverBindingBase"*)***
  %13 = load void (%"class.angle::ObserverBindingBase"*)**, void (%"class.angle::ObserverBindingBase"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.angle::ObserverBindingBase"*)*, void (%"class.angle::ObserverBindingBase"*)** %13, i64 2
  %15 = load void (%"class.angle::ObserverBindingBase"*)*, void (%"class.angle::ObserverBindingBase"*)** %14, align 8
  tail call void %15(%"class.angle::ObserverBindingBase"* %11) #12
  %16 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %10, i64 1
  %17 = icmp eq %"class.angle::ObserverBindingBase"** %16, %7
  br i1 %17, label %18, label %9

18:                                               ; preds = %9
  %19 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %3, align 8
  br label %20

20:                                               ; preds = %18, %1
  %21 = phi %"class.angle::ObserverBindingBase"** [ %19, %18 ], [ %4, %1 ]
  store i64 0, i64* %5, align 8
  %22 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  %23 = icmp eq %"class.angle::ObserverBindingBase"** %21, %22
  %24 = icmp eq %"class.angle::ObserverBindingBase"** %21, null
  %25 = or i1 %23, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.angle::ObserverBindingBase"** %21 to i8*
  tail call void @_ZdaPv(i8* %27) #13
  br label %28

28:                                               ; preds = %20, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle7Subject14resetObserversEv(%"class.angle::Subject"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 1
  %3 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %2, align 8
  %4 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %3, i64 %5
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %9, %1
  store i64 0, i64* %4, align 8
  ret void

9:                                                ; preds = %1, %9
  %10 = phi %"class.angle::ObserverBindingBase"** [ %16, %9 ], [ %3, %1 ]
  %11 = load %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %10, align 8
  %12 = bitcast %"class.angle::ObserverBindingBase"* %11 to void (%"class.angle::ObserverBindingBase"*)***
  %13 = load void (%"class.angle::ObserverBindingBase"*)**, void (%"class.angle::ObserverBindingBase"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.angle::ObserverBindingBase"*)*, void (%"class.angle::ObserverBindingBase"*)** %13, i64 2
  %15 = load void (%"class.angle::ObserverBindingBase"*)*, void (%"class.angle::ObserverBindingBase"*)** %14, align 8
  tail call void %15(%"class.angle::ObserverBindingBase"* %11) #12
  %16 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %10, i64 1
  %17 = icmp eq %"class.angle::ObserverBindingBase"** %16, %6
  br i1 %17, label %8, label %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle7SubjectD0Ev(%"class.angle::Subject"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5angle7SubjectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 1
  %4 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %3, align 8
  %5 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %4, i64 %6
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %20, label %9

9:                                                ; preds = %1, %9
  %10 = phi %"class.angle::ObserverBindingBase"** [ %16, %9 ], [ %4, %1 ]
  %11 = load %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %10, align 8
  %12 = bitcast %"class.angle::ObserverBindingBase"* %11 to void (%"class.angle::ObserverBindingBase"*)***
  %13 = load void (%"class.angle::ObserverBindingBase"*)**, void (%"class.angle::ObserverBindingBase"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.angle::ObserverBindingBase"*)*, void (%"class.angle::ObserverBindingBase"*)** %13, i64 2
  %15 = load void (%"class.angle::ObserverBindingBase"*)*, void (%"class.angle::ObserverBindingBase"*)** %14, align 8
  tail call void %15(%"class.angle::ObserverBindingBase"* %11) #12
  %16 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %10, i64 1
  %17 = icmp eq %"class.angle::ObserverBindingBase"** %16, %7
  br i1 %17, label %18, label %9

18:                                               ; preds = %9
  %19 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %3, align 8
  br label %20

20:                                               ; preds = %18, %1
  %21 = phi %"class.angle::ObserverBindingBase"** [ %19, %18 ], [ %4, %1 ]
  store i64 0, i64* %5, align 8
  %22 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  %23 = icmp eq %"class.angle::ObserverBindingBase"** %21, %22
  %24 = icmp eq %"class.angle::ObserverBindingBase"** %21, null
  %25 = or i1 %23, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.angle::ObserverBindingBase"** %21 to i8*
  tail call void @_ZdaPv(i8* %27) #13
  br label %28

28:                                               ; preds = %20, %26
  %29 = bitcast %"class.angle::Subject"* %0 to i8*
  tail call void @_ZdlPv(i8* %29) #13
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5angle7Subject12hasObserversEv(%"class.angle::Subject"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5angle7Subject13onStateChangeENS_14SubjectMessageE(%"class.angle::Subject"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %0, i64 0, i32 1, i32 1
  %8 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %7, align 8
  %9 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %8, i64 %4
  br label %10

10:                                               ; preds = %6, %10
  %11 = phi %"class.angle::ObserverBindingBase"** [ %21, %10 ], [ %8, %6 ]
  %12 = load %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %11, align 8
  %13 = getelementptr inbounds %"class.angle::ObserverBindingBase", %"class.angle::ObserverBindingBase"* %12, i64 0, i32 1
  %14 = load %"class.angle::ObserverInterface"*, %"class.angle::ObserverInterface"** %13, align 8
  %15 = getelementptr inbounds %"class.angle::ObserverBindingBase", %"class.angle::ObserverBindingBase"* %12, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.angle::ObserverInterface"* %14 to void (%"class.angle::ObserverInterface"*, i64, i32)***
  %18 = load void (%"class.angle::ObserverInterface"*, i64, i32)**, void (%"class.angle::ObserverInterface"*, i64, i32)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.angle::ObserverInterface"*, i64, i32)*, void (%"class.angle::ObserverInterface"*, i64, i32)** %18, i64 2
  %20 = load void (%"class.angle::ObserverInterface"*, i64, i32)*, void (%"class.angle::ObserverInterface"*, i64, i32)** %19, align 8
  tail call void %20(%"class.angle::ObserverInterface"* %14, i64 %16, i32 %1) #12
  %21 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %11, i64 1
  %22 = icmp eq %"class.angle::ObserverBindingBase"** %21, %9
  br i1 %22, label %23, label %10

23:                                               ; preds = %10, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5angle15ObserverBindingC2EPNS_17ObserverInterfaceEm(%"class.angle::ObserverBinding"* nocapture, %"class.angle::ObserverInterface"*, i64) unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 1
  store %"class.angle::ObserverInterface"* %1, %"class.angle::ObserverInterface"** %5, align 8
  %6 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 2
  store i64 %2, i64* %6, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5angle15ObserverBindingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 1
  store %"class.angle::Subject"* null, %"class.angle::Subject"** %7, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle15ObserverBindingD2Ev(%"class.angle::ObserverBinding"*) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5angle15ObserverBindingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 1
  %4 = load %"class.angle::Subject"*, %"class.angle::Subject"** %3, align 8
  %5 = icmp eq %"class.angle::Subject"* %4, null
  br i1 %5, label %33, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %4, i64 0, i32 1, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %31, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %4, i64 0, i32 1, i32 1
  %14 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %13, align 8
  br label %17

15:                                               ; preds = %17
  %16 = icmp eq i64 %22, %10
  br i1 %16, label %31, label %17

17:                                               ; preds = %15, %12
  %18 = phi i64 [ 0, %12 ], [ %22, %15 ]
  %19 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %14, i64 %18
  %20 = load %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %19, align 8
  %21 = icmp eq %"class.angle::ObserverBindingBase"* %20, %7
  %22 = add nuw i64 %18, 1
  br i1 %21, label %23, label %15

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %14, i64 %18
  %25 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %14, i64 %10
  %26 = bitcast %"class.angle::ObserverBindingBase"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.angle::ObserverBindingBase"** %24 to i64*
  store i64 %27, i64* %28, align 8
  %29 = load i64, i64* %8, align 8
  %30 = add i64 %29, -1
  br label %31

31:                                               ; preds = %15, %23, %6
  %32 = phi i64 [ 0, %6 ], [ %30, %23 ], [ %10, %15 ]
  store i64 %32, i64* %8, align 8
  br label %33

33:                                               ; preds = %1, %31
  store %"class.angle::Subject"* null, %"class.angle::Subject"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle15ObserverBindingD0Ev(%"class.angle::ObserverBinding"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5angle15ObserverBindingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 1
  %4 = load %"class.angle::Subject"*, %"class.angle::Subject"** %3, align 8
  %5 = icmp eq %"class.angle::Subject"* %4, null
  br i1 %5, label %33, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %4, i64 0, i32 1, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %31, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %4, i64 0, i32 1, i32 1
  %14 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %13, align 8
  br label %17

15:                                               ; preds = %17
  %16 = icmp eq i64 %22, %10
  br i1 %16, label %31, label %17

17:                                               ; preds = %15, %12
  %18 = phi i64 [ 0, %12 ], [ %22, %15 ]
  %19 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %14, i64 %18
  %20 = load %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %19, align 8
  %21 = icmp eq %"class.angle::ObserverBindingBase"* %20, %7
  %22 = add nuw i64 %18, 1
  br i1 %21, label %23, label %15

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %14, i64 %18
  %25 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %14, i64 %10
  %26 = bitcast %"class.angle::ObserverBindingBase"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.angle::ObserverBindingBase"** %24 to i64*
  store i64 %27, i64* %28, align 8
  %29 = load i64, i64* %8, align 8
  %30 = add i64 %29, -1
  br label %31

31:                                               ; preds = %15, %23, %6
  %32 = phi i64 [ 0, %6 ], [ %30, %23 ], [ %10, %15 ]
  store i64 %32, i64* %8, align 8
  br label %33

33:                                               ; preds = %1, %31
  %34 = bitcast %"class.angle::ObserverBinding"* %0 to i8*
  tail call void @_ZdlPv(i8* %34) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle15ObserverBindingC2ERKS0_(%"class.angle::ObserverBinding"* nocapture, %"class.angle::ObserverBinding"* nocapture readonly dereferenceable(32)) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5angle19ObserverBindingBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %1, i64 0, i32 0, i32 1
  %6 = bitcast %"class.angle::ObserverInterface"** %4 to i8*
  %7 = bitcast %"class.angle::ObserverInterface"** %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5angle15ObserverBindingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %8 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %1, i64 0, i32 1
  %10 = bitcast %"class.angle::Subject"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.angle::Subject"** %8 to i64*
  store i64 %11, i64* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.angle::ObserverBinding"* @_ZN5angle15ObserverBindingaSERKS0_(%"class.angle::ObserverBinding"* returned, %"class.angle::ObserverBinding"* nocapture readonly dereferenceable(32)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"class.angle::ObserverInterface"** %3 to i8*
  %6 = bitcast %"class.angle::ObserverInterface"** %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 16, i1 false) #12
  %7 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %1, i64 0, i32 1
  %8 = bitcast %"class.angle::Subject"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 1
  %11 = bitcast %"class.angle::Subject"** %10 to i64*
  store i64 %9, i64* %11, align 8
  ret %"class.angle::ObserverBinding"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle15ObserverBinding4bindEPNS_7SubjectE(%"class.angle::ObserverBinding"*, %"class.angle::Subject"*) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 1
  %4 = load %"class.angle::Subject"*, %"class.angle::Subject"** %3, align 8
  %5 = icmp eq %"class.angle::Subject"* %4, null
  br i1 %5, label %33, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %4, i64 0, i32 1, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %31, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %4, i64 0, i32 1, i32 1
  %14 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %13, align 8
  br label %17

15:                                               ; preds = %17
  %16 = icmp eq i64 %22, %10
  br i1 %16, label %31, label %17

17:                                               ; preds = %15, %12
  %18 = phi i64 [ 0, %12 ], [ %22, %15 ]
  %19 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %14, i64 %18
  %20 = load %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %19, align 8
  %21 = icmp eq %"class.angle::ObserverBindingBase"* %20, %7
  %22 = add nuw i64 %18, 1
  br i1 %21, label %23, label %15

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %14, i64 %18
  %25 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %14, i64 %10
  %26 = bitcast %"class.angle::ObserverBindingBase"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.angle::ObserverBindingBase"** %24 to i64*
  store i64 %27, i64* %28, align 8
  %29 = load i64, i64* %8, align 8
  %30 = add i64 %29, -1
  br label %31

31:                                               ; preds = %15, %6, %23
  %32 = phi i64 [ 0, %6 ], [ %30, %23 ], [ %10, %15 ]
  store i64 %32, i64* %8, align 8
  br label %33

33:                                               ; preds = %2, %31
  store %"class.angle::Subject"* %1, %"class.angle::Subject"** %3, align 8
  %34 = icmp eq %"class.angle::Subject"* %1, null
  br i1 %34, label %89, label %35

35:                                               ; preds = %33
  %36 = ptrtoint %"class.angle::ObserverBinding"* %0 to i64
  %37 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %1, i64 0, i32 1, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %1, i64 0, i32 1, i32 3
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i64 %38, %40
  br i1 %41, label %42, label %82

42:                                               ; preds = %35
  %43 = add i64 %38, 1
  %44 = icmp eq i64 %38, -1
  br i1 %44, label %82, label %45

45:                                               ; preds = %42
  %46 = icmp ugt i64 %38, 8
  %47 = select i1 %46, i64 %38, i64 8
  br label %48

48:                                               ; preds = %48, %45
  %49 = phi i64 [ %47, %45 ], [ %51, %48 ]
  %50 = icmp ult i64 %49, %43
  %51 = shl i64 %49, 1
  br i1 %50, label %48, label %52

52:                                               ; preds = %48
  %53 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %49, i64 8) #12
  %54 = extractvalue { i64, i1 } %53, 1
  %55 = extractvalue { i64, i1 } %53, 0
  %56 = select i1 %54, i64 -1, i64 %55
  %57 = tail call i8* @_Znam(i64 %56) #13
  %58 = icmp eq i64 %38, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %52
  %60 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %1, i64 0, i32 1, i32 1
  %61 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %60, align 8
  %62 = bitcast %"class.angle::ObserverBindingBase"** %61 to i8*
  br label %69

63:                                               ; preds = %52
  %64 = shl nuw i64 %38, 3
  %65 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %1, i64 0, i32 1, i32 1
  %66 = bitcast %"class.angle::ObserverBindingBase"*** %65 to i8**
  %67 = load i8*, i8** %66, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 8 %57, i8* align 8 %67, i64 %64, i1 false) #12
  %68 = bitcast i8* %67 to %"class.angle::ObserverBindingBase"**
  br label %69

69:                                               ; preds = %63, %59
  %70 = phi i8* [ %62, %59 ], [ %67, %63 ]
  %71 = phi %"class.angle::ObserverBindingBase"** [ %61, %59 ], [ %68, %63 ]
  %72 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %1, i64 0, i32 1, i32 1
  %73 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %1, i64 0, i32 1, i32 0, i32 0, i64 0
  %74 = icmp eq %"class.angle::ObserverBindingBase"** %71, %73
  %75 = icmp eq %"class.angle::ObserverBindingBase"** %71, null
  %76 = or i1 %74, %75
  br i1 %76, label %79, label %77

77:                                               ; preds = %69
  tail call void @_ZdaPv(i8* %70) #13
  %78 = load i64, i64* %37, align 8
  br label %79

79:                                               ; preds = %77, %69
  %80 = phi i64 [ %78, %77 ], [ %38, %69 ]
  %81 = bitcast %"class.angle::ObserverBindingBase"*** %72 to i8**
  store i8* %57, i8** %81, align 8
  store i64 %49, i64* %39, align 8
  br label %82

82:                                               ; preds = %35, %42, %79
  %83 = phi i64 [ %80, %79 ], [ -1, %42 ], [ %38, %35 ]
  %84 = getelementptr inbounds %"class.angle::Subject", %"class.angle::Subject"* %1, i64 0, i32 1, i32 1
  %85 = load %"class.angle::ObserverBindingBase"**, %"class.angle::ObserverBindingBase"*** %84, align 8
  %86 = add i64 %83, 1
  store i64 %86, i64* %37, align 8
  %87 = getelementptr inbounds %"class.angle::ObserverBindingBase"*, %"class.angle::ObserverBindingBase"** %85, i64 %83
  %88 = bitcast %"class.angle::ObserverBindingBase"** %87 to i64*
  store i64 %36, i64* %88, align 8
  br label %89

89:                                               ; preds = %33, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5angle15ObserverBinding13onStateChangeENS_14SubjectMessageE(%"class.angle::ObserverBinding"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 1
  %4 = load %"class.angle::ObserverInterface"*, %"class.angle::ObserverInterface"** %3, align 8
  %5 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.angle::ObserverInterface"* %4 to void (%"class.angle::ObserverInterface"*, i64, i32)***
  %8 = load void (%"class.angle::ObserverInterface"*, i64, i32)**, void (%"class.angle::ObserverInterface"*, i64, i32)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.angle::ObserverInterface"*, i64, i32)*, void (%"class.angle::ObserverInterface"*, i64, i32)** %8, i64 2
  %10 = load void (%"class.angle::ObserverInterface"*, i64, i32)*, void (%"class.angle::ObserverInterface"*, i64, i32)** %9, align 8
  tail call void %10(%"class.angle::ObserverInterface"* %4, i64 %6, i32 %1) #12
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5angle15ObserverBinding14onSubjectResetEv(%"class.angle::ObserverBinding"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.angle::ObserverBinding", %"class.angle::ObserverBinding"* %0, i64 0, i32 1
  store %"class.angle::Subject"* null, %"class.angle::Subject"** %2, align 8
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle19ObserverBindingBaseD2Ev(%"class.angle::ObserverBindingBase"*) unnamed_addr #4 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle19ObserverBindingBaseD0Ev(%"class.angle::ObserverBindingBase"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.angle::ObserverBindingBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle19ObserverBindingBase14onSubjectResetEv(%"class.angle::ObserverBindingBase"*) unnamed_addr #4 comdat align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #8

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #8

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
