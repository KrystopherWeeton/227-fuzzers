; ModuleID = '../../net/cert/internal/cert_issuer_source_static.cc'
source_filename = "../../net/cert/internal/cert_issuer_source_static.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::CertIssuerSourceStatic" = type { %"class.net::CertIssuerSource", %"class.std::__1::unordered_multimap" }
%"class.net::CertIssuerSource" = type { i32 (...)** }
%"class.std::__1::unordered_multimap" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.11", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { float }
%"class.net::ParsedCertificate" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::unique_ptr.15", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::BitString", %"struct.net::ParsedTbsCertificate", %"class.std::__1::unique_ptr.19", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"struct.net::ParsedBasicConstraints", i8, [3 x i8], %"class.net::der::BitString", i8, %"class.std::__1::vector", %"struct.net::ParsedExtension", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.39", i8, [7 x i8], %"struct.net::ParsedExtension", %"class.std::__1::vector.45", %"class.std::__1::vector.45", i8, %"class.std::__1::vector", i8, %"struct.net::ParsedPolicyConstraints", i8, %"class.std::__1::vector.52", i8, i8, %"class.absl::optional", %"class.absl::optional.60", %"class.std::__1::map" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.net::der::Input" = type { i8*, i64 }
%"struct.net::ParsedTbsCertificate" = type { i32, %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"struct.net::der::GeneralizedTime", %"struct.net::der::GeneralizedTime", %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8], %"class.net::der::BitString", i8, [7 x i8], %"class.net::der::BitString", i8, %"class.net::der::Input" }
%"struct.net::der::GeneralizedTime" = type { i16, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.net::SignatureAlgorithm"* }
%"class.net::SignatureAlgorithm" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.net::ParsedBasicConstraints" = type { i8, i8, i8 }
%"class.net::der::BitString" = type <{ %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.net::GeneralNames"* }
%"struct.net::GeneralNames" = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.net::NameConstraints"* }
%"class.net::NameConstraints" = type opaque
%"struct.net::ParsedExtension" = type <{ %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.47" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.base::BasicStringPiece"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::der::Input"*, %"class.net::der::Input"*, %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.net::der::Input"* }
%"struct.net::ParsedPolicyConstraints" = type { i8, i8, i8, i8 }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.net::ParsedPolicyMapping"*, %"struct.net::ParsedPolicyMapping"*, %"class.std::__1::__compressed_pair.54" }
%"struct.net::ParsedPolicyMapping" = type { %"class.net::der::Input", %"class.net::der::Input" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.net::ParsedPolicyMapping"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.59 }
%union.anon.59 = type { %"struct.net::ParsedAuthorityKeyIdentifier" }
%"struct.net::ParsedAuthorityKeyIdentifier" = type { %"class.absl::optional.60", %"class.absl::optional.60", %"class.absl::optional.60" }
%"class.absl::optional.60" = type { %"class.absl::optional_internal::optional_data.61" }
%"class.absl::optional_internal::optional_data.61" = type { %"class.absl::optional_internal::optional_data_base.62" }
%"class.absl::optional_internal::optional_data_base.62" = type { %"class.absl::optional_internal::optional_data_dtor_base.63" }
%"class.absl::optional_internal::optional_data_dtor_base.63" = type { i8, %union.anon.64 }
%union.anon.64 = type { %"class.net::der::Input" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.69", %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::pair" = type { %"class.base::BasicStringPiece", %class.scoped_refptr }
%class.scoped_refptr = type { %"class.net::ParsedCertificate"* }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %class.scoped_refptr* }
%"struct.std::__1::__hash_node" = type { %"struct.std::__1::__hash_node_base", i64, %"struct.std::__1::__hash_value_type" }
%"struct.std::__1::__hash_value_type" = type { %"struct.std::__1::pair.85" }
%"struct.std::__1::pair.85" = type { %"class.base::BasicStringPiece", %class.scoped_refptr }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.net::CertIssuerSource::Request"* }
%"class.net::CertIssuerSource::Request" = type { i32 (...)** }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE15__emplace_multiIJNS_4pairIS6_SA_EEEEENS_15__hash_iteratorIPNS_11__hash_nodeISB_PvEEEEDpOT_ = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE27__node_insert_multi_prepareEmRSB_ = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE6rehashEm = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE8__rehashEm = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE4findIS6_EENS_15__hash_iteratorIPNS_11__hash_nodeISB_PvEEEERKT_ = comdat any

$_ZNSt3__16vectorI13scoped_refptrIN3net17ParsedCertificateEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_ = comdat any

@_ZTVN3net22CertIssuerSourceStaticE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::CertIssuerSourceStatic"*)* @_ZN3net22CertIssuerSourceStaticD2Ev to i8*), i8* bitcast (void (%"class.net::CertIssuerSourceStatic"*)* @_ZN3net22CertIssuerSourceStaticD0Ev to i8*), i8* bitcast (void (%"class.net::CertIssuerSourceStatic"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.77"*)* @_ZN3net22CertIssuerSourceStatic16SyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__16vectorI13scoped_refptrIS1_ENS4_9allocatorIS7_EEEE to i8*), i8* bitcast (void (%"class.net::CertIssuerSourceStatic"*, %"class.net::ParsedCertificate"*, %"class.std::__1::unique_ptr.86"*)* @_ZN3net22CertIssuerSourceStatic17AsyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__110unique_ptrINS_16CertIssuerSource7RequestENS4_14default_deleteIS7_EEEE to i8*)] }, align 8

@_ZN3net22CertIssuerSourceStaticC1Ev = hidden unnamed_addr alias void (%"class.net::CertIssuerSourceStatic"*), void (%"class.net::CertIssuerSourceStatic"*)* @_ZN3net22CertIssuerSourceStaticC2Ev
@_ZN3net22CertIssuerSourceStaticD1Ev = hidden unnamed_addr alias void (%"class.net::CertIssuerSourceStatic"*), void (%"class.net::CertIssuerSourceStatic"*)* @_ZN3net22CertIssuerSourceStaticD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22CertIssuerSourceStaticC2Ev(%"class.net::CertIssuerSourceStatic"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net22CertIssuerSourceStaticE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 1, i32 0, i32 3
  %5 = bitcast %"class.std::__1::__compressed_pair.11"* %4 to i32*
  %6 = bitcast %"class.std::__1::unordered_multimap"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false) #11
  store i32 1065353216, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22CertIssuerSourceStaticD2Ev(%"class.net::CertIssuerSourceStatic"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net22CertIssuerSourceStaticE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %3, align 8
  %5 = icmp eq %"struct.std::__1::__hash_node_base"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %1, %20
  %7 = phi %"struct.std::__1::__hash_node_base"* [ %9, %20 ], [ %4, %1 ]
  %8 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %7, i64 0, i32 0
  %9 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %8, align 8
  %10 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %7, i64 4
  %11 = bitcast %"struct.std::__1::__hash_node_base"* %10 to %"class.net::ParsedCertificate"**
  %12 = load %"class.net::ParsedCertificate"*, %"class.net::ParsedCertificate"** %11, align 8
  %13 = icmp eq %"class.net::ParsedCertificate"* %12, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw sub i32* %15, i32 1 acq_rel
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  tail call void @_ZN3net17ParsedCertificateD1Ev(%"class.net::ParsedCertificate"* nonnull %12) #11
  %19 = bitcast %"class.net::ParsedCertificate"* %12 to i8*
  tail call void @_ZdlPv(i8* %19) #12
  br label %20

20:                                               ; preds = %18, %14, %6
  %21 = bitcast %"struct.std::__1::__hash_node_base"* %7 to i8*
  tail call void @_ZdlPv(i8* %21) #12
  %22 = icmp eq %"struct.std::__1::__hash_node_base"* %9, null
  br i1 %22, label %23, label %6

23:                                               ; preds = %20, %1
  %24 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %24, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %24, align 8
  %26 = icmp eq %"struct.std::__1::__hash_node_base"** %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = bitcast %"struct.std::__1::__hash_node_base"** %25 to i8*
  tail call void @_ZdlPv(i8* %28) #12
  br label %29

29:                                               ; preds = %23, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22CertIssuerSourceStaticD0Ev(%"class.net::CertIssuerSourceStatic"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net22CertIssuerSourceStaticE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %3, align 8
  %5 = icmp eq %"struct.std::__1::__hash_node_base"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %1, %20
  %7 = phi %"struct.std::__1::__hash_node_base"* [ %9, %20 ], [ %4, %1 ]
  %8 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %7, i64 0, i32 0
  %9 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %8, align 8
  %10 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %7, i64 4
  %11 = bitcast %"struct.std::__1::__hash_node_base"* %10 to %"class.net::ParsedCertificate"**
  %12 = load %"class.net::ParsedCertificate"*, %"class.net::ParsedCertificate"** %11, align 8
  %13 = icmp eq %"class.net::ParsedCertificate"* %12, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw sub i32* %15, i32 1 acq_rel
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  tail call void @_ZN3net17ParsedCertificateD1Ev(%"class.net::ParsedCertificate"* nonnull %12) #11
  %19 = bitcast %"class.net::ParsedCertificate"* %12 to i8*
  tail call void @_ZdlPv(i8* %19) #12
  br label %20

20:                                               ; preds = %18, %14, %6
  %21 = bitcast %"struct.std::__1::__hash_node_base"* %7 to i8*
  tail call void @_ZdlPv(i8* %21) #12
  %22 = icmp eq %"struct.std::__1::__hash_node_base"* %9, null
  br i1 %22, label %23, label %6

23:                                               ; preds = %20, %1
  %24 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %24, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %24, align 8
  %26 = icmp eq %"struct.std::__1::__hash_node_base"** %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = bitcast %"struct.std::__1::__hash_node_base"** %25 to i8*
  tail call void @_ZdlPv(i8* %28) #12
  br label %29

29:                                               ; preds = %23, %27
  %30 = bitcast %"class.net::CertIssuerSourceStatic"* %0 to i8*
  tail call void @_ZdlPv(i8* %30) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22CertIssuerSourceStatic7AddCertE13scoped_refptrINS_17ParsedCertificateEE(%"class.net::CertIssuerSourceStatic"*, %"class.net::ParsedCertificate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"class.net::der::Input"*
  %5 = alloca %"struct.std::__1::pair", align 8
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %"class.net::der::Input"*
  %8 = ptrtoint %"class.net::ParsedCertificate"* %1 to i64
  %9 = bitcast %"struct.std::__1::pair"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #11
  %10 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  %11 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %1, i64 0, i32 8
  call void @_ZN3net3der5InputC1EPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.net::der::Input"* nonnull %4, %"class.std::__1::basic_string"* %12) #11
  %13 = load <2 x i64>, <2 x i64>* %3, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11)
  store <2 x i64> %13, <2 x i64>* %6, align 16
  %14 = call { i8*, i64 } @_ZNK3net3der5Input13AsStringPieceEv(%"class.net::der::Input"* nonnull %7) #11
  %15 = extractvalue { i8*, i64 } %14, 0
  %16 = extractvalue { i8*, i64 } %14, 1
  %17 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %5, i64 0, i32 0, i32 0
  store i8* %15, i8** %17, align 8
  %18 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %5, i64 0, i32 0, i32 1
  store i64 %16, i64* %18, align 8
  %19 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %5, i64 0, i32 1
  %20 = bitcast %class.scoped_refptr* %19 to i64*
  store i64 %8, i64* %20, align 8, !alias.scope !2
  %21 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 1, i32 0
  %22 = call %"struct.std::__1::__hash_node_base"* @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE15__emplace_multiIJNS_4pairIS6_SA_EEEEENS_15__hash_iteratorIPNS_11__hash_nodeISB_PvEEEEDpOT_(%"class.std::__1::__hash_table"* %21, %"struct.std::__1::pair"* nonnull dereferenceable(24) %5) #11
  %23 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %5, i64 0, i32 1, i32 0
  %24 = load %"class.net::ParsedCertificate"*, %"class.net::ParsedCertificate"** %23, align 8
  %25 = icmp eq %"class.net::ParsedCertificate"* %24, null
  br i1 %25, label %32, label %26

26:                                               ; preds = %2
  %27 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw sub i32* %27, i32 1 acq_rel
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %32

30:                                               ; preds = %26
  call void @_ZN3net17ParsedCertificateD1Ev(%"class.net::ParsedCertificate"* nonnull %24) #11
  %31 = bitcast %"class.net::ParsedCertificate"* %24 to i8*
  call void @_ZdlPv(i8* %31) #12
  br label %32

32:                                               ; preds = %30, %26, %2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare { i8*, i64 } @_ZNK3net3der5Input13AsStringPieceEv(%"class.net::der::Input"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22CertIssuerSourceStatic16SyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__16vectorI13scoped_refptrIS1_ENS4_9allocatorIS7_EEEE(%"class.net::CertIssuerSourceStatic"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.77"*) unnamed_addr #0 align 2 {
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.net::der::Input"*
  %6 = alloca %"class.base::BasicStringPiece", align 8
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %"class.net::der::Input"*
  %9 = bitcast %"class.base::BasicStringPiece"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #11
  %10 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  %11 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %1, i64 0, i32 9
  call void @_ZN3net3der5InputC1EPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.net::der::Input"* nonnull %5, %"class.std::__1::basic_string"* %12) #11
  %13 = load <2 x i64>, <2 x i64>* %4, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11)
  store <2 x i64> %13, <2 x i64>* %7, align 16
  %14 = call { i8*, i64 } @_ZNK3net3der5Input13AsStringPieceEv(%"class.net::der::Input"* nonnull %8) #11
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %6, i64 0, i32 0
  %16 = extractvalue { i8*, i64 } %14, 0
  store i8* %16, i8** %15, align 8
  %17 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %6, i64 0, i32 1
  %18 = extractvalue { i8*, i64 } %14, 1
  store i64 %18, i64* %17, align 8
  %19 = getelementptr inbounds %"class.net::CertIssuerSourceStatic", %"class.net::CertIssuerSourceStatic"* %0, i64 0, i32 1, i32 0
  %20 = call %"struct.std::__1::__hash_node_base"* @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE4findIS6_EENS_15__hash_iteratorIPNS_11__hash_nodeISB_PvEEEERKT_(%"class.std::__1::__hash_table"* %19, %"class.base::BasicStringPiece"* nonnull dereferenceable(16) %6) #11
  %21 = ptrtoint %"struct.std::__1::__hash_node_base"* %20 to i64
  %22 = icmp eq %"struct.std::__1::__hash_node_base"* %20, null
  br i1 %22, label %41, label %23

23:                                               ; preds = %3
  %24 = load i64, i64* %17, align 8
  %25 = load i8*, i8** %15, align 8
  br label %26

26:                                               ; preds = %36, %23
  %27 = phi i64 [ %29, %36 ], [ %21, %23 ]
  %28 = inttoptr i64 %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %41, label %31

31:                                               ; preds = %26
  %32 = inttoptr i64 %29 to %"struct.std::__1::__hash_node"*
  %33 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %32, i64 0, i32 2, i32 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 %34, %24
  br i1 %35, label %36, label %41

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %32, i64 0, i32 2, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @bcmp(i8* %38, i8* %25, i64 %24) #11
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %26, label %41

41:                                               ; preds = %26, %31, %36, %3
  %42 = phi i64 [ %21, %3 ], [ 0, %26 ], [ %29, %31 ], [ %29, %36 ]
  %43 = inttoptr i64 %42 to %"struct.std::__1::__hash_node_base"*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #11
  %44 = icmp eq %"struct.std::__1::__hash_node_base"* %20, %43
  br i1 %44, label %49, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %2, i64 0, i32 0, i32 1
  %47 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %48 = bitcast %class.scoped_refptr** %46 to i64*
  br label %50

49:                                               ; preds = %69, %41
  ret void

50:                                               ; preds = %45, %69
  %51 = phi i64 [ %21, %45 ], [ %71, %69 ]
  %52 = inttoptr i64 %51 to %"struct.std::__1::__hash_node"*
  %53 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %52, i64 0, i32 2, i32 0, i32 1
  %54 = load %class.scoped_refptr*, %class.scoped_refptr** %46, align 8
  %55 = load %class.scoped_refptr*, %class.scoped_refptr** %47, align 8
  %56 = icmp eq %class.scoped_refptr* %54, %55
  br i1 %56, label %68, label %57

57:                                               ; preds = %50
  %58 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %53, i64 0, i32 0
  %59 = load %"class.net::ParsedCertificate"*, %"class.net::ParsedCertificate"** %58, align 8
  %60 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %54, i64 0, i32 0
  store %"class.net::ParsedCertificate"* %59, %"class.net::ParsedCertificate"** %60, align 8
  %61 = icmp eq %"class.net::ParsedCertificate"* %59, null
  br i1 %61, label %65, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = atomicrmw add i32* %63, i32 1 monotonic
  br label %65

65:                                               ; preds = %62, %57
  %66 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %54, i64 1
  %67 = ptrtoint %class.scoped_refptr* %66 to i64
  store i64 %67, i64* %48, align 8
  br label %69

68:                                               ; preds = %50
  call void @_ZNSt3__16vectorI13scoped_refptrIN3net17ParsedCertificateEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(%"class.std::__1::vector.77"* %2, %class.scoped_refptr* dereferenceable(8) %53) #11
  br label %69

69:                                               ; preds = %65, %68
  %70 = inttoptr i64 %51 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = inttoptr i64 %71 to %"struct.std::__1::__hash_node_base"*
  %73 = icmp eq %"struct.std::__1::__hash_node_base"* %72, %43
  br i1 %73, label %49, label %50
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net22CertIssuerSourceStatic17AsyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__110unique_ptrINS_16CertIssuerSource7RequestENS4_14default_deleteIS7_EEEE(%"class.net::CertIssuerSourceStatic"* nocapture readnone, %"class.net::ParsedCertificate"* nocapture readnone, %"class.std::__1::unique_ptr.86"* nocapture) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.86"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.net::CertIssuerSource::Request"*, %"class.net::CertIssuerSource::Request"** %4, align 8
  store %"class.net::CertIssuerSource::Request"* null, %"class.net::CertIssuerSource::Request"** %4, align 8
  %6 = icmp eq %"class.net::CertIssuerSource::Request"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %3
  %8 = bitcast %"class.net::CertIssuerSource::Request"* %5 to void (%"class.net::CertIssuerSource::Request"*)***
  %9 = load void (%"class.net::CertIssuerSource::Request"*)**, void (%"class.net::CertIssuerSource::Request"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.net::CertIssuerSource::Request"*)*, void (%"class.net::CertIssuerSource::Request"*)** %9, i64 1
  %11 = load void (%"class.net::CertIssuerSource::Request"*)*, void (%"class.net::CertIssuerSource::Request"*)** %10, align 8
  tail call void %11(%"class.net::CertIssuerSource::Request"* nonnull %5) #11
  br label %12

12:                                               ; preds = %3, %7
  ret void
}

declare void @_ZN3net3der5InputC1EPKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.net::der::Input"*, %"class.std::__1::basic_string"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3net17ParsedCertificateD1Ev(%"class.net::ParsedCertificate"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.std::__1::__hash_node_base"* @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE15__emplace_multiIJNS_4pairIS6_SA_EEEEENS_15__hash_iteratorIPNS_11__hash_nodeISB_PvEEEEDpOT_(%"class.std::__1::__hash_table"*, %"struct.std::__1::pair"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = tail call i8* @_Znwm(i64 40) #12, !noalias !5
  %4 = getelementptr inbounds i8, i8* %3, i64 16
  %5 = bitcast %"struct.std::__1::pair"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 16, i1 false) #11, !noalias !5
  %6 = getelementptr inbounds i8, i8* %3, i64 32
  %7 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 1
  %8 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %7, i64 0, i32 0
  %9 = bitcast %class.scoped_refptr* %7 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !5
  %11 = bitcast i8* %6 to i64*
  store i64 %10, i64* %11, align 8, !noalias !5
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %8, align 8, !noalias !5
  %12 = bitcast i8* %4 to i8**
  %13 = load i8*, i8** %12, align 8, !noalias !5
  %14 = getelementptr inbounds i8, i8* %3, i64 24
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 8, !noalias !5
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %2
  %19 = add i64 %16, -1
  %20 = and i64 %16, 7
  %21 = icmp ult i64 %19, 7
  br i1 %21, label %75, label %22

22:                                               ; preds = %18
  %23 = sub i64 %16, %20
  br label %29

24:                                               ; preds = %2
  %25 = getelementptr inbounds i8, i8* %3, i64 8
  %26 = bitcast i8* %25 to i64*
  store i64 0, i64* %26, align 8, !noalias !5
  %27 = bitcast i8* %3 to %"struct.std::__1::__hash_node_base"**
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %27, align 8, !noalias !5
  %28 = bitcast i8* %4 to %"struct.std::__1::__hash_value_type"*
  br label %165

29:                                               ; preds = %29, %22
  %30 = phi i64 [ 0, %22 ], [ %71, %29 ]
  %31 = phi i8* [ %13, %22 ], [ %72, %29 ]
  %32 = phi i64 [ %23, %22 ], [ %73, %29 ]
  %33 = load i8, i8* %31, align 1, !noalias !5
  %34 = mul i64 %30, 131
  %35 = sext i8 %33 to i64
  %36 = add i64 %34, %35
  %37 = getelementptr inbounds i8, i8* %31, i64 1
  %38 = load i8, i8* %37, align 1, !noalias !5
  %39 = mul i64 %36, 131
  %40 = sext i8 %38 to i64
  %41 = add i64 %39, %40
  %42 = getelementptr inbounds i8, i8* %31, i64 2
  %43 = load i8, i8* %42, align 1, !noalias !5
  %44 = mul i64 %41, 131
  %45 = sext i8 %43 to i64
  %46 = add i64 %44, %45
  %47 = getelementptr inbounds i8, i8* %31, i64 3
  %48 = load i8, i8* %47, align 1, !noalias !5
  %49 = mul i64 %46, 131
  %50 = sext i8 %48 to i64
  %51 = add i64 %49, %50
  %52 = getelementptr inbounds i8, i8* %31, i64 4
  %53 = load i8, i8* %52, align 1, !noalias !5
  %54 = mul i64 %51, 131
  %55 = sext i8 %53 to i64
  %56 = add i64 %54, %55
  %57 = getelementptr inbounds i8, i8* %31, i64 5
  %58 = load i8, i8* %57, align 1, !noalias !5
  %59 = mul i64 %56, 131
  %60 = sext i8 %58 to i64
  %61 = add i64 %59, %60
  %62 = getelementptr inbounds i8, i8* %31, i64 6
  %63 = load i8, i8* %62, align 1, !noalias !5
  %64 = mul i64 %61, 131
  %65 = sext i8 %63 to i64
  %66 = add i64 %64, %65
  %67 = getelementptr inbounds i8, i8* %31, i64 7
  %68 = load i8, i8* %67, align 1, !noalias !5
  %69 = mul i64 %66, 131
  %70 = sext i8 %68 to i64
  %71 = add i64 %69, %70
  %72 = getelementptr inbounds i8, i8* %31, i64 8
  %73 = add i64 %32, -8
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %29

75:                                               ; preds = %29, %18
  %76 = phi i64 [ undef, %18 ], [ %71, %29 ]
  %77 = phi i64 [ 0, %18 ], [ %71, %29 ]
  %78 = phi i8* [ %13, %18 ], [ %72, %29 ]
  %79 = icmp eq i64 %20, 0
  br i1 %79, label %91, label %80

80:                                               ; preds = %75, %80
  %81 = phi i64 [ %87, %80 ], [ %77, %75 ]
  %82 = phi i8* [ %88, %80 ], [ %78, %75 ]
  %83 = phi i64 [ %89, %80 ], [ %20, %75 ]
  %84 = load i8, i8* %82, align 1, !noalias !5
  %85 = mul i64 %81, 131
  %86 = sext i8 %84 to i64
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 1
  %89 = add i64 %83, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %80, !llvm.loop !8

91:                                               ; preds = %80, %75
  %92 = phi i64 [ %76, %75 ], [ %87, %80 ]
  %93 = getelementptr inbounds i8, i8* %3, i64 8
  %94 = bitcast i8* %93 to i64*
  store i64 %92, i64* %94, align 8, !noalias !5
  %95 = bitcast i8* %3 to %"struct.std::__1::__hash_node_base"**
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %95, align 8, !noalias !5
  %96 = bitcast i8* %4 to %"struct.std::__1::__hash_value_type"*
  br i1 %17, label %165, label %97

97:                                               ; preds = %91
  %98 = add i64 %16, -1
  %99 = and i64 %16, 7
  %100 = icmp ult i64 %98, 7
  br i1 %100, label %149, label %101

101:                                              ; preds = %97
  %102 = sub i64 %16, %99
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i64 [ 0, %101 ], [ %145, %103 ]
  %105 = phi i8* [ %13, %101 ], [ %146, %103 ]
  %106 = phi i64 [ %102, %101 ], [ %147, %103 ]
  %107 = load i8, i8* %105, align 1
  %108 = mul i64 %104, 131
  %109 = sext i8 %107 to i64
  %110 = add i64 %108, %109
  %111 = getelementptr inbounds i8, i8* %105, i64 1
  %112 = load i8, i8* %111, align 1
  %113 = mul i64 %110, 131
  %114 = sext i8 %112 to i64
  %115 = add i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %105, i64 2
  %117 = load i8, i8* %116, align 1
  %118 = mul i64 %115, 131
  %119 = sext i8 %117 to i64
  %120 = add i64 %118, %119
  %121 = getelementptr inbounds i8, i8* %105, i64 3
  %122 = load i8, i8* %121, align 1
  %123 = mul i64 %120, 131
  %124 = sext i8 %122 to i64
  %125 = add i64 %123, %124
  %126 = getelementptr inbounds i8, i8* %105, i64 4
  %127 = load i8, i8* %126, align 1
  %128 = mul i64 %125, 131
  %129 = sext i8 %127 to i64
  %130 = add i64 %128, %129
  %131 = getelementptr inbounds i8, i8* %105, i64 5
  %132 = load i8, i8* %131, align 1
  %133 = mul i64 %130, 131
  %134 = sext i8 %132 to i64
  %135 = add i64 %133, %134
  %136 = getelementptr inbounds i8, i8* %105, i64 6
  %137 = load i8, i8* %136, align 1
  %138 = mul i64 %135, 131
  %139 = sext i8 %137 to i64
  %140 = add i64 %138, %139
  %141 = getelementptr inbounds i8, i8* %105, i64 7
  %142 = load i8, i8* %141, align 1
  %143 = mul i64 %140, 131
  %144 = sext i8 %142 to i64
  %145 = add i64 %143, %144
  %146 = getelementptr inbounds i8, i8* %105, i64 8
  %147 = add i64 %106, -8
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %103

149:                                              ; preds = %103, %97
  %150 = phi i64 [ undef, %97 ], [ %145, %103 ]
  %151 = phi i64 [ 0, %97 ], [ %145, %103 ]
  %152 = phi i8* [ %13, %97 ], [ %146, %103 ]
  %153 = icmp eq i64 %99, 0
  br i1 %153, label %165, label %154

154:                                              ; preds = %149, %154
  %155 = phi i64 [ %161, %154 ], [ %151, %149 ]
  %156 = phi i8* [ %162, %154 ], [ %152, %149 ]
  %157 = phi i64 [ %163, %154 ], [ %99, %149 ]
  %158 = load i8, i8* %156, align 1
  %159 = mul i64 %155, 131
  %160 = sext i8 %158 to i64
  %161 = add i64 %159, %160
  %162 = getelementptr inbounds i8, i8* %156, i64 1
  %163 = add i64 %157, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %154, !llvm.loop !10

165:                                              ; preds = %149, %154, %24, %91
  %166 = phi %"struct.std::__1::__hash_value_type"* [ %96, %91 ], [ %28, %24 ], [ %96, %154 ], [ %96, %149 ]
  %167 = phi %"struct.std::__1::__hash_node_base"** [ %95, %91 ], [ %27, %24 ], [ %95, %154 ], [ %95, %149 ]
  %168 = phi i64* [ %94, %91 ], [ %26, %24 ], [ %94, %154 ], [ %94, %149 ]
  %169 = phi i64 [ 0, %91 ], [ 0, %24 ], [ %150, %149 ], [ %161, %154 ]
  store i64 %169, i64* %168, align 8
  %170 = bitcast i8* %3 to %"struct.std::__1::__hash_node_base"*
  %171 = tail call %"struct.std::__1::__hash_node_base"* @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE27__node_insert_multi_prepareEmRSB_(%"class.std::__1::__hash_table"* %0, i64 %169, %"struct.std::__1::__hash_value_type"* dereferenceable(24) %166) #11
  %172 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %173 = load i64, i64* %172, align 8
  %174 = load i64, i64* %168, align 8
  %175 = tail call i64 @llvm.ctpop.i64(i64 %173) #11, !range !11
  %176 = icmp ugt i64 %175, 1
  br i1 %176, label %180, label %177

177:                                              ; preds = %165
  %178 = add i64 %173, -1
  %179 = and i64 %178, %174
  br label %184

180:                                              ; preds = %165
  %181 = icmp ult i64 %174, %173
  br i1 %181, label %184, label %182

182:                                              ; preds = %180
  %183 = urem i64 %174, %173
  br label %184

184:                                              ; preds = %182, %180, %177
  %185 = phi i64 [ %179, %177 ], [ %183, %182 ], [ %174, %180 ]
  %186 = icmp eq %"struct.std::__1::__hash_node_base"* %171, null
  br i1 %186, label %187, label %214

187:                                              ; preds = %184
  %188 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %189 = bitcast %"struct.std::__1::__hash_node_base"* %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast i8* %3 to i64*
  store i64 %190, i64* %191, align 8
  %192 = bitcast %"struct.std::__1::__hash_node_base"* %188 to i8**
  store i8* %3, i8** %192, align 8
  %193 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %194 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %193, align 8
  %195 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %194, i64 %185
  store %"struct.std::__1::__hash_node_base"* %188, %"struct.std::__1::__hash_node_base"** %195, align 8
  %196 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %167, align 8
  %197 = icmp eq %"struct.std::__1::__hash_node_base"* %196, null
  br i1 %197, label %240, label %198

198:                                              ; preds = %187
  %199 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %196, i64 1
  %200 = bitcast %"struct.std::__1::__hash_node_base"* %199 to i64*
  %201 = load i64, i64* %200, align 8
  br i1 %176, label %205, label %202

202:                                              ; preds = %198
  %203 = add i64 %173, -1
  %204 = and i64 %201, %203
  br label %209

205:                                              ; preds = %198
  %206 = icmp ult i64 %201, %173
  br i1 %206, label %209, label %207

207:                                              ; preds = %205
  %208 = urem i64 %201, %173
  br label %209

209:                                              ; preds = %207, %205, %202
  %210 = phi i64 [ %204, %202 ], [ %208, %207 ], [ %201, %205 ]
  %211 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %193, align 8
  %212 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %211, i64 %210
  %213 = bitcast %"struct.std::__1::__hash_node_base"** %212 to i8**
  store i8* %3, i8** %213, align 8
  br label %240

214:                                              ; preds = %184
  %215 = bitcast %"struct.std::__1::__hash_node_base"* %171 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = bitcast i8* %3 to i64*
  store i64 %216, i64* %217, align 8
  %218 = bitcast %"struct.std::__1::__hash_node_base"* %171 to i8**
  store i8* %3, i8** %218, align 8
  %219 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %167, align 8
  %220 = icmp eq %"struct.std::__1::__hash_node_base"* %219, null
  br i1 %220, label %240, label %221

221:                                              ; preds = %214
  %222 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %219, i64 1
  %223 = bitcast %"struct.std::__1::__hash_node_base"* %222 to i64*
  %224 = load i64, i64* %223, align 8
  br i1 %176, label %228, label %225

225:                                              ; preds = %221
  %226 = add i64 %173, -1
  %227 = and i64 %224, %226
  br label %232

228:                                              ; preds = %221
  %229 = icmp ult i64 %224, %173
  br i1 %229, label %232, label %230

230:                                              ; preds = %228
  %231 = urem i64 %224, %173
  br label %232

232:                                              ; preds = %230, %228, %225
  %233 = phi i64 [ %227, %225 ], [ %231, %230 ], [ %224, %228 ]
  %234 = icmp eq i64 %233, %185
  br i1 %234, label %240, label %235

235:                                              ; preds = %232
  %236 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %237 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %236, align 8
  %238 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %237, i64 %233
  %239 = bitcast %"struct.std::__1::__hash_node_base"** %238 to i8**
  store i8* %3, i8** %239, align 8
  br label %240

240:                                              ; preds = %235, %232, %214, %209, %187
  %241 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %242 = load i64, i64* %241, align 8
  %243 = add i64 %242, 1
  store i64 %243, i64* %241, align 8
  ret %"struct.std::__1::__hash_node_base"* %170
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.std::__1::__hash_node_base"* @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE27__node_insert_multi_prepareEmRSB_(%"class.std::__1::__hash_table"*, i64, %"struct.std::__1::__hash_value_type"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 1
  %9 = uitofp i64 %8 to float
  %10 = uitofp i64 %5 to float
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, %10
  %14 = fcmp olt float %13, %9
  %15 = icmp eq i64 %5, 0
  %16 = or i1 %15, %14
  br i1 %16, label %17, label %31

17:                                               ; preds = %3
  %18 = shl i64 %5, 1
  %19 = icmp ult i64 %5, 3
  %20 = tail call i64 @llvm.ctpop.i64(i64 %5) #11, !range !11
  %21 = icmp ugt i64 %20, 1
  %22 = or i1 %19, %21
  %23 = zext i1 %22 to i64
  %24 = or i64 %18, %23
  %25 = fdiv float %9, %12
  %26 = tail call float @llvm.ceil.f32(float %25) #11
  %27 = fptoui float %26 to i64
  %28 = icmp ult i64 %24, %27
  %29 = select i1 %28, i64 %27, i64 %24
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE6rehashEm(%"class.std::__1::__hash_table"* %0, i64 %29)
  %30 = load i64, i64* %4, align 8
  br label %31

31:                                               ; preds = %3, %17
  %32 = phi i64 [ %30, %17 ], [ %5, %3 ]
  %33 = tail call i64 @llvm.ctpop.i64(i64 %32) #11, !range !11
  %34 = icmp ugt i64 %33, 1
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = add i64 %32, -1
  %37 = and i64 %36, %1
  br label %42

38:                                               ; preds = %31
  %39 = icmp ugt i64 %32, %1
  br i1 %39, label %42, label %40

40:                                               ; preds = %38
  %41 = urem i64 %1, %32
  br label %42

42:                                               ; preds = %35, %38, %40
  %43 = phi i64 [ %37, %35 ], [ %41, %40 ], [ %1, %38 ]
  %44 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %45 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %44, align 8
  %46 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %45, i64 %43
  %47 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %46, align 8
  %48 = icmp eq %"struct.std::__1::__hash_node_base"* %47, null
  br i1 %48, label %96, label %49

49:                                               ; preds = %42
  %50 = add i64 %32, -1
  %51 = getelementptr inbounds %"struct.std::__1::__hash_value_type", %"struct.std::__1::__hash_value_type"* %2, i64 0, i32 0, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__hash_value_type", %"struct.std::__1::__hash_value_type"* %2, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  br label %55

55:                                               ; preds = %49, %90
  %56 = phi %"struct.std::__1::__hash_node_base"* [ %59, %90 ], [ %47, %49 ]
  %57 = phi i8 [ %95, %90 ], [ 0, %49 ]
  %58 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %56, i64 0, i32 0
  %59 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %58, align 8
  %60 = icmp eq %"struct.std::__1::__hash_node_base"* %59, null
  br i1 %60, label %96, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %59, i64 1
  %63 = bitcast %"struct.std::__1::__hash_node_base"* %62 to i64*
  %64 = load i64, i64* %63, align 8
  br i1 %34, label %67, label %65

65:                                               ; preds = %61
  %66 = and i64 %64, %50
  br label %71

67:                                               ; preds = %61
  %68 = icmp ult i64 %64, %32
  br i1 %68, label %71, label %69

69:                                               ; preds = %67
  %70 = urem i64 %64, %32
  br label %71

71:                                               ; preds = %65, %67, %69
  %72 = phi i64 [ %66, %65 ], [ %70, %69 ], [ %64, %67 ]
  %73 = icmp eq i64 %72, %43
  br i1 %73, label %74, label %96

74:                                               ; preds = %71
  %75 = and i8 %57, 1
  %76 = icmp eq i8 %75, 0
  %77 = zext i8 %75 to i32
  %78 = icmp eq i64 %64, %1
  br i1 %78, label %79, label %90

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %59, i64 3
  %81 = bitcast %"struct.std::__1::__hash_node_base"* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = icmp eq i64 %82, %52
  br i1 %83, label %84, label %90

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %59, i64 2
  %86 = bitcast %"struct.std::__1::__hash_node_base"* %85 to i8**
  %87 = load i8*, i8** %86, align 8
  %88 = tail call i32 @bcmp(i8* %87, i8* %54, i64 %52) #11
  %89 = icmp eq i32 %88, 0
  br label %90

90:                                               ; preds = %84, %79, %74
  %91 = phi i1 [ false, %74 ], [ false, %79 ], [ %89, %84 ]
  %92 = zext i1 %91 to i32
  %93 = icmp eq i32 %77, %92
  %94 = or i1 %76, %93
  %95 = select i1 %93, i8 %57, i8 1
  br i1 %94, label %55, label %96

96:                                               ; preds = %90, %55, %71, %42
  %97 = phi %"struct.std::__1::__hash_node_base"* [ null, %42 ], [ %56, %71 ], [ %56, %55 ], [ %56, %90 ]
  ret %"struct.std::__1::__hash_node_base"* %97
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE6rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !11
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #11
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #11, !range !11
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #11
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #11, !range !11
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #11
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE8__rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %143, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 2305843009213693951
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @abort() #13
  unreachable

8:                                                ; preds = %5
  %9 = shl i64 %1, 3
  %10 = tail call i8* @_Znwm(i64 %9) #12
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %13 = bitcast %"class.std::__1::__hash_table"* %0 to i8**
  store i8* %10, i8** %13, align 8
  %14 = icmp eq %"struct.std::__1::__hash_node_base"** %12, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %8
  %16 = bitcast %"struct.std::__1::__hash_node_base"** %12 to i8*
  tail call void @_ZdlPv(i8* %16) #12
  br label %17

17:                                               ; preds = %15, %8
  %18 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %18, align 8
  %19 = add i64 %1, -1
  %20 = and i64 %1, 3
  %21 = icmp ult i64 %19, 3
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = sub i64 %1, %20
  br label %40

24:                                               ; preds = %40, %17
  %25 = phi i64 [ 0, %17 ], [ %54, %40 ]
  %26 = icmp eq i64 %20, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %24, %27
  %28 = phi i64 [ %32, %27 ], [ %25, %24 ]
  %29 = phi i64 [ %33, %27 ], [ %20, %24 ]
  %30 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %31 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %30, i64 %28
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %31, align 8
  %32 = add nuw i64 %28, 1
  %33 = add i64 %29, -1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %27, !llvm.loop !12

35:                                               ; preds = %27, %24
  %36 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %37 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %36, i64 0, i32 0
  %38 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %37, align 8
  %39 = icmp eq %"struct.std::__1::__hash_node_base"* %38, null
  br i1 %39, label %151, label %57

40:                                               ; preds = %40, %22
  %41 = phi i64 [ 0, %22 ], [ %54, %40 ]
  %42 = phi i64 [ %23, %22 ], [ %55, %40 ]
  %43 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %43, i64 %41
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %44, align 8
  %45 = or i64 %41, 1
  %46 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %46, i64 %45
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %47, align 8
  %48 = or i64 %41, 2
  %49 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %49, i64 %48
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %50, align 8
  %51 = or i64 %41, 3
  %52 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %53 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %52, i64 %51
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %53, align 8
  %54 = add nuw i64 %41, 4
  %55 = add i64 %42, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %24, label %40

57:                                               ; preds = %35
  %58 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 1
  %59 = bitcast %"struct.std::__1::__hash_node_base"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = tail call i64 @llvm.ctpop.i64(i64 %1) #11, !range !11
  %62 = icmp ugt i64 %61, 1
  br i1 %62, label %66, label %63

63:                                               ; preds = %57
  %64 = add i64 %1, -1
  %65 = and i64 %60, %64
  br label %70

66:                                               ; preds = %57
  %67 = icmp ult i64 %60, %1
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = urem i64 %60, %1
  br label %70

70:                                               ; preds = %63, %66, %68
  %71 = phi i64 [ %65, %63 ], [ %69, %68 ], [ %60, %66 ]
  %72 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %73 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %72, i64 %71
  store %"struct.std::__1::__hash_node_base"* %36, %"struct.std::__1::__hash_node_base"** %73, align 8
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %38, i64 0, i32 0
  %75 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %74, align 8
  %76 = icmp eq %"struct.std::__1::__hash_node_base"* %75, null
  br i1 %76, label %151, label %77

77:                                               ; preds = %70
  %78 = add i64 %1, -1
  br label %79

79:                                               ; preds = %77, %137
  %80 = phi %"struct.std::__1::__hash_node_base"* [ %75, %77 ], [ %141, %137 ]
  %81 = phi i64 [ %71, %77 ], [ %139, %137 ]
  %82 = phi %"struct.std::__1::__hash_node_base"* [ %38, %77 ], [ %138, %137 ]
  %83 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 1
  %84 = bitcast %"struct.std::__1::__hash_node_base"* %83 to i64*
  %85 = load i64, i64* %84, align 8
  br i1 %62, label %88, label %86

86:                                               ; preds = %79
  %87 = and i64 %85, %78
  br label %92

88:                                               ; preds = %79
  %89 = icmp ult i64 %85, %1
  br i1 %89, label %92, label %90

90:                                               ; preds = %88
  %91 = urem i64 %85, %1
  br label %92

92:                                               ; preds = %86, %88, %90
  %93 = phi i64 [ %87, %86 ], [ %91, %90 ], [ %85, %88 ]
  %94 = icmp eq i64 %93, %81
  br i1 %94, label %137, label %95

95:                                               ; preds = %92
  %96 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %97 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %96, i64 %93
  %98 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %97, align 8
  %99 = icmp eq %"struct.std::__1::__hash_node_base"* %98, null
  br i1 %99, label %105, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 3
  %102 = bitcast %"struct.std::__1::__hash_node_base"* %101 to i64*
  %103 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %80, i64 2
  %104 = bitcast %"struct.std::__1::__hash_node_base"* %103 to i8**
  br label %106

105:                                              ; preds = %95
  store %"struct.std::__1::__hash_node_base"* %82, %"struct.std::__1::__hash_node_base"** %97, align 8
  br label %137

106:                                              ; preds = %100, %117
  %107 = phi %"struct.std::__1::__hash_node_base"* [ %109, %117 ], [ %80, %100 ]
  %108 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %107, i64 0, i32 0
  %109 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %108, align 8
  %110 = icmp eq %"struct.std::__1::__hash_node_base"* %109, null
  br i1 %110, label %124, label %111

111:                                              ; preds = %106
  %112 = load i64, i64* %102, align 8
  %113 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %109, i64 3
  %114 = bitcast %"struct.std::__1::__hash_node_base"* %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = icmp eq i64 %112, %115
  br i1 %116, label %117, label %124

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %109, i64 2
  %119 = bitcast %"struct.std::__1::__hash_node_base"* %118 to i8**
  %120 = load i8*, i8** %119, align 8
  %121 = load i8*, i8** %104, align 8
  %122 = tail call i32 @bcmp(i8* %121, i8* %120, i64 %112) #11
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %106, label %124

124:                                              ; preds = %111, %106, %117
  %125 = ptrtoint %"struct.std::__1::__hash_node_base"* %109 to i64
  %126 = bitcast %"struct.std::__1::__hash_node_base"* %107 to i64*
  %127 = bitcast %"struct.std::__1::__hash_node_base"* %82 to i64*
  store i64 %125, i64* %127, align 8
  %128 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %129 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %128, i64 %93
  %130 = bitcast %"struct.std::__1::__hash_node_base"** %129 to i64**
  %131 = load i64*, i64** %130, align 8
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %126, align 8
  %133 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %11, align 8
  %134 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %133, i64 %93
  %135 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %134, align 8
  %136 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %135, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %80, %"struct.std::__1::__hash_node_base"** %136, align 8
  br label %137

137:                                              ; preds = %92, %124, %105
  %138 = phi %"struct.std::__1::__hash_node_base"* [ %80, %105 ], [ %82, %124 ], [ %80, %92 ]
  %139 = phi i64 [ %93, %105 ], [ %81, %124 ], [ %81, %92 ]
  %140 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %138, i64 0, i32 0
  %141 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %140, align 8
  %142 = icmp eq %"struct.std::__1::__hash_node_base"* %141, null
  br i1 %142, label %151, label %79

143:                                              ; preds = %2
  %144 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %145 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %144, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %144, align 8
  %146 = icmp eq %"struct.std::__1::__hash_node_base"** %145, null
  br i1 %146, label %149, label %147

147:                                              ; preds = %143
  %148 = bitcast %"struct.std::__1::__hash_node_base"** %145 to i8*
  tail call void @_ZdlPv(i8* %148) #12
  br label %149

149:                                              ; preds = %143, %147
  %150 = getelementptr inbounds %"class.std::__1::__bucket_list_deallocator", %"class.std::__1::__bucket_list_deallocator"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 0, i64* %150, align 8
  br label %151

151:                                              ; preds = %137, %70, %35, %149
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.std::__1::__hash_node_base"* @_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE4findIS6_EENS_15__hash_iteratorIPNS_11__hash_nodeISB_PvEEEERKT_(%"class.std::__1::__hash_table"*, %"class.base::BasicStringPiece"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %76, label %8

8:                                                ; preds = %2
  %9 = add i64 %6, -1
  %10 = and i64 %6, 7
  %11 = icmp ult i64 %9, 7
  br i1 %11, label %60, label %12

12:                                               ; preds = %8
  %13 = sub i64 %6, %10
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %56, %14 ]
  %16 = phi i8* [ %4, %12 ], [ %57, %14 ]
  %17 = phi i64 [ %13, %12 ], [ %58, %14 ]
  %18 = load i8, i8* %16, align 1
  %19 = mul i64 %15, 131
  %20 = sext i8 %18 to i64
  %21 = add i64 %19, %20
  %22 = getelementptr inbounds i8, i8* %16, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = mul i64 %21, 131
  %25 = sext i8 %23 to i64
  %26 = add i64 %24, %25
  %27 = getelementptr inbounds i8, i8* %16, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = mul i64 %26, 131
  %30 = sext i8 %28 to i64
  %31 = add i64 %29, %30
  %32 = getelementptr inbounds i8, i8* %16, i64 3
  %33 = load i8, i8* %32, align 1
  %34 = mul i64 %31, 131
  %35 = sext i8 %33 to i64
  %36 = add i64 %34, %35
  %37 = getelementptr inbounds i8, i8* %16, i64 4
  %38 = load i8, i8* %37, align 1
  %39 = mul i64 %36, 131
  %40 = sext i8 %38 to i64
  %41 = add i64 %39, %40
  %42 = getelementptr inbounds i8, i8* %16, i64 5
  %43 = load i8, i8* %42, align 1
  %44 = mul i64 %41, 131
  %45 = sext i8 %43 to i64
  %46 = add i64 %44, %45
  %47 = getelementptr inbounds i8, i8* %16, i64 6
  %48 = load i8, i8* %47, align 1
  %49 = mul i64 %46, 131
  %50 = sext i8 %48 to i64
  %51 = add i64 %49, %50
  %52 = getelementptr inbounds i8, i8* %16, i64 7
  %53 = load i8, i8* %52, align 1
  %54 = mul i64 %51, 131
  %55 = sext i8 %53 to i64
  %56 = add i64 %54, %55
  %57 = getelementptr inbounds i8, i8* %16, i64 8
  %58 = add i64 %17, -8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %14

60:                                               ; preds = %14, %8
  %61 = phi i64 [ undef, %8 ], [ %56, %14 ]
  %62 = phi i64 [ 0, %8 ], [ %56, %14 ]
  %63 = phi i8* [ %4, %8 ], [ %57, %14 ]
  %64 = icmp eq i64 %10, 0
  br i1 %64, label %76, label %65

65:                                               ; preds = %60, %65
  %66 = phi i64 [ %72, %65 ], [ %62, %60 ]
  %67 = phi i8* [ %73, %65 ], [ %63, %60 ]
  %68 = phi i64 [ %74, %65 ], [ %10, %60 ]
  %69 = load i8, i8* %67, align 1
  %70 = mul i64 %66, 131
  %71 = sext i8 %69 to i64
  %72 = add i64 %70, %71
  %73 = getelementptr inbounds i8, i8* %67, i64 1
  %74 = add i64 %68, -1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %65, !llvm.loop !13

76:                                               ; preds = %60, %65, %2
  %77 = phi i64 [ 0, %2 ], [ %61, %60 ], [ %72, %65 ]
  %78 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %135, label %81

81:                                               ; preds = %76
  %82 = tail call i64 @llvm.ctpop.i64(i64 %79) #11, !range !11
  %83 = icmp ugt i64 %82, 1
  br i1 %83, label %87, label %84

84:                                               ; preds = %81
  %85 = add i64 %79, -1
  %86 = and i64 %85, %77
  br label %91

87:                                               ; preds = %81
  %88 = icmp ult i64 %77, %79
  br i1 %88, label %91, label %89

89:                                               ; preds = %87
  %90 = urem i64 %77, %79
  br label %91

91:                                               ; preds = %84, %87, %89
  %92 = phi i64 [ %86, %84 ], [ %90, %89 ], [ %77, %87 ]
  %93 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %94 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %93, align 8
  %95 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %94, i64 %92
  %96 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %95, align 8
  %97 = icmp eq %"struct.std::__1::__hash_node_base"* %96, null
  br i1 %97, label %135, label %98

98:                                               ; preds = %91
  %99 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %96, i64 0, i32 0
  %100 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %99, align 8
  %101 = icmp eq %"struct.std::__1::__hash_node_base"* %100, null
  br i1 %101, label %135, label %102

102:                                              ; preds = %98
  %103 = add i64 %79, -1
  br label %104

104:                                              ; preds = %102, %131
  %105 = phi %"struct.std::__1::__hash_node_base"* [ %100, %102 ], [ %133, %131 ]
  %106 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 1
  %107 = bitcast %"struct.std::__1::__hash_node_base"* %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = icmp eq i64 %108, %77
  br i1 %109, label %120, label %110

110:                                              ; preds = %104
  br i1 %83, label %113, label %111

111:                                              ; preds = %110
  %112 = and i64 %108, %103
  br label %117

113:                                              ; preds = %110
  %114 = icmp ult i64 %108, %79
  br i1 %114, label %117, label %115

115:                                              ; preds = %113
  %116 = urem i64 %108, %79
  br label %117

117:                                              ; preds = %111, %113, %115
  %118 = phi i64 [ %112, %111 ], [ %116, %115 ], [ %108, %113 ]
  %119 = icmp eq i64 %118, %92
  br i1 %119, label %131, label %135

120:                                              ; preds = %104
  %121 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 3
  %122 = bitcast %"struct.std::__1::__hash_node_base"* %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = icmp eq i64 %123, %6
  br i1 %124, label %125, label %131

125:                                              ; preds = %120
  %126 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 2
  %127 = bitcast %"struct.std::__1::__hash_node_base"* %126 to i8**
  %128 = load i8*, i8** %127, align 8
  %129 = tail call i32 @bcmp(i8* %128, i8* %4, i64 %6) #11
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %135, label %131

131:                                              ; preds = %120, %117, %125
  %132 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %105, i64 0, i32 0
  %133 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %132, align 8
  %134 = icmp eq %"struct.std::__1::__hash_node_base"* %133, null
  br i1 %134, label %135, label %104

135:                                              ; preds = %125, %131, %117, %98, %76, %91
  %136 = phi %"struct.std::__1::__hash_node_base"* [ null, %91 ], [ null, %76 ], [ null, %98 ], [ %105, %125 ], [ null, %131 ], [ null, %117 ]
  ret %"struct.std::__1::__hash_node_base"* %136
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN3net17ParsedCertificateEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(%"class.std::__1::vector.77"*, %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.77"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.77"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #12
  %33 = bitcast i8* %32 to %class.scoped_refptr*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %1, i64 0, i32 0
  %41 = load %"class.net::ParsedCertificate"*, %"class.net::ParsedCertificate"** %40, align 8
  %42 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %37, i64 0, i32 0
  store %"class.net::ParsedCertificate"* %41, %"class.net::ParsedCertificate"** %42, align 8
  %43 = icmp eq %"class.net::ParsedCertificate"* %41, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw add i32* %45, i32 1 monotonic
  br label %47

47:                                               ; preds = %34, %44
  %48 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %37, i64 1
  %49 = ptrtoint %class.scoped_refptr* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.77", %"class.std::__1::vector.77"* %0, i64 0, i32 0, i32 0
  %51 = load %class.scoped_refptr*, %class.scoped_refptr** %50, align 8
  %52 = ptrtoint %class.scoped_refptr* %51 to i64
  %53 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %54 = icmp eq %class.scoped_refptr* %53, %51
  br i1 %54, label %136, label %55

55:                                               ; preds = %47
  %56 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %53, i64 -1, i32 0
  %57 = ptrtoint %"class.net::ParsedCertificate"** %56 to i64
  %58 = sub i64 %57, %52
  %59 = lshr i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 7
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %75, label %63

63:                                               ; preds = %55, %63
  %64 = phi %class.scoped_refptr* [ %67, %63 ], [ %37, %55 ]
  %65 = phi %class.scoped_refptr* [ %68, %63 ], [ %53, %55 ]
  %66 = phi i64 [ %73, %63 ], [ %61, %55 ]
  %67 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 -1
  %68 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %65, i64 -1
  %69 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %68, i64 0, i32 0
  %70 = bitcast %class.scoped_refptr* %68 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %class.scoped_refptr* %67 to i64*
  store i64 %71, i64* %72, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %69, align 8
  %73 = add i64 %66, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %63, !llvm.loop !14

75:                                               ; preds = %63, %55
  %76 = phi %class.scoped_refptr* [ undef, %55 ], [ %67, %63 ]
  %77 = phi %class.scoped_refptr* [ %37, %55 ], [ %67, %63 ]
  %78 = phi %class.scoped_refptr* [ %53, %55 ], [ %68, %63 ]
  %79 = icmp ult i64 %58, 56
  br i1 %79, label %132, label %80

80:                                               ; preds = %75, %80
  %81 = phi %class.scoped_refptr* [ %125, %80 ], [ %77, %75 ]
  %82 = phi %class.scoped_refptr* [ %126, %80 ], [ %78, %75 ]
  %83 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -1
  %84 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -1
  %85 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %84, i64 0, i32 0
  %86 = bitcast %class.scoped_refptr* %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %class.scoped_refptr* %83 to i64*
  store i64 %87, i64* %88, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %85, align 8
  %89 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -2
  %90 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -2
  %91 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %90, i64 0, i32 0
  %92 = bitcast %class.scoped_refptr* %90 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %class.scoped_refptr* %89 to i64*
  store i64 %93, i64* %94, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %91, align 8
  %95 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -3
  %96 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -3
  %97 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %96, i64 0, i32 0
  %98 = bitcast %class.scoped_refptr* %96 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %class.scoped_refptr* %95 to i64*
  store i64 %99, i64* %100, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %97, align 8
  %101 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -4
  %102 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -4
  %103 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %102, i64 0, i32 0
  %104 = bitcast %class.scoped_refptr* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %class.scoped_refptr* %101 to i64*
  store i64 %105, i64* %106, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %103, align 8
  %107 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -5
  %108 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -5
  %109 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %108, i64 0, i32 0
  %110 = bitcast %class.scoped_refptr* %108 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %class.scoped_refptr* %107 to i64*
  store i64 %111, i64* %112, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %109, align 8
  %113 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -6
  %114 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -6
  %115 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %114, i64 0, i32 0
  %116 = bitcast %class.scoped_refptr* %114 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %class.scoped_refptr* %113 to i64*
  store i64 %117, i64* %118, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %115, align 8
  %119 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -7
  %120 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -7
  %121 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %120, i64 0, i32 0
  %122 = bitcast %class.scoped_refptr* %120 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %class.scoped_refptr* %119 to i64*
  store i64 %123, i64* %124, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %121, align 8
  %125 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 -8
  %126 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %82, i64 -8
  %127 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %126, i64 0, i32 0
  %128 = bitcast %class.scoped_refptr* %126 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %class.scoped_refptr* %125 to i64*
  store i64 %129, i64* %130, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %127, align 8
  %131 = icmp eq %class.scoped_refptr* %126, %51
  br i1 %131, label %132, label %80

132:                                              ; preds = %80, %75
  %133 = phi %class.scoped_refptr* [ %76, %75 ], [ %125, %80 ]
  %134 = load i64, i64* %6, align 8
  %135 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  br label %136

136:                                              ; preds = %47, %132
  %137 = phi %class.scoped_refptr* [ %135, %132 ], [ %51, %47 ]
  %138 = phi %class.scoped_refptr* [ %133, %132 ], [ %37, %47 ]
  %139 = phi i64 [ %134, %132 ], [ %52, %47 ]
  %140 = ptrtoint %class.scoped_refptr* %138 to i64
  store i64 %140, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %141 = inttoptr i64 %139 to %class.scoped_refptr*
  %142 = icmp eq %class.scoped_refptr* %137, %141
  br i1 %142, label %157, label %143

143:                                              ; preds = %136, %155
  %144 = phi %class.scoped_refptr* [ %145, %155 ], [ %137, %136 ]
  %145 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %144, i64 -1
  %146 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %145, i64 0, i32 0
  %147 = load %"class.net::ParsedCertificate"*, %"class.net::ParsedCertificate"** %146, align 8
  %148 = icmp eq %"class.net::ParsedCertificate"* %147, null
  br i1 %148, label %155, label %149

149:                                              ; preds = %143
  %150 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %147, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = atomicrmw sub i32* %150, i32 1 acq_rel
  %152 = icmp eq i32 %151, 1
  br i1 %152, label %153, label %155

153:                                              ; preds = %149
  tail call void @_ZN3net17ParsedCertificateD1Ev(%"class.net::ParsedCertificate"* nonnull %147) #11
  %154 = bitcast %"class.net::ParsedCertificate"* %147 to i8*
  tail call void @_ZdlPv(i8* %154) #12
  br label %155

155:                                              ; preds = %153, %149, %143
  %156 = icmp eq %class.scoped_refptr* %145, %141
  br i1 %156, label %157, label %143

157:                                              ; preds = %155, %136
  %158 = icmp eq i64 %139, 0
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = inttoptr i64 %139 to i8*
  tail call void @_ZdlPv(i8* %160) #12
  br label %161

161:                                              ; preds = %157, %159
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #7

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__19make_pairIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSB_IT0_E4typeEEEOSC_OSF_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__19make_pairIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSB_IT0_E4typeEEEOSC_OSF_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE16__construct_nodeIJNS_4pairIS6_SA_EEEEENS_10unique_ptrINS_11__hash_nodeISB_PvEENS_22__hash_node_destructorINSK_IST_EEEEEEDpOT_: argument 0"}
!7 = distinct !{!7, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIN4base16BasicStringPieceIcNS_11char_traitsIcEEEE13scoped_refptrIN3net17ParsedCertificateEEEENS_22__unordered_map_hasherIS6_SB_NS2_19StringPieceHashImplIS6_EENS_8equal_toIS6_EELb1EEENS_21__unordered_map_equalIS6_SB_SG_SE_Lb1EEENS_9allocatorISB_EEE16__construct_nodeIJNS_4pairIS6_SA_EEEEENS_10unique_ptrINS_11__hash_nodeISB_PvEENS_22__hash_node_destructorINSK_IST_EEEEEEDpOT_"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !9}
!11 = !{i64 0, i64 65}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !9}
!14 = distinct !{!14, !9}
