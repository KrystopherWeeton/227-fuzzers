; ModuleID = '../../third_party/skia/src/core/SkBlitRow_D32.cpp'
source_filename = "../../third_party/skia/src/core/SkBlitRow_D32.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@_ZZN9SkBlitRow9Factory32EjE6kProcs = internal unnamed_addr constant [4 x void (i32*, i32*, i32, i32)*] [void (i32*, i32*, i32, i32)* @_ZL19blit_row_s32_opaquePjPKjij, void (i32*, i32*, i32, i32)* @_ZL18blit_row_s32_blendPjPKjij, void (i32*, i32*, i32, i32)* null, void (i32*, i32*, i32, i32)* @_ZL19blit_row_s32a_blendPjPKjij], align 16
@_ZN6SkOpts20blit_row_s32a_opaqueE = external local_unnamed_addr global void (i32*, i32*, i32, i32)*, align 8
@_ZN6SkOpts16blit_row_color32E = external local_unnamed_addr global void (i32*, i32*, i32, i32)*, align 8
@_ZN6SkOpts8memset32E = external local_unnamed_addr global void (i32*, i32, i32)*, align 8

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden void (i32*, i32*, i32, i32)* @_ZN9SkBlitRow9Factory32Ej(i32) local_unnamed_addr #0 align 2 {
  %2 = and i32 %0, 3
  %3 = icmp eq i32 %2, 2
  %4 = zext i32 %2 to i64
  %5 = getelementptr inbounds [4 x void (i32*, i32*, i32, i32)*], [4 x void (i32*, i32*, i32, i32)*]* @_ZZN9SkBlitRow9Factory32EjE6kProcs, i64 0, i64 %4
  %6 = select i1 %3, void (i32*, i32*, i32, i32)** @_ZN6SkOpts20blit_row_s32a_opaqueE, void (i32*, i32*, i32, i32)** %5
  %7 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** %6, align 8
  ret void (i32*, i32*, i32, i32)* %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19blit_row_s32_opaquePjPKjij(i32* nocapture, i32* nocapture readonly, i32, i32) #1 {
  %5 = bitcast i32* %0 to i8*
  %6 = bitcast i32* %1 to i8*
  %7 = sext i32 %2 to i64
  %8 = shl nsw i64 %7, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 %8, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL18blit_row_s32_blendPjPKjij(i32* nocapture, i32* nocapture readonly, i32, i32) #2 {
  %5 = bitcast i32* %1 to <2 x i64>*
  %6 = bitcast i32* %0 to <2 x i64>*
  %7 = icmp sgt i32 %2, 3
  br i1 %7, label %8, label %44

8:                                                ; preds = %4
  %9 = trunc i32 %3 to i16
  %10 = add i16 %9, 1
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %13

13:                                               ; preds = %8, %13
  %14 = phi <2 x i64>* [ %6, %8 ], [ %39, %13 ]
  %15 = phi <2 x i64>* [ %5, %8 ], [ %38, %13 ]
  %16 = phi i32 [ %2, %8 ], [ %40, %13 ]
  %17 = bitcast <2 x i64>* %15 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = load <2 x i64>, <2 x i64>* %14, align 1
  %20 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = bitcast <2 x i64> %19 to <8 x i16>
  %22 = lshr <8 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = and <8 x i16> %18, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = and <8 x i16> %21, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %25 = sub nsw <8 x i16> %23, %24
  %26 = sub nsw <8 x i16> %20, %22
  %27 = mul <8 x i16> %25, %12
  %28 = mul <8 x i16> %26, %12
  %29 = bitcast <8 x i16> %28 to <2 x i64>
  %30 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %31 = bitcast <8 x i16> %30 to <2 x i64>
  %32 = and <2 x i64> %29, <i64 -71777214294589696, i64 -71777214294589696>
  %33 = or <2 x i64> %32, %31
  %34 = bitcast <2 x i64> %19 to <16 x i8>
  %35 = bitcast <2 x i64> %33 to <16 x i8>
  %36 = add <16 x i8> %35, %34
  %37 = bitcast <2 x i64>* %14 to <16 x i8>*
  store <16 x i8> %36, <16 x i8>* %37, align 1
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %15, i64 1
  %39 = getelementptr inbounds <2 x i64>, <2 x i64>* %14, i64 1
  %40 = add nsw i32 %16, -4
  %41 = icmp sgt i32 %40, 3
  br i1 %41, label %13, label %42

42:                                               ; preds = %13
  %43 = and i32 %2, 3
  br label %44

44:                                               ; preds = %42, %4
  %45 = phi i32 [ %2, %4 ], [ %43, %42 ]
  %46 = phi <2 x i64>* [ %5, %4 ], [ %38, %42 ]
  %47 = phi <2 x i64>* [ %6, %4 ], [ %39, %42 ]
  %48 = bitcast <2 x i64>* %46 to i8*
  %49 = bitcast <2 x i64>* %47 to i8*
  %50 = icmp sgt i32 %45, 0
  br i1 %50, label %51, label %155

51:                                               ; preds = %44
  %52 = bitcast <2 x i64>* %47 to i32*
  %53 = bitcast <2 x i64>* %46 to i32*
  %54 = add i32 %3, 1
  %55 = zext i32 %54 to i64
  %56 = sub i32 255, %3
  %57 = zext i32 %56 to i64
  %58 = add nsw i32 %45, -1
  %59 = zext i32 %58 to i64
  %60 = add nuw nsw i64 %59, 1
  %61 = icmp ult i64 %60, 4
  br i1 %61, label %118, label %62

62:                                               ; preds = %51
  %63 = add nsw i32 %45, -1
  %64 = zext i32 %63 to i64
  %65 = shl nuw nsw i64 %64, 2
  %66 = add nuw nsw i64 %65, 4
  %67 = getelementptr i8, i8* %49, i64 %66
  %68 = getelementptr i8, i8* %48, i64 %66
  %69 = icmp ugt i8* %68, %49
  %70 = icmp ugt i8* %67, %48
  %71 = and i1 %69, %70
  br i1 %71, label %118, label %72

72:                                               ; preds = %62
  %73 = and i64 %60, 8589934588
  %74 = getelementptr i32, i32* %52, i64 %73
  %75 = trunc i64 %73 to i32
  %76 = sub i32 %45, %75
  %77 = getelementptr i32, i32* %53, i64 %73
  %78 = insertelement <4 x i64> undef, i64 %55, i32 0
  %79 = shufflevector <4 x i64> %78, <4 x i64> undef, <4 x i32> zeroinitializer
  %80 = insertelement <4 x i64> undef, i64 %57, i32 0
  %81 = shufflevector <4 x i64> %80, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %82

82:                                               ; preds = %82, %72
  %83 = phi i64 [ 0, %72 ], [ %114, %82 ]
  %84 = getelementptr i32, i32* %52, i64 %83
  %85 = getelementptr i32, i32* %53, i64 %83
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4, !alias.scope !2
  %88 = bitcast i32* %84 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !5, !noalias !2
  %90 = lshr <4 x i32> %87, <i32 8, i32 8, i32 8, i32 8>
  %91 = and <4 x i32> %90, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %92 = zext <4 x i32> %91 to <4 x i64>
  %93 = shl nuw nsw <4 x i64> %92, <i64 32, i64 32, i64 32, i64 32>
  %94 = and <4 x i32> %87, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %95 = zext <4 x i32> %94 to <4 x i64>
  %96 = or <4 x i64> %93, %95
  %97 = mul <4 x i64> %96, %79
  %98 = lshr <4 x i32> %89, <i32 8, i32 8, i32 8, i32 8>
  %99 = and <4 x i32> %98, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %100 = zext <4 x i32> %99 to <4 x i64>
  %101 = shl nuw nsw <4 x i64> %100, <i64 32, i64 32, i64 32, i64 32>
  %102 = and <4 x i32> %89, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %103 = zext <4 x i32> %102 to <4 x i64>
  %104 = or <4 x i64> %101, %103
  %105 = mul <4 x i64> %104, %81
  %106 = add <4 x i64> %105, %97
  %107 = lshr <4 x i64> %106, <i64 8, i64 8, i64 8, i64 8>
  %108 = and <4 x i64> %107, <i64 16711935, i64 16711935, i64 16711935, i64 16711935>
  %109 = lshr <4 x i64> %106, <i64 32, i64 32, i64 32, i64 32>
  %110 = and <4 x i64> %109, <i64 4278255360, i64 4278255360, i64 4278255360, i64 4278255360>
  %111 = or <4 x i64> %108, %110
  %112 = trunc <4 x i64> %111 to <4 x i32>
  %113 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %113, align 4, !alias.scope !5, !noalias !2
  %114 = add i64 %83, 4
  %115 = icmp eq i64 %114, %73
  br i1 %115, label %116, label %82, !llvm.loop !7

116:                                              ; preds = %82
  %117 = icmp eq i64 %60, %73
  br i1 %117, label %155, label %118

118:                                              ; preds = %116, %62, %51
  %119 = phi i32* [ %52, %62 ], [ %52, %51 ], [ %74, %116 ]
  %120 = phi i32 [ %45, %62 ], [ %45, %51 ], [ %76, %116 ]
  %121 = phi i32* [ %53, %62 ], [ %53, %51 ], [ %77, %116 ]
  br label %122

122:                                              ; preds = %118, %122
  %123 = phi i32* [ %153, %122 ], [ %119, %118 ]
  %124 = phi i32 [ %126, %122 ], [ %120, %118 ]
  %125 = phi i32* [ %152, %122 ], [ %121, %118 ]
  %126 = add nsw i32 %124, -1
  %127 = load i32, i32* %125, align 4
  %128 = load i32, i32* %123, align 4
  %129 = lshr i32 %127, 8
  %130 = and i32 %129, 16711935
  %131 = zext i32 %130 to i64
  %132 = shl nuw nsw i64 %131, 32
  %133 = and i32 %127, 16711935
  %134 = zext i32 %133 to i64
  %135 = or i64 %132, %134
  %136 = mul i64 %135, %55
  %137 = lshr i32 %128, 8
  %138 = and i32 %137, 16711935
  %139 = zext i32 %138 to i64
  %140 = shl nuw nsw i64 %139, 32
  %141 = and i32 %128, 16711935
  %142 = zext i32 %141 to i64
  %143 = or i64 %140, %142
  %144 = mul i64 %143, %57
  %145 = add i64 %144, %136
  %146 = lshr i64 %145, 8
  %147 = and i64 %146, 16711935
  %148 = lshr i64 %145, 32
  %149 = and i64 %148, 4278255360
  %150 = or i64 %147, %149
  %151 = trunc i64 %150 to i32
  store i32 %151, i32* %123, align 4
  %152 = getelementptr inbounds i32, i32* %125, i64 1
  %153 = getelementptr inbounds i32, i32* %123, i64 1
  %154 = icmp sgt i32 %126, 0
  br i1 %154, label %122, label %155, !llvm.loop !9

155:                                              ; preds = %122, %116, %44
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19blit_row_s32a_blendPjPKjij(i32* nocapture, i32* nocapture readonly, i32, i32) #2 {
  %5 = bitcast i32* %1 to <2 x i64>*
  %6 = bitcast i32* %0 to <2 x i64>*
  %7 = icmp sgt i32 %2, 3
  br i1 %7, label %8, label %54

8:                                                ; preds = %4
  %9 = trunc i32 %3 to i16
  %10 = add i16 %9, 1
  %11 = insertelement <8 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <8 x i16> %11, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %13

13:                                               ; preds = %8, %13
  %14 = phi <2 x i64>* [ %6, %8 ], [ %49, %13 ]
  %15 = phi <2 x i64>* [ %5, %8 ], [ %48, %13 ]
  %16 = phi i32 [ %2, %8 ], [ %50, %13 ]
  %17 = load <2 x i64>, <2 x i64>* %15, align 1
  %18 = bitcast <2 x i64>* %14 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 1
  %20 = bitcast <2 x i64> %17 to <4 x i32>
  %21 = lshr <4 x i32> %20, <i32 24, i32 24, i32 24, i32 24>
  %22 = bitcast <4 x i32> %21 to <8 x i16>
  %23 = mul <8 x i16> %12, %22
  %24 = bitcast <8 x i16> %23 to <4 x i32>
  %25 = sub <4 x i32> <i32 65535, i32 65535, i32 65535, i32 65535>, %24
  %26 = lshr <4 x i32> %25, <i32 8, i32 8, i32 8, i32 8>
  %27 = add <4 x i32> %26, %25
  %28 = lshr <4 x i32> %27, <i32 8, i32 8, i32 8, i32 8>
  %29 = bitcast <4 x i32> %28 to <8 x i16>
  %30 = shufflevector <8 x i16> %29, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 2, i32 2, i32 4, i32 undef, i32 6, i32 undef>
  %31 = shufflevector <8 x i16> %30, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 4, i32 6, i32 6>
  %32 = bitcast <2 x i64> %17 to <8 x i16>
  %33 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = and <8 x i16> %32, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %36 = mul <8 x i16> %35, %12
  %37 = mul <8 x i16> %33, %12
  %38 = and <8 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %39 = mul <8 x i16> %31, %38
  %40 = mul <8 x i16> %31, %34
  %41 = add <8 x i16> %39, %36
  %42 = add <8 x i16> %40, %37
  %43 = bitcast <8 x i16> %42 to <2 x i64>
  %44 = lshr <8 x i16> %41, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %45 = bitcast <8 x i16> %44 to <2 x i64>
  %46 = and <2 x i64> %43, <i64 -71777214294589696, i64 -71777214294589696>
  %47 = or <2 x i64> %46, %45
  store <2 x i64> %47, <2 x i64>* %14, align 1
  %48 = getelementptr inbounds <2 x i64>, <2 x i64>* %15, i64 1
  %49 = getelementptr inbounds <2 x i64>, <2 x i64>* %14, i64 1
  %50 = add nsw i32 %16, -4
  %51 = icmp sgt i32 %50, 3
  br i1 %51, label %13, label %52

52:                                               ; preds = %13
  %53 = and i32 %2, 3
  br label %54

54:                                               ; preds = %52, %4
  %55 = phi i32 [ %2, %4 ], [ %53, %52 ]
  %56 = phi <2 x i64>* [ %5, %4 ], [ %48, %52 ]
  %57 = phi <2 x i64>* [ %6, %4 ], [ %49, %52 ]
  %58 = bitcast <2 x i64>* %56 to i8*
  %59 = bitcast <2 x i64>* %57 to i8*
  %60 = icmp sgt i32 %55, 0
  br i1 %60, label %61, label %158

61:                                               ; preds = %54
  %62 = bitcast <2 x i64>* %57 to i32*
  %63 = bitcast <2 x i64>* %56 to i32*
  %64 = add i32 %3, 1
  %65 = add nsw i32 %55, -1
  %66 = zext i32 %65 to i64
  %67 = add nuw nsw i64 %66, 1
  %68 = icmp ult i64 %67, 4
  br i1 %68, label %122, label %69

69:                                               ; preds = %61
  %70 = add nsw i32 %55, -1
  %71 = zext i32 %70 to i64
  %72 = shl nuw nsw i64 %71, 2
  %73 = add nuw nsw i64 %72, 4
  %74 = getelementptr i8, i8* %59, i64 %73
  %75 = getelementptr i8, i8* %58, i64 %73
  %76 = icmp ugt i8* %75, %59
  %77 = icmp ugt i8* %74, %58
  %78 = and i1 %76, %77
  br i1 %78, label %122, label %79

79:                                               ; preds = %69
  %80 = and i64 %67, 8589934588
  %81 = getelementptr i32, i32* %62, i64 %80
  %82 = trunc i64 %80 to i32
  %83 = sub i32 %55, %82
  %84 = getelementptr i32, i32* %63, i64 %80
  %85 = insertelement <4 x i32> undef, i32 %64, i32 0
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %87

87:                                               ; preds = %87, %79
  %88 = phi i64 [ 0, %79 ], [ %118, %87 ]
  %89 = getelementptr i32, i32* %62, i64 %88
  %90 = getelementptr i32, i32* %63, i64 %88
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !10
  %93 = bitcast i32* %89 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !13, !noalias !10
  %95 = lshr <4 x i32> %92, <i32 24, i32 24, i32 24, i32 24>
  %96 = mul <4 x i32> %95, %86
  %97 = sub <4 x i32> <i32 65535, i32 65535, i32 65535, i32 65535>, %96
  %98 = lshr <4 x i32> %97, <i32 8, i32 8, i32 8, i32 8>
  %99 = add <4 x i32> %98, %97
  %100 = lshr <4 x i32> %99, <i32 8, i32 8, i32 8, i32 8>
  %101 = and <4 x i32> %92, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %102 = mul <4 x i32> %101, %86
  %103 = lshr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %104 = and <4 x i32> %103, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %105 = mul <4 x i32> %104, %86
  %106 = and <4 x i32> %94, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %107 = mul <4 x i32> %100, %106
  %108 = lshr <4 x i32> %94, <i32 8, i32 8, i32 8, i32 8>
  %109 = and <4 x i32> %108, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %110 = mul <4 x i32> %100, %109
  %111 = add <4 x i32> %107, %102
  %112 = lshr <4 x i32> %111, <i32 8, i32 8, i32 8, i32 8>
  %113 = and <4 x i32> %112, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %114 = add <4 x i32> %110, %105
  %115 = and <4 x i32> %114, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %116 = or <4 x i32> %113, %115
  %117 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %117, align 4, !alias.scope !13, !noalias !10
  %118 = add i64 %88, 4
  %119 = icmp eq i64 %118, %80
  br i1 %119, label %120, label %87, !llvm.loop !15

120:                                              ; preds = %87
  %121 = icmp eq i64 %67, %80
  br i1 %121, label %158, label %122

122:                                              ; preds = %120, %69, %61
  %123 = phi i32* [ %62, %69 ], [ %62, %61 ], [ %81, %120 ]
  %124 = phi i32 [ %55, %69 ], [ %55, %61 ], [ %83, %120 ]
  %125 = phi i32* [ %63, %69 ], [ %63, %61 ], [ %84, %120 ]
  br label %126

126:                                              ; preds = %122, %126
  %127 = phi i32* [ %156, %126 ], [ %123, %122 ]
  %128 = phi i32 [ %130, %126 ], [ %124, %122 ]
  %129 = phi i32* [ %155, %126 ], [ %125, %122 ]
  %130 = add nsw i32 %128, -1
  %131 = load i32, i32* %129, align 4
  %132 = load i32, i32* %127, align 4
  %133 = lshr i32 %131, 24
  %134 = mul i32 %133, %64
  %135 = sub i32 65535, %134
  %136 = lshr i32 %135, 8
  %137 = add i32 %136, %135
  %138 = lshr i32 %137, 8
  %139 = and i32 %131, 16711935
  %140 = mul i32 %139, %64
  %141 = lshr i32 %131, 8
  %142 = and i32 %141, 16711935
  %143 = mul i32 %142, %64
  %144 = and i32 %132, 16711935
  %145 = mul i32 %138, %144
  %146 = lshr i32 %132, 8
  %147 = and i32 %146, 16711935
  %148 = mul i32 %138, %147
  %149 = add i32 %145, %140
  %150 = lshr i32 %149, 8
  %151 = and i32 %150, 16711935
  %152 = add i32 %148, %143
  %153 = and i32 %152, -16711936
  %154 = or i32 %151, %153
  store i32 %154, i32* %127, align 4
  %155 = getelementptr inbounds i32, i32* %129, i64 1
  %156 = getelementptr inbounds i32, i32* %127, i64 1
  %157 = icmp sgt i32 %130, 0
  br i1 %157, label %126, label %158, !llvm.loop !16

158:                                              ; preds = %126, %120, %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkBlitRow7Color32EPjPKjij(i32*, i32*, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = lshr i32 %3, 24
  %6 = trunc i32 %5 to i8
  switch i8 %6, label %14 [
    i8 0, label %7
    i8 -1, label %12
  ]

7:                                                ; preds = %4
  %8 = bitcast i32* %0 to i8*
  %9 = bitcast i32* %1 to i8*
  %10 = sext i32 %2 to i64
  %11 = shl nsw i64 %10, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 %11, i1 false)
  br label %16

12:                                               ; preds = %4
  %13 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  tail call void %13(i32* %0, i32 %3, i32 %2) #4
  br label %16

14:                                               ; preds = %4
  %15 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** @_ZN6SkOpts16blit_row_color32E, align 8
  tail call void %15(i32* %0, i32* %1, i32 %2, i32 %3) #4
  br label %16

16:                                               ; preds = %14, %12, %7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
