; ModuleID = '../../third_party/blink/renderer/platform/graphics/color.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/color.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::Color" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"struct.blink::NamedColor" = type { i8*, i32 }
%"class.WTF::IntegerToStringConverter" = type <{ [13 x i8], [3 x i8], i8*, i32, [4 x i8] }>
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.blink::Decimal" = type { %"class.blink::Decimal::EncodedData" }
%"class.blink::Decimal::EncodedData" = type <{ i64, i16, [2 x i8], i32, i32, [4 x i8] }>
%"class.WTF::Vector.1" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3", [16 x i8] }
%"class.WTF::VectorBufferBase.3" = type { i16*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.6 }
%union.anon.6 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN3WTF13StringBuilder6AppendEh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

@_ZN5blink5Color6kBlackE = hidden local_unnamed_addr constant i32 -16777216, align 4
@_ZN5blink5Color6kWhiteE = hidden local_unnamed_addr constant i32 -1, align 4
@_ZN5blink5Color9kDarkGrayE = hidden local_unnamed_addr constant i32 -8355712, align 4
@_ZN5blink5Color5kGrayE = hidden local_unnamed_addr constant i32 -6250336, align 4
@_ZN5blink5Color10kLightGrayE = hidden local_unnamed_addr constant i32 -4144960, align 4
@_ZN5blink5Color12kTransparentE = hidden local_unnamed_addr constant i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"#%02x%02x%02x\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"rgba(\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"#%02X%02X%02X%02X\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"#%02X%02X%02X\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.5 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.6 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.8 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.9 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@_ZN3WTF19kASCIICaseFoldTableE = external local_unnamed_addr constant [256 x i8], align 16
@_ZN5blink26RuntimeEnabledFeaturesBase31is_css_hex_alpha_color_enabled_E = external local_unnamed_addr global i8, align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink7MakeRGBEiii(i32, i32, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %0, 0
  %5 = select i1 %4, i32 %0, i32 0
  %6 = icmp slt i32 %5, 255
  %7 = select i1 %6, i32 %5, i32 255
  %8 = shl nuw nsw i32 %7, 16
  %9 = icmp sgt i32 %1, 0
  %10 = select i1 %9, i32 %1, i32 0
  %11 = icmp slt i32 %10, 255
  %12 = select i1 %11, i32 %10, i32 255
  %13 = shl nuw nsw i32 %12, 8
  %14 = icmp sgt i32 %2, 0
  %15 = select i1 %14, i32 %2, i32 0
  %16 = icmp slt i32 %15, 255
  %17 = select i1 %16, i32 %15, i32 255
  %18 = or i32 %8, %13
  %19 = or i32 %18, %17
  %20 = or i32 %19, -16777216
  ret i32 %20
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink8MakeRGBAEiiii(i32, i32, i32, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  %6 = select i1 %5, i32 %3, i32 0
  %7 = icmp slt i32 %6, 255
  %8 = select i1 %7, i32 %6, i32 255
  %9 = shl nuw i32 %8, 24
  %10 = icmp sgt i32 %0, 0
  %11 = select i1 %10, i32 %0, i32 0
  %12 = icmp slt i32 %11, 255
  %13 = select i1 %12, i32 %11, i32 255
  %14 = shl nuw nsw i32 %13, 16
  %15 = icmp sgt i32 %1, 0
  %16 = select i1 %15, i32 %1, i32 0
  %17 = icmp slt i32 %16, 255
  %18 = select i1 %17, i32 %16, i32 255
  %19 = shl nuw nsw i32 %18, 8
  %20 = icmp sgt i32 %2, 0
  %21 = select i1 %20, i32 %2, i32 0
  %22 = icmp slt i32 %21, 255
  %23 = select i1 %22, i32 %21, i32 255
  %24 = or i32 %19, %14
  %25 = or i32 %24, %23
  %26 = or i32 %25, %9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink20MakeRGBA32FromFloatsEffff(float, float, float, float) local_unnamed_addr #1 {
  %5 = fmul float %3, 2.550000e+02
  %6 = tail call i64 @lroundf(float %5) #12
  %7 = trunc i64 %6 to i32
  %8 = icmp sgt i32 %7, 0
  %9 = select i1 %8, i32 %7, i32 0
  %10 = icmp slt i32 %9, 255
  %11 = select i1 %10, i32 %9, i32 255
  %12 = shl nuw i32 %11, 24
  %13 = fmul float %0, 2.550000e+02
  %14 = tail call i64 @lroundf(float %13) #12
  %15 = trunc i64 %14 to i32
  %16 = icmp sgt i32 %15, 0
  %17 = select i1 %16, i32 %15, i32 0
  %18 = icmp slt i32 %17, 255
  %19 = select i1 %18, i32 %17, i32 255
  %20 = shl nuw nsw i32 %19, 16
  %21 = or i32 %20, %12
  %22 = fmul float %1, 2.550000e+02
  %23 = tail call i64 @lroundf(float %22) #12
  %24 = trunc i64 %23 to i32
  %25 = icmp sgt i32 %24, 0
  %26 = select i1 %25, i32 %24, i32 0
  %27 = icmp slt i32 %26, 255
  %28 = select i1 %27, i32 %26, i32 255
  %29 = shl nuw nsw i32 %28, 8
  %30 = or i32 %21, %29
  %31 = fmul float %2, 2.550000e+02
  %32 = tail call i64 @lroundf(float %31) #12
  %33 = trunc i64 %32 to i32
  %34 = icmp sgt i32 %33, 0
  %35 = select i1 %34, i32 %33, i32 0
  %36 = icmp slt i32 %35, 255
  %37 = select i1 %36, i32 %35, i32 255
  %38 = or i32 %30, %37
  ret i32 %38
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink16MakeRGBAFromHSLAEdddd(double, double, double, double) local_unnamed_addr #2 {
  %5 = fcmp une double %1, 0.000000e+00
  br i1 %5, label %24, label %6

6:                                                ; preds = %4
  %7 = fmul double %2, 2.550000e+02
  %8 = tail call double @llvm.round.f64(double %7)
  %9 = fptosi double %8 to i32
  %10 = fmul double %3, 2.550000e+02
  %11 = tail call double @llvm.round.f64(double %10)
  %12 = fptosi double %11 to i32
  %13 = icmp sgt i32 %12, 0
  %14 = select i1 %13, i32 %12, i32 0
  %15 = icmp slt i32 %14, 255
  %16 = select i1 %15, i32 %14, i32 255
  %17 = shl nuw i32 %16, 24
  %18 = icmp sgt i32 %9, 0
  %19 = select i1 %18, i32 %9, i32 0
  %20 = icmp slt i32 %19, 255
  %21 = select i1 %20, i32 %19, i32 255
  %22 = shl nuw nsw i32 %21, 16
  %23 = or i32 %22, %21
  br label %145

24:                                               ; preds = %4
  %25 = fcmp ugt double %2, 5.000000e-01
  br i1 %25, label %29, label %26

26:                                               ; preds = %24
  %27 = fadd double %1, 1.000000e+00
  %28 = fmul double %27, %2
  br label %33

29:                                               ; preds = %24
  %30 = fadd double %1, %2
  %31 = fmul double %1, %2
  %32 = fsub double %30, %31
  br label %33

33:                                               ; preds = %29, %26
  %34 = phi double [ %28, %26 ], [ %32, %29 ]
  %35 = fmul double %2, 2.000000e+00
  %36 = fsub double %35, %34
  %37 = fadd double %0, 2.000000e+00
  %38 = fcmp olt double %37, 0.000000e+00
  br i1 %38, label %39, label %41

39:                                               ; preds = %33
  %40 = fadd double %37, 6.000000e+00
  br label %45

41:                                               ; preds = %33
  %42 = fcmp ult double %37, 6.000000e+00
  br i1 %42, label %45, label %43

43:                                               ; preds = %41
  %44 = fadd double %37, -6.000000e+00
  br label %45

45:                                               ; preds = %43, %41, %39
  %46 = phi double [ %40, %39 ], [ %44, %43 ], [ %37, %41 ]
  %47 = fcmp olt double %46, 1.000000e+00
  br i1 %47, label %48, label %52

48:                                               ; preds = %45
  %49 = fsub double %34, %36
  %50 = fmul double %49, %46
  %51 = fadd double %36, %50
  br label %61

52:                                               ; preds = %45
  %53 = fcmp olt double %46, 3.000000e+00
  br i1 %53, label %61, label %54

54:                                               ; preds = %52
  %55 = fcmp olt double %46, 4.000000e+00
  br i1 %55, label %56, label %61

56:                                               ; preds = %54
  %57 = fsub double %34, %36
  %58 = fsub double 4.000000e+00, %46
  %59 = fmul double %57, %58
  %60 = fadd double %36, %59
  br label %61

61:                                               ; preds = %48, %52, %54, %56
  %62 = phi double [ %51, %48 ], [ %60, %56 ], [ %34, %52 ], [ %36, %54 ]
  %63 = fmul double %62, 2.550000e+02
  %64 = tail call double @llvm.round.f64(double %63)
  %65 = fptosi double %64 to i32
  %66 = fcmp olt double %0, 0.000000e+00
  br i1 %66, label %67, label %69

67:                                               ; preds = %61
  %68 = fadd double %0, 6.000000e+00
  br label %73

69:                                               ; preds = %61
  %70 = fcmp ult double %0, 6.000000e+00
  br i1 %70, label %73, label %71

71:                                               ; preds = %69
  %72 = fadd double %0, -6.000000e+00
  br label %73

73:                                               ; preds = %71, %69, %67
  %74 = phi double [ %68, %67 ], [ %72, %71 ], [ %0, %69 ]
  %75 = fcmp olt double %74, 1.000000e+00
  br i1 %75, label %76, label %80

76:                                               ; preds = %73
  %77 = fsub double %34, %36
  %78 = fmul double %77, %74
  %79 = fadd double %36, %78
  br label %89

80:                                               ; preds = %73
  %81 = fcmp olt double %74, 3.000000e+00
  br i1 %81, label %89, label %82

82:                                               ; preds = %80
  %83 = fcmp olt double %74, 4.000000e+00
  br i1 %83, label %84, label %89

84:                                               ; preds = %82
  %85 = fsub double %34, %36
  %86 = fsub double 4.000000e+00, %74
  %87 = fmul double %85, %86
  %88 = fadd double %36, %87
  br label %89

89:                                               ; preds = %76, %80, %82, %84
  %90 = phi double [ %79, %76 ], [ %88, %84 ], [ %34, %80 ], [ %36, %82 ]
  %91 = fmul double %90, 2.550000e+02
  %92 = tail call double @llvm.round.f64(double %91)
  %93 = fptosi double %92 to i32
  %94 = fadd double %0, -2.000000e+00
  %95 = fcmp olt double %94, 0.000000e+00
  br i1 %95, label %96, label %98

96:                                               ; preds = %89
  %97 = fadd double %94, 6.000000e+00
  br label %102

98:                                               ; preds = %89
  %99 = fcmp ult double %94, 6.000000e+00
  br i1 %99, label %102, label %100

100:                                              ; preds = %98
  %101 = fadd double %94, -6.000000e+00
  br label %102

102:                                              ; preds = %100, %98, %96
  %103 = phi double [ %97, %96 ], [ %101, %100 ], [ %94, %98 ]
  %104 = fcmp olt double %103, 1.000000e+00
  br i1 %104, label %105, label %109

105:                                              ; preds = %102
  %106 = fsub double %34, %36
  %107 = fmul double %106, %103
  %108 = fadd double %36, %107
  br label %118

109:                                              ; preds = %102
  %110 = fcmp olt double %103, 3.000000e+00
  br i1 %110, label %118, label %111

111:                                              ; preds = %109
  %112 = fcmp olt double %103, 4.000000e+00
  br i1 %112, label %113, label %118

113:                                              ; preds = %111
  %114 = fsub double %34, %36
  %115 = fsub double 4.000000e+00, %103
  %116 = fmul double %114, %115
  %117 = fadd double %36, %116
  br label %118

118:                                              ; preds = %105, %109, %111, %113
  %119 = phi double [ %108, %105 ], [ %117, %113 ], [ %34, %109 ], [ %36, %111 ]
  %120 = fmul double %119, 2.550000e+02
  %121 = tail call double @llvm.round.f64(double %120)
  %122 = fptosi double %121 to i32
  %123 = fmul double %3, 2.550000e+02
  %124 = tail call double @llvm.round.f64(double %123)
  %125 = fptosi double %124 to i32
  %126 = icmp sgt i32 %125, 0
  %127 = select i1 %126, i32 %125, i32 0
  %128 = icmp slt i32 %127, 255
  %129 = select i1 %128, i32 %127, i32 255
  %130 = shl nuw i32 %129, 24
  %131 = icmp sgt i32 %65, 0
  %132 = select i1 %131, i32 %65, i32 0
  %133 = icmp slt i32 %132, 255
  %134 = select i1 %133, i32 %132, i32 255
  %135 = shl nuw nsw i32 %134, 16
  %136 = icmp sgt i32 %93, 0
  %137 = select i1 %136, i32 %93, i32 0
  %138 = icmp slt i32 %137, 255
  %139 = select i1 %138, i32 %137, i32 255
  %140 = icmp sgt i32 %122, 0
  %141 = select i1 %140, i32 %122, i32 0
  %142 = icmp slt i32 %141, 255
  %143 = select i1 %142, i32 %141, i32 255
  %144 = or i32 %135, %130
  br label %145

145:                                              ; preds = %118, %6
  %146 = phi i32 [ %139, %118 ], [ %21, %6 ]
  %147 = phi i32 [ %144, %118 ], [ %23, %6 ]
  %148 = phi i32 [ %143, %118 ], [ %17, %6 ]
  %149 = shl nuw nsw i32 %146, 8
  %150 = or i32 %147, %149
  %151 = or i32 %150, %148
  ret i32 %151
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink17MakeRGBAFromCMYKAEfffff(float, float, float, float, float) local_unnamed_addr #1 {
  %6 = tail call double @nextafter(double 2.560000e+02, double 0.000000e+00) #12
  %7 = fsub float 1.000000e+00, %0
  %8 = fpext float %7 to double
  %9 = insertelement <2 x float> undef, float %2, i32 0
  %10 = insertelement <2 x float> %9, float %3, i32 1
  %11 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %10
  %12 = fpext <2 x float> %11 to <2 x double>
  %13 = extractelement <2 x double> %12, i32 1
  %14 = fmul double %13, %8
  %15 = fmul double %14, %6
  %16 = fptosi double %15 to i32
  %17 = tail call double @nextafter(double 2.560000e+02, double 0.000000e+00) #12
  %18 = fsub float 1.000000e+00, %1
  %19 = fpext float %18 to double
  %20 = fmul double %13, %19
  %21 = fmul double %20, %17
  %22 = fptosi double %21 to i32
  %23 = tail call double @nextafter(double 2.560000e+02, double 0.000000e+00) #12
  %24 = extractelement <2 x double> %12, i32 0
  %25 = fmul double %24, %13
  %26 = fmul double %25, %23
  %27 = fptosi double %26 to i32
  %28 = tail call double @nextafter(double 2.560000e+02, double 0.000000e+00) #12
  %29 = fpext float %4 to double
  %30 = fmul double %28, %29
  %31 = fptrunc double %30 to float
  %32 = fptosi float %31 to i32
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = icmp slt i32 %34, 255
  %36 = select i1 %35, i32 %34, i32 255
  %37 = shl nuw i32 %36, 24
  %38 = icmp sgt i32 %16, 0
  %39 = select i1 %38, i32 %16, i32 0
  %40 = icmp slt i32 %39, 255
  %41 = select i1 %40, i32 %39, i32 255
  %42 = shl nuw nsw i32 %41, 16
  %43 = icmp sgt i32 %22, 0
  %44 = select i1 %43, i32 %22, i32 0
  %45 = icmp slt i32 %44, 255
  %46 = select i1 %45, i32 %44, i32 255
  %47 = shl nuw nsw i32 %46, 8
  %48 = icmp sgt i32 %27, 0
  %49 = select i1 %48, i32 %27, i32 0
  %50 = icmp slt i32 %49, 255
  %51 = select i1 %50, i32 %49, i32 255
  %52 = or i32 %47, %42
  %53 = or i32 %52, %51
  %54 = or i32 %53, %37
  ret i32 %54
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink5Color13ParseHexColorEPKhjRj(i8* nocapture readonly, i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #5 align 2 {
  switch i32 %1, label %71 [
    i32 8, label %4
    i32 4, label %4
    i32 3, label %7
    i32 6, label %7
  ]

4:                                                ; preds = %3, %3
  %5 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase31is_css_hex_alpha_color_enabled_E, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %71, label %7

7:                                                ; preds = %4, %3, %3
  %8 = zext i32 %1 to i64
  br label %9

9:                                                ; preds = %20, %7
  %10 = phi i64 [ 0, %7 ], [ %29, %20 ]
  %11 = phi i32 [ 0, %7 ], [ %28, %20 ]
  %12 = getelementptr inbounds i8, i8* %0, i64 %10
  %13 = load i8, i8* %12, align 1
  %14 = add i8 %13, -48
  %15 = icmp ult i8 %14, 10
  br i1 %15, label %20, label %16

16:                                               ; preds = %9
  %17 = or i8 %13, 32
  %18 = add i8 %17, -97
  %19 = icmp ult i8 %18, 6
  br i1 %19, label %20, label %71

20:                                               ; preds = %16, %9
  %21 = shl i32 %11, 4
  %22 = zext i8 %13 to i32
  %23 = icmp ult i8 %13, 65
  %24 = add nsw i32 %22, -48
  %25 = add nuw nsw i32 %22, 9
  %26 = and i32 %25, 15
  %27 = select i1 %23, i32 %24, i32 %26
  %28 = or i32 %27, %21
  %29 = add nuw nsw i64 %10, 1
  %30 = icmp eq i64 %29, %8
  br i1 %30, label %31, label %9

31:                                               ; preds = %20
  switch i32 %1, label %56 [
    i32 6, label %32
    i32 8, label %34
    i32 4, label %38
  ]

32:                                               ; preds = %31
  %33 = or i32 %28, -16777216
  store i32 %33, i32* %2, align 4
  br label %71

34:                                               ; preds = %31
  %35 = shl i32 %28, 24
  %36 = lshr i32 %28, 8
  %37 = or i32 %35, %36
  store i32 %37, i32* %2, align 4
  br label %71

38:                                               ; preds = %31
  %39 = shl i32 %27, 28
  %40 = shl i32 %27, 24
  %41 = and i32 %40, 251658240
  %42 = and i32 %28, 61440
  %43 = shl nuw nsw i32 %42, 8
  %44 = shl nuw nsw i32 %42, 4
  %45 = and i32 %28, 3840
  %46 = shl nuw nsw i32 %45, 4
  %47 = and i32 %28, 240
  %48 = lshr exact i32 %47, 4
  %49 = or i32 %45, %39
  %50 = or i32 %49, %47
  %51 = or i32 %50, %41
  %52 = or i32 %51, %43
  %53 = or i32 %52, %44
  %54 = or i32 %53, %46
  %55 = or i32 %54, %48
  store i32 %55, i32* %2, align 4
  br label %71

56:                                               ; preds = %31
  %57 = and i32 %28, 3840
  %58 = shl nuw nsw i32 %57, 12
  %59 = shl nuw nsw i32 %57, 8
  %60 = and i32 %28, 240
  %61 = shl nuw nsw i32 %60, 8
  %62 = shl nuw nsw i32 %60, 4
  %63 = and i32 %27, 15
  %64 = shl nuw nsw i32 %63, 4
  %65 = or i32 %63, %64
  %66 = or i32 %65, %59
  %67 = or i32 %66, %58
  %68 = or i32 %67, %61
  %69 = or i32 %68, %62
  %70 = or i32 %69, -16777216
  store i32 %70, i32* %2, align 4
  br label %71

71:                                               ; preds = %16, %3, %4, %32, %34, %38, %56
  %72 = phi i1 [ false, %3 ], [ false, %4 ], [ true, %32 ], [ true, %34 ], [ true, %38 ], [ true, %56 ], [ false, %16 ]
  ret i1 %72
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink5Color13ParseHexColorEPKDsjRj(i16* nocapture readonly, i32, i32* nocapture dereferenceable(4)) local_unnamed_addr #5 align 2 {
  switch i32 %1, label %71 [
    i32 8, label %4
    i32 4, label %4
    i32 3, label %7
    i32 6, label %7
  ]

4:                                                ; preds = %3, %3
  %5 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase31is_css_hex_alpha_color_enabled_E, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %71, label %7

7:                                                ; preds = %4, %3, %3
  %8 = zext i32 %1 to i64
  br label %9

9:                                                ; preds = %20, %7
  %10 = phi i64 [ 0, %7 ], [ %29, %20 ]
  %11 = phi i32 [ 0, %7 ], [ %28, %20 ]
  %12 = getelementptr inbounds i16, i16* %0, i64 %10
  %13 = load i16, i16* %12, align 2
  %14 = add i16 %13, -48
  %15 = icmp ult i16 %14, 10
  br i1 %15, label %20, label %16

16:                                               ; preds = %9
  %17 = or i16 %13, 32
  %18 = add i16 %17, -97
  %19 = icmp ult i16 %18, 6
  br i1 %19, label %20, label %71

20:                                               ; preds = %16, %9
  %21 = shl i32 %11, 4
  %22 = zext i16 %13 to i32
  %23 = icmp ult i16 %13, 65
  %24 = add nsw i32 %22, -48
  %25 = add nuw nsw i32 %22, 9
  %26 = and i32 %25, 15
  %27 = select i1 %23, i32 %24, i32 %26
  %28 = or i32 %27, %21
  %29 = add nuw nsw i64 %10, 1
  %30 = icmp eq i64 %29, %8
  br i1 %30, label %31, label %9

31:                                               ; preds = %20
  switch i32 %1, label %56 [
    i32 6, label %32
    i32 8, label %34
    i32 4, label %38
  ]

32:                                               ; preds = %31
  %33 = or i32 %28, -16777216
  store i32 %33, i32* %2, align 4
  br label %71

34:                                               ; preds = %31
  %35 = shl i32 %28, 24
  %36 = lshr i32 %28, 8
  %37 = or i32 %35, %36
  store i32 %37, i32* %2, align 4
  br label %71

38:                                               ; preds = %31
  %39 = shl i32 %27, 28
  %40 = shl i32 %27, 24
  %41 = and i32 %40, 251658240
  %42 = and i32 %28, 61440
  %43 = shl nuw nsw i32 %42, 8
  %44 = shl nuw nsw i32 %42, 4
  %45 = and i32 %28, 3840
  %46 = shl nuw nsw i32 %45, 4
  %47 = and i32 %28, 240
  %48 = lshr exact i32 %47, 4
  %49 = or i32 %45, %39
  %50 = or i32 %49, %47
  %51 = or i32 %50, %41
  %52 = or i32 %51, %43
  %53 = or i32 %52, %44
  %54 = or i32 %53, %46
  %55 = or i32 %54, %48
  store i32 %55, i32* %2, align 4
  br label %71

56:                                               ; preds = %31
  %57 = and i32 %28, 3840
  %58 = shl nuw nsw i32 %57, 12
  %59 = shl nuw nsw i32 %57, 8
  %60 = and i32 %28, 240
  %61 = shl nuw nsw i32 %60, 8
  %62 = shl nuw nsw i32 %60, 4
  %63 = and i32 %27, 15
  %64 = shl nuw nsw i32 %63, 4
  %65 = or i32 %63, %64
  %66 = or i32 %65, %59
  %67 = or i32 %66, %58
  %68 = or i32 %67, %61
  %69 = or i32 %68, %62
  %70 = or i32 %69, -16777216
  store i32 %70, i32* %2, align 4
  br label %71

71:                                               ; preds = %16, %3, %4, %32, %34, %38, %56
  %72 = phi i1 [ false, %3 ], [ false, %4 ], [ true, %32 ], [ true, %34 ], [ true, %38 ], [ true, %56 ], [ false, %16 ]
  ret i1 %72
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink5Color13ParseHexColorERKN3WTF10StringViewERj(%"class.WTF::StringView"* nocapture readonly dereferenceable(24), i32* nocapture dereferenceable(4)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %21, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %0, i64 0, i32 1
  br i1 %12, label %17, label %14

14:                                               ; preds = %6
  %15 = load i8*, i8** %13, align 8
  %16 = tail call zeroext i1 @_ZN5blink5Color13ParseHexColorEPKhjRj(i8* %15, i32 %4, i32* dereferenceable(4) %1)
  br label %21

17:                                               ; preds = %6
  %18 = bitcast i8** %13 to i16**
  %19 = load i16*, i16** %18, align 8
  %20 = tail call zeroext i1 @_ZN5blink5Color13ParseHexColorEPKDsjRj(i16* %19, i32 %4, i32* dereferenceable(4) %1)
  br label %21

21:                                               ; preds = %2, %17, %14
  %22 = phi i1 [ %16, %14 ], [ %20, %17 ], [ false, %2 ]
  ret i1 %22
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5blink17DifferenceSquaredERKNS_5ColorES2_(%"class.blink::Color"* nocapture readonly dereferenceable(4), %"class.blink::Color"* nocapture readonly dereferenceable(4)) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = lshr i32 %4, 16
  %6 = and i32 %5, 255
  %7 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = lshr i32 %8, 16
  %10 = and i32 %9, 255
  %11 = sub nsw i32 %6, %10
  %12 = lshr i32 %4, 8
  %13 = and i32 %12, 255
  %14 = lshr i32 %8, 8
  %15 = and i32 %14, 255
  %16 = sub nsw i32 %13, %15
  %17 = and i32 %4, 255
  %18 = and i32 %8, 255
  %19 = sub nsw i32 %17, %18
  %20 = mul nsw i32 %11, %11
  %21 = mul nsw i32 %16, %16
  %22 = mul nsw i32 %19, %19
  %23 = add nuw nsw i32 %21, %22
  %24 = add nuw nsw i32 %23, %20
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink5Color13SetFromStringERKN3WTF6StringE(%"class.blink::Color"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 64, i1 false) #12
  br label %74

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %31, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 1
  br i1 %17, label %23, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.WTF::StringImpl"* %18 to i8*
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  br label %26

23:                                               ; preds = %13
  %24 = bitcast %"class.WTF::StringImpl"* %18 to i16*
  %25 = load i16, i16* %24, align 2
  br label %26

26:                                               ; preds = %19, %23
  %27 = phi i16 [ %22, %19 ], [ %25, %23 ]
  %28 = icmp eq i16 %27, 35
  br i1 %28, label %88, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  br label %33

31:                                               ; preds = %9
  %32 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  br label %33

33:                                               ; preds = %31, %29
  %34 = phi i8* [ %32, %31 ], [ %30, %29 ]
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %34) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 64, i1 false) #12
  %35 = load i32, i32* %10, align 4
  %36 = zext i32 %35 to i64
  %37 = icmp ugt i32 %35, 63
  br i1 %37, label %73, label %38

38:                                               ; preds = %33
  %39 = icmp eq i32 %35, 0
  br i1 %39, label %74, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 1
  %43 = bitcast %"class.WTF::StringImpl"* %42 to i8*
  %44 = bitcast %"class.WTF::StringImpl"* %42 to i16*
  br label %45

45:                                               ; preds = %40, %69
  %46 = phi i64 [ %67, %69 ], [ 0, %40 ]
  %47 = load atomic i32, i32* %41 monotonic, align 4
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds i8, i8* %43, i64 %46
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  br label %57

54:                                               ; preds = %45
  %55 = getelementptr inbounds i16, i16* %44, i64 %46
  %56 = load i16, i16* %55, align 2
  br label %57

57:                                               ; preds = %54, %50
  %58 = phi i16 [ %53, %50 ], [ %56, %54 ]
  %59 = add i16 %58, -1
  %60 = icmp ugt i16 %59, 126
  br i1 %60, label %73, label %61

61:                                               ; preds = %57
  %62 = and i16 %58, 255
  %63 = zext i16 %62 to i64
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %46
  store i8 %65, i8* %66, align 1
  %67 = add nuw nsw i64 %46, 1
  %68 = icmp eq i64 %67, %36
  br i1 %68, label %74, label %69

69:                                               ; preds = %61
  %70 = load i32, i32* %10, align 4
  %71 = zext i32 %70 to i64
  %72 = icmp ult i64 %67, %71
  br i1 %72, label %45, label %73

73:                                               ; preds = %69, %57, %33
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %34) #12
  br label %84

74:                                               ; preds = %61, %7, %38
  %75 = phi i8* [ %34, %38 ], [ %8, %7 ], [ %34, %61 ]
  %76 = phi i32 [ 0, %38 ], [ 0, %7 ], [ %35, %61 ]
  %77 = phi i64 [ 0, %38 ], [ 0, %7 ], [ %36, %61 ]
  %78 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %77
  store i8 0, i8* %78, align 1
  %79 = call %"struct.blink::NamedColor"* @_ZN5blink9FindColorEPKcj(i8* nonnull %75, i32 %76) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %75) #12
  %80 = icmp eq %"struct.blink::NamedColor"* %79, null
  br i1 %80, label %84, label %81

81:                                               ; preds = %74
  %82 = getelementptr inbounds %"struct.blink::NamedColor", %"struct.blink::NamedColor"* %79, i64 0, i32 1
  %83 = load i32, i32* %82, align 8
  br label %84

84:                                               ; preds = %73, %74, %81
  %85 = phi i1 [ true, %81 ], [ false, %74 ], [ false, %73 ]
  %86 = phi i32 [ %83, %81 ], [ 0, %74 ], [ 0, %73 ]
  %87 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  store i32 %86, i32* %87, align 4
  br label %104

88:                                               ; preds = %26
  %89 = load atomic i32, i32* %14 monotonic, align 4
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %98, label %92

92:                                               ; preds = %88
  %93 = bitcast %"class.WTF::StringImpl"* %18 to i8*
  %94 = getelementptr inbounds i8, i8* %93, i64 1
  %95 = add i32 %11, -1
  %96 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %97 = tail call zeroext i1 @_ZN5blink5Color13ParseHexColorEPKhjRj(i8* %94, i32 %95, i32* dereferenceable(4) %96)
  br label %104

98:                                               ; preds = %88
  %99 = bitcast %"class.WTF::StringImpl"* %18 to i16*
  %100 = getelementptr inbounds i16, i16* %99, i64 1
  %101 = add i32 %11, -1
  %102 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %103 = tail call zeroext i1 @_ZN5blink5Color13ParseHexColorEPKDsjRj(i16* %100, i32 %101, i32* dereferenceable(4) %102)
  br label %104

104:                                              ; preds = %98, %92, %84
  %105 = phi i1 [ %85, %84 ], [ %97, %92 ], [ %103, %98 ]
  ret i1 %105
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink5Color13SetNamedColorERKN3WTF6StringE(%"class.blink::Color"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 64, i1 false) #12
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %49, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = icmp ugt i32 %10, 63
  br i1 %12, label %48, label %13

13:                                               ; preds = %8
  %14 = icmp eq i32 %10, 0
  br i1 %14, label %49, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %18 = bitcast %"class.WTF::StringImpl"* %17 to i8*
  %19 = bitcast %"class.WTF::StringImpl"* %17 to i16*
  br label %20

20:                                               ; preds = %15, %44
  %21 = phi i64 [ 0, %15 ], [ %42, %44 ]
  %22 = load atomic i32, i32* %16 monotonic, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds i8, i8* %18, i64 %21
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i16
  br label %32

29:                                               ; preds = %20
  %30 = getelementptr inbounds i16, i16* %19, i64 %21
  %31 = load i16, i16* %30, align 2
  br label %32

32:                                               ; preds = %29, %25
  %33 = phi i16 [ %28, %25 ], [ %31, %29 ]
  %34 = add i16 %33, -1
  %35 = icmp ugt i16 %34, 126
  br i1 %35, label %48, label %36

36:                                               ; preds = %32
  %37 = and i16 %33, 255
  %38 = zext i16 %37 to i64
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN3WTF19kASCIICaseFoldTableE, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %21
  store i8 %40, i8* %41, align 1
  %42 = add nuw nsw i64 %21, 1
  %43 = icmp eq i64 %42, %11
  br i1 %43, label %49, label %44

44:                                               ; preds = %36
  %45 = load i32, i32* %9, align 4
  %46 = zext i32 %45 to i64
  %47 = icmp ult i64 %42, %46
  br i1 %47, label %20, label %48

48:                                               ; preds = %32, %44, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #12
  br label %58

49:                                               ; preds = %36, %2, %13
  %50 = phi i32 [ 0, %13 ], [ 0, %2 ], [ %10, %36 ]
  %51 = phi i64 [ 0, %13 ], [ 0, %2 ], [ %11, %36 ]
  %52 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %51
  store i8 0, i8* %52, align 1
  %53 = call %"struct.blink::NamedColor"* @_ZN5blink9FindColorEPKcj(i8* nonnull %4, i32 %50) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #12
  %54 = icmp eq %"struct.blink::NamedColor"* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"struct.blink::NamedColor", %"struct.blink::NamedColor"* %53, i64 0, i32 1
  %57 = load i32, i32* %56, align 8
  br label %58

58:                                               ; preds = %49, %48, %55
  %59 = phi i1 [ true, %55 ], [ false, %49 ], [ false, %48 ]
  %60 = phi i32 [ %57, %55 ], [ 0, %49 ], [ 0, %48 ]
  %61 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  store i32 %60, i32* %61, align 4
  ret i1 %59
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink5Color10SerializedEv(%"class.blink::Color"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %3 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %4 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %5 = alloca %"class.WTF::StringBuilder", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.blink::Decimal", align 8
  %12 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %13, -16777216
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = lshr i32 %13, 16
  %17 = and i32 %16, 255
  %18 = lshr i32 %13, 8
  %19 = and i32 %18, 255
  %20 = and i32 %13, 255
  %21 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 %17, i32 %19, i32 %20) #12
  br label %191

22:                                               ; preds = %1
  %23 = bitcast %"class.WTF::StringBuilder"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %23) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 48, i1 false)
  %24 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %24, align 8
  %25 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 1
  %26 = bitcast %union.anon* %25 to i8*
  store i8 0, i8* %26, align 8
  %27 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 2
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 3
  store i8 1, i8* %28, align 4
  %29 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 4
  store i8 0, i8* %29, align 1
  call void @_ZN3WTF13StringBuilder15ReserveCapacityEj(%"class.WTF::StringBuilder"* nonnull %5, i32 28) #12
  %30 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #12
  %31 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %32 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8** %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 5, i32* %34, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #12
  %35 = load i32, i32* %12, align 4
  %36 = lshr i32 %35, 16
  %37 = and i32 %36, 255
  %38 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38) #12
  %39 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 12
  %40 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 2
  %41 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 3
  %42 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 32, i1 false) #12
  store i8* %39, i8** %40, align 8
  %43 = trunc i32 %36 to i8
  %44 = urem i8 %43, 10
  %45 = or i8 %44, 48
  store i8 %45, i8* %39, align 4
  %46 = icmp ugt i32 %37, 9
  br i1 %46, label %47, label %58

47:                                               ; preds = %22
  %48 = trunc i32 %36 to i8
  %49 = udiv i8 %48, 10
  %50 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 11
  store i8* %50, i8** %40, align 8
  %51 = urem i8 %49, 10
  %52 = or i8 %51, 48
  store i8 %52, i8* %50, align 1
  %53 = icmp ugt i32 %37, 99
  br i1 %53, label %54, label %58

54:                                               ; preds = %47
  %55 = udiv i8 %48, 100
  %56 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 10
  store i8* %56, i8** %40, align 8
  %57 = or i8 %55, 48
  store i8 %57, i8* %56, align 2
  br label %58

58:                                               ; preds = %54, %47, %22
  %59 = phi i8* [ %56, %54 ], [ %50, %47 ], [ %39, %22 ]
  %60 = ptrtoint i8* %59 to i64
  %61 = ptrtoint i8* %42 to i64
  %62 = sub i64 %61, %60
  %63 = trunc i64 %62 to i32
  store i32 %63, i32* %41, align 8
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %5, i8* %59, i32 %63) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38) #12
  %64 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #12
  %65 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %66 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %67, align 8
  %68 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 2, i32* %68, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #12
  %69 = load i32, i32* %12, align 4
  %70 = lshr i32 %69, 8
  %71 = and i32 %70, 255
  %72 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %72) #12
  %73 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 12
  %74 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 2
  %75 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 3
  %76 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 -86, i64 32, i1 false) #12
  store i8* %73, i8** %74, align 8
  %77 = trunc i32 %70 to i8
  %78 = urem i8 %77, 10
  %79 = or i8 %78, 48
  store i8 %79, i8* %73, align 4
  %80 = icmp ugt i32 %71, 9
  br i1 %80, label %81, label %92

81:                                               ; preds = %58
  %82 = trunc i32 %70 to i8
  %83 = udiv i8 %82, 10
  %84 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 11
  store i8* %84, i8** %74, align 8
  %85 = urem i8 %83, 10
  %86 = or i8 %85, 48
  store i8 %86, i8* %84, align 1
  %87 = icmp ugt i32 %71, 99
  br i1 %87, label %88, label %92

88:                                               ; preds = %81
  %89 = udiv i8 %82, 100
  %90 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 10
  store i8* %90, i8** %74, align 8
  %91 = or i8 %89, 48
  store i8 %91, i8* %90, align 2
  br label %92

92:                                               ; preds = %88, %81, %58
  %93 = phi i8* [ %90, %88 ], [ %84, %81 ], [ %73, %58 ]
  %94 = ptrtoint i8* %93 to i64
  %95 = ptrtoint i8* %76 to i64
  %96 = sub i64 %95, %94
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %75, align 8
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %5, i8* %93, i32 %97) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %72) #12
  %98 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %98) #12
  %99 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %100 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %101, align 8
  %102 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 2, i32* %102, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %98) #12
  %103 = load i32, i32* %12, align 4
  %104 = and i32 %103, 255
  %105 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %105) #12
  %106 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 12
  %107 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 2
  %108 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 3
  %109 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %105, i8 -86, i64 32, i1 false) #12
  store i8* %106, i8** %107, align 8
  %110 = trunc i32 %103 to i8
  %111 = urem i8 %110, 10
  %112 = or i8 %111, 48
  store i8 %112, i8* %106, align 4
  %113 = icmp ugt i32 %104, 9
  br i1 %113, label %114, label %125

114:                                              ; preds = %92
  %115 = trunc i32 %103 to i8
  %116 = udiv i8 %115, 10
  %117 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 11
  store i8* %117, i8** %107, align 8
  %118 = urem i8 %116, 10
  %119 = or i8 %118, 48
  store i8 %119, i8* %117, align 1
  %120 = icmp ugt i32 %104, 99
  br i1 %120, label %121, label %125

121:                                              ; preds = %114
  %122 = udiv i8 %115, 100
  %123 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 10
  store i8* %123, i8** %107, align 8
  %124 = or i8 %122, 48
  store i8 %124, i8* %123, align 2
  br label %125

125:                                              ; preds = %121, %114, %92
  %126 = phi i8* [ %123, %121 ], [ %117, %114 ], [ %106, %92 ]
  %127 = ptrtoint i8* %126 to i64
  %128 = ptrtoint i8* %109 to i64
  %129 = sub i64 %128, %127
  %130 = trunc i64 %129 to i32
  store i32 %130, i32* %108, align 8
  call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* nonnull %5, i8* %126, i32 %130) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %105) #12
  %131 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %131) #12
  %132 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %133 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %132, i64* %133, align 8
  %134 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %134, align 8
  %135 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 2, i32* %135, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %131) #12
  %136 = load i32, i32* %12, align 4
  %137 = lshr i32 %136, 24
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %125
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %5, i8 zeroext 48) #12
  br label %173

140:                                              ; preds = %125
  %141 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %141) #12
  %142 = bitcast %"class.blink::Decimal"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %142) #12
  %143 = sitofp i32 %137 to double
  %144 = fdiv double %143, 2.550000e+02
  call void @_ZN5blink7Decimal10FromDoubleEd(%"class.blink::Decimal"* nonnull sret %11, double %144) #12
  %145 = call %"class.WTF::StringImpl"* @_ZNK5blink7Decimal8ToStringEv(%"class.blink::Decimal"* nonnull %11) #12
  %146 = icmp eq %"class.WTF::StringImpl"* %145, null
  br i1 %146, label %147, label %152

147:                                              ; preds = %140
  %148 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  store i8* null, i8** %148, align 8
  %149 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %150 = bitcast %"class.WTF::StringView"* %10 to i64*
  store i64 %149, i64* %150, align 8
  %151 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 0, i32* %151, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  br label %172

152:                                              ; preds = %140
  %153 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %145, %"class.WTF::StringImpl"** %153, align 8
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 1
  %157 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %158 = bitcast i8** %157 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %156, %"class.WTF::StringImpl"** %158, align 8
  %159 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %155, i32* %159, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = load atomic i32, i32* %160 monotonic, align 4
  %162 = and i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 0
  %165 = load i32, i32* %164, align 4
  br i1 %163, label %166, label %168

166:                                              ; preds = %152
  %167 = add i32 %165, -1
  store i32 %167, i32* %164, align 4
  br label %168

168:                                              ; preds = %166, %152
  %169 = phi i32 [ %167, %166 ], [ %165, %152 ]
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %145) #12
  br label %172

172:                                              ; preds = %147, %168, %171
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %142) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %141) #12
  br label %173

173:                                              ; preds = %172, %139
  call void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"* nonnull %5, i8 zeroext 41) #12
  %174 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %5) #12
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %5) #12
  %175 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %176 = icmp eq %"class.WTF::StringImpl"* %175, null
  br i1 %176, label %190, label %177

177:                                              ; preds = %173
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %175, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = and i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %175, i64 0, i32 0
  %183 = load i32, i32* %182, align 4
  br i1 %181, label %184, label %186

184:                                              ; preds = %177
  %185 = add i32 %183, -1
  store i32 %185, i32* %182, align 4
  br label %186

186:                                              ; preds = %184, %177
  %187 = phi i32 [ %185, %184 ], [ %183, %177 ]
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %190

189:                                              ; preds = %186
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %175) #12
  br label %190

190:                                              ; preds = %173, %186, %189
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %23) #12
  br label %191

191:                                              ; preds = %190, %15
  %192 = phi %"class.WTF::StringImpl"* [ %174, %190 ], [ %21, %15 ]
  ret %"class.WTF::StringImpl"* %192
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN3WTF13StringBuilder15ReserveCapacityEj(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #12
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !3

46:                                               ; preds = %37
  tail call void @llvm.trap() #12
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #12
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #12
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #12
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

declare void @_ZN5blink7Decimal10FromDoubleEd(%"class.blink::Decimal"* sret, double) local_unnamed_addr #7

declare %"class.WTF::StringImpl"* @_ZNK5blink7Decimal8ToStringEv(%"class.blink::Decimal"*) local_unnamed_addr #7

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink5Color23NameForLayoutTreeAsTextEv(%"class.blink::Color"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = lshr i32 %3, 24
  %5 = icmp eq i32 %4, 255
  %6 = lshr i32 %3, 16
  %7 = and i32 %6, 255
  %8 = lshr i32 %3, 8
  %9 = and i32 %8, 255
  %10 = and i32 %3, 255
  br i1 %5, label %13, label %11

11:                                               ; preds = %1
  %12 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i32 %7, i32 %9, i32 %10, i32 %4) #12
  br label %15

13:                                               ; preds = %1
  %14 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 %7, i32 %9, i32 %10) #12
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi %"class.WTF::StringImpl"* [ %12, %11 ], [ %14, %13 ]
  ret %"class.WTF::StringImpl"* %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink5ColorcvjEv(%"class.blink::Color"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink5Color5LightEv(%"class.blink::Color"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, -16777216
  br i1 %4, label %59, label %5

5:                                                ; preds = %1
  %6 = tail call float @nextafterf(float 2.560000e+02, float 0.000000e+00) #12
  %7 = load i32, i32* %2, align 4
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  %10 = sitofp i32 %9 to float
  %11 = fdiv float %10, 2.550000e+02
  %12 = lshr i32 %7, 8
  %13 = and i32 %12, 255
  %14 = sitofp i32 %13 to float
  %15 = fdiv float %14, 2.550000e+02
  %16 = and i32 %7, 255
  %17 = sitofp i32 %16 to float
  %18 = fdiv float %17, 2.550000e+02
  %19 = fcmp olt float %15, %18
  %20 = select i1 %19, float %18, float %15
  %21 = fcmp olt float %11, %20
  %22 = select i1 %21, float %20, float %11
  %23 = fcmp oeq float %22, 0.000000e+00
  br i1 %23, label %24, label %27

24:                                               ; preds = %5
  %25 = and i32 %7, -16777216
  %26 = or i32 %25, 5526612
  br label %59

27:                                               ; preds = %5
  %28 = fadd float %22, 0x3FD51EB860000000
  %29 = fcmp olt float %28, 1.000000e+00
  %30 = select i1 %29, float %28, float 1.000000e+00
  %31 = fdiv float %30, %22
  %32 = fmul float %11, %31
  %33 = fmul float %6, %32
  %34 = fptosi float %33 to i32
  %35 = fmul float %15, %31
  %36 = fmul float %6, %35
  %37 = fptosi float %36 to i32
  %38 = fmul float %18, %31
  %39 = fmul float %6, %38
  %40 = fptosi float %39 to i32
  %41 = and i32 %7, -16777216
  %42 = icmp sgt i32 %34, 0
  %43 = select i1 %42, i32 %34, i32 0
  %44 = icmp slt i32 %43, 255
  %45 = select i1 %44, i32 %43, i32 255
  %46 = shl nuw nsw i32 %45, 16
  %47 = icmp sgt i32 %37, 0
  %48 = select i1 %47, i32 %37, i32 0
  %49 = icmp slt i32 %48, 255
  %50 = select i1 %49, i32 %48, i32 255
  %51 = shl nuw nsw i32 %50, 8
  %52 = icmp sgt i32 %40, 0
  %53 = select i1 %52, i32 %40, i32 0
  %54 = icmp slt i32 %53, 255
  %55 = select i1 %54, i32 %53, i32 255
  %56 = or i32 %55, %41
  %57 = or i32 %56, %46
  %58 = or i32 %57, %51
  br label %59

59:                                               ; preds = %24, %27, %1
  %60 = phi i32 [ -11250604, %1 ], [ %26, %24 ], [ %58, %27 ]
  ret i32 %60
}

; Function Attrs: nounwind
declare float @nextafterf(float, float) local_unnamed_addr #8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink5Color7GetRGBAERfS1_S1_S1_(%"class.blink::Color"* nocapture readonly, float* nocapture dereferenceable(4), float* nocapture dereferenceable(4), float* nocapture dereferenceable(4), float* nocapture dereferenceable(4)) local_unnamed_addr #5 align 2 {
  %6 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  %10 = sitofp i32 %9 to float
  %11 = fdiv float %10, 2.550000e+02
  store float %11, float* %1, align 4
  %12 = load i32, i32* %6, align 4
  %13 = lshr i32 %12, 8
  %14 = and i32 %13, 255
  %15 = sitofp i32 %14 to float
  %16 = fdiv float %15, 2.550000e+02
  store float %16, float* %2, align 4
  %17 = load i32, i32* %6, align 4
  %18 = and i32 %17, 255
  %19 = sitofp i32 %18 to float
  %20 = fdiv float %19, 2.550000e+02
  store float %20, float* %3, align 4
  %21 = load i32, i32* %6, align 4
  %22 = lshr i32 %21, 24
  %23 = sitofp i32 %22 to float
  %24 = fdiv float %23, 2.550000e+02
  store float %24, float* %4, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink5Color4DarkEv(%"class.blink::Color"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %58, label %5

5:                                                ; preds = %1
  %6 = tail call float @nextafterf(float 2.560000e+02, float 0.000000e+00) #12
  %7 = load i32, i32* %2, align 4
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  %10 = sitofp i32 %9 to float
  %11 = fdiv float %10, 2.550000e+02
  %12 = lshr i32 %7, 8
  %13 = and i32 %12, 255
  %14 = sitofp i32 %13 to float
  %15 = fdiv float %14, 2.550000e+02
  %16 = and i32 %7, 255
  %17 = sitofp i32 %16 to float
  %18 = fdiv float %17, 2.550000e+02
  %19 = and i32 %7, -16777216
  %20 = fcmp olt float %15, %18
  %21 = select i1 %20, float %18, float %15
  %22 = fcmp olt float %11, %21
  %23 = select i1 %22, float %21, float %11
  %24 = fcmp oeq float %23, 0.000000e+00
  br i1 %24, label %30, label %25

25:                                               ; preds = %5
  %26 = fadd float %23, 0xBFD51EB860000000
  %27 = fdiv float %26, %23
  %28 = fcmp ogt float %27, 0.000000e+00
  %29 = select i1 %28, float %27, float 0.000000e+00
  br label %30

30:                                               ; preds = %5, %25
  %31 = phi float [ %29, %25 ], [ 0.000000e+00, %5 ]
  %32 = fmul float %11, %31
  %33 = fmul float %6, %32
  %34 = fptosi float %33 to i32
  %35 = fmul float %15, %31
  %36 = fmul float %6, %35
  %37 = fptosi float %36 to i32
  %38 = fmul float %18, %31
  %39 = fmul float %6, %38
  %40 = fptosi float %39 to i32
  %41 = icmp sgt i32 %34, 0
  %42 = select i1 %41, i32 %34, i32 0
  %43 = icmp slt i32 %42, 255
  %44 = select i1 %43, i32 %42, i32 255
  %45 = shl nuw nsw i32 %44, 16
  %46 = icmp sgt i32 %37, 0
  %47 = select i1 %46, i32 %37, i32 0
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = shl nuw nsw i32 %49, 8
  %51 = icmp sgt i32 %40, 0
  %52 = select i1 %51, i32 %40, i32 0
  %53 = icmp slt i32 %52, 255
  %54 = select i1 %53, i32 %52, i32 255
  %55 = or i32 %54, %19
  %56 = or i32 %55, %45
  %57 = or i32 %56, %50
  br label %58

58:                                               ; preds = %1, %30
  %59 = phi i32 [ %57, %30 ], [ -5526613, %1 ]
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink5Color16CombineWithAlphaEf(%"class.blink::Color"* nocapture readonly, float) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 16777215
  %6 = lshr i32 %4, 24
  %7 = sitofp i32 %6 to float
  %8 = fdiv float %7, 2.550000e+02
  %9 = fmul float %8, %1
  %10 = fmul float %9, 2.550000e+02
  %11 = tail call i64 @lroundf(float %10) #12
  %12 = trunc i64 %11 to i32
  %13 = icmp sgt i32 %12, 0
  %14 = select i1 %13, i32 %12, i32 0
  %15 = icmp slt i32 %14, 255
  %16 = select i1 %15, i32 %14, i32 255
  %17 = shl nuw i32 %16, 24
  %18 = or i32 %17, %5
  ret i32 %18
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink5Color5BlendERKS0_(%"class.blink::Color"* nocapture readonly, %"class.blink::Color"* nocapture readonly dereferenceable(4)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = lshr i32 %4, 24
  %6 = icmp ne i32 %5, 0
  %7 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %8, -16777216
  %10 = and i1 %6, %9
  br i1 %10, label %11, label %67

11:                                               ; preds = %2
  %12 = lshr i32 %8, 24
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %67, label %14

14:                                               ; preds = %11
  %15 = add nuw nsw i32 %12, %5
  %16 = mul nuw nsw i32 %15, 255
  %17 = mul nuw nsw i32 %12, %5
  %18 = sub nsw i32 %16, %17
  %19 = sdiv i32 %18, 255
  %20 = lshr i32 %4, 16
  %21 = and i32 %20, 255
  %22 = xor i32 %12, 255
  %23 = mul nuw nsw i32 %22, %5
  %24 = mul nuw nsw i32 %23, %21
  %25 = mul nuw nsw i32 %12, 255
  %26 = lshr i32 %8, 16
  %27 = and i32 %26, 255
  %28 = mul nuw nsw i32 %25, %27
  %29 = add nuw nsw i32 %28, %24
  %30 = sdiv i32 %29, %18
  %31 = lshr i32 %4, 8
  %32 = and i32 %31, 255
  %33 = mul nuw nsw i32 %23, %32
  %34 = lshr i32 %8, 8
  %35 = and i32 %34, 255
  %36 = mul nuw nsw i32 %25, %35
  %37 = add nuw nsw i32 %36, %33
  %38 = sdiv i32 %37, %18
  %39 = and i32 %4, 255
  %40 = mul nuw nsw i32 %23, %39
  %41 = and i32 %8, 255
  %42 = mul nuw nsw i32 %25, %41
  %43 = add nuw nsw i32 %42, %40
  %44 = sdiv i32 %43, %18
  %45 = icmp sgt i32 %19, 0
  %46 = select i1 %45, i32 %19, i32 0
  %47 = icmp slt i32 %46, 255
  %48 = select i1 %47, i32 %46, i32 255
  %49 = shl nuw i32 %48, 24
  %50 = icmp sgt i32 %30, 0
  %51 = select i1 %50, i32 %30, i32 0
  %52 = icmp slt i32 %51, 255
  %53 = select i1 %52, i32 %51, i32 255
  %54 = shl nuw nsw i32 %53, 16
  %55 = icmp sgt i32 %38, 0
  %56 = select i1 %55, i32 %38, i32 0
  %57 = icmp slt i32 %56, 255
  %58 = select i1 %57, i32 %56, i32 255
  %59 = shl nuw nsw i32 %58, 8
  %60 = icmp sgt i32 %44, 0
  %61 = select i1 %60, i32 %44, i32 0
  %62 = icmp slt i32 %61, 255
  %63 = select i1 %62, i32 %61, i32 255
  %64 = or i32 %54, %49
  %65 = or i32 %64, %59
  %66 = or i32 %65, %63
  br label %67

67:                                               ; preds = %2, %11, %14
  %68 = phi i32 [ %66, %14 ], [ %4, %11 ], [ %8, %2 ]
  ret i32 %68
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink5Color14BlendWithWhiteEv(%"class.blink::Color"* nocapture readonly) local_unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, -16777216
  br i1 %4, label %48, label %5

5:                                                ; preds = %1
  %6 = lshr i32 %3, 16
  %7 = and i32 %6, 255
  %8 = lshr i32 %3, 8
  %9 = and i32 %8, 255
  %10 = and i32 %3, 255
  %11 = add nsw i32 %7, -102
  %12 = sitofp i32 %11 to float
  %13 = fdiv float %12, 0x3FE3333340000000
  %14 = fptosi float %13 to i32
  %15 = add nsw i32 %9, -102
  %16 = sitofp i32 %15 to float
  %17 = fdiv float %16, 0x3FE3333340000000
  %18 = fptosi float %17 to i32
  %19 = add nsw i32 %10, -102
  %20 = sitofp i32 %19 to float
  %21 = fdiv float %20, 0x3FE3333340000000
  %22 = fptosi float %21 to i32
  %23 = or i32 %14, %18
  %24 = or i32 %23, %22
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %50, label %26

26:                                               ; preds = %82, %66, %50, %5
  %27 = phi i32 [ -1728053248, %5 ], [ -1442840576, %50 ], [ -1157627904, %66 ], [ -872415232, %82 ]
  %28 = phi i32 [ %14, %5 ], [ %54, %50 ], [ %70, %66 ], [ %86, %82 ]
  %29 = phi i32 [ %18, %5 ], [ %58, %50 ], [ %74, %66 ], [ %90, %82 ]
  %30 = phi i32 [ %22, %5 ], [ %62, %50 ], [ %78, %66 ], [ %94, %82 ]
  %31 = icmp sgt i32 %28, 0
  %32 = select i1 %31, i32 %28, i32 0
  %33 = icmp sgt i32 %29, 0
  %34 = select i1 %33, i32 %29, i32 0
  %35 = icmp sgt i32 %30, 0
  %36 = select i1 %35, i32 %30, i32 0
  %37 = icmp slt i32 %36, 255
  %38 = select i1 %37, i32 %36, i32 255
  %39 = or i32 %38, %27
  %40 = icmp slt i32 %32, 255
  %41 = select i1 %40, i32 %32, i32 255
  %42 = shl nuw nsw i32 %41, 16
  %43 = or i32 %39, %42
  %44 = icmp slt i32 %34, 255
  %45 = select i1 %44, i32 %34, i32 255
  %46 = shl nuw nsw i32 %45, 8
  %47 = or i32 %43, %46
  br label %48

48:                                               ; preds = %26, %1
  %49 = phi i32 [ %3, %1 ], [ %47, %26 ]
  ret i32 %49

50:                                               ; preds = %5
  %51 = add nsw i32 %7, -85
  %52 = sitofp i32 %51 to float
  %53 = fdiv float %52, 0x3FE5555560000000
  %54 = fptosi float %53 to i32
  %55 = add nsw i32 %9, -85
  %56 = sitofp i32 %55 to float
  %57 = fdiv float %56, 0x3FE5555560000000
  %58 = fptosi float %57 to i32
  %59 = add nsw i32 %10, -85
  %60 = sitofp i32 %59 to float
  %61 = fdiv float %60, 0x3FE5555560000000
  %62 = fptosi float %61 to i32
  %63 = or i32 %54, %58
  %64 = or i32 %63, %62
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %66, label %26

66:                                               ; preds = %50
  %67 = add nsw i32 %7, -68
  %68 = sitofp i32 %67 to float
  %69 = fdiv float %68, 0x3FE7777780000000
  %70 = fptosi float %69 to i32
  %71 = add nsw i32 %9, -68
  %72 = sitofp i32 %71 to float
  %73 = fdiv float %72, 0x3FE7777780000000
  %74 = fptosi float %73 to i32
  %75 = add nsw i32 %10, -68
  %76 = sitofp i32 %75 to float
  %77 = fdiv float %76, 0x3FE7777780000000
  %78 = fptosi float %77 to i32
  %79 = or i32 %70, %74
  %80 = or i32 %79, %78
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %26

82:                                               ; preds = %66
  %83 = add nsw i32 %7, -51
  %84 = sitofp i32 %83 to float
  %85 = fdiv float %84, 0x3FE99999A0000000
  %86 = fptosi float %85 to i32
  %87 = add nsw i32 %9, -51
  %88 = sitofp i32 %87 to float
  %89 = fdiv float %88, 0x3FE99999A0000000
  %90 = fptosi float %89 to i32
  %91 = add nsw i32 %10, -51
  %92 = sitofp i32 %91 to float
  %93 = fdiv float %92, 0x3FE99999A0000000
  %94 = fptosi float %93 to i32
  br label %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink5Color7GetRGBAERdS1_S1_S1_(%"class.blink::Color"* nocapture readonly, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8), double* nocapture dereferenceable(8), double* nocapture dereferenceable(8)) local_unnamed_addr #5 align 2 {
  %6 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 16
  %9 = and i32 %8, 255
  %10 = sitofp i32 %9 to double
  %11 = fdiv double %10, 2.550000e+02
  store double %11, double* %1, align 8
  %12 = load i32, i32* %6, align 4
  %13 = lshr i32 %12, 8
  %14 = and i32 %13, 255
  %15 = sitofp i32 %14 to double
  %16 = fdiv double %15, 2.550000e+02
  store double %16, double* %2, align 8
  %17 = load i32, i32* %6, align 4
  %18 = and i32 %17, 255
  %19 = sitofp i32 %18 to double
  %20 = fdiv double %19, 2.550000e+02
  store double %20, double* %3, align 8
  %21 = load i32, i32* %6, align 4
  %22 = lshr i32 %21, 24
  %23 = sitofp i32 %22 to double
  %24 = fdiv double %23, 2.550000e+02
  store double %24, double* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink5Color6GetHSLERdS1_S1_(%"class.blink::Color"* nocapture readonly, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8), double* nocapture dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 16
  %8 = and i32 %7, 255
  %9 = sitofp i32 %8 to double
  %10 = fdiv double %9, 2.550000e+02
  %11 = lshr i32 %6, 8
  %12 = and i32 %11, 255
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 2.550000e+02
  %15 = and i32 %6, 255
  %16 = sitofp i32 %15 to double
  %17 = fdiv double %16, 2.550000e+02
  %18 = fcmp olt double %10, %14
  %19 = select i1 %18, double %14, double %10
  %20 = fcmp olt double %19, %17
  %21 = select i1 %20, double %17, double %19
  %22 = fcmp olt double %14, %10
  %23 = select i1 %22, double %14, double %10
  %24 = fcmp olt double %17, %23
  %25 = select i1 %24, double %17, double %23
  %26 = fcmp oeq double %21, %25
  br i1 %26, label %52, label %27

27:                                               ; preds = %4
  %28 = fcmp oeq double %21, %10
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = fsub double %14, %17
  br label %37

31:                                               ; preds = %27
  %32 = fcmp oeq double %21, %14
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  %34 = fsub double %17, %10
  br label %37

35:                                               ; preds = %31
  %36 = fsub double %10, %14
  br label %37

37:                                               ; preds = %29, %35, %33
  %38 = phi double [ %30, %29 ], [ %36, %35 ], [ %34, %33 ]
  %39 = phi double [ 3.600000e+02, %29 ], [ 2.400000e+02, %35 ], [ 1.200000e+02, %33 ]
  %40 = fsub double %21, %25
  %41 = fdiv double %38, %40
  %42 = fmul double %41, 6.000000e+01
  %43 = fadd double %42, %39
  %44 = fcmp ult double %43, 3.600000e+02
  %45 = fadd double %43, -3.600000e+02
  %46 = select i1 %44, double %43, double %45
  %47 = fdiv double %46, 3.600000e+02
  store double %47, double* %1, align 8
  %48 = fadd double %21, %25
  %49 = fmul double %48, 5.000000e-01
  store double %49, double* %3, align 8
  %50 = fcmp ugt double %49, 5.000000e-01
  %51 = fsub double %21, %25
  br i1 %50, label %57, label %55

52:                                               ; preds = %4
  store double 0.000000e+00, double* %1, align 8
  %53 = fadd double %21, %25
  %54 = fmul double %53, 5.000000e-01
  store double %54, double* %3, align 8
  br label %60

55:                                               ; preds = %37
  %56 = fdiv double %51, %48
  br label %60

57:                                               ; preds = %37
  %58 = fsub double 2.000000e+00, %48
  %59 = fdiv double %51, %58
  br label %60

60:                                               ; preds = %55, %57, %52
  %61 = phi double [ %56, %55 ], [ %59, %57 ], [ 0.000000e+00, %52 ]
  store double %61, double* %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink26ColorFromPremultipliedARGBEj(i32) local_unnamed_addr #0 {
  %2 = lshr i32 %0, 24
  %3 = trunc i32 %2 to i8
  switch i8 %3, label %4 [
    i8 -1, label %31
    i8 0, label %31
  ]

4:                                                ; preds = %1
  %5 = lshr i32 %0, 16
  %6 = trunc i32 %5 to i16
  %7 = and i16 %6, 255
  %8 = mul nuw i16 %7, 255
  %9 = trunc i32 %2 to i16
  %10 = udiv i16 %8, %9
  %11 = zext i16 %10 to i32
  %12 = lshr i32 %0, 8
  %13 = trunc i32 %12 to i16
  %14 = and i16 %13, 255
  %15 = mul nuw i16 %14, 255
  %16 = trunc i32 %2 to i16
  %17 = udiv i16 %15, %16
  %18 = zext i16 %17 to i32
  %19 = trunc i32 %0 to i16
  %20 = and i16 %19, 255
  %21 = mul nuw i16 %20, 255
  %22 = trunc i32 %2 to i16
  %23 = udiv i16 %21, %22
  %24 = zext i16 %23 to i32
  %25 = and i32 %0, -16777216
  %26 = shl nuw i32 %11, 16
  %27 = shl nuw nsw i32 %18, 8
  %28 = or i32 %26, %25
  %29 = or i32 %28, %27
  %30 = or i32 %29, %24
  br label %31

31:                                               ; preds = %1, %1, %4
  %32 = phi i32 [ %30, %4 ], [ %0, %1 ], [ %0, %1 ]
  ret i32 %32
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN5blink26PremultipliedARGBFromColorERKNS_5ColorE(%"class.blink::Color"* nocapture readonly dereferenceable(4)) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %"class.blink::Color", %"class.blink::Color"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = lshr i32 %3, 24
  %5 = icmp eq i32 %4, 255
  br i1 %5, label %33, label %6

6:                                                ; preds = %1
  %7 = lshr i32 %3, 16
  %8 = and i32 %7, 255
  %9 = mul nuw nsw i32 %8, %4
  %10 = trunc i32 %9 to i16
  %11 = add nuw i16 %10, 254
  %12 = udiv i16 %11, 255
  %13 = zext i16 %12 to i32
  %14 = lshr i32 %3, 8
  %15 = and i32 %14, 255
  %16 = mul nuw nsw i32 %15, %4
  %17 = trunc i32 %16 to i16
  %18 = add nuw i16 %17, 254
  %19 = udiv i16 %18, 255
  %20 = zext i16 %19 to i32
  %21 = and i32 %3, 255
  %22 = mul nuw nsw i32 %21, %4
  %23 = trunc i32 %22 to i16
  %24 = add nuw i16 %23, 254
  %25 = udiv i16 %24, 255
  %26 = zext i16 %25 to i32
  %27 = and i32 %3, -16777216
  %28 = shl nuw nsw i32 %13, 16
  %29 = shl nuw nsw i32 %20, 8
  %30 = or i32 %27, %26
  %31 = or i32 %30, %28
  %32 = or i32 %31, %29
  br label %33

33:                                               ; preds = %1, %6
  %34 = phi i32 [ %32, %6 ], [ %3, %1 ]
  ret i32 %34
}

; Function Attrs: nounwind
declare i64 @lroundf(float) local_unnamed_addr #8

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #7

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEh(%"class.WTF::StringBuilder"*, i8 zeroext) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca i16, align 2
  %4 = alloca i8, align 1
  store i8 %1, i8* %4, align 1
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %35

8:                                                ; preds = %2
  %9 = zext i8 %1 to i16
  %10 = bitcast i16* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %10)
  store i16 %9, i16* %3, align 2
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %8
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #12
  br label %15

15:                                               ; preds = %14, %8
  %16 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %29, label %22, !prof !3

22:                                               ; preds = %15
  %23 = bitcast %union.anon* %16 to i16**
  %24 = load i16*, i16** %23, align 8
  %25 = zext i32 %18 to i64
  %26 = getelementptr inbounds i16, i16* %24, i64 %25
  store i16 %9, i16* %26, align 2
  %27 = load i32, i32* %17, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %17, align 4
  br label %31

29:                                               ; preds = %15
  %30 = bitcast %union.anon* %16 to %"class.WTF::Vector.1"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"* %30, i16* nonnull dereferenceable(2) %3) #12
  br label %31

31:                                               ; preds = %22, %29
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %10)
  br label %59

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %37 = load i8, i8* %36, align 1, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #12
  br label %40

40:                                               ; preds = %35, %39
  %41 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %42 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %54, label %47, !prof !3

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %41, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = zext i32 %43 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8 %1, i8* %51, align 1
  %52 = load i32, i32* %42, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %42, align 4
  br label %55

54:                                               ; preds = %40
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"* %41, i8* nonnull dereferenceable(1) %4) #12
  br label %55

55:                                               ; preds = %47, %54
  %56 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = add i32 %57, 1
  store i32 %58, i32* %56, align 8
  br label %59

59:                                               ; preds = %55, %31
  ret void
}

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"*, i16* dereferenceable(2)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"* %0, i32 %5) #12
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"* %0, i32 %5) #12
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #12
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0), i8* %15, i8* %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #12
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #12
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1"* %0, i32 %27) #12
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #7

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #7

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !3

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #12
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"* %19, i16* nonnull %6) #12
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #12
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #12
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !4

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #12
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !4

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"* %53, i16* %48) #12
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.9, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #12
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #7

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"*, i16*) local_unnamed_addr #11 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #12
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #7

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"*, i8* dereferenceable(1)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #12
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #12
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #12
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0), i8* %15, i8* %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #12
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %27) #12
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !3

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #12
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %18, i8* nonnull %6) #12
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #12
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !4

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #12
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !4

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %46, i8* %42) #12
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.9, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #12
  ret i64 %20
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"*, i8*) local_unnamed_addr #11 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #12
  ret void
}

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #7

declare %"struct.blink::NamedColor"* @_ZN5blink9FindColorEPKcj(i8*, i32) local_unnamed_addr #7

; Function Attrs: nounwind
declare double @nextafter(double, double) local_unnamed_addr #8

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
