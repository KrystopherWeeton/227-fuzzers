; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_rdopt.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_rdopt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.scan_order = type { i16*, i16*, i16* }
%struct.TOKENVALUE = type { i16, i32 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.RD_COST = type { i32, i64, i64 }
%struct.rdcost_block_args = type { %struct.VP9_COMP*, %struct.macroblock*, [16 x i8], [16 x i8], i32, i64, i64, i64, i64, i32, i32, %struct.scan_order*, i8, %struct.buf_2d* }
%struct.encode_b_args = type { %struct.macroblock*, i32, i8*, i8*, i8* }

@uv_txsize_lookup = external local_unnamed_addr constant [13 x [4 x [2 x [2 x i8]]]], align 16
@vp9_prob_cost = external local_unnamed_addr constant [256 x i16], align 16
@max_txsize_lookup = external local_unnamed_addr constant [13 x i8], align 1
@tx_mode_to_biggest_tx_size = external local_unnamed_addr constant [5 x i8], align 1
@vp9_default_scan_orders = external constant [4 x %struct.scan_order], align 16
@vp9_scan_orders = external constant [4 x [4 x %struct.scan_order]], align 16
@intra_mode_to_tx_type_lookup = external local_unnamed_addr constant [10 x i32], align 16
@txsize_to_bsize = external local_unnamed_addr constant [4 x i8], align 1
@num_4x4_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@vpx_highbd_convolve_copy = external local_unnamed_addr global void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, align 8
@vp9_block_error = external local_unnamed_addr global i64 (i32*, i32*, i64, i64*)*, align 8
@band_counts = internal unnamed_addr constant [4 x [8 x i16]] [[8 x i16] [i16 1, i16 2, i16 3, i16 4, i16 3, i16 3, i16 0, i16 0], [8 x i16] [i16 1, i16 2, i16 3, i16 4, i16 11, i16 43, i16 0, i16 0], [8 x i16] [i16 1, i16 2, i16 3, i16 4, i16 11, i16 235, i16 0, i16 0], [8 x i16] [i16 1, i16 2, i16 3, i16 4, i16 11, i16 1003, i16 0, i16 0]], align 16
@vp9_pt_energy_class = external local_unnamed_addr constant [12 x i8], align 16
@vp9_cat6_high_cost = external local_unnamed_addr constant [64 x i16], align 16
@vp9_cat6_high10_high_cost = external local_unnamed_addr constant [256 x i16], align 16
@vp9_cat6_high12_high_cost = external local_unnamed_addr constant [1024 x i16], align 16
@vp9_cat6_low_cost = external local_unnamed_addr constant [256 x i16], align 16
@vp9_dct_cat_lt_10_value_tokens = external local_unnamed_addr global %struct.TOKENVALUE*, align 8
@vp9_dct_cat_lt_10_value_cost = external local_unnamed_addr global i32*, align 8
@__const.choose_tx_size_from_rd.rd = private unnamed_addr constant [4 x [2 x i64]] [[2 x i64] [i64 9223372036854775807, i64 9223372036854775807], [2 x i64] [i64 9223372036854775807, i64 9223372036854775807], [2 x i64] [i64 9223372036854775807, i64 9223372036854775807], [2 x i64] [i64 9223372036854775807, i64 9223372036854775807]], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @vp9_highbd_block_error_c(i32* nocapture readonly, i32* nocapture readonly, i64, i64* nocapture, i32) local_unnamed_addr #0 {
  %6 = shl i32 %4, 1
  %7 = add i32 %6, -16
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  %10 = add i32 %6, -17
  %11 = shl i32 1, %10
  %12 = sext i32 %11 to i64
  br label %13

13:                                               ; preds = %5, %9
  %14 = phi i64 [ %12, %9 ], [ 0, %5 ]
  %15 = icmp sgt i64 %2, 0
  br i1 %15, label %16, label %71

16:                                               ; preds = %13
  %17 = and i64 %2, 1
  %18 = icmp eq i64 %2, 1
  br i1 %18, label %52, label %19

19:                                               ; preds = %16
  %20 = sub i64 %2, %17
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %49, %21 ]
  %23 = phi i64 [ 0, %19 ], [ %48, %21 ]
  %24 = phi i64 [ 0, %19 ], [ %45, %21 ]
  %25 = phi i64 [ %20, %19 ], [ %50, %21 ]
  %26 = getelementptr inbounds i32, i32* %0, i64 %22
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds i32, i32* %1, i64 %22
  %29 = load i32, i32* %28, align 4
  %30 = sub nsw i32 %27, %29
  %31 = sext i32 %30 to i64
  %32 = mul nsw i64 %31, %31
  %33 = add nuw nsw i64 %32, %24
  %34 = sext i32 %27 to i64
  %35 = mul nsw i64 %34, %34
  %36 = add nuw nsw i64 %35, %23
  %37 = or i64 %22, 1
  %38 = getelementptr inbounds i32, i32* %0, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds i32, i32* %1, i64 %37
  %41 = load i32, i32* %40, align 4
  %42 = sub nsw i32 %39, %41
  %43 = sext i32 %42 to i64
  %44 = mul nsw i64 %43, %43
  %45 = add nuw nsw i64 %44, %33
  %46 = sext i32 %39 to i64
  %47 = mul nsw i64 %46, %46
  %48 = add nuw nsw i64 %47, %36
  %49 = add nuw nsw i64 %22, 2
  %50 = add i64 %25, -2
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %21

52:                                               ; preds = %21, %16
  %53 = phi i64 [ undef, %16 ], [ %45, %21 ]
  %54 = phi i64 [ undef, %16 ], [ %48, %21 ]
  %55 = phi i64 [ 0, %16 ], [ %49, %21 ]
  %56 = phi i64 [ 0, %16 ], [ %48, %21 ]
  %57 = phi i64 [ 0, %16 ], [ %45, %21 ]
  %58 = icmp eq i64 %17, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %52
  %60 = getelementptr inbounds i32, i32* %0, i64 %55
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds i32, i32* %1, i64 %55
  %63 = load i32, i32* %62, align 4
  %64 = sub nsw i32 %61, %63
  %65 = sext i32 %64 to i64
  %66 = sext i32 %61 to i64
  %67 = mul nsw i64 %66, %66
  %68 = add nuw nsw i64 %67, %56
  %69 = mul nsw i64 %65, %65
  %70 = add nuw nsw i64 %69, %57
  br label %71

71:                                               ; preds = %59, %52, %13
  %72 = phi i64 [ 0, %13 ], [ %53, %52 ], [ %70, %59 ]
  %73 = phi i64 [ 0, %13 ], [ %54, %52 ], [ %68, %59 ]
  %74 = add nsw i64 %72, %14
  %75 = zext i32 %7 to i64
  %76 = ashr i64 %74, %75
  %77 = add nsw i64 %73, %14
  %78 = ashr i64 %77, %75
  store i64 %78, i64* %3, align 8
  ret i64 %76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @vp9_block_error_c(i32* nocapture readonly, i32* nocapture readonly, i64, i64* nocapture) local_unnamed_addr #0 {
  %5 = icmp sgt i64 %2, 0
  br i1 %5, label %6, label %61

6:                                                ; preds = %4
  %7 = and i64 %2, 1
  %8 = icmp eq i64 %2, 1
  br i1 %8, label %42, label %9

9:                                                ; preds = %6
  %10 = sub i64 %2, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %39, %11 ]
  %13 = phi i64 [ 0, %9 ], [ %38, %11 ]
  %14 = phi i64 [ 0, %9 ], [ %35, %11 ]
  %15 = phi i64 [ %10, %9 ], [ %40, %11 ]
  %16 = getelementptr inbounds i32, i32* %0, i64 %12
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds i32, i32* %1, i64 %12
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %17, %19
  %21 = mul nsw i32 %20, %20
  %22 = zext i32 %21 to i64
  %23 = add nuw nsw i64 %14, %22
  %24 = mul nsw i32 %17, %17
  %25 = zext i32 %24 to i64
  %26 = add nuw nsw i64 %13, %25
  %27 = or i64 %12, 1
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i32, i32* %1, i64 %27
  %31 = load i32, i32* %30, align 4
  %32 = sub nsw i32 %29, %31
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add nuw nsw i64 %23, %34
  %36 = mul nsw i32 %29, %29
  %37 = zext i32 %36 to i64
  %38 = add nuw nsw i64 %26, %37
  %39 = add nuw nsw i64 %12, 2
  %40 = add i64 %15, -2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %11

42:                                               ; preds = %11, %6
  %43 = phi i64 [ undef, %6 ], [ %35, %11 ]
  %44 = phi i64 [ undef, %6 ], [ %38, %11 ]
  %45 = phi i64 [ 0, %6 ], [ %39, %11 ]
  %46 = phi i64 [ 0, %6 ], [ %38, %11 ]
  %47 = phi i64 [ 0, %6 ], [ %35, %11 ]
  %48 = icmp eq i64 %7, 0
  br i1 %48, label %61, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds i32, i32* %0, i64 %45
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds i32, i32* %1, i64 %45
  %53 = load i32, i32* %52, align 4
  %54 = sub nsw i32 %51, %53
  %55 = mul nsw i32 %51, %51
  %56 = zext i32 %55 to i64
  %57 = add nuw nsw i64 %46, %56
  %58 = mul nsw i32 %54, %54
  %59 = zext i32 %58 to i64
  %60 = add nuw nsw i64 %47, %59
  br label %61

61:                                               ; preds = %49, %42, %4
  %62 = phi i64 [ 0, %4 ], [ %43, %42 ], [ %60, %49 ]
  %63 = phi i64 [ 0, %4 ], [ %44, %42 ], [ %57, %49 ]
  store i64 %63, i64* %3, align 8
  ret i64 %62
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @vp9_block_error_fp_c(i32* nocapture readonly, i32* nocapture readonly, i32) local_unnamed_addr #2 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %74

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = add nsw i64 %6, -1
  %8 = and i64 %6, 3
  %9 = icmp ult i64 %7, 3
  br i1 %9, label %54, label %10

10:                                               ; preds = %5
  %11 = sub nsw i64 %6, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %51, %12 ]
  %14 = phi i64 [ 0, %10 ], [ %50, %12 ]
  %15 = phi i64 [ %11, %10 ], [ %52, %12 ]
  %16 = getelementptr inbounds i32, i32* %0, i64 %13
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds i32, i32* %1, i64 %13
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %17, %19
  %21 = mul nsw i32 %20, %20
  %22 = zext i32 %21 to i64
  %23 = add nuw nsw i64 %14, %22
  %24 = or i64 %13, 1
  %25 = getelementptr inbounds i32, i32* %0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i32, i32* %1, i64 %24
  %28 = load i32, i32* %27, align 4
  %29 = sub nsw i32 %26, %28
  %30 = mul nsw i32 %29, %29
  %31 = zext i32 %30 to i64
  %32 = add nuw nsw i64 %23, %31
  %33 = or i64 %13, 2
  %34 = getelementptr inbounds i32, i32* %0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds i32, i32* %1, i64 %33
  %37 = load i32, i32* %36, align 4
  %38 = sub nsw i32 %35, %37
  %39 = mul nsw i32 %38, %38
  %40 = zext i32 %39 to i64
  %41 = add nuw nsw i64 %32, %40
  %42 = or i64 %13, 3
  %43 = getelementptr inbounds i32, i32* %0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds i32, i32* %1, i64 %42
  %46 = load i32, i32* %45, align 4
  %47 = sub nsw i32 %44, %46
  %48 = mul nsw i32 %47, %47
  %49 = zext i32 %48 to i64
  %50 = add nuw nsw i64 %41, %49
  %51 = add nuw nsw i64 %13, 4
  %52 = add i64 %15, -4
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %12

54:                                               ; preds = %12, %5
  %55 = phi i64 [ undef, %5 ], [ %50, %12 ]
  %56 = phi i64 [ 0, %5 ], [ %51, %12 ]
  %57 = phi i64 [ 0, %5 ], [ %50, %12 ]
  %58 = icmp eq i64 %8, 0
  br i1 %58, label %74, label %59

59:                                               ; preds = %54, %59
  %60 = phi i64 [ %71, %59 ], [ %56, %54 ]
  %61 = phi i64 [ %70, %59 ], [ %57, %54 ]
  %62 = phi i64 [ %72, %59 ], [ %8, %54 ]
  %63 = getelementptr inbounds i32, i32* %0, i64 %60
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds i32, i32* %1, i64 %60
  %66 = load i32, i32* %65, align 4
  %67 = sub nsw i32 %64, %66
  %68 = mul nsw i32 %67, %67
  %69 = zext i32 %68 to i64
  %70 = add nuw nsw i64 %61, %69
  %71 = add nuw nsw i64 %60, 1
  %72 = add i64 %62, -1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %59, !llvm.loop !2

74:                                               ; preds = %54, %59, %3
  %75 = phi i64 [ 0, %3 ], [ %55, %54 ], [ %70, %59 ]
  ret i64 %75
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_rd_pick_intra_mode_sb(%struct.VP9_COMP*, %struct.macroblock*, %struct.RD_COST* nocapture, i8 zeroext, %struct.PICK_MODE_CONTEXT* nocapture, i64) local_unnamed_addr #3 {
  %7 = alloca %struct.rdcost_block_args, align 8
  %8 = alloca %struct.rdcost_block_args, align 8
  %9 = alloca %struct.rdcost_block_args, align 8
  %10 = alloca i16, align 2
  %11 = alloca [2 x i8], align 1
  %12 = alloca i16, align 2
  %13 = alloca [2 x i8], align 1
  %14 = alloca [64 x i8], align 16
  %15 = alloca [64 x i16], align 16
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca %struct.rdcost_block_args, align 8
  %19 = alloca [4 x [2 x i32]], align 16
  %20 = alloca [4 x i32], align 16
  %21 = alloca [4 x i64], align 16
  %22 = alloca [4 x [2 x i64]], align 16
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  store i32 0, i32* %24, align 16
  %25 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 13
  store i32 0, i32* %25, align 8
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  %27 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %28 = load %struct.MODE_INFO*, %struct.MODE_INFO** %27, align 8
  %29 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %28, i64 0, i32 8, i64 0
  store i8 0, i8* %29, align 4
  %30 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %31 = load %struct.MODE_INFO*, %struct.MODE_INFO** %30, align 8
  %32 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %31, i64 0, i32 8, i64 1
  store i8 -1, i8* %32, align 1
  %33 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %34 = load %struct.MODE_INFO*, %struct.MODE_INFO** %33, align 8
  %35 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %34, i64 0, i32 7
  store i8 3, i8* %35, align 1
  %36 = icmp ugt i8 %3, 2
  %37 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %38 = load %struct.MODE_INFO*, %struct.MODE_INFO** %37, align 8
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 8
  %40 = load %struct.MODE_INFO*, %struct.MODE_INFO** %39, align 8
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 7
  %42 = load %struct.MODE_INFO*, %struct.MODE_INFO** %41, align 8
  br i1 %36, label %43, label %492

43:                                               ; preds = %6
  %44 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %38, %struct.MODE_INFO* %40, i32 0) #6
  %45 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %38, %struct.MODE_INFO* %42, i32 0) #6
  %46 = zext i8 %44 to i64
  %47 = zext i8 %45 to i64
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %48, i8 0, i64 12, i1 false) #6
  %49 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 61
  %50 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 1
  %51 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 19
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 24
  %53 = zext i8 %3 to i64
  %54 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %53
  %55 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 73
  %56 = bitcast [4 x [2 x i32]]* %19 to i8*
  %57 = bitcast [4 x i32]* %20 to i8*
  %58 = bitcast [4 x i64]* %21 to i8*
  %59 = bitcast [4 x [2 x i64]]* %22 to i8*
  %60 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 37
  %61 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 20
  %62 = icmp ugt i8 %3, 9
  %63 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 63
  %64 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %66 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 71
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0
  %68 = bitcast %struct.rdcost_block_args* %18 to i8*
  %69 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 2, i64 0
  %70 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 0
  %71 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 1
  %72 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 8
  %73 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 10
  %74 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 12
  %75 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 13
  %76 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 3, i64 0
  %77 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 11
  %78 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 9
  %79 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 5
  %80 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %18, i64 0, i32 4
  %81 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 2
  %82 = bitcast %struct.rdcost_block_args* %7 to i8*
  %83 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 2, i64 0
  %84 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 0
  %85 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 1
  %86 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 8
  %87 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 10
  %88 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 12
  %89 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 13
  %90 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 3, i64 0
  %91 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 11
  %92 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 9
  %93 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 5
  %94 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 4
  %95 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %7, i64 0, i32 6
  br label %96

96:                                               ; preds = %471, %43
  %97 = phi i32 [ 0, %43 ], [ %472, %471 ]
  %98 = phi i32 [ 0, %43 ], [ %473, %471 ]
  %99 = phi i32 [ 0, %43 ], [ %474, %471 ]
  %100 = phi i64 [ 0, %43 ], [ %475, %471 ]
  %101 = phi i64 [ 0, %43 ], [ %479, %471 ]
  %102 = phi i64 [ %5, %43 ], [ %478, %471 ]
  %103 = phi i8 [ 0, %43 ], [ %477, %471 ]
  %104 = phi i8 [ 0, %43 ], [ %476, %471 ]
  %105 = load i32, i32* %49, align 4
  %106 = icmp eq i32 %105, 0
  %107 = trunc i64 %101 to i8
  br i1 %106, label %117, label %108

108:                                              ; preds = %96
  switch i8 %107, label %115 [
    i8 5, label %109
    i8 8, label %110
    i8 7, label %111
    i8 6, label %114
  ]

109:                                              ; preds = %108
  switch i8 %103, label %471 [
    i8 4, label %115
    i8 1, label %115
  ]

110:                                              ; preds = %108
  switch i8 %103, label %471 [
    i8 3, label %115
    i8 1, label %115
  ]

111:                                              ; preds = %108
  %112 = and i8 %103, -2
  %113 = icmp eq i8 %112, 2
  br i1 %113, label %115, label %471

114:                                              ; preds = %108
  switch i8 %103, label %471 [
    i8 4, label %115
    i8 2, label %115
  ]

115:                                              ; preds = %114, %114, %111, %110, %110, %109, %109, %108
  %116 = icmp eq i32 %99, 0
  br i1 %116, label %117, label %481

117:                                              ; preds = %115, %96
  store i8 %107, i8* %50, align 1
  %118 = load i32, i32* %51, align 4
  %119 = icmp eq i32 %118, 1
  br i1 %119, label %123, label %120

120:                                              ; preds = %117
  %121 = load i32, i32* %52, align 4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %176, label %123

123:                                              ; preds = %120, %117
  %124 = load i8, i8* %54, align 1
  %125 = load i32, i32* %60, align 16
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %130 = load %struct.MODE_INFO*, %struct.MODE_INFO** %129, align 8
  %131 = icmp ult i8 %124, %128
  %132 = select i1 %131, i8 %124, i8 %128
  %133 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %130, i64 0, i32 2
  store i8 %132, i8* %133, align 2
  %134 = load i32, i32* %63, align 4
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %68) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 0, i64 96, i1 false) #6
  store %struct.VP9_COMP* %0, %struct.VP9_COMP** %70, align 8
  store %struct.macroblock* %1, %struct.macroblock** %71, align 8
  store i64 %102, i64* %72, align 8
  store i32 %134, i32* %73, align 4
  store i8 1, i8* %74, align 8
  store %struct.buf_2d* null, %struct.buf_2d** %75, align 8
  %135 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %136 = load %struct.MODE_INFO*, %struct.MODE_INFO** %135, align 8
  %137 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %136, i64 0, i32 2
  store i8 %132, i8* %137, align 2
  call void @vp9_get_entropy_contexts(i8 zeroext %3, i8 zeroext %132, %struct.macroblockd_plane* %67, i8* %69, i8* %76) #6
  %138 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %139 = load %struct.MODE_INFO*, %struct.MODE_INFO** %138, align 8
  %140 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %139, i64 0, i32 8, i64 0
  %141 = load i8, i8* %140, align 4
  %142 = icmp slt i8 %141, 1
  br i1 %142, label %143, label %146

143:                                              ; preds = %123
  %144 = load i32, i32* %52, align 4
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %149, label %146

146:                                              ; preds = %143, %123
  %147 = zext i8 %132 to i64
  %148 = getelementptr inbounds [4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 %147
  br label %163

149:                                              ; preds = %143
  %150 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %139, i64 0, i32 0
  %151 = load i8, i8* %150, align 4
  %152 = icmp ult i8 %151, 3
  %153 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %139, i64 0, i32 10, i64 0, i32 0
  %154 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %139, i64 0, i32 1
  %155 = select i1 %152, i8* %153, i8* %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %132 to i64
  %158 = zext i8 %156 to i64
  %159 = getelementptr inbounds [10 x i32], [10 x i32]* @intra_mode_to_tx_type_lookup, i64 0, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 %157, i64 %161
  br label %163

163:                                              ; preds = %149, %146
  %164 = phi %struct.scan_order* [ %148, %146 ], [ %162, %149 ]
  store %struct.scan_order* %164, %struct.scan_order** %77, align 8
  call void @vp9_foreach_transformed_block_in_plane(%struct.macroblockd* %23, i8 zeroext %3, i32 0, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @block_rd_txfm, i8* nonnull %68) #6
  %165 = load i32, i32* %78, align 8
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %172

167:                                              ; preds = %163
  %168 = load i64, i64* %79, align 8
  %169 = load i32, i32* %80, align 8
  %170 = load i8, i8* %74, align 8
  %171 = zext i8 %170 to i32
  br label %172

172:                                              ; preds = %167, %163
  %173 = phi i32 [ %169, %167 ], [ 2147483647, %163 ]
  %174 = phi i64 [ %168, %167 ], [ 9223372036854775807, %163 ]
  %175 = phi i32 [ %171, %167 ], [ 0, %163 ]
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %68) #6
  br label %449

176:                                              ; preds = %120
  %177 = load i8, i8* %54, align 1
  %178 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %179 = load %struct.MODE_INFO*, %struct.MODE_INFO** %178, align 8
  %180 = load %struct.frame_contexts*, %struct.frame_contexts** %55, align 8
  %181 = load %struct.MODE_INFO*, %struct.MODE_INFO** %39, align 8
  %182 = load %struct.MODE_INFO*, %struct.MODE_INFO** %41, align 8
  %183 = icmp eq %struct.MODE_INFO* %181, null
  br i1 %183, label %188, label %184

184:                                              ; preds = %176
  %185 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %181, i64 0, i32 3
  %186 = load i8, i8* %185, align 1
  %187 = sext i8 %186 to i64
  br label %188

188:                                              ; preds = %184, %176
  %189 = phi i64 [ %187, %184 ], [ 0, %176 ]
  %190 = icmp eq %struct.MODE_INFO* %182, null
  br i1 %190, label %195, label %191

191:                                              ; preds = %188
  %192 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %182, i64 0, i32 3
  %193 = load i8, i8* %192, align 1
  %194 = sext i8 %193 to i64
  br label %195

195:                                              ; preds = %191, %188
  %196 = phi i64 [ %194, %191 ], [ 0, %188 ]
  %197 = add nsw i64 %196, %189
  %198 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %180, i64 0, i32 11, i64 %197
  %199 = load i8, i8* %198, align 1
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %56) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 -86, i64 32, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %57) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %57, i8 -86, i64 16, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %58) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %58, i8 -86, i64 32, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %59) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %59, i8* align 16 bitcast ([4 x [2 x i64]]* @__const.choose_tx_size_from_rd.rd to i8*), i64 64, i1 false) #6
  %200 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %179, i64 0, i32 0
  %201 = load i8, i8* %200, align 4
  %202 = zext i8 %201 to i64
  %203 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = icmp ne %struct.MODE_INFO* %181, null
  %207 = icmp ne %struct.MODE_INFO* %182, null
  br i1 %206, label %208, label %216

208:                                              ; preds = %195
  %209 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %181, i64 0, i32 3
  %210 = load i8, i8* %209, align 1
  %211 = icmp eq i8 %210, 0
  br i1 %211, label %212, label %216

212:                                              ; preds = %208
  %213 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %181, i64 0, i32 2
  %214 = load i8, i8* %213, align 2
  %215 = zext i8 %214 to i32
  br label %216

216:                                              ; preds = %212, %208, %195
  %217 = phi i32 [ %215, %212 ], [ %205, %208 ], [ %205, %195 ]
  br i1 %207, label %218, label %226

218:                                              ; preds = %216
  %219 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %182, i64 0, i32 3
  %220 = load i8, i8* %219, align 1
  %221 = icmp eq i8 %220, 0
  br i1 %221, label %222, label %226

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %182, i64 0, i32 2
  %224 = load i8, i8* %223, align 2
  %225 = zext i8 %224 to i32
  br label %226

226:                                              ; preds = %222, %218, %216
  %227 = phi i32 [ %225, %222 ], [ %205, %218 ], [ %205, %216 ]
  %228 = select i1 %207, i32 %227, i32 %217
  %229 = select i1 %206, i32 %217, i32 %228
  %230 = add nuw nsw i32 %229, %228
  %231 = icmp ugt i32 %230, %205
  %232 = zext i8 %199 to i64
  %233 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %232
  %234 = load i16, i16* %233, align 2
  %235 = zext i16 %234 to i32
  %236 = sub nuw nsw i64 256, %232
  %237 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %236
  %238 = load i16, i16* %237, align 2
  %239 = zext i16 %238 to i32
  %240 = load i32, i32* %60, align 16
  %241 = icmp eq i32 %240, 4
  br i1 %241, label %242, label %252

242:                                              ; preds = %226
  %243 = zext i8 %177 to i32
  %244 = load i32, i32* %61, align 8
  %245 = sub nsw i32 %243, %244
  %246 = icmp sgt i32 %245, 0
  %247 = select i1 %246, i32 %245, i32 0
  br i1 %62, label %248, label %259

248:                                              ; preds = %242
  %249 = add nuw nsw i32 %247, 1
  %250 = icmp ult i32 %249, %243
  %251 = select i1 %250, i32 %249, i32 %243
  br label %259

252:                                              ; preds = %226
  %253 = zext i32 %240 to i64
  %254 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %253
  %255 = load i8, i8* %254, align 1
  %256 = icmp ult i8 %177, %255
  %257 = select i1 %256, i8 %177, i8 %255
  %258 = zext i8 %257 to i32
  br label %262

259:                                              ; preds = %248, %242
  %260 = phi i32 [ %251, %248 ], [ %247, %242 ]
  %261 = icmp sgt i32 %260, %243
  br i1 %261, label %436, label %262

262:                                              ; preds = %259, %252
  %263 = phi i32 [ %258, %252 ], [ %260, %259 ]
  %264 = phi i32 [ %258, %252 ], [ %243, %259 ]
  %265 = zext i8 %177 to i64
  %266 = add nsw i64 %265, -1
  %267 = zext i1 %231 to i64
  %268 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %179, i64 0, i32 8, i64 0
  %269 = zext i16 %238 to i64
  %270 = zext i32 %264 to i64
  %271 = sext i32 %263 to i64
  br label %272

272:                                              ; preds = %432, %262
  %273 = phi %struct.MODE_INFO** [ %435, %432 ], [ %178, %262 ]
  %274 = phi i64 [ %433, %432 ], [ %270, %262 ]
  %275 = phi i8 [ %430, %432 ], [ %177, %262 ]
  %276 = phi i64 [ %434, %432 ], [ %102, %262 ]
  %277 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 116, i64 %266, i64 %267, i64 %274
  %278 = load i32, i32* %277, align 4
  %279 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %19, i64 0, i64 %274, i64 0
  %280 = getelementptr inbounds [4 x i64], [4 x i64]* %21, i64 0, i64 %274
  %281 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 %274
  %282 = trunc i64 %274 to i8
  %283 = load i32, i32* %63, align 4
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 0, i64 96, i1 false) #6
  store %struct.VP9_COMP* %0, %struct.VP9_COMP** %84, align 8
  store %struct.macroblock* %1, %struct.macroblock** %85, align 8
  store i64 %276, i64* %86, align 8
  store i32 %283, i32* %87, align 4
  store i8 1, i8* %88, align 8
  store %struct.buf_2d* null, %struct.buf_2d** %89, align 8
  %284 = load %struct.MODE_INFO*, %struct.MODE_INFO** %273, align 8
  %285 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %284, i64 0, i32 2
  store i8 %282, i8* %285, align 2
  call void @vp9_get_entropy_contexts(i8 zeroext %3, i8 zeroext %282, %struct.macroblockd_plane* %67, i8* %83, i8* %90) #6
  %286 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %287 = load %struct.MODE_INFO*, %struct.MODE_INFO** %286, align 8
  %288 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %287, i64 0, i32 8, i64 0
  %289 = load i8, i8* %288, align 4
  %290 = icmp slt i8 %289, 1
  br i1 %290, label %291, label %294

291:                                              ; preds = %272
  %292 = load i32, i32* %52, align 4
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %297, label %294

294:                                              ; preds = %291, %272
  %295 = and i64 %274, 255
  %296 = getelementptr inbounds [4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 %295
  br label %311

297:                                              ; preds = %291
  %298 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %287, i64 0, i32 0
  %299 = load i8, i8* %298, align 4
  %300 = icmp ult i8 %299, 3
  %301 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %287, i64 0, i32 10, i64 0, i32 0
  %302 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %287, i64 0, i32 1
  %303 = select i1 %300, i8* %301, i8* %302
  %304 = load i8, i8* %303, align 1
  %305 = and i64 %274, 255
  %306 = zext i8 %304 to i64
  %307 = getelementptr inbounds [10 x i32], [10 x i32]* @intra_mode_to_tx_type_lookup, i64 0, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 %305, i64 %309
  br label %311

311:                                              ; preds = %297, %294
  %312 = phi %struct.scan_order* [ %296, %294 ], [ %310, %297 ]
  store %struct.scan_order* %312, %struct.scan_order** %91, align 8
  call void @vp9_foreach_transformed_block_in_plane(%struct.macroblockd* %23, i8 zeroext %3, i32 0, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @block_rd_txfm, i8* nonnull %82) #6
  %313 = load i32, i32* %92, align 8
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %316, label %315

315:                                              ; preds = %311
  store i32 2147483647, i32* %279, align 8
  store i64 9223372036854775807, i64* %280, align 8
  br label %322

316:                                              ; preds = %311
  %317 = load i64, i64* %93, align 8
  store i64 %317, i64* %280, align 8
  %318 = load i32, i32* %94, align 8
  store i32 %318, i32* %279, align 8
  %319 = load i64, i64* %95, align 8
  %320 = load i8, i8* %88, align 8
  %321 = zext i8 %320 to i32
  br label %322

322:                                              ; preds = %315, %316
  %323 = phi i64 [ %319, %316 ], [ 9223372036854775807, %315 ]
  %324 = phi i64 [ %317, %316 ], [ 9223372036854775807, %315 ]
  %325 = phi i32 [ %318, %316 ], [ 2147483647, %315 ]
  %326 = phi i32 [ %321, %316 ], [ 0, %315 ]
  store i32 %326, i32* %281, align 4
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %82) #6
  %327 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %19, i64 0, i64 %274, i64 1
  %328 = icmp eq i32 %325, 2147483647
  %329 = add nsw i32 %325, %278
  %330 = select i1 %328, i32 2147483647, i32 %329
  store i32 %330, i32* %327, align 4
  %331 = icmp eq i64 %324, 9223372036854775807
  %332 = or i1 %328, %331
  br i1 %332, label %333, label %336

333:                                              ; preds = %322
  %334 = getelementptr inbounds [4 x [2 x i64]], [4 x [2 x i64]]* %22, i64 0, i64 %274, i64 0
  %335 = bitcast i64* %334 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %335, align 16
  br label %384

336:                                              ; preds = %322
  %337 = icmp eq i32 %326, 0
  br i1 %337, label %364, label %338

338:                                              ; preds = %336
  %339 = load i8, i8* %268, align 4
  %340 = icmp slt i8 %339, 1
  %341 = load i32, i32* %64, align 4
  %342 = sext i32 %341 to i64
  %343 = mul nsw i64 %342, %269
  %344 = add nsw i64 %343, 256
  %345 = ashr i64 %344, 9
  %346 = load i32, i32* %65, align 8
  %347 = zext i32 %346 to i64
  %348 = shl i64 %323, %347
  %349 = add nsw i64 %345, %348
  %350 = getelementptr inbounds [4 x [2 x i64]], [4 x [2 x i64]]* %22, i64 0, i64 %274
  br i1 %340, label %355, label %351

351:                                              ; preds = %338
  %352 = getelementptr inbounds [4 x [2 x i64]], [4 x [2 x i64]]* %22, i64 0, i64 %274, i64 1
  store i64 %349, i64* %352, align 8
  %353 = getelementptr inbounds [2 x i64], [2 x i64]* %350, i64 0, i64 0
  store i64 %349, i64* %353, align 16
  %354 = sub nsw i32 %330, %278
  store i32 %354, i32* %327, align 4
  br label %384

355:                                              ; preds = %338
  %356 = getelementptr inbounds [2 x i64], [2 x i64]* %350, i64 0, i64 0
  store i64 %349, i64* %356, align 16
  %357 = add nsw i32 %278, %239
  %358 = sext i32 %357 to i64
  %359 = mul nsw i64 %342, %358
  %360 = add nsw i64 %359, 256
  %361 = ashr i64 %360, 9
  %362 = add nsw i64 %361, %348
  %363 = getelementptr inbounds [4 x [2 x i64]], [4 x [2 x i64]]* %22, i64 0, i64 %274, i64 1
  store i64 %362, i64* %363, align 8
  br label %384

364:                                              ; preds = %336
  %365 = add nsw i32 %325, %235
  %366 = sext i32 %365 to i64
  %367 = load i32, i32* %64, align 4
  %368 = sext i32 %367 to i64
  %369 = mul nsw i64 %368, %366
  %370 = add nsw i64 %369, 256
  %371 = ashr i64 %370, 9
  %372 = load i32, i32* %65, align 8
  %373 = zext i32 %372 to i64
  %374 = shl i64 %324, %373
  %375 = add nsw i64 %371, %374
  %376 = getelementptr inbounds [4 x [2 x i64]], [4 x [2 x i64]]* %22, i64 0, i64 %274, i64 0
  store i64 %375, i64* %376, align 16
  %377 = add nsw i32 %330, %235
  %378 = sext i32 %377 to i64
  %379 = mul nsw i64 %368, %378
  %380 = add nsw i64 %379, 256
  %381 = ashr i64 %380, 9
  %382 = add nsw i64 %381, %374
  %383 = getelementptr inbounds [4 x [2 x i64]], [4 x [2 x i64]]* %22, i64 0, i64 %274, i64 1
  store i64 %382, i64* %383, align 8
  br label %384

384:                                              ; preds = %364, %355, %351, %333
  %385 = phi i64 [ %382, %364 ], [ %362, %355 ], [ %349, %351 ], [ 9223372036854775807, %333 ]
  %386 = phi i64 [ %375, %364 ], [ %349, %355 ], [ %349, %351 ], [ 9223372036854775807, %333 ]
  %387 = load i8, i8* %268, align 4
  %388 = icmp slt i8 %387, 1
  br i1 %388, label %411, label %389

389:                                              ; preds = %384
  %390 = load i32, i32* %52, align 4
  %391 = or i32 %390, %326
  %392 = icmp ne i32 %391, 0
  %393 = icmp eq i64 %323, 9223372036854775807
  %394 = or i1 %392, %393
  br i1 %394, label %411, label %395

395:                                              ; preds = %389
  %396 = getelementptr inbounds [4 x [2 x i64]], [4 x [2 x i64]]* %22, i64 0, i64 %274, i64 0
  %397 = load i32, i32* %64, align 4
  %398 = sext i32 %397 to i64
  %399 = mul nsw i64 %398, %269
  %400 = add nsw i64 %399, 256
  %401 = ashr i64 %400, 9
  %402 = load i32, i32* %65, align 8
  %403 = zext i32 %402 to i64
  %404 = shl i64 %323, %403
  %405 = add nsw i64 %401, %404
  %406 = icmp slt i64 %386, %405
  %407 = select i1 %406, i64 %386, i64 %405
  store i64 %407, i64* %396, align 16
  %408 = getelementptr inbounds [4 x [2 x i64]], [4 x [2 x i64]]* %22, i64 0, i64 %274, i64 1
  %409 = icmp slt i64 %385, %405
  %410 = select i1 %409, i64 %385, i64 %405
  store i64 %410, i64* %408, align 8
  br label %411

411:                                              ; preds = %389, %395, %384
  %412 = phi i64 [ %385, %389 ], [ %385, %384 ], [ %410, %395 ]
  %413 = load i32, i32* %66, align 4
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %428, label %415

415:                                              ; preds = %411
  %416 = icmp eq i64 %412, 9223372036854775807
  br i1 %416, label %436, label %417

417:                                              ; preds = %415
  %418 = icmp slt i64 %274, %265
  br i1 %418, label %419, label %426

419:                                              ; preds = %417
  %420 = add nsw i64 %274, 1
  %421 = getelementptr inbounds [4 x [2 x i64]], [4 x [2 x i64]]* %22, i64 0, i64 %420, i64 1
  %422 = load i64, i64* %421, align 8
  %423 = icmp sgt i64 %412, %422
  %424 = icmp eq i32 %326, 1
  %425 = or i1 %424, %423
  br i1 %425, label %436, label %428

426:                                              ; preds = %417
  %427 = icmp eq i32 %326, 1
  br i1 %427, label %436, label %428

428:                                              ; preds = %419, %426, %411
  %429 = icmp slt i64 %412, %276
  %430 = select i1 %429, i8 %282, i8 %275
  %431 = icmp sgt i64 %274, %271
  br i1 %431, label %432, label %436

432:                                              ; preds = %428
  %433 = add nsw i64 %274, -1
  %434 = select i1 %429, i64 %412, i64 %276
  %435 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  br label %272

436:                                              ; preds = %428, %426, %419, %415, %259
  %437 = phi i8 [ %177, %259 ], [ %430, %428 ], [ %275, %426 ], [ %275, %419 ], [ %275, %415 ]
  %438 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %179, i64 0, i32 2
  store i8 %437, i8* %438, align 2
  %439 = zext i8 %437 to i64
  %440 = getelementptr inbounds [4 x i64], [4 x i64]* %21, i64 0, i64 %439
  %441 = load i64, i64* %440, align 8
  %442 = load i32, i32* %60, align 16
  %443 = icmp eq i32 %442, 4
  %444 = zext i1 %443 to i64
  %445 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* %19, i64 0, i64 %439, i64 %444
  %446 = load i32, i32* %445, align 4
  %447 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 %439
  %448 = load i32, i32* %447, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %59) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %58) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %56) #6
  br label %449

449:                                              ; preds = %436, %172
  %450 = phi i32 [ %173, %172 ], [ %446, %436 ]
  %451 = phi i32 [ %175, %172 ], [ %448, %436 ]
  %452 = phi i64 [ %174, %172 ], [ %441, %436 ]
  %453 = icmp eq i32 %450, 2147483647
  br i1 %453, label %471, label %454

454:                                              ; preds = %449
  %455 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 113, i64 %46, i64 %47, i64 %101
  %456 = load i32, i32* %455, align 4
  %457 = add nsw i32 %456, %450
  %458 = sext i32 %457 to i64
  %459 = load i32, i32* %64, align 4
  %460 = sext i32 %459 to i64
  %461 = mul nsw i64 %458, %460
  %462 = add nsw i64 %461, 256
  %463 = ashr i64 %462, 9
  %464 = load i32, i32* %65, align 8
  %465 = zext i32 %464 to i64
  %466 = shl i64 %452, %465
  %467 = add nsw i64 %463, %466
  %468 = icmp slt i64 %467, %102
  br i1 %468, label %469, label %471

469:                                              ; preds = %454
  %470 = load i8, i8* %81, align 2
  br label %471

471:                                              ; preds = %469, %454, %449, %114, %111, %110, %109
  %472 = phi i32 [ %97, %449 ], [ %457, %469 ], [ %97, %454 ], [ %97, %114 ], [ %97, %111 ], [ %97, %110 ], [ %97, %109 ]
  %473 = phi i32 [ %98, %449 ], [ %450, %469 ], [ %98, %454 ], [ %98, %114 ], [ %98, %111 ], [ %98, %110 ], [ %98, %109 ]
  %474 = phi i32 [ %99, %449 ], [ %451, %469 ], [ %99, %454 ], [ %99, %114 ], [ %99, %111 ], [ %99, %110 ], [ %99, %109 ]
  %475 = phi i64 [ %100, %449 ], [ %452, %469 ], [ %100, %454 ], [ %100, %114 ], [ %100, %111 ], [ %100, %110 ], [ %100, %109 ]
  %476 = phi i8 [ %104, %449 ], [ %470, %469 ], [ %104, %454 ], [ %104, %114 ], [ %104, %111 ], [ %104, %110 ], [ %104, %109 ]
  %477 = phi i8 [ %103, %449 ], [ %107, %469 ], [ %103, %454 ], [ %103, %114 ], [ %103, %111 ], [ %103, %110 ], [ %103, %109 ]
  %478 = phi i64 [ %102, %449 ], [ %467, %469 ], [ %102, %454 ], [ %102, %114 ], [ %102, %111 ], [ %102, %110 ], [ %102, %109 ]
  %479 = add nuw nsw i64 %101, 1
  %480 = icmp eq i64 %479, 10
  br i1 %480, label %481, label %96

481:                                              ; preds = %115, %471
  %482 = phi i32 [ %472, %471 ], [ %97, %115 ]
  %483 = phi i32 [ %473, %471 ], [ %98, %115 ]
  %484 = phi i32 [ %474, %471 ], [ %99, %115 ]
  %485 = phi i64 [ %475, %471 ], [ %100, %115 ]
  %486 = phi i8 [ %476, %471 ], [ %104, %115 ]
  %487 = phi i8 [ %477, %471 ], [ %103, %115 ]
  %488 = phi i64 [ %478, %471 ], [ %102, %115 ]
  store i8 %487, i8* %50, align 1
  store i8 %486, i8* %81, align 2
  %489 = icmp slt i64 %488, %5
  br i1 %489, label %1177, label %490

490:                                              ; preds = %481
  %491 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 0
  store i32 2147483647, i32* %491, align 8
  br label %1500

492:                                              ; preds = %6
  %493 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 0
  %494 = load i8, i8* %493, align 4
  %495 = zext i8 %494 to i64
  %496 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = zext i8 %497 to i32
  %499 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %495
  %500 = load i8, i8* %499, align 1
  %501 = zext i8 %500 to i64
  %502 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 110, i64 0
  %503 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %504 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 5
  %505 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 6
  %506 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 1
  %507 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3, i32 1
  %508 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 0
  %509 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3, i32 0
  %510 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 0
  %511 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 1
  %512 = getelementptr inbounds [2 x i8], [2 x i8]* %13, i64 0, i64 0
  %513 = getelementptr inbounds [2 x i8], [2 x i8]* %13, i64 0, i64 1
  %514 = getelementptr inbounds [64 x i8], [64 x i8]* %14, i64 0, i64 0
  %515 = bitcast [64 x i16]* %15 to i8*
  %516 = zext i8 %497 to i64
  %517 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 18
  %518 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 54, i64 0
  %519 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 52
  %520 = icmp ne i8 %500, 0
  %521 = icmp ne i8 %497, 0
  %522 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 0, i64 0
  %523 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 2
  %524 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 23
  %525 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 24
  %526 = load i16*, i16** getelementptr inbounds ([4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 0, i32 0), align 16
  %527 = load i16*, i16** getelementptr inbounds ([4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 0, i32 1), align 8
  %528 = load i16*, i16** getelementptr inbounds ([4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 0, i32 2), align 16
  %529 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 63
  %530 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 3
  %531 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %532 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %533 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %23, i64 0, i32 0, i64 0, i32 0
  %534 = bitcast i64* %16 to i8*
  %535 = shl nuw nsw i64 %501, 2
  %536 = icmp eq i8 %500, 0
  %537 = shl nuw nsw i32 %498, 3
  %538 = zext i32 %537 to i64
  %539 = bitcast i64* %17 to i8*
  %540 = shl nuw nsw i32 %498, 2
  %541 = zext i32 %540 to i64
  %542 = icmp ugt i8 %500, 1
  %543 = icmp ugt i8 %497, 1
  %544 = bitcast i16* %10 to i8*
  %545 = getelementptr inbounds i8, i8* %544, i64 1
  %546 = bitcast i16* %12 to i8*
  %547 = getelementptr inbounds i8, i8* %546, i64 1
  %548 = add nsw i64 %501, -1
  %549 = add nsw i64 %516, -1
  %550 = add nsw i64 %516, -2
  %551 = and i64 %548, 1
  %552 = icmp eq i8 %500, 2
  %553 = sub nsw i64 %548, %551
  %554 = icmp eq i64 %551, 0
  %555 = and i64 %549, 3
  %556 = icmp ult i64 %550, 3
  %557 = sub nsw i64 %549, %555
  %558 = icmp eq i64 %555, 0
  br label %559

559:                                              ; preds = %1155, %492
  %560 = phi i64 [ 0, %492 ], [ %1156, %1155 ]
  %561 = phi i32* [ %502, %492 ], [ %588, %1155 ]
  %562 = phi i64 [ 0, %492 ], [ %1095, %1155 ]
  %563 = phi i32 [ 0, %492 ], [ %1098, %1155 ]
  %564 = phi i64 [ 0, %492 ], [ %1097, %1155 ]
  %565 = phi i32 [ 0, %492 ], [ %1096, %1155 ]
  %566 = shl nuw nsw i64 %560, 1
  %567 = trunc i64 %560 to i32
  br label %570

568:                                              ; preds = %1152
  %569 = icmp ult i64 %1154, 2
  br i1 %569, label %570, label %1155

570:                                              ; preds = %568, %559
  %571 = phi i64 [ 0, %559 ], [ %1154, %568 ]
  %572 = phi i32* [ %561, %559 ], [ %588, %568 ]
  %573 = phi i64 [ %562, %559 ], [ %1095, %568 ]
  %574 = phi i32 [ %563, %559 ], [ %1098, %568 ]
  %575 = phi i64 [ %564, %559 ], [ %1097, %568 ]
  %576 = phi i32 [ %565, %559 ], [ %1096, %568 ]
  %577 = add nuw nsw i64 %571, %566
  %578 = load i32, i32* %503, align 4
  %579 = icmp eq i32 %578, 0
  br i1 %579, label %580, label %587

580:                                              ; preds = %570
  %581 = trunc i64 %577 to i32
  %582 = call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %38, %struct.MODE_INFO* %40, i32 %581) #6
  %583 = call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %38, %struct.MODE_INFO* %42, i32 %581) #6
  %584 = zext i8 %582 to i64
  %585 = zext i8 %583 to i64
  %586 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 113, i64 %584, i64 %585, i64 0
  br label %587

587:                                              ; preds = %580, %570
  %588 = phi i32* [ %586, %580 ], [ %572, %570 ]
  %589 = load i8*, i8** %504, align 8
  %590 = getelementptr inbounds i8, i8* %589, i64 %571
  %591 = load i8*, i8** %505, align 8
  %592 = getelementptr inbounds i8, i8* %591, i64 %560
  %593 = sub nsw i64 %5, %573
  %594 = load i32, i32* %506, align 8
  %595 = load i32, i32* %507, align 8
  %596 = load i8*, i8** %508, align 8
  %597 = mul i32 %594, %567
  %598 = trunc i64 %571 to i32
  %599 = add i32 %597, %598
  %600 = shl i32 %599, 2
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds i8, i8* %596, i64 %601
  %603 = load i8*, i8** %509, align 8
  %604 = getelementptr inbounds i8, i8* %603, i64 %601
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %544)
  store i8 -86, i8* %544, align 2
  store i8 -86, i8* %545, align 1
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %510) #6
  store i8 -86, i8* %510, align 1
  store i8 -86, i8* %511, align 1
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %546)
  store i8 -86, i8* %546, align 2
  store i8 -86, i8* %547, align 1
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %512) #6
  store i8 -86, i8* %512, align 1
  store i8 -86, i8* %513, align 1
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %514) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %514, i8 -86, i64 64, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %515) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %515, i8 -86, i64 128, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %544, i8* align 1 %590, i64 %516, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %546, i8* align 1 %592, i64 %501, i1 false) #6
  %605 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %606 = load %struct.MODE_INFO*, %struct.MODE_INFO** %605, align 8
  %607 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %606, i64 0, i32 2
  store i8 0, i8* %607, align 2
  %608 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %517, align 8
  %609 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %608, i64 0, i32 29
  %610 = load i32, i32* %609, align 8
  %611 = and i32 %610, 8
  %612 = icmp eq i32 %611, 0
  %613 = sext i32 %594 to i64
  %614 = sext i32 %595 to i64
  br i1 %612, label %862, label %615

615:                                              ; preds = %587, %836
  %616 = phi i8 [ %837, %836 ], [ 0, %587 ]
  %617 = phi i32 [ %838, %836 ], [ 2147483647, %587 ]
  %618 = phi i32 [ %839, %836 ], [ 2147483647, %587 ]
  %619 = phi i64 [ %840, %836 ], [ 9223372036854775807, %587 ]
  %620 = phi i64 [ %842, %836 ], [ 0, %587 ]
  %621 = phi i64 [ %841, %836 ], [ %593, %587 ]
  %622 = trunc i64 %620 to i32
  %623 = getelementptr inbounds i32, i32* %588, i64 %620
  %624 = load i32, i32* %623, align 4
  %625 = load i32, i32* %518, align 8
  %626 = shl i32 1, %622
  %627 = and i32 %625, %626
  %628 = icmp eq i32 %627, 0
  br i1 %628, label %836, label %629

629:                                              ; preds = %615
  %630 = load i32, i32* %519, align 8
  %631 = and i32 %630, 16
  %632 = icmp eq i32 %631, 0
  br i1 %632, label %641, label %633

633:                                              ; preds = %629
  %634 = trunc i64 %620 to i8
  switch i8 %634, label %641 [
    i8 5, label %635
    i8 8, label %636
    i8 7, label %637
    i8 6, label %640
  ]

635:                                              ; preds = %633
  switch i8 %616, label %836 [
    i8 4, label %641
    i8 1, label %641
  ]

636:                                              ; preds = %633
  switch i8 %616, label %836 [
    i8 3, label %641
    i8 1, label %641
  ]

637:                                              ; preds = %633
  %638 = and i8 %616, -2
  %639 = icmp eq i8 %638, 2
  br i1 %639, label %641, label %836

640:                                              ; preds = %633
  switch i8 %616, label %836 [
    i8 4, label %641
    i8 2, label %641
  ]

641:                                              ; preds = %640, %640, %637, %636, %636, %635, %635, %633, %629
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %510, i8* nonnull align 2 %544, i64 %516, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %512, i8* nonnull align 2 %546, i64 %501, i1 false) #6
  br i1 %520, label %642, label %807

642:                                              ; preds = %641
  %643 = trunc i64 %620 to i8
  br label %644

644:                                              ; preds = %802, %642
  %645 = phi i64 [ 0, %642 ], [ %805, %802 ]
  %646 = phi i64 [ 0, %642 ], [ %804, %802 ]
  %647 = phi i32 [ 0, %642 ], [ %803, %802 ]
  br i1 %521, label %648, label %802

648:                                              ; preds = %644
  %649 = trunc i64 %645 to i32
  %650 = add nuw i32 %649, %567
  %651 = shl nsw i32 %650, 1
  %652 = shl nsw i64 %645, 2
  %653 = mul nsw i64 %652, %613
  %654 = mul nsw i64 %652, %614
  %655 = getelementptr inbounds [2 x i8], [2 x i8]* %13, i64 0, i64 %645
  %656 = sext i32 %651 to i64
  br label %657

657:                                              ; preds = %797, %648
  %658 = phi i64 [ 0, %648 ], [ %800, %797 ]
  %659 = phi i64 [ %646, %648 ], [ %799, %797 ]
  %660 = phi i32 [ %647, %648 ], [ %798, %797 ]
  %661 = add nuw nsw i64 %658, %571
  %662 = add nsw i64 %661, %656
  %663 = shl nsw i64 %658, 2
  %664 = add nsw i64 %663, %653
  %665 = getelementptr inbounds i8, i8* %602, i64 %664
  %666 = add nsw i64 %663, %654
  %667 = getelementptr inbounds i8, i8* %604, i64 %666
  %668 = ptrtoint i8* %667 to i64
  %669 = shl i64 %668, 1
  %670 = inttoptr i64 %669 to i16*
  %671 = trunc i64 %662 to i32
  %672 = call i16* @vp9_raster_block_offset_int16(i8 zeroext 3, i32 %671, i16* %522) #6
  %673 = load i32*, i32** %523, align 8
  %674 = shl nsw i32 %671, 4
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds i32, i32* %673, i64 %675
  %677 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %678 = load %struct.MODE_INFO*, %struct.MODE_INFO** %677, align 8
  %679 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %678, i64 0, i32 10, i64 %662, i32 0
  store i8 %643, i8* %679, align 4
  %680 = load i32, i32* %24, align 16
  %681 = icmp ne i32 %680, 0
  %682 = select i1 %681, i8* %665, i8* %667
  %683 = select i1 %681, i32 %594, i32 %595
  %684 = trunc i64 %661 to i32
  call void @vp9_predict_intra_block(%struct.macroblockd* %23, i32 1, i8 zeroext 0, i8 zeroext %643, i8* %682, i32 %683, i8* %667, i32 %595, i32 %684, i32 %650, i32 0) #6
  %685 = load i32, i32* %524, align 8
  call void @vpx_highbd_subtract_block_c(i32 4, i32 4, i16* %672, i64 8, i8* %665, i64 %613, i8* %667, i64 %614, i32 %685) #6
  %686 = load i32, i32* %525, align 4
  %687 = icmp eq i32 %686, 0
  br i1 %687, label %721, label %688

688:                                              ; preds = %657
  %689 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 %658
  %690 = load i8, i8* %689, align 1
  %691 = load i8, i8* %655, align 1
  %692 = icmp ne i8 %690, 0
  %693 = zext i1 %692 to i32
  %694 = icmp ne i8 %691, 0
  %695 = zext i1 %694 to i32
  %696 = add nuw nsw i32 %695, %693
  call void @vp9_highbd_fwht4x4_c(i16* %672, i32* %676, i32 8) #6
  call void @vp9_regular_quantize_b_4x4(%struct.macroblock* %1, i32 0, i32 %671, i16* %526, i16* %527) #6
  %697 = load i32, i32* %529, align 4
  %698 = call fastcc i32 @cost_coeffs(%struct.macroblock* %1, i32 0, i32 %671, i8 zeroext 0, i32 %696, i16* %526, i16* %528, i32 %697) #6
  %699 = add nsw i32 %698, %660
  %700 = load i16*, i16** %530, align 16
  %701 = getelementptr inbounds i16, i16* %700, i64 %662
  %702 = load i16, i16* %701, align 2
  %703 = icmp ne i16 %702, 0
  %704 = zext i1 %703 to i8
  store i8 %704, i8* %655, align 1
  store i8 %704, i8* %689, align 1
  %705 = sext i32 %699 to i64
  %706 = load i32, i32* %531, align 4
  %707 = sext i32 %706 to i64
  %708 = mul nsw i64 %707, %705
  %709 = add nsw i64 %708, 256
  %710 = ashr i64 %709, 9
  %711 = load i32, i32* %532, align 8
  %712 = zext i32 %711 to i64
  %713 = shl i64 %659, %712
  %714 = add nsw i64 %710, %713
  %715 = icmp slt i64 %714, %621
  br i1 %715, label %716, label %836

716:                                              ; preds = %688
  %717 = load i32*, i32** %533, align 8
  %718 = getelementptr inbounds i32, i32* %717, i64 %675
  %719 = zext i16 %702 to i32
  %720 = load i32, i32* %524, align 8
  call void @vp9_highbd_iwht4x4_add(i32* %718, i16* %670, i32 %595, i32 %719, i32 %720) #6
  br label %797

721:                                              ; preds = %657
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %534) #6
  store i64 -6148914691236517206, i64* %16, align 8
  %722 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %723 = load %struct.MODE_INFO*, %struct.MODE_INFO** %722, align 8
  %724 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %723, i64 0, i32 8, i64 0
  %725 = load i8, i8* %724, align 4
  %726 = icmp slt i8 %725, 1
  br i1 %726, label %727, label %738

727:                                              ; preds = %721
  %728 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %723, i64 0, i32 0
  %729 = load i8, i8* %728, align 4
  %730 = icmp ult i8 %729, 3
  %731 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %723, i64 0, i32 10, i64 %662, i32 0
  %732 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %723, i64 0, i32 1
  %733 = select i1 %730, i8* %731, i8* %732
  %734 = load i8, i8* %733, align 1
  %735 = zext i8 %734 to i64
  %736 = getelementptr inbounds [10 x i32], [10 x i32]* @intra_mode_to_tx_type_lookup, i64 0, i64 %735
  %737 = load i32, i32* %736, align 4
  br label %738

738:                                              ; preds = %727, %721
  %739 = phi i32 [ %737, %727 ], [ 0, %721 ]
  %740 = zext i32 %739 to i64
  %741 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 %658
  %742 = load i8, i8* %741, align 1
  %743 = load i8, i8* %655, align 1
  %744 = icmp ne i8 %742, 0
  %745 = zext i1 %744 to i32
  %746 = icmp ne i8 %743, 0
  %747 = zext i1 %746 to i32
  %748 = add nuw nsw i32 %747, %745
  %749 = icmp eq i32 %739, 0
  br i1 %749, label %750, label %751

750:                                              ; preds = %738
  call void @vpx_highbd_fdct4x4_sse2(i16* %672, i32* %676, i32 8) #6
  br label %752

751:                                              ; preds = %738
  call void @vp9_highbd_fht4x4_c(i16* %672, i32* %676, i32 8, i32 %739) #6
  br label %752

752:                                              ; preds = %751, %750
  %753 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 0, i64 %740, i32 0
  %754 = load i16*, i16** %753, align 8
  %755 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 0, i64 %740, i32 1
  %756 = load i16*, i16** %755, align 8
  call void @vp9_regular_quantize_b_4x4(%struct.macroblock* %1, i32 0, i32 %671, i16* %754, i16* %756) #6
  %757 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 0, i64 %740, i32 2
  %758 = load i16*, i16** %757, align 8
  %759 = load i32, i32* %529, align 4
  %760 = call fastcc i32 @cost_coeffs(%struct.macroblock* %1, i32 0, i32 %671, i8 zeroext 0, i32 %748, i16* %754, i16* %758, i32 %759) #6
  %761 = add nsw i32 %760, %660
  %762 = load i32*, i32** %533, align 8
  %763 = getelementptr inbounds i32, i32* %762, i64 %675
  %764 = load i32, i32* %524, align 8
  %765 = icmp eq i32 %764, 8
  br i1 %765, label %766, label %769

766:                                              ; preds = %752
  %767 = load i64 (i32*, i32*, i64, i64*)*, i64 (i32*, i32*, i64, i64*)** @vp9_block_error, align 8
  %768 = call i64 %767(i32* %676, i32* %763, i64 16, i64* nonnull %16) #6
  br label %771

769:                                              ; preds = %752
  %770 = call i64 @vp9_highbd_block_error_sse2(i32* %676, i32* %763, i64 16, i64* nonnull %16, i32 %764) #6
  br label %771

771:                                              ; preds = %769, %766
  %772 = phi i64 [ %768, %766 ], [ %770, %769 ]
  %773 = ashr i64 %772, 2
  %774 = add nsw i64 %773, %659
  %775 = load i16*, i16** %530, align 16
  %776 = getelementptr inbounds i16, i16* %775, i64 %662
  %777 = load i16, i16* %776, align 2
  %778 = icmp ne i16 %777, 0
  %779 = zext i1 %778 to i8
  store i8 %779, i8* %655, align 1
  store i8 %779, i8* %741, align 1
  %780 = sext i32 %761 to i64
  %781 = load i32, i32* %531, align 4
  %782 = sext i32 %781 to i64
  %783 = mul nsw i64 %782, %780
  %784 = add nsw i64 %783, 256
  %785 = ashr i64 %784, 9
  %786 = load i32, i32* %532, align 8
  %787 = zext i32 %786 to i64
  %788 = shl i64 %774, %787
  %789 = add nsw i64 %785, %788
  %790 = icmp slt i64 %789, %621
  br i1 %790, label %791, label %796

791:                                              ; preds = %771
  %792 = load i32*, i32** %533, align 8
  %793 = getelementptr inbounds i32, i32* %792, i64 %675
  %794 = zext i16 %777 to i32
  %795 = load i32, i32* %524, align 8
  call void @vp9_highbd_iht4x4_add(i32 %739, i32* %793, i16* %670, i32 %595, i32 %794, i32 %795) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %534) #6
  br label %797

796:                                              ; preds = %771
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %534) #6
  br label %836

797:                                              ; preds = %791, %716
  %798 = phi i32 [ %761, %791 ], [ %699, %716 ]
  %799 = phi i64 [ %774, %791 ], [ %659, %716 ]
  %800 = add nuw nsw i64 %658, 1
  %801 = icmp eq i64 %800, %516
  br i1 %801, label %802, label %657

802:                                              ; preds = %797, %644
  %803 = phi i32 [ %647, %644 ], [ %798, %797 ]
  %804 = phi i64 [ %646, %644 ], [ %799, %797 ]
  %805 = add nuw nsw i64 %645, 1
  %806 = icmp eq i64 %805, %501
  br i1 %806, label %807, label %644

807:                                              ; preds = %802, %641
  %808 = phi i32 [ 0, %641 ], [ %803, %802 ]
  %809 = phi i64 [ 0, %641 ], [ %804, %802 ]
  %810 = add nsw i32 %808, %624
  %811 = sext i32 %810 to i64
  %812 = load i32, i32* %531, align 4
  %813 = sext i32 %812 to i64
  %814 = mul nsw i64 %813, %811
  %815 = add nsw i64 %814, 256
  %816 = ashr i64 %815, 9
  %817 = load i32, i32* %532, align 8
  %818 = zext i32 %817 to i64
  %819 = shl i64 %809, %818
  %820 = add nsw i64 %816, %819
  %821 = icmp slt i64 %820, %621
  br i1 %821, label %822, label %836

822:                                              ; preds = %807
  %823 = trunc i64 %620 to i8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %590, i8* nonnull align 1 %510, i64 %516, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %592, i8* nonnull align 1 %512, i64 %501, i1 false) #6
  br i1 %536, label %836, label %824

824:                                              ; preds = %822, %824
  %825 = phi i64 [ %834, %824 ], [ 0, %822 ]
  %826 = shl nsw i64 %825, 3
  %827 = getelementptr inbounds [64 x i16], [64 x i16]* %15, i64 0, i64 %826
  %828 = bitcast i16* %827 to i8*
  %829 = mul nsw i64 %825, %614
  %830 = getelementptr inbounds i8, i8* %604, i64 %829
  %831 = ptrtoint i8* %830 to i64
  %832 = shl i64 %831, 1
  %833 = inttoptr i64 %832 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %828, i8* align 2 %833, i64 %538, i1 false) #6
  %834 = add nuw nsw i64 %825, 1
  %835 = icmp ult i64 %834, %535
  br i1 %835, label %824, label %836

836:                                              ; preds = %824, %688, %822, %807, %796, %640, %637, %636, %635, %615
  %837 = phi i8 [ %616, %615 ], [ %823, %822 ], [ %616, %807 ], [ %616, %796 ], [ %616, %640 ], [ %616, %637 ], [ %616, %636 ], [ %616, %635 ], [ %616, %688 ], [ %823, %824 ]
  %838 = phi i32 [ %617, %615 ], [ %810, %822 ], [ %617, %807 ], [ %617, %796 ], [ %617, %640 ], [ %617, %637 ], [ %617, %636 ], [ %617, %635 ], [ %617, %688 ], [ %810, %824 ]
  %839 = phi i32 [ %618, %615 ], [ %808, %822 ], [ %618, %807 ], [ %618, %796 ], [ %618, %640 ], [ %618, %637 ], [ %618, %636 ], [ %618, %635 ], [ %618, %688 ], [ %808, %824 ]
  %840 = phi i64 [ %619, %615 ], [ %809, %822 ], [ %619, %807 ], [ %619, %796 ], [ %619, %640 ], [ %619, %637 ], [ %619, %636 ], [ %619, %635 ], [ %619, %688 ], [ %809, %824 ]
  %841 = phi i64 [ %621, %615 ], [ %820, %822 ], [ %621, %807 ], [ %621, %796 ], [ %621, %640 ], [ %621, %637 ], [ %621, %636 ], [ %621, %635 ], [ %621, %688 ], [ %820, %824 ]
  %842 = add nuw nsw i64 %620, 1
  %843 = icmp eq i64 %842, 10
  br i1 %843, label %844, label %615

844:                                              ; preds = %836
  %845 = icmp slt i64 %841, %593
  br i1 %845, label %846, label %1087

846:                                              ; preds = %844
  %847 = load i32, i32* %24, align 16
  %848 = icmp ne i32 %847, 0
  %849 = or i1 %536, %848
  br i1 %849, label %1087, label %850

850:                                              ; preds = %846, %850
  %851 = phi i64 [ %860, %850 ], [ 0, %846 ]
  %852 = mul nsw i64 %851, %614
  %853 = getelementptr inbounds i8, i8* %604, i64 %852
  %854 = ptrtoint i8* %853 to i64
  %855 = shl i64 %854, 1
  %856 = inttoptr i64 %855 to i8*
  %857 = shl nsw i64 %851, 3
  %858 = getelementptr inbounds [64 x i16], [64 x i16]* %15, i64 0, i64 %857
  %859 = bitcast i16* %858 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %856, i8* align 16 %859, i64 %538, i1 false) #6
  %860 = add nuw nsw i64 %851, 1
  %861 = icmp ult i64 %860, %535
  br i1 %861, label %850, label %1087

862:                                              ; preds = %587, %1065
  %863 = phi i8 [ %1066, %1065 ], [ 0, %587 ]
  %864 = phi i32 [ %1067, %1065 ], [ 2147483647, %587 ]
  %865 = phi i32 [ %1068, %1065 ], [ 2147483647, %587 ]
  %866 = phi i64 [ %1069, %1065 ], [ 9223372036854775807, %587 ]
  %867 = phi i64 [ %1071, %1065 ], [ 0, %587 ]
  %868 = phi i64 [ %1070, %1065 ], [ %593, %587 ]
  %869 = trunc i64 %867 to i32
  %870 = getelementptr inbounds i32, i32* %588, i64 %867
  %871 = load i32, i32* %870, align 4
  %872 = load i32, i32* %518, align 8
  %873 = shl i32 1, %869
  %874 = and i32 %872, %873
  %875 = icmp eq i32 %874, 0
  br i1 %875, label %1065, label %876

876:                                              ; preds = %862
  %877 = load i32, i32* %519, align 8
  %878 = and i32 %877, 16
  %879 = icmp eq i32 %878, 0
  br i1 %879, label %888, label %880

880:                                              ; preds = %876
  %881 = trunc i64 %867 to i8
  switch i8 %881, label %888 [
    i8 5, label %882
    i8 8, label %883
    i8 7, label %884
    i8 6, label %887
  ]

882:                                              ; preds = %880
  switch i8 %863, label %1065 [
    i8 4, label %888
    i8 1, label %888
  ]

883:                                              ; preds = %880
  switch i8 %863, label %1065 [
    i8 3, label %888
    i8 1, label %888
  ]

884:                                              ; preds = %880
  %885 = and i8 %863, -2
  %886 = icmp eq i8 %885, 2
  br i1 %886, label %888, label %1065

887:                                              ; preds = %880
  switch i8 %863, label %1065 [
    i8 4, label %888
    i8 2, label %888
  ]

888:                                              ; preds = %887, %887, %884, %883, %883, %882, %882, %880, %876
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %510, i8* nonnull align 2 %544, i64 %516, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %512, i8* nonnull align 2 %546, i64 %501, i1 false) #6
  br i1 %520, label %889, label %1040

889:                                              ; preds = %888
  %890 = trunc i64 %867 to i8
  br label %891

891:                                              ; preds = %1035, %889
  %892 = phi i64 [ 0, %889 ], [ %1038, %1035 ]
  %893 = phi i64 [ 0, %889 ], [ %1037, %1035 ]
  %894 = phi i32 [ 0, %889 ], [ %1036, %1035 ]
  br i1 %521, label %895, label %1035

895:                                              ; preds = %891
  %896 = trunc i64 %892 to i32
  %897 = add nuw i32 %896, %567
  %898 = shl nsw i32 %897, 1
  %899 = shl nsw i64 %892, 2
  %900 = mul nsw i64 %899, %613
  %901 = mul nsw i64 %899, %614
  %902 = getelementptr inbounds [2 x i8], [2 x i8]* %13, i64 0, i64 %892
  %903 = sext i32 %898 to i64
  br label %904

904:                                              ; preds = %1030, %895
  %905 = phi i64 [ 0, %895 ], [ %1033, %1030 ]
  %906 = phi i64 [ %893, %895 ], [ %1032, %1030 ]
  %907 = phi i32 [ %894, %895 ], [ %1031, %1030 ]
  %908 = add nuw nsw i64 %905, %571
  %909 = add nsw i64 %908, %903
  %910 = shl nsw i64 %905, 2
  %911 = add nsw i64 %910, %900
  %912 = getelementptr inbounds i8, i8* %602, i64 %911
  %913 = add nsw i64 %910, %901
  %914 = getelementptr inbounds i8, i8* %604, i64 %913
  %915 = trunc i64 %909 to i32
  %916 = call i16* @vp9_raster_block_offset_int16(i8 zeroext 3, i32 %915, i16* %522) #6
  %917 = load i32*, i32** %523, align 8
  %918 = shl nsw i32 %915, 4
  %919 = sext i32 %918 to i64
  %920 = getelementptr inbounds i32, i32* %917, i64 %919
  %921 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %922 = load %struct.MODE_INFO*, %struct.MODE_INFO** %921, align 8
  %923 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %922, i64 0, i32 10, i64 %909, i32 0
  store i8 %890, i8* %923, align 4
  %924 = load i32, i32* %24, align 16
  %925 = icmp ne i32 %924, 0
  %926 = select i1 %925, i8* %912, i8* %914
  %927 = select i1 %925, i32 %594, i32 %595
  %928 = trunc i64 %908 to i32
  call void @vp9_predict_intra_block(%struct.macroblockd* %23, i32 1, i8 zeroext 0, i8 zeroext %890, i8* %926, i32 %927, i8* %914, i32 %595, i32 %928, i32 %897, i32 0) #6
  call void @vpx_subtract_block_sse2(i32 4, i32 4, i16* %916, i64 8, i8* %912, i64 %613, i8* %914, i64 %614) #6
  %929 = load i32, i32* %525, align 4
  %930 = icmp eq i32 %929, 0
  br i1 %930, label %963, label %931

931:                                              ; preds = %904
  %932 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 %905
  %933 = load i8, i8* %932, align 1
  %934 = load i8, i8* %902, align 1
  %935 = icmp ne i8 %933, 0
  %936 = zext i1 %935 to i32
  %937 = icmp ne i8 %934, 0
  %938 = zext i1 %937 to i32
  %939 = add nuw nsw i32 %938, %936
  call void @vp9_fwht4x4_sse2(i16* %916, i32* %920, i32 8) #6
  call void @vp9_regular_quantize_b_4x4(%struct.macroblock* %1, i32 0, i32 %915, i16* %526, i16* %527) #6
  %940 = load i32, i32* %529, align 4
  %941 = call fastcc i32 @cost_coeffs(%struct.macroblock* %1, i32 0, i32 %915, i8 zeroext 0, i32 %939, i16* %526, i16* %528, i32 %940) #6
  %942 = add nsw i32 %941, %907
  %943 = load i16*, i16** %530, align 16
  %944 = getelementptr inbounds i16, i16* %943, i64 %909
  %945 = load i16, i16* %944, align 2
  %946 = icmp ne i16 %945, 0
  %947 = zext i1 %946 to i8
  store i8 %947, i8* %902, align 1
  store i8 %947, i8* %932, align 1
  %948 = sext i32 %942 to i64
  %949 = load i32, i32* %531, align 4
  %950 = sext i32 %949 to i64
  %951 = mul nsw i64 %950, %948
  %952 = add nsw i64 %951, 256
  %953 = ashr i64 %952, 9
  %954 = load i32, i32* %532, align 8
  %955 = zext i32 %954 to i64
  %956 = shl i64 %906, %955
  %957 = add nsw i64 %953, %956
  %958 = icmp slt i64 %957, %868
  br i1 %958, label %959, label %1065

959:                                              ; preds = %931
  %960 = load i32*, i32** %533, align 8
  %961 = getelementptr inbounds i32, i32* %960, i64 %919
  %962 = zext i16 %945 to i32
  call void @vp9_iwht4x4_add(i32* %961, i8* %914, i32 %595, i32 %962) #6
  br label %1030

963:                                              ; preds = %904
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %539) #6
  store i64 -6148914691236517206, i64* %17, align 8
  %964 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %965 = load %struct.MODE_INFO*, %struct.MODE_INFO** %964, align 8
  %966 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %965, i64 0, i32 8, i64 0
  %967 = load i8, i8* %966, align 4
  %968 = icmp slt i8 %967, 1
  br i1 %968, label %969, label %980

969:                                              ; preds = %963
  %970 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %965, i64 0, i32 0
  %971 = load i8, i8* %970, align 4
  %972 = icmp ult i8 %971, 3
  %973 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %965, i64 0, i32 10, i64 %909, i32 0
  %974 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %965, i64 0, i32 1
  %975 = select i1 %972, i8* %973, i8* %974
  %976 = load i8, i8* %975, align 1
  %977 = zext i8 %976 to i64
  %978 = getelementptr inbounds [10 x i32], [10 x i32]* @intra_mode_to_tx_type_lookup, i64 0, i64 %977
  %979 = load i32, i32* %978, align 4
  br label %980

980:                                              ; preds = %969, %963
  %981 = phi i32 [ %979, %969 ], [ 0, %963 ]
  %982 = zext i32 %981 to i64
  %983 = getelementptr inbounds [2 x i8], [2 x i8]* %11, i64 0, i64 %905
  %984 = load i8, i8* %983, align 1
  %985 = load i8, i8* %902, align 1
  %986 = icmp ne i8 %984, 0
  %987 = zext i1 %986 to i32
  %988 = icmp ne i8 %985, 0
  %989 = zext i1 %988 to i32
  %990 = add nuw nsw i32 %989, %987
  call void @vp9_fht4x4_sse2(i16* %916, i32* %920, i32 8, i32 %981) #6
  %991 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 0, i64 %982, i32 0
  %992 = load i16*, i16** %991, align 8
  %993 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 0, i64 %982, i32 1
  %994 = load i16*, i16** %993, align 8
  call void @vp9_regular_quantize_b_4x4(%struct.macroblock* %1, i32 0, i32 %915, i16* %992, i16* %994) #6
  %995 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 0, i64 %982, i32 2
  %996 = load i16*, i16** %995, align 8
  %997 = load i32, i32* %529, align 4
  %998 = call fastcc i32 @cost_coeffs(%struct.macroblock* %1, i32 0, i32 %915, i8 zeroext 0, i32 %990, i16* %992, i16* %996, i32 %997) #6
  %999 = add nsw i32 %998, %907
  %1000 = load i16*, i16** %530, align 16
  %1001 = getelementptr inbounds i16, i16* %1000, i64 %909
  %1002 = load i16, i16* %1001, align 2
  %1003 = icmp ne i16 %1002, 0
  %1004 = zext i1 %1003 to i8
  store i8 %1004, i8* %902, align 1
  store i8 %1004, i8* %983, align 1
  %1005 = load i64 (i32*, i32*, i64, i64*)*, i64 (i32*, i32*, i64, i64*)** @vp9_block_error, align 8
  %1006 = load i32*, i32** %533, align 8
  %1007 = getelementptr inbounds i32, i32* %1006, i64 %919
  %1008 = call i64 %1005(i32* %920, i32* %1007, i64 16, i64* nonnull %17) #6
  %1009 = ashr i64 %1008, 2
  %1010 = add nsw i64 %1009, %906
  %1011 = sext i32 %999 to i64
  %1012 = load i32, i32* %531, align 4
  %1013 = sext i32 %1012 to i64
  %1014 = mul nsw i64 %1013, %1011
  %1015 = add nsw i64 %1014, 256
  %1016 = ashr i64 %1015, 9
  %1017 = load i32, i32* %532, align 8
  %1018 = zext i32 %1017 to i64
  %1019 = shl i64 %1010, %1018
  %1020 = add nsw i64 %1016, %1019
  %1021 = icmp slt i64 %1020, %868
  br i1 %1021, label %1022, label %1029

1022:                                             ; preds = %980
  %1023 = load i32*, i32** %533, align 8
  %1024 = getelementptr inbounds i32, i32* %1023, i64 %919
  %1025 = load i16*, i16** %530, align 16
  %1026 = getelementptr inbounds i16, i16* %1025, i64 %909
  %1027 = load i16, i16* %1026, align 2
  %1028 = zext i16 %1027 to i32
  call void @vp9_iht4x4_add(i32 %981, i32* %1024, i8* %914, i32 %595, i32 %1028) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %539) #6
  br label %1030

1029:                                             ; preds = %980
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %539) #6
  br label %1065

1030:                                             ; preds = %1022, %959
  %1031 = phi i32 [ %999, %1022 ], [ %942, %959 ]
  %1032 = phi i64 [ %1010, %1022 ], [ %906, %959 ]
  %1033 = add nuw nsw i64 %905, 1
  %1034 = icmp eq i64 %1033, %516
  br i1 %1034, label %1035, label %904

1035:                                             ; preds = %1030, %891
  %1036 = phi i32 [ %894, %891 ], [ %1031, %1030 ]
  %1037 = phi i64 [ %893, %891 ], [ %1032, %1030 ]
  %1038 = add nuw nsw i64 %892, 1
  %1039 = icmp eq i64 %1038, %501
  br i1 %1039, label %1040, label %891

1040:                                             ; preds = %1035, %888
  %1041 = phi i32 [ 0, %888 ], [ %1036, %1035 ]
  %1042 = phi i64 [ 0, %888 ], [ %1037, %1035 ]
  %1043 = add nsw i32 %1041, %871
  %1044 = sext i32 %1043 to i64
  %1045 = load i32, i32* %531, align 4
  %1046 = sext i32 %1045 to i64
  %1047 = mul nsw i64 %1046, %1044
  %1048 = add nsw i64 %1047, 256
  %1049 = ashr i64 %1048, 9
  %1050 = load i32, i32* %532, align 8
  %1051 = zext i32 %1050 to i64
  %1052 = shl i64 %1042, %1051
  %1053 = add nsw i64 %1049, %1052
  %1054 = icmp slt i64 %1053, %868
  br i1 %1054, label %1055, label %1065

1055:                                             ; preds = %1040
  %1056 = trunc i64 %867 to i8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %590, i8* nonnull align 1 %510, i64 %516, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %592, i8* nonnull align 1 %512, i64 %501, i1 false) #6
  br i1 %536, label %1065, label %1057

1057:                                             ; preds = %1055, %1057
  %1058 = phi i64 [ %1063, %1057 ], [ 0, %1055 ]
  %1059 = shl nsw i64 %1058, 3
  %1060 = getelementptr inbounds [64 x i8], [64 x i8]* %14, i64 0, i64 %1059
  %1061 = mul nsw i64 %1058, %614
  %1062 = getelementptr inbounds i8, i8* %604, i64 %1061
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1060, i8* align 1 %1062, i64 %541, i1 false) #6
  %1063 = add nuw nsw i64 %1058, 1
  %1064 = icmp ult i64 %1063, %535
  br i1 %1064, label %1057, label %1065

1065:                                             ; preds = %1057, %931, %1055, %1040, %1029, %887, %884, %883, %882, %862
  %1066 = phi i8 [ %863, %862 ], [ %1056, %1055 ], [ %863, %1040 ], [ %863, %1029 ], [ %863, %887 ], [ %863, %884 ], [ %863, %883 ], [ %863, %882 ], [ %863, %931 ], [ %1056, %1057 ]
  %1067 = phi i32 [ %864, %862 ], [ %1043, %1055 ], [ %864, %1040 ], [ %864, %1029 ], [ %864, %887 ], [ %864, %884 ], [ %864, %883 ], [ %864, %882 ], [ %864, %931 ], [ %1043, %1057 ]
  %1068 = phi i32 [ %865, %862 ], [ %1041, %1055 ], [ %865, %1040 ], [ %865, %1029 ], [ %865, %887 ], [ %865, %884 ], [ %865, %883 ], [ %865, %882 ], [ %865, %931 ], [ %1041, %1057 ]
  %1069 = phi i64 [ %866, %862 ], [ %1042, %1055 ], [ %866, %1040 ], [ %866, %1029 ], [ %866, %887 ], [ %866, %884 ], [ %866, %883 ], [ %866, %882 ], [ %866, %931 ], [ %1042, %1057 ]
  %1070 = phi i64 [ %868, %862 ], [ %1053, %1055 ], [ %868, %1040 ], [ %868, %1029 ], [ %868, %887 ], [ %868, %884 ], [ %868, %883 ], [ %868, %882 ], [ %868, %931 ], [ %1053, %1057 ]
  %1071 = add nuw nsw i64 %867, 1
  %1072 = icmp eq i64 %1071, 10
  br i1 %1072, label %1073, label %862

1073:                                             ; preds = %1065
  %1074 = icmp slt i64 %1070, %593
  br i1 %1074, label %1075, label %1087

1075:                                             ; preds = %1073
  %1076 = load i32, i32* %24, align 16
  %1077 = icmp ne i32 %1076, 0
  %1078 = or i1 %536, %1077
  br i1 %1078, label %1087, label %1079

1079:                                             ; preds = %1075, %1079
  %1080 = phi i64 [ %1085, %1079 ], [ 0, %1075 ]
  %1081 = mul nsw i64 %1080, %614
  %1082 = getelementptr inbounds i8, i8* %604, i64 %1081
  %1083 = shl nsw i64 %1080, 3
  %1084 = getelementptr inbounds [64 x i8], [64 x i8]* %14, i64 0, i64 %1083
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1082, i8* align 8 %1084, i64 %541, i1 false) #6
  %1085 = add nuw nsw i64 %1080, 1
  %1086 = icmp ult i64 %1085, %535
  br i1 %1086, label %1079, label %1087

1087:                                             ; preds = %850, %1079, %1075, %1073, %846, %844
  %1088 = phi i8 [ %1066, %1075 ], [ %1066, %1073 ], [ %837, %846 ], [ %837, %844 ], [ %1066, %1079 ], [ %837, %850 ]
  %1089 = phi i32 [ %1067, %1075 ], [ %1067, %1073 ], [ %838, %846 ], [ %838, %844 ], [ %1067, %1079 ], [ %838, %850 ]
  %1090 = phi i32 [ %1068, %1075 ], [ %1068, %1073 ], [ %839, %846 ], [ %839, %844 ], [ %1068, %1079 ], [ %839, %850 ]
  %1091 = phi i64 [ %1069, %1075 ], [ %1069, %1073 ], [ %840, %846 ], [ %840, %844 ], [ %1069, %1079 ], [ %840, %850 ]
  %1092 = phi i64 [ %1070, %1075 ], [ %1070, %1073 ], [ %841, %846 ], [ %841, %844 ], [ %1070, %1079 ], [ %841, %850 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %515) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %514) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %512) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %546)
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %510) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %544)
  %1093 = icmp slt i64 %1092, %593
  br i1 %1093, label %1094, label %1175

1094:                                             ; preds = %1087
  %1095 = add nsw i64 %1092, %573
  %1096 = add nsw i32 %1089, %576
  %1097 = add nsw i64 %1091, %575
  %1098 = add nsw i32 %1090, %574
  %1099 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 %577, i32 0
  store i8 %1088, i8* %1099, align 4
  br i1 %542, label %1100, label %1108

1100:                                             ; preds = %1094
  br i1 %552, label %1101, label %1110

1101:                                             ; preds = %1110, %1100
  %1102 = phi i64 [ 1, %1100 ], [ %1122, %1110 ]
  br i1 %554, label %1108, label %1103

1103:                                             ; preds = %1101
  %1104 = shl nuw nsw i64 %1102, 1
  %1105 = add i64 %1104, %577
  %1106 = and i64 %1105, 4294967295
  %1107 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 %1106, i32 0
  store i8 %1088, i8* %1107, align 4
  br label %1108

1108:                                             ; preds = %1103, %1101, %1094
  br i1 %543, label %1109, label %1152

1109:                                             ; preds = %1108
  br i1 %556, label %1142, label %1125

1110:                                             ; preds = %1100, %1110
  %1111 = phi i64 [ %1122, %1110 ], [ 1, %1100 ]
  %1112 = phi i64 [ %1123, %1110 ], [ %553, %1100 ]
  %1113 = shl nuw nsw i64 %1111, 1
  %1114 = add i64 %1113, %577
  %1115 = and i64 %1114, 4294967295
  %1116 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 %1115, i32 0
  store i8 %1088, i8* %1116, align 4
  %1117 = shl nuw i64 %1111, 1
  %1118 = add i64 %1117, 2
  %1119 = add i64 %1118, %577
  %1120 = and i64 %1119, 4294967295
  %1121 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 %1120, i32 0
  store i8 %1088, i8* %1121, align 4
  %1122 = add nuw nsw i64 %1111, 2
  %1123 = add i64 %1112, -2
  %1124 = icmp eq i64 %1123, 0
  br i1 %1124, label %1101, label %1110

1125:                                             ; preds = %1109, %1125
  %1126 = phi i64 [ %1139, %1125 ], [ 1, %1109 ]
  %1127 = phi i64 [ %1140, %1125 ], [ %557, %1109 ]
  %1128 = add nuw nsw i64 %1126, %577
  %1129 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 %1128, i32 0
  store i8 %1088, i8* %1129, align 4
  %1130 = add nuw nsw i64 %1126, 1
  %1131 = add nuw nsw i64 %1130, %577
  %1132 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 %1131, i32 0
  store i8 %1088, i8* %1132, align 4
  %1133 = add nuw nsw i64 %1126, 2
  %1134 = add nuw nsw i64 %1133, %577
  %1135 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 %1134, i32 0
  store i8 %1088, i8* %1135, align 4
  %1136 = add nuw nsw i64 %1126, 3
  %1137 = add nuw nsw i64 %1136, %577
  %1138 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 %1137, i32 0
  store i8 %1088, i8* %1138, align 4
  %1139 = add nuw nsw i64 %1126, 4
  %1140 = add i64 %1127, -4
  %1141 = icmp eq i64 %1140, 0
  br i1 %1141, label %1142, label %1125

1142:                                             ; preds = %1125, %1109
  %1143 = phi i64 [ 1, %1109 ], [ %1139, %1125 ]
  br i1 %558, label %1152, label %1144

1144:                                             ; preds = %1142, %1144
  %1145 = phi i64 [ %1149, %1144 ], [ %1143, %1142 ]
  %1146 = phi i64 [ %1150, %1144 ], [ %555, %1142 ]
  %1147 = add nuw nsw i64 %1145, %577
  %1148 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 %1147, i32 0
  store i8 %1088, i8* %1148, align 4
  %1149 = add nuw nsw i64 %1145, 1
  %1150 = add i64 %1146, -1
  %1151 = icmp eq i64 %1150, 0
  br i1 %1151, label %1152, label %1144, !llvm.loop !4

1152:                                             ; preds = %1142, %1144, %1108
  %1153 = icmp slt i64 %1095, %5
  %1154 = add i64 %571, %516
  br i1 %1153, label %568, label %1175

1155:                                             ; preds = %568
  %1156 = add i64 %560, %501
  %1157 = icmp ult i64 %1156, 2
  br i1 %1157, label %559, label %1158

1158:                                             ; preds = %1155
  %1159 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 10, i64 3, i32 0
  %1160 = load i8, i8* %1159, align 4
  %1161 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %38, i64 0, i32 1
  store i8 %1160, i8* %1161, align 1
  %1162 = sext i32 %1096 to i64
  %1163 = load i32, i32* %531, align 4
  %1164 = sext i32 %1163 to i64
  %1165 = mul nsw i64 %1164, %1162
  %1166 = add nsw i64 %1165, 256
  %1167 = ashr i64 %1166, 9
  %1168 = load i32, i32* %532, align 8
  %1169 = zext i32 %1168 to i64
  %1170 = shl i64 %1097, %1169
  %1171 = add nsw i64 %1167, %1170
  %1172 = icmp slt i64 %1171, %5
  br i1 %1172, label %1173, label %1175

1173:                                             ; preds = %1158
  %1174 = zext i8 %3 to i64
  br label %1177

1175:                                             ; preds = %1087, %1152, %1158
  %1176 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 0
  store i32 2147483647, i32* %1176, align 8
  br label %1500

1177:                                             ; preds = %1173, %481
  %1178 = phi i64 [ %1174, %1173 ], [ %53, %481 ]
  %1179 = phi i32 [ %1096, %1173 ], [ %482, %481 ]
  %1180 = phi i32 [ %1098, %1173 ], [ %483, %481 ]
  %1181 = phi i32 [ 0, %1173 ], [ %484, %481 ]
  %1182 = phi i64 [ %1097, %1173 ], [ %485, %481 ]
  %1183 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %1184 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1183, align 8
  %1185 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1184, i64 0, i32 2
  %1186 = load i8, i8* %1185, align 2
  %1187 = zext i8 %1186 to i64
  %1188 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 1
  %1189 = load i32, i32* %1188, align 8
  %1190 = sext i32 %1189 to i64
  %1191 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 2
  %1192 = load i32, i32* %1191, align 4
  %1193 = sext i32 %1192 to i64
  %1194 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %1178, i64 %1187, i64 %1190, i64 %1193
  %1195 = load i8, i8* %1194, align 1
  %1196 = icmp ugt i8 %3, 3
  %1197 = select i1 %1196, i8 %3, i8 3
  %1198 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %1198, i8 0, i64 12, i1 false) #6
  %1199 = zext i8 %1195 to i64
  %1200 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 55, i64 %1199
  %1201 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 63
  %1202 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1
  %1203 = bitcast %struct.rdcost_block_args* %8 to i8*
  %1204 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 2, i64 0
  %1205 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 0
  %1206 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 1
  %1207 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 8
  %1208 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 10
  %1209 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 12
  %1210 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 13
  %1211 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 3, i64 0
  %1212 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 11
  %1213 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 9
  %1214 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 5
  %1215 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 4
  %1216 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2
  %1217 = bitcast %struct.rdcost_block_args* %9 to i8*
  %1218 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 2, i64 0
  %1219 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 0
  %1220 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 1
  %1221 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 8
  %1222 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 10
  %1223 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 12
  %1224 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 13
  %1225 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 3, i64 0
  %1226 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 11
  %1227 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 9
  %1228 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 5
  %1229 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %9, i64 0, i32 4
  %1230 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %1231 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %1232 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %1233 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 5
  %1234 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 7, i64 1, i64 2
  %1235 = bitcast i32** %1234 to i64*
  %1236 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 2
  %1237 = bitcast i32** %1236 to i64*
  %1238 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 8, i64 1, i64 2
  %1239 = bitcast i32** %1238 to i64*
  %1240 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 1
  %1241 = bitcast i32** %1240 to i64*
  %1242 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 9, i64 1, i64 2
  %1243 = bitcast i32** %1242 to i64*
  %1244 = bitcast %struct.macroblockd_plane* %1202 to i64*
  %1245 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 10, i64 1, i64 2
  %1246 = bitcast i16** %1245 to i64*
  %1247 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 3
  %1248 = bitcast i16** %1247 to i64*
  %1249 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 7, i64 1, i64 0
  %1250 = bitcast i32** %1249 to i64*
  %1251 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 8, i64 1, i64 0
  %1252 = bitcast i32** %1251 to i64*
  %1253 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 9, i64 1, i64 0
  %1254 = bitcast i32** %1253 to i64*
  %1255 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 10, i64 1, i64 0
  %1256 = bitcast i16** %1255 to i64*
  %1257 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 7, i64 2, i64 2
  %1258 = bitcast i32** %1257 to i64*
  %1259 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 2
  %1260 = bitcast i32** %1259 to i64*
  %1261 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 8, i64 2, i64 2
  %1262 = bitcast i32** %1261 to i64*
  %1263 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 1
  %1264 = bitcast i32** %1263 to i64*
  %1265 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 9, i64 2, i64 2
  %1266 = bitcast i32** %1265 to i64*
  %1267 = bitcast %struct.macroblockd_plane* %1216 to i64*
  %1268 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 10, i64 2, i64 2
  %1269 = bitcast i16** %1268 to i64*
  %1270 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 3
  %1271 = bitcast i16** %1270 to i64*
  %1272 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 7, i64 2, i64 0
  %1273 = bitcast i32** %1272 to i64*
  %1274 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 8, i64 2, i64 0
  %1275 = bitcast i32** %1274 to i64*
  %1276 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 9, i64 2, i64 0
  %1277 = bitcast i32** %1276 to i64*
  %1278 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 10, i64 2, i64 0
  %1279 = bitcast i16** %1278 to i64*
  br label %1280

1280:                                             ; preds = %1400, %1177
  %1281 = phi i32 [ 0, %1177 ], [ %1401, %1400 ]
  %1282 = phi i32 [ 0, %1177 ], [ %1402, %1400 ]
  %1283 = phi i32 [ 0, %1177 ], [ %1403, %1400 ]
  %1284 = phi i64 [ 0, %1177 ], [ %1404, %1400 ]
  %1285 = phi i64 [ 0, %1177 ], [ %1407, %1400 ]
  %1286 = phi i64 [ 9223372036854775807, %1177 ], [ %1406, %1400 ]
  %1287 = phi i8 [ 0, %1177 ], [ %1405, %1400 ]
  %1288 = trunc i64 %1285 to i32
  %1289 = load i32, i32* %1200, align 4
  %1290 = shl i32 1, %1288
  %1291 = and i32 %1289, %1290
  %1292 = icmp eq i32 %1291, 0
  br i1 %1292, label %1400, label %1293

1293:                                             ; preds = %1280
  %1294 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %1295 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1294, align 8
  %1296 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1295, i64 0, i32 6
  %1297 = trunc i64 %1285 to i8
  store i8 %1297, i8* %1296, align 2
  %1298 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %1299 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1298, align 8
  %1300 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1299, i64 0, i32 0
  %1301 = load i8, i8* %1300, align 4
  %1302 = zext i8 %1301 to i64
  %1303 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1299, i64 0, i32 2
  %1304 = load i8, i8* %1303, align 2
  %1305 = zext i8 %1304 to i64
  %1306 = load i32, i32* %1188, align 8
  %1307 = sext i32 %1306 to i64
  %1308 = load i32, i32* %1191, align 4
  %1309 = sext i32 %1308 to i64
  %1310 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %1302, i64 %1305, i64 %1307, i64 %1309
  %1311 = load i8, i8* %1310, align 1
  %1312 = lshr i64 %1286, 63
  %1313 = trunc i64 %1312 to i32
  %1314 = xor i32 %1313, 1
  %1315 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1299, i64 0, i32 8, i64 0
  %1316 = load i8, i8* %1315, align 4
  %1317 = icmp sgt i8 %1316, 0
  %1318 = icmp ne i32 %1314, 0
  %1319 = and i1 %1318, %1317
  br i1 %1319, label %1320, label %1321

1320:                                             ; preds = %1293
  call void @vp9_subtract_plane(%struct.macroblock* %1, i8 zeroext %1197, i32 1) #6
  call void @vp9_subtract_plane(%struct.macroblock* %1, i8 zeroext %1197, i32 2) #6
  br label %1321

1321:                                             ; preds = %1320, %1293
  %1322 = load i32, i32* %1201, align 4
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %1203) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1204, i8 0, i64 96, i1 false) #6
  store %struct.VP9_COMP* %0, %struct.VP9_COMP** %1205, align 8
  store %struct.macroblock* %1, %struct.macroblock** %1206, align 8
  store i64 %1286, i64* %1207, align 8
  store i32 %1322, i32* %1208, align 4
  store i8 1, i8* %1209, align 8
  store %struct.buf_2d* null, %struct.buf_2d** %1210, align 8
  call void @vp9_get_entropy_contexts(i8 zeroext %1197, i8 zeroext %1311, %struct.macroblockd_plane* %1202, i8* %1204, i8* %1211) #6
  %1323 = zext i8 %1311 to i64
  %1324 = getelementptr inbounds [4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 %1323
  store %struct.scan_order* %1324, %struct.scan_order** %1212, align 8
  call void @vp9_foreach_transformed_block_in_plane(%struct.macroblockd* %23, i8 zeroext %1197, i32 1, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @block_rd_txfm, i8* nonnull %1203) #6
  %1325 = load i32, i32* %1213, align 8
  %1326 = icmp eq i32 %1325, 0
  br i1 %1326, label %1328, label %1327

1327:                                             ; preds = %1321
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %1203) #6
  br label %1400

1328:                                             ; preds = %1321
  %1329 = load i64, i64* %1214, align 8
  %1330 = load i32, i32* %1215, align 8
  %1331 = load i8, i8* %1209, align 8
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %1203) #6
  %1332 = icmp eq i32 %1330, 2147483647
  br i1 %1332, label %1400, label %1333

1333:                                             ; preds = %1328
  %1334 = and i8 %1331, 1
  %1335 = load i32, i32* %1201, align 4
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %1217) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1218, i8 0, i64 96, i1 false) #6
  store %struct.VP9_COMP* %0, %struct.VP9_COMP** %1219, align 8
  store %struct.macroblock* %1, %struct.macroblock** %1220, align 8
  store i64 %1286, i64* %1221, align 8
  store i32 %1335, i32* %1222, align 4
  store i8 1, i8* %1223, align 8
  store %struct.buf_2d* null, %struct.buf_2d** %1224, align 8
  call void @vp9_get_entropy_contexts(i8 zeroext %1197, i8 zeroext %1311, %struct.macroblockd_plane* %1216, i8* %1218, i8* %1225) #6
  store %struct.scan_order* %1324, %struct.scan_order** %1226, align 8
  call void @vp9_foreach_transformed_block_in_plane(%struct.macroblockd* %23, i8 zeroext %1197, i32 2, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @block_rd_txfm, i8* nonnull %1217) #6
  %1336 = load i32, i32* %1227, align 8
  %1337 = icmp eq i32 %1336, 0
  br i1 %1337, label %1339, label %1338

1338:                                             ; preds = %1333
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %1217) #6
  br label %1400

1339:                                             ; preds = %1333
  %1340 = load i64, i64* %1228, align 8
  %1341 = load i32, i32* %1229, align 8
  %1342 = load i8, i8* %1223, align 8
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %1217) #6
  %1343 = icmp eq i32 %1341, 2147483647
  br i1 %1343, label %1400, label %1344

1344:                                             ; preds = %1339
  %1345 = add nsw i32 %1341, %1330
  %1346 = add nsw i64 %1340, %1329
  %1347 = and i8 %1334, %1342
  %1348 = zext i8 %1347 to i32
  %1349 = icmp eq i32 %1314, 0
  br i1 %1349, label %1400, label %1350

1350:                                             ; preds = %1344
  %1351 = load i32, i32* %1230, align 4
  %1352 = zext i32 %1351 to i64
  %1353 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %1354 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1353, align 8
  %1355 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1354, i64 0, i32 1
  %1356 = load i8, i8* %1355, align 1
  %1357 = zext i8 %1356 to i64
  %1358 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 112, i64 %1352, i64 %1357, i64 %1285
  %1359 = load i32, i32* %1358, align 4
  %1360 = add nsw i32 %1359, %1345
  %1361 = sext i32 %1360 to i64
  %1362 = load i32, i32* %1231, align 4
  %1363 = sext i32 %1362 to i64
  %1364 = mul nsw i64 %1361, %1363
  %1365 = add nsw i64 %1364, 256
  %1366 = ashr i64 %1365, 9
  %1367 = load i32, i32* %1232, align 8
  %1368 = zext i32 %1367 to i64
  %1369 = shl i64 %1346, %1368
  %1370 = add nsw i64 %1366, %1369
  %1371 = icmp slt i64 %1370, %1286
  br i1 %1371, label %1372, label %1400

1372:                                             ; preds = %1350
  %1373 = load i32, i32* %1233, align 4
  %1374 = icmp eq i32 %1373, 0
  br i1 %1374, label %1375, label %1400

1375:                                             ; preds = %1372
  %1376 = load i64, i64* %1235, align 8
  store i64 %1376, i64* %1237, align 8
  %1377 = load i64, i64* %1239, align 8
  store i64 %1377, i64* %1241, align 16
  %1378 = load i64, i64* %1243, align 8
  store i64 %1378, i64* %1244, align 8
  %1379 = load i64, i64* %1246, align 8
  store i64 %1379, i64* %1248, align 16
  %1380 = load i64, i64* %1250, align 8
  store i64 %1380, i64* %1235, align 8
  %1381 = load i64, i64* %1252, align 8
  store i64 %1381, i64* %1239, align 8
  %1382 = load i64, i64* %1254, align 8
  store i64 %1382, i64* %1243, align 8
  %1383 = load i64, i64* %1256, align 8
  store i64 %1383, i64* %1246, align 8
  %1384 = load i64, i64* %1237, align 8
  store i64 %1384, i64* %1250, align 8
  %1385 = load i64, i64* %1241, align 16
  store i64 %1385, i64* %1252, align 8
  %1386 = load i64, i64* %1244, align 8
  store i64 %1386, i64* %1254, align 8
  %1387 = load i64, i64* %1248, align 16
  store i64 %1387, i64* %1256, align 8
  %1388 = load i64, i64* %1258, align 8
  store i64 %1388, i64* %1260, align 8
  %1389 = load i64, i64* %1262, align 8
  store i64 %1389, i64* %1264, align 16
  %1390 = load i64, i64* %1266, align 8
  store i64 %1390, i64* %1267, align 8
  %1391 = load i64, i64* %1269, align 8
  store i64 %1391, i64* %1271, align 16
  %1392 = load i64, i64* %1273, align 8
  store i64 %1392, i64* %1258, align 8
  %1393 = load i64, i64* %1275, align 8
  store i64 %1393, i64* %1262, align 8
  %1394 = load i64, i64* %1277, align 8
  store i64 %1394, i64* %1266, align 8
  %1395 = load i64, i64* %1279, align 8
  store i64 %1395, i64* %1269, align 8
  %1396 = load i64, i64* %1260, align 8
  store i64 %1396, i64* %1273, align 8
  %1397 = load i64, i64* %1264, align 16
  store i64 %1397, i64* %1275, align 8
  %1398 = load i64, i64* %1267, align 8
  store i64 %1398, i64* %1277, align 8
  %1399 = load i64, i64* %1271, align 16
  store i64 %1399, i64* %1279, align 8
  br label %1400

1400:                                             ; preds = %1375, %1372, %1350, %1344, %1339, %1338, %1328, %1327, %1280
  %1401 = phi i32 [ %1281, %1280 ], [ %1281, %1328 ], [ %1281, %1339 ], [ %1281, %1344 ], [ %1360, %1375 ], [ %1360, %1372 ], [ %1281, %1350 ], [ %1281, %1338 ], [ %1281, %1327 ]
  %1402 = phi i32 [ %1282, %1280 ], [ %1282, %1328 ], [ %1282, %1339 ], [ %1282, %1344 ], [ %1345, %1375 ], [ %1345, %1372 ], [ %1282, %1350 ], [ %1282, %1338 ], [ %1282, %1327 ]
  %1403 = phi i32 [ %1283, %1280 ], [ %1283, %1328 ], [ %1283, %1339 ], [ %1283, %1344 ], [ %1348, %1375 ], [ %1348, %1372 ], [ %1283, %1350 ], [ %1283, %1338 ], [ %1283, %1327 ]
  %1404 = phi i64 [ %1284, %1280 ], [ %1284, %1328 ], [ %1284, %1339 ], [ %1284, %1344 ], [ %1346, %1375 ], [ %1346, %1372 ], [ %1284, %1350 ], [ %1284, %1338 ], [ %1284, %1327 ]
  %1405 = phi i8 [ %1287, %1280 ], [ %1287, %1328 ], [ %1287, %1339 ], [ %1287, %1344 ], [ %1297, %1375 ], [ %1297, %1372 ], [ %1287, %1350 ], [ %1287, %1338 ], [ %1287, %1327 ]
  %1406 = phi i64 [ %1286, %1280 ], [ %1286, %1328 ], [ %1286, %1339 ], [ %1286, %1344 ], [ %1370, %1375 ], [ %1370, %1372 ], [ %1286, %1350 ], [ %1286, %1338 ], [ %1286, %1327 ]
  %1407 = add nuw nsw i64 %1285, 1
  %1408 = icmp eq i64 %1407, 10
  br i1 %1408, label %1409, label %1280

1409:                                             ; preds = %1400
  %1410 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %26, align 8
  %1411 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1410, align 8
  %1412 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1411, i64 0, i32 6
  store i8 %1405, i8* %1412, align 2
  %1413 = icmp ne i32 %1181, 0
  %1414 = icmp ne i32 %1403, 0
  %1415 = and i1 %1413, %1414
  %1416 = add nsw i32 %1401, %1179
  br i1 %1415, label %1417, label %1443

1417:                                             ; preds = %1409
  %1418 = sub i32 %1416, %1180
  %1419 = sub i32 %1418, %1402
  %1420 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 73
  %1421 = load %struct.frame_contexts*, %struct.frame_contexts** %1420, align 8
  %1422 = load %struct.MODE_INFO*, %struct.MODE_INFO** %39, align 8
  %1423 = load %struct.MODE_INFO*, %struct.MODE_INFO** %41, align 8
  %1424 = icmp eq %struct.MODE_INFO* %1422, null
  br i1 %1424, label %1429, label %1425

1425:                                             ; preds = %1417
  %1426 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1422, i64 0, i32 3
  %1427 = load i8, i8* %1426, align 1
  %1428 = sext i8 %1427 to i64
  br label %1429

1429:                                             ; preds = %1425, %1417
  %1430 = phi i64 [ %1428, %1425 ], [ 0, %1417 ]
  %1431 = icmp eq %struct.MODE_INFO* %1423, null
  br i1 %1431, label %1436, label %1432

1432:                                             ; preds = %1429
  %1433 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1423, i64 0, i32 3
  %1434 = load i8, i8* %1433, align 1
  %1435 = sext i8 %1434 to i64
  br label %1436

1436:                                             ; preds = %1429, %1432
  %1437 = phi i64 [ %1435, %1432 ], [ 0, %1429 ]
  %1438 = add nsw i64 %1437, %1430
  %1439 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1421, i64 0, i32 11, i64 %1438
  %1440 = load i8, i8* %1439, align 1
  %1441 = zext i8 %1440 to i64
  %1442 = sub nuw nsw i64 256, %1441
  br label %1466

1443:                                             ; preds = %1409
  %1444 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 73
  %1445 = load %struct.frame_contexts*, %struct.frame_contexts** %1444, align 8
  %1446 = load %struct.MODE_INFO*, %struct.MODE_INFO** %39, align 8
  %1447 = load %struct.MODE_INFO*, %struct.MODE_INFO** %41, align 8
  %1448 = icmp eq %struct.MODE_INFO* %1446, null
  br i1 %1448, label %1453, label %1449

1449:                                             ; preds = %1443
  %1450 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1446, i64 0, i32 3
  %1451 = load i8, i8* %1450, align 1
  %1452 = sext i8 %1451 to i64
  br label %1453

1453:                                             ; preds = %1449, %1443
  %1454 = phi i64 [ %1452, %1449 ], [ 0, %1443 ]
  %1455 = icmp eq %struct.MODE_INFO* %1447, null
  br i1 %1455, label %1460, label %1456

1456:                                             ; preds = %1453
  %1457 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1447, i64 0, i32 3
  %1458 = load i8, i8* %1457, align 1
  %1459 = sext i8 %1458 to i64
  br label %1460

1460:                                             ; preds = %1453, %1456
  %1461 = phi i64 [ %1459, %1456 ], [ 0, %1453 ]
  %1462 = add nsw i64 %1461, %1454
  %1463 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1445, i64 0, i32 11, i64 %1462
  %1464 = load i8, i8* %1463, align 1
  %1465 = zext i8 %1464 to i64
  br label %1466

1466:                                             ; preds = %1460, %1436
  %1467 = phi i64 [ %1465, %1460 ], [ %1442, %1436 ]
  %1468 = phi i32 [ %1416, %1460 ], [ %1419, %1436 ]
  %1469 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %1467
  %1470 = load i16, i16* %1469, align 2
  %1471 = zext i16 %1470 to i32
  %1472 = add nsw i32 %1468, %1471
  %1473 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 0
  store i32 %1472, i32* %1473, align 8
  %1474 = add nsw i64 %1404, %1182
  %1475 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 1
  store i64 %1474, i64* %1475, align 8
  %1476 = bitcast %struct.MODE_INFO*** %26 to i8***
  %1477 = load i8**, i8*** %1476, align 8
  %1478 = load i8*, i8** %1477, align 8
  %1479 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1479, i8* align 4 %1478, i64 68, i1 false)
  %1480 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %4, i64 0, i32 1
  %1481 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %1482 = bitcast %struct.MB_MODE_INFO_EXT** %1481 to i8**
  %1483 = load i8*, i8** %1482, align 16
  %1484 = bitcast %struct.MB_MODE_INFO_EXT* %1480 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1484, i8* align 4 %1483, i64 36, i1 false)
  %1485 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 0
  %1486 = load i32, i32* %1485, align 8
  %1487 = sext i32 %1486 to i64
  %1488 = load i32, i32* %1231, align 4
  %1489 = sext i32 %1488 to i64
  %1490 = mul nsw i64 %1489, %1487
  %1491 = add nsw i64 %1490, 256
  %1492 = ashr i64 %1491, 9
  %1493 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 1
  %1494 = load i64, i64* %1493, align 8
  %1495 = load i32, i32* %1232, align 8
  %1496 = zext i32 %1495 to i64
  %1497 = shl i64 %1494, %1496
  %1498 = add nsw i64 %1492, %1497
  %1499 = getelementptr inbounds %struct.RD_COST, %struct.RD_COST* %2, i64 0, i32 2
  store i64 %1498, i64* %1499, align 8
  br label %1500

1500:                                             ; preds = %1466, %1175, %490
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp9_internal_image_edge(%struct.VP9_COMP* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 2
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 3, i32 14
  %7 = load double, double* %6, align 8
  %8 = fcmp ogt double %7, 0.000000e+00
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 3, i32 15
  %11 = load double, double* %10, align 8
  %12 = fcmp ogt double %11, 0.000000e+00
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %5, %9, %1
  %15 = phi i32 [ 0, %1 ], [ 1, %5 ], [ %13, %9 ]
  ret i32 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp9_active_h_edge(%struct.VP9_COMP* nocapture readonly, i32, i32) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %5 = load i32, i32* %4, align 16
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %17

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 3, i32 14
  %11 = load double, double* %10, align 8
  %12 = fmul double %11, 2.000000e+00
  %13 = fptosi double %12 to i32
  %14 = sub nsw i32 %5, %13
  %15 = icmp slt i32 %14, %13
  %16 = select i1 %15, i32 %13, i32 %14
  br label %17

17:                                               ; preds = %9, %3
  %18 = phi i32 [ %16, %9 ], [ %5, %3 ]
  %19 = phi i32 [ %13, %9 ], [ 0, %3 ]
  %20 = icmp sge i32 %19, %1
  %21 = add nsw i32 %2, %1
  %22 = icmp slt i32 %19, %21
  %23 = and i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = icmp sge i32 %18, %1
  %26 = icmp slt i32 %18, %21
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %24, %17
  br label %29

29:                                               ; preds = %24, %28
  %30 = phi i32 [ 1, %28 ], [ 0, %24 ]
  ret i32 %30
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp9_active_v_edge(%struct.VP9_COMP* nocapture readonly, i32, i32) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %17

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 3, i32 15
  %11 = load double, double* %10, align 8
  %12 = fmul double %11, 2.000000e+00
  %13 = fptosi double %12 to i32
  %14 = sub nsw i32 %5, %13
  %15 = icmp slt i32 %14, %13
  %16 = select i1 %15, i32 %13, i32 %14
  br label %17

17:                                               ; preds = %9, %3
  %18 = phi i32 [ %16, %9 ], [ %5, %3 ]
  %19 = phi i32 [ %13, %9 ], [ 0, %3 ]
  %20 = icmp sge i32 %19, %1
  %21 = add nsw i32 %2, %1
  %22 = icmp slt i32 %19, %21
  %23 = and i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = icmp sge i32 %18, %1
  %26 = icmp slt i32 %18, %21
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %24, %17
  br label %29

29:                                               ; preds = %24, %28
  %30 = phi i32 [ 1, %28 ], [ 0, %24 ]
  ret i32 %30
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp9_active_edge_sb(%struct.VP9_COMP* nocapture readonly, i32, i32) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %5 = load i32, i32* %4, align 16
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %17

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 3, i32 14
  %11 = load double, double* %10, align 8
  %12 = fmul double %11, 2.000000e+00
  %13 = fptosi double %12 to i32
  %14 = sub nsw i32 %5, %13
  %15 = icmp slt i32 %14, %13
  %16 = select i1 %15, i32 %13, i32 %14
  br label %17

17:                                               ; preds = %9, %3
  %18 = phi i32 [ %16, %9 ], [ %5, %3 ]
  %19 = phi i32 [ %13, %9 ], [ 0, %3 ]
  %20 = icmp sge i32 %19, %1
  %21 = add nsw i32 %1, 8
  %22 = icmp slt i32 %19, %21
  %23 = and i1 %20, %22
  br i1 %23, label %51, label %24

24:                                               ; preds = %17
  %25 = icmp sge i32 %18, %1
  %26 = icmp slt i32 %18, %21
  %27 = and i1 %25, %26
  br i1 %27, label %51, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %30 = load i32, i32* %29, align 8
  br i1 %8, label %31, label %39

31:                                               ; preds = %28
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 94, i32 3, i32 15
  %33 = load double, double* %32, align 8
  %34 = fmul double %33, 2.000000e+00
  %35 = fptosi double %34 to i32
  %36 = sub nsw i32 %30, %35
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %37, i32 %35, i32 %36
  br label %39

39:                                               ; preds = %31, %28
  %40 = phi i32 [ %38, %31 ], [ %30, %28 ]
  %41 = phi i32 [ %35, %31 ], [ 0, %28 ]
  %42 = icmp sge i32 %41, %2
  %43 = add nsw i32 %2, 8
  %44 = icmp slt i32 %41, %43
  %45 = and i1 %42, %44
  br i1 %45, label %50, label %46

46:                                               ; preds = %39
  %47 = icmp sge i32 %40, %2
  %48 = icmp slt i32 %40, %43
  %49 = and i1 %47, %48
  br i1 %49, label %50, label %51

50:                                               ; preds = %46, %39
  br label %51

51:                                               ; preds = %50, %46, %24, %17
  %52 = phi i32 [ 1, %17 ], [ 1, %24 ], [ 1, %50 ], [ 0, %46 ]
  ret i32 %52
}

declare zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO*, %struct.MODE_INFO*, i32) local_unnamed_addr #4

declare zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO*, %struct.MODE_INFO*, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vp9_get_entropy_contexts(i8 zeroext, i8 zeroext, %struct.macroblockd_plane*, i8*, i8*) local_unnamed_addr #4

declare void @vp9_foreach_transformed_block_in_plane(%struct.macroblockd*, i8 zeroext, i32, void (i32, i32, i32, i32, i8, i8, i8*)*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @block_rd_txfm(i32, i32, i32, i32, i8 zeroext, i8 zeroext, i8*) #3 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.encode_b_args, align 8
  %11 = getelementptr inbounds i8, i8* %6, i64 8
  %12 = bitcast i8* %11 to %struct.macroblock**
  %13 = load %struct.macroblock*, %struct.macroblock** %12, align 8
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 6
  %16 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %15, align 8
  %17 = load %struct.MODE_INFO*, %struct.MODE_INFO** %16, align 8
  %18 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6
  store i64 -6148914691236517206, i64* %8, align 8
  %19 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #6
  store i64 -6148914691236517206, i64* %9, align 8
  %20 = getelementptr inbounds i8, i8* %6, i64 32
  %21 = sext i32 %2 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %6, i64 16
  %25 = sext i32 %3 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = icmp ne i8 %23, 0
  %29 = zext i1 %28 to i32
  %30 = icmp ne i8 %27, 0
  %31 = zext i1 %30 to i32
  %32 = add nuw nsw i32 %31, %29
  %33 = getelementptr inbounds i8, i8* %6, i64 112
  %34 = bitcast i8* %33 to %struct.buf_2d**
  %35 = load %struct.buf_2d*, %struct.buf_2d** %34, align 8
  %36 = zext i8 %5 to i64
  %37 = getelementptr inbounds [4 x i8], [4 x i8]* @txsize_to_bsize, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = sext i32 %0 to i64
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 0, i64 %39
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 0, i64 %39, i32 3, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 0, i64 %39, i32 3, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = mul nsw i32 %42, %2
  %46 = add nsw i32 %45, %3
  %47 = shl nsw i32 %46, 2
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %44, i64 %48
  %50 = getelementptr inbounds i8, i8* %6, i64 88
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %395

54:                                               ; preds = %7
  %55 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 0
  %56 = load i8, i8* %55, align 4
  %57 = icmp slt i8 %56, 1
  br i1 %57, label %58, label %201

58:                                               ; preds = %54
  %59 = bitcast %struct.encode_b_args* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %59) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 16, i1 false)
  %60 = getelementptr inbounds %struct.encode_b_args, %struct.encode_b_args* %10, i64 0, i32 0
  store %struct.macroblock* %13, %struct.macroblock** %60, align 8
  %61 = getelementptr inbounds %struct.encode_b_args, %struct.encode_b_args* %10, i64 0, i32 1
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 9
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %61, align 8
  %64 = getelementptr inbounds %struct.encode_b_args, %struct.encode_b_args* %10, i64 0, i32 2
  store i8* %24, i8** %64, align 8
  %65 = getelementptr inbounds %struct.encode_b_args, %struct.encode_b_args* %10, i64 0, i32 3
  store i8* %20, i8** %65, align 8
  %66 = getelementptr inbounds %struct.encode_b_args, %struct.encode_b_args* %10, i64 0, i32 4
  %67 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 3
  store i8* %67, i8** %66, align 8
  call void @vp9_encode_block_intra(i32 %0, i32 %1, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %5, i8* nonnull %59) #6
  %68 = icmp eq %struct.buf_2d* %35, null
  br i1 %68, label %79, label %69

69:                                               ; preds = %58
  %70 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %35, i64 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %35, i64 0, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = mul nsw i32 %73, %2
  %75 = add nsw i32 %74, %3
  %76 = shl nsw i32 %75, 2
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %71, i64 %77
  call fastcc void @copy_block_visible(%struct.macroblockd* %14, %struct.macroblockd_plane* %40, i8* %49, i32 %42, i8* %78, i32 %73, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %38)
  br label %79

79:                                               ; preds = %58, %69
  %80 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 10
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %79
  %84 = bitcast i8* %6 to %struct.VP9_COMP**
  %85 = load %struct.VP9_COMP*, %struct.VP9_COMP** %84, align 8
  call fastcc void @dist_block(%struct.VP9_COMP* %85, %struct.macroblock* %13, i32 %0, i8 zeroext %4, i32 %1, i32 %2, i32 %3, i8 zeroext %5, i64* nonnull %8, i64* nonnull %9, %struct.buf_2d* null)
  br label %200

86:                                               ; preds = %79
  %87 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 0, i64 %39, i32 4, i32 1
  %88 = load i32, i32* %87, align 8
  %89 = zext i8 %4 to i64
  %90 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = shl nuw nsw i32 %92, 2
  %94 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 0, i64 %39, i32 4, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = mul nsw i32 %88, %2
  %97 = add nsw i32 %96, %3
  %98 = shl nsw i32 %97, 2
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %95, i64 %99
  %101 = mul nsw i32 %93, %2
  %102 = add nsw i32 %101, %3
  %103 = shl nsw i32 %102, 2
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 0, i64 %39, i32 0, i64 %104
  %106 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %89
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = zext i8 %38 to i64
  %110 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %109
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 13
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 0, i64 %39, i32 1
  %119 = load i32, i32* %118, align 8
  %120 = add nsw i32 %119, 5
  %121 = ashr i32 %117, %120
  %122 = sub i32 %92, %3
  %123 = add i32 %121, %122
  %124 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 15
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 0, i64 %39, i32 2
  %127 = load i32, i32* %126, align 4
  %128 = add nsw i32 %127, 5
  %129 = ashr i32 %125, %128
  %130 = sub i32 %108, %2
  %131 = add i32 %129, %130
  %132 = icmp eq i8 %38, 0
  br i1 %132, label %137, label %133

133:                                              ; preds = %86
  %134 = icmp slt i32 %123, %112
  %135 = icmp slt i32 %131, %115
  %136 = or i1 %134, %135
  br i1 %136, label %140, label %137

137:                                              ; preds = %133, %86
  %138 = shl nuw nsw i32 %112, 2
  %139 = call i64 @vpx_sum_squares_2d_i16_sse2(i16* %105, i32 %93, i32 %138) #6
  br label %171

140:                                              ; preds = %133
  %141 = select i1 %135, i32 %131, i32 %115
  %142 = select i1 %134, i32 %123, i32 %112
  %143 = icmp sgt i32 %141, 0
  br i1 %143, label %144, label %171

144:                                              ; preds = %140
  %145 = icmp sgt i32 %142, 0
  %146 = shl nuw nsw i32 %92, 4
  %147 = sext i32 %142 to i64
  %148 = sext i32 %141 to i64
  br label %149

149:                                              ; preds = %167, %144
  %150 = phi i64 [ 0, %144 ], [ %169, %167 ]
  %151 = phi i64 [ 0, %144 ], [ %168, %167 ]
  br i1 %145, label %152, label %167

152:                                              ; preds = %149
  %153 = trunc i64 %150 to i32
  %154 = mul i32 %146, %153
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i16, i16* %105, i64 %155
  br label %157

157:                                              ; preds = %157, %152
  %158 = phi i64 [ 0, %152 ], [ %165, %157 ]
  %159 = phi i64 [ %151, %152 ], [ %164, %157 ]
  %160 = shl i64 %158, 2
  %161 = and i64 %160, 4294967292
  %162 = getelementptr inbounds i16, i16* %156, i64 %161
  %163 = call i64 @vpx_sum_squares_2d_i16_sse2(i16* %162, i32 %93, i32 4) #6
  %164 = add nsw i64 %163, %159
  %165 = add nuw nsw i64 %158, 1
  %166 = icmp slt i64 %165, %147
  br i1 %166, label %157, label %167

167:                                              ; preds = %157, %149
  %168 = phi i64 [ %151, %149 ], [ %164, %157 ]
  %169 = add nuw nsw i64 %150, 1
  %170 = icmp slt i64 %169, %148
  br i1 %170, label %149, label %171

171:                                              ; preds = %167, %137, %140
  %172 = phi i64 [ %139, %137 ], [ 0, %140 ], [ %168, %167 ]
  store i64 %172, i64* %9, align 8
  %173 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 18
  %174 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %173, align 8
  %175 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %174, i64 0, i32 29
  %176 = load i32, i32* %175, align 8
  %177 = and i32 %176, 8
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %192, label %179

179:                                              ; preds = %171
  %180 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 23
  %181 = load i32, i32* %180, align 8
  %182 = icmp sgt i32 %181, 8
  br i1 %182, label %183, label %192

183:                                              ; preds = %179
  %184 = shl i32 %181, 1
  %185 = add i32 %184, -16
  %186 = add i32 %184, -17
  %187 = zext i32 %186 to i64
  %188 = shl i64 1, %187
  %189 = add i64 %188, %172
  %190 = zext i32 %185 to i64
  %191 = lshr i64 %189, %190
  store i64 %191, i64* %9, align 8
  br label %192

192:                                              ; preds = %171, %183, %179
  %193 = phi i64 [ %172, %171 ], [ %191, %183 ], [ %172, %179 ]
  %194 = shl nsw i64 %193, 4
  store i64 %194, i64* %9, align 8
  %195 = bitcast i8* %6 to %struct.VP9_COMP**
  %196 = load %struct.VP9_COMP*, %struct.VP9_COMP** %195, align 8
  %197 = call fastcc i32 @pixel_sse(%struct.VP9_COMP* %196, %struct.macroblockd* %14, %struct.macroblockd_plane* %40, i8* %100, i32 %88, i8* %49, i32 %42, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %38)
  %198 = zext i32 %197 to i64
  %199 = shl nuw nsw i64 %198, 4
  store i64 %199, i64* %8, align 8
  br label %200

200:                                              ; preds = %192, %83
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %59) #6
  br label %287

201:                                              ; preds = %54
  %202 = zext i8 %4 to i64
  %203 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = icmp eq i8 %204, %5
  br i1 %205, label %206, label %220

206:                                              ; preds = %201
  %207 = zext i8 %5 to i32
  %208 = shl i32 %0, 2
  %209 = shl nuw nsw i32 %207, 1
  %210 = ashr i32 %1, %209
  %211 = add nsw i32 %210, %208
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 47, i64 %212
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %220, label %216

216:                                              ; preds = %206
  %217 = icmp ne %struct.buf_2d* %35, null
  %218 = icmp eq i8 %214, 2
  %219 = and i1 %217, %218
  br i1 %219, label %220, label %229

220:                                              ; preds = %201, %216, %206
  tail call void @vp9_xform_quant(%struct.macroblock* %13, i32 %0, i32 %1, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %5) #6
  %221 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 9
  %222 = load i32, i32* %221, align 4
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %226, label %224

224:                                              ; preds = %220
  %225 = tail call i32 @vp9_optimize_b(%struct.macroblock* %13, i32 %0, i32 %1, i8 zeroext %5, i32 %32) #6
  br label %226

226:                                              ; preds = %220, %224
  %227 = bitcast i8* %6 to %struct.VP9_COMP**
  %228 = load %struct.VP9_COMP*, %struct.VP9_COMP** %227, align 8
  call fastcc void @dist_block(%struct.VP9_COMP* %228, %struct.macroblock* %13, i32 %0, i8 zeroext %4, i32 %1, i32 %2, i32 %3, i8 zeroext %5, i64* nonnull %8, i64* nonnull %9, %struct.buf_2d* %35)
  br label %287

229:                                              ; preds = %216
  br i1 %218, label %230, label %269

230:                                              ; preds = %229
  %231 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 0, i64 %39, i32 2
  %232 = load i32*, i32** %231, align 8
  %233 = shl nsw i32 %1, 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %40, i64 0, i32 0
  %236 = load i32*, i32** %235, align 8
  tail call void @vp9_xform_quant_dc(%struct.macroblock* %13, i32 %0, i32 %1, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %5) #6
  %237 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 48, i64 %212
  %238 = load i64, i64* %237, align 8
  %239 = shl i64 %238, 4
  store i64 %239, i64* %9, align 8
  store i64 %239, i64* %8, align 8
  %240 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 0, i64 %39, i32 3
  %241 = load i16*, i16** %240, align 16
  %242 = sext i32 %1 to i64
  %243 = getelementptr inbounds i16, i16* %241, i64 %242
  %244 = load i16, i16* %243, align 2
  %245 = icmp eq i16 %244, 0
  br i1 %245, label %287, label %246

246:                                              ; preds = %230
  %247 = getelementptr inbounds i32, i32* %236, i64 %234
  %248 = getelementptr inbounds i32, i32* %232, i64 %234
  %249 = load i32, i32* %248, align 4
  %250 = sext i32 %249 to i64
  %251 = mul nsw i64 %250, %250
  %252 = load i32, i32* %247, align 4
  %253 = sub nsw i32 %249, %252
  %254 = sext i32 %253 to i64
  %255 = mul nsw i64 %254, %254
  %256 = sub nsw i64 %251, %255
  %257 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 23
  %258 = load i32, i32* %257, align 8
  %259 = shl i32 %258, 1
  %260 = add i32 %259, -16
  %261 = zext i32 %260 to i64
  %262 = ashr i64 %256, %261
  %263 = icmp eq i8 %5, 3
  %264 = ashr i64 %262, 2
  %265 = select i1 %263, i64 %262, i64 %264
  %266 = sub nsw i64 %239, %265
  %267 = icmp sgt i64 %266, 0
  %268 = select i1 %267, i64 %266, i64 0
  store i64 %268, i64* %8, align 8
  br label %287

269:                                              ; preds = %229
  %270 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 0, i64 %39, i32 3
  %271 = load i16*, i16** %270, align 16
  %272 = sext i32 %1 to i64
  %273 = getelementptr inbounds i16, i16* %271, i64 %272
  store i16 0, i16* %273, align 2
  %274 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 48, i64 %212
  %275 = load i64, i64* %274, align 8
  %276 = shl i64 %275, 4
  store i64 %276, i64* %9, align 8
  store i64 %276, i64* %8, align 8
  br i1 %217, label %277, label %287

277:                                              ; preds = %269
  %278 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %35, i64 0, i32 0
  %279 = load i8*, i8** %278, align 8
  %280 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %35, i64 0, i32 1
  %281 = load i32, i32* %280, align 8
  %282 = mul nsw i32 %281, %2
  %283 = add nsw i32 %282, %3
  %284 = shl nsw i32 %283, 2
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i8, i8* %279, i64 %285
  tail call fastcc void @copy_block_visible(%struct.macroblockd* %14, %struct.macroblockd_plane* %40, i8* %49, i32 %42, i8* %286, i32 %281, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %38)
  br label %287

287:                                              ; preds = %226, %269, %277, %230, %246, %200
  %288 = load i64, i64* %8, align 8
  %289 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 14
  %290 = load i32, i32* %289, align 8
  %291 = zext i32 %290 to i64
  %292 = shl i64 %288, %291
  %293 = getelementptr inbounds i8, i8* %6, i64 72
  %294 = bitcast i8* %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = add nsw i64 %292, %295
  %297 = getelementptr inbounds i8, i8* %6, i64 80
  %298 = bitcast i8* %297 to i64*
  %299 = load i64, i64* %298, align 8
  %300 = icmp sgt i64 %296, %299
  br i1 %300, label %301, label %302

301:                                              ; preds = %287
  store i32 1, i32* %51, align 8
  br label %395

302:                                              ; preds = %287
  %303 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 15
  %304 = load %struct.macroblock*, %struct.macroblock** %12, align 8
  %305 = getelementptr inbounds i8, i8* %6, i64 96
  %306 = bitcast i8* %305 to %struct.scan_order**
  %307 = load %struct.scan_order*, %struct.scan_order** %306, align 8
  %308 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %307, i64 0, i32 0
  %309 = load i16*, i16** %308, align 8
  %310 = getelementptr inbounds %struct.scan_order, %struct.scan_order* %307, i64 0, i32 2
  %311 = load i16*, i16** %310, align 8
  %312 = getelementptr inbounds i8, i8* %6, i64 92
  %313 = bitcast i8* %312 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = call fastcc i32 @cost_coeffs(%struct.macroblock* %304, i32 %0, i32 %1, i8 zeroext %5, i32 %32, i16* %309, i16* %311, i32 %314) #6
  %316 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 0, i64 %39, i32 3
  %317 = load i16*, i16** %316, align 16
  %318 = sext i32 %1 to i64
  %319 = getelementptr inbounds i16, i16* %317, i64 %318
  %320 = load i16, i16* %319, align 2
  %321 = icmp ne i16 %320, 0
  %322 = zext i1 %321 to i8
  store i8 %322, i8* %26, align 1
  %323 = load i16*, i16** %316, align 16
  %324 = getelementptr inbounds i16, i16* %323, i64 %318
  %325 = load i16, i16* %324, align 2
  %326 = icmp ne i16 %325, 0
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %22, align 1
  %328 = sext i32 %315 to i64
  %329 = load i32, i32* %303, align 4
  %330 = sext i32 %329 to i64
  %331 = mul nsw i64 %330, %328
  %332 = add nsw i64 %331, 256
  %333 = ashr i64 %332, 9
  %334 = load i32, i32* %289, align 8
  %335 = zext i32 %334 to i64
  %336 = shl i64 %288, %335
  %337 = add nsw i64 %333, %336
  %338 = load i64, i64* %9, align 8
  %339 = shl i64 %338, %335
  %340 = icmp slt i64 %337, %339
  %341 = select i1 %340, i64 %337, i64 %339
  %342 = icmp eq i32 %0, 0
  br i1 %342, label %343, label %369

343:                                              ; preds = %302
  %344 = load i16*, i16** %316, align 16
  %345 = getelementptr inbounds i16, i16* %344, i64 %318
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 0
  br i1 %347, label %359, label %348

348:                                              ; preds = %343
  %349 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 34
  %350 = load i32, i32* %349, align 8
  %351 = icmp eq i32 %350, 0
  %352 = icmp sgt i64 %337, %339
  %353 = and i1 %352, %351
  br i1 %353, label %354, label %359

354:                                              ; preds = %348
  %355 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 1, i32 24
  %356 = load i32, i32* %355, align 4
  %357 = icmp eq i32 %356, 0
  %358 = zext i1 %357 to i8
  br label %359

359:                                              ; preds = %343, %348, %354
  %360 = phi i8 [ 1, %343 ], [ 0, %348 ], [ %358, %354 ]
  %361 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 37, i64 %36, i64 %318
  store i8 %360, i8* %361, align 1
  %362 = load i16*, i16** %316, align 16
  %363 = getelementptr inbounds i16, i16* %362, i64 %318
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %13, i64 0, i32 38, i64 %36
  %367 = load i32, i32* %366, align 4
  %368 = add nsw i32 %367, %365
  store i32 %368, i32* %366, align 4
  br label %369

369:                                              ; preds = %359, %302
  %370 = getelementptr inbounds i8, i8* %6, i64 48
  %371 = bitcast i8* %370 to i32*
  %372 = load i32, i32* %371, align 8
  %373 = add nsw i32 %372, %315
  store i32 %373, i32* %371, align 8
  %374 = getelementptr inbounds i8, i8* %6, i64 56
  %375 = bitcast i8* %374 to <2 x i64>*
  %376 = load <2 x i64>, <2 x i64>* %375, align 8
  %377 = insertelement <2 x i64> undef, i64 %288, i32 0
  %378 = insertelement <2 x i64> %377, i64 %338, i32 1
  %379 = add nsw <2 x i64> %376, %378
  %380 = bitcast i8* %374 to <2 x i64>*
  store <2 x i64> %379, <2 x i64>* %380, align 8
  %381 = load i64, i64* %294, align 8
  %382 = add nsw i64 %381, %341
  store i64 %382, i64* %294, align 8
  %383 = load i64, i64* %298, align 8
  %384 = icmp sgt i64 %382, %383
  br i1 %384, label %385, label %386

385:                                              ; preds = %369
  store i32 1, i32* %51, align 8
  br label %395

386:                                              ; preds = %369
  %387 = load i16*, i16** %316, align 16
  %388 = getelementptr inbounds i16, i16* %387, i64 %318
  %389 = load i16, i16* %388, align 2
  %390 = icmp eq i16 %389, 0
  %391 = zext i1 %390 to i8
  %392 = getelementptr inbounds i8, i8* %6, i64 104
  %393 = load i8, i8* %392, align 8
  %394 = and i8 %393, %391
  store i8 %394, i8* %392, align 8
  br label %395

395:                                              ; preds = %7, %386, %385, %301
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  ret void
}

declare void @vp9_encode_block_intra(i32, i32, i32, i32, i8 zeroext, i8 zeroext, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @copy_block_visible(%struct.macroblockd* nocapture readonly, %struct.macroblockd_plane* nocapture readonly, i8*, i32, i8*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #3 {
  %11 = zext i8 %8 to i64
  %12 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %11
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = zext i8 %9 to i64
  %19 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %18
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 13
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = add nsw i32 %28, 5
  %30 = ashr i32 %26, %29
  %31 = sub i32 %14, %7
  %32 = add i32 %30, %31
  %33 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 15
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %1, i64 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i32 %36, 5
  %38 = ashr i32 %34, %37
  %39 = sub i32 %17, %6
  %40 = add i32 %38, %39
  %41 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 18
  %42 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %41, align 8
  %43 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %42, i64 0, i32 29
  %44 = load i32, i32* %43, align 8
  %45 = and i32 %44, 8
  %46 = icmp eq i8 %9, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %10
  %48 = icmp slt i32 %32, %21
  %49 = icmp slt i32 %40, %24
  %50 = or i1 %48, %49
  br i1 %50, label %70, label %51

51:                                               ; preds = %47, %10
  %52 = shl nuw nsw i32 %21, 2
  %53 = shl nuw nsw i32 %24, 2
  %54 = icmp eq i32 %45, 0
  br i1 %54, label %67, label %55

55:                                               ; preds = %51
  %56 = load void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)** @vpx_highbd_convolve_copy, align 8
  %57 = ptrtoint i8* %2 to i64
  %58 = shl i64 %57, 1
  %59 = inttoptr i64 %58 to i16*
  %60 = sext i32 %3 to i64
  %61 = ptrtoint i8* %4 to i64
  %62 = shl i64 %61, 1
  %63 = inttoptr i64 %62 to i16*
  %64 = sext i32 %5 to i64
  %65 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %66 = load i32, i32* %65, align 8
  tail call void %56(i16* %59, i64 %60, i16* %63, i64 %64, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %52, i32 %53, i32 %66) #6
  br label %116

67:                                               ; preds = %51
  %68 = sext i32 %3 to i64
  %69 = sext i32 %5 to i64
  tail call void @vpx_convolve_copy_sse2(i8* %2, i64 %68, i8* %4, i64 %69, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %52, i32 %53) #6
  br label %116

70:                                               ; preds = %47
  %71 = select i1 %49, i32 %40, i32 %24
  %72 = select i1 %48, i32 %32, i32 %21
  %73 = icmp sgt i32 %71, 0
  br i1 %73, label %74, label %116

74:                                               ; preds = %70
  %75 = icmp sgt i32 %72, 0
  %76 = shl i32 %3, 2
  %77 = shl i32 %5, 2
  %78 = icmp eq i32 %45, 0
  %79 = sext i32 %3 to i64
  %80 = sext i32 %5 to i64
  %81 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %82 = sext i32 %72 to i64
  %83 = sext i32 %71 to i64
  br label %84

84:                                               ; preds = %74, %113
  %85 = phi i64 [ 0, %74 ], [ %114, %113 ]
  br i1 %75, label %86, label %113

86:                                               ; preds = %84
  %87 = trunc i64 %85 to i32
  %88 = mul i32 %76, %87
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %2, i64 %89
  %91 = mul i32 %77, %87
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %4, i64 %92
  br label %94

94:                                               ; preds = %86, %110
  %95 = phi i64 [ 0, %86 ], [ %111, %110 ]
  %96 = shl i64 %95, 2
  %97 = and i64 %96, 4294967292
  %98 = getelementptr inbounds i8, i8* %90, i64 %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %97
  br i1 %78, label %109, label %100

100:                                              ; preds = %94
  %101 = load void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)** @vpx_highbd_convolve_copy, align 8
  %102 = ptrtoint i8* %98 to i64
  %103 = shl i64 %102, 1
  %104 = inttoptr i64 %103 to i16*
  %105 = ptrtoint i8* %99 to i64
  %106 = shl i64 %105, 1
  %107 = inttoptr i64 %106 to i16*
  %108 = load i32, i32* %81, align 8
  tail call void %101(i16* %104, i64 %79, i16* %107, i64 %80, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 %108) #6
  br label %110

109:                                              ; preds = %94
  tail call void @vpx_convolve_copy_sse2(i8* %98, i64 %79, i8* %99, i64 %80, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 4, i32 4) #6
  br label %110

110:                                              ; preds = %109, %100
  %111 = add nuw nsw i64 %95, 1
  %112 = icmp slt i64 %111, %82
  br i1 %112, label %94, label %113

113:                                              ; preds = %110, %84
  %114 = add nuw nsw i64 %85, 1
  %115 = icmp slt i64 %114, %83
  br i1 %115, label %84, label %116

116:                                              ; preds = %113, %70, %55, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @dist_block(%struct.VP9_COMP* nocapture readonly, %struct.macroblock* nocapture readonly, i32, i8 zeroext, i32, i32, i32, i8 zeroext, i64* nocapture, i64* nocapture, %struct.buf_2d* readonly) unnamed_addr #3 {
  %12 = alloca i64, align 8
  %13 = alloca [1024 x i16], align 16
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1
  %15 = sext i32 %2 to i64
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 %15
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %15, i32 3
  %18 = load i16*, i16** %17, align 16
  %19 = sext i32 %4 to i64
  %20 = getelementptr inbounds i16, i16* %18, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = icmp ne %struct.buf_2d* %10, null
  br i1 %23, label %101, label %24

24:                                               ; preds = %11
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 10
  %26 = load i32, i32* %25, align 8
  %27 = icmp ne i32 %26, 0
  %28 = icmp ne i16 %21, 0
  %29 = and i1 %28, %27
  br i1 %29, label %30, label %101

30:                                               ; preds = %24
  %31 = zext i8 %7 to i32
  %32 = shl nuw nsw i32 %31, 1
  %33 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #6
  store i64 -6148914691236517206, i64* %12, align 8
  %34 = icmp eq i8 %7, 3
  %35 = select i1 %34, i32 0, i32 2
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %15, i32 2
  %37 = load i32*, i32** %36, align 8
  %38 = shl nsw i32 %4, 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, i32* %37, i64 %39
  %41 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %16, i64 0, i32 0
  %42 = load i32*, i32** %41, align 8
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 18
  %45 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %44, align 8
  %46 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %45, i64 0, i32 29
  %47 = load i32, i32* %46, align 8
  %48 = and i32 %47, 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %30
  %51 = shl i32 16, %32
  %52 = sext i32 %51 to i64
  br label %59

53:                                               ; preds = %30
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 23
  %55 = load i32, i32* %54, align 8
  %56 = shl i32 16, %32
  %57 = sext i32 %56 to i64
  %58 = icmp eq i32 %55, 8
  br i1 %58, label %59, label %63

59:                                               ; preds = %50, %53
  %60 = phi i64 [ %52, %50 ], [ %57, %53 ]
  %61 = load i64 (i32*, i32*, i64, i64*)*, i64 (i32*, i32*, i64, i64*)** @vp9_block_error, align 8
  %62 = call i64 %61(i32* %40, i32* %43, i64 %60, i64* nonnull %12) #6
  br label %66

63:                                               ; preds = %53
  %64 = call i64 @vp9_highbd_block_error_sse2(i32* %40, i32* %43, i64 %57, i64* nonnull %12, i32 %55) #6
  %65 = shl i32 %55, 1
  br label %66

66:                                               ; preds = %59, %63
  %67 = phi i32 [ 16, %59 ], [ %65, %63 ]
  %68 = phi i64 [ %62, %59 ], [ %64, %63 ]
  %69 = zext i32 %35 to i64
  %70 = ashr i64 %68, %69
  store i64 %70, i64* %8, align 8
  %71 = load i64, i64* %12, align 8
  %72 = ashr i64 %71, %69
  store i64 %72, i64* %9, align 8
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  %74 = load i32, i32* %73, align 16
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %100, label %76

76:                                               ; preds = %66
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  %78 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %77, align 8
  %79 = load %struct.MODE_INFO*, %struct.MODE_INFO** %78, align 8
  %80 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %79, i64 0, i32 8, i64 0
  %81 = load i8, i8* %80, align 4
  %82 = icmp slt i8 %81, 1
  br i1 %82, label %83, label %100

83:                                               ; preds = %76
  %84 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 %15, i32 12
  %85 = load i16*, i16** %84, align 8
  %86 = getelementptr inbounds i16, i16* %85, i64 1
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = mul nsw i32 %88, %88
  %90 = shl i32 %89, %32
  %91 = add nuw nsw i32 %35, -14
  %92 = add i32 %91, %67
  %93 = ashr i32 %90, %92
  %94 = sext i32 %93 to i64
  %95 = ashr i64 %94, 4
  %96 = load i64, i64* %8, align 8
  %97 = add nsw i64 %95, %96
  store i64 %97, i64* %8, align 8
  %98 = load i64, i64* %9, align 8
  %99 = add nsw i64 %98, %94
  store i64 %99, i64* %9, align 8
  br label %100

100:                                              ; preds = %76, %66, %83
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #6
  br label %203

101:                                              ; preds = %24, %11
  %102 = zext i8 %7 to i64
  %103 = getelementptr inbounds [4 x i8], [4 x i8]* @txsize_to_bsize, i64 0, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = shl nuw nsw i32 %108, 2
  %110 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %15, i32 4, i32 1
  %111 = load i32, i32* %110, align 8
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 %15, i32 3, i32 1
  %113 = load i32, i32* %112, align 8
  %114 = mul nsw i32 %111, %5
  %115 = add nsw i32 %114, %6
  %116 = shl nsw i32 %115, 2
  %117 = mul nsw i32 %113, %5
  %118 = add nsw i32 %117, %6
  %119 = shl nsw i32 %118, 2
  %120 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %15, i32 4, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = sext i32 %116 to i64
  %123 = getelementptr inbounds i8, i8* %121, i64 %122
  %124 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 %15, i32 3, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = sext i32 %119 to i64
  %127 = getelementptr inbounds i8, i8* %125, i64 %126
  %128 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %16, i64 0, i32 0
  %129 = load i32*, i32** %128, align 8
  %130 = shl nsw i32 %4, 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i32, i32* %129, i64 %131
  %133 = tail call fastcc i32 @pixel_sse(%struct.VP9_COMP* %0, %struct.macroblockd* %14, %struct.macroblockd_plane* %16, i8* %123, i32 %111, i8* %127, i32 %113, i32 %5, i32 %6, i8 zeroext %3, i8 zeroext %104)
  %134 = zext i32 %133 to i64
  %135 = shl nuw nsw i64 %134, 4
  store i64 %135, i64* %9, align 8
  br i1 %23, label %136, label %146

136:                                              ; preds = %101
  %137 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %10, i64 0, i32 1
  %138 = load i32, i32* %137, align 8
  %139 = mul nsw i32 %138, %5
  %140 = add nsw i32 %139, %6
  %141 = shl nsw i32 %140, 2
  %142 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %10, i64 0, i32 0
  %143 = load i8*, i8** %142, align 8
  %144 = sext i32 %141 to i64
  %145 = getelementptr inbounds i8, i8* %143, i64 %144
  tail call fastcc void @copy_block_visible(%struct.macroblockd* %14, %struct.macroblockd_plane* %16, i8* %127, i32 %113, i8* %145, i32 %138, i32 %5, i32 %6, i8 zeroext %3, i8 zeroext %104)
  br label %146

146:                                              ; preds = %136, %101
  %147 = phi i8* [ %145, %136 ], [ null, %101 ]
  %148 = icmp eq i16 %21, 0
  br i1 %148, label %201, label %149

149:                                              ; preds = %146
  %150 = bitcast [1024 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %150) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %150, i8 -86, i64 2048, i1 false)
  %151 = getelementptr inbounds [1024 x i16], [1024 x i16]* %13, i64 0, i64 0
  %152 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 18
  %153 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %152, align 8
  %154 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %153, i64 0, i32 29
  %155 = load i32, i32* %154, align 8
  %156 = and i32 %155, 8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %184, label %158

158:                                              ; preds = %149
  %159 = load void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)** @vpx_highbd_convolve_copy, align 8
  %160 = ptrtoint i8* %127 to i64
  %161 = shl i64 %160, 1
  %162 = inttoptr i64 %161 to i16*
  %163 = sext i32 %113 to i64
  %164 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 23
  %165 = load i32, i32* %164, align 8
  call void %159(i16* %162, i64 %163, i16* nonnull %151, i64 32, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %109, i32 %109, i32 %165) #6
  %166 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 24
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %171, label %169

169:                                              ; preds = %158
  %170 = load i32, i32* %164, align 8
  call void @vp9_highbd_iwht4x4_add(i32* %132, i16* nonnull %151, i32 32, i32 %22, i32 %170) #6
  br label %180

171:                                              ; preds = %158
  switch i8 %7, label %178 [
    i8 0, label %172
    i8 1, label %174
    i8 2, label %176
  ]

172:                                              ; preds = %171
  %173 = load i32, i32* %164, align 8
  call void @vp9_highbd_idct4x4_add(i32* %132, i16* nonnull %151, i32 32, i32 %22, i32 %173) #6
  br label %180

174:                                              ; preds = %171
  %175 = load i32, i32* %164, align 8
  call void @vp9_highbd_idct8x8_add(i32* %132, i16* nonnull %151, i32 32, i32 %22, i32 %175) #6
  br label %180

176:                                              ; preds = %171
  %177 = load i32, i32* %164, align 8
  call void @vp9_highbd_idct16x16_add(i32* %132, i16* nonnull %151, i32 32, i32 %22, i32 %177) #6
  br label %180

178:                                              ; preds = %171
  %179 = load i32, i32* %164, align 8
  call void @vp9_highbd_idct32x32_add(i32* %132, i16* nonnull %151, i32 32, i32 %22, i32 %179) #6
  br label %180

180:                                              ; preds = %172, %174, %176, %178, %169
  %181 = ptrtoint [1024 x i16]* %13 to i64
  %182 = lshr exact i64 %181, 1
  %183 = inttoptr i64 %182 to i8*
  br label %192

184:                                              ; preds = %149
  %185 = sext i32 %113 to i64
  call void @vpx_convolve_copy_sse2(i8* %127, i64 %185, i8* nonnull %150, i64 32, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %109, i32 %109) #6
  switch i8 %7, label %189 [
    i8 3, label %186
    i8 2, label %187
    i8 1, label %188
  ]

186:                                              ; preds = %184
  call void @vp9_idct32x32_add(i32* %132, i8* nonnull %150, i32 32, i32 %22) #6
  br label %192

187:                                              ; preds = %184
  call void @vp9_idct16x16_add(i32* %132, i8* nonnull %150, i32 32, i32 %22) #6
  br label %192

188:                                              ; preds = %184
  call void @vp9_idct8x8_add(i32* %132, i8* nonnull %150, i32 32, i32 %22) #6
  br label %192

189:                                              ; preds = %184
  %190 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 65
  %191 = load void (i32*, i8*, i32, i32)*, void (i32*, i8*, i32, i32)** %190, align 8
  call void %191(i32* %132, i8* nonnull %150, i32 32, i32 %22) #6
  br label %192

192:                                              ; preds = %186, %187, %188, %189, %180
  %193 = phi i8* [ %183, %180 ], [ %150, %189 ], [ %150, %188 ], [ %150, %187 ], [ %150, %186 ]
  %194 = call fastcc i32 @pixel_sse(%struct.VP9_COMP* %0, %struct.macroblockd* %14, %struct.macroblockd_plane* %16, i8* %123, i32 %111, i8* nonnull %193, i32 32, i32 %5, i32 %6, i8 zeroext %3, i8 zeroext %104)
  br i1 %23, label %195, label %198

195:                                              ; preds = %192
  %196 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %10, i64 0, i32 1
  %197 = load i32, i32* %196, align 8
  call fastcc void @copy_block_visible(%struct.macroblockd* %14, %struct.macroblockd_plane* %16, i8* nonnull %193, i32 32, i8* %147, i32 %197, i32 %5, i32 %6, i8 zeroext %3, i8 zeroext %104)
  br label %198

198:                                              ; preds = %195, %192
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %150) #6
  %199 = zext i32 %194 to i64
  %200 = shl nuw nsw i64 %199, 4
  br label %201

201:                                              ; preds = %146, %198
  %202 = phi i64 [ %135, %146 ], [ %200, %198 ]
  store i64 %202, i64* %8, align 8
  br label %203

203:                                              ; preds = %201, %100
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @pixel_sse(%struct.VP9_COMP* nocapture readonly, %struct.macroblockd* nocapture readonly, %struct.macroblockd_plane* nocapture readonly, i8*, i32, i8*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #3 {
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #6
  store i32 0, i32* %12, align 4
  %15 = zext i8 %9 to i64
  %16 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %15
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = zext i8 %10 to i64
  %23 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %22
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 13
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %2, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = add nsw i32 %32, 5
  %34 = ashr i32 %30, %33
  %35 = sub i32 %18, %8
  %36 = add i32 %34, %35
  %37 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 15
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %2, i64 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = add nsw i32 %40, 5
  %42 = ashr i32 %38, %41
  %43 = sub i32 %21, %7
  %44 = add i32 %42, %43
  %45 = icmp eq i8 %10, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %11
  %47 = icmp slt i32 %36, %25
  %48 = icmp slt i32 %44, %28
  %49 = or i1 %47, %48
  br i1 %49, label %55, label %50

50:                                               ; preds = %46, %11
  %51 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 %22, i32 2
  %52 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %51, align 8
  %53 = call i32 %52(i8* %3, i32 %4, i8* %5, i32 %6, i32* nonnull %12) #6
  %54 = load i32, i32* %12, align 4
  br label %97

55:                                               ; preds = %46
  %56 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 0, i32 2
  %57 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %56, align 16
  %58 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %58) #6
  store i32 0, i32* %13, align 4
  %59 = select i1 %48, i32 %44, i32 %28
  %60 = select i1 %47, i32 %36, i32 %25
  store i32 0, i32* %12, align 4
  %61 = icmp sgt i32 %59, 0
  br i1 %61, label %62, label %95

62:                                               ; preds = %55
  %63 = icmp sgt i32 %60, 0
  %64 = shl i32 %4, 2
  %65 = shl i32 %6, 2
  %66 = sext i32 %60 to i64
  %67 = sext i32 %59 to i64
  br label %68

68:                                               ; preds = %62, %91
  %69 = phi i32 [ 0, %62 ], [ %92, %91 ]
  %70 = phi i64 [ 0, %62 ], [ %93, %91 ]
  br i1 %63, label %71, label %91

71:                                               ; preds = %68
  %72 = trunc i64 %70 to i32
  %73 = mul i32 %64, %72
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %3, i64 %74
  %76 = mul i32 %65, %72
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %5, i64 %77
  br label %79

79:                                               ; preds = %71, %79
  %80 = phi i64 [ 0, %71 ], [ %89, %79 ]
  %81 = shl i64 %80, 2
  %82 = and i64 %81, 4294967292
  %83 = getelementptr inbounds i8, i8* %75, i64 %82
  %84 = getelementptr inbounds i8, i8* %78, i64 %82
  %85 = call i32 %57(i8* %83, i32 %4, i8* %84, i32 %6, i32* nonnull %13) #6
  %86 = load i32, i32* %13, align 4
  %87 = load i32, i32* %12, align 4
  %88 = add i32 %87, %86
  store i32 %88, i32* %12, align 4
  %89 = add nuw nsw i64 %80, 1
  %90 = icmp slt i64 %89, %66
  br i1 %90, label %79, label %91

91:                                               ; preds = %79, %68
  %92 = phi i32 [ %69, %68 ], [ %88, %79 ]
  %93 = add nuw nsw i64 %70, 1
  %94 = icmp slt i64 %93, %67
  br i1 %94, label %68, label %95

95:                                               ; preds = %91, %55
  %96 = phi i32 [ 0, %55 ], [ %92, %91 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %58) #6
  br label %97

97:                                               ; preds = %95, %50
  %98 = phi i32 [ %96, %95 ], [ %54, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #6
  ret i32 %98
}

declare void @vp9_xform_quant(%struct.macroblock*, i32, i32, i32, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #4

declare i32 @vp9_optimize_b(%struct.macroblock*, i32, i32, i8 zeroext, i32) local_unnamed_addr #4

declare void @vp9_xform_quant_dc(%struct.macroblock*, i32, i32, i32, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #4

declare void @vpx_convolve_copy_sse2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4

declare void @vp9_highbd_iwht4x4_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #4

declare void @vp9_highbd_idct4x4_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #4

declare void @vp9_highbd_idct8x8_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #4

declare void @vp9_highbd_idct16x16_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #4

declare void @vp9_highbd_idct32x32_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #4

declare void @vp9_idct32x32_add(i32*, i8*, i32, i32) local_unnamed_addr #4

declare void @vp9_idct16x16_add(i32*, i8*, i32, i32) local_unnamed_addr #4

declare void @vp9_idct8x8_add(i32*, i8*, i32, i32) local_unnamed_addr #4

declare i64 @vp9_highbd_block_error_sse2(i32*, i32*, i64, i64*, i32) local_unnamed_addr #4

declare i64 @vpx_sum_squares_2d_i16_sse2(i16*, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc i32 @cost_coeffs(%struct.macroblock* nocapture readonly, i32, i32, i8 zeroext, i32, i16* nocapture readonly, i16* nocapture readonly, i32) unnamed_addr #5 {
  %9 = alloca [1024 x i8], align 16
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 6
  %11 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %10, align 8
  %12 = load %struct.MODE_INFO*, %struct.MODE_INFO** %11, align 8
  %13 = sext i32 %1 to i64
  %14 = icmp sgt i32 %1, 0
  %15 = zext i8 %3 to i64
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %13, i32 3
  %17 = load i16*, i16** %16, align 16
  %18 = sext i32 %2 to i64
  %19 = getelementptr inbounds i16, i16* %17, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %13, i32 1
  %23 = load i32*, i32** %22, align 16
  %24 = shl nsw i32 %2, 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i32, i32* %23, i64 %25
  %27 = zext i1 %14 to i64
  %28 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %12, i64 0, i32 8, i64 0
  %29 = load i8, i8* %28, align 4
  %30 = icmp sgt i8 %29, 0
  %31 = zext i1 %30 to i64
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %32) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 -86, i64 1024, i1 false)
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 23
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 8
  %36 = icmp eq i32 %34, 10
  %37 = select i1 %36, i16* getelementptr inbounds ([256 x i16], [256 x i16]* @vp9_cat6_high10_high_cost, i64 0, i64 0), i16* getelementptr inbounds ([1024 x i16], [1024 x i16]* @vp9_cat6_high12_high_cost, i64 0, i64 0)
  %38 = select i1 %35, i16* getelementptr inbounds ([64 x i16], [64 x i16]* @vp9_cat6_high_cost, i64 0, i64 0), i16* %37
  %39 = icmp eq i16 %20, 0
  br i1 %39, label %40, label %44

40:                                               ; preds = %8
  %41 = sext i32 %4 to i64
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 41, i64 %15, i64 %27, i64 %31, i64 0, i64 0, i64 %41, i64 11
  %43 = load i32, i32* %42, align 4
  br label %319

44:                                               ; preds = %8
  %45 = getelementptr inbounds [4 x [8 x i16]], [4 x [8 x i16]]* @band_counts, i64 0, i64 %15, i64 1
  %46 = icmp eq i32 %7, 0
  %47 = getelementptr inbounds [4 x [8 x i16]], [4 x [8 x i16]]* @band_counts, i64 0, i64 %15, i64 2
  %48 = load i16, i16* %45, align 2
  %49 = sext i16 %48 to i32
  %50 = load i32, i32* %26, align 4
  %51 = add i32 %50, 66
  %52 = icmp ugt i32 %51, 132
  br i1 %46, label %165, label %53

53:                                               ; preds = %44
  br i1 %52, label %54, label %70

54:                                               ; preds = %53
  %55 = icmp slt i32 %50, 0
  %56 = sub nsw i32 0, %50
  %57 = select i1 %55, i32 %56, i32 %50
  %58 = add nsw i32 %57, -67
  %59 = and i32 %58, 255
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_cat6_low_cost, i64 0, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = ashr i32 %58, 8
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %38, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = add nsw i32 %68, %63
  br label %78

70:                                               ; preds = %53
  %71 = load %struct.TOKENVALUE*, %struct.TOKENVALUE** @vp9_dct_cat_lt_10_value_tokens, align 8
  %72 = sext i32 %50 to i64
  %73 = getelementptr inbounds %struct.TOKENVALUE, %struct.TOKENVALUE* %71, i64 %72, i32 0
  %74 = load i16, i16* %73, align 4
  %75 = load i32*, i32** @vp9_dct_cat_lt_10_value_cost, align 8
  %76 = getelementptr inbounds i32, i32* %75, i64 %72
  %77 = load i32, i32* %76, align 4
  br label %78

78:                                               ; preds = %54, %70
  %79 = phi i16 [ 10, %54 ], [ %74, %70 ]
  %80 = phi i32 [ %69, %54 ], [ %77, %70 ]
  %81 = sext i32 %4 to i64
  %82 = sext i16 %79 to i64
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 41, i64 %15, i64 %27, i64 %31, i64 0, i64 0, i64 %81, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = add i32 %84, %80
  %86 = getelementptr inbounds [12 x i8], [12 x i8]* @vp9_pt_energy_class, i64 0, i64 %82
  %87 = load i8, i8* %86, align 1
  store i8 %87, i8* %32, align 16
  %88 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 41, i64 %15, i64 %27, i64 %31, i64 1
  %89 = icmp ugt i16 %20, 1
  br i1 %89, label %90, label %153

90:                                               ; preds = %78
  %91 = load %struct.TOKENVALUE*, %struct.TOKENVALUE** @vp9_dct_cat_lt_10_value_tokens, align 8
  %92 = load i32*, i32** @vp9_dct_cat_lt_10_value_cost, align 8
  %93 = zext i16 %20 to i64
  br label %94

94:                                               ; preds = %147, %90
  %95 = phi i64 [ 1, %90 ], [ %151, %147 ]
  %96 = phi i16* [ %47, %90 ], [ %150, %147 ]
  %97 = phi i32 [ %49, %90 ], [ %149, %147 ]
  %98 = phi i32 [ %85, %90 ], [ %139, %147 ]
  %99 = phi [2 x [6 x [12 x i32]]]* [ %88, %90 ], [ %148, %147 ]
  %100 = phi i16 [ %79, %90 ], [ %131, %147 ]
  %101 = getelementptr inbounds i16, i16* %5, i64 %95
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i64
  %104 = getelementptr inbounds i32, i32* %26, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, 66
  %107 = icmp ugt i32 %106, 132
  br i1 %107, label %108, label %124

108:                                              ; preds = %94
  %109 = icmp slt i32 %105, 0
  %110 = sub nsw i32 0, %105
  %111 = select i1 %109, i32 %110, i32 %105
  %112 = add nsw i32 %111, -67
  %113 = and i32 %112, 255
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_cat6_low_cost, i64 0, i64 %114
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i32
  %118 = ashr i32 %112, 8
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i16, i16* %38, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nsw i32 %122, %117
  br label %130

124:                                              ; preds = %94
  %125 = sext i32 %105 to i64
  %126 = getelementptr inbounds %struct.TOKENVALUE, %struct.TOKENVALUE* %91, i64 %125, i32 0
  %127 = load i16, i16* %126, align 4
  %128 = getelementptr inbounds i32, i32* %92, i64 %125
  %129 = load i32, i32* %128, align 4
  br label %130

130:                                              ; preds = %108, %124
  %131 = phi i16 [ 10, %108 ], [ %127, %124 ]
  %132 = phi i32 [ %123, %108 ], [ %129, %124 ]
  %133 = add nsw i32 %132, %98
  %134 = icmp eq i16 %100, 0
  %135 = zext i1 %134 to i64
  %136 = sext i16 %131 to i64
  %137 = getelementptr inbounds [2 x [6 x [12 x i32]]], [2 x [6 x [12 x i32]]]* %99, i64 0, i64 %135, i64 %135, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = add i32 %133, %138
  %140 = add nsw i32 %97, -1
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %147

142:                                              ; preds = %130
  %143 = getelementptr inbounds i16, i16* %96, i64 1
  %144 = load i16, i16* %96, align 2
  %145 = sext i16 %144 to i32
  %146 = getelementptr inbounds [2 x [6 x [12 x i32]]], [2 x [6 x [12 x i32]]]* %99, i64 1
  br label %147

147:                                              ; preds = %130, %142
  %148 = phi [2 x [6 x [12 x i32]]]* [ %99, %130 ], [ %146, %142 ]
  %149 = phi i32 [ %140, %130 ], [ %145, %142 ]
  %150 = phi i16* [ %96, %130 ], [ %143, %142 ]
  %151 = add nuw nsw i64 %95, 1
  %152 = icmp eq i64 %151, %93
  br i1 %152, label %153, label %94

153:                                              ; preds = %147, %78
  %154 = phi i16 [ %79, %78 ], [ %131, %147 ]
  %155 = phi [2 x [6 x [12 x i32]]]* [ %88, %78 ], [ %148, %147 ]
  %156 = phi i32 [ %85, %78 ], [ %139, %147 ]
  %157 = phi i32 [ %49, %78 ], [ %149, %147 ]
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %319, label %159

159:                                              ; preds = %153
  %160 = icmp eq i16 %154, 0
  %161 = zext i1 %160 to i64
  %162 = getelementptr inbounds [2 x [6 x [12 x i32]]], [2 x [6 x [12 x i32]]]* %155, i64 0, i64 0, i64 %161, i64 11
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, %156
  br label %319

165:                                              ; preds = %44
  br i1 %52, label %166, label %182

166:                                              ; preds = %165
  %167 = icmp slt i32 %50, 0
  %168 = sub nsw i32 0, %50
  %169 = select i1 %167, i32 %168, i32 %50
  %170 = add nsw i32 %169, -67
  %171 = and i32 %170, 255
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_cat6_low_cost, i64 0, i64 %172
  %174 = load i16, i16* %173, align 2
  %175 = sext i16 %174 to i32
  %176 = ashr i32 %170, 8
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i16, i16* %38, i64 %177
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = add nsw i32 %180, %175
  br label %190

182:                                              ; preds = %165
  %183 = load %struct.TOKENVALUE*, %struct.TOKENVALUE** @vp9_dct_cat_lt_10_value_tokens, align 8
  %184 = sext i32 %50 to i64
  %185 = getelementptr inbounds %struct.TOKENVALUE, %struct.TOKENVALUE* %183, i64 %184, i32 0
  %186 = load i16, i16* %185, align 4
  %187 = load i32*, i32** @vp9_dct_cat_lt_10_value_cost, align 8
  %188 = getelementptr inbounds i32, i32* %187, i64 %184
  %189 = load i32, i32* %188, align 4
  br label %190

190:                                              ; preds = %166, %182
  %191 = phi i16 [ 10, %166 ], [ %186, %182 ]
  %192 = phi i32 [ %181, %166 ], [ %189, %182 ]
  %193 = sext i32 %4 to i64
  %194 = sext i16 %191 to i64
  %195 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 41, i64 %15, i64 %27, i64 %31, i64 0, i64 0, i64 %193, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = add i32 %196, %192
  %198 = getelementptr inbounds [12 x i8], [12 x i8]* @vp9_pt_energy_class, i64 0, i64 %194
  %199 = load i8, i8* %198, align 1
  store i8 %199, i8* %32, align 16
  %200 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 41, i64 %15, i64 %27, i64 %31, i64 1
  %201 = icmp ugt i16 %20, 1
  br i1 %201, label %202, label %291

202:                                              ; preds = %190
  %203 = icmp eq i16 %191, 0
  %204 = zext i1 %203 to i64
  %205 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 41, i64 %15, i64 %27, i64 %31, i64 1, i64 %204
  %206 = zext i16 %20 to i64
  br label %207

207:                                              ; preds = %280, %202
  %208 = phi i64 [ 1, %202 ], [ %287, %280 ]
  %209 = phi [6 x [12 x i32]]* [ %205, %202 ], [ %286, %280 ]
  %210 = phi i32 [ %49, %202 ], [ %283, %280 ]
  %211 = phi i16* [ %47, %202 ], [ %282, %280 ]
  %212 = phi i32 [ %197, %202 ], [ %269, %280 ]
  %213 = phi [2 x [6 x [12 x i32]]]* [ %200, %202 ], [ %281, %280 ]
  %214 = getelementptr inbounds i16, i16* %5, i64 %208
  %215 = load i16, i16* %214, align 2
  %216 = sext i16 %215 to i64
  %217 = getelementptr inbounds i32, i32* %26, i64 %216
  %218 = load i32, i32* %217, align 4
  %219 = add i32 %218, 66
  %220 = icmp ugt i32 %219, 132
  br i1 %220, label %221, label %237

221:                                              ; preds = %207
  %222 = icmp slt i32 %218, 0
  %223 = sub nsw i32 0, %218
  %224 = select i1 %222, i32 %223, i32 %218
  %225 = add nsw i32 %224, -67
  %226 = and i32 %225, 255
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_cat6_low_cost, i64 0, i64 %227
  %229 = load i16, i16* %228, align 2
  %230 = sext i16 %229 to i32
  %231 = ashr i32 %225, 8
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i16, i16* %38, i64 %232
  %234 = load i16, i16* %233, align 2
  %235 = zext i16 %234 to i32
  %236 = add nsw i32 %235, %230
  br label %245

237:                                              ; preds = %207
  %238 = load %struct.TOKENVALUE*, %struct.TOKENVALUE** @vp9_dct_cat_lt_10_value_tokens, align 8
  %239 = sext i32 %218 to i64
  %240 = getelementptr inbounds %struct.TOKENVALUE, %struct.TOKENVALUE* %238, i64 %239, i32 0
  %241 = load i16, i16* %240, align 4
  %242 = load i32*, i32** @vp9_dct_cat_lt_10_value_cost, align 8
  %243 = getelementptr inbounds i32, i32* %242, i64 %239
  %244 = load i32, i32* %243, align 4
  br label %245

245:                                              ; preds = %221, %237
  %246 = phi i16 [ 10, %221 ], [ %241, %237 ]
  %247 = phi i32 [ %236, %221 ], [ %244, %237 ]
  %248 = add nsw i32 %247, %212
  %249 = shl nuw nsw i64 %208, 1
  %250 = getelementptr inbounds i16, i16* %6, i64 %249
  %251 = load i16, i16* %250, align 2
  %252 = sext i16 %251 to i64
  %253 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 %252
  %254 = load i8, i8* %253, align 1
  %255 = zext i8 %254 to i64
  %256 = add nuw nsw i64 %255, 1
  %257 = or i64 %249, 1
  %258 = getelementptr inbounds i16, i16* %6, i64 %257
  %259 = load i16, i16* %258, align 2
  %260 = sext i16 %259 to i64
  %261 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 %260
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i64
  %264 = add nuw nsw i64 %256, %263
  %265 = lshr i64 %264, 1
  %266 = sext i16 %246 to i64
  %267 = getelementptr inbounds [6 x [12 x i32]], [6 x [12 x i32]]* %209, i64 0, i64 %265, i64 %266
  %268 = load i32, i32* %267, align 4
  %269 = add i32 %248, %268
  %270 = getelementptr inbounds [12 x i8], [12 x i8]* @vp9_pt_energy_class, i64 0, i64 %266
  %271 = load i8, i8* %270, align 1
  %272 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 %216
  store i8 %271, i8* %272, align 1
  %273 = add nsw i32 %210, -1
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %280

275:                                              ; preds = %245
  %276 = getelementptr inbounds i16, i16* %211, i64 1
  %277 = load i16, i16* %211, align 2
  %278 = sext i16 %277 to i32
  %279 = getelementptr inbounds [2 x [6 x [12 x i32]]], [2 x [6 x [12 x i32]]]* %213, i64 1
  br label %280

280:                                              ; preds = %245, %275
  %281 = phi [2 x [6 x [12 x i32]]]* [ %213, %245 ], [ %279, %275 ]
  %282 = phi i16* [ %211, %245 ], [ %276, %275 ]
  %283 = phi i32 [ %273, %245 ], [ %278, %275 ]
  %284 = icmp eq i16 %246, 0
  %285 = zext i1 %284 to i64
  %286 = getelementptr inbounds [2 x [6 x [12 x i32]]], [2 x [6 x [12 x i32]]]* %281, i64 0, i64 %285
  %287 = add nuw nsw i64 %208, 1
  %288 = icmp eq i64 %287, %206
  br i1 %288, label %289, label %207

289:                                              ; preds = %280
  %290 = shl nuw nsw i32 %21, 1
  br label %291

291:                                              ; preds = %289, %190
  %292 = phi [2 x [6 x [12 x i32]]]* [ %200, %190 ], [ %281, %289 ]
  %293 = phi i32 [ %197, %190 ], [ %269, %289 ]
  %294 = phi i32 [ %49, %190 ], [ %283, %289 ]
  %295 = phi i32 [ 2, %190 ], [ %290, %289 ]
  %296 = icmp eq i32 %294, 0
  br i1 %296, label %319, label %297

297:                                              ; preds = %291
  %298 = zext i32 %295 to i64
  %299 = getelementptr inbounds i16, i16* %6, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = sext i16 %300 to i64
  %302 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 %301
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i64
  %305 = add nuw nsw i64 %304, 1
  %306 = or i32 %295, 1
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds i16, i16* %6, i64 %307
  %309 = load i16, i16* %308, align 2
  %310 = sext i16 %309 to i64
  %311 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 %310
  %312 = load i8, i8* %311, align 1
  %313 = zext i8 %312 to i64
  %314 = add nuw nsw i64 %305, %313
  %315 = lshr i64 %314, 1
  %316 = getelementptr inbounds [2 x [6 x [12 x i32]]], [2 x [6 x [12 x i32]]]* %292, i64 0, i64 0, i64 %315, i64 11
  %317 = load i32, i32* %316, align 4
  %318 = add i32 %317, %293
  br label %319

319:                                              ; preds = %297, %291, %159, %153, %40
  %320 = phi i32 [ %43, %40 ], [ %164, %159 ], [ %156, %153 ], [ %318, %297 ], [ %293, %291 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %32) #6
  ret i32 %320
}

declare i16* @vp9_raster_block_offset_int16(i8 zeroext, i32, i16*) local_unnamed_addr #4

declare void @vp9_predict_intra_block(%struct.macroblockd*, i32, i8 zeroext, i8 zeroext, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #4

declare void @vpx_highbd_subtract_block_c(i32, i32, i16*, i64, i8*, i64, i8*, i64, i32) local_unnamed_addr #4

declare void @vp9_highbd_fwht4x4_c(i16*, i32*, i32) local_unnamed_addr #4

declare void @vp9_regular_quantize_b_4x4(%struct.macroblock*, i32, i32, i16*, i16*) local_unnamed_addr #4

declare void @vpx_highbd_fdct4x4_sse2(i16*, i32*, i32) local_unnamed_addr #4

declare void @vp9_highbd_fht4x4_c(i16*, i32*, i32, i32) local_unnamed_addr #4

declare void @vp9_highbd_iht4x4_add(i32, i32*, i16*, i32, i32, i32) local_unnamed_addr #4

declare void @vpx_subtract_block_sse2(i32, i32, i16*, i64, i8*, i64, i8*, i64) local_unnamed_addr #4

declare void @vp9_fwht4x4_sse2(i16*, i32*, i32) local_unnamed_addr #4

declare void @vp9_iwht4x4_add(i32*, i8*, i32, i32) local_unnamed_addr #4

declare void @vp9_fht4x4_sse2(i16*, i32*, i32, i32) local_unnamed_addr #4

declare void @vp9_iht4x4_add(i32, i32*, i8*, i32, i32) local_unnamed_addr #4

declare void @vp9_subtract_plane(%struct.macroblock*, i8 zeroext, i32) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
