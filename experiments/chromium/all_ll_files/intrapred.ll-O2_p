; ModuleID = '../../third_party/libgav1/src/src/dsp/intrapred.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/intrapred.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

@_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE = internal unnamed_addr constant [124 x i8] c"\FF\95U@\FF\C5\92iI2% \FF\E1\C4\AA\91{fTD6+!\1A\14\11\10\FF\F0\E1\D2\C4\B6\A9\9D\91\85zoe\5CSJB;4-'\22\1D\19\15\11\0E\0C\0A\09\08\08\FF\F8\F0\E9\E1\DA\D2\CB\C4\BD\B6\B0\A9\A3\9C\96\90\8A\85\7Fytoje`[VRMIEA=962/,)&# \1D\1B\19\16\14\12\10\0F\0D\0C\0A\09\08\07\06\06\05\05\04\04\04", align 16
@_ZN7libgav116kFilterIntraTapsE = external local_unnamed_addr constant [5 x [8 x [8 x i8]]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp15IntraPredInit_CEv() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #5
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 0, i64 0
  %3 = bitcast void (i8*, i64, i8*, i8*)** %2 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi4ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %3, align 8
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 0, i64 2
  %5 = bitcast void (i8*, i64, i8*, i8*)** %4 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %5, align 8
  %6 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 0, i64 4
  %7 = bitcast void (i8*, i64, i8*, i8*)** %6 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %7, align 8
  %8 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 0, i64 6
  %9 = bitcast void (i8*, i64, i8*, i8*)** %8 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %9, align 8
  %10 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 0, i64 8
  %11 = bitcast void (i8*, i64, i8*, i8*)** %10 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %11, align 8
  %12 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 1, i64 0
  %13 = bitcast void (i8*, i64, i8*, i8*)** %12 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi8ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %13, align 8
  %14 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 1, i64 2
  %15 = bitcast void (i8*, i64, i8*, i8*)** %14 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %15, align 8
  %16 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 1, i64 4
  %17 = bitcast void (i8*, i64, i8*, i8*)** %16 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %17, align 8
  %18 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 1, i64 6
  %19 = bitcast void (i8*, i64, i8*, i8*)** %18 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %19, align 8
  %20 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 1, i64 8
  %21 = bitcast void (i8*, i64, i8*, i8*)** %20 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %21, align 8
  %22 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 2, i64 0
  %23 = bitcast void (i8*, i64, i8*, i8*)** %22 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi16ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %23, align 8
  %24 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 2, i64 2
  %25 = bitcast void (i8*, i64, i8*, i8*)** %24 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %25, align 8
  %26 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 2, i64 4
  %27 = bitcast void (i8*, i64, i8*, i8*)** %26 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %27, align 8
  %28 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 2, i64 6
  %29 = bitcast void (i8*, i64, i8*, i8*)** %28 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %29, align 8
  %30 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 2, i64 8
  %31 = bitcast void (i8*, i64, i8*, i8*)** %30 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %31, align 8
  %32 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 3, i64 0
  %33 = bitcast void (i8*, i64, i8*, i8*)** %32 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi4ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %33, align 8
  %34 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 3, i64 2
  %35 = bitcast void (i8*, i64, i8*, i8*)** %34 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %35, align 8
  %36 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 3, i64 4
  %37 = bitcast void (i8*, i64, i8*, i8*)** %36 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %37, align 8
  %38 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 3, i64 6
  %39 = bitcast void (i8*, i64, i8*, i8*)** %38 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %39, align 8
  %40 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 3, i64 8
  %41 = bitcast void (i8*, i64, i8*, i8*)** %40 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %41, align 8
  %42 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 4, i64 0
  %43 = bitcast void (i8*, i64, i8*, i8*)** %42 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi8ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %43, align 8
  %44 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 4, i64 2
  %45 = bitcast void (i8*, i64, i8*, i8*)** %44 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %45, align 8
  %46 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 4, i64 4
  %47 = bitcast void (i8*, i64, i8*, i8*)** %46 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %47, align 8
  %48 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 4, i64 6
  %49 = bitcast void (i8*, i64, i8*, i8*)** %48 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %49, align 8
  %50 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 4, i64 8
  %51 = bitcast void (i8*, i64, i8*, i8*)** %50 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %51, align 8
  %52 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 5, i64 0
  %53 = bitcast void (i8*, i64, i8*, i8*)** %52 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi16ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %53, align 8
  %54 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 5, i64 2
  %55 = bitcast void (i8*, i64, i8*, i8*)** %54 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %55, align 8
  %56 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 5, i64 4
  %57 = bitcast void (i8*, i64, i8*, i8*)** %56 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %57, align 8
  %58 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 5, i64 6
  %59 = bitcast void (i8*, i64, i8*, i8*)** %58 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %59, align 8
  %60 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 5, i64 8
  %61 = bitcast void (i8*, i64, i8*, i8*)** %60 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %61, align 8
  %62 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 6, i64 0
  %63 = bitcast void (i8*, i64, i8*, i8*)** %62 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi32ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %63, align 8
  %64 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 6, i64 2
  %65 = bitcast void (i8*, i64, i8*, i8*)** %64 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %65, align 8
  %66 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 6, i64 4
  %67 = bitcast void (i8*, i64, i8*, i8*)** %66 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %67, align 8
  %68 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 6, i64 6
  %69 = bitcast void (i8*, i64, i8*, i8*)** %68 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %69, align 8
  %70 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 6, i64 8
  %71 = bitcast void (i8*, i64, i8*, i8*)** %70 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %71, align 8
  %72 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 7, i64 0
  %73 = bitcast void (i8*, i64, i8*, i8*)** %72 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi4ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %73, align 8
  %74 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 7, i64 2
  %75 = bitcast void (i8*, i64, i8*, i8*)** %74 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %75, align 8
  %76 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 7, i64 4
  %77 = bitcast void (i8*, i64, i8*, i8*)** %76 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %77, align 8
  %78 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 7, i64 6
  %79 = bitcast void (i8*, i64, i8*, i8*)** %78 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %79, align 8
  %80 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 7, i64 8
  %81 = bitcast void (i8*, i64, i8*, i8*)** %80 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %81, align 8
  %82 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 8, i64 0
  %83 = bitcast void (i8*, i64, i8*, i8*)** %82 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi8ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %83, align 8
  %84 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 8, i64 2
  %85 = bitcast void (i8*, i64, i8*, i8*)** %84 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %85, align 8
  %86 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 8, i64 4
  %87 = bitcast void (i8*, i64, i8*, i8*)** %86 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %87, align 8
  %88 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 8, i64 6
  %89 = bitcast void (i8*, i64, i8*, i8*)** %88 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %89, align 8
  %90 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 8, i64 8
  %91 = bitcast void (i8*, i64, i8*, i8*)** %90 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %91, align 8
  %92 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 9, i64 0
  %93 = bitcast void (i8*, i64, i8*, i8*)** %92 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi16ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %93, align 8
  %94 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 9, i64 2
  %95 = bitcast void (i8*, i64, i8*, i8*)** %94 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %95, align 8
  %96 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 9, i64 4
  %97 = bitcast void (i8*, i64, i8*, i8*)** %96 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %97, align 8
  %98 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 9, i64 6
  %99 = bitcast void (i8*, i64, i8*, i8*)** %98 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %99, align 8
  %100 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 9, i64 8
  %101 = bitcast void (i8*, i64, i8*, i8*)** %100 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %101, align 8
  %102 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 10, i64 0
  %103 = bitcast void (i8*, i64, i8*, i8*)** %102 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi32ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %103, align 8
  %104 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 10, i64 2
  %105 = bitcast void (i8*, i64, i8*, i8*)** %104 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %105, align 8
  %106 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 10, i64 4
  %107 = bitcast void (i8*, i64, i8*, i8*)** %106 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %107, align 8
  %108 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 10, i64 6
  %109 = bitcast void (i8*, i64, i8*, i8*)** %108 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %109, align 8
  %110 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 10, i64 8
  %111 = bitcast void (i8*, i64, i8*, i8*)** %110 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %111, align 8
  %112 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 11, i64 0
  %113 = bitcast void (i8*, i64, i8*, i8*)** %112 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi64ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %113, align 8
  %114 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 11, i64 2
  %115 = bitcast void (i8*, i64, i8*, i8*)** %114 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %115, align 8
  %116 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 11, i64 4
  %117 = bitcast void (i8*, i64, i8*, i8*)** %116 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %117, align 8
  %118 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 11, i64 6
  %119 = bitcast void (i8*, i64, i8*, i8*)** %118 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %119, align 8
  %120 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 11, i64 8
  %121 = bitcast void (i8*, i64, i8*, i8*)** %120 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %121, align 8
  %122 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 12, i64 0
  %123 = bitcast void (i8*, i64, i8*, i8*)** %122 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi8ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %123, align 8
  %124 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 12, i64 2
  %125 = bitcast void (i8*, i64, i8*, i8*)** %124 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %125, align 8
  %126 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 12, i64 4
  %127 = bitcast void (i8*, i64, i8*, i8*)** %126 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %127, align 8
  %128 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 12, i64 6
  %129 = bitcast void (i8*, i64, i8*, i8*)** %128 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %129, align 8
  %130 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 12, i64 8
  %131 = bitcast void (i8*, i64, i8*, i8*)** %130 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %131, align 8
  %132 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 13, i64 0
  %133 = bitcast void (i8*, i64, i8*, i8*)** %132 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi16ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %133, align 8
  %134 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 13, i64 2
  %135 = bitcast void (i8*, i64, i8*, i8*)** %134 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %135, align 8
  %136 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 13, i64 4
  %137 = bitcast void (i8*, i64, i8*, i8*)** %136 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %137, align 8
  %138 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 13, i64 6
  %139 = bitcast void (i8*, i64, i8*, i8*)** %138 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %139, align 8
  %140 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 13, i64 8
  %141 = bitcast void (i8*, i64, i8*, i8*)** %140 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %141, align 8
  %142 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 14, i64 0
  %143 = bitcast void (i8*, i64, i8*, i8*)** %142 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi32ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %143, align 8
  %144 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 14, i64 2
  %145 = bitcast void (i8*, i64, i8*, i8*)** %144 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %145, align 8
  %146 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 14, i64 4
  %147 = bitcast void (i8*, i64, i8*, i8*)** %146 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %147, align 8
  %148 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 14, i64 6
  %149 = bitcast void (i8*, i64, i8*, i8*)** %148 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %149, align 8
  %150 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 14, i64 8
  %151 = bitcast void (i8*, i64, i8*, i8*)** %150 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %151, align 8
  %152 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 15, i64 0
  %153 = bitcast void (i8*, i64, i8*, i8*)** %152 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi64ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %153, align 8
  %154 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 15, i64 2
  %155 = bitcast void (i8*, i64, i8*, i8*)** %154 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %155, align 8
  %156 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 15, i64 4
  %157 = bitcast void (i8*, i64, i8*, i8*)** %156 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %157, align 8
  %158 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 15, i64 6
  %159 = bitcast void (i8*, i64, i8*, i8*)** %158 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %159, align 8
  %160 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 15, i64 8
  %161 = bitcast void (i8*, i64, i8*, i8*)** %160 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %161, align 8
  %162 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 16, i64 0
  %163 = bitcast void (i8*, i64, i8*, i8*)** %162 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi16ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %163, align 8
  %164 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 16, i64 2
  %165 = bitcast void (i8*, i64, i8*, i8*)** %164 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %165, align 8
  %166 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 16, i64 4
  %167 = bitcast void (i8*, i64, i8*, i8*)** %166 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %167, align 8
  %168 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 16, i64 6
  %169 = bitcast void (i8*, i64, i8*, i8*)** %168 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %169, align 8
  %170 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 16, i64 8
  %171 = bitcast void (i8*, i64, i8*, i8*)** %170 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %171, align 8
  %172 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 17, i64 0
  %173 = bitcast void (i8*, i64, i8*, i8*)** %172 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi32ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %173, align 8
  %174 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 17, i64 2
  %175 = bitcast void (i8*, i64, i8*, i8*)** %174 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %175, align 8
  %176 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 17, i64 4
  %177 = bitcast void (i8*, i64, i8*, i8*)** %176 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %177, align 8
  %178 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 17, i64 6
  %179 = bitcast void (i8*, i64, i8*, i8*)** %178 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %179, align 8
  %180 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 17, i64 8
  %181 = bitcast void (i8*, i64, i8*, i8*)** %180 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %181, align 8
  %182 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 18, i64 0
  %183 = bitcast void (i8*, i64, i8*, i8*)** %182 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi64ELi8EhE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %183, align 8
  %184 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 18, i64 2
  %185 = bitcast void (i8*, i64, i8*, i8*)** %184 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %185, align 8
  %186 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 18, i64 4
  %187 = bitcast void (i8*, i64, i8*, i8*)** %186 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %187, align 8
  %188 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 18, i64 6
  %189 = bitcast void (i8*, i64, i8*, i8*)** %188 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %189, align 8
  %190 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 16, i64 18, i64 8
  %191 = bitcast void (i8*, i64, i8*, i8*)** %190 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %191, align 8
  %192 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 7
  store void (i8*, i64, i8*, i32, i32, i32, i1)* @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone1_CIhEEvPvlPKviiib, void (i8*, i64, i8*, i32, i32, i32, i1)** %192, align 8
  %193 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 8
  store void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)* @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone2_CIhEEvPvlPKvS5_iiiibb, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)** %193, align 8
  %194 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 9
  store void (i8*, i64, i8*, i32, i32, i32, i1)* @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone3_CIhEEvPvlPKviiib, void (i8*, i64, i8*, i32, i32, i32, i1)** %194, align 8
  %195 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 12
  store void (i8*, i64, i8*, i8*, i8, i32, i32)* @_ZN7libgav13dsp12_GLOBAL__N_122FilterIntraPredictor_CILi8EhEEvPvlPKvS5_NS_20FilterIntraPredictorEii, void (i8*, i64, i8*, i8*, i8, i32, i32)** %195, align 8
  %196 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 0
  %197 = getelementptr %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 0, i64 0
  %198 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %197 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi8EhLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi8EhLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %198, align 8
  %199 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 0, i64 2
  %200 = bitcast void (i8*, i64, [32 x i16]*, i32)** %196 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi4ELi8EhEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi8ELi8EhEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %200, align 8
  %201 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %199 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi8EhLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi8EhLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %201, align 8
  %202 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 1, i64 1
  %203 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %202 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi8EhLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi8EhLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %203, align 8
  %204 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 2
  %205 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 2, i64 0
  %206 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %205 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi8EhLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi8EhLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %206, align 8
  %207 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 2, i64 2
  %208 = bitcast void (i8*, i64, [32 x i16]*, i32)** %204 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi16ELi8EhEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi4ELi8EhEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %208, align 8
  %209 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %207 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi8EhLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi8EhLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %209, align 8
  %210 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 3, i64 1
  %211 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %210 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi8EhLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi8EhLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %211, align 8
  %212 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 4
  %213 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 4, i64 0
  %214 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %213 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi8EhLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi8EhLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %214, align 8
  %215 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 4, i64 2
  %216 = bitcast void (i8*, i64, [32 x i16]*, i32)** %212 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi8ELi8EhEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi16ELi8EhEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %216, align 8
  %217 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %215 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi8EhLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi8EhLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %217, align 8
  %218 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 5, i64 1
  %219 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %218 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi8EhLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi8EhLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %219, align 8
  %220 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 6
  %221 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 6, i64 0
  %222 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %221 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi8EhLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi8EhLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %222, align 8
  %223 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 6, i64 2
  %224 = bitcast void (i8*, i64, [32 x i16]*, i32)** %220 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi32ELi8EhEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi4ELi8EhEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %224, align 8
  %225 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %223 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi8EhLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi8EhLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %225, align 8
  %226 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 7, i64 1
  %227 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %226 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi8EhLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi8EhLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %227, align 8
  %228 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 8
  %229 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 8, i64 0
  %230 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %229 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi8EhLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi8EhLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %230, align 8
  %231 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 8, i64 2
  %232 = bitcast void (i8*, i64, [32 x i16]*, i32)** %228 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi8ELi8EhEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi16ELi8EhEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %232, align 8
  %233 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %231 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi8EhLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi8EhLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %233, align 8
  %234 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 9, i64 1
  %235 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %234 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi8EhLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi8EhLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %235, align 8
  %236 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 10
  store void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi32ELi8EhEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)** %236, align 8
  %237 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 10, i64 0
  %238 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %237 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi8EhLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi8EhLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %238, align 8
  %239 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 10, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi8EhLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %239, align 8
  %240 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 12
  store void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi8ELi8EhEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)** %240, align 8
  %241 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 12, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi8EhLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %241, align 8
  %242 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 12, i64 1
  %243 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %242 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi8EhLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi8EhLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %243, align 8
  %244 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 13
  %245 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 13, i64 0
  %246 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %245 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi8EhLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi8EhLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %246, align 8
  %247 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 13, i64 2
  %248 = bitcast void (i8*, i64, [32 x i16]*, i32)** %244 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi16ELi8EhEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi32ELi8EhEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %248, align 8
  %249 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %247 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi8EhLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi8EhLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %249, align 8
  %250 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 14, i64 1
  %251 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %250 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi8EhLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi8EhLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %251, align 8
  %252 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 11
  store void (i8*, i64, [32 x i16]*, i32)* null, void (i8*, i64, [32 x i16]*, i32)** %252, align 8
  %253 = getelementptr %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 0, i64 33
  %254 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %253 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %254, i8 0, i64 24, i1 false) #5
  %255 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 3, i64 15
  %256 = getelementptr %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 4, i64 0, i64 45
  %257 = bitcast void (i8*, i64, [32 x i16]*, i32)** %255 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %257, i8 0, i64 32, i1 false)
  %258 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %256 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %258, i8 0, i64 96, i1 false)
  %259 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #5
  %260 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 0, i64 0
  %261 = bitcast void (i8*, i64, i8*, i8*)** %260 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi4ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %261, align 8
  %262 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 0, i64 2
  %263 = bitcast void (i8*, i64, i8*, i8*)** %262 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %263, align 8
  %264 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 0, i64 4
  %265 = bitcast void (i8*, i64, i8*, i8*)** %264 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %265, align 8
  %266 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 0, i64 6
  %267 = bitcast void (i8*, i64, i8*, i8*)** %266 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %267, align 8
  %268 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 0, i64 8
  %269 = bitcast void (i8*, i64, i8*, i8*)** %268 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %269, align 8
  %270 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 1, i64 0
  %271 = bitcast void (i8*, i64, i8*, i8*)** %270 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi8ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %271, align 8
  %272 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 1, i64 2
  %273 = bitcast void (i8*, i64, i8*, i8*)** %272 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %273, align 8
  %274 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 1, i64 4
  %275 = bitcast void (i8*, i64, i8*, i8*)** %274 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %275, align 8
  %276 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 1, i64 6
  %277 = bitcast void (i8*, i64, i8*, i8*)** %276 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %277, align 8
  %278 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 1, i64 8
  %279 = bitcast void (i8*, i64, i8*, i8*)** %278 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %279, align 8
  %280 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 2, i64 0
  %281 = bitcast void (i8*, i64, i8*, i8*)** %280 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi16ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %281, align 8
  %282 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 2, i64 2
  %283 = bitcast void (i8*, i64, i8*, i8*)** %282 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %283, align 8
  %284 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 2, i64 4
  %285 = bitcast void (i8*, i64, i8*, i8*)** %284 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %285, align 8
  %286 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 2, i64 6
  %287 = bitcast void (i8*, i64, i8*, i8*)** %286 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %287, align 8
  %288 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 2, i64 8
  %289 = bitcast void (i8*, i64, i8*, i8*)** %288 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %289, align 8
  %290 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 3, i64 0
  %291 = bitcast void (i8*, i64, i8*, i8*)** %290 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi4ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %291, align 8
  %292 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 3, i64 2
  %293 = bitcast void (i8*, i64, i8*, i8*)** %292 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %293, align 8
  %294 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 3, i64 4
  %295 = bitcast void (i8*, i64, i8*, i8*)** %294 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %295, align 8
  %296 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 3, i64 6
  %297 = bitcast void (i8*, i64, i8*, i8*)** %296 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %297, align 8
  %298 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 3, i64 8
  %299 = bitcast void (i8*, i64, i8*, i8*)** %298 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %299, align 8
  %300 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 4, i64 0
  %301 = bitcast void (i8*, i64, i8*, i8*)** %300 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi8ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %301, align 8
  %302 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 4, i64 2
  %303 = bitcast void (i8*, i64, i8*, i8*)** %302 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %303, align 8
  %304 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 4, i64 4
  %305 = bitcast void (i8*, i64, i8*, i8*)** %304 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %305, align 8
  %306 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 4, i64 6
  %307 = bitcast void (i8*, i64, i8*, i8*)** %306 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %307, align 8
  %308 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 4, i64 8
  %309 = bitcast void (i8*, i64, i8*, i8*)** %308 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %309, align 8
  %310 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 5, i64 0
  %311 = bitcast void (i8*, i64, i8*, i8*)** %310 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi16ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %311, align 8
  %312 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 5, i64 2
  %313 = bitcast void (i8*, i64, i8*, i8*)** %312 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %313, align 8
  %314 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 5, i64 4
  %315 = bitcast void (i8*, i64, i8*, i8*)** %314 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %315, align 8
  %316 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 5, i64 6
  %317 = bitcast void (i8*, i64, i8*, i8*)** %316 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %317, align 8
  %318 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 5, i64 8
  %319 = bitcast void (i8*, i64, i8*, i8*)** %318 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %319, align 8
  %320 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 6, i64 0
  %321 = bitcast void (i8*, i64, i8*, i8*)** %320 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi32ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %321, align 8
  %322 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 6, i64 2
  %323 = bitcast void (i8*, i64, i8*, i8*)** %322 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %323, align 8
  %324 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 6, i64 4
  %325 = bitcast void (i8*, i64, i8*, i8*)** %324 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %325, align 8
  %326 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 6, i64 6
  %327 = bitcast void (i8*, i64, i8*, i8*)** %326 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %327, align 8
  %328 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 6, i64 8
  %329 = bitcast void (i8*, i64, i8*, i8*)** %328 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %329, align 8
  %330 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 7, i64 0
  %331 = bitcast void (i8*, i64, i8*, i8*)** %330 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi4ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %331, align 8
  %332 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 7, i64 2
  %333 = bitcast void (i8*, i64, i8*, i8*)** %332 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %333, align 8
  %334 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 7, i64 4
  %335 = bitcast void (i8*, i64, i8*, i8*)** %334 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %335, align 8
  %336 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 7, i64 6
  %337 = bitcast void (i8*, i64, i8*, i8*)** %336 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %337, align 8
  %338 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 7, i64 8
  %339 = bitcast void (i8*, i64, i8*, i8*)** %338 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %339, align 8
  %340 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 8, i64 0
  %341 = bitcast void (i8*, i64, i8*, i8*)** %340 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi8ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %341, align 8
  %342 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 8, i64 2
  %343 = bitcast void (i8*, i64, i8*, i8*)** %342 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %343, align 8
  %344 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 8, i64 4
  %345 = bitcast void (i8*, i64, i8*, i8*)** %344 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %345, align 8
  %346 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 8, i64 6
  %347 = bitcast void (i8*, i64, i8*, i8*)** %346 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %347, align 8
  %348 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 8, i64 8
  %349 = bitcast void (i8*, i64, i8*, i8*)** %348 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %349, align 8
  %350 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 9, i64 0
  %351 = bitcast void (i8*, i64, i8*, i8*)** %350 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi16ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %351, align 8
  %352 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 9, i64 2
  %353 = bitcast void (i8*, i64, i8*, i8*)** %352 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %353, align 8
  %354 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 9, i64 4
  %355 = bitcast void (i8*, i64, i8*, i8*)** %354 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %355, align 8
  %356 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 9, i64 6
  %357 = bitcast void (i8*, i64, i8*, i8*)** %356 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %357, align 8
  %358 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 9, i64 8
  %359 = bitcast void (i8*, i64, i8*, i8*)** %358 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %359, align 8
  %360 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 10, i64 0
  %361 = bitcast void (i8*, i64, i8*, i8*)** %360 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi32ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %361, align 8
  %362 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 10, i64 2
  %363 = bitcast void (i8*, i64, i8*, i8*)** %362 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %363, align 8
  %364 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 10, i64 4
  %365 = bitcast void (i8*, i64, i8*, i8*)** %364 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %365, align 8
  %366 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 10, i64 6
  %367 = bitcast void (i8*, i64, i8*, i8*)** %366 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %367, align 8
  %368 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 10, i64 8
  %369 = bitcast void (i8*, i64, i8*, i8*)** %368 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %369, align 8
  %370 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 11, i64 0
  %371 = bitcast void (i8*, i64, i8*, i8*)** %370 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi64ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %371, align 8
  %372 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 11, i64 2
  %373 = bitcast void (i8*, i64, i8*, i8*)** %372 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %373, align 8
  %374 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 11, i64 4
  %375 = bitcast void (i8*, i64, i8*, i8*)** %374 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %375, align 8
  %376 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 11, i64 6
  %377 = bitcast void (i8*, i64, i8*, i8*)** %376 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %377, align 8
  %378 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 11, i64 8
  %379 = bitcast void (i8*, i64, i8*, i8*)** %378 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %379, align 8
  %380 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 12, i64 0
  %381 = bitcast void (i8*, i64, i8*, i8*)** %380 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi8ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %381, align 8
  %382 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 12, i64 2
  %383 = bitcast void (i8*, i64, i8*, i8*)** %382 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %383, align 8
  %384 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 12, i64 4
  %385 = bitcast void (i8*, i64, i8*, i8*)** %384 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %385, align 8
  %386 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 12, i64 6
  %387 = bitcast void (i8*, i64, i8*, i8*)** %386 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %387, align 8
  %388 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 12, i64 8
  %389 = bitcast void (i8*, i64, i8*, i8*)** %388 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %389, align 8
  %390 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 13, i64 0
  %391 = bitcast void (i8*, i64, i8*, i8*)** %390 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi16ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %391, align 8
  %392 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 13, i64 2
  %393 = bitcast void (i8*, i64, i8*, i8*)** %392 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %393, align 8
  %394 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 13, i64 4
  %395 = bitcast void (i8*, i64, i8*, i8*)** %394 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %395, align 8
  %396 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 13, i64 6
  %397 = bitcast void (i8*, i64, i8*, i8*)** %396 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %397, align 8
  %398 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 13, i64 8
  %399 = bitcast void (i8*, i64, i8*, i8*)** %398 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %399, align 8
  %400 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 14, i64 0
  %401 = bitcast void (i8*, i64, i8*, i8*)** %400 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi32ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %401, align 8
  %402 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 14, i64 2
  %403 = bitcast void (i8*, i64, i8*, i8*)** %402 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %403, align 8
  %404 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 14, i64 4
  %405 = bitcast void (i8*, i64, i8*, i8*)** %404 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %405, align 8
  %406 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 14, i64 6
  %407 = bitcast void (i8*, i64, i8*, i8*)** %406 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %407, align 8
  %408 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 14, i64 8
  %409 = bitcast void (i8*, i64, i8*, i8*)** %408 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %409, align 8
  %410 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 15, i64 0
  %411 = bitcast void (i8*, i64, i8*, i8*)** %410 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi64ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %411, align 8
  %412 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 15, i64 2
  %413 = bitcast void (i8*, i64, i8*, i8*)** %412 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %413, align 8
  %414 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 15, i64 4
  %415 = bitcast void (i8*, i64, i8*, i8*)** %414 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %415, align 8
  %416 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 15, i64 6
  %417 = bitcast void (i8*, i64, i8*, i8*)** %416 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %417, align 8
  %418 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 15, i64 8
  %419 = bitcast void (i8*, i64, i8*, i8*)** %418 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %419, align 8
  %420 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 16, i64 0
  %421 = bitcast void (i8*, i64, i8*, i8*)** %420 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi16ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %421, align 8
  %422 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 16, i64 2
  %423 = bitcast void (i8*, i64, i8*, i8*)** %422 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %423, align 8
  %424 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 16, i64 4
  %425 = bitcast void (i8*, i64, i8*, i8*)** %424 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %425, align 8
  %426 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 16, i64 6
  %427 = bitcast void (i8*, i64, i8*, i8*)** %426 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %427, align 8
  %428 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 16, i64 8
  %429 = bitcast void (i8*, i64, i8*, i8*)** %428 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %429, align 8
  %430 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 17, i64 0
  %431 = bitcast void (i8*, i64, i8*, i8*)** %430 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi32ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %431, align 8
  %432 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 17, i64 2
  %433 = bitcast void (i8*, i64, i8*, i8*)** %432 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %433, align 8
  %434 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 17, i64 4
  %435 = bitcast void (i8*, i64, i8*, i8*)** %434 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %435, align 8
  %436 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 17, i64 6
  %437 = bitcast void (i8*, i64, i8*, i8*)** %436 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %437, align 8
  %438 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 17, i64 8
  %439 = bitcast void (i8*, i64, i8*, i8*)** %438 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %439, align 8
  %440 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 18, i64 0
  %441 = bitcast void (i8*, i64, i8*, i8*)** %440 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi64ELi10EtE6DcFillEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE5DcTopEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %441, align 8
  %442 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 18, i64 2
  %443 = bitcast void (i8*, i64, i8*, i8*)** %442 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE6DcLeftEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE2DcEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %443, align 8
  %444 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 18, i64 4
  %445 = bitcast void (i8*, i64, i8*, i8*)** %444 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE8VerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE10HorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %445, align 8
  %446 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 18, i64 6
  %447 = bitcast void (i8*, i64, i8*, i8*)** %446 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE5PaethEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE6SmoothEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %447, align 8
  %448 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 16, i64 18, i64 8
  %449 = bitcast void (i8*, i64, i8*, i8*)** %448 to <2 x void (i8*, i64, i8*, i8*)*>*
  store <2 x void (i8*, i64, i8*, i8*)*> <void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE14SmoothVerticalEPvlPKvS6_, void (i8*, i64, i8*, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE16SmoothHorizontalEPvlPKvS6_>, <2 x void (i8*, i64, i8*, i8*)*>* %449, align 8
  %450 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 7
  store void (i8*, i64, i8*, i32, i32, i32, i1)* @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone1_CItEEvPvlPKviiib, void (i8*, i64, i8*, i32, i32, i32, i1)** %450, align 8
  %451 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 8
  store void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)* @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone2_CItEEvPvlPKvS5_iiiibb, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)** %451, align 8
  %452 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 9
  store void (i8*, i64, i8*, i32, i32, i32, i1)* @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone3_CItEEvPvlPKviiib, void (i8*, i64, i8*, i32, i32, i32, i1)** %452, align 8
  %453 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 12
  store void (i8*, i64, i8*, i8*, i8, i32, i32)* @_ZN7libgav13dsp12_GLOBAL__N_122FilterIntraPredictor_CILi10EtEEvPvlPKvS5_NS_20FilterIntraPredictorEii, void (i8*, i64, i8*, i8*, i8, i32, i32)** %453, align 8
  %454 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 0
  %455 = getelementptr %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 0, i64 0
  %456 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %455 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi10EtLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi10EtLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %456, align 8
  %457 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 0, i64 2
  %458 = bitcast void (i8*, i64, [32 x i16]*, i32)** %454 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi4ELi10EtEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi8ELi10EtEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %458, align 8
  %459 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %457 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi10EtLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi10EtLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %459, align 8
  %460 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 1, i64 1
  %461 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %460 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi10EtLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi10EtLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %461, align 8
  %462 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 2
  %463 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 2, i64 0
  %464 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %463 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi10EtLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi10EtLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %464, align 8
  %465 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 2, i64 2
  %466 = bitcast void (i8*, i64, [32 x i16]*, i32)** %462 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi16ELi10EtEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi4ELi10EtEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %466, align 8
  %467 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %465 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi10EtLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi10EtLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %467, align 8
  %468 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 3, i64 1
  %469 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %468 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi10EtLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi10EtLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %469, align 8
  %470 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 4
  %471 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 4, i64 0
  %472 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %471 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi10EtLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi10EtLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %472, align 8
  %473 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 4, i64 2
  %474 = bitcast void (i8*, i64, [32 x i16]*, i32)** %470 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi8ELi10EtEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi16ELi10EtEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %474, align 8
  %475 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %473 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi10EtLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi10EtLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %475, align 8
  %476 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 5, i64 1
  %477 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %476 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi10EtLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi10EtLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %477, align 8
  %478 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 6
  %479 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 6, i64 0
  %480 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %479 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi10EtLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi10EtLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %480, align 8
  %481 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 6, i64 2
  %482 = bitcast void (i8*, i64, [32 x i16]*, i32)** %478 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi32ELi10EtEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi4ELi10EtEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %482, align 8
  %483 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %481 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi10EtLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi10EtLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %483, align 8
  %484 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 7, i64 1
  %485 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %484 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi10EtLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi10EtLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %485, align 8
  %486 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 8
  %487 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 8, i64 0
  %488 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %487 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi10EtLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi10EtLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %488, align 8
  %489 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 8, i64 2
  %490 = bitcast void (i8*, i64, [32 x i16]*, i32)** %486 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi8ELi10EtEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi16ELi10EtEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %490, align 8
  %491 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %489 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi10EtLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi10EtLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %491, align 8
  %492 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 9, i64 1
  %493 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %492 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi10EtLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi10EtLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %493, align 8
  %494 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 10
  store void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi32ELi10EtEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)** %494, align 8
  %495 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 10, i64 0
  %496 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %495 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi10EtLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi10EtLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %496, align 8
  %497 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 10, i64 2
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi10EtLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %497, align 8
  %498 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 12
  store void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi8ELi10EtEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)** %498, align 8
  %499 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 12, i64 0
  store void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi10EtLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)** %499, align 8
  %500 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 12, i64 1
  %501 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %500 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi10EtLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi10EtLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %501, align 8
  %502 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 13
  %503 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 13, i64 0
  %504 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %503 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi10EtLi0ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi10EtLi1ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %504, align 8
  %505 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 13, i64 2
  %506 = bitcast void (i8*, i64, [32 x i16]*, i32)** %502 to <2 x void (i8*, i64, [32 x i16]*, i32)*>*
  store <2 x void (i8*, i64, [32 x i16]*, i32)*> <void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi16ELi10EtEEvPvlPA32_Ksi, void (i8*, i64, [32 x i16]*, i32)* @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi32ELi10EtEEvPvlPA32_Ksi>, <2 x void (i8*, i64, [32 x i16]*, i32)*>* %506, align 8
  %507 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %505 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi10EtLi1ELi1EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi10EtLi0ELi0EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %507, align 8
  %508 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 14, i64 1
  %509 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %508 to <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>*
  store <2 x void ([32 x i16]*, i32, i32, i8*, i64)*> <void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi10EtLi1ELi0EEEvPA32_siiPKvl, void ([32 x i16]*, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi10EtLi1ELi1EEEvPA32_siiPKvl>, <2 x void ([32 x i16]*, i32, i32, i8*, i64)*>* %509, align 8
  %510 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 11
  store void (i8*, i64, [32 x i16]*, i32)* null, void (i8*, i64, [32 x i16]*, i32)** %510, align 8
  %511 = getelementptr %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 0, i64 33
  %512 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %511 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %512, i8 0, i64 24, i1 false) #5
  %513 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 3, i64 15
  %514 = getelementptr %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %259, i64 0, i32 4, i64 0, i64 45
  %515 = bitcast void (i8*, i64, [32 x i16]*, i32)** %513 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %515, i8 0, i64 32, i1 false)
  %516 = bitcast void ([32 x i16]*, i32, i32, i8*, i64)** %514 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %516, i8 0, i64 96, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi4ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %0 to i32*
  store i32 -2139062144, i32* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to i32*
  store i32 -2139062144, i32* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to i32*
  store i32 -2139062144, i32* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to i32*
  store i32 -2139062144, i32* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 2
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = lshr i32 %19, 2
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 4, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 4, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 4, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 2
  %8 = getelementptr inbounds i8, i8* %3, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %3, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %3, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = lshr i32 %19, 2
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 4, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 4, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 4, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 4
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = load i8, i8* %3, align 1
  %21 = zext i8 %20 to i32
  %22 = add nuw nsw i32 %19, %21
  %23 = getelementptr inbounds i8, i8* %3, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = add nuw nsw i32 %22, %25
  %27 = getelementptr inbounds i8, i8* %3, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = add nuw nsw i32 %26, %29
  %31 = getelementptr inbounds i8, i8* %3, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = add nuw nsw i32 %30, %33
  %35 = lshr i32 %34, 3
  %36 = trunc i32 %35 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %36, i64 4, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %36, i64 4, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %36, i64 4, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %36, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i32*
  %6 = bitcast i8* %0 to i32*
  %7 = load i32, i32* %5, align 1
  store i32 %7, i32* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %5, align 1
  store i32 %10, i32* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %5, align 1
  store i32 %13, i32* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %5, align 1
  store i32 %16, i32* %15, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 4, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 4, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 4, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  %9 = getelementptr inbounds i8, i8* %2, i64 1
  %10 = getelementptr inbounds i8, i8* %2, i64 2
  %11 = getelementptr inbounds i8, i8* %2, i64 3
  br label %13

12:                                               ; preds = %102
  ret void

13:                                               ; preds = %102, %4
  %14 = phi i64 [ 0, %4 ], [ %104, %102 ]
  %15 = phi i8* [ %0, %4 ], [ %103, %102 ]
  %16 = getelementptr inbounds i8, i8* %3, i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 %18, %7
  %20 = icmp slt i32 %19, 0
  %21 = sub nsw i32 0, %19
  %22 = select i1 %20, i32 %21, i32 %19
  %23 = sub nsw i32 %18, %8
  %24 = load i8, i8* %2, align 1
  %25 = zext i8 %24 to i32
  %26 = sub nsw i32 %25, %7
  %27 = icmp slt i32 %26, 0
  %28 = sub nsw i32 0, %26
  %29 = select i1 %27, i32 %28, i32 %26
  %30 = add nsw i32 %23, %25
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = icmp sgt i32 %29, %22
  %35 = icmp sgt i32 %29, %33
  %36 = or i1 %34, %35
  %37 = icmp sgt i32 %22, %33
  %38 = select i1 %37, i8 %6, i8 %24
  %39 = select i1 %36, i8 %38, i8 %17
  store i8 %39, i8* %15, align 1
  %40 = load i8, i8* %9, align 1
  %41 = zext i8 %40 to i32
  %42 = sub nsw i32 %41, %7
  %43 = icmp slt i32 %42, 0
  %44 = sub nsw i32 0, %42
  %45 = select i1 %43, i32 %44, i32 %42
  %46 = add nsw i32 %23, %41
  %47 = icmp slt i32 %46, 0
  %48 = sub nsw i32 0, %46
  %49 = select i1 %47, i32 %48, i32 %46
  %50 = icmp sgt i32 %45, %22
  %51 = icmp sgt i32 %45, %49
  %52 = or i1 %50, %51
  br i1 %52, label %55, label %53

53:                                               ; preds = %13
  %54 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %17, i8* %54, align 1
  br label %60

55:                                               ; preds = %13
  %56 = icmp sgt i32 %22, %49
  %57 = getelementptr inbounds i8, i8* %15, i64 1
  br i1 %56, label %59, label %58

58:                                               ; preds = %55
  store i8 %40, i8* %57, align 1
  br label %60

59:                                               ; preds = %55
  store i8 %6, i8* %57, align 1
  br label %60

60:                                               ; preds = %59, %58, %53
  %61 = load i8, i8* %10, align 1
  %62 = zext i8 %61 to i32
  %63 = sub nsw i32 %62, %7
  %64 = icmp slt i32 %63, 0
  %65 = sub nsw i32 0, %63
  %66 = select i1 %64, i32 %65, i32 %63
  %67 = add nsw i32 %23, %62
  %68 = icmp slt i32 %67, 0
  %69 = sub nsw i32 0, %67
  %70 = select i1 %68, i32 %69, i32 %67
  %71 = icmp sgt i32 %66, %22
  %72 = icmp sgt i32 %66, %70
  %73 = or i1 %71, %72
  br i1 %73, label %76, label %74

74:                                               ; preds = %60
  %75 = getelementptr inbounds i8, i8* %15, i64 2
  store i8 %17, i8* %75, align 1
  br label %81

76:                                               ; preds = %60
  %77 = icmp sgt i32 %22, %70
  %78 = getelementptr inbounds i8, i8* %15, i64 2
  br i1 %77, label %80, label %79

79:                                               ; preds = %76
  store i8 %61, i8* %78, align 1
  br label %81

80:                                               ; preds = %76
  store i8 %6, i8* %78, align 1
  br label %81

81:                                               ; preds = %80, %79, %74
  %82 = load i8, i8* %11, align 1
  %83 = zext i8 %82 to i32
  %84 = sub nsw i32 %83, %7
  %85 = icmp slt i32 %84, 0
  %86 = sub nsw i32 0, %84
  %87 = select i1 %85, i32 %86, i32 %84
  %88 = add nsw i32 %23, %83
  %89 = icmp slt i32 %88, 0
  %90 = sub nsw i32 0, %88
  %91 = select i1 %89, i32 %90, i32 %88
  %92 = icmp sgt i32 %87, %22
  %93 = icmp sgt i32 %87, %91
  %94 = or i1 %92, %93
  br i1 %94, label %97, label %95

95:                                               ; preds = %81
  %96 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %17, i8* %96, align 1
  br label %102

97:                                               ; preds = %81
  %98 = icmp sgt i32 %22, %91
  %99 = getelementptr inbounds i8, i8* %15, i64 3
  br i1 %98, label %101, label %100

100:                                              ; preds = %97
  store i8 %82, i8* %99, align 1
  br label %102

101:                                              ; preds = %97
  store i8 %6, i8* %99, align 1
  br label %102

102:                                              ; preds = %101, %100, %95
  %103 = getelementptr inbounds i8, i8* %15, i64 %1
  %104 = add nuw nsw i64 %14, 1
  %105 = icmp eq i64 %104, 4
  br i1 %105, label %12, label %13
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 3
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = or i32 %9, 256
  %12 = load i8, i8* %2, align 1
  %13 = zext i8 %12 to i32
  %14 = mul nuw nsw i32 %13, 255
  %15 = load i8, i8* %3, align 1
  %16 = zext i8 %15 to i32
  %17 = mul nuw nsw i32 %16, 255
  %18 = add nuw nsw i32 %11, %14
  %19 = add nuw nsw i32 %18, %10
  %20 = add nuw nsw i32 %19, %17
  %21 = lshr i32 %20, 9
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %0, align 1
  %23 = getelementptr inbounds i8, i8* %2, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = mul nuw nsw i32 %25, 255
  %27 = load i8, i8* %3, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, 149
  %30 = mul nuw nsw i32 %10, 107
  %31 = add nuw nsw i32 %11, %26
  %32 = add nuw nsw i32 %31, %30
  %33 = add nuw nsw i32 %32, %29
  %34 = lshr i32 %33, 9
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %35, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 2
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, 255
  %41 = load i8, i8* %3, align 1
  %42 = zext i8 %41 to i32
  %43 = mul nuw nsw i32 %42, 85
  %44 = mul nuw nsw i32 %10, 171
  %45 = add nuw nsw i32 %11, %40
  %46 = add nuw nsw i32 %45, %44
  %47 = add nuw nsw i32 %46, %43
  %48 = lshr i32 %47, 9
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %49, i8* %50, align 1
  %51 = load i8, i8* %5, align 1
  %52 = zext i8 %51 to i32
  %53 = mul nuw nsw i32 %52, 255
  %54 = load i8, i8* %3, align 1
  %55 = zext i8 %54 to i32
  %56 = shl nuw nsw i32 %55, 6
  %57 = mul nuw nsw i32 %10, 192
  %58 = add nuw nsw i32 %11, %53
  %59 = add nuw nsw i32 %58, %57
  %60 = add nuw nsw i32 %59, %56
  %61 = lshr i32 %60, 9
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %62, i8* %63, align 1
  %64 = getelementptr inbounds i8, i8* %0, i64 %1
  %65 = getelementptr inbounds i8, i8* %3, i64 1
  %66 = mul nuw nsw i32 %9, 107
  %67 = add nuw nsw i32 %66, 256
  %68 = load i8, i8* %2, align 1
  %69 = zext i8 %68 to i32
  %70 = mul nuw nsw i32 %69, 149
  %71 = load i8, i8* %65, align 1
  %72 = zext i8 %71 to i32
  %73 = mul nuw nsw i32 %72, 255
  %74 = add nuw nsw i32 %67, %70
  %75 = add nuw nsw i32 %74, %10
  %76 = add nuw nsw i32 %75, %73
  %77 = lshr i32 %76, 9
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %64, align 1
  %79 = load i8, i8* %23, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nuw nsw i32 %80, 149
  %82 = load i8, i8* %65, align 1
  %83 = zext i8 %82 to i32
  %84 = mul nuw nsw i32 %83, 149
  %85 = add nuw nsw i32 %67, %81
  %86 = add nuw nsw i32 %85, %30
  %87 = add nuw nsw i32 %86, %84
  %88 = lshr i32 %87, 9
  %89 = trunc i32 %88 to i8
  %90 = getelementptr inbounds i8, i8* %64, i64 1
  store i8 %89, i8* %90, align 1
  %91 = load i8, i8* %37, align 1
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, 149
  %94 = load i8, i8* %65, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, 85
  %97 = add nuw nsw i32 %67, %93
  %98 = add nuw nsw i32 %97, %44
  %99 = add nuw nsw i32 %98, %96
  %100 = lshr i32 %99, 9
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds i8, i8* %64, i64 2
  store i8 %101, i8* %102, align 1
  %103 = load i8, i8* %5, align 1
  %104 = zext i8 %103 to i32
  %105 = mul nuw nsw i32 %104, 149
  %106 = load i8, i8* %65, align 1
  %107 = zext i8 %106 to i32
  %108 = shl nuw nsw i32 %107, 6
  %109 = add nuw nsw i32 %67, %105
  %110 = add nuw nsw i32 %109, %57
  %111 = add nuw nsw i32 %110, %108
  %112 = lshr i32 %111, 9
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %64, i64 3
  store i8 %113, i8* %114, align 1
  %115 = getelementptr inbounds i8, i8* %64, i64 %1
  %116 = getelementptr inbounds i8, i8* %3, i64 2
  %117 = mul nuw nsw i32 %9, 171
  %118 = add nuw nsw i32 %117, 256
  %119 = load i8, i8* %2, align 1
  %120 = zext i8 %119 to i32
  %121 = mul nuw nsw i32 %120, 85
  %122 = load i8, i8* %116, align 1
  %123 = zext i8 %122 to i32
  %124 = mul nuw nsw i32 %123, 255
  %125 = add nuw nsw i32 %118, %121
  %126 = add nuw nsw i32 %125, %10
  %127 = add nuw nsw i32 %126, %124
  %128 = lshr i32 %127, 9
  %129 = trunc i32 %128 to i8
  store i8 %129, i8* %115, align 1
  %130 = load i8, i8* %23, align 1
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, 85
  %133 = load i8, i8* %116, align 1
  %134 = zext i8 %133 to i32
  %135 = mul nuw nsw i32 %134, 149
  %136 = add nuw nsw i32 %118, %132
  %137 = add nuw nsw i32 %136, %30
  %138 = add nuw nsw i32 %137, %135
  %139 = lshr i32 %138, 9
  %140 = trunc i32 %139 to i8
  %141 = getelementptr inbounds i8, i8* %115, i64 1
  store i8 %140, i8* %141, align 1
  %142 = load i8, i8* %37, align 1
  %143 = zext i8 %142 to i32
  %144 = mul nuw nsw i32 %143, 85
  %145 = load i8, i8* %116, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nuw nsw i32 %146, 85
  %148 = add nuw nsw i32 %118, %144
  %149 = add nuw nsw i32 %148, %44
  %150 = add nuw nsw i32 %149, %147
  %151 = lshr i32 %150, 9
  %152 = trunc i32 %151 to i8
  %153 = getelementptr inbounds i8, i8* %115, i64 2
  store i8 %152, i8* %153, align 1
  %154 = load i8, i8* %5, align 1
  %155 = zext i8 %154 to i32
  %156 = mul nuw nsw i32 %155, 85
  %157 = load i8, i8* %116, align 1
  %158 = zext i8 %157 to i32
  %159 = shl nuw nsw i32 %158, 6
  %160 = add nuw nsw i32 %118, %156
  %161 = add nuw nsw i32 %160, %57
  %162 = add nuw nsw i32 %161, %159
  %163 = lshr i32 %162, 9
  %164 = trunc i32 %163 to i8
  %165 = getelementptr inbounds i8, i8* %115, i64 3
  store i8 %164, i8* %165, align 1
  %166 = getelementptr inbounds i8, i8* %115, i64 %1
  %167 = mul nuw nsw i32 %9, 192
  %168 = add nuw nsw i32 %167, 256
  %169 = load i8, i8* %2, align 1
  %170 = zext i8 %169 to i32
  %171 = shl nuw nsw i32 %170, 6
  %172 = load i8, i8* %7, align 1
  %173 = zext i8 %172 to i32
  %174 = mul nuw nsw i32 %173, 255
  %175 = add nuw nsw i32 %168, %171
  %176 = add nuw nsw i32 %175, %10
  %177 = add nuw nsw i32 %176, %174
  %178 = lshr i32 %177, 9
  %179 = trunc i32 %178 to i8
  store i8 %179, i8* %166, align 1
  %180 = load i8, i8* %23, align 1
  %181 = zext i8 %180 to i32
  %182 = shl nuw nsw i32 %181, 6
  %183 = load i8, i8* %7, align 1
  %184 = zext i8 %183 to i32
  %185 = mul nuw nsw i32 %184, 149
  %186 = add nuw nsw i32 %168, %182
  %187 = add nuw nsw i32 %186, %30
  %188 = add nuw nsw i32 %187, %185
  %189 = lshr i32 %188, 9
  %190 = trunc i32 %189 to i8
  %191 = getelementptr inbounds i8, i8* %166, i64 1
  store i8 %190, i8* %191, align 1
  %192 = load i8, i8* %37, align 1
  %193 = zext i8 %192 to i32
  %194 = shl nuw nsw i32 %193, 6
  %195 = load i8, i8* %7, align 1
  %196 = zext i8 %195 to i32
  %197 = mul nuw nsw i32 %196, 85
  %198 = add nuw nsw i32 %168, %194
  %199 = add nuw nsw i32 %198, %44
  %200 = add nuw nsw i32 %199, %197
  %201 = lshr i32 %200, 9
  %202 = trunc i32 %201 to i8
  %203 = getelementptr inbounds i8, i8* %166, i64 2
  store i8 %202, i8* %203, align 1
  %204 = load i8, i8* %5, align 1
  %205 = zext i8 %204 to i32
  %206 = shl nuw nsw i32 %205, 6
  %207 = load i8, i8* %7, align 1
  %208 = zext i8 %207 to i32
  %209 = shl nuw nsw i32 %208, 6
  %210 = add nuw nsw i32 %168, %206
  %211 = add nuw nsw i32 %210, %57
  %212 = add nuw nsw i32 %211, %209
  %213 = lshr i32 %212, 9
  %214 = trunc i32 %213 to i8
  %215 = getelementptr inbounds i8, i8* %166, i64 3
  store i8 %214, i8* %215, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, 128
  %9 = load i8, i8* %2, align 1
  %10 = zext i8 %9 to i32
  %11 = mul nuw nsw i32 %10, 255
  %12 = add nuw nsw i32 %8, %11
  %13 = lshr i32 %12, 8
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %0, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nuw nsw i32 %17, 255
  %19 = add nuw nsw i32 %8, %18
  %20 = lshr i32 %19, 8
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %2, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = mul nuw nsw i32 %25, 255
  %27 = add nuw nsw i32 %8, %26
  %28 = lshr i32 %27, 8
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %2, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = mul nuw nsw i32 %33, 255
  %35 = add nuw nsw i32 %8, %34
  %36 = lshr i32 %35, 8
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %0, i64 %1
  %40 = mul nuw nsw i32 %7, 107
  %41 = add nuw nsw i32 %40, 128
  %42 = load i8, i8* %2, align 1
  %43 = zext i8 %42 to i32
  %44 = mul nuw nsw i32 %43, 149
  %45 = add nuw nsw i32 %41, %44
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %39, align 1
  %48 = load i8, i8* %15, align 1
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, 149
  %51 = add nuw nsw i32 %41, %50
  %52 = lshr i32 %51, 8
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 %53, i8* %54, align 1
  %55 = load i8, i8* %23, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %56, 149
  %58 = add nuw nsw i32 %41, %57
  %59 = lshr i32 %58, 8
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds i8, i8* %39, i64 2
  store i8 %60, i8* %61, align 1
  %62 = load i8, i8* %31, align 1
  %63 = zext i8 %62 to i32
  %64 = mul nuw nsw i32 %63, 149
  %65 = add nuw nsw i32 %41, %64
  %66 = lshr i32 %65, 8
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %39, i64 3
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %39, i64 %1
  %70 = mul nuw nsw i32 %7, 171
  %71 = add nuw nsw i32 %70, 128
  %72 = load i8, i8* %2, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nuw nsw i32 %73, 85
  %75 = add nuw nsw i32 %71, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %69, align 1
  %78 = load i8, i8* %15, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nuw nsw i32 %79, 85
  %81 = add nuw nsw i32 %71, %80
  %82 = lshr i32 %81, 8
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 %83, i8* %84, align 1
  %85 = load i8, i8* %23, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, 85
  %88 = add nuw nsw i32 %71, %87
  %89 = lshr i32 %88, 8
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds i8, i8* %69, i64 2
  store i8 %90, i8* %91, align 1
  %92 = load i8, i8* %31, align 1
  %93 = zext i8 %92 to i32
  %94 = mul nuw nsw i32 %93, 85
  %95 = add nuw nsw i32 %71, %94
  %96 = lshr i32 %95, 8
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %69, i64 3
  store i8 %97, i8* %98, align 1
  %99 = getelementptr inbounds i8, i8* %69, i64 %1
  %100 = mul nuw nsw i32 %7, 192
  %101 = add nuw nsw i32 %100, 128
  %102 = load i8, i8* %2, align 1
  %103 = zext i8 %102 to i32
  %104 = shl nuw nsw i32 %103, 6
  %105 = add nuw nsw i32 %101, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %99, align 1
  %108 = load i8, i8* %15, align 1
  %109 = zext i8 %108 to i32
  %110 = shl nuw nsw i32 %109, 6
  %111 = add nuw nsw i32 %101, %110
  %112 = lshr i32 %111, 8
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %99, i64 1
  store i8 %113, i8* %114, align 1
  %115 = load i8, i8* %23, align 1
  %116 = zext i8 %115 to i32
  %117 = shl nuw nsw i32 %116, 6
  %118 = add nuw nsw i32 %101, %117
  %119 = lshr i32 %118, 8
  %120 = trunc i32 %119 to i8
  %121 = getelementptr inbounds i8, i8* %99, i64 2
  store i8 %120, i8* %121, align 1
  %122 = load i8, i8* %31, align 1
  %123 = zext i8 %122 to i32
  %124 = shl nuw nsw i32 %123, 6
  %125 = add nuw nsw i32 %101, %124
  %126 = lshr i32 %125, 8
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %99, i64 3
  store i8 %127, i8* %128, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = load i8, i8* %3, align 1
  %9 = zext i8 %8 to i32
  %10 = mul nuw nsw i32 %9, 255
  %11 = add nuw nsw i32 %7, 128
  %12 = add nuw nsw i32 %11, %10
  %13 = lshr i32 %12, 8
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %0, align 1
  %15 = load i8, i8* %3, align 1
  %16 = zext i8 %15 to i32
  %17 = mul nuw nsw i32 %16, 149
  %18 = mul nuw nsw i32 %7, 107
  %19 = add nuw nsw i32 %18, 128
  %20 = add nuw nsw i32 %19, %17
  %21 = lshr i32 %20, 8
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %22, i8* %23, align 1
  %24 = load i8, i8* %3, align 1
  %25 = zext i8 %24 to i32
  %26 = mul nuw nsw i32 %25, 85
  %27 = mul nuw nsw i32 %7, 171
  %28 = add nuw nsw i32 %27, 128
  %29 = add nuw nsw i32 %28, %26
  %30 = lshr i32 %29, 8
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %31, i8* %32, align 1
  %33 = load i8, i8* %3, align 1
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 6
  %36 = mul nuw nsw i32 %7, 192
  %37 = add nuw nsw i32 %36, 128
  %38 = add nuw nsw i32 %37, %35
  %39 = lshr i32 %38, 8
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %0, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = mul nuw nsw i32 %45, 255
  %47 = add nuw nsw i32 %11, %46
  %48 = lshr i32 %47, 8
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %42, align 1
  %50 = load i8, i8* %43, align 1
  %51 = zext i8 %50 to i32
  %52 = mul nuw nsw i32 %51, 149
  %53 = add nuw nsw i32 %19, %52
  %54 = lshr i32 %53, 8
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %55, i8* %56, align 1
  %57 = load i8, i8* %43, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nuw nsw i32 %58, 85
  %60 = add nuw nsw i32 %28, %59
  %61 = lshr i32 %60, 8
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %42, i64 2
  store i8 %62, i8* %63, align 1
  %64 = load i8, i8* %43, align 1
  %65 = zext i8 %64 to i32
  %66 = shl nuw nsw i32 %65, 6
  %67 = add nuw nsw i32 %37, %66
  %68 = lshr i32 %67, 8
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %42, i64 3
  store i8 %69, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %42, i64 %1
  %72 = getelementptr inbounds i8, i8* %3, i64 2
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, 255
  %76 = add nuw nsw i32 %11, %75
  %77 = lshr i32 %76, 8
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %71, align 1
  %79 = load i8, i8* %72, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nuw nsw i32 %80, 149
  %82 = add nuw nsw i32 %19, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i8
  %85 = getelementptr inbounds i8, i8* %71, i64 1
  store i8 %84, i8* %85, align 1
  %86 = load i8, i8* %72, align 1
  %87 = zext i8 %86 to i32
  %88 = mul nuw nsw i32 %87, 85
  %89 = add nuw nsw i32 %28, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %71, i64 2
  store i8 %91, i8* %92, align 1
  %93 = load i8, i8* %72, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 6
  %96 = add nuw nsw i32 %37, %95
  %97 = lshr i32 %96, 8
  %98 = trunc i32 %97 to i8
  %99 = getelementptr inbounds i8, i8* %71, i64 3
  store i8 %98, i8* %99, align 1
  %100 = getelementptr inbounds i8, i8* %71, i64 %1
  %101 = getelementptr inbounds i8, i8* %3, i64 3
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %103, 255
  %105 = add nuw nsw i32 %11, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %100, align 1
  %108 = load i8, i8* %101, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %109, 149
  %111 = add nuw nsw i32 %19, %110
  %112 = lshr i32 %111, 8
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %100, i64 1
  store i8 %113, i8* %114, align 1
  %115 = load i8, i8* %101, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %116, 85
  %118 = add nuw nsw i32 %28, %117
  %119 = lshr i32 %118, 8
  %120 = trunc i32 %119 to i8
  %121 = getelementptr inbounds i8, i8* %100, i64 2
  store i8 %120, i8* %121, align 1
  %122 = load i8, i8* %101, align 1
  %123 = zext i8 %122 to i32
  %124 = shl nuw nsw i32 %123, 6
  %125 = add nuw nsw i32 %37, %124
  %126 = lshr i32 %125, 8
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %100, i64 3
  store i8 %127, i8* %128, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi8ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %0 to i32*
  store i32 -2139062144, i32* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to i32*
  store i32 -2139062144, i32* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to i32*
  store i32 -2139062144, i32* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to i32*
  store i32 -2139062144, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to i32*
  store i32 -2139062144, i32* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to i32*
  store i32 -2139062144, i32* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to i32*
  store i32 -2139062144, i32* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to i32*
  store i32 -2139062144, i32* %19, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 2
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = lshr i32 %19, 2
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 4, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 4, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 4, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 4, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 4, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 4, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 4, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <8 x i8>*
  %6 = load <8 x i8>, <8 x i8>* %5, align 1
  %7 = zext <8 x i8> %6 to <8 x i32>
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <8 x i32> %8, %7
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <8 x i32> %9, %10
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <8 x i32> %11, %12
  %14 = extractelement <8 x i32> %13, i32 0
  %15 = add nuw nsw i32 %14, 4
  %16 = lshr i32 %15, 3
  %17 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %17, i64 4, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %17, i64 4, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %17, i64 4, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %17, i64 4, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %17, i64 4, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %17, i64 4, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %17, i64 4, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %17, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = add nuw nsw i16 %6, 6
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = add nuw nsw i16 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i16
  %15 = add nuw nsw i16 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = add nuw nsw i16 %15, %18
  %20 = load i8, i8* %3, align 1
  %21 = zext i8 %20 to i16
  %22 = add nuw nsw i16 %19, %21
  %23 = getelementptr inbounds i8, i8* %3, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  %26 = add nuw nsw i16 %22, %25
  %27 = getelementptr inbounds i8, i8* %3, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i16
  %30 = add i16 %26, %29
  %31 = getelementptr inbounds i8, i8* %3, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i16
  %34 = add i16 %30, %33
  %35 = getelementptr inbounds i8, i8* %3, i64 4
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i16
  %38 = add i16 %34, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 5
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  %42 = add i16 %38, %41
  %43 = getelementptr inbounds i8, i8* %3, i64 6
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = add i16 %42, %45
  %47 = getelementptr inbounds i8, i8* %3, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = add i16 %46, %49
  %51 = udiv i16 %50, 12
  %52 = trunc i16 %51 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %52, i64 4, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %52, i64 4, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %52, i64 4, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 %52, i64 4, i1 false) #5
  %56 = getelementptr inbounds i8, i8* %55, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 %52, i64 4, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %56, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %52, i64 4, i1 false) #5
  %58 = getelementptr inbounds i8, i8* %57, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 %52, i64 4, i1 false) #5
  %59 = getelementptr inbounds i8, i8* %58, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 %52, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i32*
  %6 = bitcast i8* %0 to i32*
  %7 = load i32, i32* %5, align 1
  store i32 %7, i32* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %5, align 1
  store i32 %10, i32* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %5, align 1
  store i32 %13, i32* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %5, align 1
  store i32 %16, i32* %15, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %5, align 1
  store i32 %19, i32* %18, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 %1
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %5, align 1
  store i32 %22, i32* %21, align 1
  %23 = getelementptr inbounds i8, i8* %20, i64 %1
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %5, align 1
  store i32 %25, i32* %24, align 1
  %26 = getelementptr inbounds i8, i8* %23, i64 %1
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %5, align 1
  store i32 %28, i32* %27, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 4, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 4, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 4, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 4, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 4, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 4, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 4, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  %9 = getelementptr inbounds i8, i8* %2, i64 1
  %10 = getelementptr inbounds i8, i8* %2, i64 2
  %11 = getelementptr inbounds i8, i8* %2, i64 3
  br label %13

12:                                               ; preds = %102
  ret void

13:                                               ; preds = %102, %4
  %14 = phi i64 [ 0, %4 ], [ %104, %102 ]
  %15 = phi i8* [ %0, %4 ], [ %103, %102 ]
  %16 = getelementptr inbounds i8, i8* %3, i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 %18, %7
  %20 = icmp slt i32 %19, 0
  %21 = sub nsw i32 0, %19
  %22 = select i1 %20, i32 %21, i32 %19
  %23 = sub nsw i32 %18, %8
  %24 = load i8, i8* %2, align 1
  %25 = zext i8 %24 to i32
  %26 = sub nsw i32 %25, %7
  %27 = icmp slt i32 %26, 0
  %28 = sub nsw i32 0, %26
  %29 = select i1 %27, i32 %28, i32 %26
  %30 = add nsw i32 %23, %25
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = icmp sgt i32 %29, %22
  %35 = icmp sgt i32 %29, %33
  %36 = or i1 %34, %35
  %37 = icmp sgt i32 %22, %33
  %38 = select i1 %37, i8 %6, i8 %24
  %39 = select i1 %36, i8 %38, i8 %17
  store i8 %39, i8* %15, align 1
  %40 = load i8, i8* %9, align 1
  %41 = zext i8 %40 to i32
  %42 = sub nsw i32 %41, %7
  %43 = icmp slt i32 %42, 0
  %44 = sub nsw i32 0, %42
  %45 = select i1 %43, i32 %44, i32 %42
  %46 = add nsw i32 %23, %41
  %47 = icmp slt i32 %46, 0
  %48 = sub nsw i32 0, %46
  %49 = select i1 %47, i32 %48, i32 %46
  %50 = icmp sgt i32 %45, %22
  %51 = icmp sgt i32 %45, %49
  %52 = or i1 %50, %51
  br i1 %52, label %55, label %53

53:                                               ; preds = %13
  %54 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %17, i8* %54, align 1
  br label %60

55:                                               ; preds = %13
  %56 = icmp sgt i32 %22, %49
  %57 = getelementptr inbounds i8, i8* %15, i64 1
  br i1 %56, label %59, label %58

58:                                               ; preds = %55
  store i8 %40, i8* %57, align 1
  br label %60

59:                                               ; preds = %55
  store i8 %6, i8* %57, align 1
  br label %60

60:                                               ; preds = %59, %58, %53
  %61 = load i8, i8* %10, align 1
  %62 = zext i8 %61 to i32
  %63 = sub nsw i32 %62, %7
  %64 = icmp slt i32 %63, 0
  %65 = sub nsw i32 0, %63
  %66 = select i1 %64, i32 %65, i32 %63
  %67 = add nsw i32 %23, %62
  %68 = icmp slt i32 %67, 0
  %69 = sub nsw i32 0, %67
  %70 = select i1 %68, i32 %69, i32 %67
  %71 = icmp sgt i32 %66, %22
  %72 = icmp sgt i32 %66, %70
  %73 = or i1 %71, %72
  br i1 %73, label %76, label %74

74:                                               ; preds = %60
  %75 = getelementptr inbounds i8, i8* %15, i64 2
  store i8 %17, i8* %75, align 1
  br label %81

76:                                               ; preds = %60
  %77 = icmp sgt i32 %22, %70
  %78 = getelementptr inbounds i8, i8* %15, i64 2
  br i1 %77, label %80, label %79

79:                                               ; preds = %76
  store i8 %61, i8* %78, align 1
  br label %81

80:                                               ; preds = %76
  store i8 %6, i8* %78, align 1
  br label %81

81:                                               ; preds = %80, %79, %74
  %82 = load i8, i8* %11, align 1
  %83 = zext i8 %82 to i32
  %84 = sub nsw i32 %83, %7
  %85 = icmp slt i32 %84, 0
  %86 = sub nsw i32 0, %84
  %87 = select i1 %85, i32 %86, i32 %84
  %88 = add nsw i32 %23, %83
  %89 = icmp slt i32 %88, 0
  %90 = sub nsw i32 0, %88
  %91 = select i1 %89, i32 %90, i32 %88
  %92 = icmp sgt i32 %87, %22
  %93 = icmp sgt i32 %87, %91
  %94 = or i1 %92, %93
  br i1 %94, label %97, label %95

95:                                               ; preds = %81
  %96 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %17, i8* %96, align 1
  br label %102

97:                                               ; preds = %81
  %98 = icmp sgt i32 %22, %91
  %99 = getelementptr inbounds i8, i8* %15, i64 3
  br i1 %98, label %101, label %100

100:                                              ; preds = %97
  store i8 %82, i8* %99, align 1
  br label %102

101:                                              ; preds = %97
  store i8 %6, i8* %99, align 1
  br label %102

102:                                              ; preds = %101, %100, %95
  %103 = getelementptr inbounds i8, i8* %15, i64 %1
  %104 = add nuw nsw i64 %14, 1
  %105 = icmp eq i64 %104, 8
  br i1 %105, label %12, label %13
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 7
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  %12 = mul nuw nsw i32 %10, 107
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  %14 = mul nuw nsw i32 %10, 171
  %15 = mul nuw nsw i32 %10, 192
  br label %16

16:                                               ; preds = %16, %4
  %17 = phi i64 [ 0, %4 ], [ %75, %16 ]
  %18 = phi i8* [ %0, %4 ], [ %74, %16 ]
  %19 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %17
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %3, i64 %17
  %23 = sub i8 0, %20
  %24 = zext i8 %23 to i32
  %25 = mul nuw nsw i32 %24, %9
  %26 = add nuw nsw i32 %25, 256
  %27 = load i8, i8* %2, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, %21
  %30 = load i8, i8* %22, align 1
  %31 = zext i8 %30 to i32
  %32 = mul nuw nsw i32 %31, 255
  %33 = add nuw nsw i32 %26, %29
  %34 = add nuw nsw i32 %33, %10
  %35 = add nuw nsw i32 %34, %32
  %36 = lshr i32 %35, 9
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %18, align 1
  %38 = load i8, i8* %11, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, %21
  %41 = load i8, i8* %22, align 1
  %42 = zext i8 %41 to i32
  %43 = mul nuw nsw i32 %42, 149
  %44 = add nuw nsw i32 %26, %40
  %45 = add nuw nsw i32 %44, %12
  %46 = add nuw nsw i32 %45, %43
  %47 = lshr i32 %46, 9
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %48, i8* %49, align 1
  %50 = load i8, i8* %13, align 1
  %51 = zext i8 %50 to i32
  %52 = mul nuw nsw i32 %51, %21
  %53 = load i8, i8* %22, align 1
  %54 = zext i8 %53 to i32
  %55 = mul nuw nsw i32 %54, 85
  %56 = add nuw nsw i32 %26, %52
  %57 = add nuw nsw i32 %56, %14
  %58 = add nuw nsw i32 %57, %55
  %59 = lshr i32 %58, 9
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds i8, i8* %18, i64 2
  store i8 %60, i8* %61, align 1
  %62 = load i8, i8* %5, align 1
  %63 = zext i8 %62 to i32
  %64 = mul nuw nsw i32 %63, %21
  %65 = load i8, i8* %22, align 1
  %66 = zext i8 %65 to i32
  %67 = shl nuw nsw i32 %66, 6
  %68 = add nuw nsw i32 %26, %64
  %69 = add nuw nsw i32 %68, %15
  %70 = add nuw nsw i32 %69, %67
  %71 = lshr i32 %70, 9
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %18, i64 3
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds i8, i8* %18, i64 %1
  %75 = add nuw nsw i64 %17, 1
  %76 = icmp eq i64 %75, 8
  br i1 %76, label %77, label %16

77:                                               ; preds = %16
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, 128
  %9 = load i8, i8* %2, align 1
  %10 = zext i8 %9 to i32
  %11 = mul nuw nsw i32 %10, 255
  %12 = add nuw nsw i32 %8, %11
  %13 = lshr i32 %12, 8
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %0, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nuw nsw i32 %17, 255
  %19 = add nuw nsw i32 %8, %18
  %20 = lshr i32 %19, 8
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %2, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = mul nuw nsw i32 %25, 255
  %27 = add nuw nsw i32 %8, %26
  %28 = lshr i32 %27, 8
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %2, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = mul nuw nsw i32 %33, 255
  %35 = add nuw nsw i32 %8, %34
  %36 = lshr i32 %35, 8
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %0, i64 %1
  %40 = mul nuw nsw i32 %7, 59
  %41 = add nuw nsw i32 %40, 128
  %42 = load i8, i8* %2, align 1
  %43 = zext i8 %42 to i32
  %44 = mul nuw nsw i32 %43, 197
  %45 = add nuw nsw i32 %41, %44
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %39, align 1
  %48 = load i8, i8* %15, align 1
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, 197
  %51 = add nuw nsw i32 %41, %50
  %52 = lshr i32 %51, 8
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 %53, i8* %54, align 1
  %55 = load i8, i8* %23, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %56, 197
  %58 = add nuw nsw i32 %41, %57
  %59 = lshr i32 %58, 8
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds i8, i8* %39, i64 2
  store i8 %60, i8* %61, align 1
  %62 = load i8, i8* %31, align 1
  %63 = zext i8 %62 to i32
  %64 = mul nuw nsw i32 %63, 197
  %65 = add nuw nsw i32 %41, %64
  %66 = lshr i32 %65, 8
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %39, i64 3
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %39, i64 %1
  %70 = mul nuw nsw i32 %7, 110
  %71 = add nuw nsw i32 %70, 128
  %72 = load i8, i8* %2, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nuw nsw i32 %73, 146
  %75 = add nuw nsw i32 %71, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %69, align 1
  %78 = load i8, i8* %15, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nuw nsw i32 %79, 146
  %81 = add nuw nsw i32 %71, %80
  %82 = lshr i32 %81, 8
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 %83, i8* %84, align 1
  %85 = load i8, i8* %23, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, 146
  %88 = add nuw nsw i32 %71, %87
  %89 = lshr i32 %88, 8
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds i8, i8* %69, i64 2
  store i8 %90, i8* %91, align 1
  %92 = load i8, i8* %31, align 1
  %93 = zext i8 %92 to i32
  %94 = mul nuw nsw i32 %93, 146
  %95 = add nuw nsw i32 %71, %94
  %96 = lshr i32 %95, 8
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %69, i64 3
  store i8 %97, i8* %98, align 1
  %99 = getelementptr inbounds i8, i8* %69, i64 %1
  %100 = mul nuw nsw i32 %7, 151
  %101 = add nuw nsw i32 %100, 128
  %102 = load i8, i8* %2, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %103, 105
  %105 = add nuw nsw i32 %101, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %99, align 1
  %108 = load i8, i8* %15, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %109, 105
  %111 = add nuw nsw i32 %101, %110
  %112 = lshr i32 %111, 8
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %99, i64 1
  store i8 %113, i8* %114, align 1
  %115 = load i8, i8* %23, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %116, 105
  %118 = add nuw nsw i32 %101, %117
  %119 = lshr i32 %118, 8
  %120 = trunc i32 %119 to i8
  %121 = getelementptr inbounds i8, i8* %99, i64 2
  store i8 %120, i8* %121, align 1
  %122 = load i8, i8* %31, align 1
  %123 = zext i8 %122 to i32
  %124 = mul nuw nsw i32 %123, 105
  %125 = add nuw nsw i32 %101, %124
  %126 = lshr i32 %125, 8
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %99, i64 3
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %99, i64 %1
  %130 = mul nuw nsw i32 %7, 183
  %131 = add nuw nsw i32 %130, 128
  %132 = load i8, i8* %2, align 1
  %133 = zext i8 %132 to i32
  %134 = mul nuw nsw i32 %133, 73
  %135 = add nuw nsw i32 %131, %134
  %136 = lshr i32 %135, 8
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %129, align 1
  %138 = load i8, i8* %15, align 1
  %139 = zext i8 %138 to i32
  %140 = mul nuw nsw i32 %139, 73
  %141 = add nuw nsw i32 %131, %140
  %142 = lshr i32 %141, 8
  %143 = trunc i32 %142 to i8
  %144 = getelementptr inbounds i8, i8* %129, i64 1
  store i8 %143, i8* %144, align 1
  %145 = load i8, i8* %23, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nuw nsw i32 %146, 73
  %148 = add nuw nsw i32 %131, %147
  %149 = lshr i32 %148, 8
  %150 = trunc i32 %149 to i8
  %151 = getelementptr inbounds i8, i8* %129, i64 2
  store i8 %150, i8* %151, align 1
  %152 = load i8, i8* %31, align 1
  %153 = zext i8 %152 to i32
  %154 = mul nuw nsw i32 %153, 73
  %155 = add nuw nsw i32 %131, %154
  %156 = lshr i32 %155, 8
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds i8, i8* %129, i64 3
  store i8 %157, i8* %158, align 1
  %159 = getelementptr inbounds i8, i8* %129, i64 %1
  %160 = mul nuw nsw i32 %7, 206
  %161 = add nuw nsw i32 %160, 128
  %162 = load i8, i8* %2, align 1
  %163 = zext i8 %162 to i32
  %164 = mul nuw nsw i32 %163, 50
  %165 = add nuw nsw i32 %161, %164
  %166 = lshr i32 %165, 8
  %167 = trunc i32 %166 to i8
  store i8 %167, i8* %159, align 1
  %168 = load i8, i8* %15, align 1
  %169 = zext i8 %168 to i32
  %170 = mul nuw nsw i32 %169, 50
  %171 = add nuw nsw i32 %161, %170
  %172 = lshr i32 %171, 8
  %173 = trunc i32 %172 to i8
  %174 = getelementptr inbounds i8, i8* %159, i64 1
  store i8 %173, i8* %174, align 1
  %175 = load i8, i8* %23, align 1
  %176 = zext i8 %175 to i32
  %177 = mul nuw nsw i32 %176, 50
  %178 = add nuw nsw i32 %161, %177
  %179 = lshr i32 %178, 8
  %180 = trunc i32 %179 to i8
  %181 = getelementptr inbounds i8, i8* %159, i64 2
  store i8 %180, i8* %181, align 1
  %182 = load i8, i8* %31, align 1
  %183 = zext i8 %182 to i32
  %184 = mul nuw nsw i32 %183, 50
  %185 = add nuw nsw i32 %161, %184
  %186 = lshr i32 %185, 8
  %187 = trunc i32 %186 to i8
  %188 = getelementptr inbounds i8, i8* %159, i64 3
  store i8 %187, i8* %188, align 1
  %189 = getelementptr inbounds i8, i8* %159, i64 %1
  %190 = mul nuw nsw i32 %7, 219
  %191 = add nuw nsw i32 %190, 128
  %192 = load i8, i8* %2, align 1
  %193 = zext i8 %192 to i32
  %194 = mul nuw nsw i32 %193, 37
  %195 = add nuw nsw i32 %191, %194
  %196 = lshr i32 %195, 8
  %197 = trunc i32 %196 to i8
  store i8 %197, i8* %189, align 1
  %198 = load i8, i8* %15, align 1
  %199 = zext i8 %198 to i32
  %200 = mul nuw nsw i32 %199, 37
  %201 = add nuw nsw i32 %191, %200
  %202 = lshr i32 %201, 8
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds i8, i8* %189, i64 1
  store i8 %203, i8* %204, align 1
  %205 = load i8, i8* %23, align 1
  %206 = zext i8 %205 to i32
  %207 = mul nuw nsw i32 %206, 37
  %208 = add nuw nsw i32 %191, %207
  %209 = lshr i32 %208, 8
  %210 = trunc i32 %209 to i8
  %211 = getelementptr inbounds i8, i8* %189, i64 2
  store i8 %210, i8* %211, align 1
  %212 = load i8, i8* %31, align 1
  %213 = zext i8 %212 to i32
  %214 = mul nuw nsw i32 %213, 37
  %215 = add nuw nsw i32 %191, %214
  %216 = lshr i32 %215, 8
  %217 = trunc i32 %216 to i8
  %218 = getelementptr inbounds i8, i8* %189, i64 3
  store i8 %217, i8* %218, align 1
  %219 = getelementptr inbounds i8, i8* %189, i64 %1
  %220 = mul nuw nsw i32 %7, 224
  %221 = add nuw nsw i32 %220, 128
  %222 = load i8, i8* %2, align 1
  %223 = zext i8 %222 to i32
  %224 = shl nuw nsw i32 %223, 5
  %225 = add nuw nsw i32 %221, %224
  %226 = lshr i32 %225, 8
  %227 = trunc i32 %226 to i8
  store i8 %227, i8* %219, align 1
  %228 = load i8, i8* %15, align 1
  %229 = zext i8 %228 to i32
  %230 = shl nuw nsw i32 %229, 5
  %231 = add nuw nsw i32 %221, %230
  %232 = lshr i32 %231, 8
  %233 = trunc i32 %232 to i8
  %234 = getelementptr inbounds i8, i8* %219, i64 1
  store i8 %233, i8* %234, align 1
  %235 = load i8, i8* %23, align 1
  %236 = zext i8 %235 to i32
  %237 = shl nuw nsw i32 %236, 5
  %238 = add nuw nsw i32 %221, %237
  %239 = lshr i32 %238, 8
  %240 = trunc i32 %239 to i8
  %241 = getelementptr inbounds i8, i8* %219, i64 2
  store i8 %240, i8* %241, align 1
  %242 = load i8, i8* %31, align 1
  %243 = zext i8 %242 to i32
  %244 = shl nuw nsw i32 %243, 5
  %245 = add nuw nsw i32 %221, %244
  %246 = lshr i32 %245, 8
  %247 = trunc i32 %246 to i8
  %248 = getelementptr inbounds i8, i8* %219, i64 3
  store i8 %247, i8* %248, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, 128
  %9 = mul nuw nsw i32 %7, 107
  %10 = add nuw nsw i32 %9, 128
  %11 = mul nuw nsw i32 %7, 171
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %7, 192
  %14 = add nuw nsw i32 %13, 128
  %15 = load i8, i8* %3, align 1
  %16 = zext i8 %15 to i32
  %17 = mul nuw nsw i32 %16, 255
  %18 = add nuw nsw i32 %8, %17
  %19 = lshr i32 %18, 8
  %20 = trunc i32 %19 to i8
  store i8 %20, i8* %0, align 1
  %21 = load i8, i8* %3, align 1
  %22 = zext i8 %21 to i32
  %23 = mul nuw nsw i32 %22, 149
  %24 = add nuw nsw i32 %10, %23
  %25 = lshr i32 %24, 8
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %26, i8* %27, align 1
  %28 = load i8, i8* %3, align 1
  %29 = zext i8 %28 to i32
  %30 = mul nuw nsw i32 %29, 85
  %31 = add nuw nsw i32 %12, %30
  %32 = lshr i32 %31, 8
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %33, i8* %34, align 1
  %35 = load i8, i8* %3, align 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 6
  %38 = add nuw nsw i32 %14, %37
  %39 = lshr i32 %38, 8
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %0, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = mul nuw nsw i32 %45, 255
  %47 = add nuw nsw i32 %8, %46
  %48 = lshr i32 %47, 8
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %42, align 1
  %50 = load i8, i8* %43, align 1
  %51 = zext i8 %50 to i32
  %52 = mul nuw nsw i32 %51, 149
  %53 = add nuw nsw i32 %10, %52
  %54 = lshr i32 %53, 8
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %55, i8* %56, align 1
  %57 = load i8, i8* %43, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nuw nsw i32 %58, 85
  %60 = add nuw nsw i32 %12, %59
  %61 = lshr i32 %60, 8
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %42, i64 2
  store i8 %62, i8* %63, align 1
  %64 = load i8, i8* %43, align 1
  %65 = zext i8 %64 to i32
  %66 = shl nuw nsw i32 %65, 6
  %67 = add nuw nsw i32 %14, %66
  %68 = lshr i32 %67, 8
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %42, i64 3
  store i8 %69, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %42, i64 %1
  %72 = getelementptr inbounds i8, i8* %3, i64 2
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, 255
  %76 = add nuw nsw i32 %8, %75
  %77 = lshr i32 %76, 8
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %71, align 1
  %79 = load i8, i8* %72, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nuw nsw i32 %80, 149
  %82 = add nuw nsw i32 %10, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i8
  %85 = getelementptr inbounds i8, i8* %71, i64 1
  store i8 %84, i8* %85, align 1
  %86 = load i8, i8* %72, align 1
  %87 = zext i8 %86 to i32
  %88 = mul nuw nsw i32 %87, 85
  %89 = add nuw nsw i32 %12, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %71, i64 2
  store i8 %91, i8* %92, align 1
  %93 = load i8, i8* %72, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 6
  %96 = add nuw nsw i32 %14, %95
  %97 = lshr i32 %96, 8
  %98 = trunc i32 %97 to i8
  %99 = getelementptr inbounds i8, i8* %71, i64 3
  store i8 %98, i8* %99, align 1
  %100 = getelementptr inbounds i8, i8* %71, i64 %1
  %101 = getelementptr inbounds i8, i8* %3, i64 3
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %103, 255
  %105 = add nuw nsw i32 %8, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %100, align 1
  %108 = load i8, i8* %101, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %109, 149
  %111 = add nuw nsw i32 %10, %110
  %112 = lshr i32 %111, 8
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %100, i64 1
  store i8 %113, i8* %114, align 1
  %115 = load i8, i8* %101, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %116, 85
  %118 = add nuw nsw i32 %12, %117
  %119 = lshr i32 %118, 8
  %120 = trunc i32 %119 to i8
  %121 = getelementptr inbounds i8, i8* %100, i64 2
  store i8 %120, i8* %121, align 1
  %122 = load i8, i8* %101, align 1
  %123 = zext i8 %122 to i32
  %124 = shl nuw nsw i32 %123, 6
  %125 = add nuw nsw i32 %14, %124
  %126 = lshr i32 %125, 8
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %100, i64 3
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %100, i64 %1
  %130 = getelementptr inbounds i8, i8* %3, i64 4
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = mul nuw nsw i32 %132, 255
  %134 = add nuw nsw i32 %8, %133
  %135 = lshr i32 %134, 8
  %136 = trunc i32 %135 to i8
  store i8 %136, i8* %129, align 1
  %137 = load i8, i8* %130, align 1
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, 149
  %140 = add nuw nsw i32 %10, %139
  %141 = lshr i32 %140, 8
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds i8, i8* %129, i64 1
  store i8 %142, i8* %143, align 1
  %144 = load i8, i8* %130, align 1
  %145 = zext i8 %144 to i32
  %146 = mul nuw nsw i32 %145, 85
  %147 = add nuw nsw i32 %12, %146
  %148 = lshr i32 %147, 8
  %149 = trunc i32 %148 to i8
  %150 = getelementptr inbounds i8, i8* %129, i64 2
  store i8 %149, i8* %150, align 1
  %151 = load i8, i8* %130, align 1
  %152 = zext i8 %151 to i32
  %153 = shl nuw nsw i32 %152, 6
  %154 = add nuw nsw i32 %14, %153
  %155 = lshr i32 %154, 8
  %156 = trunc i32 %155 to i8
  %157 = getelementptr inbounds i8, i8* %129, i64 3
  store i8 %156, i8* %157, align 1
  %158 = getelementptr inbounds i8, i8* %129, i64 %1
  %159 = getelementptr inbounds i8, i8* %3, i64 5
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = mul nuw nsw i32 %161, 255
  %163 = add nuw nsw i32 %8, %162
  %164 = lshr i32 %163, 8
  %165 = trunc i32 %164 to i8
  store i8 %165, i8* %158, align 1
  %166 = load i8, i8* %159, align 1
  %167 = zext i8 %166 to i32
  %168 = mul nuw nsw i32 %167, 149
  %169 = add nuw nsw i32 %10, %168
  %170 = lshr i32 %169, 8
  %171 = trunc i32 %170 to i8
  %172 = getelementptr inbounds i8, i8* %158, i64 1
  store i8 %171, i8* %172, align 1
  %173 = load i8, i8* %159, align 1
  %174 = zext i8 %173 to i32
  %175 = mul nuw nsw i32 %174, 85
  %176 = add nuw nsw i32 %12, %175
  %177 = lshr i32 %176, 8
  %178 = trunc i32 %177 to i8
  %179 = getelementptr inbounds i8, i8* %158, i64 2
  store i8 %178, i8* %179, align 1
  %180 = load i8, i8* %159, align 1
  %181 = zext i8 %180 to i32
  %182 = shl nuw nsw i32 %181, 6
  %183 = add nuw nsw i32 %14, %182
  %184 = lshr i32 %183, 8
  %185 = trunc i32 %184 to i8
  %186 = getelementptr inbounds i8, i8* %158, i64 3
  store i8 %185, i8* %186, align 1
  %187 = getelementptr inbounds i8, i8* %158, i64 %1
  %188 = getelementptr inbounds i8, i8* %3, i64 6
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = mul nuw nsw i32 %190, 255
  %192 = add nuw nsw i32 %8, %191
  %193 = lshr i32 %192, 8
  %194 = trunc i32 %193 to i8
  store i8 %194, i8* %187, align 1
  %195 = load i8, i8* %188, align 1
  %196 = zext i8 %195 to i32
  %197 = mul nuw nsw i32 %196, 149
  %198 = add nuw nsw i32 %10, %197
  %199 = lshr i32 %198, 8
  %200 = trunc i32 %199 to i8
  %201 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %200, i8* %201, align 1
  %202 = load i8, i8* %188, align 1
  %203 = zext i8 %202 to i32
  %204 = mul nuw nsw i32 %203, 85
  %205 = add nuw nsw i32 %12, %204
  %206 = lshr i32 %205, 8
  %207 = trunc i32 %206 to i8
  %208 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %207, i8* %208, align 1
  %209 = load i8, i8* %188, align 1
  %210 = zext i8 %209 to i32
  %211 = shl nuw nsw i32 %210, 6
  %212 = add nuw nsw i32 %14, %211
  %213 = lshr i32 %212, 8
  %214 = trunc i32 %213 to i8
  %215 = getelementptr inbounds i8, i8* %187, i64 3
  store i8 %214, i8* %215, align 1
  %216 = getelementptr inbounds i8, i8* %187, i64 %1
  %217 = getelementptr inbounds i8, i8* %3, i64 7
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = mul nuw nsw i32 %219, 255
  %221 = add nuw nsw i32 %8, %220
  %222 = lshr i32 %221, 8
  %223 = trunc i32 %222 to i8
  store i8 %223, i8* %216, align 1
  %224 = load i8, i8* %217, align 1
  %225 = zext i8 %224 to i32
  %226 = mul nuw nsw i32 %225, 149
  %227 = add nuw nsw i32 %10, %226
  %228 = lshr i32 %227, 8
  %229 = trunc i32 %228 to i8
  %230 = getelementptr inbounds i8, i8* %216, i64 1
  store i8 %229, i8* %230, align 1
  %231 = load i8, i8* %217, align 1
  %232 = zext i8 %231 to i32
  %233 = mul nuw nsw i32 %232, 85
  %234 = add nuw nsw i32 %12, %233
  %235 = lshr i32 %234, 8
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds i8, i8* %216, i64 2
  store i8 %236, i8* %237, align 1
  %238 = load i8, i8* %217, align 1
  %239 = zext i8 %238 to i32
  %240 = shl nuw nsw i32 %239, 6
  %241 = add nuw nsw i32 %14, %240
  %242 = lshr i32 %241, 8
  %243 = trunc i32 %242 to i8
  %244 = getelementptr inbounds i8, i8* %216, i64 3
  store i8 %243, i8* %244, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi16ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %0 to i32*
  store i32 -2139062144, i32* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to i32*
  store i32 -2139062144, i32* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to i32*
  store i32 -2139062144, i32* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to i32*
  store i32 -2139062144, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to i32*
  store i32 -2139062144, i32* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to i32*
  store i32 -2139062144, i32* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to i32*
  store i32 -2139062144, i32* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to i32*
  store i32 -2139062144, i32* %19, align 1
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = bitcast i8* %20 to i32*
  store i32 -2139062144, i32* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 %1
  %23 = bitcast i8* %22 to i32*
  store i32 -2139062144, i32* %23, align 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = bitcast i8* %24 to i32*
  store i32 -2139062144, i32* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to i32*
  store i32 -2139062144, i32* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to i32*
  store i32 -2139062144, i32* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to i32*
  store i32 -2139062144, i32* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to i32*
  store i32 -2139062144, i32* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to i32*
  store i32 -2139062144, i32* %35, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 2
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = lshr i32 %19, 2
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 4, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 4, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 4, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 4, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 4, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 4, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 4, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 4, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %21, i64 4, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %21, i64 4, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %21, i64 4, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %21, i64 4, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %21, i64 4, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %21, i64 4, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %21, i64 4, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %21, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 4, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 4, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 4, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 4, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %19, i64 4, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %19, i64 4, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %19, i64 4, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %19, i64 4, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %19, i64 4, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %19, i64 4, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %19, i64 4, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %19, i64 4, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %19, i64 4, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %19, i64 4, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %19, i64 4, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %19, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = add nuw nsw i16 %6, 10
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = add nuw nsw i16 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i16
  %15 = add nuw nsw i16 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = add nuw nsw i16 %15, %18
  %20 = load i8, i8* %3, align 1
  %21 = zext i8 %20 to i16
  %22 = add nuw nsw i16 %19, %21
  %23 = getelementptr inbounds i8, i8* %3, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  %26 = add nuw nsw i16 %22, %25
  %27 = getelementptr inbounds i8, i8* %3, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i16
  %30 = add i16 %26, %29
  %31 = getelementptr inbounds i8, i8* %3, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i16
  %34 = add i16 %30, %33
  %35 = getelementptr inbounds i8, i8* %3, i64 4
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i16
  %38 = add i16 %34, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 5
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  %42 = add i16 %38, %41
  %43 = getelementptr inbounds i8, i8* %3, i64 6
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = add i16 %42, %45
  %47 = getelementptr inbounds i8, i8* %3, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = add i16 %46, %49
  %51 = getelementptr inbounds i8, i8* %3, i64 8
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = add i16 %50, %53
  %55 = getelementptr inbounds i8, i8* %3, i64 9
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  %58 = add i16 %54, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 10
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = add i16 %58, %61
  %63 = getelementptr inbounds i8, i8* %3, i64 11
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = add i16 %62, %65
  %67 = getelementptr inbounds i8, i8* %3, i64 12
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i16
  %70 = add i16 %66, %69
  %71 = getelementptr inbounds i8, i8* %3, i64 13
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  %74 = add i16 %70, %73
  %75 = getelementptr inbounds i8, i8* %3, i64 14
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i16
  %78 = add i16 %74, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 15
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = add i16 %78, %81
  %83 = udiv i16 %82, 20
  %84 = trunc i16 %83 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %84, i64 4, i1 false) #5
  %85 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %85, i8 %84, i64 4, i1 false) #5
  %86 = getelementptr inbounds i8, i8* %85, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %86, i8 %84, i64 4, i1 false) #5
  %87 = getelementptr inbounds i8, i8* %86, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %87, i8 %84, i64 4, i1 false) #5
  %88 = getelementptr inbounds i8, i8* %87, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %88, i8 %84, i64 4, i1 false) #5
  %89 = getelementptr inbounds i8, i8* %88, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %89, i8 %84, i64 4, i1 false) #5
  %90 = getelementptr inbounds i8, i8* %89, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %90, i8 %84, i64 4, i1 false) #5
  %91 = getelementptr inbounds i8, i8* %90, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %84, i64 4, i1 false) #5
  %92 = getelementptr inbounds i8, i8* %91, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %92, i8 %84, i64 4, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %92, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %84, i64 4, i1 false) #5
  %94 = getelementptr inbounds i8, i8* %93, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %84, i64 4, i1 false) #5
  %95 = getelementptr inbounds i8, i8* %94, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %84, i64 4, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %95, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %84, i64 4, i1 false) #5
  %97 = getelementptr inbounds i8, i8* %96, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %84, i64 4, i1 false) #5
  %98 = getelementptr inbounds i8, i8* %97, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 %84, i64 4, i1 false) #5
  %99 = getelementptr inbounds i8, i8* %98, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 %84, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i32*
  %6 = bitcast i8* %0 to i32*
  %7 = load i32, i32* %5, align 1
  store i32 %7, i32* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %5, align 1
  store i32 %10, i32* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %5, align 1
  store i32 %13, i32* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %5, align 1
  store i32 %16, i32* %15, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %5, align 1
  store i32 %19, i32* %18, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 %1
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %5, align 1
  store i32 %22, i32* %21, align 1
  %23 = getelementptr inbounds i8, i8* %20, i64 %1
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %5, align 1
  store i32 %25, i32* %24, align 1
  %26 = getelementptr inbounds i8, i8* %23, i64 %1
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %5, align 1
  store i32 %28, i32* %27, align 1
  %29 = getelementptr inbounds i8, i8* %26, i64 %1
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %5, align 1
  store i32 %31, i32* %30, align 1
  %32 = getelementptr inbounds i8, i8* %29, i64 %1
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %5, align 1
  store i32 %34, i32* %33, align 1
  %35 = getelementptr inbounds i8, i8* %32, i64 %1
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %5, align 1
  store i32 %37, i32* %36, align 1
  %38 = getelementptr inbounds i8, i8* %35, i64 %1
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %5, align 1
  store i32 %40, i32* %39, align 1
  %41 = getelementptr inbounds i8, i8* %38, i64 %1
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %5, align 1
  store i32 %43, i32* %42, align 1
  %44 = getelementptr inbounds i8, i8* %41, i64 %1
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %5, align 1
  store i32 %46, i32* %45, align 1
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %5, align 1
  store i32 %49, i32* %48, align 1
  %50 = getelementptr inbounds i8, i8* %47, i64 %1
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %5, align 1
  store i32 %52, i32* %51, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 4, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 4, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 4, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 4, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 4, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 4, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 4, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 4, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %24, i64 %1
  %28 = getelementptr inbounds i8, i8* %3, i64 8
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 4, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %27, i64 %1
  %31 = getelementptr inbounds i8, i8* %3, i64 9
  %32 = load i8, i8* %31, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 4, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %30, i64 %1
  %34 = getelementptr inbounds i8, i8* %3, i64 10
  %35 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %35, i64 4, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %33, i64 %1
  %37 = getelementptr inbounds i8, i8* %3, i64 11
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 4, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %36, i64 %1
  %40 = getelementptr inbounds i8, i8* %3, i64 12
  %41 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %41, i64 4, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 13
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 4, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %42, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 14
  %47 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %47, i64 4, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %45, i64 %1
  %49 = getelementptr inbounds i8, i8* %3, i64 15
  %50 = load i8, i8* %49, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 4, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  %9 = getelementptr inbounds i8, i8* %2, i64 1
  %10 = getelementptr inbounds i8, i8* %2, i64 2
  %11 = getelementptr inbounds i8, i8* %2, i64 3
  br label %13

12:                                               ; preds = %102
  ret void

13:                                               ; preds = %102, %4
  %14 = phi i64 [ 0, %4 ], [ %104, %102 ]
  %15 = phi i8* [ %0, %4 ], [ %103, %102 ]
  %16 = getelementptr inbounds i8, i8* %3, i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 %18, %7
  %20 = icmp slt i32 %19, 0
  %21 = sub nsw i32 0, %19
  %22 = select i1 %20, i32 %21, i32 %19
  %23 = sub nsw i32 %18, %8
  %24 = load i8, i8* %2, align 1
  %25 = zext i8 %24 to i32
  %26 = sub nsw i32 %25, %7
  %27 = icmp slt i32 %26, 0
  %28 = sub nsw i32 0, %26
  %29 = select i1 %27, i32 %28, i32 %26
  %30 = add nsw i32 %23, %25
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = icmp sgt i32 %29, %22
  %35 = icmp sgt i32 %29, %33
  %36 = or i1 %34, %35
  %37 = icmp sgt i32 %22, %33
  %38 = select i1 %37, i8 %6, i8 %24
  %39 = select i1 %36, i8 %38, i8 %17
  store i8 %39, i8* %15, align 1
  %40 = load i8, i8* %9, align 1
  %41 = zext i8 %40 to i32
  %42 = sub nsw i32 %41, %7
  %43 = icmp slt i32 %42, 0
  %44 = sub nsw i32 0, %42
  %45 = select i1 %43, i32 %44, i32 %42
  %46 = add nsw i32 %23, %41
  %47 = icmp slt i32 %46, 0
  %48 = sub nsw i32 0, %46
  %49 = select i1 %47, i32 %48, i32 %46
  %50 = icmp sgt i32 %45, %22
  %51 = icmp sgt i32 %45, %49
  %52 = or i1 %50, %51
  br i1 %52, label %55, label %53

53:                                               ; preds = %13
  %54 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %17, i8* %54, align 1
  br label %60

55:                                               ; preds = %13
  %56 = icmp sgt i32 %22, %49
  %57 = getelementptr inbounds i8, i8* %15, i64 1
  br i1 %56, label %59, label %58

58:                                               ; preds = %55
  store i8 %40, i8* %57, align 1
  br label %60

59:                                               ; preds = %55
  store i8 %6, i8* %57, align 1
  br label %60

60:                                               ; preds = %59, %58, %53
  %61 = load i8, i8* %10, align 1
  %62 = zext i8 %61 to i32
  %63 = sub nsw i32 %62, %7
  %64 = icmp slt i32 %63, 0
  %65 = sub nsw i32 0, %63
  %66 = select i1 %64, i32 %65, i32 %63
  %67 = add nsw i32 %23, %62
  %68 = icmp slt i32 %67, 0
  %69 = sub nsw i32 0, %67
  %70 = select i1 %68, i32 %69, i32 %67
  %71 = icmp sgt i32 %66, %22
  %72 = icmp sgt i32 %66, %70
  %73 = or i1 %71, %72
  br i1 %73, label %76, label %74

74:                                               ; preds = %60
  %75 = getelementptr inbounds i8, i8* %15, i64 2
  store i8 %17, i8* %75, align 1
  br label %81

76:                                               ; preds = %60
  %77 = icmp sgt i32 %22, %70
  %78 = getelementptr inbounds i8, i8* %15, i64 2
  br i1 %77, label %80, label %79

79:                                               ; preds = %76
  store i8 %61, i8* %78, align 1
  br label %81

80:                                               ; preds = %76
  store i8 %6, i8* %78, align 1
  br label %81

81:                                               ; preds = %80, %79, %74
  %82 = load i8, i8* %11, align 1
  %83 = zext i8 %82 to i32
  %84 = sub nsw i32 %83, %7
  %85 = icmp slt i32 %84, 0
  %86 = sub nsw i32 0, %84
  %87 = select i1 %85, i32 %86, i32 %84
  %88 = add nsw i32 %23, %83
  %89 = icmp slt i32 %88, 0
  %90 = sub nsw i32 0, %88
  %91 = select i1 %89, i32 %90, i32 %88
  %92 = icmp sgt i32 %87, %22
  %93 = icmp sgt i32 %87, %91
  %94 = or i1 %92, %93
  br i1 %94, label %97, label %95

95:                                               ; preds = %81
  %96 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %17, i8* %96, align 1
  br label %102

97:                                               ; preds = %81
  %98 = icmp sgt i32 %22, %91
  %99 = getelementptr inbounds i8, i8* %15, i64 3
  br i1 %98, label %101, label %100

100:                                              ; preds = %97
  store i8 %82, i8* %99, align 1
  br label %102

101:                                              ; preds = %97
  store i8 %6, i8* %99, align 1
  br label %102

102:                                              ; preds = %101, %100, %95
  %103 = getelementptr inbounds i8, i8* %15, i64 %1
  %104 = add nuw nsw i64 %14, 1
  %105 = icmp eq i64 %104, 16
  br i1 %105, label %12, label %13
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 15
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  %12 = mul nuw nsw i32 %10, 107
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  %14 = mul nuw nsw i32 %10, 171
  %15 = mul nuw nsw i32 %10, 192
  br label %16

16:                                               ; preds = %16, %4
  %17 = phi i64 [ 0, %4 ], [ %75, %16 ]
  %18 = phi i8* [ %0, %4 ], [ %74, %16 ]
  %19 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %17
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %3, i64 %17
  %23 = sub i8 0, %20
  %24 = zext i8 %23 to i32
  %25 = mul nuw nsw i32 %24, %9
  %26 = add nuw nsw i32 %25, 256
  %27 = load i8, i8* %2, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, %21
  %30 = load i8, i8* %22, align 1
  %31 = zext i8 %30 to i32
  %32 = mul nuw nsw i32 %31, 255
  %33 = add nuw nsw i32 %26, %29
  %34 = add nuw nsw i32 %33, %10
  %35 = add nuw nsw i32 %34, %32
  %36 = lshr i32 %35, 9
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %18, align 1
  %38 = load i8, i8* %11, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, %21
  %41 = load i8, i8* %22, align 1
  %42 = zext i8 %41 to i32
  %43 = mul nuw nsw i32 %42, 149
  %44 = add nuw nsw i32 %26, %40
  %45 = add nuw nsw i32 %44, %12
  %46 = add nuw nsw i32 %45, %43
  %47 = lshr i32 %46, 9
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %48, i8* %49, align 1
  %50 = load i8, i8* %13, align 1
  %51 = zext i8 %50 to i32
  %52 = mul nuw nsw i32 %51, %21
  %53 = load i8, i8* %22, align 1
  %54 = zext i8 %53 to i32
  %55 = mul nuw nsw i32 %54, 85
  %56 = add nuw nsw i32 %26, %52
  %57 = add nuw nsw i32 %56, %14
  %58 = add nuw nsw i32 %57, %55
  %59 = lshr i32 %58, 9
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds i8, i8* %18, i64 2
  store i8 %60, i8* %61, align 1
  %62 = load i8, i8* %5, align 1
  %63 = zext i8 %62 to i32
  %64 = mul nuw nsw i32 %63, %21
  %65 = load i8, i8* %22, align 1
  %66 = zext i8 %65 to i32
  %67 = shl nuw nsw i32 %66, 6
  %68 = add nuw nsw i32 %26, %64
  %69 = add nuw nsw i32 %68, %15
  %70 = add nuw nsw i32 %69, %67
  %71 = lshr i32 %70, 9
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %18, i64 3
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds i8, i8* %18, i64 %1
  %75 = add nuw nsw i64 %17, 1
  %76 = icmp eq i64 %75, 16
  br i1 %76, label %77, label %16

77:                                               ; preds = %16
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  br label %11

11:                                               ; preds = %11, %4
  %12 = phi i64 [ 0, %4 ], [ %49, %11 ]
  %13 = phi i8* [ %0, %4 ], [ %48, %11 ]
  %14 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %12
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = sub i8 0, %15
  %18 = zext i8 %17 to i32
  %19 = mul nuw nsw i32 %18, %7
  %20 = add nuw nsw i32 %19, 128
  %21 = load i8, i8* %2, align 1
  %22 = zext i8 %21 to i32
  %23 = mul nuw nsw i32 %22, %16
  %24 = add nuw nsw i32 %20, %23
  %25 = lshr i32 %24, 8
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %13, align 1
  %27 = load i8, i8* %8, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, %16
  %30 = add nuw nsw i32 %20, %29
  %31 = lshr i32 %30, 8
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 %32, i8* %33, align 1
  %34 = load i8, i8* %9, align 1
  %35 = zext i8 %34 to i32
  %36 = mul nuw nsw i32 %35, %16
  %37 = add nuw nsw i32 %20, %36
  %38 = lshr i32 %37, 8
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds i8, i8* %13, i64 2
  store i8 %39, i8* %40, align 1
  %41 = load i8, i8* %10, align 1
  %42 = zext i8 %41 to i32
  %43 = mul nuw nsw i32 %42, %16
  %44 = add nuw nsw i32 %20, %43
  %45 = lshr i32 %44, 8
  %46 = trunc i32 %45 to i8
  %47 = getelementptr inbounds i8, i8* %13, i64 3
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %13, i64 %1
  %49 = add nuw nsw i64 %12, 1
  %50 = icmp eq i64 %49, 16
  br i1 %50, label %51, label %11

51:                                               ; preds = %11
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, 128
  %9 = mul nuw nsw i32 %7, 107
  %10 = add nuw nsw i32 %9, 128
  %11 = mul nuw nsw i32 %7, 171
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %7, 192
  %14 = add nuw nsw i32 %13, 128
  br label %15

15:                                               ; preds = %15, %4
  %16 = phi i64 [ 0, %4 ], [ %47, %15 ]
  %17 = phi i8* [ %0, %4 ], [ %46, %15 ]
  %18 = getelementptr inbounds i8, i8* %3, i64 %16
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = mul nuw nsw i32 %20, 255
  %22 = add nuw nsw i32 %8, %21
  %23 = lshr i32 %22, 8
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %17, align 1
  %25 = load i8, i8* %18, align 1
  %26 = zext i8 %25 to i32
  %27 = mul nuw nsw i32 %26, 149
  %28 = add nuw nsw i32 %10, %27
  %29 = lshr i32 %28, 8
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %30, i8* %31, align 1
  %32 = load i8, i8* %18, align 1
  %33 = zext i8 %32 to i32
  %34 = mul nuw nsw i32 %33, 85
  %35 = add nuw nsw i32 %12, %34
  %36 = lshr i32 %35, 8
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 %37, i8* %38, align 1
  %39 = load i8, i8* %18, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 6
  %42 = add nuw nsw i32 %14, %41
  %43 = lshr i32 %42, 8
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %17, i64 3
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %17, i64 %1
  %47 = add nuw nsw i64 %16, 1
  %48 = icmp eq i64 %47, 16
  br i1 %48, label %49, label %15

49:                                               ; preds = %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi4ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %0 to i64*
  store i64 -9187201950435737472, i64* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to i64*
  store i64 -9187201950435737472, i64* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to i64*
  store i64 -9187201950435737472, i64* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to i64*
  store i64 -9187201950435737472, i64* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <8 x i8>*
  %6 = load <8 x i8>, <8 x i8>* %5, align 1
  %7 = zext <8 x i8> %6 to <8 x i32>
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <8 x i32> %8, %7
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <8 x i32> %9, %10
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <8 x i32> %11, %12
  %14 = extractelement <8 x i32> %13, i32 0
  %15 = add nuw nsw i32 %14, 4
  %16 = lshr i32 %15, 3
  %17 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %17, i64 8, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %17, i64 8, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %17, i64 8, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %17, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 2
  %8 = getelementptr inbounds i8, i8* %3, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %3, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %3, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = lshr i32 %19, 2
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 8, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 8, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = add nuw nsw i16 %6, 6
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = add nuw nsw i16 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i16
  %15 = add nuw nsw i16 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = add nuw nsw i16 %15, %18
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = add nuw nsw i16 %19, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = add nuw nsw i16 %23, %26
  %28 = getelementptr inbounds i8, i8* %2, i64 6
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  %31 = add i16 %27, %30
  %32 = getelementptr inbounds i8, i8* %2, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = add i16 %31, %34
  %36 = load i8, i8* %3, align 1
  %37 = zext i8 %36 to i16
  %38 = add i16 %35, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  %42 = add i16 %38, %41
  %43 = getelementptr inbounds i8, i8* %3, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = add i16 %42, %45
  %47 = getelementptr inbounds i8, i8* %3, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = add i16 %46, %49
  %51 = udiv i16 %50, 12
  %52 = trunc i16 %51 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %52, i64 8, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %52, i64 8, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %52, i64 8, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 %52, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i64*
  %6 = bitcast i8* %0 to i64*
  %7 = load i64, i64* %5, align 1
  store i64 %7, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %5, align 1
  store i64 %10, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %5, align 1
  store i64 %13, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %5, align 1
  store i64 %16, i64* %15, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 8, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 8, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 8, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  %9 = load i8, i8* %3, align 1
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %10, %7
  %12 = icmp slt i32 %11, 0
  %13 = sub nsw i32 0, %11
  %14 = select i1 %12, i32 %13, i32 %11
  %15 = sub nsw i32 %10, %8
  br label %26

16:                                               ; preds = %49
  %17 = getelementptr inbounds i8, i8* %0, i64 %1
  %18 = getelementptr inbounds i8, i8* %3, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = sub nsw i32 %20, %7
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %8
  br label %52

26:                                               ; preds = %49, %4
  %27 = phi i64 [ 0, %4 ], [ %50, %49 ]
  %28 = getelementptr inbounds i8, i8* %2, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = sub nsw i32 %30, %7
  %32 = icmp slt i32 %31, 0
  %33 = sub nsw i32 0, %31
  %34 = select i1 %32, i32 %33, i32 %31
  %35 = add nsw i32 %15, %30
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = icmp sgt i32 %34, %14
  %40 = icmp sgt i32 %34, %38
  %41 = or i1 %39, %40
  br i1 %41, label %44, label %42

42:                                               ; preds = %26
  %43 = getelementptr inbounds i8, i8* %0, i64 %27
  store i8 %9, i8* %43, align 1
  br label %49

44:                                               ; preds = %26
  %45 = icmp sgt i32 %14, %38
  %46 = getelementptr inbounds i8, i8* %0, i64 %27
  br i1 %45, label %48, label %47

47:                                               ; preds = %44
  store i8 %29, i8* %46, align 1
  br label %49

48:                                               ; preds = %44
  store i8 %6, i8* %46, align 1
  br label %49

49:                                               ; preds = %47, %48, %42
  %50 = add nuw nsw i64 %27, 1
  %51 = icmp eq i64 %50, 8
  br i1 %51, label %16, label %26

52:                                               ; preds = %75, %16
  %53 = phi i64 [ 0, %16 ], [ %76, %75 ]
  %54 = getelementptr inbounds i8, i8* %2, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = sub nsw i32 %56, %7
  %58 = icmp slt i32 %57, 0
  %59 = sub nsw i32 0, %57
  %60 = select i1 %58, i32 %59, i32 %57
  %61 = add nsw i32 %25, %56
  %62 = icmp slt i32 %61, 0
  %63 = sub nsw i32 0, %61
  %64 = select i1 %62, i32 %63, i32 %61
  %65 = icmp sgt i32 %60, %24
  %66 = icmp sgt i32 %60, %64
  %67 = or i1 %65, %66
  br i1 %67, label %70, label %68

68:                                               ; preds = %52
  %69 = getelementptr inbounds i8, i8* %17, i64 %53
  store i8 %19, i8* %69, align 1
  br label %75

70:                                               ; preds = %52
  %71 = icmp sgt i32 %24, %64
  %72 = getelementptr inbounds i8, i8* %17, i64 %53
  br i1 %71, label %74, label %73

73:                                               ; preds = %70
  store i8 %55, i8* %72, align 1
  br label %75

74:                                               ; preds = %70
  store i8 %6, i8* %72, align 1
  br label %75

75:                                               ; preds = %74, %73, %68
  %76 = add nuw nsw i64 %53, 1
  %77 = icmp eq i64 %76, 8
  br i1 %77, label %78, label %52

78:                                               ; preds = %75
  %79 = getelementptr inbounds i8, i8* %17, i64 %1
  %80 = getelementptr inbounds i8, i8* %3, i64 2
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = sub nsw i32 %82, %7
  %84 = icmp slt i32 %83, 0
  %85 = sub nsw i32 0, %83
  %86 = select i1 %84, i32 %85, i32 %83
  %87 = sub nsw i32 %82, %8
  br label %88

88:                                               ; preds = %111, %78
  %89 = phi i64 [ 0, %78 ], [ %112, %111 ]
  %90 = getelementptr inbounds i8, i8* %2, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = sub nsw i32 %92, %7
  %94 = icmp slt i32 %93, 0
  %95 = sub nsw i32 0, %93
  %96 = select i1 %94, i32 %95, i32 %93
  %97 = add nsw i32 %87, %92
  %98 = icmp slt i32 %97, 0
  %99 = sub nsw i32 0, %97
  %100 = select i1 %98, i32 %99, i32 %97
  %101 = icmp sgt i32 %96, %86
  %102 = icmp sgt i32 %96, %100
  %103 = or i1 %101, %102
  br i1 %103, label %106, label %104

104:                                              ; preds = %88
  %105 = getelementptr inbounds i8, i8* %79, i64 %89
  store i8 %81, i8* %105, align 1
  br label %111

106:                                              ; preds = %88
  %107 = icmp sgt i32 %86, %100
  %108 = getelementptr inbounds i8, i8* %79, i64 %89
  br i1 %107, label %110, label %109

109:                                              ; preds = %106
  store i8 %91, i8* %108, align 1
  br label %111

110:                                              ; preds = %106
  store i8 %6, i8* %108, align 1
  br label %111

111:                                              ; preds = %110, %109, %104
  %112 = add nuw nsw i64 %89, 1
  %113 = icmp eq i64 %112, 8
  br i1 %113, label %114, label %88

114:                                              ; preds = %111
  %115 = getelementptr inbounds i8, i8* %79, i64 %1
  %116 = getelementptr inbounds i8, i8* %3, i64 3
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = sub nsw i32 %118, %7
  %120 = icmp slt i32 %119, 0
  %121 = sub nsw i32 0, %119
  %122 = select i1 %120, i32 %121, i32 %119
  %123 = sub nsw i32 %118, %8
  br label %124

124:                                              ; preds = %147, %114
  %125 = phi i64 [ 0, %114 ], [ %148, %147 ]
  %126 = getelementptr inbounds i8, i8* %2, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = sub nsw i32 %128, %7
  %130 = icmp slt i32 %129, 0
  %131 = sub nsw i32 0, %129
  %132 = select i1 %130, i32 %131, i32 %129
  %133 = add nsw i32 %123, %128
  %134 = icmp slt i32 %133, 0
  %135 = sub nsw i32 0, %133
  %136 = select i1 %134, i32 %135, i32 %133
  %137 = icmp sgt i32 %132, %122
  %138 = icmp sgt i32 %132, %136
  %139 = or i1 %137, %138
  br i1 %139, label %142, label %140

140:                                              ; preds = %124
  %141 = getelementptr inbounds i8, i8* %115, i64 %125
  store i8 %117, i8* %141, align 1
  br label %147

142:                                              ; preds = %124
  %143 = icmp sgt i32 %122, %136
  %144 = getelementptr inbounds i8, i8* %115, i64 %125
  br i1 %143, label %146, label %145

145:                                              ; preds = %142
  store i8 %127, i8* %144, align 1
  br label %147

146:                                              ; preds = %142
  store i8 %6, i8* %144, align 1
  br label %147

147:                                              ; preds = %146, %145, %140
  %148 = add nuw nsw i64 %125, 1
  %149 = icmp eq i64 %148, 8
  br i1 %149, label %150, label %124

150:                                              ; preds = %147
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 3
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  %12 = mul nuw nsw i32 %10, 59
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  %14 = mul nuw nsw i32 %10, 110
  %15 = getelementptr inbounds i8, i8* %2, i64 3
  %16 = mul nuw nsw i32 %10, 151
  %17 = getelementptr inbounds i8, i8* %2, i64 4
  %18 = mul nuw nsw i32 %10, 183
  %19 = getelementptr inbounds i8, i8* %2, i64 5
  %20 = mul nuw nsw i32 %10, 206
  %21 = getelementptr inbounds i8, i8* %2, i64 6
  %22 = mul nuw nsw i32 %10, 219
  %23 = mul nuw nsw i32 %10, 224
  br label %24

24:                                               ; preds = %24, %4
  %25 = phi i64 [ 0, %4 ], [ %131, %24 ]
  %26 = phi i8* [ %0, %4 ], [ %130, %24 ]
  %27 = getelementptr inbounds [124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 %25
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %3, i64 %25
  %31 = sub i8 0, %28
  %32 = zext i8 %31 to i32
  %33 = mul nuw nsw i32 %32, %9
  %34 = add nuw nsw i32 %33, 256
  %35 = load i8, i8* %2, align 1
  %36 = zext i8 %35 to i32
  %37 = mul nuw nsw i32 %36, %29
  %38 = load i8, i8* %30, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, 255
  %41 = add nuw nsw i32 %34, %37
  %42 = add nuw nsw i32 %41, %10
  %43 = add nuw nsw i32 %42, %40
  %44 = lshr i32 %43, 9
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %26, align 1
  %46 = load i8, i8* %11, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %29
  %49 = load i8, i8* %30, align 1
  %50 = zext i8 %49 to i32
  %51 = mul nuw nsw i32 %50, 197
  %52 = add nuw nsw i32 %34, %48
  %53 = add nuw nsw i32 %52, %12
  %54 = add nuw nsw i32 %53, %51
  %55 = lshr i32 %54, 9
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %26, i64 1
  store i8 %56, i8* %57, align 1
  %58 = load i8, i8* %13, align 1
  %59 = zext i8 %58 to i32
  %60 = mul nuw nsw i32 %59, %29
  %61 = load i8, i8* %30, align 1
  %62 = zext i8 %61 to i32
  %63 = mul nuw nsw i32 %62, 146
  %64 = add nuw nsw i32 %34, %60
  %65 = add nuw nsw i32 %64, %14
  %66 = add nuw nsw i32 %65, %63
  %67 = lshr i32 %66, 9
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds i8, i8* %26, i64 2
  store i8 %68, i8* %69, align 1
  %70 = load i8, i8* %15, align 1
  %71 = zext i8 %70 to i32
  %72 = mul nuw nsw i32 %71, %29
  %73 = load i8, i8* %30, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, 105
  %76 = add nuw nsw i32 %34, %72
  %77 = add nuw nsw i32 %76, %16
  %78 = add nuw nsw i32 %77, %75
  %79 = lshr i32 %78, 9
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %26, i64 3
  store i8 %80, i8* %81, align 1
  %82 = load i8, i8* %17, align 1
  %83 = zext i8 %82 to i32
  %84 = mul nuw nsw i32 %83, %29
  %85 = load i8, i8* %30, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, 73
  %88 = add nuw nsw i32 %34, %84
  %89 = add nuw nsw i32 %88, %18
  %90 = add nuw nsw i32 %89, %87
  %91 = lshr i32 %90, 9
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %26, i64 4
  store i8 %92, i8* %93, align 1
  %94 = load i8, i8* %19, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %29
  %97 = load i8, i8* %30, align 1
  %98 = zext i8 %97 to i32
  %99 = mul nuw nsw i32 %98, 50
  %100 = add nuw nsw i32 %34, %96
  %101 = add nuw nsw i32 %100, %20
  %102 = add nuw nsw i32 %101, %99
  %103 = lshr i32 %102, 9
  %104 = trunc i32 %103 to i8
  %105 = getelementptr inbounds i8, i8* %26, i64 5
  store i8 %104, i8* %105, align 1
  %106 = load i8, i8* %21, align 1
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, %29
  %109 = load i8, i8* %30, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, 37
  %112 = add nuw nsw i32 %34, %108
  %113 = add nuw nsw i32 %112, %22
  %114 = add nuw nsw i32 %113, %111
  %115 = lshr i32 %114, 9
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds i8, i8* %26, i64 6
  store i8 %116, i8* %117, align 1
  %118 = load i8, i8* %5, align 1
  %119 = zext i8 %118 to i32
  %120 = mul nuw nsw i32 %119, %29
  %121 = load i8, i8* %30, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 5
  %124 = add nuw nsw i32 %34, %120
  %125 = add nuw nsw i32 %124, %23
  %126 = add nuw nsw i32 %125, %123
  %127 = lshr i32 %126, 9
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %26, i64 7
  store i8 %128, i8* %129, align 1
  %130 = getelementptr inbounds i8, i8* %26, i64 %1
  %131 = add nuw nsw i64 %25, 1
  %132 = icmp eq i64 %131, 4
  br i1 %132, label %133, label %24

133:                                              ; preds = %24
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i8, i8* %2, i64 5
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = getelementptr inbounds i8, i8* %2, i64 7
  %15 = add nuw nsw i32 %7, 128
  %16 = load i8, i8* %2, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nuw nsw i32 %17, 255
  %19 = add nuw nsw i32 %15, %18
  %20 = lshr i32 %19, 8
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %0, align 1
  %22 = load i8, i8* %8, align 1
  %23 = zext i8 %22 to i32
  %24 = mul nuw nsw i32 %23, 255
  %25 = add nuw nsw i32 %15, %24
  %26 = lshr i32 %25, 8
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %27, i8* %28, align 1
  %29 = load i8, i8* %9, align 1
  %30 = zext i8 %29 to i32
  %31 = mul nuw nsw i32 %30, 255
  %32 = add nuw nsw i32 %15, %31
  %33 = lshr i32 %32, 8
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %34, i8* %35, align 1
  %36 = load i8, i8* %10, align 1
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %37, 255
  %39 = add nuw nsw i32 %15, %38
  %40 = lshr i32 %39, 8
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %41, i8* %42, align 1
  %43 = load i8, i8* %11, align 1
  %44 = zext i8 %43 to i32
  %45 = mul nuw nsw i32 %44, 255
  %46 = add nuw nsw i32 %15, %45
  %47 = lshr i32 %46, 8
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %0, i64 4
  store i8 %48, i8* %49, align 1
  %50 = load i8, i8* %12, align 1
  %51 = zext i8 %50 to i32
  %52 = mul nuw nsw i32 %51, 255
  %53 = add nuw nsw i32 %15, %52
  %54 = lshr i32 %53, 8
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds i8, i8* %0, i64 5
  store i8 %55, i8* %56, align 1
  %57 = load i8, i8* %13, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nuw nsw i32 %58, 255
  %60 = add nuw nsw i32 %15, %59
  %61 = lshr i32 %60, 8
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %0, i64 6
  store i8 %62, i8* %63, align 1
  %64 = load i8, i8* %14, align 1
  %65 = zext i8 %64 to i32
  %66 = mul nuw nsw i32 %65, 255
  %67 = add nuw nsw i32 %15, %66
  %68 = lshr i32 %67, 8
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %0, i64 7
  store i8 %69, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %0, i64 %1
  %72 = mul nuw nsw i32 %7, 107
  %73 = add nuw nsw i32 %72, 128
  %74 = load i8, i8* %2, align 1
  %75 = zext i8 %74 to i32
  %76 = mul nuw nsw i32 %75, 149
  %77 = add nuw nsw i32 %73, %76
  %78 = lshr i32 %77, 8
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %71, align 1
  %80 = load i8, i8* %8, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nuw nsw i32 %81, 149
  %83 = add nuw nsw i32 %73, %82
  %84 = lshr i32 %83, 8
  %85 = trunc i32 %84 to i8
  %86 = getelementptr inbounds i8, i8* %71, i64 1
  store i8 %85, i8* %86, align 1
  %87 = load i8, i8* %9, align 1
  %88 = zext i8 %87 to i32
  %89 = mul nuw nsw i32 %88, 149
  %90 = add nuw nsw i32 %73, %89
  %91 = lshr i32 %90, 8
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %71, i64 2
  store i8 %92, i8* %93, align 1
  %94 = load i8, i8* %10, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, 149
  %97 = add nuw nsw i32 %73, %96
  %98 = lshr i32 %97, 8
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds i8, i8* %71, i64 3
  store i8 %99, i8* %100, align 1
  %101 = load i8, i8* %11, align 1
  %102 = zext i8 %101 to i32
  %103 = mul nuw nsw i32 %102, 149
  %104 = add nuw nsw i32 %73, %103
  %105 = lshr i32 %104, 8
  %106 = trunc i32 %105 to i8
  %107 = getelementptr inbounds i8, i8* %71, i64 4
  store i8 %106, i8* %107, align 1
  %108 = load i8, i8* %12, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %109, 149
  %111 = add nuw nsw i32 %73, %110
  %112 = lshr i32 %111, 8
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %71, i64 5
  store i8 %113, i8* %114, align 1
  %115 = load i8, i8* %13, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %116, 149
  %118 = add nuw nsw i32 %73, %117
  %119 = lshr i32 %118, 8
  %120 = trunc i32 %119 to i8
  %121 = getelementptr inbounds i8, i8* %71, i64 6
  store i8 %120, i8* %121, align 1
  %122 = load i8, i8* %14, align 1
  %123 = zext i8 %122 to i32
  %124 = mul nuw nsw i32 %123, 149
  %125 = add nuw nsw i32 %73, %124
  %126 = lshr i32 %125, 8
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %71, i64 7
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %71, i64 %1
  %130 = mul nuw nsw i32 %7, 171
  %131 = add nuw nsw i32 %130, 128
  %132 = load i8, i8* %2, align 1
  %133 = zext i8 %132 to i32
  %134 = mul nuw nsw i32 %133, 85
  %135 = add nuw nsw i32 %131, %134
  %136 = lshr i32 %135, 8
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %129, align 1
  %138 = load i8, i8* %8, align 1
  %139 = zext i8 %138 to i32
  %140 = mul nuw nsw i32 %139, 85
  %141 = add nuw nsw i32 %131, %140
  %142 = lshr i32 %141, 8
  %143 = trunc i32 %142 to i8
  %144 = getelementptr inbounds i8, i8* %129, i64 1
  store i8 %143, i8* %144, align 1
  %145 = load i8, i8* %9, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nuw nsw i32 %146, 85
  %148 = add nuw nsw i32 %131, %147
  %149 = lshr i32 %148, 8
  %150 = trunc i32 %149 to i8
  %151 = getelementptr inbounds i8, i8* %129, i64 2
  store i8 %150, i8* %151, align 1
  %152 = load i8, i8* %10, align 1
  %153 = zext i8 %152 to i32
  %154 = mul nuw nsw i32 %153, 85
  %155 = add nuw nsw i32 %131, %154
  %156 = lshr i32 %155, 8
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds i8, i8* %129, i64 3
  store i8 %157, i8* %158, align 1
  %159 = load i8, i8* %11, align 1
  %160 = zext i8 %159 to i32
  %161 = mul nuw nsw i32 %160, 85
  %162 = add nuw nsw i32 %131, %161
  %163 = lshr i32 %162, 8
  %164 = trunc i32 %163 to i8
  %165 = getelementptr inbounds i8, i8* %129, i64 4
  store i8 %164, i8* %165, align 1
  %166 = load i8, i8* %12, align 1
  %167 = zext i8 %166 to i32
  %168 = mul nuw nsw i32 %167, 85
  %169 = add nuw nsw i32 %131, %168
  %170 = lshr i32 %169, 8
  %171 = trunc i32 %170 to i8
  %172 = getelementptr inbounds i8, i8* %129, i64 5
  store i8 %171, i8* %172, align 1
  %173 = load i8, i8* %13, align 1
  %174 = zext i8 %173 to i32
  %175 = mul nuw nsw i32 %174, 85
  %176 = add nuw nsw i32 %131, %175
  %177 = lshr i32 %176, 8
  %178 = trunc i32 %177 to i8
  %179 = getelementptr inbounds i8, i8* %129, i64 6
  store i8 %178, i8* %179, align 1
  %180 = load i8, i8* %14, align 1
  %181 = zext i8 %180 to i32
  %182 = mul nuw nsw i32 %181, 85
  %183 = add nuw nsw i32 %131, %182
  %184 = lshr i32 %183, 8
  %185 = trunc i32 %184 to i8
  %186 = getelementptr inbounds i8, i8* %129, i64 7
  store i8 %185, i8* %186, align 1
  %187 = getelementptr inbounds i8, i8* %129, i64 %1
  %188 = mul nuw nsw i32 %7, 192
  %189 = add nuw nsw i32 %188, 128
  %190 = load i8, i8* %2, align 1
  %191 = zext i8 %190 to i32
  %192 = shl nuw nsw i32 %191, 6
  %193 = add nuw nsw i32 %189, %192
  %194 = lshr i32 %193, 8
  %195 = trunc i32 %194 to i8
  store i8 %195, i8* %187, align 1
  %196 = load i8, i8* %8, align 1
  %197 = zext i8 %196 to i32
  %198 = shl nuw nsw i32 %197, 6
  %199 = add nuw nsw i32 %189, %198
  %200 = lshr i32 %199, 8
  %201 = trunc i32 %200 to i8
  %202 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %201, i8* %202, align 1
  %203 = load i8, i8* %9, align 1
  %204 = zext i8 %203 to i32
  %205 = shl nuw nsw i32 %204, 6
  %206 = add nuw nsw i32 %189, %205
  %207 = lshr i32 %206, 8
  %208 = trunc i32 %207 to i8
  %209 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %208, i8* %209, align 1
  %210 = load i8, i8* %10, align 1
  %211 = zext i8 %210 to i32
  %212 = shl nuw nsw i32 %211, 6
  %213 = add nuw nsw i32 %189, %212
  %214 = lshr i32 %213, 8
  %215 = trunc i32 %214 to i8
  %216 = getelementptr inbounds i8, i8* %187, i64 3
  store i8 %215, i8* %216, align 1
  %217 = load i8, i8* %11, align 1
  %218 = zext i8 %217 to i32
  %219 = shl nuw nsw i32 %218, 6
  %220 = add nuw nsw i32 %189, %219
  %221 = lshr i32 %220, 8
  %222 = trunc i32 %221 to i8
  %223 = getelementptr inbounds i8, i8* %187, i64 4
  store i8 %222, i8* %223, align 1
  %224 = load i8, i8* %12, align 1
  %225 = zext i8 %224 to i32
  %226 = shl nuw nsw i32 %225, 6
  %227 = add nuw nsw i32 %189, %226
  %228 = lshr i32 %227, 8
  %229 = trunc i32 %228 to i8
  %230 = getelementptr inbounds i8, i8* %187, i64 5
  store i8 %229, i8* %230, align 1
  %231 = load i8, i8* %13, align 1
  %232 = zext i8 %231 to i32
  %233 = shl nuw nsw i32 %232, 6
  %234 = add nuw nsw i32 %189, %233
  %235 = lshr i32 %234, 8
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds i8, i8* %187, i64 6
  store i8 %236, i8* %237, align 1
  %238 = load i8, i8* %14, align 1
  %239 = zext i8 %238 to i32
  %240 = shl nuw nsw i32 %239, 6
  %241 = add nuw nsw i32 %189, %240
  %242 = lshr i32 %241, 8
  %243 = trunc i32 %242 to i8
  %244 = getelementptr inbounds i8, i8* %187, i64 7
  store i8 %243, i8* %244, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, 128
  %9 = mul nuw nsw i32 %7, 59
  %10 = add nuw nsw i32 %9, 128
  %11 = mul nuw nsw i32 %7, 110
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %7, 151
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %7, 183
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %7, 206
  %18 = add nuw nsw i32 %17, 128
  %19 = mul nuw nsw i32 %7, 219
  %20 = add nuw nsw i32 %19, 128
  %21 = mul nuw nsw i32 %7, 224
  %22 = add nuw nsw i32 %21, 128
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i64 [ 0, %4 ], [ %83, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %82, %23 ]
  %26 = getelementptr inbounds i8, i8* %3, i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, 255
  %30 = add nuw nsw i32 %8, %29
  %31 = lshr i32 %30, 8
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %25, align 1
  %33 = load i8, i8* %26, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, 197
  %36 = add nuw nsw i32 %10, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %38, i8* %39, align 1
  %40 = load i8, i8* %26, align 1
  %41 = zext i8 %40 to i32
  %42 = mul nuw nsw i32 %41, 146
  %43 = add nuw nsw i32 %12, %42
  %44 = lshr i32 %43, 8
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %45, i8* %46, align 1
  %47 = load i8, i8* %26, align 1
  %48 = zext i8 %47 to i32
  %49 = mul nuw nsw i32 %48, 105
  %50 = add nuw nsw i32 %14, %49
  %51 = lshr i32 %50, 8
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %52, i8* %53, align 1
  %54 = load i8, i8* %26, align 1
  %55 = zext i8 %54 to i32
  %56 = mul nuw nsw i32 %55, 73
  %57 = add nuw nsw i32 %16, %56
  %58 = lshr i32 %57, 8
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %59, i8* %60, align 1
  %61 = load i8, i8* %26, align 1
  %62 = zext i8 %61 to i32
  %63 = mul nuw nsw i32 %62, 50
  %64 = add nuw nsw i32 %18, %63
  %65 = lshr i32 %64, 8
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %66, i8* %67, align 1
  %68 = load i8, i8* %26, align 1
  %69 = zext i8 %68 to i32
  %70 = mul nuw nsw i32 %69, 37
  %71 = add nuw nsw i32 %20, %70
  %72 = lshr i32 %71, 8
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %73, i8* %74, align 1
  %75 = load i8, i8* %26, align 1
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 5
  %78 = add nuw nsw i32 %22, %77
  %79 = lshr i32 %78, 8
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %80, i8* %81, align 1
  %82 = getelementptr inbounds i8, i8* %25, i64 %1
  %83 = add nuw nsw i64 %24, 1
  %84 = icmp eq i64 %83, 4
  br i1 %84, label %85, label %23

85:                                               ; preds = %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi8ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %0 to i64*
  store i64 -9187201950435737472, i64* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to i64*
  store i64 -9187201950435737472, i64* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to i64*
  store i64 -9187201950435737472, i64* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to i64*
  store i64 -9187201950435737472, i64* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to i64*
  store i64 -9187201950435737472, i64* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to i64*
  store i64 -9187201950435737472, i64* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to i64*
  store i64 -9187201950435737472, i64* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to i64*
  store i64 -9187201950435737472, i64* %19, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <8 x i8>*
  %6 = load <8 x i8>, <8 x i8>* %5, align 1
  %7 = zext <8 x i8> %6 to <8 x i32>
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <8 x i32> %8, %7
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <8 x i32> %9, %10
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <8 x i32> %11, %12
  %14 = extractelement <8 x i32> %13, i32 0
  %15 = add nuw nsw i32 %14, 4
  %16 = lshr i32 %15, 3
  %17 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %17, i64 8, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %17, i64 8, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %17, i64 8, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %17, i64 8, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %17, i64 8, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %17, i64 8, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %17, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %17, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <8 x i8>*
  %6 = load <8 x i8>, <8 x i8>* %5, align 1
  %7 = zext <8 x i8> %6 to <8 x i32>
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <8 x i32> %8, %7
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <8 x i32> %9, %10
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <8 x i32> %11, %12
  %14 = extractelement <8 x i32> %13, i32 0
  %15 = add nuw nsw i32 %14, 4
  %16 = lshr i32 %15, 3
  %17 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %17, i64 8, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %17, i64 8, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %17, i64 8, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %17, i64 8, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %17, i64 8, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %17, i64 8, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %17, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %17, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <8 x i8>*
  %6 = load <8 x i8>, <8 x i8>* %5, align 1
  %7 = zext <8 x i8> %6 to <8 x i32>
  %8 = load i8, i8* %3, align 1
  %9 = zext i8 %8 to i32
  %10 = getelementptr inbounds i8, i8* %3, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds i8, i8* %3, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds i8, i8* %3, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds i8, i8* %3, i64 4
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %3, i64 5
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %3, i64 6
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = add nuw nsw <8 x i32> %28, %7
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = add nuw nsw <8 x i32> %29, %30
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add nuw nsw <8 x i32> %31, %32
  %34 = extractelement <8 x i32> %33, i32 0
  %35 = add nuw nsw i32 %34, %9
  %36 = add nuw nsw i32 %35, %12
  %37 = add nuw nsw i32 %36, %15
  %38 = add nuw nsw i32 %37, %18
  %39 = add nuw nsw i32 %38, %21
  %40 = add nuw nsw i32 %39, %24
  %41 = add nuw nsw i32 %40, %27
  %42 = add nuw nsw i32 %41, 8
  %43 = getelementptr inbounds i8, i8* %3, i64 7
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = add nuw nsw i32 %42, %45
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %48, i64 8, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %48, i64 8, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %48, i64 8, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %48, i64 8, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %48, i64 8, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %52, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %48, i64 8, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %48, i64 8, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 %48, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i64*
  %6 = bitcast i8* %0 to i64*
  %7 = load i64, i64* %5, align 1
  store i64 %7, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %5, align 1
  store i64 %10, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %5, align 1
  store i64 %13, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %5, align 1
  store i64 %16, i64* %15, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %5, align 1
  store i64 %19, i64* %18, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 %1
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %5, align 1
  store i64 %22, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %20, i64 %1
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %5, align 1
  store i64 %25, i64* %24, align 1
  %26 = getelementptr inbounds i8, i8* %23, i64 %1
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %5, align 1
  store i64 %28, i64* %27, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 8, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 8, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 8, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 8, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 8, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 8, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 8
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 8
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 7
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  %12 = mul nuw nsw i32 %10, 59
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  %14 = mul nuw nsw i32 %10, 110
  %15 = getelementptr inbounds i8, i8* %2, i64 3
  %16 = mul nuw nsw i32 %10, 151
  %17 = getelementptr inbounds i8, i8* %2, i64 4
  %18 = mul nuw nsw i32 %10, 183
  %19 = getelementptr inbounds i8, i8* %2, i64 5
  %20 = mul nuw nsw i32 %10, 206
  %21 = getelementptr inbounds i8, i8* %2, i64 6
  %22 = mul nuw nsw i32 %10, 219
  %23 = mul nuw nsw i32 %10, 224
  br label %24

24:                                               ; preds = %24, %4
  %25 = phi i64 [ 0, %4 ], [ %131, %24 ]
  %26 = phi i8* [ %0, %4 ], [ %130, %24 ]
  %27 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %25
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %3, i64 %25
  %31 = sub i8 0, %28
  %32 = zext i8 %31 to i32
  %33 = mul nuw nsw i32 %32, %9
  %34 = add nuw nsw i32 %33, 256
  %35 = load i8, i8* %2, align 1
  %36 = zext i8 %35 to i32
  %37 = mul nuw nsw i32 %36, %29
  %38 = load i8, i8* %30, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, 255
  %41 = add nuw nsw i32 %34, %37
  %42 = add nuw nsw i32 %41, %10
  %43 = add nuw nsw i32 %42, %40
  %44 = lshr i32 %43, 9
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %26, align 1
  %46 = load i8, i8* %11, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %29
  %49 = load i8, i8* %30, align 1
  %50 = zext i8 %49 to i32
  %51 = mul nuw nsw i32 %50, 197
  %52 = add nuw nsw i32 %34, %48
  %53 = add nuw nsw i32 %52, %12
  %54 = add nuw nsw i32 %53, %51
  %55 = lshr i32 %54, 9
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %26, i64 1
  store i8 %56, i8* %57, align 1
  %58 = load i8, i8* %13, align 1
  %59 = zext i8 %58 to i32
  %60 = mul nuw nsw i32 %59, %29
  %61 = load i8, i8* %30, align 1
  %62 = zext i8 %61 to i32
  %63 = mul nuw nsw i32 %62, 146
  %64 = add nuw nsw i32 %34, %60
  %65 = add nuw nsw i32 %64, %14
  %66 = add nuw nsw i32 %65, %63
  %67 = lshr i32 %66, 9
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds i8, i8* %26, i64 2
  store i8 %68, i8* %69, align 1
  %70 = load i8, i8* %15, align 1
  %71 = zext i8 %70 to i32
  %72 = mul nuw nsw i32 %71, %29
  %73 = load i8, i8* %30, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, 105
  %76 = add nuw nsw i32 %34, %72
  %77 = add nuw nsw i32 %76, %16
  %78 = add nuw nsw i32 %77, %75
  %79 = lshr i32 %78, 9
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %26, i64 3
  store i8 %80, i8* %81, align 1
  %82 = load i8, i8* %17, align 1
  %83 = zext i8 %82 to i32
  %84 = mul nuw nsw i32 %83, %29
  %85 = load i8, i8* %30, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, 73
  %88 = add nuw nsw i32 %34, %84
  %89 = add nuw nsw i32 %88, %18
  %90 = add nuw nsw i32 %89, %87
  %91 = lshr i32 %90, 9
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %26, i64 4
  store i8 %92, i8* %93, align 1
  %94 = load i8, i8* %19, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %29
  %97 = load i8, i8* %30, align 1
  %98 = zext i8 %97 to i32
  %99 = mul nuw nsw i32 %98, 50
  %100 = add nuw nsw i32 %34, %96
  %101 = add nuw nsw i32 %100, %20
  %102 = add nuw nsw i32 %101, %99
  %103 = lshr i32 %102, 9
  %104 = trunc i32 %103 to i8
  %105 = getelementptr inbounds i8, i8* %26, i64 5
  store i8 %104, i8* %105, align 1
  %106 = load i8, i8* %21, align 1
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, %29
  %109 = load i8, i8* %30, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, 37
  %112 = add nuw nsw i32 %34, %108
  %113 = add nuw nsw i32 %112, %22
  %114 = add nuw nsw i32 %113, %111
  %115 = lshr i32 %114, 9
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds i8, i8* %26, i64 6
  store i8 %116, i8* %117, align 1
  %118 = load i8, i8* %5, align 1
  %119 = zext i8 %118 to i32
  %120 = mul nuw nsw i32 %119, %29
  %121 = load i8, i8* %30, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 5
  %124 = add nuw nsw i32 %34, %120
  %125 = add nuw nsw i32 %124, %23
  %126 = add nuw nsw i32 %125, %123
  %127 = lshr i32 %126, 9
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %26, i64 7
  store i8 %128, i8* %129, align 1
  %130 = getelementptr inbounds i8, i8* %26, i64 %1
  %131 = add nuw nsw i64 %25, 1
  %132 = icmp eq i64 %131, 8
  br i1 %132, label %133, label %24

133:                                              ; preds = %24
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i8, i8* %2, i64 5
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = getelementptr inbounds i8, i8* %2, i64 7
  br label %15

15:                                               ; preds = %15, %4
  %16 = phi i64 [ 0, %4 ], [ %81, %15 ]
  %17 = phi i8* [ %0, %4 ], [ %80, %15 ]
  %18 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %16
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = sub i8 0, %19
  %22 = zext i8 %21 to i32
  %23 = mul nuw nsw i32 %22, %7
  %24 = add nuw nsw i32 %23, 128
  %25 = load i8, i8* %2, align 1
  %26 = zext i8 %25 to i32
  %27 = mul nuw nsw i32 %26, %20
  %28 = add nuw nsw i32 %24, %27
  %29 = lshr i32 %28, 8
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %17, align 1
  %31 = load i8, i8* %8, align 1
  %32 = zext i8 %31 to i32
  %33 = mul nuw nsw i32 %32, %20
  %34 = add nuw nsw i32 %24, %33
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %36, i8* %37, align 1
  %38 = load i8, i8* %9, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, %20
  %41 = add nuw nsw i32 %24, %40
  %42 = lshr i32 %41, 8
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 %43, i8* %44, align 1
  %45 = load i8, i8* %10, align 1
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %20
  %48 = add nuw nsw i32 %24, %47
  %49 = lshr i32 %48, 8
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds i8, i8* %17, i64 3
  store i8 %50, i8* %51, align 1
  %52 = load i8, i8* %11, align 1
  %53 = zext i8 %52 to i32
  %54 = mul nuw nsw i32 %53, %20
  %55 = add nuw nsw i32 %24, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds i8, i8* %17, i64 4
  store i8 %57, i8* %58, align 1
  %59 = load i8, i8* %12, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nuw nsw i32 %60, %20
  %62 = add nuw nsw i32 %24, %61
  %63 = lshr i32 %62, 8
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %17, i64 5
  store i8 %64, i8* %65, align 1
  %66 = load i8, i8* %13, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %67, %20
  %69 = add nuw nsw i32 %24, %68
  %70 = lshr i32 %69, 8
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %17, i64 6
  store i8 %71, i8* %72, align 1
  %73 = load i8, i8* %14, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %20
  %76 = add nuw nsw i32 %24, %75
  %77 = lshr i32 %76, 8
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds i8, i8* %17, i64 7
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %17, i64 %1
  %81 = add nuw nsw i64 %16, 1
  %82 = icmp eq i64 %81, 8
  br i1 %82, label %83, label %15

83:                                               ; preds = %15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, 128
  %9 = mul nuw nsw i32 %7, 59
  %10 = add nuw nsw i32 %9, 128
  %11 = mul nuw nsw i32 %7, 110
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %7, 151
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %7, 183
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %7, 206
  %18 = add nuw nsw i32 %17, 128
  %19 = mul nuw nsw i32 %7, 219
  %20 = add nuw nsw i32 %19, 128
  %21 = mul nuw nsw i32 %7, 224
  %22 = add nuw nsw i32 %21, 128
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i64 [ 0, %4 ], [ %83, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %82, %23 ]
  %26 = getelementptr inbounds i8, i8* %3, i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, 255
  %30 = add nuw nsw i32 %8, %29
  %31 = lshr i32 %30, 8
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %25, align 1
  %33 = load i8, i8* %26, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, 197
  %36 = add nuw nsw i32 %10, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %38, i8* %39, align 1
  %40 = load i8, i8* %26, align 1
  %41 = zext i8 %40 to i32
  %42 = mul nuw nsw i32 %41, 146
  %43 = add nuw nsw i32 %12, %42
  %44 = lshr i32 %43, 8
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %45, i8* %46, align 1
  %47 = load i8, i8* %26, align 1
  %48 = zext i8 %47 to i32
  %49 = mul nuw nsw i32 %48, 105
  %50 = add nuw nsw i32 %14, %49
  %51 = lshr i32 %50, 8
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %52, i8* %53, align 1
  %54 = load i8, i8* %26, align 1
  %55 = zext i8 %54 to i32
  %56 = mul nuw nsw i32 %55, 73
  %57 = add nuw nsw i32 %16, %56
  %58 = lshr i32 %57, 8
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %59, i8* %60, align 1
  %61 = load i8, i8* %26, align 1
  %62 = zext i8 %61 to i32
  %63 = mul nuw nsw i32 %62, 50
  %64 = add nuw nsw i32 %18, %63
  %65 = lshr i32 %64, 8
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %66, i8* %67, align 1
  %68 = load i8, i8* %26, align 1
  %69 = zext i8 %68 to i32
  %70 = mul nuw nsw i32 %69, 37
  %71 = add nuw nsw i32 %20, %70
  %72 = lshr i32 %71, 8
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %73, i8* %74, align 1
  %75 = load i8, i8* %26, align 1
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 5
  %78 = add nuw nsw i32 %22, %77
  %79 = lshr i32 %78, 8
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %80, i8* %81, align 1
  %82 = getelementptr inbounds i8, i8* %25, i64 %1
  %83 = add nuw nsw i64 %24, 1
  %84 = icmp eq i64 %83, 8
  br i1 %84, label %85, label %23

85:                                               ; preds = %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi16ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %0 to i64*
  store i64 -9187201950435737472, i64* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to i64*
  store i64 -9187201950435737472, i64* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to i64*
  store i64 -9187201950435737472, i64* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to i64*
  store i64 -9187201950435737472, i64* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to i64*
  store i64 -9187201950435737472, i64* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to i64*
  store i64 -9187201950435737472, i64* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to i64*
  store i64 -9187201950435737472, i64* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to i64*
  store i64 -9187201950435737472, i64* %19, align 1
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = bitcast i8* %20 to i64*
  store i64 -9187201950435737472, i64* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 %1
  %23 = bitcast i8* %22 to i64*
  store i64 -9187201950435737472, i64* %23, align 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = bitcast i8* %24 to i64*
  store i64 -9187201950435737472, i64* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to i64*
  store i64 -9187201950435737472, i64* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to i64*
  store i64 -9187201950435737472, i64* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to i64*
  store i64 -9187201950435737472, i64* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to i64*
  store i64 -9187201950435737472, i64* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to i64*
  store i64 -9187201950435737472, i64* %35, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <8 x i8>*
  %6 = load <8 x i8>, <8 x i8>* %5, align 1
  %7 = zext <8 x i8> %6 to <8 x i32>
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <8 x i32> %8, %7
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <8 x i32> %9, %10
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <8 x i32> %11, %12
  %14 = extractelement <8 x i32> %13, i32 0
  %15 = add nuw nsw i32 %14, 4
  %16 = lshr i32 %15, 3
  %17 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %17, i64 8, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %17, i64 8, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %17, i64 8, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %17, i64 8, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %17, i64 8, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %17, i64 8, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %17, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %17, i64 8, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %17, i64 8, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %17, i64 8, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %17, i64 8, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %17, i64 8, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %17, i64 8, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %17, i64 8, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %17, i64 8, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %17, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 8, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 8, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 8, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 8, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %19, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %19, i64 8, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %19, i64 8, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %19, i64 8, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %19, i64 8, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %19, i64 8, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %19, i64 8, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %19, i64 8, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %19, i64 8, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %19, i64 8, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %19, i64 8, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %19, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = add nuw nsw i16 %6, 12
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = add nuw nsw i16 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i16
  %15 = add nuw nsw i16 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = add nuw nsw i16 %15, %18
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = add nuw nsw i16 %19, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = add nuw nsw i16 %23, %26
  %28 = getelementptr inbounds i8, i8* %2, i64 6
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  %31 = add i16 %27, %30
  %32 = getelementptr inbounds i8, i8* %2, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = add i16 %31, %34
  %36 = load i8, i8* %3, align 1
  %37 = zext i8 %36 to i16
  %38 = add i16 %35, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  %42 = add i16 %38, %41
  %43 = getelementptr inbounds i8, i8* %3, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = add i16 %42, %45
  %47 = getelementptr inbounds i8, i8* %3, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = add i16 %46, %49
  %51 = getelementptr inbounds i8, i8* %3, i64 4
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = add i16 %50, %53
  %55 = getelementptr inbounds i8, i8* %3, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  %58 = add i16 %54, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 6
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = add i16 %58, %61
  %63 = getelementptr inbounds i8, i8* %3, i64 7
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = add i16 %62, %65
  %67 = getelementptr inbounds i8, i8* %3, i64 8
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i16
  %70 = add i16 %66, %69
  %71 = getelementptr inbounds i8, i8* %3, i64 9
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  %74 = add i16 %70, %73
  %75 = getelementptr inbounds i8, i8* %3, i64 10
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i16
  %78 = add i16 %74, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 11
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = add i16 %78, %81
  %83 = getelementptr inbounds i8, i8* %3, i64 12
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i16
  %86 = add i16 %82, %85
  %87 = getelementptr inbounds i8, i8* %3, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i16
  %90 = add i16 %86, %89
  %91 = getelementptr inbounds i8, i8* %3, i64 14
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i16
  %94 = add i16 %90, %93
  %95 = getelementptr inbounds i8, i8* %3, i64 15
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = add i16 %94, %97
  %99 = udiv i16 %98, 24
  %100 = trunc i16 %99 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %100, i64 8, i1 false) #5
  %101 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %100, i64 8, i1 false) #5
  %102 = getelementptr inbounds i8, i8* %101, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 %100, i64 8, i1 false) #5
  %103 = getelementptr inbounds i8, i8* %102, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 %100, i64 8, i1 false) #5
  %104 = getelementptr inbounds i8, i8* %103, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %100, i64 8, i1 false) #5
  %105 = getelementptr inbounds i8, i8* %104, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 %100, i64 8, i1 false) #5
  %106 = getelementptr inbounds i8, i8* %105, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 %100, i64 8, i1 false) #5
  %107 = getelementptr inbounds i8, i8* %106, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %100, i64 8, i1 false) #5
  %108 = getelementptr inbounds i8, i8* %107, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %108, i8 %100, i64 8, i1 false) #5
  %109 = getelementptr inbounds i8, i8* %108, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 %100, i64 8, i1 false) #5
  %110 = getelementptr inbounds i8, i8* %109, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 %100, i64 8, i1 false) #5
  %111 = getelementptr inbounds i8, i8* %110, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %111, i8 %100, i64 8, i1 false) #5
  %112 = getelementptr inbounds i8, i8* %111, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %112, i8 %100, i64 8, i1 false) #5
  %113 = getelementptr inbounds i8, i8* %112, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %113, i8 %100, i64 8, i1 false) #5
  %114 = getelementptr inbounds i8, i8* %113, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 %100, i64 8, i1 false) #5
  %115 = getelementptr inbounds i8, i8* %114, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %115, i8 %100, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i64*
  %6 = bitcast i8* %0 to i64*
  %7 = load i64, i64* %5, align 1
  store i64 %7, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %5, align 1
  store i64 %10, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %5, align 1
  store i64 %13, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %5, align 1
  store i64 %16, i64* %15, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %5, align 1
  store i64 %19, i64* %18, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 %1
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %5, align 1
  store i64 %22, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %20, i64 %1
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %5, align 1
  store i64 %25, i64* %24, align 1
  %26 = getelementptr inbounds i8, i8* %23, i64 %1
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %5, align 1
  store i64 %28, i64* %27, align 1
  %29 = getelementptr inbounds i8, i8* %26, i64 %1
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %5, align 1
  store i64 %31, i64* %30, align 1
  %32 = getelementptr inbounds i8, i8* %29, i64 %1
  %33 = bitcast i8* %32 to i64*
  %34 = load i64, i64* %5, align 1
  store i64 %34, i64* %33, align 1
  %35 = getelementptr inbounds i8, i8* %32, i64 %1
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %5, align 1
  store i64 %37, i64* %36, align 1
  %38 = getelementptr inbounds i8, i8* %35, i64 %1
  %39 = bitcast i8* %38 to i64*
  %40 = load i64, i64* %5, align 1
  store i64 %40, i64* %39, align 1
  %41 = getelementptr inbounds i8, i8* %38, i64 %1
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %5, align 1
  store i64 %43, i64* %42, align 1
  %44 = getelementptr inbounds i8, i8* %41, i64 %1
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %5, align 1
  store i64 %46, i64* %45, align 1
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %5, align 1
  store i64 %49, i64* %48, align 1
  %50 = getelementptr inbounds i8, i8* %47, i64 %1
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %5, align 1
  store i64 %52, i64* %51, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 8, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 8, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 8, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 8, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 8, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 8, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 8, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %24, i64 %1
  %28 = getelementptr inbounds i8, i8* %3, i64 8
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 8, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %27, i64 %1
  %31 = getelementptr inbounds i8, i8* %3, i64 9
  %32 = load i8, i8* %31, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 8, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %30, i64 %1
  %34 = getelementptr inbounds i8, i8* %3, i64 10
  %35 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %35, i64 8, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %33, i64 %1
  %37 = getelementptr inbounds i8, i8* %3, i64 11
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 8, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %36, i64 %1
  %40 = getelementptr inbounds i8, i8* %3, i64 12
  %41 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %41, i64 8, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 13
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 8, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %42, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 14
  %47 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %47, i64 8, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %45, i64 %1
  %49 = getelementptr inbounds i8, i8* %3, i64 15
  %50 = load i8, i8* %49, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 16
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 8
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 15
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  %12 = mul nuw nsw i32 %10, 59
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  %14 = mul nuw nsw i32 %10, 110
  %15 = getelementptr inbounds i8, i8* %2, i64 3
  %16 = mul nuw nsw i32 %10, 151
  %17 = getelementptr inbounds i8, i8* %2, i64 4
  %18 = mul nuw nsw i32 %10, 183
  %19 = getelementptr inbounds i8, i8* %2, i64 5
  %20 = mul nuw nsw i32 %10, 206
  %21 = getelementptr inbounds i8, i8* %2, i64 6
  %22 = mul nuw nsw i32 %10, 219
  %23 = mul nuw nsw i32 %10, 224
  br label %24

24:                                               ; preds = %24, %4
  %25 = phi i64 [ 0, %4 ], [ %131, %24 ]
  %26 = phi i8* [ %0, %4 ], [ %130, %24 ]
  %27 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %25
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %3, i64 %25
  %31 = sub i8 0, %28
  %32 = zext i8 %31 to i32
  %33 = mul nuw nsw i32 %32, %9
  %34 = add nuw nsw i32 %33, 256
  %35 = load i8, i8* %2, align 1
  %36 = zext i8 %35 to i32
  %37 = mul nuw nsw i32 %36, %29
  %38 = load i8, i8* %30, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, 255
  %41 = add nuw nsw i32 %34, %37
  %42 = add nuw nsw i32 %41, %10
  %43 = add nuw nsw i32 %42, %40
  %44 = lshr i32 %43, 9
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %26, align 1
  %46 = load i8, i8* %11, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %29
  %49 = load i8, i8* %30, align 1
  %50 = zext i8 %49 to i32
  %51 = mul nuw nsw i32 %50, 197
  %52 = add nuw nsw i32 %34, %48
  %53 = add nuw nsw i32 %52, %12
  %54 = add nuw nsw i32 %53, %51
  %55 = lshr i32 %54, 9
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %26, i64 1
  store i8 %56, i8* %57, align 1
  %58 = load i8, i8* %13, align 1
  %59 = zext i8 %58 to i32
  %60 = mul nuw nsw i32 %59, %29
  %61 = load i8, i8* %30, align 1
  %62 = zext i8 %61 to i32
  %63 = mul nuw nsw i32 %62, 146
  %64 = add nuw nsw i32 %34, %60
  %65 = add nuw nsw i32 %64, %14
  %66 = add nuw nsw i32 %65, %63
  %67 = lshr i32 %66, 9
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds i8, i8* %26, i64 2
  store i8 %68, i8* %69, align 1
  %70 = load i8, i8* %15, align 1
  %71 = zext i8 %70 to i32
  %72 = mul nuw nsw i32 %71, %29
  %73 = load i8, i8* %30, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, 105
  %76 = add nuw nsw i32 %34, %72
  %77 = add nuw nsw i32 %76, %16
  %78 = add nuw nsw i32 %77, %75
  %79 = lshr i32 %78, 9
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %26, i64 3
  store i8 %80, i8* %81, align 1
  %82 = load i8, i8* %17, align 1
  %83 = zext i8 %82 to i32
  %84 = mul nuw nsw i32 %83, %29
  %85 = load i8, i8* %30, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, 73
  %88 = add nuw nsw i32 %34, %84
  %89 = add nuw nsw i32 %88, %18
  %90 = add nuw nsw i32 %89, %87
  %91 = lshr i32 %90, 9
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %26, i64 4
  store i8 %92, i8* %93, align 1
  %94 = load i8, i8* %19, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %29
  %97 = load i8, i8* %30, align 1
  %98 = zext i8 %97 to i32
  %99 = mul nuw nsw i32 %98, 50
  %100 = add nuw nsw i32 %34, %96
  %101 = add nuw nsw i32 %100, %20
  %102 = add nuw nsw i32 %101, %99
  %103 = lshr i32 %102, 9
  %104 = trunc i32 %103 to i8
  %105 = getelementptr inbounds i8, i8* %26, i64 5
  store i8 %104, i8* %105, align 1
  %106 = load i8, i8* %21, align 1
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, %29
  %109 = load i8, i8* %30, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, 37
  %112 = add nuw nsw i32 %34, %108
  %113 = add nuw nsw i32 %112, %22
  %114 = add nuw nsw i32 %113, %111
  %115 = lshr i32 %114, 9
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds i8, i8* %26, i64 6
  store i8 %116, i8* %117, align 1
  %118 = load i8, i8* %5, align 1
  %119 = zext i8 %118 to i32
  %120 = mul nuw nsw i32 %119, %29
  %121 = load i8, i8* %30, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 5
  %124 = add nuw nsw i32 %34, %120
  %125 = add nuw nsw i32 %124, %23
  %126 = add nuw nsw i32 %125, %123
  %127 = lshr i32 %126, 9
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %26, i64 7
  store i8 %128, i8* %129, align 1
  %130 = getelementptr inbounds i8, i8* %26, i64 %1
  %131 = add nuw nsw i64 %25, 1
  %132 = icmp eq i64 %131, 16
  br i1 %132, label %133, label %24

133:                                              ; preds = %24
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i8, i8* %2, i64 5
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = getelementptr inbounds i8, i8* %2, i64 7
  br label %15

15:                                               ; preds = %15, %4
  %16 = phi i64 [ 0, %4 ], [ %81, %15 ]
  %17 = phi i8* [ %0, %4 ], [ %80, %15 ]
  %18 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %16
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = sub i8 0, %19
  %22 = zext i8 %21 to i32
  %23 = mul nuw nsw i32 %22, %7
  %24 = add nuw nsw i32 %23, 128
  %25 = load i8, i8* %2, align 1
  %26 = zext i8 %25 to i32
  %27 = mul nuw nsw i32 %26, %20
  %28 = add nuw nsw i32 %24, %27
  %29 = lshr i32 %28, 8
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %17, align 1
  %31 = load i8, i8* %8, align 1
  %32 = zext i8 %31 to i32
  %33 = mul nuw nsw i32 %32, %20
  %34 = add nuw nsw i32 %24, %33
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %36, i8* %37, align 1
  %38 = load i8, i8* %9, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, %20
  %41 = add nuw nsw i32 %24, %40
  %42 = lshr i32 %41, 8
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 %43, i8* %44, align 1
  %45 = load i8, i8* %10, align 1
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %20
  %48 = add nuw nsw i32 %24, %47
  %49 = lshr i32 %48, 8
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds i8, i8* %17, i64 3
  store i8 %50, i8* %51, align 1
  %52 = load i8, i8* %11, align 1
  %53 = zext i8 %52 to i32
  %54 = mul nuw nsw i32 %53, %20
  %55 = add nuw nsw i32 %24, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds i8, i8* %17, i64 4
  store i8 %57, i8* %58, align 1
  %59 = load i8, i8* %12, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nuw nsw i32 %60, %20
  %62 = add nuw nsw i32 %24, %61
  %63 = lshr i32 %62, 8
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %17, i64 5
  store i8 %64, i8* %65, align 1
  %66 = load i8, i8* %13, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %67, %20
  %69 = add nuw nsw i32 %24, %68
  %70 = lshr i32 %69, 8
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %17, i64 6
  store i8 %71, i8* %72, align 1
  %73 = load i8, i8* %14, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %20
  %76 = add nuw nsw i32 %24, %75
  %77 = lshr i32 %76, 8
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds i8, i8* %17, i64 7
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %17, i64 %1
  %81 = add nuw nsw i64 %16, 1
  %82 = icmp eq i64 %81, 16
  br i1 %82, label %83, label %15

83:                                               ; preds = %15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, 128
  %9 = mul nuw nsw i32 %7, 59
  %10 = add nuw nsw i32 %9, 128
  %11 = mul nuw nsw i32 %7, 110
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %7, 151
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %7, 183
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %7, 206
  %18 = add nuw nsw i32 %17, 128
  %19 = mul nuw nsw i32 %7, 219
  %20 = add nuw nsw i32 %19, 128
  %21 = mul nuw nsw i32 %7, 224
  %22 = add nuw nsw i32 %21, 128
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i64 [ 0, %4 ], [ %83, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %82, %23 ]
  %26 = getelementptr inbounds i8, i8* %3, i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, 255
  %30 = add nuw nsw i32 %8, %29
  %31 = lshr i32 %30, 8
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %25, align 1
  %33 = load i8, i8* %26, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, 197
  %36 = add nuw nsw i32 %10, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %38, i8* %39, align 1
  %40 = load i8, i8* %26, align 1
  %41 = zext i8 %40 to i32
  %42 = mul nuw nsw i32 %41, 146
  %43 = add nuw nsw i32 %12, %42
  %44 = lshr i32 %43, 8
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %45, i8* %46, align 1
  %47 = load i8, i8* %26, align 1
  %48 = zext i8 %47 to i32
  %49 = mul nuw nsw i32 %48, 105
  %50 = add nuw nsw i32 %14, %49
  %51 = lshr i32 %50, 8
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %52, i8* %53, align 1
  %54 = load i8, i8* %26, align 1
  %55 = zext i8 %54 to i32
  %56 = mul nuw nsw i32 %55, 73
  %57 = add nuw nsw i32 %16, %56
  %58 = lshr i32 %57, 8
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %59, i8* %60, align 1
  %61 = load i8, i8* %26, align 1
  %62 = zext i8 %61 to i32
  %63 = mul nuw nsw i32 %62, 50
  %64 = add nuw nsw i32 %18, %63
  %65 = lshr i32 %64, 8
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %66, i8* %67, align 1
  %68 = load i8, i8* %26, align 1
  %69 = zext i8 %68 to i32
  %70 = mul nuw nsw i32 %69, 37
  %71 = add nuw nsw i32 %20, %70
  %72 = lshr i32 %71, 8
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %73, i8* %74, align 1
  %75 = load i8, i8* %26, align 1
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 5
  %78 = add nuw nsw i32 %22, %77
  %79 = lshr i32 %78, 8
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %80, i8* %81, align 1
  %82 = getelementptr inbounds i8, i8* %25, i64 %1
  %83 = add nuw nsw i64 %24, 1
  %84 = icmp eq i64 %83, 16
  br i1 %84, label %85, label %23

85:                                               ; preds = %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi32ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %0 to i64*
  store i64 -9187201950435737472, i64* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to i64*
  store i64 -9187201950435737472, i64* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to i64*
  store i64 -9187201950435737472, i64* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to i64*
  store i64 -9187201950435737472, i64* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to i64*
  store i64 -9187201950435737472, i64* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to i64*
  store i64 -9187201950435737472, i64* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to i64*
  store i64 -9187201950435737472, i64* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to i64*
  store i64 -9187201950435737472, i64* %19, align 1
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = bitcast i8* %20 to i64*
  store i64 -9187201950435737472, i64* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 %1
  %23 = bitcast i8* %22 to i64*
  store i64 -9187201950435737472, i64* %23, align 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = bitcast i8* %24 to i64*
  store i64 -9187201950435737472, i64* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to i64*
  store i64 -9187201950435737472, i64* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to i64*
  store i64 -9187201950435737472, i64* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to i64*
  store i64 -9187201950435737472, i64* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to i64*
  store i64 -9187201950435737472, i64* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to i64*
  store i64 -9187201950435737472, i64* %35, align 1
  %36 = getelementptr inbounds i8, i8* %34, i64 %1
  %37 = bitcast i8* %36 to i64*
  store i64 -9187201950435737472, i64* %37, align 1
  %38 = getelementptr inbounds i8, i8* %36, i64 %1
  %39 = bitcast i8* %38 to i64*
  store i64 -9187201950435737472, i64* %39, align 1
  %40 = getelementptr inbounds i8, i8* %38, i64 %1
  %41 = bitcast i8* %40 to i64*
  store i64 -9187201950435737472, i64* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 %1
  %43 = bitcast i8* %42 to i64*
  store i64 -9187201950435737472, i64* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 %1
  %45 = bitcast i8* %44 to i64*
  store i64 -9187201950435737472, i64* %45, align 1
  %46 = getelementptr inbounds i8, i8* %44, i64 %1
  %47 = bitcast i8* %46 to i64*
  store i64 -9187201950435737472, i64* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 %1
  %49 = bitcast i8* %48 to i64*
  store i64 -9187201950435737472, i64* %49, align 1
  %50 = getelementptr inbounds i8, i8* %48, i64 %1
  %51 = bitcast i8* %50 to i64*
  store i64 -9187201950435737472, i64* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 %1
  %53 = bitcast i8* %52 to i64*
  store i64 -9187201950435737472, i64* %53, align 1
  %54 = getelementptr inbounds i8, i8* %52, i64 %1
  %55 = bitcast i8* %54 to i64*
  store i64 -9187201950435737472, i64* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 %1
  %57 = bitcast i8* %56 to i64*
  store i64 -9187201950435737472, i64* %57, align 1
  %58 = getelementptr inbounds i8, i8* %56, i64 %1
  %59 = bitcast i8* %58 to i64*
  store i64 -9187201950435737472, i64* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 %1
  %61 = bitcast i8* %60 to i64*
  store i64 -9187201950435737472, i64* %61, align 1
  %62 = getelementptr inbounds i8, i8* %60, i64 %1
  %63 = bitcast i8* %62 to i64*
  store i64 -9187201950435737472, i64* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 %1
  %65 = bitcast i8* %64 to i64*
  store i64 -9187201950435737472, i64* %65, align 1
  %66 = getelementptr inbounds i8, i8* %64, i64 %1
  %67 = bitcast i8* %66 to i64*
  store i64 -9187201950435737472, i64* %67, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <8 x i8>*
  %6 = load <8 x i8>, <8 x i8>* %5, align 1
  %7 = zext <8 x i8> %6 to <8 x i32>
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <8 x i32> %8, %7
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <8 x i32> %9, %10
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <8 x i32> %11, %12
  %14 = extractelement <8 x i32> %13, i32 0
  %15 = add nuw nsw i32 %14, 4
  %16 = lshr i32 %15, 3
  %17 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %17, i64 8, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %17, i64 8, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %17, i64 8, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %17, i64 8, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %17, i64 8, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %17, i64 8, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %17, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %17, i64 8, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %17, i64 8, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %17, i64 8, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %17, i64 8, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %17, i64 8, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %17, i64 8, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %17, i64 8, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %17, i64 8, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %17, i64 8, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %17, i64 8, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %17, i64 8, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %17, i64 8, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %17, i64 8, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %17, i64 8, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %17, i64 8, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %17, i64 8, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %17, i64 8, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %17, i64 8, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %17, i64 8, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %17, i64 8, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %17, i64 8, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %17, i64 8, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %17, i64 8, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %17, i64 8, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %17, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i32>
  %8 = shufflevector <32 x i32> %7, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <32 x i32> %8, %7
  %10 = shufflevector <32 x i32> %9, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <32 x i32> %9, %10
  %12 = shufflevector <32 x i32> %11, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <32 x i32> %11, %12
  %14 = shufflevector <32 x i32> %13, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <32 x i32> %13, %14
  %16 = shufflevector <32 x i32> %15, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nuw nsw <32 x i32> %15, %16
  %18 = extractelement <32 x i32> %17, i32 0
  %19 = add nuw nsw i32 %18, 16
  %20 = lshr i32 %19, 5
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 8, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 8, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 8, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 8, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 8, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 8, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 8, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %21, i64 8, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %21, i64 8, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %21, i64 8, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %21, i64 8, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %21, i64 8, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %21, i64 8, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %21, i64 8, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %21, i64 8, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %21, i64 8, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %21, i64 8, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %21, i64 8, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %21, i64 8, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %21, i64 8, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %21, i64 8, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %21, i64 8, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %21, i64 8, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %21, i64 8, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %21, i64 8, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %21, i64 8, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %21, i64 8, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %21, i64 8, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %21, i64 8, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %21, i64 8, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %21, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = add nuw nsw i16 %6, 20
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = add nuw nsw i16 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i16
  %15 = add nuw nsw i16 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = add nuw nsw i16 %15, %18
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = add nuw nsw i16 %19, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = add nuw nsw i16 %23, %26
  %28 = getelementptr inbounds i8, i8* %2, i64 6
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  %31 = add i16 %27, %30
  %32 = getelementptr inbounds i8, i8* %2, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = add i16 %31, %34
  %36 = load i8, i8* %3, align 1
  %37 = zext i8 %36 to i16
  %38 = add i16 %35, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  %42 = add i16 %38, %41
  %43 = getelementptr inbounds i8, i8* %3, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = add i16 %42, %45
  %47 = getelementptr inbounds i8, i8* %3, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = add i16 %46, %49
  %51 = getelementptr inbounds i8, i8* %3, i64 4
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = add i16 %50, %53
  %55 = getelementptr inbounds i8, i8* %3, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  %58 = add i16 %54, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 6
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = add i16 %58, %61
  %63 = getelementptr inbounds i8, i8* %3, i64 7
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = add i16 %62, %65
  %67 = getelementptr inbounds i8, i8* %3, i64 8
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i16
  %70 = add i16 %66, %69
  %71 = getelementptr inbounds i8, i8* %3, i64 9
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  %74 = add i16 %70, %73
  %75 = getelementptr inbounds i8, i8* %3, i64 10
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i16
  %78 = add i16 %74, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 11
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = add i16 %78, %81
  %83 = getelementptr inbounds i8, i8* %3, i64 12
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i16
  %86 = add i16 %82, %85
  %87 = getelementptr inbounds i8, i8* %3, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i16
  %90 = add i16 %86, %89
  %91 = getelementptr inbounds i8, i8* %3, i64 14
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i16
  %94 = add i16 %90, %93
  %95 = getelementptr inbounds i8, i8* %3, i64 15
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = add i16 %94, %97
  %99 = getelementptr inbounds i8, i8* %3, i64 16
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i16
  %102 = add i16 %98, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 17
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = add i16 %102, %105
  %107 = getelementptr inbounds i8, i8* %3, i64 18
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i16
  %110 = add i16 %106, %109
  %111 = getelementptr inbounds i8, i8* %3, i64 19
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i16
  %114 = add i16 %110, %113
  %115 = getelementptr inbounds i8, i8* %3, i64 20
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i16
  %118 = add i16 %114, %117
  %119 = getelementptr inbounds i8, i8* %3, i64 21
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i16
  %122 = add i16 %118, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 22
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i16
  %126 = add i16 %122, %125
  %127 = getelementptr inbounds i8, i8* %3, i64 23
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i16
  %130 = add i16 %126, %129
  %131 = getelementptr inbounds i8, i8* %3, i64 24
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i16
  %134 = add i16 %130, %133
  %135 = getelementptr inbounds i8, i8* %3, i64 25
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i16
  %138 = add i16 %134, %137
  %139 = getelementptr inbounds i8, i8* %3, i64 26
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i16
  %142 = add i16 %138, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 27
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i16
  %146 = add i16 %142, %145
  %147 = getelementptr inbounds i8, i8* %3, i64 28
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i16
  %150 = add i16 %146, %149
  %151 = getelementptr inbounds i8, i8* %3, i64 29
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i16
  %154 = add i16 %150, %153
  %155 = getelementptr inbounds i8, i8* %3, i64 30
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i16
  %158 = add i16 %154, %157
  %159 = getelementptr inbounds i8, i8* %3, i64 31
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i16
  %162 = add i16 %158, %161
  %163 = udiv i16 %162, 40
  %164 = trunc i16 %163 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %164, i64 8, i1 false) #5
  %165 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %165, i8 %164, i64 8, i1 false) #5
  %166 = getelementptr inbounds i8, i8* %165, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %166, i8 %164, i64 8, i1 false) #5
  %167 = getelementptr inbounds i8, i8* %166, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %167, i8 %164, i64 8, i1 false) #5
  %168 = getelementptr inbounds i8, i8* %167, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %168, i8 %164, i64 8, i1 false) #5
  %169 = getelementptr inbounds i8, i8* %168, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %169, i8 %164, i64 8, i1 false) #5
  %170 = getelementptr inbounds i8, i8* %169, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %170, i8 %164, i64 8, i1 false) #5
  %171 = getelementptr inbounds i8, i8* %170, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %171, i8 %164, i64 8, i1 false) #5
  %172 = getelementptr inbounds i8, i8* %171, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %172, i8 %164, i64 8, i1 false) #5
  %173 = getelementptr inbounds i8, i8* %172, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %173, i8 %164, i64 8, i1 false) #5
  %174 = getelementptr inbounds i8, i8* %173, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %174, i8 %164, i64 8, i1 false) #5
  %175 = getelementptr inbounds i8, i8* %174, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %175, i8 %164, i64 8, i1 false) #5
  %176 = getelementptr inbounds i8, i8* %175, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %176, i8 %164, i64 8, i1 false) #5
  %177 = getelementptr inbounds i8, i8* %176, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %177, i8 %164, i64 8, i1 false) #5
  %178 = getelementptr inbounds i8, i8* %177, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %178, i8 %164, i64 8, i1 false) #5
  %179 = getelementptr inbounds i8, i8* %178, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %179, i8 %164, i64 8, i1 false) #5
  %180 = getelementptr inbounds i8, i8* %179, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %180, i8 %164, i64 8, i1 false) #5
  %181 = getelementptr inbounds i8, i8* %180, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %181, i8 %164, i64 8, i1 false) #5
  %182 = getelementptr inbounds i8, i8* %181, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %182, i8 %164, i64 8, i1 false) #5
  %183 = getelementptr inbounds i8, i8* %182, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %183, i8 %164, i64 8, i1 false) #5
  %184 = getelementptr inbounds i8, i8* %183, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %184, i8 %164, i64 8, i1 false) #5
  %185 = getelementptr inbounds i8, i8* %184, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %185, i8 %164, i64 8, i1 false) #5
  %186 = getelementptr inbounds i8, i8* %185, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %186, i8 %164, i64 8, i1 false) #5
  %187 = getelementptr inbounds i8, i8* %186, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %187, i8 %164, i64 8, i1 false) #5
  %188 = getelementptr inbounds i8, i8* %187, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %188, i8 %164, i64 8, i1 false) #5
  %189 = getelementptr inbounds i8, i8* %188, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %189, i8 %164, i64 8, i1 false) #5
  %190 = getelementptr inbounds i8, i8* %189, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %190, i8 %164, i64 8, i1 false) #5
  %191 = getelementptr inbounds i8, i8* %190, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %191, i8 %164, i64 8, i1 false) #5
  %192 = getelementptr inbounds i8, i8* %191, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %192, i8 %164, i64 8, i1 false) #5
  %193 = getelementptr inbounds i8, i8* %192, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %193, i8 %164, i64 8, i1 false) #5
  %194 = getelementptr inbounds i8, i8* %193, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %194, i8 %164, i64 8, i1 false) #5
  %195 = getelementptr inbounds i8, i8* %194, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %195, i8 %164, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i64*
  %6 = bitcast i8* %0 to i64*
  %7 = load i64, i64* %5, align 1
  store i64 %7, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %5, align 1
  store i64 %10, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %5, align 1
  store i64 %13, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %5, align 1
  store i64 %16, i64* %15, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %5, align 1
  store i64 %19, i64* %18, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 %1
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %5, align 1
  store i64 %22, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %20, i64 %1
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %5, align 1
  store i64 %25, i64* %24, align 1
  %26 = getelementptr inbounds i8, i8* %23, i64 %1
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %5, align 1
  store i64 %28, i64* %27, align 1
  %29 = getelementptr inbounds i8, i8* %26, i64 %1
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %5, align 1
  store i64 %31, i64* %30, align 1
  %32 = getelementptr inbounds i8, i8* %29, i64 %1
  %33 = bitcast i8* %32 to i64*
  %34 = load i64, i64* %5, align 1
  store i64 %34, i64* %33, align 1
  %35 = getelementptr inbounds i8, i8* %32, i64 %1
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %5, align 1
  store i64 %37, i64* %36, align 1
  %38 = getelementptr inbounds i8, i8* %35, i64 %1
  %39 = bitcast i8* %38 to i64*
  %40 = load i64, i64* %5, align 1
  store i64 %40, i64* %39, align 1
  %41 = getelementptr inbounds i8, i8* %38, i64 %1
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %5, align 1
  store i64 %43, i64* %42, align 1
  %44 = getelementptr inbounds i8, i8* %41, i64 %1
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %5, align 1
  store i64 %46, i64* %45, align 1
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %5, align 1
  store i64 %49, i64* %48, align 1
  %50 = getelementptr inbounds i8, i8* %47, i64 %1
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %5, align 1
  store i64 %52, i64* %51, align 1
  %53 = getelementptr inbounds i8, i8* %50, i64 %1
  %54 = bitcast i8* %53 to i64*
  %55 = load i64, i64* %5, align 1
  store i64 %55, i64* %54, align 1
  %56 = getelementptr inbounds i8, i8* %53, i64 %1
  %57 = bitcast i8* %56 to i64*
  %58 = load i64, i64* %5, align 1
  store i64 %58, i64* %57, align 1
  %59 = getelementptr inbounds i8, i8* %56, i64 %1
  %60 = bitcast i8* %59 to i64*
  %61 = load i64, i64* %5, align 1
  store i64 %61, i64* %60, align 1
  %62 = getelementptr inbounds i8, i8* %59, i64 %1
  %63 = bitcast i8* %62 to i64*
  %64 = load i64, i64* %5, align 1
  store i64 %64, i64* %63, align 1
  %65 = getelementptr inbounds i8, i8* %62, i64 %1
  %66 = bitcast i8* %65 to i64*
  %67 = load i64, i64* %5, align 1
  store i64 %67, i64* %66, align 1
  %68 = getelementptr inbounds i8, i8* %65, i64 %1
  %69 = bitcast i8* %68 to i64*
  %70 = load i64, i64* %5, align 1
  store i64 %70, i64* %69, align 1
  %71 = getelementptr inbounds i8, i8* %68, i64 %1
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %5, align 1
  store i64 %73, i64* %72, align 1
  %74 = getelementptr inbounds i8, i8* %71, i64 %1
  %75 = bitcast i8* %74 to i64*
  %76 = load i64, i64* %5, align 1
  store i64 %76, i64* %75, align 1
  %77 = getelementptr inbounds i8, i8* %74, i64 %1
  %78 = bitcast i8* %77 to i64*
  %79 = load i64, i64* %5, align 1
  store i64 %79, i64* %78, align 1
  %80 = getelementptr inbounds i8, i8* %77, i64 %1
  %81 = bitcast i8* %80 to i64*
  %82 = load i64, i64* %5, align 1
  store i64 %82, i64* %81, align 1
  %83 = getelementptr inbounds i8, i8* %80, i64 %1
  %84 = bitcast i8* %83 to i64*
  %85 = load i64, i64* %5, align 1
  store i64 %85, i64* %84, align 1
  %86 = getelementptr inbounds i8, i8* %83, i64 %1
  %87 = bitcast i8* %86 to i64*
  %88 = load i64, i64* %5, align 1
  store i64 %88, i64* %87, align 1
  %89 = getelementptr inbounds i8, i8* %86, i64 %1
  %90 = bitcast i8* %89 to i64*
  %91 = load i64, i64* %5, align 1
  store i64 %91, i64* %90, align 1
  %92 = getelementptr inbounds i8, i8* %89, i64 %1
  %93 = bitcast i8* %92 to i64*
  %94 = load i64, i64* %5, align 1
  store i64 %94, i64* %93, align 1
  %95 = getelementptr inbounds i8, i8* %92, i64 %1
  %96 = bitcast i8* %95 to i64*
  %97 = load i64, i64* %5, align 1
  store i64 %97, i64* %96, align 1
  %98 = getelementptr inbounds i8, i8* %95, i64 %1
  %99 = bitcast i8* %98 to i64*
  %100 = load i64, i64* %5, align 1
  store i64 %100, i64* %99, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 8, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 8, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 8, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 8, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 8, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 8, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 8, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 8, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %24, i64 %1
  %28 = getelementptr inbounds i8, i8* %3, i64 8
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 8, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %27, i64 %1
  %31 = getelementptr inbounds i8, i8* %3, i64 9
  %32 = load i8, i8* %31, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 8, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %30, i64 %1
  %34 = getelementptr inbounds i8, i8* %3, i64 10
  %35 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %35, i64 8, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %33, i64 %1
  %37 = getelementptr inbounds i8, i8* %3, i64 11
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 8, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %36, i64 %1
  %40 = getelementptr inbounds i8, i8* %3, i64 12
  %41 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %41, i64 8, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 13
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 8, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %42, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 14
  %47 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %47, i64 8, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %45, i64 %1
  %49 = getelementptr inbounds i8, i8* %3, i64 15
  %50 = load i8, i8* %49, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 8, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %48, i64 %1
  %52 = getelementptr inbounds i8, i8* %3, i64 16
  %53 = load i8, i8* %52, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %53, i64 8, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %51, i64 %1
  %55 = getelementptr inbounds i8, i8* %3, i64 17
  %56 = load i8, i8* %55, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %56, i64 8, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %54, i64 %1
  %58 = getelementptr inbounds i8, i8* %3, i64 18
  %59 = load i8, i8* %58, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %59, i64 8, i1 false) #5
  %60 = getelementptr inbounds i8, i8* %57, i64 %1
  %61 = getelementptr inbounds i8, i8* %3, i64 19
  %62 = load i8, i8* %61, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %62, i64 8, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %60, i64 %1
  %64 = getelementptr inbounds i8, i8* %3, i64 20
  %65 = load i8, i8* %64, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 %65, i64 8, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %63, i64 %1
  %67 = getelementptr inbounds i8, i8* %3, i64 21
  %68 = load i8, i8* %67, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %68, i64 8, i1 false) #5
  %69 = getelementptr inbounds i8, i8* %66, i64 %1
  %70 = getelementptr inbounds i8, i8* %3, i64 22
  %71 = load i8, i8* %70, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %71, i64 8, i1 false) #5
  %72 = getelementptr inbounds i8, i8* %69, i64 %1
  %73 = getelementptr inbounds i8, i8* %3, i64 23
  %74 = load i8, i8* %73, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %74, i64 8, i1 false) #5
  %75 = getelementptr inbounds i8, i8* %72, i64 %1
  %76 = getelementptr inbounds i8, i8* %3, i64 24
  %77 = load i8, i8* %76, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %77, i64 8, i1 false) #5
  %78 = getelementptr inbounds i8, i8* %75, i64 %1
  %79 = getelementptr inbounds i8, i8* %3, i64 25
  %80 = load i8, i8* %79, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %80, i64 8, i1 false) #5
  %81 = getelementptr inbounds i8, i8* %78, i64 %1
  %82 = getelementptr inbounds i8, i8* %3, i64 26
  %83 = load i8, i8* %82, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %81, i8 %83, i64 8, i1 false) #5
  %84 = getelementptr inbounds i8, i8* %81, i64 %1
  %85 = getelementptr inbounds i8, i8* %3, i64 27
  %86 = load i8, i8* %85, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %86, i64 8, i1 false) #5
  %87 = getelementptr inbounds i8, i8* %84, i64 %1
  %88 = getelementptr inbounds i8, i8* %3, i64 28
  %89 = load i8, i8* %88, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %87, i8 %89, i64 8, i1 false) #5
  %90 = getelementptr inbounds i8, i8* %87, i64 %1
  %91 = getelementptr inbounds i8, i8* %3, i64 29
  %92 = load i8, i8* %91, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %90, i8 %92, i64 8, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %90, i64 %1
  %94 = getelementptr inbounds i8, i8* %3, i64 30
  %95 = load i8, i8* %94, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %95, i64 8, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %93, i64 %1
  %97 = getelementptr inbounds i8, i8* %3, i64 31
  %98 = load i8, i8* %97, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %98, i64 8, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 32
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 8
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 31
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  %12 = mul nuw nsw i32 %10, 59
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  %14 = mul nuw nsw i32 %10, 110
  %15 = getelementptr inbounds i8, i8* %2, i64 3
  %16 = mul nuw nsw i32 %10, 151
  %17 = getelementptr inbounds i8, i8* %2, i64 4
  %18 = mul nuw nsw i32 %10, 183
  %19 = getelementptr inbounds i8, i8* %2, i64 5
  %20 = mul nuw nsw i32 %10, 206
  %21 = getelementptr inbounds i8, i8* %2, i64 6
  %22 = mul nuw nsw i32 %10, 219
  %23 = mul nuw nsw i32 %10, 224
  br label %24

24:                                               ; preds = %24, %4
  %25 = phi i64 [ 0, %4 ], [ %131, %24 ]
  %26 = phi i8* [ %0, %4 ], [ %130, %24 ]
  %27 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %25
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %3, i64 %25
  %31 = sub i8 0, %28
  %32 = zext i8 %31 to i32
  %33 = mul nuw nsw i32 %32, %9
  %34 = add nuw nsw i32 %33, 256
  %35 = load i8, i8* %2, align 1
  %36 = zext i8 %35 to i32
  %37 = mul nuw nsw i32 %36, %29
  %38 = load i8, i8* %30, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, 255
  %41 = add nuw nsw i32 %34, %37
  %42 = add nuw nsw i32 %41, %10
  %43 = add nuw nsw i32 %42, %40
  %44 = lshr i32 %43, 9
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %26, align 1
  %46 = load i8, i8* %11, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %29
  %49 = load i8, i8* %30, align 1
  %50 = zext i8 %49 to i32
  %51 = mul nuw nsw i32 %50, 197
  %52 = add nuw nsw i32 %34, %48
  %53 = add nuw nsw i32 %52, %12
  %54 = add nuw nsw i32 %53, %51
  %55 = lshr i32 %54, 9
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %26, i64 1
  store i8 %56, i8* %57, align 1
  %58 = load i8, i8* %13, align 1
  %59 = zext i8 %58 to i32
  %60 = mul nuw nsw i32 %59, %29
  %61 = load i8, i8* %30, align 1
  %62 = zext i8 %61 to i32
  %63 = mul nuw nsw i32 %62, 146
  %64 = add nuw nsw i32 %34, %60
  %65 = add nuw nsw i32 %64, %14
  %66 = add nuw nsw i32 %65, %63
  %67 = lshr i32 %66, 9
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds i8, i8* %26, i64 2
  store i8 %68, i8* %69, align 1
  %70 = load i8, i8* %15, align 1
  %71 = zext i8 %70 to i32
  %72 = mul nuw nsw i32 %71, %29
  %73 = load i8, i8* %30, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, 105
  %76 = add nuw nsw i32 %34, %72
  %77 = add nuw nsw i32 %76, %16
  %78 = add nuw nsw i32 %77, %75
  %79 = lshr i32 %78, 9
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %26, i64 3
  store i8 %80, i8* %81, align 1
  %82 = load i8, i8* %17, align 1
  %83 = zext i8 %82 to i32
  %84 = mul nuw nsw i32 %83, %29
  %85 = load i8, i8* %30, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, 73
  %88 = add nuw nsw i32 %34, %84
  %89 = add nuw nsw i32 %88, %18
  %90 = add nuw nsw i32 %89, %87
  %91 = lshr i32 %90, 9
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %26, i64 4
  store i8 %92, i8* %93, align 1
  %94 = load i8, i8* %19, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %29
  %97 = load i8, i8* %30, align 1
  %98 = zext i8 %97 to i32
  %99 = mul nuw nsw i32 %98, 50
  %100 = add nuw nsw i32 %34, %96
  %101 = add nuw nsw i32 %100, %20
  %102 = add nuw nsw i32 %101, %99
  %103 = lshr i32 %102, 9
  %104 = trunc i32 %103 to i8
  %105 = getelementptr inbounds i8, i8* %26, i64 5
  store i8 %104, i8* %105, align 1
  %106 = load i8, i8* %21, align 1
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, %29
  %109 = load i8, i8* %30, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, 37
  %112 = add nuw nsw i32 %34, %108
  %113 = add nuw nsw i32 %112, %22
  %114 = add nuw nsw i32 %113, %111
  %115 = lshr i32 %114, 9
  %116 = trunc i32 %115 to i8
  %117 = getelementptr inbounds i8, i8* %26, i64 6
  store i8 %116, i8* %117, align 1
  %118 = load i8, i8* %5, align 1
  %119 = zext i8 %118 to i32
  %120 = mul nuw nsw i32 %119, %29
  %121 = load i8, i8* %30, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 5
  %124 = add nuw nsw i32 %34, %120
  %125 = add nuw nsw i32 %124, %23
  %126 = add nuw nsw i32 %125, %123
  %127 = lshr i32 %126, 9
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %26, i64 7
  store i8 %128, i8* %129, align 1
  %130 = getelementptr inbounds i8, i8* %26, i64 %1
  %131 = add nuw nsw i64 %25, 1
  %132 = icmp eq i64 %131, 32
  br i1 %132, label %133, label %24

133:                                              ; preds = %24
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i8, i8* %2, i64 5
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = getelementptr inbounds i8, i8* %2, i64 7
  br label %15

15:                                               ; preds = %15, %4
  %16 = phi i64 [ 0, %4 ], [ %81, %15 ]
  %17 = phi i8* [ %0, %4 ], [ %80, %15 ]
  %18 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %16
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = sub i8 0, %19
  %22 = zext i8 %21 to i32
  %23 = mul nuw nsw i32 %22, %7
  %24 = add nuw nsw i32 %23, 128
  %25 = load i8, i8* %2, align 1
  %26 = zext i8 %25 to i32
  %27 = mul nuw nsw i32 %26, %20
  %28 = add nuw nsw i32 %24, %27
  %29 = lshr i32 %28, 8
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %17, align 1
  %31 = load i8, i8* %8, align 1
  %32 = zext i8 %31 to i32
  %33 = mul nuw nsw i32 %32, %20
  %34 = add nuw nsw i32 %24, %33
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %36, i8* %37, align 1
  %38 = load i8, i8* %9, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nuw nsw i32 %39, %20
  %41 = add nuw nsw i32 %24, %40
  %42 = lshr i32 %41, 8
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 %43, i8* %44, align 1
  %45 = load i8, i8* %10, align 1
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %20
  %48 = add nuw nsw i32 %24, %47
  %49 = lshr i32 %48, 8
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds i8, i8* %17, i64 3
  store i8 %50, i8* %51, align 1
  %52 = load i8, i8* %11, align 1
  %53 = zext i8 %52 to i32
  %54 = mul nuw nsw i32 %53, %20
  %55 = add nuw nsw i32 %24, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds i8, i8* %17, i64 4
  store i8 %57, i8* %58, align 1
  %59 = load i8, i8* %12, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nuw nsw i32 %60, %20
  %62 = add nuw nsw i32 %24, %61
  %63 = lshr i32 %62, 8
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %17, i64 5
  store i8 %64, i8* %65, align 1
  %66 = load i8, i8* %13, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %67, %20
  %69 = add nuw nsw i32 %24, %68
  %70 = lshr i32 %69, 8
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %17, i64 6
  store i8 %71, i8* %72, align 1
  %73 = load i8, i8* %14, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %20
  %76 = add nuw nsw i32 %24, %75
  %77 = lshr i32 %76, 8
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds i8, i8* %17, i64 7
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %17, i64 %1
  %81 = add nuw nsw i64 %16, 1
  %82 = icmp eq i64 %81, 32
  br i1 %82, label %83, label %15

83:                                               ; preds = %15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, 128
  %9 = mul nuw nsw i32 %7, 59
  %10 = add nuw nsw i32 %9, 128
  %11 = mul nuw nsw i32 %7, 110
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %7, 151
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %7, 183
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %7, 206
  %18 = add nuw nsw i32 %17, 128
  %19 = mul nuw nsw i32 %7, 219
  %20 = add nuw nsw i32 %19, 128
  %21 = mul nuw nsw i32 %7, 224
  %22 = add nuw nsw i32 %21, 128
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i64 [ 0, %4 ], [ %83, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %82, %23 ]
  %26 = getelementptr inbounds i8, i8* %3, i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, 255
  %30 = add nuw nsw i32 %8, %29
  %31 = lshr i32 %30, 8
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %25, align 1
  %33 = load i8, i8* %26, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, 197
  %36 = add nuw nsw i32 %10, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %38, i8* %39, align 1
  %40 = load i8, i8* %26, align 1
  %41 = zext i8 %40 to i32
  %42 = mul nuw nsw i32 %41, 146
  %43 = add nuw nsw i32 %12, %42
  %44 = lshr i32 %43, 8
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %45, i8* %46, align 1
  %47 = load i8, i8* %26, align 1
  %48 = zext i8 %47 to i32
  %49 = mul nuw nsw i32 %48, 105
  %50 = add nuw nsw i32 %14, %49
  %51 = lshr i32 %50, 8
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %52, i8* %53, align 1
  %54 = load i8, i8* %26, align 1
  %55 = zext i8 %54 to i32
  %56 = mul nuw nsw i32 %55, 73
  %57 = add nuw nsw i32 %16, %56
  %58 = lshr i32 %57, 8
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %59, i8* %60, align 1
  %61 = load i8, i8* %26, align 1
  %62 = zext i8 %61 to i32
  %63 = mul nuw nsw i32 %62, 50
  %64 = add nuw nsw i32 %18, %63
  %65 = lshr i32 %64, 8
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %66, i8* %67, align 1
  %68 = load i8, i8* %26, align 1
  %69 = zext i8 %68 to i32
  %70 = mul nuw nsw i32 %69, 37
  %71 = add nuw nsw i32 %20, %70
  %72 = lshr i32 %71, 8
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %73, i8* %74, align 1
  %75 = load i8, i8* %26, align 1
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 5
  %78 = add nuw nsw i32 %22, %77
  %79 = lshr i32 %78, 8
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %80, i8* %81, align 1
  %82 = getelementptr inbounds i8, i8* %25, i64 %1
  %83 = add nuw nsw i64 %24, 1
  %84 = icmp eq i64 %83, 32
  br i1 %84, label %85, label %23

85:                                               ; preds = %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi4ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 16, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 16, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 2
  %8 = getelementptr inbounds i8, i8* %3, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %3, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %3, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = lshr i32 %19, 2
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i16>
  %8 = load i8, i8* %3, align 1
  %9 = zext i8 %8 to i16
  %10 = getelementptr inbounds i8, i8* %3, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = getelementptr inbounds i8, i8* %3, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  %16 = getelementptr inbounds i8, i8* %3, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = shufflevector <16 x i16> %7, <16 x i16> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = add <16 x i16> %19, %7
  %21 = shufflevector <16 x i16> %20, <16 x i16> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = add <16 x i16> %20, %21
  %23 = shufflevector <16 x i16> %22, <16 x i16> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = add <16 x i16> %22, %23
  %25 = shufflevector <16 x i16> %24, <16 x i16> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = add <16 x i16> %24, %25
  %27 = extractelement <16 x i16> %26, i32 0
  %28 = add i16 %27, %9
  %29 = add i16 %28, %12
  %30 = add i16 %29, %15
  %31 = add i16 %30, %18
  %32 = add nuw nsw i16 %31, 10
  %33 = udiv i16 %32, 20
  %34 = trunc i16 %33 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %34, i64 16, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %34, i64 16, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %34, i64 16, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %34, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 16, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 16, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 16, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 16, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 16, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  %9 = load i8, i8* %3, align 1
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %10, %7
  %12 = icmp slt i32 %11, 0
  %13 = sub nsw i32 0, %11
  %14 = select i1 %12, i32 %13, i32 %11
  %15 = sub nsw i32 %10, %8
  br label %26

16:                                               ; preds = %49
  %17 = getelementptr inbounds i8, i8* %0, i64 %1
  %18 = getelementptr inbounds i8, i8* %3, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = sub nsw i32 %20, %7
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %8
  br label %52

26:                                               ; preds = %49, %4
  %27 = phi i64 [ 0, %4 ], [ %50, %49 ]
  %28 = getelementptr inbounds i8, i8* %2, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = sub nsw i32 %30, %7
  %32 = icmp slt i32 %31, 0
  %33 = sub nsw i32 0, %31
  %34 = select i1 %32, i32 %33, i32 %31
  %35 = add nsw i32 %15, %30
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = icmp sgt i32 %34, %14
  %40 = icmp sgt i32 %34, %38
  %41 = or i1 %39, %40
  br i1 %41, label %44, label %42

42:                                               ; preds = %26
  %43 = getelementptr inbounds i8, i8* %0, i64 %27
  store i8 %9, i8* %43, align 1
  br label %49

44:                                               ; preds = %26
  %45 = icmp sgt i32 %14, %38
  %46 = getelementptr inbounds i8, i8* %0, i64 %27
  br i1 %45, label %48, label %47

47:                                               ; preds = %44
  store i8 %29, i8* %46, align 1
  br label %49

48:                                               ; preds = %44
  store i8 %6, i8* %46, align 1
  br label %49

49:                                               ; preds = %47, %48, %42
  %50 = add nuw nsw i64 %27, 1
  %51 = icmp eq i64 %50, 16
  br i1 %51, label %16, label %26

52:                                               ; preds = %75, %16
  %53 = phi i64 [ 0, %16 ], [ %76, %75 ]
  %54 = getelementptr inbounds i8, i8* %2, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = sub nsw i32 %56, %7
  %58 = icmp slt i32 %57, 0
  %59 = sub nsw i32 0, %57
  %60 = select i1 %58, i32 %59, i32 %57
  %61 = add nsw i32 %25, %56
  %62 = icmp slt i32 %61, 0
  %63 = sub nsw i32 0, %61
  %64 = select i1 %62, i32 %63, i32 %61
  %65 = icmp sgt i32 %60, %24
  %66 = icmp sgt i32 %60, %64
  %67 = or i1 %65, %66
  br i1 %67, label %70, label %68

68:                                               ; preds = %52
  %69 = getelementptr inbounds i8, i8* %17, i64 %53
  store i8 %19, i8* %69, align 1
  br label %75

70:                                               ; preds = %52
  %71 = icmp sgt i32 %24, %64
  %72 = getelementptr inbounds i8, i8* %17, i64 %53
  br i1 %71, label %74, label %73

73:                                               ; preds = %70
  store i8 %55, i8* %72, align 1
  br label %75

74:                                               ; preds = %70
  store i8 %6, i8* %72, align 1
  br label %75

75:                                               ; preds = %74, %73, %68
  %76 = add nuw nsw i64 %53, 1
  %77 = icmp eq i64 %76, 16
  br i1 %77, label %78, label %52

78:                                               ; preds = %75
  %79 = getelementptr inbounds i8, i8* %17, i64 %1
  %80 = getelementptr inbounds i8, i8* %3, i64 2
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = sub nsw i32 %82, %7
  %84 = icmp slt i32 %83, 0
  %85 = sub nsw i32 0, %83
  %86 = select i1 %84, i32 %85, i32 %83
  %87 = sub nsw i32 %82, %8
  br label %88

88:                                               ; preds = %111, %78
  %89 = phi i64 [ 0, %78 ], [ %112, %111 ]
  %90 = getelementptr inbounds i8, i8* %2, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = sub nsw i32 %92, %7
  %94 = icmp slt i32 %93, 0
  %95 = sub nsw i32 0, %93
  %96 = select i1 %94, i32 %95, i32 %93
  %97 = add nsw i32 %87, %92
  %98 = icmp slt i32 %97, 0
  %99 = sub nsw i32 0, %97
  %100 = select i1 %98, i32 %99, i32 %97
  %101 = icmp sgt i32 %96, %86
  %102 = icmp sgt i32 %96, %100
  %103 = or i1 %101, %102
  br i1 %103, label %106, label %104

104:                                              ; preds = %88
  %105 = getelementptr inbounds i8, i8* %79, i64 %89
  store i8 %81, i8* %105, align 1
  br label %111

106:                                              ; preds = %88
  %107 = icmp sgt i32 %86, %100
  %108 = getelementptr inbounds i8, i8* %79, i64 %89
  br i1 %107, label %110, label %109

109:                                              ; preds = %106
  store i8 %91, i8* %108, align 1
  br label %111

110:                                              ; preds = %106
  store i8 %6, i8* %108, align 1
  br label %111

111:                                              ; preds = %110, %109, %104
  %112 = add nuw nsw i64 %89, 1
  %113 = icmp eq i64 %112, 16
  br i1 %113, label %114, label %88

114:                                              ; preds = %111
  %115 = getelementptr inbounds i8, i8* %79, i64 %1
  %116 = getelementptr inbounds i8, i8* %3, i64 3
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = sub nsw i32 %118, %7
  %120 = icmp slt i32 %119, 0
  %121 = sub nsw i32 0, %119
  %122 = select i1 %120, i32 %121, i32 %119
  %123 = sub nsw i32 %118, %8
  br label %124

124:                                              ; preds = %147, %114
  %125 = phi i64 [ 0, %114 ], [ %148, %147 ]
  %126 = getelementptr inbounds i8, i8* %2, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = sub nsw i32 %128, %7
  %130 = icmp slt i32 %129, 0
  %131 = sub nsw i32 0, %129
  %132 = select i1 %130, i32 %131, i32 %129
  %133 = add nsw i32 %123, %128
  %134 = icmp slt i32 %133, 0
  %135 = sub nsw i32 0, %133
  %136 = select i1 %134, i32 %135, i32 %133
  %137 = icmp sgt i32 %132, %122
  %138 = icmp sgt i32 %132, %136
  %139 = or i1 %137, %138
  br i1 %139, label %142, label %140

140:                                              ; preds = %124
  %141 = getelementptr inbounds i8, i8* %115, i64 %125
  store i8 %117, i8* %141, align 1
  br label %147

142:                                              ; preds = %124
  %143 = icmp sgt i32 %122, %136
  %144 = getelementptr inbounds i8, i8* %115, i64 %125
  br i1 %143, label %146, label %145

145:                                              ; preds = %142
  store i8 %127, i8* %144, align 1
  br label %147

146:                                              ; preds = %142
  store i8 %6, i8* %144, align 1
  br label %147

147:                                              ; preds = %146, %145, %140
  %148 = add nuw nsw i64 %125, 1
  %149 = icmp eq i64 %148, 16
  br i1 %149, label %150, label %124

150:                                              ; preds = %147
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 3
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = or i32 %9, 256
  %12 = getelementptr i8, i8* %0, i64 16
  %13 = getelementptr i8, i8* %2, i64 16
  %14 = getelementptr i8, i8* %3, i64 1
  %15 = icmp ugt i8* %13, %0
  %16 = icmp ugt i8* %12, %2
  %17 = and i1 %15, %16
  %18 = icmp ugt i8* %14, %0
  %19 = icmp ugt i8* %12, %3
  %20 = and i1 %18, %19
  %21 = or i1 %17, %20
  br i1 %21, label %80, label %22

22:                                               ; preds = %4
  %23 = insertelement <16 x i32> undef, i32 %11, i32 0
  %24 = shufflevector <16 x i32> %23, <16 x i32> undef, <16 x i32> zeroinitializer
  %25 = insertelement <16 x i32> undef, i32 %10, i32 0
  %26 = shufflevector <16 x i32> %25, <16 x i32> undef, <16 x i32> zeroinitializer
  %27 = bitcast i8* %2 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1, !alias.scope !2
  %29 = zext <16 x i8> %28 to <16 x i32>
  %30 = mul nuw nsw <16 x i32> %29, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %31 = load i8, i8* %3, align 1, !alias.scope !5
  %32 = insertelement <16 x i8> undef, i8 %31, i32 0
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <16 x i32> zeroinitializer
  %34 = zext <16 x i8> %33 to <16 x i32>
  %35 = mul nuw nsw <16 x i32> %34, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %36 = mul nuw nsw <16 x i32> %26, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %37 = add nuw nsw <16 x i32> %24, %30
  %38 = add nuw nsw <16 x i32> %37, %36
  %39 = add nuw nsw <16 x i32> %38, %35
  %40 = lshr <16 x i32> %39, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %41 = trunc <16 x i32> %40 to <16 x i8>
  %42 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 1, !alias.scope !7, !noalias !9
  br label %43

43:                                               ; preds = %80, %22
  %44 = getelementptr inbounds i8, i8* %0, i64 %1
  %45 = getelementptr inbounds i8, i8* %3, i64 1
  %46 = mul nuw nsw i32 %9, 107
  %47 = add nuw nsw i32 %46, 256
  %48 = add i64 %1, 16
  %49 = getelementptr i8, i8* %0, i64 %48
  %50 = getelementptr i8, i8* %2, i64 16
  %51 = getelementptr i8, i8* %3, i64 2
  %52 = icmp ult i8* %44, %50
  %53 = icmp ugt i8* %49, %2
  %54 = and i1 %52, %53
  %55 = icmp ult i8* %44, %51
  %56 = icmp ult i8* %45, %49
  %57 = and i1 %55, %56
  %58 = or i1 %54, %57
  br i1 %58, label %103, label %59

59:                                               ; preds = %43
  %60 = insertelement <16 x i32> undef, i32 %47, i32 0
  %61 = shufflevector <16 x i32> %60, <16 x i32> undef, <16 x i32> zeroinitializer
  %62 = insertelement <16 x i32> undef, i32 %10, i32 0
  %63 = shufflevector <16 x i32> %62, <16 x i32> undef, <16 x i32> zeroinitializer
  %64 = bitcast i8* %2 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1, !alias.scope !10
  %66 = zext <16 x i8> %65 to <16 x i32>
  %67 = mul nuw nsw <16 x i32> %66, <i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149>
  %68 = load i8, i8* %45, align 1, !alias.scope !13
  %69 = insertelement <16 x i8> undef, i8 %68, i32 0
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <16 x i32> zeroinitializer
  %71 = zext <16 x i8> %70 to <16 x i32>
  %72 = mul nuw nsw <16 x i32> %71, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %73 = mul nuw nsw <16 x i32> %63, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %74 = add nuw nsw <16 x i32> %61, %67
  %75 = add nuw nsw <16 x i32> %74, %73
  %76 = add nuw nsw <16 x i32> %75, %72
  %77 = lshr <16 x i32> %76, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %78 = trunc <16 x i32> %77 to <16 x i8>
  %79 = bitcast i8* %44 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %79, align 1, !alias.scope !15, !noalias !17
  br label %126

80:                                               ; preds = %4, %80
  %81 = phi i64 [ %101, %80 ], [ 0, %4 ]
  %82 = getelementptr inbounds i8, i8* %2, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = mul nuw nsw i32 %84, 255
  %86 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %81
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = load i8, i8* %3, align 1
  %90 = zext i8 %89 to i32
  %91 = mul nuw nsw i32 %90, %88
  %92 = sub i8 0, %87
  %93 = zext i8 %92 to i32
  %94 = mul nuw nsw i32 %93, %10
  %95 = add nuw nsw i32 %11, %85
  %96 = add nuw nsw i32 %95, %94
  %97 = add nuw nsw i32 %96, %91
  %98 = lshr i32 %97, 9
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds i8, i8* %0, i64 %81
  store i8 %99, i8* %100, align 1
  %101 = add nuw nsw i64 %81, 1
  %102 = icmp eq i64 %101, 16
  br i1 %102, label %43, label %80, !llvm.loop !18

103:                                              ; preds = %43, %103
  %104 = phi i64 [ %124, %103 ], [ 0, %43 ]
  %105 = getelementptr inbounds i8, i8* %2, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, 149
  %109 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %104
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = load i8, i8* %45, align 1
  %113 = zext i8 %112 to i32
  %114 = mul nuw nsw i32 %113, %111
  %115 = sub i8 0, %110
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %116, %10
  %118 = add nuw nsw i32 %47, %108
  %119 = add nuw nsw i32 %118, %117
  %120 = add nuw nsw i32 %119, %114
  %121 = lshr i32 %120, 9
  %122 = trunc i32 %121 to i8
  %123 = getelementptr inbounds i8, i8* %44, i64 %104
  store i8 %122, i8* %123, align 1
  %124 = add nuw nsw i64 %104, 1
  %125 = icmp eq i64 %124, 16
  br i1 %125, label %126, label %103, !llvm.loop !20

126:                                              ; preds = %103, %59
  %127 = getelementptr inbounds i8, i8* %44, i64 %1
  %128 = getelementptr inbounds i8, i8* %3, i64 2
  %129 = mul nuw nsw i32 %9, 171
  %130 = add nuw nsw i32 %129, 256
  %131 = shl i64 %1, 1
  %132 = add i64 %131, 16
  %133 = getelementptr i8, i8* %0, i64 %132
  %134 = getelementptr i8, i8* %2, i64 16
  %135 = getelementptr i8, i8* %3, i64 3
  %136 = icmp ult i8* %127, %134
  %137 = icmp ugt i8* %133, %2
  %138 = and i1 %136, %137
  %139 = icmp ult i8* %127, %135
  %140 = icmp ult i8* %128, %133
  %141 = and i1 %139, %140
  %142 = or i1 %138, %141
  br i1 %142, label %164, label %143

143:                                              ; preds = %126
  %144 = insertelement <16 x i32> undef, i32 %130, i32 0
  %145 = shufflevector <16 x i32> %144, <16 x i32> undef, <16 x i32> zeroinitializer
  %146 = insertelement <16 x i32> undef, i32 %10, i32 0
  %147 = shufflevector <16 x i32> %146, <16 x i32> undef, <16 x i32> zeroinitializer
  %148 = bitcast i8* %2 to <16 x i8>*
  %149 = load <16 x i8>, <16 x i8>* %148, align 1, !alias.scope !21
  %150 = zext <16 x i8> %149 to <16 x i32>
  %151 = mul nuw nsw <16 x i32> %150, <i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85>
  %152 = load i8, i8* %128, align 1, !alias.scope !24
  %153 = insertelement <16 x i8> undef, i8 %152, i32 0
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> zeroinitializer
  %155 = zext <16 x i8> %154 to <16 x i32>
  %156 = mul nuw nsw <16 x i32> %155, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %157 = mul nuw nsw <16 x i32> %147, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %158 = add nuw nsw <16 x i32> %145, %151
  %159 = add nuw nsw <16 x i32> %158, %157
  %160 = add nuw nsw <16 x i32> %159, %156
  %161 = lshr <16 x i32> %160, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %162 = trunc <16 x i32> %161 to <16 x i8>
  %163 = bitcast i8* %127 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %163, align 1, !alias.scope !26, !noalias !28
  br label %187

164:                                              ; preds = %126, %164
  %165 = phi i64 [ %185, %164 ], [ 0, %126 ]
  %166 = getelementptr inbounds i8, i8* %2, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = mul nuw nsw i32 %168, 85
  %170 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %165
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = load i8, i8* %128, align 1
  %174 = zext i8 %173 to i32
  %175 = mul nuw nsw i32 %174, %172
  %176 = sub i8 0, %171
  %177 = zext i8 %176 to i32
  %178 = mul nuw nsw i32 %177, %10
  %179 = add nuw nsw i32 %130, %169
  %180 = add nuw nsw i32 %179, %178
  %181 = add nuw nsw i32 %180, %175
  %182 = lshr i32 %181, 9
  %183 = trunc i32 %182 to i8
  %184 = getelementptr inbounds i8, i8* %127, i64 %165
  store i8 %183, i8* %184, align 1
  %185 = add nuw nsw i64 %165, 1
  %186 = icmp eq i64 %185, 16
  br i1 %186, label %187, label %164, !llvm.loop !29

187:                                              ; preds = %164, %143
  %188 = getelementptr inbounds i8, i8* %127, i64 %1
  %189 = mul nuw nsw i32 %9, 192
  %190 = add nuw nsw i32 %189, 256
  %191 = mul i64 %1, 3
  %192 = add i64 %191, 16
  %193 = getelementptr i8, i8* %0, i64 %192
  %194 = getelementptr i8, i8* %2, i64 16
  %195 = getelementptr i8, i8* %3, i64 4
  %196 = icmp ult i8* %188, %194
  %197 = icmp ugt i8* %193, %2
  %198 = and i1 %196, %197
  %199 = icmp ult i8* %188, %195
  %200 = icmp ult i8* %7, %193
  %201 = and i1 %199, %200
  %202 = or i1 %198, %201
  br i1 %202, label %224, label %203

203:                                              ; preds = %187
  %204 = insertelement <16 x i32> undef, i32 %190, i32 0
  %205 = shufflevector <16 x i32> %204, <16 x i32> undef, <16 x i32> zeroinitializer
  %206 = insertelement <16 x i32> undef, i32 %10, i32 0
  %207 = shufflevector <16 x i32> %206, <16 x i32> undef, <16 x i32> zeroinitializer
  %208 = bitcast i8* %2 to <16 x i8>*
  %209 = load <16 x i8>, <16 x i8>* %208, align 1, !alias.scope !30
  %210 = zext <16 x i8> %209 to <16 x i32>
  %211 = shl nuw nsw <16 x i32> %210, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %212 = load i8, i8* %7, align 1, !alias.scope !33
  %213 = insertelement <16 x i8> undef, i8 %212, i32 0
  %214 = shufflevector <16 x i8> %213, <16 x i8> undef, <16 x i32> zeroinitializer
  %215 = zext <16 x i8> %214 to <16 x i32>
  %216 = mul nuw nsw <16 x i32> %215, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %217 = mul nuw nsw <16 x i32> %207, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %218 = add nuw nsw <16 x i32> %205, %211
  %219 = add nuw nsw <16 x i32> %218, %217
  %220 = add nuw nsw <16 x i32> %219, %216
  %221 = lshr <16 x i32> %220, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %222 = trunc <16 x i32> %221 to <16 x i8>
  %223 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %222, <16 x i8>* %223, align 1, !alias.scope !35, !noalias !37
  br label %247

224:                                              ; preds = %187, %224
  %225 = phi i64 [ %245, %224 ], [ 0, %187 ]
  %226 = getelementptr inbounds i8, i8* %2, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = shl nuw nsw i32 %228, 6
  %230 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %225
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i32
  %233 = load i8, i8* %7, align 1
  %234 = zext i8 %233 to i32
  %235 = mul nuw nsw i32 %234, %232
  %236 = sub i8 0, %231
  %237 = zext i8 %236 to i32
  %238 = mul nuw nsw i32 %237, %10
  %239 = add nuw nsw i32 %190, %229
  %240 = add nuw nsw i32 %239, %238
  %241 = add nuw nsw i32 %240, %235
  %242 = lshr i32 %241, 9
  %243 = trunc i32 %242 to i8
  %244 = getelementptr inbounds i8, i8* %188, i64 %225
  store i8 %243, i8* %244, align 1
  %245 = add nuw nsw i64 %225, 1
  %246 = icmp eq i64 %245, 16
  br i1 %246, label %247, label %224, !llvm.loop !38

247:                                              ; preds = %224, %203
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 3
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i8, i8* %2, i64 5
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = getelementptr inbounds i8, i8* %2, i64 7
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = getelementptr inbounds i8, i8* %2, i64 9
  %17 = getelementptr inbounds i8, i8* %2, i64 10
  %18 = getelementptr inbounds i8, i8* %2, i64 11
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = getelementptr inbounds i8, i8* %2, i64 13
  %21 = getelementptr inbounds i8, i8* %2, i64 14
  %22 = getelementptr inbounds i8, i8* %2, i64 15
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i64 [ 0, %4 ], [ %145, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %144, %23 ]
  %26 = getelementptr inbounds [124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = sub i8 0, %27
  %30 = zext i8 %29 to i32
  %31 = mul nuw nsw i32 %30, %7
  %32 = add nuw nsw i32 %31, 128
  %33 = load i8, i8* %2, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, %28
  %36 = add nuw nsw i32 %32, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %25, align 1
  %39 = load i8, i8* %8, align 1
  %40 = zext i8 %39 to i32
  %41 = mul nuw nsw i32 %40, %28
  %42 = add nuw nsw i32 %32, %41
  %43 = lshr i32 %42, 8
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %44, i8* %45, align 1
  %46 = load i8, i8* %9, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %28
  %49 = add nuw nsw i32 %32, %48
  %50 = lshr i32 %49, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %51, i8* %52, align 1
  %53 = load i8, i8* %10, align 1
  %54 = zext i8 %53 to i32
  %55 = mul nuw nsw i32 %54, %28
  %56 = add nuw nsw i32 %32, %55
  %57 = lshr i32 %56, 8
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %58, i8* %59, align 1
  %60 = load i8, i8* %11, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %28
  %63 = add nuw nsw i32 %32, %62
  %64 = lshr i32 %63, 8
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %65, i8* %66, align 1
  %67 = load i8, i8* %12, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %28
  %70 = add nuw nsw i32 %32, %69
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %72, i8* %73, align 1
  %74 = load i8, i8* %13, align 1
  %75 = zext i8 %74 to i32
  %76 = mul nuw nsw i32 %75, %28
  %77 = add nuw nsw i32 %32, %76
  %78 = lshr i32 %77, 8
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %79, i8* %80, align 1
  %81 = load i8, i8* %14, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nuw nsw i32 %82, %28
  %84 = add nuw nsw i32 %32, %83
  %85 = lshr i32 %84, 8
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %86, i8* %87, align 1
  %88 = load i8, i8* %15, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %89, %28
  %91 = add nuw nsw i32 %32, %90
  %92 = lshr i32 %91, 8
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds i8, i8* %25, i64 8
  store i8 %93, i8* %94, align 1
  %95 = load i8, i8* %16, align 1
  %96 = zext i8 %95 to i32
  %97 = mul nuw nsw i32 %96, %28
  %98 = add nuw nsw i32 %32, %97
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds i8, i8* %25, i64 9
  store i8 %100, i8* %101, align 1
  %102 = load i8, i8* %17, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %103, %28
  %105 = add nuw nsw i32 %32, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, i8* %25, i64 10
  store i8 %107, i8* %108, align 1
  %109 = load i8, i8* %18, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, %28
  %112 = add nuw nsw i32 %32, %111
  %113 = lshr i32 %112, 8
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %25, i64 11
  store i8 %114, i8* %115, align 1
  %116 = load i8, i8* %19, align 1
  %117 = zext i8 %116 to i32
  %118 = mul nuw nsw i32 %117, %28
  %119 = add nuw nsw i32 %32, %118
  %120 = lshr i32 %119, 8
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %25, i64 12
  store i8 %121, i8* %122, align 1
  %123 = load i8, i8* %20, align 1
  %124 = zext i8 %123 to i32
  %125 = mul nuw nsw i32 %124, %28
  %126 = add nuw nsw i32 %32, %125
  %127 = lshr i32 %126, 8
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %25, i64 13
  store i8 %128, i8* %129, align 1
  %130 = load i8, i8* %21, align 1
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %28
  %133 = add nuw nsw i32 %32, %132
  %134 = lshr i32 %133, 8
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds i8, i8* %25, i64 14
  store i8 %135, i8* %136, align 1
  %137 = load i8, i8* %22, align 1
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, %28
  %140 = add nuw nsw i32 %32, %139
  %141 = lshr i32 %140, 8
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds i8, i8* %25, i64 15
  store i8 %142, i8* %143, align 1
  %144 = getelementptr inbounds i8, i8* %25, i64 %1
  %145 = add nuw nsw i64 %24, 1
  %146 = icmp eq i64 %145, 4
  br i1 %146, label %147, label %23

147:                                              ; preds = %23
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr i8, i8* %0, i64 16
  %9 = getelementptr i8, i8* %3, i64 1
  %10 = icmp ugt i8* %9, %0
  %11 = icmp ugt i8* %8, %3
  %12 = and i1 %10, %11
  br i1 %12, label %50, label %13

13:                                               ; preds = %4
  %14 = insertelement <16 x i32> undef, i32 %7, i32 0
  %15 = shufflevector <16 x i32> %14, <16 x i32> undef, <16 x i32> zeroinitializer
  %16 = load i8, i8* %3, align 1, !alias.scope !39
  %17 = insertelement <16 x i8> undef, i8 %16, i32 0
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <16 x i32> zeroinitializer
  %19 = zext <16 x i8> %18 to <16 x i32>
  %20 = mul nuw nsw <16 x i32> %19, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %21 = mul nuw nsw <16 x i32> %15, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %22 = add nuw nsw <16 x i32> %21, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %23 = add nuw nsw <16 x i32> %22, %20
  %24 = lshr <16 x i32> %23, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %25 = trunc <16 x i32> %24 to <16 x i8>
  %26 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %25, <16 x i8>* %26, align 1, !alias.scope !42, !noalias !39
  br label %27

27:                                               ; preds = %50, %13
  %28 = getelementptr inbounds i8, i8* %0, i64 %1
  %29 = getelementptr inbounds i8, i8* %3, i64 1
  %30 = add i64 %1, 16
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = getelementptr i8, i8* %3, i64 2
  %33 = icmp ult i8* %28, %32
  %34 = icmp ult i8* %29, %31
  %35 = and i1 %33, %34
  br i1 %35, label %83, label %36

36:                                               ; preds = %27
  %37 = insertelement <16 x i32> undef, i32 %7, i32 0
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> zeroinitializer
  %39 = load i8, i8* %29, align 1, !alias.scope !44
  %40 = insertelement <16 x i8> undef, i8 %39, i32 0
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> zeroinitializer
  %42 = zext <16 x i8> %41 to <16 x i32>
  %43 = mul nuw nsw <16 x i32> %42, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %44 = mul nuw nsw <16 x i32> %38, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %45 = add nuw nsw <16 x i32> %44, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %46 = add nuw nsw <16 x i32> %45, %43
  %47 = lshr <16 x i32> %46, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %48 = trunc <16 x i32> %47 to <16 x i8>
  %49 = bitcast i8* %28 to <16 x i8>*
  store <16 x i8> %48, <16 x i8>* %49, align 1, !alias.scope !47, !noalias !44
  br label %116

50:                                               ; preds = %4, %50
  %51 = phi i64 [ %81, %50 ], [ 0, %4 ]
  %52 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %51
  %53 = load i8, i8* %52, align 2
  %54 = zext i8 %53 to i32
  %55 = load i8, i8* %3, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %56, %54
  %58 = sub i8 0, %53
  %59 = zext i8 %58 to i32
  %60 = mul nuw nsw i32 %59, %7
  %61 = add nuw nsw i32 %60, 128
  %62 = add nuw nsw i32 %61, %57
  %63 = lshr i32 %62, 8
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %0, i64 %51
  store i8 %64, i8* %65, align 1
  %66 = or i64 %51, 1
  %67 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = load i8, i8* %3, align 1
  %71 = zext i8 %70 to i32
  %72 = mul nuw nsw i32 %71, %69
  %73 = sub i8 0, %68
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %7
  %76 = add nuw nsw i32 %75, 128
  %77 = add nuw nsw i32 %76, %72
  %78 = lshr i32 %77, 8
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %0, i64 %66
  store i8 %79, i8* %80, align 1
  %81 = add nuw nsw i64 %51, 2
  %82 = icmp eq i64 %81, 16
  br i1 %82, label %27, label %50, !llvm.loop !49

83:                                               ; preds = %27, %83
  %84 = phi i64 [ %114, %83 ], [ 0, %27 ]
  %85 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %84
  %86 = load i8, i8* %85, align 2
  %87 = zext i8 %86 to i32
  %88 = load i8, i8* %29, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %89, %87
  %91 = sub i8 0, %86
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, %7
  %94 = add nuw nsw i32 %93, 128
  %95 = add nuw nsw i32 %94, %90
  %96 = lshr i32 %95, 8
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %28, i64 %84
  store i8 %97, i8* %98, align 1
  %99 = or i64 %84, 1
  %100 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = load i8, i8* %29, align 1
  %104 = zext i8 %103 to i32
  %105 = mul nuw nsw i32 %104, %102
  %106 = sub i8 0, %101
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, %7
  %109 = add nuw nsw i32 %108, 128
  %110 = add nuw nsw i32 %109, %105
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %28, i64 %99
  store i8 %112, i8* %113, align 1
  %114 = add nuw nsw i64 %84, 2
  %115 = icmp eq i64 %114, 16
  br i1 %115, label %116, label %83, !llvm.loop !50

116:                                              ; preds = %83, %36
  %117 = getelementptr inbounds i8, i8* %28, i64 %1
  %118 = getelementptr inbounds i8, i8* %3, i64 2
  %119 = shl i64 %1, 1
  %120 = add i64 %119, 16
  %121 = getelementptr i8, i8* %0, i64 %120
  %122 = getelementptr i8, i8* %3, i64 3
  %123 = icmp ult i8* %117, %122
  %124 = icmp ult i8* %118, %121
  %125 = and i1 %123, %124
  br i1 %125, label %140, label %126

126:                                              ; preds = %116
  %127 = insertelement <16 x i32> undef, i32 %7, i32 0
  %128 = shufflevector <16 x i32> %127, <16 x i32> undef, <16 x i32> zeroinitializer
  %129 = load i8, i8* %118, align 1, !alias.scope !51
  %130 = insertelement <16 x i8> undef, i8 %129, i32 0
  %131 = shufflevector <16 x i8> %130, <16 x i8> undef, <16 x i32> zeroinitializer
  %132 = zext <16 x i8> %131 to <16 x i32>
  %133 = mul nuw nsw <16 x i32> %132, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %134 = mul nuw nsw <16 x i32> %128, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %135 = add nuw nsw <16 x i32> %134, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %136 = add nuw nsw <16 x i32> %135, %133
  %137 = lshr <16 x i32> %136, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %138 = trunc <16 x i32> %137 to <16 x i8>
  %139 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %139, align 1, !alias.scope !54, !noalias !51
  br label %173

140:                                              ; preds = %116, %140
  %141 = phi i64 [ %171, %140 ], [ 0, %116 ]
  %142 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %141
  %143 = load i8, i8* %142, align 2
  %144 = zext i8 %143 to i32
  %145 = load i8, i8* %118, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nuw nsw i32 %146, %144
  %148 = sub i8 0, %143
  %149 = zext i8 %148 to i32
  %150 = mul nuw nsw i32 %149, %7
  %151 = add nuw nsw i32 %150, 128
  %152 = add nuw nsw i32 %151, %147
  %153 = lshr i32 %152, 8
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds i8, i8* %117, i64 %141
  store i8 %154, i8* %155, align 1
  %156 = or i64 %141, 1
  %157 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = load i8, i8* %118, align 1
  %161 = zext i8 %160 to i32
  %162 = mul nuw nsw i32 %161, %159
  %163 = sub i8 0, %158
  %164 = zext i8 %163 to i32
  %165 = mul nuw nsw i32 %164, %7
  %166 = add nuw nsw i32 %165, 128
  %167 = add nuw nsw i32 %166, %162
  %168 = lshr i32 %167, 8
  %169 = trunc i32 %168 to i8
  %170 = getelementptr inbounds i8, i8* %117, i64 %156
  store i8 %169, i8* %170, align 1
  %171 = add nuw nsw i64 %141, 2
  %172 = icmp eq i64 %171, 16
  br i1 %172, label %173, label %140, !llvm.loop !56

173:                                              ; preds = %140, %126
  %174 = getelementptr inbounds i8, i8* %117, i64 %1
  %175 = getelementptr inbounds i8, i8* %3, i64 3
  %176 = mul i64 %1, 3
  %177 = add i64 %176, 16
  %178 = getelementptr i8, i8* %0, i64 %177
  %179 = getelementptr i8, i8* %3, i64 4
  %180 = icmp ult i8* %174, %179
  %181 = icmp ult i8* %175, %178
  %182 = and i1 %180, %181
  br i1 %182, label %197, label %183

183:                                              ; preds = %173
  %184 = insertelement <16 x i32> undef, i32 %7, i32 0
  %185 = shufflevector <16 x i32> %184, <16 x i32> undef, <16 x i32> zeroinitializer
  %186 = load i8, i8* %175, align 1, !alias.scope !57
  %187 = insertelement <16 x i8> undef, i8 %186, i32 0
  %188 = shufflevector <16 x i8> %187, <16 x i8> undef, <16 x i32> zeroinitializer
  %189 = zext <16 x i8> %188 to <16 x i32>
  %190 = mul nuw nsw <16 x i32> %189, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %191 = mul nuw nsw <16 x i32> %185, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %192 = add nuw nsw <16 x i32> %191, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %193 = add nuw nsw <16 x i32> %192, %190
  %194 = lshr <16 x i32> %193, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %195 = trunc <16 x i32> %194 to <16 x i8>
  %196 = bitcast i8* %174 to <16 x i8>*
  store <16 x i8> %195, <16 x i8>* %196, align 1, !alias.scope !60, !noalias !57
  br label %230

197:                                              ; preds = %173, %197
  %198 = phi i64 [ %228, %197 ], [ 0, %173 ]
  %199 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %198
  %200 = load i8, i8* %199, align 2
  %201 = zext i8 %200 to i32
  %202 = load i8, i8* %175, align 1
  %203 = zext i8 %202 to i32
  %204 = mul nuw nsw i32 %203, %201
  %205 = sub i8 0, %200
  %206 = zext i8 %205 to i32
  %207 = mul nuw nsw i32 %206, %7
  %208 = add nuw nsw i32 %207, 128
  %209 = add nuw nsw i32 %208, %204
  %210 = lshr i32 %209, 8
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds i8, i8* %174, i64 %198
  store i8 %211, i8* %212, align 1
  %213 = or i64 %198, 1
  %214 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = load i8, i8* %175, align 1
  %218 = zext i8 %217 to i32
  %219 = mul nuw nsw i32 %218, %216
  %220 = sub i8 0, %215
  %221 = zext i8 %220 to i32
  %222 = mul nuw nsw i32 %221, %7
  %223 = add nuw nsw i32 %222, 128
  %224 = add nuw nsw i32 %223, %219
  %225 = lshr i32 %224, 8
  %226 = trunc i32 %225 to i8
  %227 = getelementptr inbounds i8, i8* %174, i64 %213
  store i8 %226, i8* %227, align 1
  %228 = add nuw nsw i64 %198, 2
  %229 = icmp eq i64 %228, 16
  br i1 %229, label %230, label %197, !llvm.loop !62

230:                                              ; preds = %197, %183
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi8ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 16, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 16, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 16, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 16, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 16, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 16, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %19, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %19, i64 16, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %19, i64 16, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %19, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <8 x i8>*
  %6 = load <8 x i8>, <8 x i8>* %5, align 1
  %7 = zext <8 x i8> %6 to <8 x i32>
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <8 x i32> %8, %7
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <8 x i32> %9, %10
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <8 x i32> %11, %12
  %14 = extractelement <8 x i32> %13, i32 0
  %15 = add nuw nsw i32 %14, 4
  %16 = lshr i32 %15, 3
  %17 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %17, i64 16, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %17, i64 16, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %17, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %17, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %17, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %17, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %17, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %17, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i16>
  %8 = load i8, i8* %3, align 1
  %9 = zext i8 %8 to i16
  %10 = getelementptr inbounds i8, i8* %3, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = getelementptr inbounds i8, i8* %3, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  %16 = getelementptr inbounds i8, i8* %3, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = getelementptr inbounds i8, i8* %3, i64 4
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i16
  %22 = getelementptr inbounds i8, i8* %3, i64 5
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i16
  %25 = getelementptr inbounds i8, i8* %3, i64 6
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  %28 = getelementptr inbounds i8, i8* %3, i64 7
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  %31 = shufflevector <16 x i16> %7, <16 x i16> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = add <16 x i16> %31, %7
  %33 = shufflevector <16 x i16> %32, <16 x i16> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = add <16 x i16> %32, %33
  %35 = shufflevector <16 x i16> %34, <16 x i16> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = add <16 x i16> %34, %35
  %37 = shufflevector <16 x i16> %36, <16 x i16> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %38 = add <16 x i16> %36, %37
  %39 = extractelement <16 x i16> %38, i32 0
  %40 = add i16 %39, %9
  %41 = add i16 %40, %12
  %42 = add i16 %41, %15
  %43 = add i16 %42, %18
  %44 = add i16 %43, %21
  %45 = add i16 %44, %24
  %46 = add i16 %45, %27
  %47 = add i16 %46, %30
  %48 = add nuw nsw i16 %47, 12
  %49 = udiv i16 %48, 24
  %50 = trunc i16 %49 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %50, i64 16, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %50, i64 16, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %50, i64 16, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %52, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %50, i64 16, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %50, i64 16, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 %50, i64 16, i1 false) #5
  %56 = getelementptr inbounds i8, i8* %55, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 %50, i64 16, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %56, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %50, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 16, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 16, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 16, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 16, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 16, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 16, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 16, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 16, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 16, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 16, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 16, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 8
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 16
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 7
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 16
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  br label %16

16:                                               ; preds = %60, %4
  %17 = phi i64 [ 0, %4 ], [ %62, %60 ]
  %18 = phi i8* [ %0, %4 ], [ %61, %60 ]
  %19 = mul i64 %17, %1
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = add i64 %19, 16
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %17
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %3, i64 %17
  %27 = sub i8 0, %24
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, %9
  %30 = add nuw nsw i32 %29, 256
  %31 = add nuw i64 %17, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = icmp ult i8* %20, %11
  %34 = icmp ugt i8* %22, %2
  %35 = and i1 %33, %34
  %36 = icmp ult i8* %20, %32
  %37 = icmp ult i8* %26, %22
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  br i1 %39, label %64, label %40

40:                                               ; preds = %16
  %41 = insertelement <16 x i32> undef, i32 %30, i32 0
  %42 = shufflevector <16 x i32> %41, <16 x i32> undef, <16 x i32> zeroinitializer
  %43 = insertelement <16 x i32> undef, i32 %25, i32 0
  %44 = shufflevector <16 x i32> %43, <16 x i32> undef, <16 x i32> zeroinitializer
  %45 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !63
  %46 = zext <16 x i8> %45 to <16 x i32>
  %47 = mul nuw nsw <16 x i32> %44, %46
  %48 = load i8, i8* %26, align 1, !alias.scope !66
  %49 = insertelement <16 x i8> undef, i8 %48, i32 0
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> zeroinitializer
  %51 = zext <16 x i8> %50 to <16 x i32>
  %52 = mul nuw nsw <16 x i32> %51, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %53 = add nuw nsw <16 x i32> %42, %47
  %54 = add nuw nsw <16 x i32> %53, %15
  %55 = add nuw nsw <16 x i32> %54, %52
  %56 = lshr <16 x i32> %55, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %57 = trunc <16 x i32> %56 to <16 x i8>
  %58 = bitcast i8* %18 to <16 x i8>*
  store <16 x i8> %57, <16 x i8>* %58, align 1, !alias.scope !68, !noalias !70
  br label %60

59:                                               ; preds = %60
  ret void

60:                                               ; preds = %64, %40
  %61 = getelementptr inbounds i8, i8* %18, i64 %1
  %62 = add nuw nsw i64 %17, 1
  %63 = icmp eq i64 %62, 8
  br i1 %63, label %59, label %16

64:                                               ; preds = %16, %64
  %65 = phi i64 [ %85, %64 ], [ 0, %16 ]
  %66 = getelementptr inbounds i8, i8* %2, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %25
  %70 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %65
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = load i8, i8* %26, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %72
  %76 = sub i8 0, %71
  %77 = zext i8 %76 to i32
  %78 = mul nuw nsw i32 %77, %10
  %79 = add nuw nsw i32 %30, %69
  %80 = add nuw nsw i32 %79, %78
  %81 = add nuw nsw i32 %80, %75
  %82 = lshr i32 %81, 9
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %18, i64 %65
  store i8 %83, i8* %84, align 1
  %85 = add nuw nsw i64 %65, 1
  %86 = icmp eq i64 %85, 16
  br i1 %86, label %60, label %64, !llvm.loop !71
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i8, i8* %2, i64 5
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = getelementptr inbounds i8, i8* %2, i64 7
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = getelementptr inbounds i8, i8* %2, i64 9
  %17 = getelementptr inbounds i8, i8* %2, i64 10
  %18 = getelementptr inbounds i8, i8* %2, i64 11
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = getelementptr inbounds i8, i8* %2, i64 13
  %21 = getelementptr inbounds i8, i8* %2, i64 14
  %22 = getelementptr inbounds i8, i8* %2, i64 15
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i64 [ 0, %4 ], [ %145, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %144, %23 ]
  %26 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = sub i8 0, %27
  %30 = zext i8 %29 to i32
  %31 = mul nuw nsw i32 %30, %7
  %32 = add nuw nsw i32 %31, 128
  %33 = load i8, i8* %2, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, %28
  %36 = add nuw nsw i32 %32, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %25, align 1
  %39 = load i8, i8* %8, align 1
  %40 = zext i8 %39 to i32
  %41 = mul nuw nsw i32 %40, %28
  %42 = add nuw nsw i32 %32, %41
  %43 = lshr i32 %42, 8
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %44, i8* %45, align 1
  %46 = load i8, i8* %9, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %28
  %49 = add nuw nsw i32 %32, %48
  %50 = lshr i32 %49, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %51, i8* %52, align 1
  %53 = load i8, i8* %10, align 1
  %54 = zext i8 %53 to i32
  %55 = mul nuw nsw i32 %54, %28
  %56 = add nuw nsw i32 %32, %55
  %57 = lshr i32 %56, 8
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %58, i8* %59, align 1
  %60 = load i8, i8* %11, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %28
  %63 = add nuw nsw i32 %32, %62
  %64 = lshr i32 %63, 8
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %65, i8* %66, align 1
  %67 = load i8, i8* %12, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %28
  %70 = add nuw nsw i32 %32, %69
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %72, i8* %73, align 1
  %74 = load i8, i8* %13, align 1
  %75 = zext i8 %74 to i32
  %76 = mul nuw nsw i32 %75, %28
  %77 = add nuw nsw i32 %32, %76
  %78 = lshr i32 %77, 8
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %79, i8* %80, align 1
  %81 = load i8, i8* %14, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nuw nsw i32 %82, %28
  %84 = add nuw nsw i32 %32, %83
  %85 = lshr i32 %84, 8
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %86, i8* %87, align 1
  %88 = load i8, i8* %15, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %89, %28
  %91 = add nuw nsw i32 %32, %90
  %92 = lshr i32 %91, 8
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds i8, i8* %25, i64 8
  store i8 %93, i8* %94, align 1
  %95 = load i8, i8* %16, align 1
  %96 = zext i8 %95 to i32
  %97 = mul nuw nsw i32 %96, %28
  %98 = add nuw nsw i32 %32, %97
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds i8, i8* %25, i64 9
  store i8 %100, i8* %101, align 1
  %102 = load i8, i8* %17, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %103, %28
  %105 = add nuw nsw i32 %32, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, i8* %25, i64 10
  store i8 %107, i8* %108, align 1
  %109 = load i8, i8* %18, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, %28
  %112 = add nuw nsw i32 %32, %111
  %113 = lshr i32 %112, 8
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %25, i64 11
  store i8 %114, i8* %115, align 1
  %116 = load i8, i8* %19, align 1
  %117 = zext i8 %116 to i32
  %118 = mul nuw nsw i32 %117, %28
  %119 = add nuw nsw i32 %32, %118
  %120 = lshr i32 %119, 8
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %25, i64 12
  store i8 %121, i8* %122, align 1
  %123 = load i8, i8* %20, align 1
  %124 = zext i8 %123 to i32
  %125 = mul nuw nsw i32 %124, %28
  %126 = add nuw nsw i32 %32, %125
  %127 = lshr i32 %126, 8
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %25, i64 13
  store i8 %128, i8* %129, align 1
  %130 = load i8, i8* %21, align 1
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %28
  %133 = add nuw nsw i32 %32, %132
  %134 = lshr i32 %133, 8
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds i8, i8* %25, i64 14
  store i8 %135, i8* %136, align 1
  %137 = load i8, i8* %22, align 1
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, %28
  %140 = add nuw nsw i32 %32, %139
  %141 = lshr i32 %140, 8
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds i8, i8* %25, i64 15
  store i8 %142, i8* %143, align 1
  %144 = getelementptr inbounds i8, i8* %25, i64 %1
  %145 = add nuw nsw i64 %24, 1
  %146 = icmp eq i64 %145, 8
  br i1 %146, label %147, label %23

147:                                              ; preds = %23
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr i8, i8* %0, i64 16
  %9 = getelementptr i8, i8* %3, i64 1
  %10 = icmp ugt i8* %9, %0
  %11 = icmp ugt i8* %8, %3
  %12 = and i1 %10, %11
  br i1 %12, label %50, label %13

13:                                               ; preds = %4
  %14 = insertelement <16 x i32> undef, i32 %7, i32 0
  %15 = shufflevector <16 x i32> %14, <16 x i32> undef, <16 x i32> zeroinitializer
  %16 = load i8, i8* %3, align 1, !alias.scope !72
  %17 = insertelement <16 x i8> undef, i8 %16, i32 0
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <16 x i32> zeroinitializer
  %19 = zext <16 x i8> %18 to <16 x i32>
  %20 = mul nuw nsw <16 x i32> %19, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %21 = mul nuw nsw <16 x i32> %15, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %22 = add nuw nsw <16 x i32> %21, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %23 = add nuw nsw <16 x i32> %22, %20
  %24 = lshr <16 x i32> %23, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %25 = trunc <16 x i32> %24 to <16 x i8>
  %26 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %25, <16 x i8>* %26, align 1, !alias.scope !75, !noalias !72
  br label %27

27:                                               ; preds = %50, %13
  %28 = getelementptr inbounds i8, i8* %0, i64 %1
  %29 = getelementptr inbounds i8, i8* %3, i64 1
  %30 = add i64 %1, 16
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = getelementptr i8, i8* %3, i64 2
  %33 = icmp ult i8* %28, %32
  %34 = icmp ult i8* %29, %31
  %35 = and i1 %33, %34
  br i1 %35, label %83, label %36

36:                                               ; preds = %27
  %37 = insertelement <16 x i32> undef, i32 %7, i32 0
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> zeroinitializer
  %39 = load i8, i8* %29, align 1, !alias.scope !77
  %40 = insertelement <16 x i8> undef, i8 %39, i32 0
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> zeroinitializer
  %42 = zext <16 x i8> %41 to <16 x i32>
  %43 = mul nuw nsw <16 x i32> %42, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %44 = mul nuw nsw <16 x i32> %38, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %45 = add nuw nsw <16 x i32> %44, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %46 = add nuw nsw <16 x i32> %45, %43
  %47 = lshr <16 x i32> %46, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %48 = trunc <16 x i32> %47 to <16 x i8>
  %49 = bitcast i8* %28 to <16 x i8>*
  store <16 x i8> %48, <16 x i8>* %49, align 1, !alias.scope !80, !noalias !77
  br label %116

50:                                               ; preds = %4, %50
  %51 = phi i64 [ %81, %50 ], [ 0, %4 ]
  %52 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %51
  %53 = load i8, i8* %52, align 2
  %54 = zext i8 %53 to i32
  %55 = load i8, i8* %3, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %56, %54
  %58 = sub i8 0, %53
  %59 = zext i8 %58 to i32
  %60 = mul nuw nsw i32 %59, %7
  %61 = add nuw nsw i32 %60, 128
  %62 = add nuw nsw i32 %61, %57
  %63 = lshr i32 %62, 8
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %0, i64 %51
  store i8 %64, i8* %65, align 1
  %66 = or i64 %51, 1
  %67 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = load i8, i8* %3, align 1
  %71 = zext i8 %70 to i32
  %72 = mul nuw nsw i32 %71, %69
  %73 = sub i8 0, %68
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %7
  %76 = add nuw nsw i32 %75, 128
  %77 = add nuw nsw i32 %76, %72
  %78 = lshr i32 %77, 8
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %0, i64 %66
  store i8 %79, i8* %80, align 1
  %81 = add nuw nsw i64 %51, 2
  %82 = icmp eq i64 %81, 16
  br i1 %82, label %27, label %50, !llvm.loop !82

83:                                               ; preds = %27, %83
  %84 = phi i64 [ %114, %83 ], [ 0, %27 ]
  %85 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %84
  %86 = load i8, i8* %85, align 2
  %87 = zext i8 %86 to i32
  %88 = load i8, i8* %29, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %89, %87
  %91 = sub i8 0, %86
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, %7
  %94 = add nuw nsw i32 %93, 128
  %95 = add nuw nsw i32 %94, %90
  %96 = lshr i32 %95, 8
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %28, i64 %84
  store i8 %97, i8* %98, align 1
  %99 = or i64 %84, 1
  %100 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = load i8, i8* %29, align 1
  %104 = zext i8 %103 to i32
  %105 = mul nuw nsw i32 %104, %102
  %106 = sub i8 0, %101
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, %7
  %109 = add nuw nsw i32 %108, 128
  %110 = add nuw nsw i32 %109, %105
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %28, i64 %99
  store i8 %112, i8* %113, align 1
  %114 = add nuw nsw i64 %84, 2
  %115 = icmp eq i64 %114, 16
  br i1 %115, label %116, label %83, !llvm.loop !83

116:                                              ; preds = %83, %36
  %117 = getelementptr inbounds i8, i8* %28, i64 %1
  %118 = getelementptr inbounds i8, i8* %3, i64 2
  %119 = shl i64 %1, 1
  %120 = add i64 %119, 16
  %121 = getelementptr i8, i8* %0, i64 %120
  %122 = getelementptr i8, i8* %3, i64 3
  %123 = icmp ult i8* %117, %122
  %124 = icmp ult i8* %118, %121
  %125 = and i1 %123, %124
  br i1 %125, label %140, label %126

126:                                              ; preds = %116
  %127 = insertelement <16 x i32> undef, i32 %7, i32 0
  %128 = shufflevector <16 x i32> %127, <16 x i32> undef, <16 x i32> zeroinitializer
  %129 = load i8, i8* %118, align 1, !alias.scope !84
  %130 = insertelement <16 x i8> undef, i8 %129, i32 0
  %131 = shufflevector <16 x i8> %130, <16 x i8> undef, <16 x i32> zeroinitializer
  %132 = zext <16 x i8> %131 to <16 x i32>
  %133 = mul nuw nsw <16 x i32> %132, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %134 = mul nuw nsw <16 x i32> %128, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %135 = add nuw nsw <16 x i32> %134, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %136 = add nuw nsw <16 x i32> %135, %133
  %137 = lshr <16 x i32> %136, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %138 = trunc <16 x i32> %137 to <16 x i8>
  %139 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %139, align 1, !alias.scope !87, !noalias !84
  br label %173

140:                                              ; preds = %116, %140
  %141 = phi i64 [ %171, %140 ], [ 0, %116 ]
  %142 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %141
  %143 = load i8, i8* %142, align 2
  %144 = zext i8 %143 to i32
  %145 = load i8, i8* %118, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nuw nsw i32 %146, %144
  %148 = sub i8 0, %143
  %149 = zext i8 %148 to i32
  %150 = mul nuw nsw i32 %149, %7
  %151 = add nuw nsw i32 %150, 128
  %152 = add nuw nsw i32 %151, %147
  %153 = lshr i32 %152, 8
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds i8, i8* %117, i64 %141
  store i8 %154, i8* %155, align 1
  %156 = or i64 %141, 1
  %157 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = load i8, i8* %118, align 1
  %161 = zext i8 %160 to i32
  %162 = mul nuw nsw i32 %161, %159
  %163 = sub i8 0, %158
  %164 = zext i8 %163 to i32
  %165 = mul nuw nsw i32 %164, %7
  %166 = add nuw nsw i32 %165, 128
  %167 = add nuw nsw i32 %166, %162
  %168 = lshr i32 %167, 8
  %169 = trunc i32 %168 to i8
  %170 = getelementptr inbounds i8, i8* %117, i64 %156
  store i8 %169, i8* %170, align 1
  %171 = add nuw nsw i64 %141, 2
  %172 = icmp eq i64 %171, 16
  br i1 %172, label %173, label %140, !llvm.loop !89

173:                                              ; preds = %140, %126
  %174 = getelementptr inbounds i8, i8* %117, i64 %1
  %175 = getelementptr inbounds i8, i8* %3, i64 3
  %176 = mul i64 %1, 3
  %177 = add i64 %176, 16
  %178 = getelementptr i8, i8* %0, i64 %177
  %179 = getelementptr i8, i8* %3, i64 4
  %180 = icmp ult i8* %174, %179
  %181 = icmp ult i8* %175, %178
  %182 = and i1 %180, %181
  br i1 %182, label %197, label %183

183:                                              ; preds = %173
  %184 = insertelement <16 x i32> undef, i32 %7, i32 0
  %185 = shufflevector <16 x i32> %184, <16 x i32> undef, <16 x i32> zeroinitializer
  %186 = load i8, i8* %175, align 1, !alias.scope !90
  %187 = insertelement <16 x i8> undef, i8 %186, i32 0
  %188 = shufflevector <16 x i8> %187, <16 x i8> undef, <16 x i32> zeroinitializer
  %189 = zext <16 x i8> %188 to <16 x i32>
  %190 = mul nuw nsw <16 x i32> %189, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %191 = mul nuw nsw <16 x i32> %185, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %192 = add nuw nsw <16 x i32> %191, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %193 = add nuw nsw <16 x i32> %192, %190
  %194 = lshr <16 x i32> %193, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %195 = trunc <16 x i32> %194 to <16 x i8>
  %196 = bitcast i8* %174 to <16 x i8>*
  store <16 x i8> %195, <16 x i8>* %196, align 1, !alias.scope !93, !noalias !90
  br label %230

197:                                              ; preds = %173, %197
  %198 = phi i64 [ %228, %197 ], [ 0, %173 ]
  %199 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %198
  %200 = load i8, i8* %199, align 2
  %201 = zext i8 %200 to i32
  %202 = load i8, i8* %175, align 1
  %203 = zext i8 %202 to i32
  %204 = mul nuw nsw i32 %203, %201
  %205 = sub i8 0, %200
  %206 = zext i8 %205 to i32
  %207 = mul nuw nsw i32 %206, %7
  %208 = add nuw nsw i32 %207, 128
  %209 = add nuw nsw i32 %208, %204
  %210 = lshr i32 %209, 8
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds i8, i8* %174, i64 %198
  store i8 %211, i8* %212, align 1
  %213 = or i64 %198, 1
  %214 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = load i8, i8* %175, align 1
  %218 = zext i8 %217 to i32
  %219 = mul nuw nsw i32 %218, %216
  %220 = sub i8 0, %215
  %221 = zext i8 %220 to i32
  %222 = mul nuw nsw i32 %221, %7
  %223 = add nuw nsw i32 %222, 128
  %224 = add nuw nsw i32 %223, %219
  %225 = lshr i32 %224, 8
  %226 = trunc i32 %225 to i8
  %227 = getelementptr inbounds i8, i8* %174, i64 %213
  store i8 %226, i8* %227, align 1
  %228 = add nuw nsw i64 %198, 2
  %229 = icmp eq i64 %228, 16
  br i1 %229, label %230, label %197, !llvm.loop !95

230:                                              ; preds = %197, %183
  %231 = getelementptr inbounds i8, i8* %174, i64 %1
  %232 = getelementptr inbounds i8, i8* %3, i64 4
  %233 = shl i64 %1, 2
  %234 = add i64 %233, 16
  %235 = getelementptr i8, i8* %0, i64 %234
  %236 = getelementptr i8, i8* %3, i64 5
  %237 = icmp ult i8* %231, %236
  %238 = icmp ult i8* %232, %235
  %239 = and i1 %237, %238
  br i1 %239, label %254, label %240

240:                                              ; preds = %230
  %241 = insertelement <16 x i32> undef, i32 %7, i32 0
  %242 = shufflevector <16 x i32> %241, <16 x i32> undef, <16 x i32> zeroinitializer
  %243 = load i8, i8* %232, align 1, !alias.scope !96
  %244 = insertelement <16 x i8> undef, i8 %243, i32 0
  %245 = shufflevector <16 x i8> %244, <16 x i8> undef, <16 x i32> zeroinitializer
  %246 = zext <16 x i8> %245 to <16 x i32>
  %247 = mul nuw nsw <16 x i32> %246, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %248 = mul nuw nsw <16 x i32> %242, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %249 = add nuw nsw <16 x i32> %248, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %250 = add nuw nsw <16 x i32> %249, %247
  %251 = lshr <16 x i32> %250, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %252 = trunc <16 x i32> %251 to <16 x i8>
  %253 = bitcast i8* %231 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %253, align 1, !alias.scope !99, !noalias !96
  br label %287

254:                                              ; preds = %230, %254
  %255 = phi i64 [ %285, %254 ], [ 0, %230 ]
  %256 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %255
  %257 = load i8, i8* %256, align 2
  %258 = zext i8 %257 to i32
  %259 = load i8, i8* %232, align 1
  %260 = zext i8 %259 to i32
  %261 = mul nuw nsw i32 %260, %258
  %262 = sub i8 0, %257
  %263 = zext i8 %262 to i32
  %264 = mul nuw nsw i32 %263, %7
  %265 = add nuw nsw i32 %264, 128
  %266 = add nuw nsw i32 %265, %261
  %267 = lshr i32 %266, 8
  %268 = trunc i32 %267 to i8
  %269 = getelementptr inbounds i8, i8* %231, i64 %255
  store i8 %268, i8* %269, align 1
  %270 = or i64 %255, 1
  %271 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = load i8, i8* %232, align 1
  %275 = zext i8 %274 to i32
  %276 = mul nuw nsw i32 %275, %273
  %277 = sub i8 0, %272
  %278 = zext i8 %277 to i32
  %279 = mul nuw nsw i32 %278, %7
  %280 = add nuw nsw i32 %279, 128
  %281 = add nuw nsw i32 %280, %276
  %282 = lshr i32 %281, 8
  %283 = trunc i32 %282 to i8
  %284 = getelementptr inbounds i8, i8* %231, i64 %270
  store i8 %283, i8* %284, align 1
  %285 = add nuw nsw i64 %255, 2
  %286 = icmp eq i64 %285, 16
  br i1 %286, label %287, label %254, !llvm.loop !101

287:                                              ; preds = %254, %240
  %288 = getelementptr inbounds i8, i8* %231, i64 %1
  %289 = getelementptr inbounds i8, i8* %3, i64 5
  %290 = mul i64 %1, 5
  %291 = add i64 %290, 16
  %292 = getelementptr i8, i8* %0, i64 %291
  %293 = getelementptr i8, i8* %3, i64 6
  %294 = icmp ult i8* %288, %293
  %295 = icmp ult i8* %289, %292
  %296 = and i1 %294, %295
  br i1 %296, label %311, label %297

297:                                              ; preds = %287
  %298 = insertelement <16 x i32> undef, i32 %7, i32 0
  %299 = shufflevector <16 x i32> %298, <16 x i32> undef, <16 x i32> zeroinitializer
  %300 = load i8, i8* %289, align 1, !alias.scope !102
  %301 = insertelement <16 x i8> undef, i8 %300, i32 0
  %302 = shufflevector <16 x i8> %301, <16 x i8> undef, <16 x i32> zeroinitializer
  %303 = zext <16 x i8> %302 to <16 x i32>
  %304 = mul nuw nsw <16 x i32> %303, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %305 = mul nuw nsw <16 x i32> %299, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %306 = add nuw nsw <16 x i32> %305, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %307 = add nuw nsw <16 x i32> %306, %304
  %308 = lshr <16 x i32> %307, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %309 = trunc <16 x i32> %308 to <16 x i8>
  %310 = bitcast i8* %288 to <16 x i8>*
  store <16 x i8> %309, <16 x i8>* %310, align 1, !alias.scope !105, !noalias !102
  br label %344

311:                                              ; preds = %287, %311
  %312 = phi i64 [ %342, %311 ], [ 0, %287 ]
  %313 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %312
  %314 = load i8, i8* %313, align 2
  %315 = zext i8 %314 to i32
  %316 = load i8, i8* %289, align 1
  %317 = zext i8 %316 to i32
  %318 = mul nuw nsw i32 %317, %315
  %319 = sub i8 0, %314
  %320 = zext i8 %319 to i32
  %321 = mul nuw nsw i32 %320, %7
  %322 = add nuw nsw i32 %321, 128
  %323 = add nuw nsw i32 %322, %318
  %324 = lshr i32 %323, 8
  %325 = trunc i32 %324 to i8
  %326 = getelementptr inbounds i8, i8* %288, i64 %312
  store i8 %325, i8* %326, align 1
  %327 = or i64 %312, 1
  %328 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %327
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i32
  %331 = load i8, i8* %289, align 1
  %332 = zext i8 %331 to i32
  %333 = mul nuw nsw i32 %332, %330
  %334 = sub i8 0, %329
  %335 = zext i8 %334 to i32
  %336 = mul nuw nsw i32 %335, %7
  %337 = add nuw nsw i32 %336, 128
  %338 = add nuw nsw i32 %337, %333
  %339 = lshr i32 %338, 8
  %340 = trunc i32 %339 to i8
  %341 = getelementptr inbounds i8, i8* %288, i64 %327
  store i8 %340, i8* %341, align 1
  %342 = add nuw nsw i64 %312, 2
  %343 = icmp eq i64 %342, 16
  br i1 %343, label %344, label %311, !llvm.loop !107

344:                                              ; preds = %311, %297
  %345 = getelementptr inbounds i8, i8* %288, i64 %1
  %346 = getelementptr inbounds i8, i8* %3, i64 6
  %347 = mul i64 %1, 6
  %348 = add i64 %347, 16
  %349 = getelementptr i8, i8* %0, i64 %348
  %350 = getelementptr i8, i8* %3, i64 7
  %351 = icmp ult i8* %345, %350
  %352 = icmp ult i8* %346, %349
  %353 = and i1 %351, %352
  br i1 %353, label %368, label %354

354:                                              ; preds = %344
  %355 = insertelement <16 x i32> undef, i32 %7, i32 0
  %356 = shufflevector <16 x i32> %355, <16 x i32> undef, <16 x i32> zeroinitializer
  %357 = load i8, i8* %346, align 1, !alias.scope !108
  %358 = insertelement <16 x i8> undef, i8 %357, i32 0
  %359 = shufflevector <16 x i8> %358, <16 x i8> undef, <16 x i32> zeroinitializer
  %360 = zext <16 x i8> %359 to <16 x i32>
  %361 = mul nuw nsw <16 x i32> %360, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %362 = mul nuw nsw <16 x i32> %356, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %363 = add nuw nsw <16 x i32> %362, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %364 = add nuw nsw <16 x i32> %363, %361
  %365 = lshr <16 x i32> %364, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %366 = trunc <16 x i32> %365 to <16 x i8>
  %367 = bitcast i8* %345 to <16 x i8>*
  store <16 x i8> %366, <16 x i8>* %367, align 1, !alias.scope !111, !noalias !108
  br label %401

368:                                              ; preds = %344, %368
  %369 = phi i64 [ %399, %368 ], [ 0, %344 ]
  %370 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %369
  %371 = load i8, i8* %370, align 2
  %372 = zext i8 %371 to i32
  %373 = load i8, i8* %346, align 1
  %374 = zext i8 %373 to i32
  %375 = mul nuw nsw i32 %374, %372
  %376 = sub i8 0, %371
  %377 = zext i8 %376 to i32
  %378 = mul nuw nsw i32 %377, %7
  %379 = add nuw nsw i32 %378, 128
  %380 = add nuw nsw i32 %379, %375
  %381 = lshr i32 %380, 8
  %382 = trunc i32 %381 to i8
  %383 = getelementptr inbounds i8, i8* %345, i64 %369
  store i8 %382, i8* %383, align 1
  %384 = or i64 %369, 1
  %385 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %384
  %386 = load i8, i8* %385, align 1
  %387 = zext i8 %386 to i32
  %388 = load i8, i8* %346, align 1
  %389 = zext i8 %388 to i32
  %390 = mul nuw nsw i32 %389, %387
  %391 = sub i8 0, %386
  %392 = zext i8 %391 to i32
  %393 = mul nuw nsw i32 %392, %7
  %394 = add nuw nsw i32 %393, 128
  %395 = add nuw nsw i32 %394, %390
  %396 = lshr i32 %395, 8
  %397 = trunc i32 %396 to i8
  %398 = getelementptr inbounds i8, i8* %345, i64 %384
  store i8 %397, i8* %398, align 1
  %399 = add nuw nsw i64 %369, 2
  %400 = icmp eq i64 %399, 16
  br i1 %400, label %401, label %368, !llvm.loop !113

401:                                              ; preds = %368, %354
  %402 = getelementptr inbounds i8, i8* %345, i64 %1
  %403 = getelementptr inbounds i8, i8* %3, i64 7
  %404 = mul i64 %1, 7
  %405 = add i64 %404, 16
  %406 = getelementptr i8, i8* %0, i64 %405
  %407 = getelementptr i8, i8* %3, i64 8
  %408 = icmp ult i8* %402, %407
  %409 = icmp ult i8* %403, %406
  %410 = and i1 %408, %409
  br i1 %410, label %425, label %411

411:                                              ; preds = %401
  %412 = insertelement <16 x i32> undef, i32 %7, i32 0
  %413 = shufflevector <16 x i32> %412, <16 x i32> undef, <16 x i32> zeroinitializer
  %414 = load i8, i8* %403, align 1, !alias.scope !114
  %415 = insertelement <16 x i8> undef, i8 %414, i32 0
  %416 = shufflevector <16 x i8> %415, <16 x i8> undef, <16 x i32> zeroinitializer
  %417 = zext <16 x i8> %416 to <16 x i32>
  %418 = mul nuw nsw <16 x i32> %417, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %419 = mul nuw nsw <16 x i32> %413, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %420 = add nuw nsw <16 x i32> %419, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %421 = add nuw nsw <16 x i32> %420, %418
  %422 = lshr <16 x i32> %421, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %423 = trunc <16 x i32> %422 to <16 x i8>
  %424 = bitcast i8* %402 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %424, align 1, !alias.scope !117, !noalias !114
  br label %458

425:                                              ; preds = %401, %425
  %426 = phi i64 [ %456, %425 ], [ 0, %401 ]
  %427 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %426
  %428 = load i8, i8* %427, align 2
  %429 = zext i8 %428 to i32
  %430 = load i8, i8* %403, align 1
  %431 = zext i8 %430 to i32
  %432 = mul nuw nsw i32 %431, %429
  %433 = sub i8 0, %428
  %434 = zext i8 %433 to i32
  %435 = mul nuw nsw i32 %434, %7
  %436 = add nuw nsw i32 %435, 128
  %437 = add nuw nsw i32 %436, %432
  %438 = lshr i32 %437, 8
  %439 = trunc i32 %438 to i8
  %440 = getelementptr inbounds i8, i8* %402, i64 %426
  store i8 %439, i8* %440, align 1
  %441 = or i64 %426, 1
  %442 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %441
  %443 = load i8, i8* %442, align 1
  %444 = zext i8 %443 to i32
  %445 = load i8, i8* %403, align 1
  %446 = zext i8 %445 to i32
  %447 = mul nuw nsw i32 %446, %444
  %448 = sub i8 0, %443
  %449 = zext i8 %448 to i32
  %450 = mul nuw nsw i32 %449, %7
  %451 = add nuw nsw i32 %450, 128
  %452 = add nuw nsw i32 %451, %447
  %453 = lshr i32 %452, 8
  %454 = trunc i32 %453 to i8
  %455 = getelementptr inbounds i8, i8* %402, i64 %441
  store i8 %454, i8* %455, align 1
  %456 = add nuw nsw i64 %426, 2
  %457 = icmp eq i64 %456, 16
  br i1 %457, label %458, label %425, !llvm.loop !119

458:                                              ; preds = %425, %411
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi16ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 16, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 16, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 16, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 16, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 16, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 16, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 16, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 16, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 16, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 16, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 16, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 16, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 16, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 16, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %19, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %19, i64 16, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %19, i64 16, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %19, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %19, i64 16, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %19, i64 16, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %19, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %19, i64 16, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %19, i64 16, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %19, i64 16, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %19, i64 16, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %19, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %19, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %19, i64 16, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %19, i64 16, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %19, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %19, i64 16, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %19, i64 16, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %19, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %19, i64 16, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %19, i64 16, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %19, i64 16, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %19, i64 16, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %19, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = bitcast i8* %3 to <8 x i8>*
  %9 = load <8 x i8>, <8 x i8>* %8, align 1
  %10 = zext <8 x i8> %9 to <8 x i32>
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %3, i64 9
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %3, i64 10
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, i8* %3, i64 11
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %3, i64 12
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %3, i64 13
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, i8* %3, i64 14
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add nuw nsw <16 x i32> %32, %7
  %34 = shufflevector <16 x i32> %33, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = add nuw nsw <16 x i32> %33, %34
  %36 = shufflevector <16 x i32> %35, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = add nuw nsw <16 x i32> %35, %36
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = add nuw nsw <16 x i32> %37, %38
  %40 = extractelement <16 x i32> %39, i32 0
  %41 = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = add nuw nsw <8 x i32> %41, %10
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = add nuw nsw <8 x i32> %42, %43
  %45 = shufflevector <8 x i32> %44, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = add nuw nsw <8 x i32> %44, %45
  %47 = extractelement <8 x i32> %46, i32 0
  %48 = add nuw nsw i32 %40, %47
  %49 = add nuw nsw i32 %48, %13
  %50 = add nuw nsw i32 %49, %16
  %51 = add nuw nsw i32 %50, %19
  %52 = add nuw nsw i32 %51, %22
  %53 = add nuw nsw i32 %52, %25
  %54 = add nuw nsw i32 %53, %28
  %55 = add nuw nsw i32 %54, %31
  %56 = add nuw nsw i32 %55, 16
  %57 = getelementptr inbounds i8, i8* %3, i64 15
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = add nuw nsw i32 %56, %59
  %61 = lshr i32 %60, 5
  %62 = trunc i32 %61 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %62, i64 16, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 %62, i64 16, i1 false) #5
  %64 = getelementptr inbounds i8, i8* %63, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 %62, i64 16, i1 false) #5
  %65 = getelementptr inbounds i8, i8* %64, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 %62, i64 16, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %65, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %62, i64 16, i1 false) #5
  %67 = getelementptr inbounds i8, i8* %66, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 %62, i64 16, i1 false) #5
  %68 = getelementptr inbounds i8, i8* %67, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 %62, i64 16, i1 false) #5
  %69 = getelementptr inbounds i8, i8* %68, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %62, i64 16, i1 false) #5
  %70 = getelementptr inbounds i8, i8* %69, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %70, i8 %62, i64 16, i1 false) #5
  %71 = getelementptr inbounds i8, i8* %70, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %62, i64 16, i1 false) #5
  %72 = getelementptr inbounds i8, i8* %71, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %62, i64 16, i1 false) #5
  %73 = getelementptr inbounds i8, i8* %72, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %62, i64 16, i1 false) #5
  %74 = getelementptr inbounds i8, i8* %73, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 %62, i64 16, i1 false) #5
  %75 = getelementptr inbounds i8, i8* %74, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %62, i64 16, i1 false) #5
  %76 = getelementptr inbounds i8, i8* %75, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 %62, i64 16, i1 false) #5
  %77 = getelementptr inbounds i8, i8* %76, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 %62, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 16, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 16, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 16, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 16, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 16, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 16, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 16, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 16, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %2, i64 16, i1 false)
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %2, i64 16, i1 false)
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %2, i64 16, i1 false)
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %2, i64 16, i1 false)
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %2, i64 16, i1 false)
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %2, i64 16, i1 false)
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %2, i64 16, i1 false)
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %2, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 16, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 16, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 16, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 16, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %24, i64 %1
  %28 = getelementptr inbounds i8, i8* %3, i64 8
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %27, i64 %1
  %31 = getelementptr inbounds i8, i8* %3, i64 9
  %32 = load i8, i8* %31, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 16, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %30, i64 %1
  %34 = getelementptr inbounds i8, i8* %3, i64 10
  %35 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %35, i64 16, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %33, i64 %1
  %37 = getelementptr inbounds i8, i8* %3, i64 11
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 16, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %36, i64 %1
  %40 = getelementptr inbounds i8, i8* %3, i64 12
  %41 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %41, i64 16, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 13
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 16, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %42, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 14
  %47 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %47, i64 16, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %45, i64 %1
  %49 = getelementptr inbounds i8, i8* %3, i64 15
  %50 = load i8, i8* %49, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 16
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 16
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 15
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 16
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  br label %16

16:                                               ; preds = %60, %4
  %17 = phi i64 [ 0, %4 ], [ %62, %60 ]
  %18 = phi i8* [ %0, %4 ], [ %61, %60 ]
  %19 = mul i64 %17, %1
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = add i64 %19, 16
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %17
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %3, i64 %17
  %27 = sub i8 0, %24
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, %9
  %30 = add nuw nsw i32 %29, 256
  %31 = add nuw i64 %17, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = icmp ult i8* %20, %11
  %34 = icmp ugt i8* %22, %2
  %35 = and i1 %33, %34
  %36 = icmp ult i8* %20, %32
  %37 = icmp ult i8* %26, %22
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  br i1 %39, label %64, label %40

40:                                               ; preds = %16
  %41 = insertelement <16 x i32> undef, i32 %30, i32 0
  %42 = shufflevector <16 x i32> %41, <16 x i32> undef, <16 x i32> zeroinitializer
  %43 = insertelement <16 x i32> undef, i32 %25, i32 0
  %44 = shufflevector <16 x i32> %43, <16 x i32> undef, <16 x i32> zeroinitializer
  %45 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !120
  %46 = zext <16 x i8> %45 to <16 x i32>
  %47 = mul nuw nsw <16 x i32> %44, %46
  %48 = load i8, i8* %26, align 1, !alias.scope !123
  %49 = insertelement <16 x i8> undef, i8 %48, i32 0
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> zeroinitializer
  %51 = zext <16 x i8> %50 to <16 x i32>
  %52 = mul nuw nsw <16 x i32> %51, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %53 = add nuw nsw <16 x i32> %42, %47
  %54 = add nuw nsw <16 x i32> %53, %15
  %55 = add nuw nsw <16 x i32> %54, %52
  %56 = lshr <16 x i32> %55, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %57 = trunc <16 x i32> %56 to <16 x i8>
  %58 = bitcast i8* %18 to <16 x i8>*
  store <16 x i8> %57, <16 x i8>* %58, align 1, !alias.scope !125, !noalias !127
  br label %60

59:                                               ; preds = %60
  ret void

60:                                               ; preds = %64, %40
  %61 = getelementptr inbounds i8, i8* %18, i64 %1
  %62 = add nuw nsw i64 %17, 1
  %63 = icmp eq i64 %62, 16
  br i1 %63, label %59, label %16

64:                                               ; preds = %16, %64
  %65 = phi i64 [ %85, %64 ], [ 0, %16 ]
  %66 = getelementptr inbounds i8, i8* %2, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %25
  %70 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %65
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = load i8, i8* %26, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %72
  %76 = sub i8 0, %71
  %77 = zext i8 %76 to i32
  %78 = mul nuw nsw i32 %77, %10
  %79 = add nuw nsw i32 %30, %69
  %80 = add nuw nsw i32 %79, %78
  %81 = add nuw nsw i32 %80, %75
  %82 = lshr i32 %81, 9
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %18, i64 %65
  store i8 %83, i8* %84, align 1
  %85 = add nuw nsw i64 %65, 1
  %86 = icmp eq i64 %85, 16
  br i1 %86, label %60, label %64, !llvm.loop !128
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i8, i8* %2, i64 5
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = getelementptr inbounds i8, i8* %2, i64 7
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = getelementptr inbounds i8, i8* %2, i64 9
  %17 = getelementptr inbounds i8, i8* %2, i64 10
  %18 = getelementptr inbounds i8, i8* %2, i64 11
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = getelementptr inbounds i8, i8* %2, i64 13
  %21 = getelementptr inbounds i8, i8* %2, i64 14
  %22 = getelementptr inbounds i8, i8* %2, i64 15
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i64 [ 0, %4 ], [ %145, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %144, %23 ]
  %26 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = sub i8 0, %27
  %30 = zext i8 %29 to i32
  %31 = mul nuw nsw i32 %30, %7
  %32 = add nuw nsw i32 %31, 128
  %33 = load i8, i8* %2, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, %28
  %36 = add nuw nsw i32 %32, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %25, align 1
  %39 = load i8, i8* %8, align 1
  %40 = zext i8 %39 to i32
  %41 = mul nuw nsw i32 %40, %28
  %42 = add nuw nsw i32 %32, %41
  %43 = lshr i32 %42, 8
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %44, i8* %45, align 1
  %46 = load i8, i8* %9, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %28
  %49 = add nuw nsw i32 %32, %48
  %50 = lshr i32 %49, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %51, i8* %52, align 1
  %53 = load i8, i8* %10, align 1
  %54 = zext i8 %53 to i32
  %55 = mul nuw nsw i32 %54, %28
  %56 = add nuw nsw i32 %32, %55
  %57 = lshr i32 %56, 8
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %58, i8* %59, align 1
  %60 = load i8, i8* %11, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %28
  %63 = add nuw nsw i32 %32, %62
  %64 = lshr i32 %63, 8
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %65, i8* %66, align 1
  %67 = load i8, i8* %12, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %28
  %70 = add nuw nsw i32 %32, %69
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %72, i8* %73, align 1
  %74 = load i8, i8* %13, align 1
  %75 = zext i8 %74 to i32
  %76 = mul nuw nsw i32 %75, %28
  %77 = add nuw nsw i32 %32, %76
  %78 = lshr i32 %77, 8
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %79, i8* %80, align 1
  %81 = load i8, i8* %14, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nuw nsw i32 %82, %28
  %84 = add nuw nsw i32 %32, %83
  %85 = lshr i32 %84, 8
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %86, i8* %87, align 1
  %88 = load i8, i8* %15, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %89, %28
  %91 = add nuw nsw i32 %32, %90
  %92 = lshr i32 %91, 8
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds i8, i8* %25, i64 8
  store i8 %93, i8* %94, align 1
  %95 = load i8, i8* %16, align 1
  %96 = zext i8 %95 to i32
  %97 = mul nuw nsw i32 %96, %28
  %98 = add nuw nsw i32 %32, %97
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds i8, i8* %25, i64 9
  store i8 %100, i8* %101, align 1
  %102 = load i8, i8* %17, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %103, %28
  %105 = add nuw nsw i32 %32, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, i8* %25, i64 10
  store i8 %107, i8* %108, align 1
  %109 = load i8, i8* %18, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, %28
  %112 = add nuw nsw i32 %32, %111
  %113 = lshr i32 %112, 8
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %25, i64 11
  store i8 %114, i8* %115, align 1
  %116 = load i8, i8* %19, align 1
  %117 = zext i8 %116 to i32
  %118 = mul nuw nsw i32 %117, %28
  %119 = add nuw nsw i32 %32, %118
  %120 = lshr i32 %119, 8
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %25, i64 12
  store i8 %121, i8* %122, align 1
  %123 = load i8, i8* %20, align 1
  %124 = zext i8 %123 to i32
  %125 = mul nuw nsw i32 %124, %28
  %126 = add nuw nsw i32 %32, %125
  %127 = lshr i32 %126, 8
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %25, i64 13
  store i8 %128, i8* %129, align 1
  %130 = load i8, i8* %21, align 1
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %28
  %133 = add nuw nsw i32 %32, %132
  %134 = lshr i32 %133, 8
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds i8, i8* %25, i64 14
  store i8 %135, i8* %136, align 1
  %137 = load i8, i8* %22, align 1
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, %28
  %140 = add nuw nsw i32 %32, %139
  %141 = lshr i32 %140, 8
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds i8, i8* %25, i64 15
  store i8 %142, i8* %143, align 1
  %144 = getelementptr inbounds i8, i8* %25, i64 %1
  %145 = add nuw nsw i64 %24, 1
  %146 = icmp eq i64 %145, 16
  br i1 %146, label %147, label %23

147:                                              ; preds = %23
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <16 x i32> undef, i32 %7, i32 0
  %9 = shufflevector <16 x i32> %8, <16 x i32> undef, <16 x i32> zeroinitializer
  %10 = mul nuw nsw <16 x i32> %9, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %11 = add nuw nsw <16 x i32> %10, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %12

12:                                               ; preds = %36, %4
  %13 = phi i64 [ 0, %4 ], [ %38, %36 ]
  %14 = phi i8* [ %0, %4 ], [ %37, %36 ]
  %15 = mul i64 %13, %1
  %16 = getelementptr inbounds i8, i8* %3, i64 %13
  %17 = add nuw i64 %13, 1
  %18 = getelementptr i8, i8* %3, i64 %17
  %19 = add i64 %15, 16
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = getelementptr i8, i8* %0, i64 %15
  %22 = icmp ult i8* %21, %18
  %23 = icmp ult i8* %16, %20
  %24 = and i1 %22, %23
  br i1 %24, label %40, label %25

25:                                               ; preds = %12
  %26 = load i8, i8* %16, align 1, !alias.scope !129
  %27 = insertelement <16 x i8> undef, i8 %26, i32 0
  %28 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> zeroinitializer
  %29 = zext <16 x i8> %28 to <16 x i32>
  %30 = mul nuw nsw <16 x i32> %29, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %31 = add nuw nsw <16 x i32> %11, %30
  %32 = lshr <16 x i32> %31, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %33 = trunc <16 x i32> %32 to <16 x i8>
  %34 = bitcast i8* %14 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %34, align 1, !alias.scope !132, !noalias !129
  br label %36

35:                                               ; preds = %36
  ret void

36:                                               ; preds = %40, %25
  %37 = getelementptr inbounds i8, i8* %14, i64 %1
  %38 = add nuw nsw i64 %13, 1
  %39 = icmp eq i64 %38, 16
  br i1 %39, label %35, label %12

40:                                               ; preds = %12, %40
  %41 = phi i64 [ %71, %40 ], [ 0, %12 ]
  %42 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %41
  %43 = load i8, i8* %42, align 2
  %44 = zext i8 %43 to i32
  %45 = load i8, i8* %16, align 1
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %44
  %48 = sub i8 0, %43
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, %7
  %51 = add nuw nsw i32 %50, 128
  %52 = add nuw nsw i32 %51, %47
  %53 = lshr i32 %52, 8
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %14, i64 %41
  store i8 %54, i8* %55, align 1
  %56 = or i64 %41, 1
  %57 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = load i8, i8* %16, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %59
  %63 = sub i8 0, %58
  %64 = zext i8 %63 to i32
  %65 = mul nuw nsw i32 %64, %7
  %66 = add nuw nsw i32 %65, 128
  %67 = add nuw nsw i32 %66, %62
  %68 = lshr i32 %67, 8
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %14, i64 %56
  store i8 %69, i8* %70, align 1
  %71 = add nuw nsw i64 %41, 2
  %72 = icmp eq i64 %71, 16
  br i1 %72, label %36, label %40, !llvm.loop !134
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi32ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 16, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 16, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 16, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 16, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 16, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 16, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 16, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 16, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 16, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 16, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 16, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 16, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 16, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 16, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 -128, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 -128, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -128, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 -128, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 -128, i64 16, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 -128, i64 16, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 -128, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 -128, i64 16, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 -128, i64 16, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 -128, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 -128, i64 16, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 -128, i64 16, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 -128, i64 16, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 -128, i64 16, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 -128, i64 16, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 -128, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %19, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %19, i64 16, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %19, i64 16, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %19, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %19, i64 16, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %19, i64 16, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %19, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %19, i64 16, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %19, i64 16, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %19, i64 16, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %19, i64 16, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %19, i64 16, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %19, i64 16, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %19, i64 16, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %19, i64 16, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %19, i64 16, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %19, i64 16, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %19, i64 16, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %19, i64 16, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %19, i64 16, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %19, i64 16, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %19, i64 16, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %19, i64 16, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %19, i64 16, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %19, i64 16, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %19, i64 16, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %19, i64 16, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %19, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i32>
  %8 = shufflevector <32 x i32> %7, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <32 x i32> %8, %7
  %10 = shufflevector <32 x i32> %9, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <32 x i32> %9, %10
  %12 = shufflevector <32 x i32> %11, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <32 x i32> %11, %12
  %14 = shufflevector <32 x i32> %13, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <32 x i32> %13, %14
  %16 = shufflevector <32 x i32> %15, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nuw nsw <32 x i32> %15, %16
  %18 = extractelement <32 x i32> %17, i32 0
  %19 = add nuw nsw i32 %18, 16
  %20 = lshr i32 %19, 5
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 16, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 16, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 16, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 16, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %21, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %21, i64 16, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %21, i64 16, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %21, i64 16, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %21, i64 16, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %21, i64 16, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %21, i64 16, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %21, i64 16, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %21, i64 16, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %21, i64 16, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %21, i64 16, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %21, i64 16, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %21, i64 16, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %21, i64 16, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %21, i64 16, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %21, i64 16, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %21, i64 16, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %21, i64 16, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %21, i64 16, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %21, i64 16, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %21, i64 16, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %21, i64 16, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %21, i64 16, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %21, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i16
  %7 = add nuw nsw i16 %6, 24
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = add nuw nsw i16 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i16
  %15 = add nuw nsw i16 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = add nuw nsw i16 %15, %18
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = add nuw nsw i16 %19, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = add nuw nsw i16 %23, %26
  %28 = getelementptr inbounds i8, i8* %2, i64 6
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  %31 = add i16 %27, %30
  %32 = getelementptr inbounds i8, i8* %2, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = add i16 %31, %34
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i16
  %39 = add i16 %35, %38
  %40 = getelementptr inbounds i8, i8* %2, i64 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i16
  %43 = add i16 %39, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 10
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = add i16 %43, %46
  %48 = getelementptr inbounds i8, i8* %2, i64 11
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = add i16 %47, %50
  %52 = getelementptr inbounds i8, i8* %2, i64 12
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i16
  %55 = add i16 %51, %54
  %56 = getelementptr inbounds i8, i8* %2, i64 13
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i16
  %59 = add i16 %55, %58
  %60 = getelementptr inbounds i8, i8* %2, i64 14
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  %63 = add i16 %59, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 15
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i16
  %67 = add i16 %63, %66
  %68 = load i8, i8* %3, align 1
  %69 = zext i8 %68 to i16
  %70 = add i16 %67, %69
  %71 = getelementptr inbounds i8, i8* %3, i64 1
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  %74 = add i16 %70, %73
  %75 = getelementptr inbounds i8, i8* %3, i64 2
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i16
  %78 = add i16 %74, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = add i16 %78, %81
  %83 = getelementptr inbounds i8, i8* %3, i64 4
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i16
  %86 = add i16 %82, %85
  %87 = getelementptr inbounds i8, i8* %3, i64 5
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i16
  %90 = add i16 %86, %89
  %91 = getelementptr inbounds i8, i8* %3, i64 6
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i16
  %94 = add i16 %90, %93
  %95 = getelementptr inbounds i8, i8* %3, i64 7
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = add i16 %94, %97
  %99 = getelementptr inbounds i8, i8* %3, i64 8
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i16
  %102 = add i16 %98, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 9
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = add i16 %102, %105
  %107 = getelementptr inbounds i8, i8* %3, i64 10
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i16
  %110 = add i16 %106, %109
  %111 = getelementptr inbounds i8, i8* %3, i64 11
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i16
  %114 = add i16 %110, %113
  %115 = getelementptr inbounds i8, i8* %3, i64 12
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i16
  %118 = add i16 %114, %117
  %119 = getelementptr inbounds i8, i8* %3, i64 13
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i16
  %122 = add i16 %118, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 14
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i16
  %126 = add i16 %122, %125
  %127 = getelementptr inbounds i8, i8* %3, i64 15
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i16
  %130 = add i16 %126, %129
  %131 = getelementptr inbounds i8, i8* %3, i64 16
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i16
  %134 = add i16 %130, %133
  %135 = getelementptr inbounds i8, i8* %3, i64 17
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i16
  %138 = add i16 %134, %137
  %139 = getelementptr inbounds i8, i8* %3, i64 18
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i16
  %142 = add i16 %138, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 19
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i16
  %146 = add i16 %142, %145
  %147 = getelementptr inbounds i8, i8* %3, i64 20
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i16
  %150 = add i16 %146, %149
  %151 = getelementptr inbounds i8, i8* %3, i64 21
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i16
  %154 = add i16 %150, %153
  %155 = getelementptr inbounds i8, i8* %3, i64 22
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i16
  %158 = add i16 %154, %157
  %159 = getelementptr inbounds i8, i8* %3, i64 23
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i16
  %162 = add i16 %158, %161
  %163 = getelementptr inbounds i8, i8* %3, i64 24
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i16
  %166 = add i16 %162, %165
  %167 = getelementptr inbounds i8, i8* %3, i64 25
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i16
  %170 = add i16 %166, %169
  %171 = getelementptr inbounds i8, i8* %3, i64 26
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i16
  %174 = add i16 %170, %173
  %175 = getelementptr inbounds i8, i8* %3, i64 27
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i16
  %178 = add i16 %174, %177
  %179 = getelementptr inbounds i8, i8* %3, i64 28
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i16
  %182 = add i16 %178, %181
  %183 = getelementptr inbounds i8, i8* %3, i64 29
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i16
  %186 = add i16 %182, %185
  %187 = getelementptr inbounds i8, i8* %3, i64 30
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i16
  %190 = add i16 %186, %189
  %191 = getelementptr inbounds i8, i8* %3, i64 31
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i16
  %194 = add i16 %190, %193
  %195 = udiv i16 %194, 48
  %196 = trunc i16 %195 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %196, i64 16, i1 false) #5
  %197 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %197, i8 %196, i64 16, i1 false) #5
  %198 = getelementptr inbounds i8, i8* %197, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %198, i8 %196, i64 16, i1 false) #5
  %199 = getelementptr inbounds i8, i8* %198, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %199, i8 %196, i64 16, i1 false) #5
  %200 = getelementptr inbounds i8, i8* %199, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %200, i8 %196, i64 16, i1 false) #5
  %201 = getelementptr inbounds i8, i8* %200, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %201, i8 %196, i64 16, i1 false) #5
  %202 = getelementptr inbounds i8, i8* %201, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %202, i8 %196, i64 16, i1 false) #5
  %203 = getelementptr inbounds i8, i8* %202, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %203, i8 %196, i64 16, i1 false) #5
  %204 = getelementptr inbounds i8, i8* %203, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %204, i8 %196, i64 16, i1 false) #5
  %205 = getelementptr inbounds i8, i8* %204, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %205, i8 %196, i64 16, i1 false) #5
  %206 = getelementptr inbounds i8, i8* %205, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %206, i8 %196, i64 16, i1 false) #5
  %207 = getelementptr inbounds i8, i8* %206, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %207, i8 %196, i64 16, i1 false) #5
  %208 = getelementptr inbounds i8, i8* %207, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %208, i8 %196, i64 16, i1 false) #5
  %209 = getelementptr inbounds i8, i8* %208, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %209, i8 %196, i64 16, i1 false) #5
  %210 = getelementptr inbounds i8, i8* %209, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %210, i8 %196, i64 16, i1 false) #5
  %211 = getelementptr inbounds i8, i8* %210, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %211, i8 %196, i64 16, i1 false) #5
  %212 = getelementptr inbounds i8, i8* %211, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %212, i8 %196, i64 16, i1 false) #5
  %213 = getelementptr inbounds i8, i8* %212, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %213, i8 %196, i64 16, i1 false) #5
  %214 = getelementptr inbounds i8, i8* %213, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %214, i8 %196, i64 16, i1 false) #5
  %215 = getelementptr inbounds i8, i8* %214, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %215, i8 %196, i64 16, i1 false) #5
  %216 = getelementptr inbounds i8, i8* %215, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %216, i8 %196, i64 16, i1 false) #5
  %217 = getelementptr inbounds i8, i8* %216, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %217, i8 %196, i64 16, i1 false) #5
  %218 = getelementptr inbounds i8, i8* %217, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %218, i8 %196, i64 16, i1 false) #5
  %219 = getelementptr inbounds i8, i8* %218, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %219, i8 %196, i64 16, i1 false) #5
  %220 = getelementptr inbounds i8, i8* %219, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %220, i8 %196, i64 16, i1 false) #5
  %221 = getelementptr inbounds i8, i8* %220, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %221, i8 %196, i64 16, i1 false) #5
  %222 = getelementptr inbounds i8, i8* %221, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %222, i8 %196, i64 16, i1 false) #5
  %223 = getelementptr inbounds i8, i8* %222, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %223, i8 %196, i64 16, i1 false) #5
  %224 = getelementptr inbounds i8, i8* %223, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %224, i8 %196, i64 16, i1 false) #5
  %225 = getelementptr inbounds i8, i8* %224, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %225, i8 %196, i64 16, i1 false) #5
  %226 = getelementptr inbounds i8, i8* %225, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %226, i8 %196, i64 16, i1 false) #5
  %227 = getelementptr inbounds i8, i8* %226, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %227, i8 %196, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 16, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 16, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 16, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 16, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 32
  br i1 %14, label %5, label %6
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 16, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 16, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 16, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 16, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %24, i64 %1
  %28 = getelementptr inbounds i8, i8* %3, i64 8
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %27, i64 %1
  %31 = getelementptr inbounds i8, i8* %3, i64 9
  %32 = load i8, i8* %31, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 16, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %30, i64 %1
  %34 = getelementptr inbounds i8, i8* %3, i64 10
  %35 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %35, i64 16, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %33, i64 %1
  %37 = getelementptr inbounds i8, i8* %3, i64 11
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 16, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %36, i64 %1
  %40 = getelementptr inbounds i8, i8* %3, i64 12
  %41 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %41, i64 16, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 13
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 16, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %42, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 14
  %47 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %47, i64 16, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %45, i64 %1
  %49 = getelementptr inbounds i8, i8* %3, i64 15
  %50 = load i8, i8* %49, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 16, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %48, i64 %1
  %52 = getelementptr inbounds i8, i8* %3, i64 16
  %53 = load i8, i8* %52, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %53, i64 16, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %51, i64 %1
  %55 = getelementptr inbounds i8, i8* %3, i64 17
  %56 = load i8, i8* %55, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %56, i64 16, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %54, i64 %1
  %58 = getelementptr inbounds i8, i8* %3, i64 18
  %59 = load i8, i8* %58, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %59, i64 16, i1 false) #5
  %60 = getelementptr inbounds i8, i8* %57, i64 %1
  %61 = getelementptr inbounds i8, i8* %3, i64 19
  %62 = load i8, i8* %61, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %62, i64 16, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %60, i64 %1
  %64 = getelementptr inbounds i8, i8* %3, i64 20
  %65 = load i8, i8* %64, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 %65, i64 16, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %63, i64 %1
  %67 = getelementptr inbounds i8, i8* %3, i64 21
  %68 = load i8, i8* %67, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %68, i64 16, i1 false) #5
  %69 = getelementptr inbounds i8, i8* %66, i64 %1
  %70 = getelementptr inbounds i8, i8* %3, i64 22
  %71 = load i8, i8* %70, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %71, i64 16, i1 false) #5
  %72 = getelementptr inbounds i8, i8* %69, i64 %1
  %73 = getelementptr inbounds i8, i8* %3, i64 23
  %74 = load i8, i8* %73, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %74, i64 16, i1 false) #5
  %75 = getelementptr inbounds i8, i8* %72, i64 %1
  %76 = getelementptr inbounds i8, i8* %3, i64 24
  %77 = load i8, i8* %76, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %77, i64 16, i1 false) #5
  %78 = getelementptr inbounds i8, i8* %75, i64 %1
  %79 = getelementptr inbounds i8, i8* %3, i64 25
  %80 = load i8, i8* %79, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %80, i64 16, i1 false) #5
  %81 = getelementptr inbounds i8, i8* %78, i64 %1
  %82 = getelementptr inbounds i8, i8* %3, i64 26
  %83 = load i8, i8* %82, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %81, i8 %83, i64 16, i1 false) #5
  %84 = getelementptr inbounds i8, i8* %81, i64 %1
  %85 = getelementptr inbounds i8, i8* %3, i64 27
  %86 = load i8, i8* %85, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %86, i64 16, i1 false) #5
  %87 = getelementptr inbounds i8, i8* %84, i64 %1
  %88 = getelementptr inbounds i8, i8* %3, i64 28
  %89 = load i8, i8* %88, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %87, i8 %89, i64 16, i1 false) #5
  %90 = getelementptr inbounds i8, i8* %87, i64 %1
  %91 = getelementptr inbounds i8, i8* %3, i64 29
  %92 = load i8, i8* %91, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %90, i8 %92, i64 16, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %90, i64 %1
  %94 = getelementptr inbounds i8, i8* %3, i64 30
  %95 = load i8, i8* %94, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %95, i64 16, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %93, i64 %1
  %97 = getelementptr inbounds i8, i8* %3, i64 31
  %98 = load i8, i8* %97, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %98, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 32
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 16
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 31
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 16
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  br label %16

16:                                               ; preds = %60, %4
  %17 = phi i64 [ 0, %4 ], [ %62, %60 ]
  %18 = phi i8* [ %0, %4 ], [ %61, %60 ]
  %19 = mul i64 %17, %1
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = add i64 %19, 16
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %17
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %3, i64 %17
  %27 = sub i8 0, %24
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, %9
  %30 = add nuw nsw i32 %29, 256
  %31 = add nuw i64 %17, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = icmp ult i8* %20, %11
  %34 = icmp ugt i8* %22, %2
  %35 = and i1 %33, %34
  %36 = icmp ult i8* %20, %32
  %37 = icmp ult i8* %26, %22
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  br i1 %39, label %64, label %40

40:                                               ; preds = %16
  %41 = insertelement <16 x i32> undef, i32 %30, i32 0
  %42 = shufflevector <16 x i32> %41, <16 x i32> undef, <16 x i32> zeroinitializer
  %43 = insertelement <16 x i32> undef, i32 %25, i32 0
  %44 = shufflevector <16 x i32> %43, <16 x i32> undef, <16 x i32> zeroinitializer
  %45 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !135
  %46 = zext <16 x i8> %45 to <16 x i32>
  %47 = mul nuw nsw <16 x i32> %44, %46
  %48 = load i8, i8* %26, align 1, !alias.scope !138
  %49 = insertelement <16 x i8> undef, i8 %48, i32 0
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> zeroinitializer
  %51 = zext <16 x i8> %50 to <16 x i32>
  %52 = mul nuw nsw <16 x i32> %51, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %53 = add nuw nsw <16 x i32> %42, %47
  %54 = add nuw nsw <16 x i32> %53, %15
  %55 = add nuw nsw <16 x i32> %54, %52
  %56 = lshr <16 x i32> %55, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %57 = trunc <16 x i32> %56 to <16 x i8>
  %58 = bitcast i8* %18 to <16 x i8>*
  store <16 x i8> %57, <16 x i8>* %58, align 1, !alias.scope !140, !noalias !142
  br label %60

59:                                               ; preds = %60
  ret void

60:                                               ; preds = %64, %40
  %61 = getelementptr inbounds i8, i8* %18, i64 %1
  %62 = add nuw nsw i64 %17, 1
  %63 = icmp eq i64 %62, 32
  br i1 %63, label %59, label %16

64:                                               ; preds = %16, %64
  %65 = phi i64 [ %85, %64 ], [ 0, %16 ]
  %66 = getelementptr inbounds i8, i8* %2, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %25
  %70 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %65
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = load i8, i8* %26, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %72
  %76 = sub i8 0, %71
  %77 = zext i8 %76 to i32
  %78 = mul nuw nsw i32 %77, %10
  %79 = add nuw nsw i32 %30, %69
  %80 = add nuw nsw i32 %79, %78
  %81 = add nuw nsw i32 %80, %75
  %82 = lshr i32 %81, 9
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %18, i64 %65
  store i8 %83, i8* %84, align 1
  %85 = add nuw nsw i64 %65, 1
  %86 = icmp eq i64 %85, 16
  br i1 %86, label %60, label %64, !llvm.loop !143
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i8, i8* %2, i64 5
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = getelementptr inbounds i8, i8* %2, i64 7
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = getelementptr inbounds i8, i8* %2, i64 9
  %17 = getelementptr inbounds i8, i8* %2, i64 10
  %18 = getelementptr inbounds i8, i8* %2, i64 11
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = getelementptr inbounds i8, i8* %2, i64 13
  %21 = getelementptr inbounds i8, i8* %2, i64 14
  %22 = getelementptr inbounds i8, i8* %2, i64 15
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i64 [ 0, %4 ], [ %145, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %144, %23 ]
  %26 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = sub i8 0, %27
  %30 = zext i8 %29 to i32
  %31 = mul nuw nsw i32 %30, %7
  %32 = add nuw nsw i32 %31, 128
  %33 = load i8, i8* %2, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, %28
  %36 = add nuw nsw i32 %32, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %25, align 1
  %39 = load i8, i8* %8, align 1
  %40 = zext i8 %39 to i32
  %41 = mul nuw nsw i32 %40, %28
  %42 = add nuw nsw i32 %32, %41
  %43 = lshr i32 %42, 8
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %44, i8* %45, align 1
  %46 = load i8, i8* %9, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %28
  %49 = add nuw nsw i32 %32, %48
  %50 = lshr i32 %49, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %51, i8* %52, align 1
  %53 = load i8, i8* %10, align 1
  %54 = zext i8 %53 to i32
  %55 = mul nuw nsw i32 %54, %28
  %56 = add nuw nsw i32 %32, %55
  %57 = lshr i32 %56, 8
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %58, i8* %59, align 1
  %60 = load i8, i8* %11, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %28
  %63 = add nuw nsw i32 %32, %62
  %64 = lshr i32 %63, 8
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %65, i8* %66, align 1
  %67 = load i8, i8* %12, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %28
  %70 = add nuw nsw i32 %32, %69
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %72, i8* %73, align 1
  %74 = load i8, i8* %13, align 1
  %75 = zext i8 %74 to i32
  %76 = mul nuw nsw i32 %75, %28
  %77 = add nuw nsw i32 %32, %76
  %78 = lshr i32 %77, 8
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %79, i8* %80, align 1
  %81 = load i8, i8* %14, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nuw nsw i32 %82, %28
  %84 = add nuw nsw i32 %32, %83
  %85 = lshr i32 %84, 8
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %86, i8* %87, align 1
  %88 = load i8, i8* %15, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %89, %28
  %91 = add nuw nsw i32 %32, %90
  %92 = lshr i32 %91, 8
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds i8, i8* %25, i64 8
  store i8 %93, i8* %94, align 1
  %95 = load i8, i8* %16, align 1
  %96 = zext i8 %95 to i32
  %97 = mul nuw nsw i32 %96, %28
  %98 = add nuw nsw i32 %32, %97
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds i8, i8* %25, i64 9
  store i8 %100, i8* %101, align 1
  %102 = load i8, i8* %17, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %103, %28
  %105 = add nuw nsw i32 %32, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, i8* %25, i64 10
  store i8 %107, i8* %108, align 1
  %109 = load i8, i8* %18, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, %28
  %112 = add nuw nsw i32 %32, %111
  %113 = lshr i32 %112, 8
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %25, i64 11
  store i8 %114, i8* %115, align 1
  %116 = load i8, i8* %19, align 1
  %117 = zext i8 %116 to i32
  %118 = mul nuw nsw i32 %117, %28
  %119 = add nuw nsw i32 %32, %118
  %120 = lshr i32 %119, 8
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %25, i64 12
  store i8 %121, i8* %122, align 1
  %123 = load i8, i8* %20, align 1
  %124 = zext i8 %123 to i32
  %125 = mul nuw nsw i32 %124, %28
  %126 = add nuw nsw i32 %32, %125
  %127 = lshr i32 %126, 8
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %25, i64 13
  store i8 %128, i8* %129, align 1
  %130 = load i8, i8* %21, align 1
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %28
  %133 = add nuw nsw i32 %32, %132
  %134 = lshr i32 %133, 8
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds i8, i8* %25, i64 14
  store i8 %135, i8* %136, align 1
  %137 = load i8, i8* %22, align 1
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, %28
  %140 = add nuw nsw i32 %32, %139
  %141 = lshr i32 %140, 8
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds i8, i8* %25, i64 15
  store i8 %142, i8* %143, align 1
  %144 = getelementptr inbounds i8, i8* %25, i64 %1
  %145 = add nuw nsw i64 %24, 1
  %146 = icmp eq i64 %145, 32
  br i1 %146, label %147, label %23

147:                                              ; preds = %23
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <16 x i32> undef, i32 %7, i32 0
  %9 = shufflevector <16 x i32> %8, <16 x i32> undef, <16 x i32> zeroinitializer
  %10 = mul nuw nsw <16 x i32> %9, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %11 = add nuw nsw <16 x i32> %10, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %12

12:                                               ; preds = %36, %4
  %13 = phi i64 [ 0, %4 ], [ %38, %36 ]
  %14 = phi i8* [ %0, %4 ], [ %37, %36 ]
  %15 = mul i64 %13, %1
  %16 = getelementptr inbounds i8, i8* %3, i64 %13
  %17 = add nuw i64 %13, 1
  %18 = getelementptr i8, i8* %3, i64 %17
  %19 = add i64 %15, 16
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = getelementptr i8, i8* %0, i64 %15
  %22 = icmp ult i8* %21, %18
  %23 = icmp ult i8* %16, %20
  %24 = and i1 %22, %23
  br i1 %24, label %40, label %25

25:                                               ; preds = %12
  %26 = load i8, i8* %16, align 1, !alias.scope !144
  %27 = insertelement <16 x i8> undef, i8 %26, i32 0
  %28 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> zeroinitializer
  %29 = zext <16 x i8> %28 to <16 x i32>
  %30 = mul nuw nsw <16 x i32> %29, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %31 = add nuw nsw <16 x i32> %11, %30
  %32 = lshr <16 x i32> %31, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %33 = trunc <16 x i32> %32 to <16 x i8>
  %34 = bitcast i8* %14 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %34, align 1, !alias.scope !147, !noalias !144
  br label %36

35:                                               ; preds = %36
  ret void

36:                                               ; preds = %40, %25
  %37 = getelementptr inbounds i8, i8* %14, i64 %1
  %38 = add nuw nsw i64 %13, 1
  %39 = icmp eq i64 %38, 32
  br i1 %39, label %35, label %12

40:                                               ; preds = %12, %40
  %41 = phi i64 [ %71, %40 ], [ 0, %12 ]
  %42 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %41
  %43 = load i8, i8* %42, align 2
  %44 = zext i8 %43 to i32
  %45 = load i8, i8* %16, align 1
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %44
  %48 = sub i8 0, %43
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, %7
  %51 = add nuw nsw i32 %50, 128
  %52 = add nuw nsw i32 %51, %47
  %53 = lshr i32 %52, 8
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %14, i64 %41
  store i8 %54, i8* %55, align 1
  %56 = or i64 %41, 1
  %57 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = load i8, i8* %16, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %59
  %63 = sub i8 0, %58
  %64 = zext i8 %63 to i32
  %65 = mul nuw nsw i32 %64, %7
  %66 = add nuw nsw i32 %65, 128
  %67 = add nuw nsw i32 %66, %62
  %68 = lshr i32 %67, 8
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %14, i64 %56
  store i8 %69, i8* %70, align 1
  %71 = add nuw nsw i64 %41, 2
  %72 = icmp eq i64 %71, 16
  br i1 %72, label %36, label %40, !llvm.loop !149
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi64ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 16, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 16, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 16, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 16, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 16, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 16, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 16, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 16, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 16, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 16, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 16, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 16, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 16, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 16, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 16, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 -128, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 -128, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -128, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 -128, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 -128, i64 16, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 -128, i64 16, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 -128, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 -128, i64 16, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 -128, i64 16, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 -128, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 -128, i64 16, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 -128, i64 16, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 -128, i64 16, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 -128, i64 16, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 -128, i64 16, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 -128, i64 16, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 -128, i64 16, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 -128, i64 16, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 -128, i64 16, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 -128, i64 16, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 -128, i64 16, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 -128, i64 16, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 -128, i64 16, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 -128, i64 16, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 -128, i64 16, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 -128, i64 16, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 -128, i64 16, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 -128, i64 16, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 -128, i64 16, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 -128, i64 16, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 -128, i64 16, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 -128, i64 16, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 -128, i64 16, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %52, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 -128, i64 16, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 -128, i64 16, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 -128, i64 16, i1 false) #5
  %56 = getelementptr inbounds i8, i8* %55, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 -128, i64 16, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %56, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 -128, i64 16, i1 false) #5
  %58 = getelementptr inbounds i8, i8* %57, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 -128, i64 16, i1 false) #5
  %59 = getelementptr inbounds i8, i8* %58, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 -128, i64 16, i1 false) #5
  %60 = getelementptr inbounds i8, i8* %59, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 -128, i64 16, i1 false) #5
  %61 = getelementptr inbounds i8, i8* %60, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 -128, i64 16, i1 false) #5
  %62 = getelementptr inbounds i8, i8* %61, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 -128, i64 16, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %62, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 -128, i64 16, i1 false) #5
  %64 = getelementptr inbounds i8, i8* %63, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 -128, i64 16, i1 false) #5
  %65 = getelementptr inbounds i8, i8* %64, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 -128, i64 16, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %65, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 -128, i64 16, i1 false) #5
  %67 = getelementptr inbounds i8, i8* %66, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 -128, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 16, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 16, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 16, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %19, i64 16, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %19, i64 16, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %19, i64 16, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %19, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %19, i64 16, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %19, i64 16, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %19, i64 16, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %19, i64 16, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %19, i64 16, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %19, i64 16, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %19, i64 16, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %19, i64 16, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %19, i64 16, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %19, i64 16, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %19, i64 16, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %19, i64 16, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %19, i64 16, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %19, i64 16, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %19, i64 16, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %19, i64 16, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %19, i64 16, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %19, i64 16, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %19, i64 16, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %19, i64 16, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %19, i64 16, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %19, i64 16, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %19, i64 16, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %19, i64 16, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %19, i64 16, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %19, i64 16, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %52, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %19, i64 16, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %19, i64 16, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 %19, i64 16, i1 false) #5
  %56 = getelementptr inbounds i8, i8* %55, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 %19, i64 16, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %56, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %19, i64 16, i1 false) #5
  %58 = getelementptr inbounds i8, i8* %57, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 %19, i64 16, i1 false) #5
  %59 = getelementptr inbounds i8, i8* %58, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 %19, i64 16, i1 false) #5
  %60 = getelementptr inbounds i8, i8* %59, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %19, i64 16, i1 false) #5
  %61 = getelementptr inbounds i8, i8* %60, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 %19, i64 16, i1 false) #5
  %62 = getelementptr inbounds i8, i8* %61, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 %19, i64 16, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %62, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 %19, i64 16, i1 false) #5
  %64 = getelementptr inbounds i8, i8* %63, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 %19, i64 16, i1 false) #5
  %65 = getelementptr inbounds i8, i8* %64, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 %19, i64 16, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %65, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %19, i64 16, i1 false) #5
  %67 = getelementptr inbounds i8, i8* %66, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 %19, i64 16, i1 false) #5
  %68 = getelementptr inbounds i8, i8* %67, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 %19, i64 16, i1 false) #5
  %69 = getelementptr inbounds i8, i8* %68, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %19, i64 16, i1 false) #5
  %70 = getelementptr inbounds i8, i8* %69, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %70, i8 %19, i64 16, i1 false) #5
  %71 = getelementptr inbounds i8, i8* %70, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %19, i64 16, i1 false) #5
  %72 = getelementptr inbounds i8, i8* %71, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %19, i64 16, i1 false) #5
  %73 = getelementptr inbounds i8, i8* %72, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %19, i64 16, i1 false) #5
  %74 = getelementptr inbounds i8, i8* %73, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 %19, i64 16, i1 false) #5
  %75 = getelementptr inbounds i8, i8* %74, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %19, i64 16, i1 false) #5
  %76 = getelementptr inbounds i8, i8* %75, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 %19, i64 16, i1 false) #5
  %77 = getelementptr inbounds i8, i8* %76, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 %19, i64 16, i1 false) #5
  %78 = getelementptr inbounds i8, i8* %77, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %19, i64 16, i1 false) #5
  %79 = getelementptr inbounds i8, i8* %78, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 %19, i64 16, i1 false) #5
  %80 = getelementptr inbounds i8, i8* %79, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %80, i8 %19, i64 16, i1 false) #5
  %81 = getelementptr inbounds i8, i8* %80, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %81, i8 %19, i64 16, i1 false) #5
  %82 = getelementptr inbounds i8, i8* %81, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %82, i8 %19, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <4 x i8>*
  %6 = load <4 x i8>, <4 x i8>* %5, align 1
  %7 = zext <4 x i8> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %3, i64 4
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = zext <4 x i8> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 8
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = zext <4 x i8> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 12
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 16
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 20
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 24
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 28
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = zext <4 x i8> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 32
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 36
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 40
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 44
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 48
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 52
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 56
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 60
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = trunc i32 %89 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %90, i64 16, i1 false) #5
  %91 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %90, i64 16, i1 false) #5
  %92 = getelementptr inbounds i8, i8* %91, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %92, i8 %90, i64 16, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %92, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %90, i64 16, i1 false) #5
  %94 = getelementptr inbounds i8, i8* %93, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %90, i64 16, i1 false) #5
  %95 = getelementptr inbounds i8, i8* %94, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %90, i64 16, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %95, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %90, i64 16, i1 false) #5
  %97 = getelementptr inbounds i8, i8* %96, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %90, i64 16, i1 false) #5
  %98 = getelementptr inbounds i8, i8* %97, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 %90, i64 16, i1 false) #5
  %99 = getelementptr inbounds i8, i8* %98, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 %90, i64 16, i1 false) #5
  %100 = getelementptr inbounds i8, i8* %99, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 %90, i64 16, i1 false) #5
  %101 = getelementptr inbounds i8, i8* %100, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %90, i64 16, i1 false) #5
  %102 = getelementptr inbounds i8, i8* %101, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 %90, i64 16, i1 false) #5
  %103 = getelementptr inbounds i8, i8* %102, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 %90, i64 16, i1 false) #5
  %104 = getelementptr inbounds i8, i8* %103, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %90, i64 16, i1 false) #5
  %105 = getelementptr inbounds i8, i8* %104, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 %90, i64 16, i1 false) #5
  %106 = getelementptr inbounds i8, i8* %105, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 %90, i64 16, i1 false) #5
  %107 = getelementptr inbounds i8, i8* %106, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %90, i64 16, i1 false) #5
  %108 = getelementptr inbounds i8, i8* %107, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %108, i8 %90, i64 16, i1 false) #5
  %109 = getelementptr inbounds i8, i8* %108, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 %90, i64 16, i1 false) #5
  %110 = getelementptr inbounds i8, i8* %109, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 %90, i64 16, i1 false) #5
  %111 = getelementptr inbounds i8, i8* %110, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %111, i8 %90, i64 16, i1 false) #5
  %112 = getelementptr inbounds i8, i8* %111, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %112, i8 %90, i64 16, i1 false) #5
  %113 = getelementptr inbounds i8, i8* %112, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %113, i8 %90, i64 16, i1 false) #5
  %114 = getelementptr inbounds i8, i8* %113, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 %90, i64 16, i1 false) #5
  %115 = getelementptr inbounds i8, i8* %114, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %115, i8 %90, i64 16, i1 false) #5
  %116 = getelementptr inbounds i8, i8* %115, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %116, i8 %90, i64 16, i1 false) #5
  %117 = getelementptr inbounds i8, i8* %116, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %117, i8 %90, i64 16, i1 false) #5
  %118 = getelementptr inbounds i8, i8* %117, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %118, i8 %90, i64 16, i1 false) #5
  %119 = getelementptr inbounds i8, i8* %118, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %119, i8 %90, i64 16, i1 false) #5
  %120 = getelementptr inbounds i8, i8* %119, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %120, i8 %90, i64 16, i1 false) #5
  %121 = getelementptr inbounds i8, i8* %120, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 %90, i64 16, i1 false) #5
  %122 = getelementptr inbounds i8, i8* %121, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %122, i8 %90, i64 16, i1 false) #5
  %123 = getelementptr inbounds i8, i8* %122, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %123, i8 %90, i64 16, i1 false) #5
  %124 = getelementptr inbounds i8, i8* %123, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %124, i8 %90, i64 16, i1 false) #5
  %125 = getelementptr inbounds i8, i8* %124, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %125, i8 %90, i64 16, i1 false) #5
  %126 = getelementptr inbounds i8, i8* %125, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %126, i8 %90, i64 16, i1 false) #5
  %127 = getelementptr inbounds i8, i8* %126, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %127, i8 %90, i64 16, i1 false) #5
  %128 = getelementptr inbounds i8, i8* %127, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %128, i8 %90, i64 16, i1 false) #5
  %129 = getelementptr inbounds i8, i8* %128, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %129, i8 %90, i64 16, i1 false) #5
  %130 = getelementptr inbounds i8, i8* %129, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %130, i8 %90, i64 16, i1 false) #5
  %131 = getelementptr inbounds i8, i8* %130, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %131, i8 %90, i64 16, i1 false) #5
  %132 = getelementptr inbounds i8, i8* %131, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %132, i8 %90, i64 16, i1 false) #5
  %133 = getelementptr inbounds i8, i8* %132, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %133, i8 %90, i64 16, i1 false) #5
  %134 = getelementptr inbounds i8, i8* %133, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %134, i8 %90, i64 16, i1 false) #5
  %135 = getelementptr inbounds i8, i8* %134, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 %90, i64 16, i1 false) #5
  %136 = getelementptr inbounds i8, i8* %135, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %136, i8 %90, i64 16, i1 false) #5
  %137 = getelementptr inbounds i8, i8* %136, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %137, i8 %90, i64 16, i1 false) #5
  %138 = getelementptr inbounds i8, i8* %137, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %138, i8 %90, i64 16, i1 false) #5
  %139 = getelementptr inbounds i8, i8* %138, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %139, i8 %90, i64 16, i1 false) #5
  %140 = getelementptr inbounds i8, i8* %139, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %140, i8 %90, i64 16, i1 false) #5
  %141 = getelementptr inbounds i8, i8* %140, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %141, i8 %90, i64 16, i1 false) #5
  %142 = getelementptr inbounds i8, i8* %141, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %142, i8 %90, i64 16, i1 false) #5
  %143 = getelementptr inbounds i8, i8* %142, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %143, i8 %90, i64 16, i1 false) #5
  %144 = getelementptr inbounds i8, i8* %143, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %144, i8 %90, i64 16, i1 false) #5
  %145 = getelementptr inbounds i8, i8* %144, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %145, i8 %90, i64 16, i1 false) #5
  %146 = getelementptr inbounds i8, i8* %145, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %146, i8 %90, i64 16, i1 false) #5
  %147 = getelementptr inbounds i8, i8* %146, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %147, i8 %90, i64 16, i1 false) #5
  %148 = getelementptr inbounds i8, i8* %147, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %148, i8 %90, i64 16, i1 false) #5
  %149 = getelementptr inbounds i8, i8* %148, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %149, i8 %90, i64 16, i1 false) #5
  %150 = getelementptr inbounds i8, i8* %149, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %150, i8 %90, i64 16, i1 false) #5
  %151 = getelementptr inbounds i8, i8* %150, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %151, i8 %90, i64 16, i1 false) #5
  %152 = getelementptr inbounds i8, i8* %151, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %152, i8 %90, i64 16, i1 false) #5
  %153 = getelementptr inbounds i8, i8* %152, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %153, i8 %90, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 40
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = add nuw nsw i32 %19, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = add nuw nsw i32 %23, %26
  %28 = getelementptr inbounds i8, i8* %2, i64 6
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %27, %30
  %32 = getelementptr inbounds i8, i8* %2, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = add nuw nsw i32 %31, %34
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nuw nsw i32 %35, %38
  %40 = getelementptr inbounds i8, i8* %2, i64 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add nuw nsw i32 %39, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 10
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = add nuw nsw i32 %43, %46
  %48 = getelementptr inbounds i8, i8* %2, i64 11
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %47, %50
  %52 = getelementptr inbounds i8, i8* %2, i64 12
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = add nuw nsw i32 %51, %54
  %56 = getelementptr inbounds i8, i8* %2, i64 13
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nuw nsw i32 %55, %58
  %60 = getelementptr inbounds i8, i8* %2, i64 14
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = add nuw nsw i32 %59, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 15
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = add nuw nsw i32 %63, %66
  %68 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %67, i32 0
  %69 = bitcast i8* %3 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = zext <4 x i8> %70 to <4 x i32>
  %72 = add nuw nsw <4 x i32> %68, %71
  %73 = getelementptr inbounds i8, i8* %3, i64 4
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = add nuw nsw <4 x i32> %72, %76
  %78 = getelementptr inbounds i8, i8* %3, i64 8
  %79 = bitcast i8* %78 to <4 x i8>*
  %80 = load <4 x i8>, <4 x i8>* %79, align 1
  %81 = zext <4 x i8> %80 to <4 x i32>
  %82 = add nuw nsw <4 x i32> %77, %81
  %83 = getelementptr inbounds i8, i8* %3, i64 12
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = add nuw nsw <4 x i32> %82, %86
  %88 = getelementptr inbounds i8, i8* %3, i64 16
  %89 = bitcast i8* %88 to <4 x i8>*
  %90 = load <4 x i8>, <4 x i8>* %89, align 1
  %91 = zext <4 x i8> %90 to <4 x i32>
  %92 = add nuw nsw <4 x i32> %87, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 20
  %94 = bitcast i8* %93 to <4 x i8>*
  %95 = load <4 x i8>, <4 x i8>* %94, align 1
  %96 = zext <4 x i8> %95 to <4 x i32>
  %97 = add nuw nsw <4 x i32> %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 24
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = add nuw nsw <4 x i32> %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 28
  %104 = bitcast i8* %103 to <4 x i8>*
  %105 = load <4 x i8>, <4 x i8>* %104, align 1
  %106 = zext <4 x i8> %105 to <4 x i32>
  %107 = add nuw nsw <4 x i32> %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 32
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = add nuw nsw <4 x i32> %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 36
  %114 = bitcast i8* %113 to <4 x i8>*
  %115 = load <4 x i8>, <4 x i8>* %114, align 1
  %116 = zext <4 x i8> %115 to <4 x i32>
  %117 = add nuw nsw <4 x i32> %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 40
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = add nuw nsw <4 x i32> %117, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 44
  %124 = bitcast i8* %123 to <4 x i8>*
  %125 = load <4 x i8>, <4 x i8>* %124, align 1
  %126 = zext <4 x i8> %125 to <4 x i32>
  %127 = add nuw nsw <4 x i32> %122, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 48
  %129 = bitcast i8* %128 to <4 x i8>*
  %130 = load <4 x i8>, <4 x i8>* %129, align 1
  %131 = zext <4 x i8> %130 to <4 x i32>
  %132 = add nuw nsw <4 x i32> %127, %131
  %133 = getelementptr inbounds i8, i8* %3, i64 52
  %134 = bitcast i8* %133 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1
  %136 = zext <4 x i8> %135 to <4 x i32>
  %137 = add nuw nsw <4 x i32> %132, %136
  %138 = getelementptr inbounds i8, i8* %3, i64 56
  %139 = bitcast i8* %138 to <4 x i8>*
  %140 = load <4 x i8>, <4 x i8>* %139, align 1
  %141 = zext <4 x i8> %140 to <4 x i32>
  %142 = add nuw nsw <4 x i32> %137, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 60
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = add nuw nsw <4 x i32> %142, %146
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %149 = add <4 x i32> %147, %148
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %151 = add <4 x i32> %149, %150
  %152 = extractelement <4 x i32> %151, i32 0
  %153 = udiv i32 %152, 80
  %154 = trunc i32 %153 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %154, i64 16, i1 false) #5
  %155 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %155, i8 %154, i64 16, i1 false) #5
  %156 = getelementptr inbounds i8, i8* %155, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %156, i8 %154, i64 16, i1 false) #5
  %157 = getelementptr inbounds i8, i8* %156, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %157, i8 %154, i64 16, i1 false) #5
  %158 = getelementptr inbounds i8, i8* %157, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %158, i8 %154, i64 16, i1 false) #5
  %159 = getelementptr inbounds i8, i8* %158, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %159, i8 %154, i64 16, i1 false) #5
  %160 = getelementptr inbounds i8, i8* %159, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %160, i8 %154, i64 16, i1 false) #5
  %161 = getelementptr inbounds i8, i8* %160, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %161, i8 %154, i64 16, i1 false) #5
  %162 = getelementptr inbounds i8, i8* %161, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %162, i8 %154, i64 16, i1 false) #5
  %163 = getelementptr inbounds i8, i8* %162, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %163, i8 %154, i64 16, i1 false) #5
  %164 = getelementptr inbounds i8, i8* %163, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %164, i8 %154, i64 16, i1 false) #5
  %165 = getelementptr inbounds i8, i8* %164, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %165, i8 %154, i64 16, i1 false) #5
  %166 = getelementptr inbounds i8, i8* %165, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %166, i8 %154, i64 16, i1 false) #5
  %167 = getelementptr inbounds i8, i8* %166, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %167, i8 %154, i64 16, i1 false) #5
  %168 = getelementptr inbounds i8, i8* %167, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %168, i8 %154, i64 16, i1 false) #5
  %169 = getelementptr inbounds i8, i8* %168, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %169, i8 %154, i64 16, i1 false) #5
  %170 = getelementptr inbounds i8, i8* %169, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %170, i8 %154, i64 16, i1 false) #5
  %171 = getelementptr inbounds i8, i8* %170, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %171, i8 %154, i64 16, i1 false) #5
  %172 = getelementptr inbounds i8, i8* %171, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %172, i8 %154, i64 16, i1 false) #5
  %173 = getelementptr inbounds i8, i8* %172, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %173, i8 %154, i64 16, i1 false) #5
  %174 = getelementptr inbounds i8, i8* %173, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %174, i8 %154, i64 16, i1 false) #5
  %175 = getelementptr inbounds i8, i8* %174, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %175, i8 %154, i64 16, i1 false) #5
  %176 = getelementptr inbounds i8, i8* %175, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %176, i8 %154, i64 16, i1 false) #5
  %177 = getelementptr inbounds i8, i8* %176, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %177, i8 %154, i64 16, i1 false) #5
  %178 = getelementptr inbounds i8, i8* %177, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %178, i8 %154, i64 16, i1 false) #5
  %179 = getelementptr inbounds i8, i8* %178, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %179, i8 %154, i64 16, i1 false) #5
  %180 = getelementptr inbounds i8, i8* %179, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %180, i8 %154, i64 16, i1 false) #5
  %181 = getelementptr inbounds i8, i8* %180, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %181, i8 %154, i64 16, i1 false) #5
  %182 = getelementptr inbounds i8, i8* %181, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %182, i8 %154, i64 16, i1 false) #5
  %183 = getelementptr inbounds i8, i8* %182, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %183, i8 %154, i64 16, i1 false) #5
  %184 = getelementptr inbounds i8, i8* %183, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %184, i8 %154, i64 16, i1 false) #5
  %185 = getelementptr inbounds i8, i8* %184, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %185, i8 %154, i64 16, i1 false) #5
  %186 = getelementptr inbounds i8, i8* %185, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %186, i8 %154, i64 16, i1 false) #5
  %187 = getelementptr inbounds i8, i8* %186, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %187, i8 %154, i64 16, i1 false) #5
  %188 = getelementptr inbounds i8, i8* %187, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %188, i8 %154, i64 16, i1 false) #5
  %189 = getelementptr inbounds i8, i8* %188, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %189, i8 %154, i64 16, i1 false) #5
  %190 = getelementptr inbounds i8, i8* %189, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %190, i8 %154, i64 16, i1 false) #5
  %191 = getelementptr inbounds i8, i8* %190, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %191, i8 %154, i64 16, i1 false) #5
  %192 = getelementptr inbounds i8, i8* %191, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %192, i8 %154, i64 16, i1 false) #5
  %193 = getelementptr inbounds i8, i8* %192, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %193, i8 %154, i64 16, i1 false) #5
  %194 = getelementptr inbounds i8, i8* %193, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %194, i8 %154, i64 16, i1 false) #5
  %195 = getelementptr inbounds i8, i8* %194, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %195, i8 %154, i64 16, i1 false) #5
  %196 = getelementptr inbounds i8, i8* %195, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %196, i8 %154, i64 16, i1 false) #5
  %197 = getelementptr inbounds i8, i8* %196, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %197, i8 %154, i64 16, i1 false) #5
  %198 = getelementptr inbounds i8, i8* %197, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %198, i8 %154, i64 16, i1 false) #5
  %199 = getelementptr inbounds i8, i8* %198, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %199, i8 %154, i64 16, i1 false) #5
  %200 = getelementptr inbounds i8, i8* %199, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %200, i8 %154, i64 16, i1 false) #5
  %201 = getelementptr inbounds i8, i8* %200, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %201, i8 %154, i64 16, i1 false) #5
  %202 = getelementptr inbounds i8, i8* %201, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %202, i8 %154, i64 16, i1 false) #5
  %203 = getelementptr inbounds i8, i8* %202, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %203, i8 %154, i64 16, i1 false) #5
  %204 = getelementptr inbounds i8, i8* %203, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %204, i8 %154, i64 16, i1 false) #5
  %205 = getelementptr inbounds i8, i8* %204, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %205, i8 %154, i64 16, i1 false) #5
  %206 = getelementptr inbounds i8, i8* %205, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %206, i8 %154, i64 16, i1 false) #5
  %207 = getelementptr inbounds i8, i8* %206, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %207, i8 %154, i64 16, i1 false) #5
  %208 = getelementptr inbounds i8, i8* %207, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %208, i8 %154, i64 16, i1 false) #5
  %209 = getelementptr inbounds i8, i8* %208, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %209, i8 %154, i64 16, i1 false) #5
  %210 = getelementptr inbounds i8, i8* %209, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %210, i8 %154, i64 16, i1 false) #5
  %211 = getelementptr inbounds i8, i8* %210, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %211, i8 %154, i64 16, i1 false) #5
  %212 = getelementptr inbounds i8, i8* %211, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %212, i8 %154, i64 16, i1 false) #5
  %213 = getelementptr inbounds i8, i8* %212, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %213, i8 %154, i64 16, i1 false) #5
  %214 = getelementptr inbounds i8, i8* %213, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %214, i8 %154, i64 16, i1 false) #5
  %215 = getelementptr inbounds i8, i8* %214, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %215, i8 %154, i64 16, i1 false) #5
  %216 = getelementptr inbounds i8, i8* %215, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %216, i8 %154, i64 16, i1 false) #5
  %217 = getelementptr inbounds i8, i8* %216, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %217, i8 %154, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 16, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 16, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 16, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 16, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 64
  br i1 %14, label %5, label %6
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i64 [ 0, %4 ], [ %40, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %39, %6 ]
  %9 = getelementptr inbounds i8, i8* %3, i64 %7
  %10 = load i8, i8* %9, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 %10, i64 16, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = or i64 %7, 1
  %13 = getelementptr inbounds i8, i8* %3, i64 %12
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 %14, i64 16, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %11, i64 %1
  %16 = or i64 %7, 2
  %17 = getelementptr inbounds i8, i8* %3, i64 %16
  %18 = load i8, i8* %17, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %18, i64 16, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %15, i64 %1
  %20 = or i64 %7, 3
  %21 = getelementptr inbounds i8, i8* %3, i64 %20
  %22 = load i8, i8* %21, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %22, i64 16, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %19, i64 %1
  %24 = or i64 %7, 4
  %25 = getelementptr inbounds i8, i8* %3, i64 %24
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %26, i64 16, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %23, i64 %1
  %28 = or i64 %7, 5
  %29 = getelementptr inbounds i8, i8* %3, i64 %28
  %30 = load i8, i8* %29, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %30, i64 16, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %27, i64 %1
  %32 = or i64 %7, 6
  %33 = getelementptr inbounds i8, i8* %3, i64 %32
  %34 = load i8, i8* %33, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %34, i64 16, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %31, i64 %1
  %36 = or i64 %7, 7
  %37 = getelementptr inbounds i8, i8* %3, i64 %36
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %38, i64 16, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %35, i64 %1
  %40 = add nuw nsw i64 %7, 8
  %41 = icmp eq i64 %40, 64
  br i1 %41, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 64
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 16
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 63
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 16
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  br label %16

16:                                               ; preds = %60, %4
  %17 = phi i64 [ 0, %4 ], [ %62, %60 ]
  %18 = phi i8* [ %0, %4 ], [ %61, %60 ]
  %19 = mul i64 %17, %1
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = add i64 %19, 16
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %17
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %3, i64 %17
  %27 = sub i8 0, %24
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, %9
  %30 = add nuw nsw i32 %29, 256
  %31 = add nuw i64 %17, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = icmp ult i8* %20, %11
  %34 = icmp ugt i8* %22, %2
  %35 = and i1 %33, %34
  %36 = icmp ult i8* %20, %32
  %37 = icmp ult i8* %26, %22
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  br i1 %39, label %64, label %40

40:                                               ; preds = %16
  %41 = insertelement <16 x i32> undef, i32 %30, i32 0
  %42 = shufflevector <16 x i32> %41, <16 x i32> undef, <16 x i32> zeroinitializer
  %43 = insertelement <16 x i32> undef, i32 %25, i32 0
  %44 = shufflevector <16 x i32> %43, <16 x i32> undef, <16 x i32> zeroinitializer
  %45 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !150
  %46 = zext <16 x i8> %45 to <16 x i32>
  %47 = mul nuw nsw <16 x i32> %44, %46
  %48 = load i8, i8* %26, align 1, !alias.scope !153
  %49 = insertelement <16 x i8> undef, i8 %48, i32 0
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> zeroinitializer
  %51 = zext <16 x i8> %50 to <16 x i32>
  %52 = mul nuw nsw <16 x i32> %51, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %53 = add nuw nsw <16 x i32> %42, %47
  %54 = add nuw nsw <16 x i32> %53, %15
  %55 = add nuw nsw <16 x i32> %54, %52
  %56 = lshr <16 x i32> %55, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %57 = trunc <16 x i32> %56 to <16 x i8>
  %58 = bitcast i8* %18 to <16 x i8>*
  store <16 x i8> %57, <16 x i8>* %58, align 1, !alias.scope !155, !noalias !157
  br label %60

59:                                               ; preds = %60
  ret void

60:                                               ; preds = %64, %40
  %61 = getelementptr inbounds i8, i8* %18, i64 %1
  %62 = add nuw nsw i64 %17, 1
  %63 = icmp eq i64 %62, 64
  br i1 %63, label %59, label %16

64:                                               ; preds = %16, %64
  %65 = phi i64 [ %85, %64 ], [ 0, %16 ]
  %66 = getelementptr inbounds i8, i8* %2, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %25
  %70 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %65
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = load i8, i8* %26, align 1
  %74 = zext i8 %73 to i32
  %75 = mul nuw nsw i32 %74, %72
  %76 = sub i8 0, %71
  %77 = zext i8 %76 to i32
  %78 = mul nuw nsw i32 %77, %10
  %79 = add nuw nsw i32 %30, %69
  %80 = add nuw nsw i32 %79, %78
  %81 = add nuw nsw i32 %80, %75
  %82 = lshr i32 %81, 9
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %18, i64 %65
  store i8 %83, i8* %84, align 1
  %85 = add nuw nsw i64 %65, 1
  %86 = icmp eq i64 %85, 16
  br i1 %86, label %60, label %64, !llvm.loop !158
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = getelementptr inbounds i8, i8* %2, i64 5
  %13 = getelementptr inbounds i8, i8* %2, i64 6
  %14 = getelementptr inbounds i8, i8* %2, i64 7
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = getelementptr inbounds i8, i8* %2, i64 9
  %17 = getelementptr inbounds i8, i8* %2, i64 10
  %18 = getelementptr inbounds i8, i8* %2, i64 11
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = getelementptr inbounds i8, i8* %2, i64 13
  %21 = getelementptr inbounds i8, i8* %2, i64 14
  %22 = getelementptr inbounds i8, i8* %2, i64 15
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i64 [ 0, %4 ], [ %145, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %144, %23 ]
  %26 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = sub i8 0, %27
  %30 = zext i8 %29 to i32
  %31 = mul nuw nsw i32 %30, %7
  %32 = add nuw nsw i32 %31, 128
  %33 = load i8, i8* %2, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, %28
  %36 = add nuw nsw i32 %32, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %25, align 1
  %39 = load i8, i8* %8, align 1
  %40 = zext i8 %39 to i32
  %41 = mul nuw nsw i32 %40, %28
  %42 = add nuw nsw i32 %32, %41
  %43 = lshr i32 %42, 8
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %44, i8* %45, align 1
  %46 = load i8, i8* %9, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %28
  %49 = add nuw nsw i32 %32, %48
  %50 = lshr i32 %49, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %51, i8* %52, align 1
  %53 = load i8, i8* %10, align 1
  %54 = zext i8 %53 to i32
  %55 = mul nuw nsw i32 %54, %28
  %56 = add nuw nsw i32 %32, %55
  %57 = lshr i32 %56, 8
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %58, i8* %59, align 1
  %60 = load i8, i8* %11, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %28
  %63 = add nuw nsw i32 %32, %62
  %64 = lshr i32 %63, 8
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %25, i64 4
  store i8 %65, i8* %66, align 1
  %67 = load i8, i8* %12, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %28
  %70 = add nuw nsw i32 %32, %69
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %25, i64 5
  store i8 %72, i8* %73, align 1
  %74 = load i8, i8* %13, align 1
  %75 = zext i8 %74 to i32
  %76 = mul nuw nsw i32 %75, %28
  %77 = add nuw nsw i32 %32, %76
  %78 = lshr i32 %77, 8
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %25, i64 6
  store i8 %79, i8* %80, align 1
  %81 = load i8, i8* %14, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nuw nsw i32 %82, %28
  %84 = add nuw nsw i32 %32, %83
  %85 = lshr i32 %84, 8
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds i8, i8* %25, i64 7
  store i8 %86, i8* %87, align 1
  %88 = load i8, i8* %15, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %89, %28
  %91 = add nuw nsw i32 %32, %90
  %92 = lshr i32 %91, 8
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds i8, i8* %25, i64 8
  store i8 %93, i8* %94, align 1
  %95 = load i8, i8* %16, align 1
  %96 = zext i8 %95 to i32
  %97 = mul nuw nsw i32 %96, %28
  %98 = add nuw nsw i32 %32, %97
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds i8, i8* %25, i64 9
  store i8 %100, i8* %101, align 1
  %102 = load i8, i8* %17, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %103, %28
  %105 = add nuw nsw i32 %32, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, i8* %25, i64 10
  store i8 %107, i8* %108, align 1
  %109 = load i8, i8* %18, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, %28
  %112 = add nuw nsw i32 %32, %111
  %113 = lshr i32 %112, 8
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %25, i64 11
  store i8 %114, i8* %115, align 1
  %116 = load i8, i8* %19, align 1
  %117 = zext i8 %116 to i32
  %118 = mul nuw nsw i32 %117, %28
  %119 = add nuw nsw i32 %32, %118
  %120 = lshr i32 %119, 8
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %25, i64 12
  store i8 %121, i8* %122, align 1
  %123 = load i8, i8* %20, align 1
  %124 = zext i8 %123 to i32
  %125 = mul nuw nsw i32 %124, %28
  %126 = add nuw nsw i32 %32, %125
  %127 = lshr i32 %126, 8
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %25, i64 13
  store i8 %128, i8* %129, align 1
  %130 = load i8, i8* %21, align 1
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %28
  %133 = add nuw nsw i32 %32, %132
  %134 = lshr i32 %133, 8
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds i8, i8* %25, i64 14
  store i8 %135, i8* %136, align 1
  %137 = load i8, i8* %22, align 1
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, %28
  %140 = add nuw nsw i32 %32, %139
  %141 = lshr i32 %140, 8
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds i8, i8* %25, i64 15
  store i8 %142, i8* %143, align 1
  %144 = getelementptr inbounds i8, i8* %25, i64 %1
  %145 = add nuw nsw i64 %24, 1
  %146 = icmp eq i64 %145, 64
  br i1 %146, label %147, label %23

147:                                              ; preds = %23
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <16 x i32> undef, i32 %7, i32 0
  %9 = shufflevector <16 x i32> %8, <16 x i32> undef, <16 x i32> zeroinitializer
  %10 = mul nuw nsw <16 x i32> %9, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172, i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %11 = add nuw nsw <16 x i32> %10, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %12

12:                                               ; preds = %36, %4
  %13 = phi i64 [ 0, %4 ], [ %38, %36 ]
  %14 = phi i8* [ %0, %4 ], [ %37, %36 ]
  %15 = mul i64 %13, %1
  %16 = getelementptr inbounds i8, i8* %3, i64 %13
  %17 = add nuw i64 %13, 1
  %18 = getelementptr i8, i8* %3, i64 %17
  %19 = add i64 %15, 16
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = getelementptr i8, i8* %0, i64 %15
  %22 = icmp ult i8* %21, %18
  %23 = icmp ult i8* %16, %20
  %24 = and i1 %22, %23
  br i1 %24, label %40, label %25

25:                                               ; preds = %12
  %26 = load i8, i8* %16, align 1, !alias.scope !159
  %27 = insertelement <16 x i8> undef, i8 %26, i32 0
  %28 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> zeroinitializer
  %29 = zext <16 x i8> %28 to <16 x i32>
  %30 = mul nuw nsw <16 x i32> %29, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84, i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %31 = add nuw nsw <16 x i32> %11, %30
  %32 = lshr <16 x i32> %31, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %33 = trunc <16 x i32> %32 to <16 x i8>
  %34 = bitcast i8* %14 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %34, align 1, !alias.scope !162, !noalias !159
  br label %36

35:                                               ; preds = %36
  ret void

36:                                               ; preds = %40, %25
  %37 = getelementptr inbounds i8, i8* %14, i64 %1
  %38 = add nuw nsw i64 %13, 1
  %39 = icmp eq i64 %38, 64
  br i1 %39, label %35, label %12

40:                                               ; preds = %12, %40
  %41 = phi i64 [ %71, %40 ], [ 0, %12 ]
  %42 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %41
  %43 = load i8, i8* %42, align 2
  %44 = zext i8 %43 to i32
  %45 = load i8, i8* %16, align 1
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %44
  %48 = sub i8 0, %43
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, %7
  %51 = add nuw nsw i32 %50, 128
  %52 = add nuw nsw i32 %51, %47
  %53 = lshr i32 %52, 8
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %14, i64 %41
  store i8 %54, i8* %55, align 1
  %56 = or i64 %41, 1
  %57 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = load i8, i8* %16, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %59
  %63 = sub i8 0, %58
  %64 = zext i8 %63 to i32
  %65 = mul nuw nsw i32 %64, %7
  %66 = add nuw nsw i32 %65, 128
  %67 = add nuw nsw i32 %66, %62
  %68 = lshr i32 %67, 8
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %14, i64 %56
  store i8 %69, i8* %70, align 1
  %71 = add nuw nsw i64 %41, 2
  %72 = icmp eq i64 %71, 16
  br i1 %72, label %36, label %40, !llvm.loop !164
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi8ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 32, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 32, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 32, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 32, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 32, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 32, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 32, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i32>
  %8 = shufflevector <32 x i32> %7, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <32 x i32> %8, %7
  %10 = shufflevector <32 x i32> %9, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <32 x i32> %9, %10
  %12 = shufflevector <32 x i32> %11, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <32 x i32> %11, %12
  %14 = shufflevector <32 x i32> %13, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <32 x i32> %13, %14
  %16 = shufflevector <32 x i32> %15, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nuw nsw <32 x i32> %15, %16
  %18 = extractelement <32 x i32> %17, i32 0
  %19 = add nuw nsw i32 %18, 16
  %20 = lshr i32 %19, 5
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 32, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 32, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 32, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 32, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <8 x i8>*
  %6 = load <8 x i8>, <8 x i8>* %5, align 1
  %7 = zext <8 x i8> %6 to <8 x i32>
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <8 x i32> %8, %7
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <8 x i32> %9, %10
  %12 = shufflevector <8 x i32> %11, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <8 x i32> %11, %12
  %14 = extractelement <8 x i32> %13, i32 0
  %15 = add nuw nsw i32 %14, 4
  %16 = lshr i32 %15, 3
  %17 = trunc i32 %16 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %17, i64 32, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %17, i64 32, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %17, i64 32, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %17, i64 32, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %17, i64 32, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %17, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %17, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %17, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i16>
  %8 = load i8, i8* %3, align 1
  %9 = zext i8 %8 to i16
  %10 = getelementptr inbounds i8, i8* %3, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i16
  %13 = getelementptr inbounds i8, i8* %3, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i16
  %16 = getelementptr inbounds i8, i8* %3, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = getelementptr inbounds i8, i8* %3, i64 4
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i16
  %22 = getelementptr inbounds i8, i8* %3, i64 5
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i16
  %25 = getelementptr inbounds i8, i8* %3, i64 6
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  %28 = getelementptr inbounds i8, i8* %3, i64 7
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  %31 = shufflevector <32 x i16> %7, <32 x i16> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = add <32 x i16> %31, %7
  %33 = shufflevector <32 x i16> %32, <32 x i16> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = add <32 x i16> %32, %33
  %35 = shufflevector <32 x i16> %34, <32 x i16> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = add <32 x i16> %34, %35
  %37 = shufflevector <32 x i16> %36, <32 x i16> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %38 = add <32 x i16> %36, %37
  %39 = shufflevector <32 x i16> %38, <32 x i16> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = add <32 x i16> %38, %39
  %41 = extractelement <32 x i16> %40, i32 0
  %42 = add i16 %41, %9
  %43 = add i16 %42, %12
  %44 = add i16 %43, %15
  %45 = add i16 %44, %18
  %46 = add i16 %45, %21
  %47 = add i16 %46, %24
  %48 = add i16 %47, %27
  %49 = add i16 %48, %30
  %50 = add nuw nsw i16 %49, 20
  %51 = udiv i16 %50, 40
  %52 = trunc i16 %51 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %52, i64 32, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %52, i64 32, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %52, i64 32, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 %52, i64 32, i1 false) #5
  %56 = getelementptr inbounds i8, i8* %55, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 %52, i64 32, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %56, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %52, i64 32, i1 false) #5
  %58 = getelementptr inbounds i8, i8* %57, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 %52, i64 32, i1 false) #5
  %59 = getelementptr inbounds i8, i8* %58, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 %52, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 32, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 32, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 32, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 32, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 32, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 32, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 32, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 32, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 32, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 32, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 32, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 32, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 32, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 8
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 7
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 32
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %16 = getelementptr inbounds i8, i8* %2, i64 16
  %17 = bitcast i8* %16 to <16 x i8>*
  %18 = mul nuw nsw <16 x i32> %13, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  br label %19

19:                                               ; preds = %78, %4
  %20 = phi i64 [ 0, %4 ], [ %80, %78 ]
  %21 = phi i8* [ %0, %4 ], [ %79, %78 ]
  %22 = mul i64 %20, %1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = add i64 %22, 32
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %20
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, i8* %3, i64 %20
  %30 = sub i8 0, %27
  %31 = zext i8 %30 to i32
  %32 = mul nuw nsw i32 %31, %9
  %33 = add nuw nsw i32 %32, 256
  %34 = add nuw i64 %20, 1
  %35 = getelementptr i8, i8* %3, i64 %34
  %36 = icmp ult i8* %23, %11
  %37 = icmp ugt i8* %25, %2
  %38 = and i1 %36, %37
  %39 = icmp ult i8* %23, %35
  %40 = icmp ult i8* %29, %25
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  br i1 %42, label %82, label %43

43:                                               ; preds = %19
  %44 = insertelement <16 x i32> undef, i32 %28, i32 0
  %45 = shufflevector <16 x i32> %44, <16 x i32> undef, <16 x i32> zeroinitializer
  %46 = insertelement <16 x i32> undef, i32 %33, i32 0
  %47 = shufflevector <16 x i32> %46, <16 x i32> undef, <16 x i32> zeroinitializer
  %48 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !165
  %49 = zext <16 x i8> %48 to <16 x i32>
  %50 = mul nuw nsw <16 x i32> %45, %49
  %51 = load i8, i8* %29, align 1, !alias.scope !168
  %52 = insertelement <16 x i8> undef, i8 %51, i32 0
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> zeroinitializer
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %56 = add nuw nsw <16 x i32> %47, %50
  %57 = add nuw nsw <16 x i32> %56, %15
  %58 = add nuw nsw <16 x i32> %57, %55
  %59 = lshr <16 x i32> %58, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %60 = trunc <16 x i32> %59 to <16 x i8>
  %61 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %61, align 1, !alias.scope !170, !noalias !172
  %62 = load <16 x i8>, <16 x i8>* %17, align 1, !alias.scope !165
  %63 = zext <16 x i8> %62 to <16 x i32>
  %64 = mul nuw nsw <16 x i32> %45, %63
  %65 = load i8, i8* %29, align 1, !alias.scope !168
  %66 = insertelement <16 x i8> undef, i8 %65, i32 0
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> zeroinitializer
  %68 = zext <16 x i8> %67 to <16 x i32>
  %69 = mul nuw nsw <16 x i32> %68, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %70 = add nuw nsw <16 x i32> %47, %64
  %71 = add nuw nsw <16 x i32> %70, %18
  %72 = add nuw nsw <16 x i32> %71, %69
  %73 = lshr <16 x i32> %72, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %74 = trunc <16 x i32> %73 to <16 x i8>
  %75 = getelementptr inbounds i8, i8* %21, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %74, <16 x i8>* %76, align 1, !alias.scope !170, !noalias !172
  br label %78

77:                                               ; preds = %78
  ret void

78:                                               ; preds = %82, %43
  %79 = getelementptr inbounds i8, i8* %21, i64 %1
  %80 = add nuw nsw i64 %20, 1
  %81 = icmp eq i64 %80, 8
  br i1 %81, label %77, label %19

82:                                               ; preds = %19, %82
  %83 = phi i64 [ %103, %82 ], [ 0, %19 ]
  %84 = getelementptr inbounds i8, i8* %2, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, %28
  %88 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %83
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = load i8, i8* %29, align 1
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, %90
  %94 = sub i8 0, %89
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %10
  %97 = add nuw nsw i32 %33, %87
  %98 = add nuw nsw i32 %97, %96
  %99 = add nuw nsw i32 %98, %93
  %100 = lshr i32 %99, 9
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds i8, i8* %21, i64 %83
  store i8 %101, i8* %102, align 1
  %103 = add nuw nsw i64 %83, 1
  %104 = icmp eq i64 %103, 32
  br i1 %104, label %78, label %82, !llvm.loop !173
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 7
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add nuw nsw i32 %7, 128
  %9 = getelementptr i8, i8* %0, i64 32
  %10 = getelementptr i8, i8* %2, i64 32
  %11 = icmp ugt i8* %10, %0
  %12 = icmp ugt i8* %9, %2
  %13 = and i1 %11, %12
  br i1 %13, label %66, label %14

14:                                               ; preds = %4
  %15 = insertelement <16 x i32> undef, i32 %8, i32 0
  %16 = shufflevector <16 x i32> %15, <16 x i32> undef, <16 x i32> zeroinitializer
  %17 = bitcast i8* %2 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 1, !alias.scope !174
  %19 = zext <16 x i8> %18 to <16 x i32>
  %20 = mul nuw nsw <16 x i32> %19, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %21 = add nuw nsw <16 x i32> %16, %20
  %22 = lshr <16 x i32> %21, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %23 = trunc <16 x i32> %22 to <16 x i8>
  %24 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %24, align 1, !alias.scope !177, !noalias !174
  %25 = getelementptr inbounds i8, i8* %2, i64 16
  %26 = bitcast i8* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1, !alias.scope !174
  %28 = zext <16 x i8> %27 to <16 x i32>
  %29 = mul nuw nsw <16 x i32> %28, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %30 = add nuw nsw <16 x i32> %16, %29
  %31 = lshr <16 x i32> %30, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %32 = trunc <16 x i32> %31 to <16 x i8>
  %33 = getelementptr inbounds i8, i8* %0, i64 16
  %34 = bitcast i8* %33 to <16 x i8>*
  store <16 x i8> %32, <16 x i8>* %34, align 1, !alias.scope !177, !noalias !174
  br label %35

35:                                               ; preds = %66, %14
  %36 = getelementptr inbounds i8, i8* %0, i64 %1
  %37 = mul nuw nsw i32 %7, 59
  %38 = add nuw nsw i32 %37, 128
  %39 = add i64 %1, 32
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = getelementptr i8, i8* %2, i64 32
  %42 = icmp ult i8* %36, %41
  %43 = icmp ugt i8* %40, %2
  %44 = and i1 %42, %43
  br i1 %44, label %87, label %45

45:                                               ; preds = %35
  %46 = insertelement <16 x i32> undef, i32 %38, i32 0
  %47 = shufflevector <16 x i32> %46, <16 x i32> undef, <16 x i32> zeroinitializer
  %48 = bitcast i8* %2 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !179
  %50 = zext <16 x i8> %49 to <16 x i32>
  %51 = mul nuw nsw <16 x i32> %50, <i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197>
  %52 = add nuw nsw <16 x i32> %47, %51
  %53 = lshr <16 x i32> %52, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %54 = trunc <16 x i32> %53 to <16 x i8>
  %55 = bitcast i8* %36 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %55, align 1, !alias.scope !182, !noalias !179
  %56 = getelementptr inbounds i8, i8* %2, i64 16
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !179
  %59 = zext <16 x i8> %58 to <16 x i32>
  %60 = mul nuw nsw <16 x i32> %59, <i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197>
  %61 = add nuw nsw <16 x i32> %47, %60
  %62 = lshr <16 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <16 x i32> %62 to <16 x i8>
  %64 = getelementptr inbounds i8, i8* %36, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %65, align 1, !alias.scope !182, !noalias !179
  br label %108

66:                                               ; preds = %4, %66
  %67 = phi i64 [ %85, %66 ], [ 0, %4 ]
  %68 = getelementptr inbounds i8, i8* %2, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = mul nuw nsw i32 %70, 255
  %72 = add nuw nsw i32 %8, %71
  %73 = lshr i32 %72, 8
  %74 = trunc i32 %73 to i8
  %75 = getelementptr inbounds i8, i8* %0, i64 %67
  store i8 %74, i8* %75, align 1
  %76 = or i64 %67, 1
  %77 = getelementptr inbounds i8, i8* %2, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nuw nsw i32 %79, 255
  %81 = add nuw nsw i32 %8, %80
  %82 = lshr i32 %81, 8
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %0, i64 %76
  store i8 %83, i8* %84, align 1
  %85 = add nuw nsw i64 %67, 2
  %86 = icmp eq i64 %85, 32
  br i1 %86, label %35, label %66, !llvm.loop !184

87:                                               ; preds = %35, %87
  %88 = phi i64 [ %106, %87 ], [ 0, %35 ]
  %89 = getelementptr inbounds i8, i8* %2, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = mul nuw nsw i32 %91, 197
  %93 = add nuw nsw i32 %38, %92
  %94 = lshr i32 %93, 8
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds i8, i8* %36, i64 %88
  store i8 %95, i8* %96, align 1
  %97 = or i64 %88, 1
  %98 = getelementptr inbounds i8, i8* %2, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = mul nuw nsw i32 %100, 197
  %102 = add nuw nsw i32 %38, %101
  %103 = lshr i32 %102, 8
  %104 = trunc i32 %103 to i8
  %105 = getelementptr inbounds i8, i8* %36, i64 %97
  store i8 %104, i8* %105, align 1
  %106 = add nuw nsw i64 %88, 2
  %107 = icmp eq i64 %106, 32
  br i1 %107, label %108, label %87, !llvm.loop !185

108:                                              ; preds = %87, %45
  %109 = getelementptr inbounds i8, i8* %36, i64 %1
  %110 = mul nuw nsw i32 %7, 110
  %111 = add nuw nsw i32 %110, 128
  %112 = shl i64 %1, 1
  %113 = add i64 %112, 32
  %114 = getelementptr i8, i8* %0, i64 %113
  %115 = getelementptr i8, i8* %2, i64 32
  %116 = icmp ult i8* %109, %115
  %117 = icmp ugt i8* %114, %2
  %118 = and i1 %116, %117
  br i1 %118, label %140, label %119

119:                                              ; preds = %108
  %120 = insertelement <16 x i32> undef, i32 %111, i32 0
  %121 = shufflevector <16 x i32> %120, <16 x i32> undef, <16 x i32> zeroinitializer
  %122 = bitcast i8* %2 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 1, !alias.scope !186
  %124 = zext <16 x i8> %123 to <16 x i32>
  %125 = mul nuw nsw <16 x i32> %124, <i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146>
  %126 = add nuw nsw <16 x i32> %121, %125
  %127 = lshr <16 x i32> %126, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %128 = trunc <16 x i32> %127 to <16 x i8>
  %129 = bitcast i8* %109 to <16 x i8>*
  store <16 x i8> %128, <16 x i8>* %129, align 1, !alias.scope !189, !noalias !186
  %130 = getelementptr inbounds i8, i8* %2, i64 16
  %131 = bitcast i8* %130 to <16 x i8>*
  %132 = load <16 x i8>, <16 x i8>* %131, align 1, !alias.scope !186
  %133 = zext <16 x i8> %132 to <16 x i32>
  %134 = mul nuw nsw <16 x i32> %133, <i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146>
  %135 = add nuw nsw <16 x i32> %121, %134
  %136 = lshr <16 x i32> %135, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %137 = trunc <16 x i32> %136 to <16 x i8>
  %138 = getelementptr inbounds i8, i8* %109, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %137, <16 x i8>* %139, align 1, !alias.scope !189, !noalias !186
  br label %161

140:                                              ; preds = %108, %140
  %141 = phi i64 [ %159, %140 ], [ 0, %108 ]
  %142 = getelementptr inbounds i8, i8* %2, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = mul nuw nsw i32 %144, 146
  %146 = add nuw nsw i32 %111, %145
  %147 = lshr i32 %146, 8
  %148 = trunc i32 %147 to i8
  %149 = getelementptr inbounds i8, i8* %109, i64 %141
  store i8 %148, i8* %149, align 1
  %150 = or i64 %141, 1
  %151 = getelementptr inbounds i8, i8* %2, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = mul nuw nsw i32 %153, 146
  %155 = add nuw nsw i32 %111, %154
  %156 = lshr i32 %155, 8
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds i8, i8* %109, i64 %150
  store i8 %157, i8* %158, align 1
  %159 = add nuw nsw i64 %141, 2
  %160 = icmp eq i64 %159, 32
  br i1 %160, label %161, label %140, !llvm.loop !191

161:                                              ; preds = %140, %119
  %162 = getelementptr inbounds i8, i8* %109, i64 %1
  %163 = mul nuw nsw i32 %7, 151
  %164 = add nuw nsw i32 %163, 128
  %165 = mul i64 %1, 3
  %166 = add i64 %165, 32
  %167 = getelementptr i8, i8* %0, i64 %166
  %168 = getelementptr i8, i8* %2, i64 32
  %169 = icmp ult i8* %162, %168
  %170 = icmp ugt i8* %167, %2
  %171 = and i1 %169, %170
  br i1 %171, label %193, label %172

172:                                              ; preds = %161
  %173 = insertelement <16 x i32> undef, i32 %164, i32 0
  %174 = shufflevector <16 x i32> %173, <16 x i32> undef, <16 x i32> zeroinitializer
  %175 = bitcast i8* %2 to <16 x i8>*
  %176 = load <16 x i8>, <16 x i8>* %175, align 1, !alias.scope !192
  %177 = zext <16 x i8> %176 to <16 x i32>
  %178 = mul nuw nsw <16 x i32> %177, <i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105>
  %179 = add nuw nsw <16 x i32> %174, %178
  %180 = lshr <16 x i32> %179, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %181 = trunc <16 x i32> %180 to <16 x i8>
  %182 = bitcast i8* %162 to <16 x i8>*
  store <16 x i8> %181, <16 x i8>* %182, align 1, !alias.scope !195, !noalias !192
  %183 = getelementptr inbounds i8, i8* %2, i64 16
  %184 = bitcast i8* %183 to <16 x i8>*
  %185 = load <16 x i8>, <16 x i8>* %184, align 1, !alias.scope !192
  %186 = zext <16 x i8> %185 to <16 x i32>
  %187 = mul nuw nsw <16 x i32> %186, <i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105>
  %188 = add nuw nsw <16 x i32> %174, %187
  %189 = lshr <16 x i32> %188, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %190 = trunc <16 x i32> %189 to <16 x i8>
  %191 = getelementptr inbounds i8, i8* %162, i64 16
  %192 = bitcast i8* %191 to <16 x i8>*
  store <16 x i8> %190, <16 x i8>* %192, align 1, !alias.scope !195, !noalias !192
  br label %214

193:                                              ; preds = %161, %193
  %194 = phi i64 [ %212, %193 ], [ 0, %161 ]
  %195 = getelementptr inbounds i8, i8* %2, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = mul nuw nsw i32 %197, 105
  %199 = add nuw nsw i32 %164, %198
  %200 = lshr i32 %199, 8
  %201 = trunc i32 %200 to i8
  %202 = getelementptr inbounds i8, i8* %162, i64 %194
  store i8 %201, i8* %202, align 1
  %203 = or i64 %194, 1
  %204 = getelementptr inbounds i8, i8* %2, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = mul nuw nsw i32 %206, 105
  %208 = add nuw nsw i32 %164, %207
  %209 = lshr i32 %208, 8
  %210 = trunc i32 %209 to i8
  %211 = getelementptr inbounds i8, i8* %162, i64 %203
  store i8 %210, i8* %211, align 1
  %212 = add nuw nsw i64 %194, 2
  %213 = icmp eq i64 %212, 32
  br i1 %213, label %214, label %193, !llvm.loop !197

214:                                              ; preds = %193, %172
  %215 = getelementptr inbounds i8, i8* %162, i64 %1
  %216 = mul nuw nsw i32 %7, 183
  %217 = add nuw nsw i32 %216, 128
  %218 = shl i64 %1, 2
  %219 = add i64 %218, 32
  %220 = getelementptr i8, i8* %0, i64 %219
  %221 = getelementptr i8, i8* %2, i64 32
  %222 = icmp ult i8* %215, %221
  %223 = icmp ugt i8* %220, %2
  %224 = and i1 %222, %223
  br i1 %224, label %246, label %225

225:                                              ; preds = %214
  %226 = insertelement <16 x i32> undef, i32 %217, i32 0
  %227 = shufflevector <16 x i32> %226, <16 x i32> undef, <16 x i32> zeroinitializer
  %228 = bitcast i8* %2 to <16 x i8>*
  %229 = load <16 x i8>, <16 x i8>* %228, align 1, !alias.scope !198
  %230 = zext <16 x i8> %229 to <16 x i32>
  %231 = mul nuw nsw <16 x i32> %230, <i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73>
  %232 = add nuw nsw <16 x i32> %227, %231
  %233 = lshr <16 x i32> %232, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %234 = trunc <16 x i32> %233 to <16 x i8>
  %235 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> %234, <16 x i8>* %235, align 1, !alias.scope !201, !noalias !198
  %236 = getelementptr inbounds i8, i8* %2, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !198
  %239 = zext <16 x i8> %238 to <16 x i32>
  %240 = mul nuw nsw <16 x i32> %239, <i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73>
  %241 = add nuw nsw <16 x i32> %227, %240
  %242 = lshr <16 x i32> %241, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %243 = trunc <16 x i32> %242 to <16 x i8>
  %244 = getelementptr inbounds i8, i8* %215, i64 16
  %245 = bitcast i8* %244 to <16 x i8>*
  store <16 x i8> %243, <16 x i8>* %245, align 1, !alias.scope !201, !noalias !198
  br label %267

246:                                              ; preds = %214, %246
  %247 = phi i64 [ %265, %246 ], [ 0, %214 ]
  %248 = getelementptr inbounds i8, i8* %2, i64 %247
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i32
  %251 = mul nuw nsw i32 %250, 73
  %252 = add nuw nsw i32 %217, %251
  %253 = lshr i32 %252, 8
  %254 = trunc i32 %253 to i8
  %255 = getelementptr inbounds i8, i8* %215, i64 %247
  store i8 %254, i8* %255, align 1
  %256 = or i64 %247, 1
  %257 = getelementptr inbounds i8, i8* %2, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = mul nuw nsw i32 %259, 73
  %261 = add nuw nsw i32 %217, %260
  %262 = lshr i32 %261, 8
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds i8, i8* %215, i64 %256
  store i8 %263, i8* %264, align 1
  %265 = add nuw nsw i64 %247, 2
  %266 = icmp eq i64 %265, 32
  br i1 %266, label %267, label %246, !llvm.loop !203

267:                                              ; preds = %246, %225
  %268 = getelementptr inbounds i8, i8* %215, i64 %1
  %269 = mul nuw nsw i32 %7, 206
  %270 = add nuw nsw i32 %269, 128
  %271 = mul i64 %1, 5
  %272 = add i64 %271, 32
  %273 = getelementptr i8, i8* %0, i64 %272
  %274 = getelementptr i8, i8* %2, i64 32
  %275 = icmp ult i8* %268, %274
  %276 = icmp ugt i8* %273, %2
  %277 = and i1 %275, %276
  br i1 %277, label %299, label %278

278:                                              ; preds = %267
  %279 = insertelement <16 x i32> undef, i32 %270, i32 0
  %280 = shufflevector <16 x i32> %279, <16 x i32> undef, <16 x i32> zeroinitializer
  %281 = bitcast i8* %2 to <16 x i8>*
  %282 = load <16 x i8>, <16 x i8>* %281, align 1, !alias.scope !204
  %283 = zext <16 x i8> %282 to <16 x i32>
  %284 = mul nuw nsw <16 x i32> %283, <i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50>
  %285 = add nuw nsw <16 x i32> %280, %284
  %286 = lshr <16 x i32> %285, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %287 = trunc <16 x i32> %286 to <16 x i8>
  %288 = bitcast i8* %268 to <16 x i8>*
  store <16 x i8> %287, <16 x i8>* %288, align 1, !alias.scope !207, !noalias !204
  %289 = getelementptr inbounds i8, i8* %2, i64 16
  %290 = bitcast i8* %289 to <16 x i8>*
  %291 = load <16 x i8>, <16 x i8>* %290, align 1, !alias.scope !204
  %292 = zext <16 x i8> %291 to <16 x i32>
  %293 = mul nuw nsw <16 x i32> %292, <i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50>
  %294 = add nuw nsw <16 x i32> %280, %293
  %295 = lshr <16 x i32> %294, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %296 = trunc <16 x i32> %295 to <16 x i8>
  %297 = getelementptr inbounds i8, i8* %268, i64 16
  %298 = bitcast i8* %297 to <16 x i8>*
  store <16 x i8> %296, <16 x i8>* %298, align 1, !alias.scope !207, !noalias !204
  br label %320

299:                                              ; preds = %267, %299
  %300 = phi i64 [ %318, %299 ], [ 0, %267 ]
  %301 = getelementptr inbounds i8, i8* %2, i64 %300
  %302 = load i8, i8* %301, align 1
  %303 = zext i8 %302 to i32
  %304 = mul nuw nsw i32 %303, 50
  %305 = add nuw nsw i32 %270, %304
  %306 = lshr i32 %305, 8
  %307 = trunc i32 %306 to i8
  %308 = getelementptr inbounds i8, i8* %268, i64 %300
  store i8 %307, i8* %308, align 1
  %309 = or i64 %300, 1
  %310 = getelementptr inbounds i8, i8* %2, i64 %309
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i32
  %313 = mul nuw nsw i32 %312, 50
  %314 = add nuw nsw i32 %270, %313
  %315 = lshr i32 %314, 8
  %316 = trunc i32 %315 to i8
  %317 = getelementptr inbounds i8, i8* %268, i64 %309
  store i8 %316, i8* %317, align 1
  %318 = add nuw nsw i64 %300, 2
  %319 = icmp eq i64 %318, 32
  br i1 %319, label %320, label %299, !llvm.loop !209

320:                                              ; preds = %299, %278
  %321 = getelementptr inbounds i8, i8* %268, i64 %1
  %322 = mul nuw nsw i32 %7, 219
  %323 = add nuw nsw i32 %322, 128
  %324 = mul i64 %1, 6
  %325 = add i64 %324, 32
  %326 = getelementptr i8, i8* %0, i64 %325
  %327 = getelementptr i8, i8* %2, i64 32
  %328 = icmp ult i8* %321, %327
  %329 = icmp ugt i8* %326, %2
  %330 = and i1 %328, %329
  br i1 %330, label %352, label %331

331:                                              ; preds = %320
  %332 = insertelement <16 x i32> undef, i32 %323, i32 0
  %333 = shufflevector <16 x i32> %332, <16 x i32> undef, <16 x i32> zeroinitializer
  %334 = bitcast i8* %2 to <16 x i8>*
  %335 = load <16 x i8>, <16 x i8>* %334, align 1, !alias.scope !210
  %336 = zext <16 x i8> %335 to <16 x i32>
  %337 = mul nuw nsw <16 x i32> %336, <i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37>
  %338 = add nuw nsw <16 x i32> %333, %337
  %339 = lshr <16 x i32> %338, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %340 = trunc <16 x i32> %339 to <16 x i8>
  %341 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %340, <16 x i8>* %341, align 1, !alias.scope !213, !noalias !210
  %342 = getelementptr inbounds i8, i8* %2, i64 16
  %343 = bitcast i8* %342 to <16 x i8>*
  %344 = load <16 x i8>, <16 x i8>* %343, align 1, !alias.scope !210
  %345 = zext <16 x i8> %344 to <16 x i32>
  %346 = mul nuw nsw <16 x i32> %345, <i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37>
  %347 = add nuw nsw <16 x i32> %333, %346
  %348 = lshr <16 x i32> %347, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %349 = trunc <16 x i32> %348 to <16 x i8>
  %350 = getelementptr inbounds i8, i8* %321, i64 16
  %351 = bitcast i8* %350 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %351, align 1, !alias.scope !213, !noalias !210
  br label %373

352:                                              ; preds = %320, %352
  %353 = phi i64 [ %371, %352 ], [ 0, %320 ]
  %354 = getelementptr inbounds i8, i8* %2, i64 %353
  %355 = load i8, i8* %354, align 1
  %356 = zext i8 %355 to i32
  %357 = mul nuw nsw i32 %356, 37
  %358 = add nuw nsw i32 %323, %357
  %359 = lshr i32 %358, 8
  %360 = trunc i32 %359 to i8
  %361 = getelementptr inbounds i8, i8* %321, i64 %353
  store i8 %360, i8* %361, align 1
  %362 = or i64 %353, 1
  %363 = getelementptr inbounds i8, i8* %2, i64 %362
  %364 = load i8, i8* %363, align 1
  %365 = zext i8 %364 to i32
  %366 = mul nuw nsw i32 %365, 37
  %367 = add nuw nsw i32 %323, %366
  %368 = lshr i32 %367, 8
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds i8, i8* %321, i64 %362
  store i8 %369, i8* %370, align 1
  %371 = add nuw nsw i64 %353, 2
  %372 = icmp eq i64 %371, 32
  br i1 %372, label %373, label %352, !llvm.loop !215

373:                                              ; preds = %352, %331
  %374 = getelementptr inbounds i8, i8* %321, i64 %1
  %375 = mul nuw nsw i32 %7, 224
  %376 = add nuw nsw i32 %375, 128
  %377 = mul i64 %1, 7
  %378 = add i64 %377, 32
  %379 = getelementptr i8, i8* %0, i64 %378
  %380 = getelementptr i8, i8* %2, i64 32
  %381 = icmp ult i8* %374, %380
  %382 = icmp ugt i8* %379, %2
  %383 = and i1 %381, %382
  br i1 %383, label %405, label %384

384:                                              ; preds = %373
  %385 = insertelement <16 x i32> undef, i32 %376, i32 0
  %386 = shufflevector <16 x i32> %385, <16 x i32> undef, <16 x i32> zeroinitializer
  %387 = bitcast i8* %2 to <16 x i8>*
  %388 = load <16 x i8>, <16 x i8>* %387, align 1, !alias.scope !216
  %389 = zext <16 x i8> %388 to <16 x i32>
  %390 = shl nuw nsw <16 x i32> %389, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %391 = add nuw nsw <16 x i32> %386, %390
  %392 = lshr <16 x i32> %391, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %393 = trunc <16 x i32> %392 to <16 x i8>
  %394 = bitcast i8* %374 to <16 x i8>*
  store <16 x i8> %393, <16 x i8>* %394, align 1, !alias.scope !219, !noalias !216
  %395 = getelementptr inbounds i8, i8* %2, i64 16
  %396 = bitcast i8* %395 to <16 x i8>*
  %397 = load <16 x i8>, <16 x i8>* %396, align 1, !alias.scope !216
  %398 = zext <16 x i8> %397 to <16 x i32>
  %399 = shl nuw nsw <16 x i32> %398, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %400 = add nuw nsw <16 x i32> %386, %399
  %401 = lshr <16 x i32> %400, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %402 = trunc <16 x i32> %401 to <16 x i8>
  %403 = getelementptr inbounds i8, i8* %374, i64 16
  %404 = bitcast i8* %403 to <16 x i8>*
  store <16 x i8> %402, <16 x i8>* %404, align 1, !alias.scope !219, !noalias !216
  br label %426

405:                                              ; preds = %373, %405
  %406 = phi i64 [ %424, %405 ], [ 0, %373 ]
  %407 = getelementptr inbounds i8, i8* %2, i64 %406
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i32
  %410 = shl nuw nsw i32 %409, 5
  %411 = add nuw nsw i32 %376, %410
  %412 = lshr i32 %411, 8
  %413 = trunc i32 %412 to i8
  %414 = getelementptr inbounds i8, i8* %374, i64 %406
  store i8 %413, i8* %414, align 1
  %415 = or i64 %406, 1
  %416 = getelementptr inbounds i8, i8* %2, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = zext i8 %417 to i32
  %419 = shl nuw nsw i32 %418, 5
  %420 = add nuw nsw i32 %376, %419
  %421 = lshr i32 %420, 8
  %422 = trunc i32 %421 to i8
  %423 = getelementptr inbounds i8, i8* %374, i64 %415
  store i8 %422, i8* %423, align 1
  %424 = add nuw nsw i64 %406, 2
  %425 = icmp eq i64 %424, 32
  br i1 %425, label %426, label %405, !llvm.loop !221

426:                                              ; preds = %405, %384
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr i8, i8* %0, i64 32
  %9 = getelementptr i8, i8* %3, i64 1
  %10 = icmp ugt i8* %9, %0
  %11 = icmp ugt i8* %8, %3
  %12 = and i1 %10, %11
  br i1 %12, label %74, label %13

13:                                               ; preds = %4
  %14 = insertelement <16 x i32> undef, i32 %7, i32 0
  %15 = shufflevector <16 x i32> %14, <16 x i32> undef, <16 x i32> zeroinitializer
  %16 = load i8, i8* %3, align 1, !alias.scope !222
  %17 = insertelement <16 x i8> undef, i8 %16, i32 0
  %18 = shufflevector <16 x i8> %17, <16 x i8> undef, <16 x i32> zeroinitializer
  %19 = zext <16 x i8> %18 to <16 x i32>
  %20 = mul nuw nsw <16 x i32> %19, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %21 = mul nuw nsw <16 x i32> %15, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %22 = add nuw nsw <16 x i32> %21, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %23 = add nuw nsw <16 x i32> %22, %20
  %24 = lshr <16 x i32> %23, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %25 = trunc <16 x i32> %24 to <16 x i8>
  %26 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %25, <16 x i8>* %26, align 1, !alias.scope !225, !noalias !222
  %27 = load i8, i8* %3, align 1, !alias.scope !222
  %28 = insertelement <16 x i8> undef, i8 %27, i32 0
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <16 x i32> zeroinitializer
  %30 = zext <16 x i8> %29 to <16 x i32>
  %31 = mul nuw nsw <16 x i32> %30, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %32 = mul nuw nsw <16 x i32> %15, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %33 = add nuw nsw <16 x i32> %32, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %34 = add nuw nsw <16 x i32> %33, %31
  %35 = lshr <16 x i32> %34, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %36 = trunc <16 x i32> %35 to <16 x i8>
  %37 = getelementptr inbounds i8, i8* %0, i64 16
  %38 = bitcast i8* %37 to <16 x i8>*
  store <16 x i8> %36, <16 x i8>* %38, align 1, !alias.scope !225, !noalias !222
  br label %39

39:                                               ; preds = %74, %13
  %40 = getelementptr inbounds i8, i8* %0, i64 %1
  %41 = getelementptr inbounds i8, i8* %3, i64 1
  %42 = add i64 %1, 32
  %43 = getelementptr i8, i8* %0, i64 %42
  %44 = getelementptr i8, i8* %3, i64 2
  %45 = icmp ult i8* %40, %44
  %46 = icmp ult i8* %41, %43
  %47 = and i1 %45, %46
  br i1 %47, label %107, label %48

48:                                               ; preds = %39
  %49 = insertelement <16 x i32> undef, i32 %7, i32 0
  %50 = shufflevector <16 x i32> %49, <16 x i32> undef, <16 x i32> zeroinitializer
  %51 = load i8, i8* %41, align 1, !alias.scope !227
  %52 = insertelement <16 x i8> undef, i8 %51, i32 0
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> zeroinitializer
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %56 = mul nuw nsw <16 x i32> %50, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %57 = add nuw nsw <16 x i32> %56, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %58 = add nuw nsw <16 x i32> %57, %55
  %59 = lshr <16 x i32> %58, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %60 = trunc <16 x i32> %59 to <16 x i8>
  %61 = bitcast i8* %40 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %61, align 1, !alias.scope !230, !noalias !227
  %62 = load i8, i8* %41, align 1, !alias.scope !227
  %63 = insertelement <16 x i8> undef, i8 %62, i32 0
  %64 = shufflevector <16 x i8> %63, <16 x i8> undef, <16 x i32> zeroinitializer
  %65 = zext <16 x i8> %64 to <16 x i32>
  %66 = mul nuw nsw <16 x i32> %65, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %67 = mul nuw nsw <16 x i32> %50, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %68 = add nuw nsw <16 x i32> %67, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %69 = add nuw nsw <16 x i32> %68, %66
  %70 = lshr <16 x i32> %69, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %71 = trunc <16 x i32> %70 to <16 x i8>
  %72 = getelementptr inbounds i8, i8* %40, i64 16
  %73 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %73, align 1, !alias.scope !230, !noalias !227
  br label %140

74:                                               ; preds = %4, %74
  %75 = phi i64 [ %105, %74 ], [ 0, %4 ]
  %76 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %75
  %77 = load i8, i8* %76, align 2
  %78 = zext i8 %77 to i32
  %79 = load i8, i8* %3, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nuw nsw i32 %80, %78
  %82 = sub i8 0, %77
  %83 = zext i8 %82 to i32
  %84 = mul nuw nsw i32 %83, %7
  %85 = add nuw nsw i32 %84, 128
  %86 = add nuw nsw i32 %85, %81
  %87 = lshr i32 %86, 8
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds i8, i8* %0, i64 %75
  store i8 %88, i8* %89, align 1
  %90 = or i64 %75, 1
  %91 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = load i8, i8* %3, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %93
  %97 = sub i8 0, %92
  %98 = zext i8 %97 to i32
  %99 = mul nuw nsw i32 %98, %7
  %100 = add nuw nsw i32 %99, 128
  %101 = add nuw nsw i32 %100, %96
  %102 = lshr i32 %101, 8
  %103 = trunc i32 %102 to i8
  %104 = getelementptr inbounds i8, i8* %0, i64 %90
  store i8 %103, i8* %104, align 1
  %105 = add nuw nsw i64 %75, 2
  %106 = icmp eq i64 %105, 32
  br i1 %106, label %39, label %74, !llvm.loop !232

107:                                              ; preds = %39, %107
  %108 = phi i64 [ %138, %107 ], [ 0, %39 ]
  %109 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %108
  %110 = load i8, i8* %109, align 2
  %111 = zext i8 %110 to i32
  %112 = load i8, i8* %41, align 1
  %113 = zext i8 %112 to i32
  %114 = mul nuw nsw i32 %113, %111
  %115 = sub i8 0, %110
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %116, %7
  %118 = add nuw nsw i32 %117, 128
  %119 = add nuw nsw i32 %118, %114
  %120 = lshr i32 %119, 8
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %40, i64 %108
  store i8 %121, i8* %122, align 1
  %123 = or i64 %108, 1
  %124 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = load i8, i8* %41, align 1
  %128 = zext i8 %127 to i32
  %129 = mul nuw nsw i32 %128, %126
  %130 = sub i8 0, %125
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %7
  %133 = add nuw nsw i32 %132, 128
  %134 = add nuw nsw i32 %133, %129
  %135 = lshr i32 %134, 8
  %136 = trunc i32 %135 to i8
  %137 = getelementptr inbounds i8, i8* %40, i64 %123
  store i8 %136, i8* %137, align 1
  %138 = add nuw nsw i64 %108, 2
  %139 = icmp eq i64 %138, 32
  br i1 %139, label %140, label %107, !llvm.loop !233

140:                                              ; preds = %107, %48
  %141 = getelementptr inbounds i8, i8* %40, i64 %1
  %142 = getelementptr inbounds i8, i8* %3, i64 2
  %143 = shl i64 %1, 1
  %144 = add i64 %143, 32
  %145 = getelementptr i8, i8* %0, i64 %144
  %146 = getelementptr i8, i8* %3, i64 3
  %147 = icmp ult i8* %141, %146
  %148 = icmp ult i8* %142, %145
  %149 = and i1 %147, %148
  br i1 %149, label %176, label %150

150:                                              ; preds = %140
  %151 = insertelement <16 x i32> undef, i32 %7, i32 0
  %152 = shufflevector <16 x i32> %151, <16 x i32> undef, <16 x i32> zeroinitializer
  %153 = load i8, i8* %142, align 1, !alias.scope !234
  %154 = insertelement <16 x i8> undef, i8 %153, i32 0
  %155 = shufflevector <16 x i8> %154, <16 x i8> undef, <16 x i32> zeroinitializer
  %156 = zext <16 x i8> %155 to <16 x i32>
  %157 = mul nuw nsw <16 x i32> %156, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %158 = mul nuw nsw <16 x i32> %152, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %159 = add nuw nsw <16 x i32> %158, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %160 = add nuw nsw <16 x i32> %159, %157
  %161 = lshr <16 x i32> %160, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %162 = trunc <16 x i32> %161 to <16 x i8>
  %163 = bitcast i8* %141 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %163, align 1, !alias.scope !237, !noalias !234
  %164 = load i8, i8* %142, align 1, !alias.scope !234
  %165 = insertelement <16 x i8> undef, i8 %164, i32 0
  %166 = shufflevector <16 x i8> %165, <16 x i8> undef, <16 x i32> zeroinitializer
  %167 = zext <16 x i8> %166 to <16 x i32>
  %168 = mul nuw nsw <16 x i32> %167, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %169 = mul nuw nsw <16 x i32> %152, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %170 = add nuw nsw <16 x i32> %169, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %171 = add nuw nsw <16 x i32> %170, %168
  %172 = lshr <16 x i32> %171, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %173 = trunc <16 x i32> %172 to <16 x i8>
  %174 = getelementptr inbounds i8, i8* %141, i64 16
  %175 = bitcast i8* %174 to <16 x i8>*
  store <16 x i8> %173, <16 x i8>* %175, align 1, !alias.scope !237, !noalias !234
  br label %209

176:                                              ; preds = %140, %176
  %177 = phi i64 [ %207, %176 ], [ 0, %140 ]
  %178 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %177
  %179 = load i8, i8* %178, align 2
  %180 = zext i8 %179 to i32
  %181 = load i8, i8* %142, align 1
  %182 = zext i8 %181 to i32
  %183 = mul nuw nsw i32 %182, %180
  %184 = sub i8 0, %179
  %185 = zext i8 %184 to i32
  %186 = mul nuw nsw i32 %185, %7
  %187 = add nuw nsw i32 %186, 128
  %188 = add nuw nsw i32 %187, %183
  %189 = lshr i32 %188, 8
  %190 = trunc i32 %189 to i8
  %191 = getelementptr inbounds i8, i8* %141, i64 %177
  store i8 %190, i8* %191, align 1
  %192 = or i64 %177, 1
  %193 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = load i8, i8* %142, align 1
  %197 = zext i8 %196 to i32
  %198 = mul nuw nsw i32 %197, %195
  %199 = sub i8 0, %194
  %200 = zext i8 %199 to i32
  %201 = mul nuw nsw i32 %200, %7
  %202 = add nuw nsw i32 %201, 128
  %203 = add nuw nsw i32 %202, %198
  %204 = lshr i32 %203, 8
  %205 = trunc i32 %204 to i8
  %206 = getelementptr inbounds i8, i8* %141, i64 %192
  store i8 %205, i8* %206, align 1
  %207 = add nuw nsw i64 %177, 2
  %208 = icmp eq i64 %207, 32
  br i1 %208, label %209, label %176, !llvm.loop !239

209:                                              ; preds = %176, %150
  %210 = getelementptr inbounds i8, i8* %141, i64 %1
  %211 = getelementptr inbounds i8, i8* %3, i64 3
  %212 = mul i64 %1, 3
  %213 = add i64 %212, 32
  %214 = getelementptr i8, i8* %0, i64 %213
  %215 = getelementptr i8, i8* %3, i64 4
  %216 = icmp ult i8* %210, %215
  %217 = icmp ult i8* %211, %214
  %218 = and i1 %216, %217
  br i1 %218, label %245, label %219

219:                                              ; preds = %209
  %220 = insertelement <16 x i32> undef, i32 %7, i32 0
  %221 = shufflevector <16 x i32> %220, <16 x i32> undef, <16 x i32> zeroinitializer
  %222 = load i8, i8* %211, align 1, !alias.scope !240
  %223 = insertelement <16 x i8> undef, i8 %222, i32 0
  %224 = shufflevector <16 x i8> %223, <16 x i8> undef, <16 x i32> zeroinitializer
  %225 = zext <16 x i8> %224 to <16 x i32>
  %226 = mul nuw nsw <16 x i32> %225, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %227 = mul nuw nsw <16 x i32> %221, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %228 = add nuw nsw <16 x i32> %227, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %229 = add nuw nsw <16 x i32> %228, %226
  %230 = lshr <16 x i32> %229, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %231 = trunc <16 x i32> %230 to <16 x i8>
  %232 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %232, align 1, !alias.scope !243, !noalias !240
  %233 = load i8, i8* %211, align 1, !alias.scope !240
  %234 = insertelement <16 x i8> undef, i8 %233, i32 0
  %235 = shufflevector <16 x i8> %234, <16 x i8> undef, <16 x i32> zeroinitializer
  %236 = zext <16 x i8> %235 to <16 x i32>
  %237 = mul nuw nsw <16 x i32> %236, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %238 = mul nuw nsw <16 x i32> %221, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %239 = add nuw nsw <16 x i32> %238, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %240 = add nuw nsw <16 x i32> %239, %237
  %241 = lshr <16 x i32> %240, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %242 = trunc <16 x i32> %241 to <16 x i8>
  %243 = getelementptr inbounds i8, i8* %210, i64 16
  %244 = bitcast i8* %243 to <16 x i8>*
  store <16 x i8> %242, <16 x i8>* %244, align 1, !alias.scope !243, !noalias !240
  br label %278

245:                                              ; preds = %209, %245
  %246 = phi i64 [ %276, %245 ], [ 0, %209 ]
  %247 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %246
  %248 = load i8, i8* %247, align 2
  %249 = zext i8 %248 to i32
  %250 = load i8, i8* %211, align 1
  %251 = zext i8 %250 to i32
  %252 = mul nuw nsw i32 %251, %249
  %253 = sub i8 0, %248
  %254 = zext i8 %253 to i32
  %255 = mul nuw nsw i32 %254, %7
  %256 = add nuw nsw i32 %255, 128
  %257 = add nuw nsw i32 %256, %252
  %258 = lshr i32 %257, 8
  %259 = trunc i32 %258 to i8
  %260 = getelementptr inbounds i8, i8* %210, i64 %246
  store i8 %259, i8* %260, align 1
  %261 = or i64 %246, 1
  %262 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %261
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = load i8, i8* %211, align 1
  %266 = zext i8 %265 to i32
  %267 = mul nuw nsw i32 %266, %264
  %268 = sub i8 0, %263
  %269 = zext i8 %268 to i32
  %270 = mul nuw nsw i32 %269, %7
  %271 = add nuw nsw i32 %270, 128
  %272 = add nuw nsw i32 %271, %267
  %273 = lshr i32 %272, 8
  %274 = trunc i32 %273 to i8
  %275 = getelementptr inbounds i8, i8* %210, i64 %261
  store i8 %274, i8* %275, align 1
  %276 = add nuw nsw i64 %246, 2
  %277 = icmp eq i64 %276, 32
  br i1 %277, label %278, label %245, !llvm.loop !245

278:                                              ; preds = %245, %219
  %279 = getelementptr inbounds i8, i8* %210, i64 %1
  %280 = getelementptr inbounds i8, i8* %3, i64 4
  %281 = shl i64 %1, 2
  %282 = add i64 %281, 32
  %283 = getelementptr i8, i8* %0, i64 %282
  %284 = getelementptr i8, i8* %3, i64 5
  %285 = icmp ult i8* %279, %284
  %286 = icmp ult i8* %280, %283
  %287 = and i1 %285, %286
  br i1 %287, label %314, label %288

288:                                              ; preds = %278
  %289 = insertelement <16 x i32> undef, i32 %7, i32 0
  %290 = shufflevector <16 x i32> %289, <16 x i32> undef, <16 x i32> zeroinitializer
  %291 = load i8, i8* %280, align 1, !alias.scope !246
  %292 = insertelement <16 x i8> undef, i8 %291, i32 0
  %293 = shufflevector <16 x i8> %292, <16 x i8> undef, <16 x i32> zeroinitializer
  %294 = zext <16 x i8> %293 to <16 x i32>
  %295 = mul nuw nsw <16 x i32> %294, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %296 = mul nuw nsw <16 x i32> %290, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %297 = add nuw nsw <16 x i32> %296, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %298 = add nuw nsw <16 x i32> %297, %295
  %299 = lshr <16 x i32> %298, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %300 = trunc <16 x i32> %299 to <16 x i8>
  %301 = bitcast i8* %279 to <16 x i8>*
  store <16 x i8> %300, <16 x i8>* %301, align 1, !alias.scope !249, !noalias !246
  %302 = load i8, i8* %280, align 1, !alias.scope !246
  %303 = insertelement <16 x i8> undef, i8 %302, i32 0
  %304 = shufflevector <16 x i8> %303, <16 x i8> undef, <16 x i32> zeroinitializer
  %305 = zext <16 x i8> %304 to <16 x i32>
  %306 = mul nuw nsw <16 x i32> %305, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %307 = mul nuw nsw <16 x i32> %290, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %308 = add nuw nsw <16 x i32> %307, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %309 = add nuw nsw <16 x i32> %308, %306
  %310 = lshr <16 x i32> %309, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %311 = trunc <16 x i32> %310 to <16 x i8>
  %312 = getelementptr inbounds i8, i8* %279, i64 16
  %313 = bitcast i8* %312 to <16 x i8>*
  store <16 x i8> %311, <16 x i8>* %313, align 1, !alias.scope !249, !noalias !246
  br label %347

314:                                              ; preds = %278, %314
  %315 = phi i64 [ %345, %314 ], [ 0, %278 ]
  %316 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %315
  %317 = load i8, i8* %316, align 2
  %318 = zext i8 %317 to i32
  %319 = load i8, i8* %280, align 1
  %320 = zext i8 %319 to i32
  %321 = mul nuw nsw i32 %320, %318
  %322 = sub i8 0, %317
  %323 = zext i8 %322 to i32
  %324 = mul nuw nsw i32 %323, %7
  %325 = add nuw nsw i32 %324, 128
  %326 = add nuw nsw i32 %325, %321
  %327 = lshr i32 %326, 8
  %328 = trunc i32 %327 to i8
  %329 = getelementptr inbounds i8, i8* %279, i64 %315
  store i8 %328, i8* %329, align 1
  %330 = or i64 %315, 1
  %331 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %330
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i32
  %334 = load i8, i8* %280, align 1
  %335 = zext i8 %334 to i32
  %336 = mul nuw nsw i32 %335, %333
  %337 = sub i8 0, %332
  %338 = zext i8 %337 to i32
  %339 = mul nuw nsw i32 %338, %7
  %340 = add nuw nsw i32 %339, 128
  %341 = add nuw nsw i32 %340, %336
  %342 = lshr i32 %341, 8
  %343 = trunc i32 %342 to i8
  %344 = getelementptr inbounds i8, i8* %279, i64 %330
  store i8 %343, i8* %344, align 1
  %345 = add nuw nsw i64 %315, 2
  %346 = icmp eq i64 %345, 32
  br i1 %346, label %347, label %314, !llvm.loop !251

347:                                              ; preds = %314, %288
  %348 = getelementptr inbounds i8, i8* %279, i64 %1
  %349 = getelementptr inbounds i8, i8* %3, i64 5
  %350 = mul i64 %1, 5
  %351 = add i64 %350, 32
  %352 = getelementptr i8, i8* %0, i64 %351
  %353 = getelementptr i8, i8* %3, i64 6
  %354 = icmp ult i8* %348, %353
  %355 = icmp ult i8* %349, %352
  %356 = and i1 %354, %355
  br i1 %356, label %383, label %357

357:                                              ; preds = %347
  %358 = insertelement <16 x i32> undef, i32 %7, i32 0
  %359 = shufflevector <16 x i32> %358, <16 x i32> undef, <16 x i32> zeroinitializer
  %360 = load i8, i8* %349, align 1, !alias.scope !252
  %361 = insertelement <16 x i8> undef, i8 %360, i32 0
  %362 = shufflevector <16 x i8> %361, <16 x i8> undef, <16 x i32> zeroinitializer
  %363 = zext <16 x i8> %362 to <16 x i32>
  %364 = mul nuw nsw <16 x i32> %363, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %365 = mul nuw nsw <16 x i32> %359, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %366 = add nuw nsw <16 x i32> %365, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %367 = add nuw nsw <16 x i32> %366, %364
  %368 = lshr <16 x i32> %367, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %369 = trunc <16 x i32> %368 to <16 x i8>
  %370 = bitcast i8* %348 to <16 x i8>*
  store <16 x i8> %369, <16 x i8>* %370, align 1, !alias.scope !255, !noalias !252
  %371 = load i8, i8* %349, align 1, !alias.scope !252
  %372 = insertelement <16 x i8> undef, i8 %371, i32 0
  %373 = shufflevector <16 x i8> %372, <16 x i8> undef, <16 x i32> zeroinitializer
  %374 = zext <16 x i8> %373 to <16 x i32>
  %375 = mul nuw nsw <16 x i32> %374, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %376 = mul nuw nsw <16 x i32> %359, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %377 = add nuw nsw <16 x i32> %376, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %378 = add nuw nsw <16 x i32> %377, %375
  %379 = lshr <16 x i32> %378, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %380 = trunc <16 x i32> %379 to <16 x i8>
  %381 = getelementptr inbounds i8, i8* %348, i64 16
  %382 = bitcast i8* %381 to <16 x i8>*
  store <16 x i8> %380, <16 x i8>* %382, align 1, !alias.scope !255, !noalias !252
  br label %416

383:                                              ; preds = %347, %383
  %384 = phi i64 [ %414, %383 ], [ 0, %347 ]
  %385 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %384
  %386 = load i8, i8* %385, align 2
  %387 = zext i8 %386 to i32
  %388 = load i8, i8* %349, align 1
  %389 = zext i8 %388 to i32
  %390 = mul nuw nsw i32 %389, %387
  %391 = sub i8 0, %386
  %392 = zext i8 %391 to i32
  %393 = mul nuw nsw i32 %392, %7
  %394 = add nuw nsw i32 %393, 128
  %395 = add nuw nsw i32 %394, %390
  %396 = lshr i32 %395, 8
  %397 = trunc i32 %396 to i8
  %398 = getelementptr inbounds i8, i8* %348, i64 %384
  store i8 %397, i8* %398, align 1
  %399 = or i64 %384, 1
  %400 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %399
  %401 = load i8, i8* %400, align 1
  %402 = zext i8 %401 to i32
  %403 = load i8, i8* %349, align 1
  %404 = zext i8 %403 to i32
  %405 = mul nuw nsw i32 %404, %402
  %406 = sub i8 0, %401
  %407 = zext i8 %406 to i32
  %408 = mul nuw nsw i32 %407, %7
  %409 = add nuw nsw i32 %408, 128
  %410 = add nuw nsw i32 %409, %405
  %411 = lshr i32 %410, 8
  %412 = trunc i32 %411 to i8
  %413 = getelementptr inbounds i8, i8* %348, i64 %399
  store i8 %412, i8* %413, align 1
  %414 = add nuw nsw i64 %384, 2
  %415 = icmp eq i64 %414, 32
  br i1 %415, label %416, label %383, !llvm.loop !257

416:                                              ; preds = %383, %357
  %417 = getelementptr inbounds i8, i8* %348, i64 %1
  %418 = getelementptr inbounds i8, i8* %3, i64 6
  %419 = mul i64 %1, 6
  %420 = add i64 %419, 32
  %421 = getelementptr i8, i8* %0, i64 %420
  %422 = getelementptr i8, i8* %3, i64 7
  %423 = icmp ult i8* %417, %422
  %424 = icmp ult i8* %418, %421
  %425 = and i1 %423, %424
  br i1 %425, label %452, label %426

426:                                              ; preds = %416
  %427 = insertelement <16 x i32> undef, i32 %7, i32 0
  %428 = shufflevector <16 x i32> %427, <16 x i32> undef, <16 x i32> zeroinitializer
  %429 = load i8, i8* %418, align 1, !alias.scope !258
  %430 = insertelement <16 x i8> undef, i8 %429, i32 0
  %431 = shufflevector <16 x i8> %430, <16 x i8> undef, <16 x i32> zeroinitializer
  %432 = zext <16 x i8> %431 to <16 x i32>
  %433 = mul nuw nsw <16 x i32> %432, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %434 = mul nuw nsw <16 x i32> %428, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %435 = add nuw nsw <16 x i32> %434, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %436 = add nuw nsw <16 x i32> %435, %433
  %437 = lshr <16 x i32> %436, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %438 = trunc <16 x i32> %437 to <16 x i8>
  %439 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %438, <16 x i8>* %439, align 1, !alias.scope !261, !noalias !258
  %440 = load i8, i8* %418, align 1, !alias.scope !258
  %441 = insertelement <16 x i8> undef, i8 %440, i32 0
  %442 = shufflevector <16 x i8> %441, <16 x i8> undef, <16 x i32> zeroinitializer
  %443 = zext <16 x i8> %442 to <16 x i32>
  %444 = mul nuw nsw <16 x i32> %443, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %445 = mul nuw nsw <16 x i32> %428, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %446 = add nuw nsw <16 x i32> %445, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %447 = add nuw nsw <16 x i32> %446, %444
  %448 = lshr <16 x i32> %447, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %449 = trunc <16 x i32> %448 to <16 x i8>
  %450 = getelementptr inbounds i8, i8* %417, i64 16
  %451 = bitcast i8* %450 to <16 x i8>*
  store <16 x i8> %449, <16 x i8>* %451, align 1, !alias.scope !261, !noalias !258
  br label %485

452:                                              ; preds = %416, %452
  %453 = phi i64 [ %483, %452 ], [ 0, %416 ]
  %454 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %453
  %455 = load i8, i8* %454, align 2
  %456 = zext i8 %455 to i32
  %457 = load i8, i8* %418, align 1
  %458 = zext i8 %457 to i32
  %459 = mul nuw nsw i32 %458, %456
  %460 = sub i8 0, %455
  %461 = zext i8 %460 to i32
  %462 = mul nuw nsw i32 %461, %7
  %463 = add nuw nsw i32 %462, 128
  %464 = add nuw nsw i32 %463, %459
  %465 = lshr i32 %464, 8
  %466 = trunc i32 %465 to i8
  %467 = getelementptr inbounds i8, i8* %417, i64 %453
  store i8 %466, i8* %467, align 1
  %468 = or i64 %453, 1
  %469 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %468
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i32
  %472 = load i8, i8* %418, align 1
  %473 = zext i8 %472 to i32
  %474 = mul nuw nsw i32 %473, %471
  %475 = sub i8 0, %470
  %476 = zext i8 %475 to i32
  %477 = mul nuw nsw i32 %476, %7
  %478 = add nuw nsw i32 %477, 128
  %479 = add nuw nsw i32 %478, %474
  %480 = lshr i32 %479, 8
  %481 = trunc i32 %480 to i8
  %482 = getelementptr inbounds i8, i8* %417, i64 %468
  store i8 %481, i8* %482, align 1
  %483 = add nuw nsw i64 %453, 2
  %484 = icmp eq i64 %483, 32
  br i1 %484, label %485, label %452, !llvm.loop !263

485:                                              ; preds = %452, %426
  %486 = getelementptr inbounds i8, i8* %417, i64 %1
  %487 = getelementptr inbounds i8, i8* %3, i64 7
  %488 = mul i64 %1, 7
  %489 = add i64 %488, 32
  %490 = getelementptr i8, i8* %0, i64 %489
  %491 = getelementptr i8, i8* %3, i64 8
  %492 = icmp ult i8* %486, %491
  %493 = icmp ult i8* %487, %490
  %494 = and i1 %492, %493
  br i1 %494, label %521, label %495

495:                                              ; preds = %485
  %496 = insertelement <16 x i32> undef, i32 %7, i32 0
  %497 = shufflevector <16 x i32> %496, <16 x i32> undef, <16 x i32> zeroinitializer
  %498 = load i8, i8* %487, align 1, !alias.scope !264
  %499 = insertelement <16 x i8> undef, i8 %498, i32 0
  %500 = shufflevector <16 x i8> %499, <16 x i8> undef, <16 x i32> zeroinitializer
  %501 = zext <16 x i8> %500 to <16 x i32>
  %502 = mul nuw nsw <16 x i32> %501, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %503 = mul nuw nsw <16 x i32> %497, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %504 = add nuw nsw <16 x i32> %503, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %505 = add nuw nsw <16 x i32> %504, %502
  %506 = lshr <16 x i32> %505, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %507 = trunc <16 x i32> %506 to <16 x i8>
  %508 = bitcast i8* %486 to <16 x i8>*
  store <16 x i8> %507, <16 x i8>* %508, align 1, !alias.scope !267, !noalias !264
  %509 = load i8, i8* %487, align 1, !alias.scope !264
  %510 = insertelement <16 x i8> undef, i8 %509, i32 0
  %511 = shufflevector <16 x i8> %510, <16 x i8> undef, <16 x i32> zeroinitializer
  %512 = zext <16 x i8> %511 to <16 x i32>
  %513 = mul nuw nsw <16 x i32> %512, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %514 = mul nuw nsw <16 x i32> %497, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %515 = add nuw nsw <16 x i32> %514, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %516 = add nuw nsw <16 x i32> %515, %513
  %517 = lshr <16 x i32> %516, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %518 = trunc <16 x i32> %517 to <16 x i8>
  %519 = getelementptr inbounds i8, i8* %486, i64 16
  %520 = bitcast i8* %519 to <16 x i8>*
  store <16 x i8> %518, <16 x i8>* %520, align 1, !alias.scope !267, !noalias !264
  br label %554

521:                                              ; preds = %485, %521
  %522 = phi i64 [ %552, %521 ], [ 0, %485 ]
  %523 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %522
  %524 = load i8, i8* %523, align 2
  %525 = zext i8 %524 to i32
  %526 = load i8, i8* %487, align 1
  %527 = zext i8 %526 to i32
  %528 = mul nuw nsw i32 %527, %525
  %529 = sub i8 0, %524
  %530 = zext i8 %529 to i32
  %531 = mul nuw nsw i32 %530, %7
  %532 = add nuw nsw i32 %531, 128
  %533 = add nuw nsw i32 %532, %528
  %534 = lshr i32 %533, 8
  %535 = trunc i32 %534 to i8
  %536 = getelementptr inbounds i8, i8* %486, i64 %522
  store i8 %535, i8* %536, align 1
  %537 = or i64 %522, 1
  %538 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %537
  %539 = load i8, i8* %538, align 1
  %540 = zext i8 %539 to i32
  %541 = load i8, i8* %487, align 1
  %542 = zext i8 %541 to i32
  %543 = mul nuw nsw i32 %542, %540
  %544 = sub i8 0, %539
  %545 = zext i8 %544 to i32
  %546 = mul nuw nsw i32 %545, %7
  %547 = add nuw nsw i32 %546, 128
  %548 = add nuw nsw i32 %547, %543
  %549 = lshr i32 %548, 8
  %550 = trunc i32 %549 to i8
  %551 = getelementptr inbounds i8, i8* %486, i64 %537
  store i8 %550, i8* %551, align 1
  %552 = add nuw nsw i64 %522, 2
  %553 = icmp eq i64 %552, 32
  br i1 %553, label %554, label %521, !llvm.loop !269

554:                                              ; preds = %521, %495
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi16ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 32, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 32, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 32, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 32, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 32, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 32, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 32, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 32, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 32, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 32, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 32, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 32, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 32, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 32, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 32, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i32>
  %8 = shufflevector <32 x i32> %7, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <32 x i32> %8, %7
  %10 = shufflevector <32 x i32> %9, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <32 x i32> %9, %10
  %12 = shufflevector <32 x i32> %11, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <32 x i32> %11, %12
  %14 = shufflevector <32 x i32> %13, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <32 x i32> %13, %14
  %16 = shufflevector <32 x i32> %15, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nuw nsw <32 x i32> %15, %16
  %18 = extractelement <32 x i32> %17, i32 0
  %19 = add nuw nsw i32 %18, 16
  %20 = lshr i32 %19, 5
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 32, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 32, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 32, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 32, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 32, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %21, i64 32, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %21, i64 32, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %21, i64 32, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %21, i64 32, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %21, i64 32, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %21, i64 32, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %21, i64 32, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %21, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 32, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 32, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 32, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %19, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %19, i64 32, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %19, i64 32, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %19, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %19, i64 32, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %19, i64 32, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %19, i64 32, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %19, i64 32, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %19, i64 32, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %19, i64 32, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %19, i64 32, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %19, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i16>
  %8 = bitcast i8* %3 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 1
  %10 = zext <16 x i8> %9 to <16 x i16>
  %11 = shufflevector <32 x i16> %7, <32 x i16> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = add <32 x i16> %11, %7
  %13 = shufflevector <32 x i16> %12, <32 x i16> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = add <32 x i16> %12, %13
  %15 = shufflevector <32 x i16> %14, <32 x i16> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = add <32 x i16> %14, %15
  %17 = shufflevector <32 x i16> %16, <32 x i16> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %18 = add <32 x i16> %16, %17
  %19 = shufflevector <32 x i16> %18, <32 x i16> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = add <32 x i16> %18, %19
  %21 = extractelement <32 x i16> %20, i32 0
  %22 = shufflevector <16 x i16> %10, <16 x i16> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %23 = add <16 x i16> %22, %10
  %24 = shufflevector <16 x i16> %23, <16 x i16> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %25 = add <16 x i16> %23, %24
  %26 = shufflevector <16 x i16> %25, <16 x i16> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = add <16 x i16> %25, %26
  %28 = shufflevector <16 x i16> %27, <16 x i16> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = add <16 x i16> %27, %28
  %30 = extractelement <16 x i16> %29, i32 0
  %31 = add i16 %21, %30
  %32 = add nuw nsw i16 %31, 24
  %33 = udiv i16 %32, 48
  %34 = trunc i16 %33 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %34, i64 32, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %34, i64 32, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %34, i64 32, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %34, i64 32, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %34, i64 32, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %34, i64 32, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %34, i64 32, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %34, i64 32, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %34, i64 32, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %34, i64 32, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %34, i64 32, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %34, i64 32, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %34, i64 32, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %34, i64 32, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %34, i64 32, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %34, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 32, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 32, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 32, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 32, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 32, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 32, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 32, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 32, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %2, i64 32, i1 false)
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %2, i64 32, i1 false)
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %2, i64 32, i1 false)
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %2, i64 32, i1 false)
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %2, i64 32, i1 false)
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %2, i64 32, i1 false)
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %2, i64 32, i1 false)
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %2, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 32, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 32, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 32, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 32, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 32, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 32, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %24, i64 %1
  %28 = getelementptr inbounds i8, i8* %3, i64 8
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 32, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %27, i64 %1
  %31 = getelementptr inbounds i8, i8* %3, i64 9
  %32 = load i8, i8* %31, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 32, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %30, i64 %1
  %34 = getelementptr inbounds i8, i8* %3, i64 10
  %35 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %35, i64 32, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %33, i64 %1
  %37 = getelementptr inbounds i8, i8* %3, i64 11
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 32, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %36, i64 %1
  %40 = getelementptr inbounds i8, i8* %3, i64 12
  %41 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %41, i64 32, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 13
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 32, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %42, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 14
  %47 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %47, i64 32, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %45, i64 %1
  %49 = getelementptr inbounds i8, i8* %3, i64 15
  %50 = load i8, i8* %49, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 16
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 15
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 32
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %16 = getelementptr inbounds i8, i8* %2, i64 16
  %17 = bitcast i8* %16 to <16 x i8>*
  %18 = mul nuw nsw <16 x i32> %13, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  br label %19

19:                                               ; preds = %78, %4
  %20 = phi i64 [ 0, %4 ], [ %80, %78 ]
  %21 = phi i8* [ %0, %4 ], [ %79, %78 ]
  %22 = mul i64 %20, %1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = add i64 %22, 32
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %20
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, i8* %3, i64 %20
  %30 = sub i8 0, %27
  %31 = zext i8 %30 to i32
  %32 = mul nuw nsw i32 %31, %9
  %33 = add nuw nsw i32 %32, 256
  %34 = add nuw i64 %20, 1
  %35 = getelementptr i8, i8* %3, i64 %34
  %36 = icmp ult i8* %23, %11
  %37 = icmp ugt i8* %25, %2
  %38 = and i1 %36, %37
  %39 = icmp ult i8* %23, %35
  %40 = icmp ult i8* %29, %25
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  br i1 %42, label %82, label %43

43:                                               ; preds = %19
  %44 = insertelement <16 x i32> undef, i32 %28, i32 0
  %45 = shufflevector <16 x i32> %44, <16 x i32> undef, <16 x i32> zeroinitializer
  %46 = insertelement <16 x i32> undef, i32 %33, i32 0
  %47 = shufflevector <16 x i32> %46, <16 x i32> undef, <16 x i32> zeroinitializer
  %48 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !270
  %49 = zext <16 x i8> %48 to <16 x i32>
  %50 = mul nuw nsw <16 x i32> %45, %49
  %51 = load i8, i8* %29, align 1, !alias.scope !273
  %52 = insertelement <16 x i8> undef, i8 %51, i32 0
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> zeroinitializer
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %56 = add nuw nsw <16 x i32> %47, %50
  %57 = add nuw nsw <16 x i32> %56, %15
  %58 = add nuw nsw <16 x i32> %57, %55
  %59 = lshr <16 x i32> %58, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %60 = trunc <16 x i32> %59 to <16 x i8>
  %61 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %61, align 1, !alias.scope !275, !noalias !277
  %62 = load <16 x i8>, <16 x i8>* %17, align 1, !alias.scope !270
  %63 = zext <16 x i8> %62 to <16 x i32>
  %64 = mul nuw nsw <16 x i32> %45, %63
  %65 = load i8, i8* %29, align 1, !alias.scope !273
  %66 = insertelement <16 x i8> undef, i8 %65, i32 0
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> zeroinitializer
  %68 = zext <16 x i8> %67 to <16 x i32>
  %69 = mul nuw nsw <16 x i32> %68, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %70 = add nuw nsw <16 x i32> %47, %64
  %71 = add nuw nsw <16 x i32> %70, %18
  %72 = add nuw nsw <16 x i32> %71, %69
  %73 = lshr <16 x i32> %72, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %74 = trunc <16 x i32> %73 to <16 x i8>
  %75 = getelementptr inbounds i8, i8* %21, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %74, <16 x i8>* %76, align 1, !alias.scope !275, !noalias !277
  br label %78

77:                                               ; preds = %78
  ret void

78:                                               ; preds = %82, %43
  %79 = getelementptr inbounds i8, i8* %21, i64 %1
  %80 = add nuw nsw i64 %20, 1
  %81 = icmp eq i64 %80, 16
  br i1 %81, label %77, label %19

82:                                               ; preds = %19, %82
  %83 = phi i64 [ %103, %82 ], [ 0, %19 ]
  %84 = getelementptr inbounds i8, i8* %2, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, %28
  %88 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %83
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = load i8, i8* %29, align 1
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, %90
  %94 = sub i8 0, %89
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %10
  %97 = add nuw nsw i32 %33, %87
  %98 = add nuw nsw i32 %97, %96
  %99 = add nuw nsw i32 %98, %93
  %100 = lshr i32 %99, 9
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds i8, i8* %21, i64 %83
  store i8 %101, i8* %102, align 1
  %103 = add nuw nsw i64 %83, 1
  %104 = icmp eq i64 %103, 32
  br i1 %104, label %78, label %82, !llvm.loop !278
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr i8, i8* %2, i64 32
  %9 = bitcast i8* %2 to <16 x i8>*
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to <16 x i8>*
  br label %12

12:                                               ; preds = %50, %4
  %13 = phi i64 [ 0, %4 ], [ %52, %50 ]
  %14 = phi i8* [ %0, %4 ], [ %51, %50 ]
  %15 = mul i64 %13, %1
  %16 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %13
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub i8 0, %17
  %20 = zext i8 %19 to i32
  %21 = mul nuw nsw i32 %20, %7
  %22 = add nuw nsw i32 %21, 128
  %23 = add i64 %15, 32
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = getelementptr i8, i8* %0, i64 %15
  %26 = icmp ult i8* %25, %8
  %27 = icmp ugt i8* %24, %2
  %28 = and i1 %26, %27
  br i1 %28, label %54, label %29

29:                                               ; preds = %12
  %30 = insertelement <16 x i32> undef, i32 %18, i32 0
  %31 = shufflevector <16 x i32> %30, <16 x i32> undef, <16 x i32> zeroinitializer
  %32 = insertelement <16 x i32> undef, i32 %22, i32 0
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  %34 = load <16 x i8>, <16 x i8>* %9, align 1, !alias.scope !279
  %35 = zext <16 x i8> %34 to <16 x i32>
  %36 = mul nuw nsw <16 x i32> %31, %35
  %37 = add nuw nsw <16 x i32> %33, %36
  %38 = lshr <16 x i32> %37, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %39 = trunc <16 x i32> %38 to <16 x i8>
  %40 = bitcast i8* %14 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %40, align 1, !alias.scope !282, !noalias !279
  %41 = load <16 x i8>, <16 x i8>* %11, align 1, !alias.scope !279
  %42 = zext <16 x i8> %41 to <16 x i32>
  %43 = mul nuw nsw <16 x i32> %31, %42
  %44 = add nuw nsw <16 x i32> %33, %43
  %45 = lshr <16 x i32> %44, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %46 = trunc <16 x i32> %45 to <16 x i8>
  %47 = getelementptr inbounds i8, i8* %14, i64 16
  %48 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %48, align 1, !alias.scope !282, !noalias !279
  br label %50

49:                                               ; preds = %50
  ret void

50:                                               ; preds = %54, %29
  %51 = getelementptr inbounds i8, i8* %14, i64 %1
  %52 = add nuw nsw i64 %13, 1
  %53 = icmp eq i64 %52, 16
  br i1 %53, label %49, label %12

54:                                               ; preds = %12, %54
  %55 = phi i64 [ %73, %54 ], [ 0, %12 ]
  %56 = getelementptr inbounds i8, i8* %2, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nuw nsw i32 %58, %18
  %60 = add nuw nsw i32 %22, %59
  %61 = lshr i32 %60, 8
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %14, i64 %55
  store i8 %62, i8* %63, align 1
  %64 = or i64 %55, 1
  %65 = getelementptr inbounds i8, i8* %2, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %67, %18
  %69 = add nuw nsw i32 %22, %68
  %70 = lshr i32 %69, 8
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %14, i64 %64
  store i8 %71, i8* %72, align 1
  %73 = add nuw nsw i64 %55, 2
  %74 = icmp eq i64 %73, 32
  br i1 %74, label %50, label %54, !llvm.loop !284
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <16 x i32> undef, i32 %7, i32 0
  %9 = shufflevector <16 x i32> %8, <16 x i32> undef, <16 x i32> zeroinitializer
  %10 = mul nuw nsw <16 x i32> %9, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %11 = add nuw nsw <16 x i32> %10, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %12 = mul nuw nsw <16 x i32> %9, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %13 = add nuw nsw <16 x i32> %12, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %14

14:                                               ; preds = %48, %4
  %15 = phi i64 [ 0, %4 ], [ %50, %48 ]
  %16 = phi i8* [ %0, %4 ], [ %49, %48 ]
  %17 = mul i64 %15, %1
  %18 = getelementptr inbounds i8, i8* %3, i64 %15
  %19 = add nuw i64 %15, 1
  %20 = getelementptr i8, i8* %3, i64 %19
  %21 = add i64 %17, 32
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = getelementptr i8, i8* %0, i64 %17
  %24 = icmp ult i8* %23, %20
  %25 = icmp ult i8* %18, %22
  %26 = and i1 %24, %25
  br i1 %26, label %52, label %27

27:                                               ; preds = %14
  %28 = load i8, i8* %18, align 1, !alias.scope !285
  %29 = insertelement <16 x i8> undef, i8 %28, i32 0
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> zeroinitializer
  %31 = zext <16 x i8> %30 to <16 x i32>
  %32 = mul nuw nsw <16 x i32> %31, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %33 = add nuw nsw <16 x i32> %11, %32
  %34 = lshr <16 x i32> %33, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %35 = trunc <16 x i32> %34 to <16 x i8>
  %36 = bitcast i8* %16 to <16 x i8>*
  store <16 x i8> %35, <16 x i8>* %36, align 1, !alias.scope !288, !noalias !285
  %37 = load i8, i8* %18, align 1, !alias.scope !285
  %38 = insertelement <16 x i8> undef, i8 %37, i32 0
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> zeroinitializer
  %40 = zext <16 x i8> %39 to <16 x i32>
  %41 = mul nuw nsw <16 x i32> %40, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %42 = add nuw nsw <16 x i32> %13, %41
  %43 = lshr <16 x i32> %42, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %44 = trunc <16 x i32> %43 to <16 x i8>
  %45 = getelementptr inbounds i8, i8* %16, i64 16
  %46 = bitcast i8* %45 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %46, align 1, !alias.scope !288, !noalias !285
  br label %48

47:                                               ; preds = %48
  ret void

48:                                               ; preds = %52, %27
  %49 = getelementptr inbounds i8, i8* %16, i64 %1
  %50 = add nuw nsw i64 %15, 1
  %51 = icmp eq i64 %50, 16
  br i1 %51, label %47, label %14

52:                                               ; preds = %14, %52
  %53 = phi i64 [ %83, %52 ], [ 0, %14 ]
  %54 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %53
  %55 = load i8, i8* %54, align 2
  %56 = zext i8 %55 to i32
  %57 = load i8, i8* %18, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nuw nsw i32 %58, %56
  %60 = sub i8 0, %55
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %7
  %63 = add nuw nsw i32 %62, 128
  %64 = add nuw nsw i32 %63, %59
  %65 = lshr i32 %64, 8
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %16, i64 %53
  store i8 %66, i8* %67, align 1
  %68 = or i64 %53, 1
  %69 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = load i8, i8* %18, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nuw nsw i32 %73, %71
  %75 = sub i8 0, %70
  %76 = zext i8 %75 to i32
  %77 = mul nuw nsw i32 %76, %7
  %78 = add nuw nsw i32 %77, 128
  %79 = add nuw nsw i32 %78, %74
  %80 = lshr i32 %79, 8
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %16, i64 %68
  store i8 %81, i8* %82, align 1
  %83 = add nuw nsw i64 %53, 2
  %84 = icmp eq i64 %83, 32
  br i1 %84, label %48, label %52, !llvm.loop !290
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi32ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 32, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 32, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 32, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 32, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 32, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 32, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 32, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 32, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 32, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 32, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 32, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 32, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 32, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 32, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 32, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 32, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 -128, i64 32, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 -128, i64 32, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -128, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 -128, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 -128, i64 32, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 -128, i64 32, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 -128, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 -128, i64 32, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 -128, i64 32, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 -128, i64 32, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 -128, i64 32, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 -128, i64 32, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 -128, i64 32, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 -128, i64 32, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 -128, i64 32, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 -128, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i32>
  %8 = shufflevector <32 x i32> %7, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <32 x i32> %8, %7
  %10 = shufflevector <32 x i32> %9, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <32 x i32> %9, %10
  %12 = shufflevector <32 x i32> %11, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <32 x i32> %11, %12
  %14 = shufflevector <32 x i32> %13, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <32 x i32> %13, %14
  %16 = shufflevector <32 x i32> %15, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nuw nsw <32 x i32> %15, %16
  %18 = extractelement <32 x i32> %17, i32 0
  %19 = add nuw nsw i32 %18, 16
  %20 = lshr i32 %19, 5
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 32, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 32, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 32, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 32, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 32, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %21, i64 32, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %21, i64 32, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %21, i64 32, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %21, i64 32, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %21, i64 32, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %21, i64 32, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %21, i64 32, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %21, i64 32, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %21, i64 32, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %21, i64 32, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %21, i64 32, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %21, i64 32, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %21, i64 32, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %21, i64 32, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %21, i64 32, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %21, i64 32, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %21, i64 32, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %21, i64 32, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %21, i64 32, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %21, i64 32, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %21, i64 32, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %21, i64 32, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %21, i64 32, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %21, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i32>
  %8 = shufflevector <32 x i32> %7, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <32 x i32> %8, %7
  %10 = shufflevector <32 x i32> %9, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <32 x i32> %9, %10
  %12 = shufflevector <32 x i32> %11, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <32 x i32> %11, %12
  %14 = shufflevector <32 x i32> %13, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <32 x i32> %13, %14
  %16 = shufflevector <32 x i32> %15, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nuw nsw <32 x i32> %15, %16
  %18 = extractelement <32 x i32> %17, i32 0
  %19 = add nuw nsw i32 %18, 16
  %20 = lshr i32 %19, 5
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 32, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 32, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 32, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 32, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 32, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %21, i64 32, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %21, i64 32, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %21, i64 32, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %21, i64 32, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %21, i64 32, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %21, i64 32, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %21, i64 32, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %21, i64 32, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %21, i64 32, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %21, i64 32, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %21, i64 32, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %21, i64 32, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %21, i64 32, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %21, i64 32, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %21, i64 32, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %21, i64 32, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %21, i64 32, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %21, i64 32, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %21, i64 32, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %21, i64 32, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %21, i64 32, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %21, i64 32, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %21, i64 32, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %21, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i32>
  %8 = bitcast i8* %3 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 1
  %10 = zext <16 x i8> %9 to <16 x i32>
  %11 = getelementptr inbounds i8, i8* %3, i64 16
  %12 = bitcast i8* %11 to <8 x i8>*
  %13 = load <8 x i8>, <8 x i8>* %12, align 1
  %14 = zext <8 x i8> %13 to <8 x i32>
  %15 = getelementptr inbounds i8, i8* %3, i64 24
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds i8, i8* %3, i64 25
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %3, i64 26
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %3, i64 27
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds i8, i8* %3, i64 28
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %3, i64 29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds i8, i8* %3, i64 30
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shufflevector <32 x i32> %7, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = add nuw nsw <32 x i32> %36, %7
  %38 = shufflevector <32 x i32> %37, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = add nuw nsw <32 x i32> %37, %38
  %40 = shufflevector <32 x i32> %39, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = add nuw nsw <32 x i32> %39, %40
  %42 = shufflevector <32 x i32> %41, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = add nuw nsw <32 x i32> %41, %42
  %44 = shufflevector <32 x i32> %43, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add nuw nsw <32 x i32> %43, %44
  %46 = extractelement <32 x i32> %45, i32 0
  %47 = shufflevector <16 x i32> %10, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = add nuw nsw <16 x i32> %47, %10
  %49 = shufflevector <16 x i32> %48, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = add nuw nsw <16 x i32> %48, %49
  %51 = shufflevector <16 x i32> %50, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %52 = add nuw nsw <16 x i32> %50, %51
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %54 = add nuw nsw <16 x i32> %52, %53
  %55 = extractelement <16 x i32> %54, i32 0
  %56 = add nuw nsw i32 %46, %55
  %57 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = add nuw nsw <8 x i32> %57, %14
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %60 = add nuw nsw <8 x i32> %58, %59
  %61 = shufflevector <8 x i32> %60, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = add nuw nsw <8 x i32> %60, %61
  %63 = extractelement <8 x i32> %62, i32 0
  %64 = add nuw nsw i32 %56, %63
  %65 = add nuw nsw i32 %64, %17
  %66 = add nuw nsw i32 %65, %20
  %67 = add nuw nsw i32 %66, %23
  %68 = add nuw nsw i32 %67, %26
  %69 = add nuw nsw i32 %68, %29
  %70 = add nuw nsw i32 %69, %32
  %71 = add nuw nsw i32 %70, %35
  %72 = add nuw nsw i32 %71, 32
  %73 = getelementptr inbounds i8, i8* %3, i64 31
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = add nuw nsw i32 %72, %75
  %77 = lshr i32 %76, 6
  %78 = trunc i32 %77 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %78, i64 32, i1 false) #5
  %79 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 %78, i64 32, i1 false) #5
  %80 = getelementptr inbounds i8, i8* %79, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %80, i8 %78, i64 32, i1 false) #5
  %81 = getelementptr inbounds i8, i8* %80, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %81, i8 %78, i64 32, i1 false) #5
  %82 = getelementptr inbounds i8, i8* %81, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %82, i8 %78, i64 32, i1 false) #5
  %83 = getelementptr inbounds i8, i8* %82, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %83, i8 %78, i64 32, i1 false) #5
  %84 = getelementptr inbounds i8, i8* %83, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %78, i64 32, i1 false) #5
  %85 = getelementptr inbounds i8, i8* %84, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %85, i8 %78, i64 32, i1 false) #5
  %86 = getelementptr inbounds i8, i8* %85, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %86, i8 %78, i64 32, i1 false) #5
  %87 = getelementptr inbounds i8, i8* %86, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %87, i8 %78, i64 32, i1 false) #5
  %88 = getelementptr inbounds i8, i8* %87, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %88, i8 %78, i64 32, i1 false) #5
  %89 = getelementptr inbounds i8, i8* %88, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %89, i8 %78, i64 32, i1 false) #5
  %90 = getelementptr inbounds i8, i8* %89, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %90, i8 %78, i64 32, i1 false) #5
  %91 = getelementptr inbounds i8, i8* %90, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %78, i64 32, i1 false) #5
  %92 = getelementptr inbounds i8, i8* %91, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %92, i8 %78, i64 32, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %92, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %78, i64 32, i1 false) #5
  %94 = getelementptr inbounds i8, i8* %93, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %78, i64 32, i1 false) #5
  %95 = getelementptr inbounds i8, i8* %94, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %78, i64 32, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %95, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %78, i64 32, i1 false) #5
  %97 = getelementptr inbounds i8, i8* %96, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %78, i64 32, i1 false) #5
  %98 = getelementptr inbounds i8, i8* %97, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 %78, i64 32, i1 false) #5
  %99 = getelementptr inbounds i8, i8* %98, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 %78, i64 32, i1 false) #5
  %100 = getelementptr inbounds i8, i8* %99, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 %78, i64 32, i1 false) #5
  %101 = getelementptr inbounds i8, i8* %100, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %78, i64 32, i1 false) #5
  %102 = getelementptr inbounds i8, i8* %101, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 %78, i64 32, i1 false) #5
  %103 = getelementptr inbounds i8, i8* %102, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 %78, i64 32, i1 false) #5
  %104 = getelementptr inbounds i8, i8* %103, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %78, i64 32, i1 false) #5
  %105 = getelementptr inbounds i8, i8* %104, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 %78, i64 32, i1 false) #5
  %106 = getelementptr inbounds i8, i8* %105, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 %78, i64 32, i1 false) #5
  %107 = getelementptr inbounds i8, i8* %106, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %78, i64 32, i1 false) #5
  %108 = getelementptr inbounds i8, i8* %107, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %108, i8 %78, i64 32, i1 false) #5
  %109 = getelementptr inbounds i8, i8* %108, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 %78, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 32, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 32, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 32, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 32, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 32
  br i1 %14, label %5, label %6
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 32, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 32, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 32, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 32, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 32, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 32, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %24, i64 %1
  %28 = getelementptr inbounds i8, i8* %3, i64 8
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 32, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %27, i64 %1
  %31 = getelementptr inbounds i8, i8* %3, i64 9
  %32 = load i8, i8* %31, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 32, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %30, i64 %1
  %34 = getelementptr inbounds i8, i8* %3, i64 10
  %35 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %35, i64 32, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %33, i64 %1
  %37 = getelementptr inbounds i8, i8* %3, i64 11
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 32, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %36, i64 %1
  %40 = getelementptr inbounds i8, i8* %3, i64 12
  %41 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %41, i64 32, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 13
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 32, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %42, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 14
  %47 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %47, i64 32, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %45, i64 %1
  %49 = getelementptr inbounds i8, i8* %3, i64 15
  %50 = load i8, i8* %49, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 32, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %48, i64 %1
  %52 = getelementptr inbounds i8, i8* %3, i64 16
  %53 = load i8, i8* %52, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %53, i64 32, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %51, i64 %1
  %55 = getelementptr inbounds i8, i8* %3, i64 17
  %56 = load i8, i8* %55, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %56, i64 32, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %54, i64 %1
  %58 = getelementptr inbounds i8, i8* %3, i64 18
  %59 = load i8, i8* %58, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %59, i64 32, i1 false) #5
  %60 = getelementptr inbounds i8, i8* %57, i64 %1
  %61 = getelementptr inbounds i8, i8* %3, i64 19
  %62 = load i8, i8* %61, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %62, i64 32, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %60, i64 %1
  %64 = getelementptr inbounds i8, i8* %3, i64 20
  %65 = load i8, i8* %64, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 %65, i64 32, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %63, i64 %1
  %67 = getelementptr inbounds i8, i8* %3, i64 21
  %68 = load i8, i8* %67, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %68, i64 32, i1 false) #5
  %69 = getelementptr inbounds i8, i8* %66, i64 %1
  %70 = getelementptr inbounds i8, i8* %3, i64 22
  %71 = load i8, i8* %70, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %71, i64 32, i1 false) #5
  %72 = getelementptr inbounds i8, i8* %69, i64 %1
  %73 = getelementptr inbounds i8, i8* %3, i64 23
  %74 = load i8, i8* %73, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %74, i64 32, i1 false) #5
  %75 = getelementptr inbounds i8, i8* %72, i64 %1
  %76 = getelementptr inbounds i8, i8* %3, i64 24
  %77 = load i8, i8* %76, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %77, i64 32, i1 false) #5
  %78 = getelementptr inbounds i8, i8* %75, i64 %1
  %79 = getelementptr inbounds i8, i8* %3, i64 25
  %80 = load i8, i8* %79, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %80, i64 32, i1 false) #5
  %81 = getelementptr inbounds i8, i8* %78, i64 %1
  %82 = getelementptr inbounds i8, i8* %3, i64 26
  %83 = load i8, i8* %82, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %81, i8 %83, i64 32, i1 false) #5
  %84 = getelementptr inbounds i8, i8* %81, i64 %1
  %85 = getelementptr inbounds i8, i8* %3, i64 27
  %86 = load i8, i8* %85, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %86, i64 32, i1 false) #5
  %87 = getelementptr inbounds i8, i8* %84, i64 %1
  %88 = getelementptr inbounds i8, i8* %3, i64 28
  %89 = load i8, i8* %88, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %87, i8 %89, i64 32, i1 false) #5
  %90 = getelementptr inbounds i8, i8* %87, i64 %1
  %91 = getelementptr inbounds i8, i8* %3, i64 29
  %92 = load i8, i8* %91, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %90, i8 %92, i64 32, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %90, i64 %1
  %94 = getelementptr inbounds i8, i8* %3, i64 30
  %95 = load i8, i8* %94, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %95, i64 32, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %93, i64 %1
  %97 = getelementptr inbounds i8, i8* %3, i64 31
  %98 = load i8, i8* %97, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %98, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 32
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 31
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 32
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %16 = getelementptr inbounds i8, i8* %2, i64 16
  %17 = bitcast i8* %16 to <16 x i8>*
  %18 = mul nuw nsw <16 x i32> %13, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  br label %19

19:                                               ; preds = %78, %4
  %20 = phi i64 [ 0, %4 ], [ %80, %78 ]
  %21 = phi i8* [ %0, %4 ], [ %79, %78 ]
  %22 = mul i64 %20, %1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = add i64 %22, 32
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %20
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, i8* %3, i64 %20
  %30 = sub i8 0, %27
  %31 = zext i8 %30 to i32
  %32 = mul nuw nsw i32 %31, %9
  %33 = add nuw nsw i32 %32, 256
  %34 = add nuw i64 %20, 1
  %35 = getelementptr i8, i8* %3, i64 %34
  %36 = icmp ult i8* %23, %11
  %37 = icmp ugt i8* %25, %2
  %38 = and i1 %36, %37
  %39 = icmp ult i8* %23, %35
  %40 = icmp ult i8* %29, %25
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  br i1 %42, label %82, label %43

43:                                               ; preds = %19
  %44 = insertelement <16 x i32> undef, i32 %28, i32 0
  %45 = shufflevector <16 x i32> %44, <16 x i32> undef, <16 x i32> zeroinitializer
  %46 = insertelement <16 x i32> undef, i32 %33, i32 0
  %47 = shufflevector <16 x i32> %46, <16 x i32> undef, <16 x i32> zeroinitializer
  %48 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !291
  %49 = zext <16 x i8> %48 to <16 x i32>
  %50 = mul nuw nsw <16 x i32> %45, %49
  %51 = load i8, i8* %29, align 1, !alias.scope !294
  %52 = insertelement <16 x i8> undef, i8 %51, i32 0
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> zeroinitializer
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %56 = add nuw nsw <16 x i32> %47, %50
  %57 = add nuw nsw <16 x i32> %56, %15
  %58 = add nuw nsw <16 x i32> %57, %55
  %59 = lshr <16 x i32> %58, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %60 = trunc <16 x i32> %59 to <16 x i8>
  %61 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %61, align 1, !alias.scope !296, !noalias !298
  %62 = load <16 x i8>, <16 x i8>* %17, align 1, !alias.scope !291
  %63 = zext <16 x i8> %62 to <16 x i32>
  %64 = mul nuw nsw <16 x i32> %45, %63
  %65 = load i8, i8* %29, align 1, !alias.scope !294
  %66 = insertelement <16 x i8> undef, i8 %65, i32 0
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> zeroinitializer
  %68 = zext <16 x i8> %67 to <16 x i32>
  %69 = mul nuw nsw <16 x i32> %68, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %70 = add nuw nsw <16 x i32> %47, %64
  %71 = add nuw nsw <16 x i32> %70, %18
  %72 = add nuw nsw <16 x i32> %71, %69
  %73 = lshr <16 x i32> %72, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %74 = trunc <16 x i32> %73 to <16 x i8>
  %75 = getelementptr inbounds i8, i8* %21, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %74, <16 x i8>* %76, align 1, !alias.scope !296, !noalias !298
  br label %78

77:                                               ; preds = %78
  ret void

78:                                               ; preds = %82, %43
  %79 = getelementptr inbounds i8, i8* %21, i64 %1
  %80 = add nuw nsw i64 %20, 1
  %81 = icmp eq i64 %80, 32
  br i1 %81, label %77, label %19

82:                                               ; preds = %19, %82
  %83 = phi i64 [ %103, %82 ], [ 0, %19 ]
  %84 = getelementptr inbounds i8, i8* %2, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, %28
  %88 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %83
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = load i8, i8* %29, align 1
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, %90
  %94 = sub i8 0, %89
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %10
  %97 = add nuw nsw i32 %33, %87
  %98 = add nuw nsw i32 %97, %96
  %99 = add nuw nsw i32 %98, %93
  %100 = lshr i32 %99, 9
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds i8, i8* %21, i64 %83
  store i8 %101, i8* %102, align 1
  %103 = add nuw nsw i64 %83, 1
  %104 = icmp eq i64 %103, 32
  br i1 %104, label %78, label %82, !llvm.loop !299
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr i8, i8* %2, i64 32
  %9 = bitcast i8* %2 to <16 x i8>*
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to <16 x i8>*
  br label %12

12:                                               ; preds = %50, %4
  %13 = phi i64 [ 0, %4 ], [ %52, %50 ]
  %14 = phi i8* [ %0, %4 ], [ %51, %50 ]
  %15 = mul i64 %13, %1
  %16 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %13
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub i8 0, %17
  %20 = zext i8 %19 to i32
  %21 = mul nuw nsw i32 %20, %7
  %22 = add nuw nsw i32 %21, 128
  %23 = add i64 %15, 32
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = getelementptr i8, i8* %0, i64 %15
  %26 = icmp ult i8* %25, %8
  %27 = icmp ugt i8* %24, %2
  %28 = and i1 %26, %27
  br i1 %28, label %54, label %29

29:                                               ; preds = %12
  %30 = insertelement <16 x i32> undef, i32 %18, i32 0
  %31 = shufflevector <16 x i32> %30, <16 x i32> undef, <16 x i32> zeroinitializer
  %32 = insertelement <16 x i32> undef, i32 %22, i32 0
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  %34 = load <16 x i8>, <16 x i8>* %9, align 1, !alias.scope !300
  %35 = zext <16 x i8> %34 to <16 x i32>
  %36 = mul nuw nsw <16 x i32> %31, %35
  %37 = add nuw nsw <16 x i32> %33, %36
  %38 = lshr <16 x i32> %37, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %39 = trunc <16 x i32> %38 to <16 x i8>
  %40 = bitcast i8* %14 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %40, align 1, !alias.scope !303, !noalias !300
  %41 = load <16 x i8>, <16 x i8>* %11, align 1, !alias.scope !300
  %42 = zext <16 x i8> %41 to <16 x i32>
  %43 = mul nuw nsw <16 x i32> %31, %42
  %44 = add nuw nsw <16 x i32> %33, %43
  %45 = lshr <16 x i32> %44, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %46 = trunc <16 x i32> %45 to <16 x i8>
  %47 = getelementptr inbounds i8, i8* %14, i64 16
  %48 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %48, align 1, !alias.scope !303, !noalias !300
  br label %50

49:                                               ; preds = %50
  ret void

50:                                               ; preds = %54, %29
  %51 = getelementptr inbounds i8, i8* %14, i64 %1
  %52 = add nuw nsw i64 %13, 1
  %53 = icmp eq i64 %52, 32
  br i1 %53, label %49, label %12

54:                                               ; preds = %12, %54
  %55 = phi i64 [ %73, %54 ], [ 0, %12 ]
  %56 = getelementptr inbounds i8, i8* %2, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nuw nsw i32 %58, %18
  %60 = add nuw nsw i32 %22, %59
  %61 = lshr i32 %60, 8
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %14, i64 %55
  store i8 %62, i8* %63, align 1
  %64 = or i64 %55, 1
  %65 = getelementptr inbounds i8, i8* %2, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %67, %18
  %69 = add nuw nsw i32 %22, %68
  %70 = lshr i32 %69, 8
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %14, i64 %64
  store i8 %71, i8* %72, align 1
  %73 = add nuw nsw i64 %55, 2
  %74 = icmp eq i64 %73, 32
  br i1 %74, label %50, label %54, !llvm.loop !305
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <16 x i32> undef, i32 %7, i32 0
  %9 = shufflevector <16 x i32> %8, <16 x i32> undef, <16 x i32> zeroinitializer
  %10 = mul nuw nsw <16 x i32> %9, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %11 = add nuw nsw <16 x i32> %10, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %12 = mul nuw nsw <16 x i32> %9, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %13 = add nuw nsw <16 x i32> %12, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %14

14:                                               ; preds = %48, %4
  %15 = phi i64 [ 0, %4 ], [ %50, %48 ]
  %16 = phi i8* [ %0, %4 ], [ %49, %48 ]
  %17 = mul i64 %15, %1
  %18 = getelementptr inbounds i8, i8* %3, i64 %15
  %19 = add nuw i64 %15, 1
  %20 = getelementptr i8, i8* %3, i64 %19
  %21 = add i64 %17, 32
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = getelementptr i8, i8* %0, i64 %17
  %24 = icmp ult i8* %23, %20
  %25 = icmp ult i8* %18, %22
  %26 = and i1 %24, %25
  br i1 %26, label %52, label %27

27:                                               ; preds = %14
  %28 = load i8, i8* %18, align 1, !alias.scope !306
  %29 = insertelement <16 x i8> undef, i8 %28, i32 0
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> zeroinitializer
  %31 = zext <16 x i8> %30 to <16 x i32>
  %32 = mul nuw nsw <16 x i32> %31, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %33 = add nuw nsw <16 x i32> %11, %32
  %34 = lshr <16 x i32> %33, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %35 = trunc <16 x i32> %34 to <16 x i8>
  %36 = bitcast i8* %16 to <16 x i8>*
  store <16 x i8> %35, <16 x i8>* %36, align 1, !alias.scope !309, !noalias !306
  %37 = load i8, i8* %18, align 1, !alias.scope !306
  %38 = insertelement <16 x i8> undef, i8 %37, i32 0
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> zeroinitializer
  %40 = zext <16 x i8> %39 to <16 x i32>
  %41 = mul nuw nsw <16 x i32> %40, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %42 = add nuw nsw <16 x i32> %13, %41
  %43 = lshr <16 x i32> %42, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %44 = trunc <16 x i32> %43 to <16 x i8>
  %45 = getelementptr inbounds i8, i8* %16, i64 16
  %46 = bitcast i8* %45 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %46, align 1, !alias.scope !309, !noalias !306
  br label %48

47:                                               ; preds = %48
  ret void

48:                                               ; preds = %52, %27
  %49 = getelementptr inbounds i8, i8* %16, i64 %1
  %50 = add nuw nsw i64 %15, 1
  %51 = icmp eq i64 %50, 32
  br i1 %51, label %47, label %14

52:                                               ; preds = %14, %52
  %53 = phi i64 [ %83, %52 ], [ 0, %14 ]
  %54 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %53
  %55 = load i8, i8* %54, align 2
  %56 = zext i8 %55 to i32
  %57 = load i8, i8* %18, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nuw nsw i32 %58, %56
  %60 = sub i8 0, %55
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %7
  %63 = add nuw nsw i32 %62, 128
  %64 = add nuw nsw i32 %63, %59
  %65 = lshr i32 %64, 8
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %16, i64 %53
  store i8 %66, i8* %67, align 1
  %68 = or i64 %53, 1
  %69 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = load i8, i8* %18, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nuw nsw i32 %73, %71
  %75 = sub i8 0, %70
  %76 = zext i8 %75 to i32
  %77 = mul nuw nsw i32 %76, %7
  %78 = add nuw nsw i32 %77, 128
  %79 = add nuw nsw i32 %78, %74
  %80 = lshr i32 %79, 8
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %16, i64 %68
  store i8 %81, i8* %82, align 1
  %83 = add nuw nsw i64 %53, 2
  %84 = icmp eq i64 %83, 32
  br i1 %84, label %48, label %52, !llvm.loop !311
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi64ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 32, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 32, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 32, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 32, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 32, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 32, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 32, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 32, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 32, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 32, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 32, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 32, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 32, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 32, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 32, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 32, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 -128, i64 32, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 -128, i64 32, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -128, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 -128, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 -128, i64 32, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 -128, i64 32, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 -128, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 -128, i64 32, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 -128, i64 32, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 -128, i64 32, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 -128, i64 32, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 -128, i64 32, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 -128, i64 32, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 -128, i64 32, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 -128, i64 32, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 -128, i64 32, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 -128, i64 32, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 -128, i64 32, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 -128, i64 32, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 -128, i64 32, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 -128, i64 32, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 -128, i64 32, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 -128, i64 32, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 -128, i64 32, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 -128, i64 32, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 -128, i64 32, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 -128, i64 32, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 -128, i64 32, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 -128, i64 32, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 -128, i64 32, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 -128, i64 32, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 -128, i64 32, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 -128, i64 32, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %52, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 -128, i64 32, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 -128, i64 32, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 -128, i64 32, i1 false) #5
  %56 = getelementptr inbounds i8, i8* %55, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 -128, i64 32, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %56, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 -128, i64 32, i1 false) #5
  %58 = getelementptr inbounds i8, i8* %57, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 -128, i64 32, i1 false) #5
  %59 = getelementptr inbounds i8, i8* %58, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 -128, i64 32, i1 false) #5
  %60 = getelementptr inbounds i8, i8* %59, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 -128, i64 32, i1 false) #5
  %61 = getelementptr inbounds i8, i8* %60, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 -128, i64 32, i1 false) #5
  %62 = getelementptr inbounds i8, i8* %61, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 -128, i64 32, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %62, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 -128, i64 32, i1 false) #5
  %64 = getelementptr inbounds i8, i8* %63, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 -128, i64 32, i1 false) #5
  %65 = getelementptr inbounds i8, i8* %64, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 -128, i64 32, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %65, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 -128, i64 32, i1 false) #5
  %67 = getelementptr inbounds i8, i8* %66, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 -128, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i32>
  %8 = shufflevector <32 x i32> %7, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <32 x i32> %8, %7
  %10 = shufflevector <32 x i32> %9, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <32 x i32> %9, %10
  %12 = shufflevector <32 x i32> %11, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <32 x i32> %11, %12
  %14 = shufflevector <32 x i32> %13, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <32 x i32> %13, %14
  %16 = shufflevector <32 x i32> %15, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nuw nsw <32 x i32> %15, %16
  %18 = extractelement <32 x i32> %17, i32 0
  %19 = add nuw nsw i32 %18, 16
  %20 = lshr i32 %19, 5
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 32, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 32, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 32, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 32, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 32, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 32, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %21, i64 32, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %21, i64 32, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %21, i64 32, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %21, i64 32, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %21, i64 32, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %21, i64 32, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %21, i64 32, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %21, i64 32, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %21, i64 32, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %21, i64 32, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %21, i64 32, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %21, i64 32, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %21, i64 32, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %21, i64 32, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %21, i64 32, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %21, i64 32, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %21, i64 32, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %21, i64 32, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %21, i64 32, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %21, i64 32, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %21, i64 32, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %21, i64 32, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %21, i64 32, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %21, i64 32, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %52, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 %21, i64 32, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %21, i64 32, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 %21, i64 32, i1 false) #5
  %56 = getelementptr inbounds i8, i8* %55, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 %21, i64 32, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %56, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %21, i64 32, i1 false) #5
  %58 = getelementptr inbounds i8, i8* %57, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 %21, i64 32, i1 false) #5
  %59 = getelementptr inbounds i8, i8* %58, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 %21, i64 32, i1 false) #5
  %60 = getelementptr inbounds i8, i8* %59, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %21, i64 32, i1 false) #5
  %61 = getelementptr inbounds i8, i8* %60, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 %21, i64 32, i1 false) #5
  %62 = getelementptr inbounds i8, i8* %61, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 %21, i64 32, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %62, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 %21, i64 32, i1 false) #5
  %64 = getelementptr inbounds i8, i8* %63, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 %21, i64 32, i1 false) #5
  %65 = getelementptr inbounds i8, i8* %64, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 %21, i64 32, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %65, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %21, i64 32, i1 false) #5
  %67 = getelementptr inbounds i8, i8* %66, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 %21, i64 32, i1 false) #5
  %68 = getelementptr inbounds i8, i8* %67, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 %21, i64 32, i1 false) #5
  %69 = getelementptr inbounds i8, i8* %68, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %21, i64 32, i1 false) #5
  %70 = getelementptr inbounds i8, i8* %69, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %70, i8 %21, i64 32, i1 false) #5
  %71 = getelementptr inbounds i8, i8* %70, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %21, i64 32, i1 false) #5
  %72 = getelementptr inbounds i8, i8* %71, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %21, i64 32, i1 false) #5
  %73 = getelementptr inbounds i8, i8* %72, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %21, i64 32, i1 false) #5
  %74 = getelementptr inbounds i8, i8* %73, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 %21, i64 32, i1 false) #5
  %75 = getelementptr inbounds i8, i8* %74, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %21, i64 32, i1 false) #5
  %76 = getelementptr inbounds i8, i8* %75, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 %21, i64 32, i1 false) #5
  %77 = getelementptr inbounds i8, i8* %76, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 %21, i64 32, i1 false) #5
  %78 = getelementptr inbounds i8, i8* %77, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %21, i64 32, i1 false) #5
  %79 = getelementptr inbounds i8, i8* %78, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 %21, i64 32, i1 false) #5
  %80 = getelementptr inbounds i8, i8* %79, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %80, i8 %21, i64 32, i1 false) #5
  %81 = getelementptr inbounds i8, i8* %80, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %81, i8 %21, i64 32, i1 false) #5
  %82 = getelementptr inbounds i8, i8* %81, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %82, i8 %21, i64 32, i1 false) #5
  %83 = getelementptr inbounds i8, i8* %82, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %83, i8 %21, i64 32, i1 false) #5
  %84 = getelementptr inbounds i8, i8* %83, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %21, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <4 x i8>*
  %6 = load <4 x i8>, <4 x i8>* %5, align 1
  %7 = zext <4 x i8> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %3, i64 4
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = zext <4 x i8> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 8
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = zext <4 x i8> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 12
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 16
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 20
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 24
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 28
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = zext <4 x i8> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 32
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 36
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 40
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 44
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 48
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 52
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 56
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 60
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = trunc i32 %89 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %90, i64 32, i1 false) #5
  %91 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %90, i64 32, i1 false) #5
  %92 = getelementptr inbounds i8, i8* %91, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %92, i8 %90, i64 32, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %92, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %90, i64 32, i1 false) #5
  %94 = getelementptr inbounds i8, i8* %93, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %90, i64 32, i1 false) #5
  %95 = getelementptr inbounds i8, i8* %94, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %90, i64 32, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %95, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %90, i64 32, i1 false) #5
  %97 = getelementptr inbounds i8, i8* %96, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %90, i64 32, i1 false) #5
  %98 = getelementptr inbounds i8, i8* %97, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 %90, i64 32, i1 false) #5
  %99 = getelementptr inbounds i8, i8* %98, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 %90, i64 32, i1 false) #5
  %100 = getelementptr inbounds i8, i8* %99, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 %90, i64 32, i1 false) #5
  %101 = getelementptr inbounds i8, i8* %100, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %90, i64 32, i1 false) #5
  %102 = getelementptr inbounds i8, i8* %101, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 %90, i64 32, i1 false) #5
  %103 = getelementptr inbounds i8, i8* %102, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 %90, i64 32, i1 false) #5
  %104 = getelementptr inbounds i8, i8* %103, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %90, i64 32, i1 false) #5
  %105 = getelementptr inbounds i8, i8* %104, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 %90, i64 32, i1 false) #5
  %106 = getelementptr inbounds i8, i8* %105, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 %90, i64 32, i1 false) #5
  %107 = getelementptr inbounds i8, i8* %106, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %90, i64 32, i1 false) #5
  %108 = getelementptr inbounds i8, i8* %107, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %108, i8 %90, i64 32, i1 false) #5
  %109 = getelementptr inbounds i8, i8* %108, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 %90, i64 32, i1 false) #5
  %110 = getelementptr inbounds i8, i8* %109, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 %90, i64 32, i1 false) #5
  %111 = getelementptr inbounds i8, i8* %110, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %111, i8 %90, i64 32, i1 false) #5
  %112 = getelementptr inbounds i8, i8* %111, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %112, i8 %90, i64 32, i1 false) #5
  %113 = getelementptr inbounds i8, i8* %112, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %113, i8 %90, i64 32, i1 false) #5
  %114 = getelementptr inbounds i8, i8* %113, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 %90, i64 32, i1 false) #5
  %115 = getelementptr inbounds i8, i8* %114, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %115, i8 %90, i64 32, i1 false) #5
  %116 = getelementptr inbounds i8, i8* %115, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %116, i8 %90, i64 32, i1 false) #5
  %117 = getelementptr inbounds i8, i8* %116, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %117, i8 %90, i64 32, i1 false) #5
  %118 = getelementptr inbounds i8, i8* %117, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %118, i8 %90, i64 32, i1 false) #5
  %119 = getelementptr inbounds i8, i8* %118, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %119, i8 %90, i64 32, i1 false) #5
  %120 = getelementptr inbounds i8, i8* %119, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %120, i8 %90, i64 32, i1 false) #5
  %121 = getelementptr inbounds i8, i8* %120, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 %90, i64 32, i1 false) #5
  %122 = getelementptr inbounds i8, i8* %121, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %122, i8 %90, i64 32, i1 false) #5
  %123 = getelementptr inbounds i8, i8* %122, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %123, i8 %90, i64 32, i1 false) #5
  %124 = getelementptr inbounds i8, i8* %123, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %124, i8 %90, i64 32, i1 false) #5
  %125 = getelementptr inbounds i8, i8* %124, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %125, i8 %90, i64 32, i1 false) #5
  %126 = getelementptr inbounds i8, i8* %125, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %126, i8 %90, i64 32, i1 false) #5
  %127 = getelementptr inbounds i8, i8* %126, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %127, i8 %90, i64 32, i1 false) #5
  %128 = getelementptr inbounds i8, i8* %127, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %128, i8 %90, i64 32, i1 false) #5
  %129 = getelementptr inbounds i8, i8* %128, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %129, i8 %90, i64 32, i1 false) #5
  %130 = getelementptr inbounds i8, i8* %129, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %130, i8 %90, i64 32, i1 false) #5
  %131 = getelementptr inbounds i8, i8* %130, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %131, i8 %90, i64 32, i1 false) #5
  %132 = getelementptr inbounds i8, i8* %131, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %132, i8 %90, i64 32, i1 false) #5
  %133 = getelementptr inbounds i8, i8* %132, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %133, i8 %90, i64 32, i1 false) #5
  %134 = getelementptr inbounds i8, i8* %133, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %134, i8 %90, i64 32, i1 false) #5
  %135 = getelementptr inbounds i8, i8* %134, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 %90, i64 32, i1 false) #5
  %136 = getelementptr inbounds i8, i8* %135, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %136, i8 %90, i64 32, i1 false) #5
  %137 = getelementptr inbounds i8, i8* %136, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %137, i8 %90, i64 32, i1 false) #5
  %138 = getelementptr inbounds i8, i8* %137, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %138, i8 %90, i64 32, i1 false) #5
  %139 = getelementptr inbounds i8, i8* %138, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %139, i8 %90, i64 32, i1 false) #5
  %140 = getelementptr inbounds i8, i8* %139, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %140, i8 %90, i64 32, i1 false) #5
  %141 = getelementptr inbounds i8, i8* %140, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %141, i8 %90, i64 32, i1 false) #5
  %142 = getelementptr inbounds i8, i8* %141, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %142, i8 %90, i64 32, i1 false) #5
  %143 = getelementptr inbounds i8, i8* %142, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %143, i8 %90, i64 32, i1 false) #5
  %144 = getelementptr inbounds i8, i8* %143, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %144, i8 %90, i64 32, i1 false) #5
  %145 = getelementptr inbounds i8, i8* %144, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %145, i8 %90, i64 32, i1 false) #5
  %146 = getelementptr inbounds i8, i8* %145, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %146, i8 %90, i64 32, i1 false) #5
  %147 = getelementptr inbounds i8, i8* %146, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %147, i8 %90, i64 32, i1 false) #5
  %148 = getelementptr inbounds i8, i8* %147, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %148, i8 %90, i64 32, i1 false) #5
  %149 = getelementptr inbounds i8, i8* %148, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %149, i8 %90, i64 32, i1 false) #5
  %150 = getelementptr inbounds i8, i8* %149, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %150, i8 %90, i64 32, i1 false) #5
  %151 = getelementptr inbounds i8, i8* %150, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %151, i8 %90, i64 32, i1 false) #5
  %152 = getelementptr inbounds i8, i8* %151, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %152, i8 %90, i64 32, i1 false) #5
  %153 = getelementptr inbounds i8, i8* %152, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %153, i8 %90, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %2, align 1
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 48
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %7, %10
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nuw nsw i32 %11, %14
  %16 = getelementptr inbounds i8, i8* %2, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add nuw nsw i32 %15, %18
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = add nuw nsw i32 %19, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = add nuw nsw i32 %23, %26
  %28 = getelementptr inbounds i8, i8* %2, i64 6
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %27, %30
  %32 = getelementptr inbounds i8, i8* %2, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = add nuw nsw i32 %31, %34
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nuw nsw i32 %35, %38
  %40 = getelementptr inbounds i8, i8* %2, i64 9
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add nuw nsw i32 %39, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 10
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = add nuw nsw i32 %43, %46
  %48 = getelementptr inbounds i8, i8* %2, i64 11
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %47, %50
  %52 = getelementptr inbounds i8, i8* %2, i64 12
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = add nuw nsw i32 %51, %54
  %56 = getelementptr inbounds i8, i8* %2, i64 13
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nuw nsw i32 %55, %58
  %60 = getelementptr inbounds i8, i8* %2, i64 14
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = add nuw nsw i32 %59, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 15
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = add nuw nsw i32 %63, %66
  %68 = getelementptr inbounds i8, i8* %2, i64 16
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %67, %70
  %72 = getelementptr inbounds i8, i8* %2, i64 17
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = add nuw nsw i32 %71, %74
  %76 = getelementptr inbounds i8, i8* %2, i64 18
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add nuw nsw i32 %75, %78
  %80 = getelementptr inbounds i8, i8* %2, i64 19
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = add nuw nsw i32 %79, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 20
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = add nuw nsw i32 %83, %86
  %88 = getelementptr inbounds i8, i8* %2, i64 21
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = add nuw nsw i32 %87, %90
  %92 = getelementptr inbounds i8, i8* %2, i64 22
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nuw nsw i32 %91, %94
  %96 = getelementptr inbounds i8, i8* %2, i64 23
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nuw nsw i32 %95, %98
  %100 = getelementptr inbounds i8, i8* %2, i64 24
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i32 %99, %102
  %104 = getelementptr inbounds i8, i8* %2, i64 25
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = add nuw nsw i32 %103, %106
  %108 = getelementptr inbounds i8, i8* %2, i64 26
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nuw nsw i32 %107, %110
  %112 = getelementptr inbounds i8, i8* %2, i64 27
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nuw nsw i32 %111, %114
  %116 = getelementptr inbounds i8, i8* %2, i64 28
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add nuw nsw i32 %115, %118
  %120 = getelementptr inbounds i8, i8* %2, i64 29
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = add nuw nsw i32 %119, %122
  %124 = getelementptr inbounds i8, i8* %2, i64 30
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add nuw nsw i32 %123, %126
  %128 = getelementptr inbounds i8, i8* %2, i64 31
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = add nuw nsw i32 %127, %130
  %132 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %131, i32 0
  %133 = bitcast i8* %3 to <4 x i8>*
  %134 = load <4 x i8>, <4 x i8>* %133, align 1
  %135 = zext <4 x i8> %134 to <4 x i32>
  %136 = add nuw nsw <4 x i32> %132, %135
  %137 = getelementptr inbounds i8, i8* %3, i64 4
  %138 = bitcast i8* %137 to <4 x i8>*
  %139 = load <4 x i8>, <4 x i8>* %138, align 1
  %140 = zext <4 x i8> %139 to <4 x i32>
  %141 = add nuw nsw <4 x i32> %136, %140
  %142 = getelementptr inbounds i8, i8* %3, i64 8
  %143 = bitcast i8* %142 to <4 x i8>*
  %144 = load <4 x i8>, <4 x i8>* %143, align 1
  %145 = zext <4 x i8> %144 to <4 x i32>
  %146 = add nuw nsw <4 x i32> %141, %145
  %147 = getelementptr inbounds i8, i8* %3, i64 12
  %148 = bitcast i8* %147 to <4 x i8>*
  %149 = load <4 x i8>, <4 x i8>* %148, align 1
  %150 = zext <4 x i8> %149 to <4 x i32>
  %151 = add nuw nsw <4 x i32> %146, %150
  %152 = getelementptr inbounds i8, i8* %3, i64 16
  %153 = bitcast i8* %152 to <4 x i8>*
  %154 = load <4 x i8>, <4 x i8>* %153, align 1
  %155 = zext <4 x i8> %154 to <4 x i32>
  %156 = add nuw nsw <4 x i32> %151, %155
  %157 = getelementptr inbounds i8, i8* %3, i64 20
  %158 = bitcast i8* %157 to <4 x i8>*
  %159 = load <4 x i8>, <4 x i8>* %158, align 1
  %160 = zext <4 x i8> %159 to <4 x i32>
  %161 = add nuw nsw <4 x i32> %156, %160
  %162 = getelementptr inbounds i8, i8* %3, i64 24
  %163 = bitcast i8* %162 to <4 x i8>*
  %164 = load <4 x i8>, <4 x i8>* %163, align 1
  %165 = zext <4 x i8> %164 to <4 x i32>
  %166 = add nuw nsw <4 x i32> %161, %165
  %167 = getelementptr inbounds i8, i8* %3, i64 28
  %168 = bitcast i8* %167 to <4 x i8>*
  %169 = load <4 x i8>, <4 x i8>* %168, align 1
  %170 = zext <4 x i8> %169 to <4 x i32>
  %171 = add nuw nsw <4 x i32> %166, %170
  %172 = getelementptr inbounds i8, i8* %3, i64 32
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = add nuw nsw <4 x i32> %171, %175
  %177 = getelementptr inbounds i8, i8* %3, i64 36
  %178 = bitcast i8* %177 to <4 x i8>*
  %179 = load <4 x i8>, <4 x i8>* %178, align 1
  %180 = zext <4 x i8> %179 to <4 x i32>
  %181 = add nuw nsw <4 x i32> %176, %180
  %182 = getelementptr inbounds i8, i8* %3, i64 40
  %183 = bitcast i8* %182 to <4 x i8>*
  %184 = load <4 x i8>, <4 x i8>* %183, align 1
  %185 = zext <4 x i8> %184 to <4 x i32>
  %186 = add nuw nsw <4 x i32> %181, %185
  %187 = getelementptr inbounds i8, i8* %3, i64 44
  %188 = bitcast i8* %187 to <4 x i8>*
  %189 = load <4 x i8>, <4 x i8>* %188, align 1
  %190 = zext <4 x i8> %189 to <4 x i32>
  %191 = add nuw nsw <4 x i32> %186, %190
  %192 = getelementptr inbounds i8, i8* %3, i64 48
  %193 = bitcast i8* %192 to <4 x i8>*
  %194 = load <4 x i8>, <4 x i8>* %193, align 1
  %195 = zext <4 x i8> %194 to <4 x i32>
  %196 = add nuw nsw <4 x i32> %191, %195
  %197 = getelementptr inbounds i8, i8* %3, i64 52
  %198 = bitcast i8* %197 to <4 x i8>*
  %199 = load <4 x i8>, <4 x i8>* %198, align 1
  %200 = zext <4 x i8> %199 to <4 x i32>
  %201 = add nuw nsw <4 x i32> %196, %200
  %202 = getelementptr inbounds i8, i8* %3, i64 56
  %203 = bitcast i8* %202 to <4 x i8>*
  %204 = load <4 x i8>, <4 x i8>* %203, align 1
  %205 = zext <4 x i8> %204 to <4 x i32>
  %206 = add nuw nsw <4 x i32> %201, %205
  %207 = getelementptr inbounds i8, i8* %3, i64 60
  %208 = bitcast i8* %207 to <4 x i8>*
  %209 = load <4 x i8>, <4 x i8>* %208, align 1
  %210 = zext <4 x i8> %209 to <4 x i32>
  %211 = add nuw nsw <4 x i32> %206, %210
  %212 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %213 = add <4 x i32> %211, %212
  %214 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %215 = add <4 x i32> %213, %214
  %216 = extractelement <4 x i32> %215, i32 0
  %217 = udiv i32 %216, 96
  %218 = trunc i32 %217 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %218, i64 32, i1 false) #5
  %219 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %219, i8 %218, i64 32, i1 false) #5
  %220 = getelementptr inbounds i8, i8* %219, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %220, i8 %218, i64 32, i1 false) #5
  %221 = getelementptr inbounds i8, i8* %220, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %221, i8 %218, i64 32, i1 false) #5
  %222 = getelementptr inbounds i8, i8* %221, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %222, i8 %218, i64 32, i1 false) #5
  %223 = getelementptr inbounds i8, i8* %222, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %223, i8 %218, i64 32, i1 false) #5
  %224 = getelementptr inbounds i8, i8* %223, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %224, i8 %218, i64 32, i1 false) #5
  %225 = getelementptr inbounds i8, i8* %224, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %225, i8 %218, i64 32, i1 false) #5
  %226 = getelementptr inbounds i8, i8* %225, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %226, i8 %218, i64 32, i1 false) #5
  %227 = getelementptr inbounds i8, i8* %226, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %227, i8 %218, i64 32, i1 false) #5
  %228 = getelementptr inbounds i8, i8* %227, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %228, i8 %218, i64 32, i1 false) #5
  %229 = getelementptr inbounds i8, i8* %228, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %229, i8 %218, i64 32, i1 false) #5
  %230 = getelementptr inbounds i8, i8* %229, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %230, i8 %218, i64 32, i1 false) #5
  %231 = getelementptr inbounds i8, i8* %230, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %231, i8 %218, i64 32, i1 false) #5
  %232 = getelementptr inbounds i8, i8* %231, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %232, i8 %218, i64 32, i1 false) #5
  %233 = getelementptr inbounds i8, i8* %232, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %233, i8 %218, i64 32, i1 false) #5
  %234 = getelementptr inbounds i8, i8* %233, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %234, i8 %218, i64 32, i1 false) #5
  %235 = getelementptr inbounds i8, i8* %234, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %235, i8 %218, i64 32, i1 false) #5
  %236 = getelementptr inbounds i8, i8* %235, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %236, i8 %218, i64 32, i1 false) #5
  %237 = getelementptr inbounds i8, i8* %236, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %237, i8 %218, i64 32, i1 false) #5
  %238 = getelementptr inbounds i8, i8* %237, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %238, i8 %218, i64 32, i1 false) #5
  %239 = getelementptr inbounds i8, i8* %238, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %239, i8 %218, i64 32, i1 false) #5
  %240 = getelementptr inbounds i8, i8* %239, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %240, i8 %218, i64 32, i1 false) #5
  %241 = getelementptr inbounds i8, i8* %240, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %241, i8 %218, i64 32, i1 false) #5
  %242 = getelementptr inbounds i8, i8* %241, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %242, i8 %218, i64 32, i1 false) #5
  %243 = getelementptr inbounds i8, i8* %242, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %243, i8 %218, i64 32, i1 false) #5
  %244 = getelementptr inbounds i8, i8* %243, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %244, i8 %218, i64 32, i1 false) #5
  %245 = getelementptr inbounds i8, i8* %244, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %245, i8 %218, i64 32, i1 false) #5
  %246 = getelementptr inbounds i8, i8* %245, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %246, i8 %218, i64 32, i1 false) #5
  %247 = getelementptr inbounds i8, i8* %246, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %247, i8 %218, i64 32, i1 false) #5
  %248 = getelementptr inbounds i8, i8* %247, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %248, i8 %218, i64 32, i1 false) #5
  %249 = getelementptr inbounds i8, i8* %248, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %249, i8 %218, i64 32, i1 false) #5
  %250 = getelementptr inbounds i8, i8* %249, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %250, i8 %218, i64 32, i1 false) #5
  %251 = getelementptr inbounds i8, i8* %250, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %251, i8 %218, i64 32, i1 false) #5
  %252 = getelementptr inbounds i8, i8* %251, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %252, i8 %218, i64 32, i1 false) #5
  %253 = getelementptr inbounds i8, i8* %252, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %253, i8 %218, i64 32, i1 false) #5
  %254 = getelementptr inbounds i8, i8* %253, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %254, i8 %218, i64 32, i1 false) #5
  %255 = getelementptr inbounds i8, i8* %254, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %255, i8 %218, i64 32, i1 false) #5
  %256 = getelementptr inbounds i8, i8* %255, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %256, i8 %218, i64 32, i1 false) #5
  %257 = getelementptr inbounds i8, i8* %256, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %257, i8 %218, i64 32, i1 false) #5
  %258 = getelementptr inbounds i8, i8* %257, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %258, i8 %218, i64 32, i1 false) #5
  %259 = getelementptr inbounds i8, i8* %258, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %259, i8 %218, i64 32, i1 false) #5
  %260 = getelementptr inbounds i8, i8* %259, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %260, i8 %218, i64 32, i1 false) #5
  %261 = getelementptr inbounds i8, i8* %260, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %261, i8 %218, i64 32, i1 false) #5
  %262 = getelementptr inbounds i8, i8* %261, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %262, i8 %218, i64 32, i1 false) #5
  %263 = getelementptr inbounds i8, i8* %262, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %263, i8 %218, i64 32, i1 false) #5
  %264 = getelementptr inbounds i8, i8* %263, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %264, i8 %218, i64 32, i1 false) #5
  %265 = getelementptr inbounds i8, i8* %264, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %265, i8 %218, i64 32, i1 false) #5
  %266 = getelementptr inbounds i8, i8* %265, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %266, i8 %218, i64 32, i1 false) #5
  %267 = getelementptr inbounds i8, i8* %266, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %267, i8 %218, i64 32, i1 false) #5
  %268 = getelementptr inbounds i8, i8* %267, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %268, i8 %218, i64 32, i1 false) #5
  %269 = getelementptr inbounds i8, i8* %268, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %269, i8 %218, i64 32, i1 false) #5
  %270 = getelementptr inbounds i8, i8* %269, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %270, i8 %218, i64 32, i1 false) #5
  %271 = getelementptr inbounds i8, i8* %270, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %271, i8 %218, i64 32, i1 false) #5
  %272 = getelementptr inbounds i8, i8* %271, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %272, i8 %218, i64 32, i1 false) #5
  %273 = getelementptr inbounds i8, i8* %272, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %273, i8 %218, i64 32, i1 false) #5
  %274 = getelementptr inbounds i8, i8* %273, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %274, i8 %218, i64 32, i1 false) #5
  %275 = getelementptr inbounds i8, i8* %274, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %275, i8 %218, i64 32, i1 false) #5
  %276 = getelementptr inbounds i8, i8* %275, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %276, i8 %218, i64 32, i1 false) #5
  %277 = getelementptr inbounds i8, i8* %276, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %277, i8 %218, i64 32, i1 false) #5
  %278 = getelementptr inbounds i8, i8* %277, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %278, i8 %218, i64 32, i1 false) #5
  %279 = getelementptr inbounds i8, i8* %278, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %279, i8 %218, i64 32, i1 false) #5
  %280 = getelementptr inbounds i8, i8* %279, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %280, i8 %218, i64 32, i1 false) #5
  %281 = getelementptr inbounds i8, i8* %280, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %281, i8 %218, i64 32, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 32, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 32, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 32, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 32, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 64
  br i1 %14, label %5, label %6
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i64 [ 0, %4 ], [ %40, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %39, %6 ]
  %9 = getelementptr inbounds i8, i8* %3, i64 %7
  %10 = load i8, i8* %9, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 %10, i64 32, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = or i64 %7, 1
  %13 = getelementptr inbounds i8, i8* %3, i64 %12
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 %14, i64 32, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %11, i64 %1
  %16 = or i64 %7, 2
  %17 = getelementptr inbounds i8, i8* %3, i64 %16
  %18 = load i8, i8* %17, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %18, i64 32, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %15, i64 %1
  %20 = or i64 %7, 3
  %21 = getelementptr inbounds i8, i8* %3, i64 %20
  %22 = load i8, i8* %21, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %22, i64 32, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %19, i64 %1
  %24 = or i64 %7, 4
  %25 = getelementptr inbounds i8, i8* %3, i64 %24
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %26, i64 32, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %23, i64 %1
  %28 = or i64 %7, 5
  %29 = getelementptr inbounds i8, i8* %3, i64 %28
  %30 = load i8, i8* %29, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %30, i64 32, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %27, i64 %1
  %32 = or i64 %7, 6
  %33 = getelementptr inbounds i8, i8* %3, i64 %32
  %34 = load i8, i8* %33, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %34, i64 32, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %31, i64 %1
  %36 = or i64 %7, 7
  %37 = getelementptr inbounds i8, i8* %3, i64 %36
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %38, i64 32, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %35, i64 %1
  %40 = add nuw nsw i64 %7, 8
  %41 = icmp eq i64 %40, 64
  br i1 %41, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 64
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 63
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 32
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %16 = getelementptr inbounds i8, i8* %2, i64 16
  %17 = bitcast i8* %16 to <16 x i8>*
  %18 = mul nuw nsw <16 x i32> %13, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  br label %19

19:                                               ; preds = %78, %4
  %20 = phi i64 [ 0, %4 ], [ %80, %78 ]
  %21 = phi i8* [ %0, %4 ], [ %79, %78 ]
  %22 = mul i64 %20, %1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = add i64 %22, 32
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %20
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, i8* %3, i64 %20
  %30 = sub i8 0, %27
  %31 = zext i8 %30 to i32
  %32 = mul nuw nsw i32 %31, %9
  %33 = add nuw nsw i32 %32, 256
  %34 = add nuw i64 %20, 1
  %35 = getelementptr i8, i8* %3, i64 %34
  %36 = icmp ult i8* %23, %11
  %37 = icmp ugt i8* %25, %2
  %38 = and i1 %36, %37
  %39 = icmp ult i8* %23, %35
  %40 = icmp ult i8* %29, %25
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  br i1 %42, label %82, label %43

43:                                               ; preds = %19
  %44 = insertelement <16 x i32> undef, i32 %28, i32 0
  %45 = shufflevector <16 x i32> %44, <16 x i32> undef, <16 x i32> zeroinitializer
  %46 = insertelement <16 x i32> undef, i32 %33, i32 0
  %47 = shufflevector <16 x i32> %46, <16 x i32> undef, <16 x i32> zeroinitializer
  %48 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !312
  %49 = zext <16 x i8> %48 to <16 x i32>
  %50 = mul nuw nsw <16 x i32> %45, %49
  %51 = load i8, i8* %29, align 1, !alias.scope !315
  %52 = insertelement <16 x i8> undef, i8 %51, i32 0
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> zeroinitializer
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %56 = add nuw nsw <16 x i32> %47, %50
  %57 = add nuw nsw <16 x i32> %56, %15
  %58 = add nuw nsw <16 x i32> %57, %55
  %59 = lshr <16 x i32> %58, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %60 = trunc <16 x i32> %59 to <16 x i8>
  %61 = bitcast i8* %21 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %61, align 1, !alias.scope !317, !noalias !319
  %62 = load <16 x i8>, <16 x i8>* %17, align 1, !alias.scope !312
  %63 = zext <16 x i8> %62 to <16 x i32>
  %64 = mul nuw nsw <16 x i32> %45, %63
  %65 = load i8, i8* %29, align 1, !alias.scope !315
  %66 = insertelement <16 x i8> undef, i8 %65, i32 0
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> zeroinitializer
  %68 = zext <16 x i8> %67 to <16 x i32>
  %69 = mul nuw nsw <16 x i32> %68, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %70 = add nuw nsw <16 x i32> %47, %64
  %71 = add nuw nsw <16 x i32> %70, %18
  %72 = add nuw nsw <16 x i32> %71, %69
  %73 = lshr <16 x i32> %72, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %74 = trunc <16 x i32> %73 to <16 x i8>
  %75 = getelementptr inbounds i8, i8* %21, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %74, <16 x i8>* %76, align 1, !alias.scope !317, !noalias !319
  br label %78

77:                                               ; preds = %78
  ret void

78:                                               ; preds = %82, %43
  %79 = getelementptr inbounds i8, i8* %21, i64 %1
  %80 = add nuw nsw i64 %20, 1
  %81 = icmp eq i64 %80, 64
  br i1 %81, label %77, label %19

82:                                               ; preds = %19, %82
  %83 = phi i64 [ %103, %82 ], [ 0, %19 ]
  %84 = getelementptr inbounds i8, i8* %2, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %86, %28
  %88 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %83
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = load i8, i8* %29, align 1
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, %90
  %94 = sub i8 0, %89
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, %10
  %97 = add nuw nsw i32 %33, %87
  %98 = add nuw nsw i32 %97, %96
  %99 = add nuw nsw i32 %98, %93
  %100 = lshr i32 %99, 9
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds i8, i8* %21, i64 %83
  store i8 %101, i8* %102, align 1
  %103 = add nuw nsw i64 %83, 1
  %104 = icmp eq i64 %103, 32
  br i1 %104, label %78, label %82, !llvm.loop !320
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr i8, i8* %2, i64 32
  %9 = bitcast i8* %2 to <16 x i8>*
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to <16 x i8>*
  br label %12

12:                                               ; preds = %50, %4
  %13 = phi i64 [ 0, %4 ], [ %52, %50 ]
  %14 = phi i8* [ %0, %4 ], [ %51, %50 ]
  %15 = mul i64 %13, %1
  %16 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %13
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub i8 0, %17
  %20 = zext i8 %19 to i32
  %21 = mul nuw nsw i32 %20, %7
  %22 = add nuw nsw i32 %21, 128
  %23 = add i64 %15, 32
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = getelementptr i8, i8* %0, i64 %15
  %26 = icmp ult i8* %25, %8
  %27 = icmp ugt i8* %24, %2
  %28 = and i1 %26, %27
  br i1 %28, label %54, label %29

29:                                               ; preds = %12
  %30 = insertelement <16 x i32> undef, i32 %18, i32 0
  %31 = shufflevector <16 x i32> %30, <16 x i32> undef, <16 x i32> zeroinitializer
  %32 = insertelement <16 x i32> undef, i32 %22, i32 0
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  %34 = load <16 x i8>, <16 x i8>* %9, align 1, !alias.scope !321
  %35 = zext <16 x i8> %34 to <16 x i32>
  %36 = mul nuw nsw <16 x i32> %31, %35
  %37 = add nuw nsw <16 x i32> %33, %36
  %38 = lshr <16 x i32> %37, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %39 = trunc <16 x i32> %38 to <16 x i8>
  %40 = bitcast i8* %14 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %40, align 1, !alias.scope !324, !noalias !321
  %41 = load <16 x i8>, <16 x i8>* %11, align 1, !alias.scope !321
  %42 = zext <16 x i8> %41 to <16 x i32>
  %43 = mul nuw nsw <16 x i32> %31, %42
  %44 = add nuw nsw <16 x i32> %33, %43
  %45 = lshr <16 x i32> %44, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %46 = trunc <16 x i32> %45 to <16 x i8>
  %47 = getelementptr inbounds i8, i8* %14, i64 16
  %48 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %48, align 1, !alias.scope !324, !noalias !321
  br label %50

49:                                               ; preds = %50
  ret void

50:                                               ; preds = %54, %29
  %51 = getelementptr inbounds i8, i8* %14, i64 %1
  %52 = add nuw nsw i64 %13, 1
  %53 = icmp eq i64 %52, 64
  br i1 %53, label %49, label %12

54:                                               ; preds = %12, %54
  %55 = phi i64 [ %73, %54 ], [ 0, %12 ]
  %56 = getelementptr inbounds i8, i8* %2, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nuw nsw i32 %58, %18
  %60 = add nuw nsw i32 %22, %59
  %61 = lshr i32 %60, 8
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %14, i64 %55
  store i8 %62, i8* %63, align 1
  %64 = or i64 %55, 1
  %65 = getelementptr inbounds i8, i8* %2, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %67, %18
  %69 = add nuw nsw i32 %22, %68
  %70 = lshr i32 %69, 8
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %14, i64 %64
  store i8 %71, i8* %72, align 1
  %73 = add nuw nsw i64 %55, 2
  %74 = icmp eq i64 %73, 32
  br i1 %74, label %50, label %54, !llvm.loop !326
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <16 x i32> undef, i32 %7, i32 0
  %9 = shufflevector <16 x i32> %8, <16 x i32> undef, <16 x i32> zeroinitializer
  %10 = mul nuw nsw <16 x i32> %9, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99, i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %11 = add nuw nsw <16 x i32> %10, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %12 = mul nuw nsw <16 x i32> %9, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231, i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %13 = add nuw nsw <16 x i32> %12, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %14

14:                                               ; preds = %48, %4
  %15 = phi i64 [ 0, %4 ], [ %50, %48 ]
  %16 = phi i8* [ %0, %4 ], [ %49, %48 ]
  %17 = mul i64 %15, %1
  %18 = getelementptr inbounds i8, i8* %3, i64 %15
  %19 = add nuw i64 %15, 1
  %20 = getelementptr i8, i8* %3, i64 %19
  %21 = add i64 %17, 32
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = getelementptr i8, i8* %0, i64 %17
  %24 = icmp ult i8* %23, %20
  %25 = icmp ult i8* %18, %22
  %26 = and i1 %24, %25
  br i1 %26, label %52, label %27

27:                                               ; preds = %14
  %28 = load i8, i8* %18, align 1, !alias.scope !327
  %29 = insertelement <16 x i8> undef, i8 %28, i32 0
  %30 = shufflevector <16 x i8> %29, <16 x i8> undef, <16 x i32> zeroinitializer
  %31 = zext <16 x i8> %30 to <16 x i32>
  %32 = mul nuw nsw <16 x i32> %31, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157, i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %33 = add nuw nsw <16 x i32> %11, %32
  %34 = lshr <16 x i32> %33, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %35 = trunc <16 x i32> %34 to <16 x i8>
  %36 = bitcast i8* %16 to <16 x i8>*
  store <16 x i8> %35, <16 x i8>* %36, align 1, !alias.scope !330, !noalias !327
  %37 = load i8, i8* %18, align 1, !alias.scope !327
  %38 = insertelement <16 x i8> undef, i8 %37, i32 0
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> zeroinitializer
  %40 = zext <16 x i8> %39 to <16 x i32>
  %41 = mul nuw nsw <16 x i32> %40, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25, i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %42 = add nuw nsw <16 x i32> %13, %41
  %43 = lshr <16 x i32> %42, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %44 = trunc <16 x i32> %43 to <16 x i8>
  %45 = getelementptr inbounds i8, i8* %16, i64 16
  %46 = bitcast i8* %45 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %46, align 1, !alias.scope !330, !noalias !327
  br label %48

47:                                               ; preds = %48
  ret void

48:                                               ; preds = %52, %27
  %49 = getelementptr inbounds i8, i8* %16, i64 %1
  %50 = add nuw nsw i64 %15, 1
  %51 = icmp eq i64 %50, 64
  br i1 %51, label %47, label %14

52:                                               ; preds = %14, %52
  %53 = phi i64 [ %83, %52 ], [ 0, %14 ]
  %54 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %53
  %55 = load i8, i8* %54, align 2
  %56 = zext i8 %55 to i32
  %57 = load i8, i8* %18, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nuw nsw i32 %58, %56
  %60 = sub i8 0, %55
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %7
  %63 = add nuw nsw i32 %62, 128
  %64 = add nuw nsw i32 %63, %59
  %65 = lshr i32 %64, 8
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %16, i64 %53
  store i8 %66, i8* %67, align 1
  %68 = or i64 %53, 1
  %69 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = load i8, i8* %18, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nuw nsw i32 %73, %71
  %75 = sub i8 0, %70
  %76 = zext i8 %75 to i32
  %77 = mul nuw nsw i32 %76, %7
  %78 = add nuw nsw i32 %77, 128
  %79 = add nuw nsw i32 %78, %74
  %80 = lshr i32 %79, 8
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %16, i64 %68
  store i8 %81, i8* %82, align 1
  %83 = add nuw nsw i64 %53, 2
  %84 = icmp eq i64 %83, 32
  br i1 %84, label %48, label %52, !llvm.loop !332
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi16ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 64, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 64, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 64, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 64, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 64, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 64, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 64, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 64, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 64, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 64, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 64, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 64, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 64, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 64, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 64, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <4 x i8>*
  %6 = load <4 x i8>, <4 x i8>* %5, align 1
  %7 = zext <4 x i8> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 4
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = zext <4 x i8> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = zext <4 x i8> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 16
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 20
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 28
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = zext <4 x i8> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 32
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 36
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 40
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 44
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 48
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 52
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 56
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 60
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = trunc i32 %89 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %90, i64 64, i1 false) #5
  %91 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %90, i64 64, i1 false) #5
  %92 = getelementptr inbounds i8, i8* %91, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %92, i8 %90, i64 64, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %92, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %90, i64 64, i1 false) #5
  %94 = getelementptr inbounds i8, i8* %93, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %90, i64 64, i1 false) #5
  %95 = getelementptr inbounds i8, i8* %94, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %90, i64 64, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %95, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %90, i64 64, i1 false) #5
  %97 = getelementptr inbounds i8, i8* %96, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %90, i64 64, i1 false) #5
  %98 = getelementptr inbounds i8, i8* %97, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 %90, i64 64, i1 false) #5
  %99 = getelementptr inbounds i8, i8* %98, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 %90, i64 64, i1 false) #5
  %100 = getelementptr inbounds i8, i8* %99, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 %90, i64 64, i1 false) #5
  %101 = getelementptr inbounds i8, i8* %100, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %90, i64 64, i1 false) #5
  %102 = getelementptr inbounds i8, i8* %101, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 %90, i64 64, i1 false) #5
  %103 = getelementptr inbounds i8, i8* %102, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 %90, i64 64, i1 false) #5
  %104 = getelementptr inbounds i8, i8* %103, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %90, i64 64, i1 false) #5
  %105 = getelementptr inbounds i8, i8* %104, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 %90, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = zext <16 x i8> %6 to <16 x i32>
  %8 = shufflevector <16 x i32> %7, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <16 x i32> %8, %7
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <16 x i32> %9, %10
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <16 x i32> %13, %14
  %16 = extractelement <16 x i32> %15, i32 0
  %17 = add nuw nsw i32 %16, 8
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %19, i64 64, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 %19, i64 64, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %19, i64 64, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %19, i64 64, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %19, i64 64, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %19, i64 64, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %19, i64 64, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %19, i64 64, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %19, i64 64, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %19, i64 64, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %19, i64 64, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %19, i64 64, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %19, i64 64, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %19, i64 64, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %19, i64 64, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %19, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <4 x i8>*
  %6 = load <4 x i8>, <4 x i8>* %5, align 1
  %7 = zext <4 x i8> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 40, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 4
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = zext <4 x i8> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = zext <4 x i8> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 16
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 20
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 28
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = zext <4 x i8> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 32
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 36
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 40
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 44
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 48
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 52
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 56
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 60
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = load i8, i8* %3, align 1
  %90 = zext i8 %89 to i32
  %91 = add nuw nsw i32 %88, %90
  %92 = getelementptr inbounds i8, i8* %3, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nuw nsw i32 %91, %94
  %96 = getelementptr inbounds i8, i8* %3, i64 2
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nuw nsw i32 %95, %98
  %100 = getelementptr inbounds i8, i8* %3, i64 3
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i32 %99, %102
  %104 = getelementptr inbounds i8, i8* %3, i64 4
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = add nuw nsw i32 %103, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 5
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nuw nsw i32 %107, %110
  %112 = getelementptr inbounds i8, i8* %3, i64 6
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nuw nsw i32 %111, %114
  %116 = getelementptr inbounds i8, i8* %3, i64 7
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add nuw nsw i32 %115, %118
  %120 = getelementptr inbounds i8, i8* %3, i64 8
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = add nuw nsw i32 %119, %122
  %124 = getelementptr inbounds i8, i8* %3, i64 9
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add nuw nsw i32 %123, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 10
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = add nuw nsw i32 %127, %130
  %132 = getelementptr inbounds i8, i8* %3, i64 11
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add nuw nsw i32 %131, %134
  %136 = getelementptr inbounds i8, i8* %3, i64 12
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = add nuw nsw i32 %135, %138
  %140 = getelementptr inbounds i8, i8* %3, i64 13
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = add nuw nsw i32 %139, %142
  %144 = getelementptr inbounds i8, i8* %3, i64 14
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = add nuw nsw i32 %143, %146
  %148 = getelementptr inbounds i8, i8* %3, i64 15
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = add nuw nsw i32 %147, %150
  %152 = udiv i32 %151, 80
  %153 = trunc i32 %152 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %153, i64 64, i1 false) #5
  %154 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %154, i8 %153, i64 64, i1 false) #5
  %155 = getelementptr inbounds i8, i8* %154, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %155, i8 %153, i64 64, i1 false) #5
  %156 = getelementptr inbounds i8, i8* %155, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %156, i8 %153, i64 64, i1 false) #5
  %157 = getelementptr inbounds i8, i8* %156, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %157, i8 %153, i64 64, i1 false) #5
  %158 = getelementptr inbounds i8, i8* %157, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %158, i8 %153, i64 64, i1 false) #5
  %159 = getelementptr inbounds i8, i8* %158, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %159, i8 %153, i64 64, i1 false) #5
  %160 = getelementptr inbounds i8, i8* %159, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %160, i8 %153, i64 64, i1 false) #5
  %161 = getelementptr inbounds i8, i8* %160, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %161, i8 %153, i64 64, i1 false) #5
  %162 = getelementptr inbounds i8, i8* %161, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %162, i8 %153, i64 64, i1 false) #5
  %163 = getelementptr inbounds i8, i8* %162, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %163, i8 %153, i64 64, i1 false) #5
  %164 = getelementptr inbounds i8, i8* %163, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %164, i8 %153, i64 64, i1 false) #5
  %165 = getelementptr inbounds i8, i8* %164, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %165, i8 %153, i64 64, i1 false) #5
  %166 = getelementptr inbounds i8, i8* %165, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %166, i8 %153, i64 64, i1 false) #5
  %167 = getelementptr inbounds i8, i8* %166, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %167, i8 %153, i64 64, i1 false) #5
  %168 = getelementptr inbounds i8, i8* %167, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %168, i8 %153, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 64, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 64, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 64, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 64, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 64, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 64, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 64, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 64, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %2, i64 64, i1 false)
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %2, i64 64, i1 false)
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %2, i64 64, i1 false)
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %2, i64 64, i1 false)
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %2, i64 64, i1 false)
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %2, i64 64, i1 false)
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %2, i64 64, i1 false)
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %2, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 64, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 64, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 64, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 64, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 64, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 64, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 64, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 64, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %24, i64 %1
  %28 = getelementptr inbounds i8, i8* %3, i64 8
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 64, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %27, i64 %1
  %31 = getelementptr inbounds i8, i8* %3, i64 9
  %32 = load i8, i8* %31, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 64, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %30, i64 %1
  %34 = getelementptr inbounds i8, i8* %3, i64 10
  %35 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %35, i64 64, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %33, i64 %1
  %37 = getelementptr inbounds i8, i8* %3, i64 11
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 64, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %36, i64 %1
  %40 = getelementptr inbounds i8, i8* %3, i64 12
  %41 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %41, i64 64, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 13
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 64, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %42, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 14
  %47 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %47, i64 64, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %45, i64 %1
  %49 = getelementptr inbounds i8, i8* %3, i64 15
  %50 = load i8, i8* %49, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 16
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 15
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 64
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53, i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %16 = getelementptr inbounds i8, i8* %2, i64 16
  %17 = bitcast i8* %16 to <16 x i8>*
  %18 = mul nuw nsw <16 x i32> %13, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150, i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %19 = getelementptr inbounds i8, i8* %2, i64 32
  %20 = bitcast i8* %19 to <16 x i8>*
  %21 = mul nuw nsw <16 x i32> %13, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215, i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %22 = getelementptr inbounds i8, i8* %2, i64 48
  %23 = bitcast i8* %22 to <16 x i8>*
  %24 = mul nuw nsw <16 x i32> %13, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248, i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  br label %25

25:                                               ; preds = %114, %4
  %26 = phi i64 [ 0, %4 ], [ %116, %114 ]
  %27 = phi i8* [ %0, %4 ], [ %115, %114 ]
  %28 = mul i64 %26, %1
  %29 = getelementptr i8, i8* %0, i64 %28
  %30 = add i64 %28, 64
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %26
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %3, i64 %26
  %36 = sub i8 0, %33
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %37, %9
  %39 = add nuw nsw i32 %38, 256
  %40 = add nuw i64 %26, 1
  %41 = getelementptr i8, i8* %3, i64 %40
  %42 = icmp ult i8* %29, %11
  %43 = icmp ugt i8* %31, %2
  %44 = and i1 %42, %43
  %45 = icmp ult i8* %29, %41
  %46 = icmp ult i8* %35, %31
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  br i1 %48, label %118, label %49

49:                                               ; preds = %25
  %50 = insertelement <16 x i32> undef, i32 %34, i32 0
  %51 = shufflevector <16 x i32> %50, <16 x i32> undef, <16 x i32> zeroinitializer
  %52 = insertelement <16 x i32> undef, i32 %39, i32 0
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <16 x i32> zeroinitializer
  %54 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !333
  %55 = zext <16 x i8> %54 to <16 x i32>
  %56 = mul nuw nsw <16 x i32> %51, %55
  %57 = load i8, i8* %35, align 1, !alias.scope !336
  %58 = insertelement <16 x i8> undef, i8 %57, i32 0
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <16 x i32> zeroinitializer
  %60 = zext <16 x i8> %59 to <16 x i32>
  %61 = mul nuw nsw <16 x i32> %60, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203, i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %62 = add nuw nsw <16 x i32> %53, %56
  %63 = add nuw nsw <16 x i32> %62, %15
  %64 = add nuw nsw <16 x i32> %63, %61
  %65 = lshr <16 x i32> %64, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %66 = trunc <16 x i32> %65 to <16 x i8>
  %67 = bitcast i8* %27 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %67, align 1, !alias.scope !338, !noalias !340
  %68 = load <16 x i8>, <16 x i8>* %17, align 1, !alias.scope !333
  %69 = zext <16 x i8> %68 to <16 x i32>
  %70 = mul nuw nsw <16 x i32> %51, %69
  %71 = load i8, i8* %35, align 1, !alias.scope !336
  %72 = insertelement <16 x i8> undef, i8 %71, i32 0
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <16 x i32> zeroinitializer
  %74 = zext <16 x i8> %73 to <16 x i32>
  %75 = mul nuw nsw <16 x i32> %74, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106, i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %76 = add nuw nsw <16 x i32> %53, %70
  %77 = add nuw nsw <16 x i32> %76, %18
  %78 = add nuw nsw <16 x i32> %77, %75
  %79 = lshr <16 x i32> %78, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %80 = trunc <16 x i32> %79 to <16 x i8>
  %81 = getelementptr inbounds i8, i8* %27, i64 16
  %82 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %82, align 1, !alias.scope !338, !noalias !340
  %83 = load <16 x i8>, <16 x i8>* %20, align 1, !alias.scope !333
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = mul nuw nsw <16 x i32> %51, %84
  %86 = load i8, i8* %35, align 1, !alias.scope !336
  %87 = insertelement <16 x i8> undef, i8 %86, i32 0
  %88 = shufflevector <16 x i8> %87, <16 x i8> undef, <16 x i32> zeroinitializer
  %89 = zext <16 x i8> %88 to <16 x i32>
  %90 = mul nuw nsw <16 x i32> %89, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41, i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %91 = add nuw nsw <16 x i32> %53, %85
  %92 = add nuw nsw <16 x i32> %91, %21
  %93 = add nuw nsw <16 x i32> %92, %90
  %94 = lshr <16 x i32> %93, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %95 = trunc <16 x i32> %94 to <16 x i8>
  %96 = getelementptr inbounds i8, i8* %27, i64 32
  %97 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %97, align 1, !alias.scope !338, !noalias !340
  %98 = load <16 x i8>, <16 x i8>* %23, align 1, !alias.scope !333
  %99 = zext <16 x i8> %98 to <16 x i32>
  %100 = mul nuw nsw <16 x i32> %51, %99
  %101 = load i8, i8* %35, align 1, !alias.scope !336
  %102 = insertelement <16 x i8> undef, i8 %101, i32 0
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> zeroinitializer
  %104 = zext <16 x i8> %103 to <16 x i32>
  %105 = mul nuw nsw <16 x i32> %104, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %106 = add nuw nsw <16 x i32> %53, %100
  %107 = add nuw nsw <16 x i32> %106, %24
  %108 = add nuw nsw <16 x i32> %107, %105
  %109 = lshr <16 x i32> %108, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %110 = trunc <16 x i32> %109 to <16 x i8>
  %111 = getelementptr inbounds i8, i8* %27, i64 48
  %112 = bitcast i8* %111 to <16 x i8>*
  store <16 x i8> %110, <16 x i8>* %112, align 1, !alias.scope !338, !noalias !340
  br label %114

113:                                              ; preds = %114
  ret void

114:                                              ; preds = %118, %49
  %115 = getelementptr inbounds i8, i8* %27, i64 %1
  %116 = add nuw nsw i64 %26, 1
  %117 = icmp eq i64 %116, 16
  br i1 %117, label %113, label %25

118:                                              ; preds = %25, %118
  %119 = phi i64 [ %139, %118 ], [ 0, %25 ]
  %120 = getelementptr inbounds i8, i8* %2, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = mul nuw nsw i32 %122, %34
  %124 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %119
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = load i8, i8* %35, align 1
  %128 = zext i8 %127 to i32
  %129 = mul nuw nsw i32 %128, %126
  %130 = sub i8 0, %125
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %10
  %133 = add nuw nsw i32 %39, %123
  %134 = add nuw nsw i32 %133, %132
  %135 = add nuw nsw i32 %134, %129
  %136 = lshr i32 %135, 9
  %137 = trunc i32 %136 to i8
  %138 = getelementptr inbounds i8, i8* %27, i64 %119
  store i8 %137, i8* %138, align 1
  %139 = add nuw nsw i64 %119, 1
  %140 = icmp eq i64 %139, 64
  br i1 %140, label %114, label %118, !llvm.loop !341
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 15
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr i8, i8* %2, i64 64
  %9 = bitcast i8* %2 to <16 x i8>*
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to <16 x i8>*
  %12 = getelementptr inbounds i8, i8* %2, i64 32
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = getelementptr inbounds i8, i8* %2, i64 48
  %15 = bitcast i8* %14 to <16 x i8>*
  br label %16

16:                                               ; preds = %70, %4
  %17 = phi i64 [ 0, %4 ], [ %72, %70 ]
  %18 = phi i8* [ %0, %4 ], [ %71, %70 ]
  %19 = mul i64 %17, %1
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %17
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = sub i8 0, %21
  %24 = zext i8 %23 to i32
  %25 = mul nuw nsw i32 %24, %7
  %26 = add nuw nsw i32 %25, 128
  %27 = add i64 %19, 64
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 %19
  %30 = icmp ult i8* %29, %8
  %31 = icmp ugt i8* %28, %2
  %32 = and i1 %30, %31
  br i1 %32, label %74, label %33

33:                                               ; preds = %16
  %34 = insertelement <16 x i32> undef, i32 %22, i32 0
  %35 = shufflevector <16 x i32> %34, <16 x i32> undef, <16 x i32> zeroinitializer
  %36 = insertelement <16 x i32> undef, i32 %26, i32 0
  %37 = shufflevector <16 x i32> %36, <16 x i32> undef, <16 x i32> zeroinitializer
  %38 = load <16 x i8>, <16 x i8>* %9, align 1, !alias.scope !342
  %39 = zext <16 x i8> %38 to <16 x i32>
  %40 = mul nuw nsw <16 x i32> %35, %39
  %41 = add nuw nsw <16 x i32> %37, %40
  %42 = lshr <16 x i32> %41, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %43 = trunc <16 x i32> %42 to <16 x i8>
  %44 = bitcast i8* %18 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %44, align 1, !alias.scope !345, !noalias !342
  %45 = load <16 x i8>, <16 x i8>* %11, align 1, !alias.scope !342
  %46 = zext <16 x i8> %45 to <16 x i32>
  %47 = mul nuw nsw <16 x i32> %35, %46
  %48 = add nuw nsw <16 x i32> %37, %47
  %49 = lshr <16 x i32> %48, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %50 = trunc <16 x i32> %49 to <16 x i8>
  %51 = getelementptr inbounds i8, i8* %18, i64 16
  %52 = bitcast i8* %51 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %52, align 1, !alias.scope !345, !noalias !342
  %53 = load <16 x i8>, <16 x i8>* %13, align 1, !alias.scope !342
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %35, %54
  %56 = add nuw nsw <16 x i32> %37, %55
  %57 = lshr <16 x i32> %56, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %58 = trunc <16 x i32> %57 to <16 x i8>
  %59 = getelementptr inbounds i8, i8* %18, i64 32
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1, !alias.scope !345, !noalias !342
  %61 = load <16 x i8>, <16 x i8>* %15, align 1, !alias.scope !342
  %62 = zext <16 x i8> %61 to <16 x i32>
  %63 = mul nuw nsw <16 x i32> %35, %62
  %64 = add nuw nsw <16 x i32> %37, %63
  %65 = lshr <16 x i32> %64, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %66 = trunc <16 x i32> %65 to <16 x i8>
  %67 = getelementptr inbounds i8, i8* %18, i64 48
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %68, align 1, !alias.scope !345, !noalias !342
  br label %70

69:                                               ; preds = %70
  ret void

70:                                               ; preds = %74, %33
  %71 = getelementptr inbounds i8, i8* %18, i64 %1
  %72 = add nuw nsw i64 %17, 1
  %73 = icmp eq i64 %72, 16
  br i1 %73, label %69, label %16

74:                                               ; preds = %16, %74
  %75 = phi i64 [ %93, %74 ], [ 0, %16 ]
  %76 = getelementptr inbounds i8, i8* %2, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = mul nuw nsw i32 %78, %22
  %80 = add nuw nsw i32 %26, %79
  %81 = lshr i32 %80, 8
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %18, i64 %75
  store i8 %82, i8* %83, align 1
  %84 = or i64 %75, 1
  %85 = getelementptr inbounds i8, i8* %2, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = mul nuw nsw i32 %87, %22
  %89 = add nuw nsw i32 %26, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %18, i64 %84
  store i8 %91, i8* %92, align 1
  %93 = add nuw nsw i64 %75, 2
  %94 = icmp eq i64 %93, 64
  br i1 %94, label %70, label %74, !llvm.loop !347
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <16 x i32> undef, i32 %7, i32 0
  %9 = shufflevector <16 x i32> %8, <16 x i32> undef, <16 x i32> zeroinitializer
  %10 = mul nuw nsw <16 x i32> %9, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53, i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %11 = add nuw nsw <16 x i32> %10, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %12 = mul nuw nsw <16 x i32> %9, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150, i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %13 = add nuw nsw <16 x i32> %12, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %14 = mul nuw nsw <16 x i32> %9, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215, i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %15 = add nuw nsw <16 x i32> %14, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %16 = mul nuw nsw <16 x i32> %9, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248, i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  %17 = add nuw nsw <16 x i32> %16, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %18

18:                                               ; preds = %72, %4
  %19 = phi i64 [ 0, %4 ], [ %74, %72 ]
  %20 = phi i8* [ %0, %4 ], [ %73, %72 ]
  %21 = mul i64 %19, %1
  %22 = getelementptr inbounds i8, i8* %3, i64 %19
  %23 = add nuw i64 %19, 1
  %24 = getelementptr i8, i8* %3, i64 %23
  %25 = add i64 %21, 64
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = getelementptr i8, i8* %0, i64 %21
  %28 = icmp ult i8* %27, %24
  %29 = icmp ult i8* %22, %26
  %30 = and i1 %28, %29
  br i1 %30, label %76, label %31

31:                                               ; preds = %18
  %32 = load i8, i8* %22, align 1, !alias.scope !348
  %33 = insertelement <16 x i8> undef, i8 %32, i32 0
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <16 x i32> zeroinitializer
  %35 = zext <16 x i8> %34 to <16 x i32>
  %36 = mul nuw nsw <16 x i32> %35, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203, i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %37 = add nuw nsw <16 x i32> %11, %36
  %38 = lshr <16 x i32> %37, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %39 = trunc <16 x i32> %38 to <16 x i8>
  %40 = bitcast i8* %20 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %40, align 1, !alias.scope !351, !noalias !348
  %41 = load i8, i8* %22, align 1, !alias.scope !348
  %42 = insertelement <16 x i8> undef, i8 %41, i32 0
  %43 = shufflevector <16 x i8> %42, <16 x i8> undef, <16 x i32> zeroinitializer
  %44 = zext <16 x i8> %43 to <16 x i32>
  %45 = mul nuw nsw <16 x i32> %44, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106, i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %46 = add nuw nsw <16 x i32> %13, %45
  %47 = lshr <16 x i32> %46, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %48 = trunc <16 x i32> %47 to <16 x i8>
  %49 = getelementptr inbounds i8, i8* %20, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %48, <16 x i8>* %50, align 1, !alias.scope !351, !noalias !348
  %51 = load i8, i8* %22, align 1, !alias.scope !348
  %52 = insertelement <16 x i8> undef, i8 %51, i32 0
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> zeroinitializer
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41, i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %56 = add nuw nsw <16 x i32> %15, %55
  %57 = lshr <16 x i32> %56, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %58 = trunc <16 x i32> %57 to <16 x i8>
  %59 = getelementptr inbounds i8, i8* %20, i64 32
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1, !alias.scope !351, !noalias !348
  %61 = load i8, i8* %22, align 1, !alias.scope !348
  %62 = insertelement <16 x i8> undef, i8 %61, i32 0
  %63 = shufflevector <16 x i8> %62, <16 x i8> undef, <16 x i32> zeroinitializer
  %64 = zext <16 x i8> %63 to <16 x i32>
  %65 = mul nuw nsw <16 x i32> %64, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %66 = add nuw nsw <16 x i32> %17, %65
  %67 = lshr <16 x i32> %66, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %68 = trunc <16 x i32> %67 to <16 x i8>
  %69 = getelementptr inbounds i8, i8* %20, i64 48
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %70, align 1, !alias.scope !351, !noalias !348
  br label %72

71:                                               ; preds = %72
  ret void

72:                                               ; preds = %76, %31
  %73 = getelementptr inbounds i8, i8* %20, i64 %1
  %74 = add nuw nsw i64 %19, 1
  %75 = icmp eq i64 %74, 16
  br i1 %75, label %71, label %18

76:                                               ; preds = %18, %76
  %77 = phi i64 [ %107, %76 ], [ 0, %18 ]
  %78 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %77
  %79 = load i8, i8* %78, align 2
  %80 = zext i8 %79 to i32
  %81 = load i8, i8* %22, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nuw nsw i32 %82, %80
  %84 = sub i8 0, %79
  %85 = zext i8 %84 to i32
  %86 = mul nuw nsw i32 %85, %7
  %87 = add nuw nsw i32 %86, 128
  %88 = add nuw nsw i32 %87, %83
  %89 = lshr i32 %88, 8
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds i8, i8* %20, i64 %77
  store i8 %90, i8* %91, align 1
  %92 = or i64 %77, 1
  %93 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = load i8, i8* %22, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nuw nsw i32 %97, %95
  %99 = sub i8 0, %94
  %100 = zext i8 %99 to i32
  %101 = mul nuw nsw i32 %100, %7
  %102 = add nuw nsw i32 %101, 128
  %103 = add nuw nsw i32 %102, %98
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %20, i64 %92
  store i8 %105, i8* %106, align 1
  %107 = add nuw nsw i64 %77, 2
  %108 = icmp eq i64 %107, 64
  br i1 %108, label %72, label %76, !llvm.loop !353
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi32ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 64, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 64, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 64, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 64, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 64, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 64, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 64, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 64, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 64, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 64, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 64, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 64, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 64, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 64, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 64, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 64, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 -128, i64 64, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 -128, i64 64, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -128, i64 64, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 -128, i64 64, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 -128, i64 64, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 -128, i64 64, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 -128, i64 64, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 -128, i64 64, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 -128, i64 64, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 -128, i64 64, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 -128, i64 64, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 -128, i64 64, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 -128, i64 64, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 -128, i64 64, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 -128, i64 64, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 -128, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <4 x i8>*
  %6 = load <4 x i8>, <4 x i8>* %5, align 1
  %7 = zext <4 x i8> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 4
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = zext <4 x i8> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = zext <4 x i8> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 16
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 20
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 28
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = zext <4 x i8> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 32
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 36
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 40
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 44
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 48
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 52
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 56
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 60
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = trunc i32 %89 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %90, i64 64, i1 false) #5
  %91 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %90, i64 64, i1 false) #5
  %92 = getelementptr inbounds i8, i8* %91, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %92, i8 %90, i64 64, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %92, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %90, i64 64, i1 false) #5
  %94 = getelementptr inbounds i8, i8* %93, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %90, i64 64, i1 false) #5
  %95 = getelementptr inbounds i8, i8* %94, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %90, i64 64, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %95, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %90, i64 64, i1 false) #5
  %97 = getelementptr inbounds i8, i8* %96, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %90, i64 64, i1 false) #5
  %98 = getelementptr inbounds i8, i8* %97, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 %90, i64 64, i1 false) #5
  %99 = getelementptr inbounds i8, i8* %98, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 %90, i64 64, i1 false) #5
  %100 = getelementptr inbounds i8, i8* %99, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 %90, i64 64, i1 false) #5
  %101 = getelementptr inbounds i8, i8* %100, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %90, i64 64, i1 false) #5
  %102 = getelementptr inbounds i8, i8* %101, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 %90, i64 64, i1 false) #5
  %103 = getelementptr inbounds i8, i8* %102, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 %90, i64 64, i1 false) #5
  %104 = getelementptr inbounds i8, i8* %103, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %90, i64 64, i1 false) #5
  %105 = getelementptr inbounds i8, i8* %104, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 %90, i64 64, i1 false) #5
  %106 = getelementptr inbounds i8, i8* %105, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 %90, i64 64, i1 false) #5
  %107 = getelementptr inbounds i8, i8* %106, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %90, i64 64, i1 false) #5
  %108 = getelementptr inbounds i8, i8* %107, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %108, i8 %90, i64 64, i1 false) #5
  %109 = getelementptr inbounds i8, i8* %108, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 %90, i64 64, i1 false) #5
  %110 = getelementptr inbounds i8, i8* %109, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 %90, i64 64, i1 false) #5
  %111 = getelementptr inbounds i8, i8* %110, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %111, i8 %90, i64 64, i1 false) #5
  %112 = getelementptr inbounds i8, i8* %111, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %112, i8 %90, i64 64, i1 false) #5
  %113 = getelementptr inbounds i8, i8* %112, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %113, i8 %90, i64 64, i1 false) #5
  %114 = getelementptr inbounds i8, i8* %113, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 %90, i64 64, i1 false) #5
  %115 = getelementptr inbounds i8, i8* %114, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %115, i8 %90, i64 64, i1 false) #5
  %116 = getelementptr inbounds i8, i8* %115, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %116, i8 %90, i64 64, i1 false) #5
  %117 = getelementptr inbounds i8, i8* %116, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %117, i8 %90, i64 64, i1 false) #5
  %118 = getelementptr inbounds i8, i8* %117, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %118, i8 %90, i64 64, i1 false) #5
  %119 = getelementptr inbounds i8, i8* %118, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %119, i8 %90, i64 64, i1 false) #5
  %120 = getelementptr inbounds i8, i8* %119, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %120, i8 %90, i64 64, i1 false) #5
  %121 = getelementptr inbounds i8, i8* %120, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 %90, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = zext <32 x i8> %6 to <32 x i32>
  %8 = shufflevector <32 x i32> %7, <32 x i32> undef, <32 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = add nuw nsw <32 x i32> %8, %7
  %10 = shufflevector <32 x i32> %9, <32 x i32> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %11 = add nuw nsw <32 x i32> %9, %10
  %12 = shufflevector <32 x i32> %11, <32 x i32> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nuw nsw <32 x i32> %11, %12
  %14 = shufflevector <32 x i32> %13, <32 x i32> undef, <32 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nuw nsw <32 x i32> %13, %14
  %16 = shufflevector <32 x i32> %15, <32 x i32> undef, <32 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nuw nsw <32 x i32> %15, %16
  %18 = extractelement <32 x i32> %17, i32 0
  %19 = add nuw nsw i32 %18, 16
  %20 = lshr i32 %19, 5
  %21 = trunc i32 %20 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %21, i64 64, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 %21, i64 64, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %21, i64 64, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %21, i64 64, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 %21, i64 64, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 %21, i64 64, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %21, i64 64, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 %21, i64 64, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 %21, i64 64, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %21, i64 64, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %21, i64 64, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 %21, i64 64, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %21, i64 64, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 %21, i64 64, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %21, i64 64, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %21, i64 64, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %21, i64 64, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %21, i64 64, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %21, i64 64, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %21, i64 64, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %21, i64 64, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %21, i64 64, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %21, i64 64, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 %21, i64 64, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %21, i64 64, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 %21, i64 64, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 %21, i64 64, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %21, i64 64, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %21, i64 64, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %21, i64 64, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %21, i64 64, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 %21, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <4 x i8>*
  %6 = load <4 x i8>, <4 x i8>* %5, align 1
  %7 = zext <4 x i8> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 48, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 4
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = zext <4 x i8> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = zext <4 x i8> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 16
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 20
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 28
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = zext <4 x i8> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 32
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 36
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 40
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 44
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 48
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 52
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 56
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 60
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = load i8, i8* %3, align 1
  %90 = zext i8 %89 to i32
  %91 = add nuw nsw i32 %88, %90
  %92 = getelementptr inbounds i8, i8* %3, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nuw nsw i32 %91, %94
  %96 = getelementptr inbounds i8, i8* %3, i64 2
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nuw nsw i32 %95, %98
  %100 = getelementptr inbounds i8, i8* %3, i64 3
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i32 %99, %102
  %104 = getelementptr inbounds i8, i8* %3, i64 4
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = add nuw nsw i32 %103, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 5
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nuw nsw i32 %107, %110
  %112 = getelementptr inbounds i8, i8* %3, i64 6
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nuw nsw i32 %111, %114
  %116 = getelementptr inbounds i8, i8* %3, i64 7
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add nuw nsw i32 %115, %118
  %120 = getelementptr inbounds i8, i8* %3, i64 8
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = add nuw nsw i32 %119, %122
  %124 = getelementptr inbounds i8, i8* %3, i64 9
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add nuw nsw i32 %123, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 10
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = add nuw nsw i32 %127, %130
  %132 = getelementptr inbounds i8, i8* %3, i64 11
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add nuw nsw i32 %131, %134
  %136 = getelementptr inbounds i8, i8* %3, i64 12
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = add nuw nsw i32 %135, %138
  %140 = getelementptr inbounds i8, i8* %3, i64 13
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = add nuw nsw i32 %139, %142
  %144 = getelementptr inbounds i8, i8* %3, i64 14
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = add nuw nsw i32 %143, %146
  %148 = getelementptr inbounds i8, i8* %3, i64 15
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = add nuw nsw i32 %147, %150
  %152 = getelementptr inbounds i8, i8* %3, i64 16
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = add nuw nsw i32 %151, %154
  %156 = getelementptr inbounds i8, i8* %3, i64 17
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = add nuw nsw i32 %155, %158
  %160 = getelementptr inbounds i8, i8* %3, i64 18
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = add nuw nsw i32 %159, %162
  %164 = getelementptr inbounds i8, i8* %3, i64 19
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = add nuw nsw i32 %163, %166
  %168 = getelementptr inbounds i8, i8* %3, i64 20
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = add nuw nsw i32 %167, %170
  %172 = getelementptr inbounds i8, i8* %3, i64 21
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = add nuw nsw i32 %171, %174
  %176 = getelementptr inbounds i8, i8* %3, i64 22
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = add nuw nsw i32 %175, %178
  %180 = getelementptr inbounds i8, i8* %3, i64 23
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = add nuw nsw i32 %179, %182
  %184 = getelementptr inbounds i8, i8* %3, i64 24
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = add nuw nsw i32 %183, %186
  %188 = getelementptr inbounds i8, i8* %3, i64 25
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = add nuw nsw i32 %187, %190
  %192 = getelementptr inbounds i8, i8* %3, i64 26
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = add nuw nsw i32 %191, %194
  %196 = getelementptr inbounds i8, i8* %3, i64 27
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i32
  %199 = add nuw nsw i32 %195, %198
  %200 = getelementptr inbounds i8, i8* %3, i64 28
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = add nuw nsw i32 %199, %202
  %204 = getelementptr inbounds i8, i8* %3, i64 29
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = add nuw nsw i32 %203, %206
  %208 = getelementptr inbounds i8, i8* %3, i64 30
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = add nuw nsw i32 %207, %210
  %212 = getelementptr inbounds i8, i8* %3, i64 31
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = add nuw nsw i32 %211, %214
  %216 = udiv i32 %215, 96
  %217 = trunc i32 %216 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %217, i64 64, i1 false) #5
  %218 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %218, i8 %217, i64 64, i1 false) #5
  %219 = getelementptr inbounds i8, i8* %218, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %219, i8 %217, i64 64, i1 false) #5
  %220 = getelementptr inbounds i8, i8* %219, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %220, i8 %217, i64 64, i1 false) #5
  %221 = getelementptr inbounds i8, i8* %220, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %221, i8 %217, i64 64, i1 false) #5
  %222 = getelementptr inbounds i8, i8* %221, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %222, i8 %217, i64 64, i1 false) #5
  %223 = getelementptr inbounds i8, i8* %222, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %223, i8 %217, i64 64, i1 false) #5
  %224 = getelementptr inbounds i8, i8* %223, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %224, i8 %217, i64 64, i1 false) #5
  %225 = getelementptr inbounds i8, i8* %224, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %225, i8 %217, i64 64, i1 false) #5
  %226 = getelementptr inbounds i8, i8* %225, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %226, i8 %217, i64 64, i1 false) #5
  %227 = getelementptr inbounds i8, i8* %226, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %227, i8 %217, i64 64, i1 false) #5
  %228 = getelementptr inbounds i8, i8* %227, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %228, i8 %217, i64 64, i1 false) #5
  %229 = getelementptr inbounds i8, i8* %228, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %229, i8 %217, i64 64, i1 false) #5
  %230 = getelementptr inbounds i8, i8* %229, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %230, i8 %217, i64 64, i1 false) #5
  %231 = getelementptr inbounds i8, i8* %230, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %231, i8 %217, i64 64, i1 false) #5
  %232 = getelementptr inbounds i8, i8* %231, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %232, i8 %217, i64 64, i1 false) #5
  %233 = getelementptr inbounds i8, i8* %232, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %233, i8 %217, i64 64, i1 false) #5
  %234 = getelementptr inbounds i8, i8* %233, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %234, i8 %217, i64 64, i1 false) #5
  %235 = getelementptr inbounds i8, i8* %234, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %235, i8 %217, i64 64, i1 false) #5
  %236 = getelementptr inbounds i8, i8* %235, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %236, i8 %217, i64 64, i1 false) #5
  %237 = getelementptr inbounds i8, i8* %236, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %237, i8 %217, i64 64, i1 false) #5
  %238 = getelementptr inbounds i8, i8* %237, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %238, i8 %217, i64 64, i1 false) #5
  %239 = getelementptr inbounds i8, i8* %238, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %239, i8 %217, i64 64, i1 false) #5
  %240 = getelementptr inbounds i8, i8* %239, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %240, i8 %217, i64 64, i1 false) #5
  %241 = getelementptr inbounds i8, i8* %240, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %241, i8 %217, i64 64, i1 false) #5
  %242 = getelementptr inbounds i8, i8* %241, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %242, i8 %217, i64 64, i1 false) #5
  %243 = getelementptr inbounds i8, i8* %242, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %243, i8 %217, i64 64, i1 false) #5
  %244 = getelementptr inbounds i8, i8* %243, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %244, i8 %217, i64 64, i1 false) #5
  %245 = getelementptr inbounds i8, i8* %244, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %245, i8 %217, i64 64, i1 false) #5
  %246 = getelementptr inbounds i8, i8* %245, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %246, i8 %217, i64 64, i1 false) #5
  %247 = getelementptr inbounds i8, i8* %246, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %247, i8 %217, i64 64, i1 false) #5
  %248 = getelementptr inbounds i8, i8* %247, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %248, i8 %217, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 64, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 64, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 64, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 64, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 32
  br i1 %14, label %5, label %6
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = load i8, i8* %3, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 64, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  %8 = load i8, i8* %7, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 %8, i64 64, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %6, i64 %1
  %10 = getelementptr inbounds i8, i8* %3, i64 2
  %11 = load i8, i8* %10, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %11, i64 64, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %9, i64 %1
  %13 = getelementptr inbounds i8, i8* %3, i64 3
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 %14, i64 64, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = getelementptr inbounds i8, i8* %3, i64 4
  %17 = load i8, i8* %16, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %17, i64 64, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %3, i64 5
  %20 = load i8, i8* %19, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 %20, i64 64, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  %22 = getelementptr inbounds i8, i8* %3, i64 6
  %23 = load i8, i8* %22, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 %23, i64 64, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %21, i64 %1
  %25 = getelementptr inbounds i8, i8* %3, i64 7
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %26, i64 64, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %24, i64 %1
  %28 = getelementptr inbounds i8, i8* %3, i64 8
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %29, i64 64, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %27, i64 %1
  %31 = getelementptr inbounds i8, i8* %3, i64 9
  %32 = load i8, i8* %31, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 %32, i64 64, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %30, i64 %1
  %34 = getelementptr inbounds i8, i8* %3, i64 10
  %35 = load i8, i8* %34, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 %35, i64 64, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %33, i64 %1
  %37 = getelementptr inbounds i8, i8* %3, i64 11
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %38, i64 64, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %36, i64 %1
  %40 = getelementptr inbounds i8, i8* %3, i64 12
  %41 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %41, i64 64, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  %43 = getelementptr inbounds i8, i8* %3, i64 13
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %44, i64 64, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %42, i64 %1
  %46 = getelementptr inbounds i8, i8* %3, i64 14
  %47 = load i8, i8* %46, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %47, i64 64, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %45, i64 %1
  %49 = getelementptr inbounds i8, i8* %3, i64 15
  %50 = load i8, i8* %49, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 %50, i64 64, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %48, i64 %1
  %52 = getelementptr inbounds i8, i8* %3, i64 16
  %53 = load i8, i8* %52, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 %53, i64 64, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %51, i64 %1
  %55 = getelementptr inbounds i8, i8* %3, i64 17
  %56 = load i8, i8* %55, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 %56, i64 64, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %54, i64 %1
  %58 = getelementptr inbounds i8, i8* %3, i64 18
  %59 = load i8, i8* %58, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %59, i64 64, i1 false) #5
  %60 = getelementptr inbounds i8, i8* %57, i64 %1
  %61 = getelementptr inbounds i8, i8* %3, i64 19
  %62 = load i8, i8* %61, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %62, i64 64, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %60, i64 %1
  %64 = getelementptr inbounds i8, i8* %3, i64 20
  %65 = load i8, i8* %64, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 %65, i64 64, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %63, i64 %1
  %67 = getelementptr inbounds i8, i8* %3, i64 21
  %68 = load i8, i8* %67, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 %68, i64 64, i1 false) #5
  %69 = getelementptr inbounds i8, i8* %66, i64 %1
  %70 = getelementptr inbounds i8, i8* %3, i64 22
  %71 = load i8, i8* %70, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 %71, i64 64, i1 false) #5
  %72 = getelementptr inbounds i8, i8* %69, i64 %1
  %73 = getelementptr inbounds i8, i8* %3, i64 23
  %74 = load i8, i8* %73, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %74, i64 64, i1 false) #5
  %75 = getelementptr inbounds i8, i8* %72, i64 %1
  %76 = getelementptr inbounds i8, i8* %3, i64 24
  %77 = load i8, i8* %76, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %77, i64 64, i1 false) #5
  %78 = getelementptr inbounds i8, i8* %75, i64 %1
  %79 = getelementptr inbounds i8, i8* %3, i64 25
  %80 = load i8, i8* %79, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %80, i64 64, i1 false) #5
  %81 = getelementptr inbounds i8, i8* %78, i64 %1
  %82 = getelementptr inbounds i8, i8* %3, i64 26
  %83 = load i8, i8* %82, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %81, i8 %83, i64 64, i1 false) #5
  %84 = getelementptr inbounds i8, i8* %81, i64 %1
  %85 = getelementptr inbounds i8, i8* %3, i64 27
  %86 = load i8, i8* %85, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %86, i64 64, i1 false) #5
  %87 = getelementptr inbounds i8, i8* %84, i64 %1
  %88 = getelementptr inbounds i8, i8* %3, i64 28
  %89 = load i8, i8* %88, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %87, i8 %89, i64 64, i1 false) #5
  %90 = getelementptr inbounds i8, i8* %87, i64 %1
  %91 = getelementptr inbounds i8, i8* %3, i64 29
  %92 = load i8, i8* %91, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %90, i8 %92, i64 64, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %90, i64 %1
  %94 = getelementptr inbounds i8, i8* %3, i64 30
  %95 = load i8, i8* %94, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %95, i64 64, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %93, i64 %1
  %97 = getelementptr inbounds i8, i8* %3, i64 31
  %98 = load i8, i8* %97, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %98, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 32
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 31
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 64
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53, i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %16 = getelementptr inbounds i8, i8* %2, i64 16
  %17 = bitcast i8* %16 to <16 x i8>*
  %18 = mul nuw nsw <16 x i32> %13, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150, i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %19 = getelementptr inbounds i8, i8* %2, i64 32
  %20 = bitcast i8* %19 to <16 x i8>*
  %21 = mul nuw nsw <16 x i32> %13, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215, i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %22 = getelementptr inbounds i8, i8* %2, i64 48
  %23 = bitcast i8* %22 to <16 x i8>*
  %24 = mul nuw nsw <16 x i32> %13, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248, i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  br label %25

25:                                               ; preds = %114, %4
  %26 = phi i64 [ 0, %4 ], [ %116, %114 ]
  %27 = phi i8* [ %0, %4 ], [ %115, %114 ]
  %28 = mul i64 %26, %1
  %29 = getelementptr i8, i8* %0, i64 %28
  %30 = add i64 %28, 64
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %26
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %3, i64 %26
  %36 = sub i8 0, %33
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %37, %9
  %39 = add nuw nsw i32 %38, 256
  %40 = add nuw i64 %26, 1
  %41 = getelementptr i8, i8* %3, i64 %40
  %42 = icmp ult i8* %29, %11
  %43 = icmp ugt i8* %31, %2
  %44 = and i1 %42, %43
  %45 = icmp ult i8* %29, %41
  %46 = icmp ult i8* %35, %31
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  br i1 %48, label %118, label %49

49:                                               ; preds = %25
  %50 = insertelement <16 x i32> undef, i32 %34, i32 0
  %51 = shufflevector <16 x i32> %50, <16 x i32> undef, <16 x i32> zeroinitializer
  %52 = insertelement <16 x i32> undef, i32 %39, i32 0
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <16 x i32> zeroinitializer
  %54 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !354
  %55 = zext <16 x i8> %54 to <16 x i32>
  %56 = mul nuw nsw <16 x i32> %51, %55
  %57 = load i8, i8* %35, align 1, !alias.scope !357
  %58 = insertelement <16 x i8> undef, i8 %57, i32 0
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <16 x i32> zeroinitializer
  %60 = zext <16 x i8> %59 to <16 x i32>
  %61 = mul nuw nsw <16 x i32> %60, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203, i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %62 = add nuw nsw <16 x i32> %53, %56
  %63 = add nuw nsw <16 x i32> %62, %15
  %64 = add nuw nsw <16 x i32> %63, %61
  %65 = lshr <16 x i32> %64, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %66 = trunc <16 x i32> %65 to <16 x i8>
  %67 = bitcast i8* %27 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %67, align 1, !alias.scope !359, !noalias !361
  %68 = load <16 x i8>, <16 x i8>* %17, align 1, !alias.scope !354
  %69 = zext <16 x i8> %68 to <16 x i32>
  %70 = mul nuw nsw <16 x i32> %51, %69
  %71 = load i8, i8* %35, align 1, !alias.scope !357
  %72 = insertelement <16 x i8> undef, i8 %71, i32 0
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <16 x i32> zeroinitializer
  %74 = zext <16 x i8> %73 to <16 x i32>
  %75 = mul nuw nsw <16 x i32> %74, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106, i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %76 = add nuw nsw <16 x i32> %53, %70
  %77 = add nuw nsw <16 x i32> %76, %18
  %78 = add nuw nsw <16 x i32> %77, %75
  %79 = lshr <16 x i32> %78, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %80 = trunc <16 x i32> %79 to <16 x i8>
  %81 = getelementptr inbounds i8, i8* %27, i64 16
  %82 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %82, align 1, !alias.scope !359, !noalias !361
  %83 = load <16 x i8>, <16 x i8>* %20, align 1, !alias.scope !354
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = mul nuw nsw <16 x i32> %51, %84
  %86 = load i8, i8* %35, align 1, !alias.scope !357
  %87 = insertelement <16 x i8> undef, i8 %86, i32 0
  %88 = shufflevector <16 x i8> %87, <16 x i8> undef, <16 x i32> zeroinitializer
  %89 = zext <16 x i8> %88 to <16 x i32>
  %90 = mul nuw nsw <16 x i32> %89, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41, i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %91 = add nuw nsw <16 x i32> %53, %85
  %92 = add nuw nsw <16 x i32> %91, %21
  %93 = add nuw nsw <16 x i32> %92, %90
  %94 = lshr <16 x i32> %93, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %95 = trunc <16 x i32> %94 to <16 x i8>
  %96 = getelementptr inbounds i8, i8* %27, i64 32
  %97 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %97, align 1, !alias.scope !359, !noalias !361
  %98 = load <16 x i8>, <16 x i8>* %23, align 1, !alias.scope !354
  %99 = zext <16 x i8> %98 to <16 x i32>
  %100 = mul nuw nsw <16 x i32> %51, %99
  %101 = load i8, i8* %35, align 1, !alias.scope !357
  %102 = insertelement <16 x i8> undef, i8 %101, i32 0
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> zeroinitializer
  %104 = zext <16 x i8> %103 to <16 x i32>
  %105 = mul nuw nsw <16 x i32> %104, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %106 = add nuw nsw <16 x i32> %53, %100
  %107 = add nuw nsw <16 x i32> %106, %24
  %108 = add nuw nsw <16 x i32> %107, %105
  %109 = lshr <16 x i32> %108, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %110 = trunc <16 x i32> %109 to <16 x i8>
  %111 = getelementptr inbounds i8, i8* %27, i64 48
  %112 = bitcast i8* %111 to <16 x i8>*
  store <16 x i8> %110, <16 x i8>* %112, align 1, !alias.scope !359, !noalias !361
  br label %114

113:                                              ; preds = %114
  ret void

114:                                              ; preds = %118, %49
  %115 = getelementptr inbounds i8, i8* %27, i64 %1
  %116 = add nuw nsw i64 %26, 1
  %117 = icmp eq i64 %116, 32
  br i1 %117, label %113, label %25

118:                                              ; preds = %25, %118
  %119 = phi i64 [ %139, %118 ], [ 0, %25 ]
  %120 = getelementptr inbounds i8, i8* %2, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = mul nuw nsw i32 %122, %34
  %124 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %119
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = load i8, i8* %35, align 1
  %128 = zext i8 %127 to i32
  %129 = mul nuw nsw i32 %128, %126
  %130 = sub i8 0, %125
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %10
  %133 = add nuw nsw i32 %39, %123
  %134 = add nuw nsw i32 %133, %132
  %135 = add nuw nsw i32 %134, %129
  %136 = lshr i32 %135, 9
  %137 = trunc i32 %136 to i8
  %138 = getelementptr inbounds i8, i8* %27, i64 %119
  store i8 %137, i8* %138, align 1
  %139 = add nuw nsw i64 %119, 1
  %140 = icmp eq i64 %139, 64
  br i1 %140, label %114, label %118, !llvm.loop !362
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 31
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr i8, i8* %2, i64 64
  %9 = bitcast i8* %2 to <16 x i8>*
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to <16 x i8>*
  %12 = getelementptr inbounds i8, i8* %2, i64 32
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = getelementptr inbounds i8, i8* %2, i64 48
  %15 = bitcast i8* %14 to <16 x i8>*
  br label %16

16:                                               ; preds = %70, %4
  %17 = phi i64 [ 0, %4 ], [ %72, %70 ]
  %18 = phi i8* [ %0, %4 ], [ %71, %70 ]
  %19 = mul i64 %17, %1
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %17
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = sub i8 0, %21
  %24 = zext i8 %23 to i32
  %25 = mul nuw nsw i32 %24, %7
  %26 = add nuw nsw i32 %25, 128
  %27 = add i64 %19, 64
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 %19
  %30 = icmp ult i8* %29, %8
  %31 = icmp ugt i8* %28, %2
  %32 = and i1 %30, %31
  br i1 %32, label %74, label %33

33:                                               ; preds = %16
  %34 = insertelement <16 x i32> undef, i32 %22, i32 0
  %35 = shufflevector <16 x i32> %34, <16 x i32> undef, <16 x i32> zeroinitializer
  %36 = insertelement <16 x i32> undef, i32 %26, i32 0
  %37 = shufflevector <16 x i32> %36, <16 x i32> undef, <16 x i32> zeroinitializer
  %38 = load <16 x i8>, <16 x i8>* %9, align 1, !alias.scope !363
  %39 = zext <16 x i8> %38 to <16 x i32>
  %40 = mul nuw nsw <16 x i32> %35, %39
  %41 = add nuw nsw <16 x i32> %37, %40
  %42 = lshr <16 x i32> %41, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %43 = trunc <16 x i32> %42 to <16 x i8>
  %44 = bitcast i8* %18 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %44, align 1, !alias.scope !366, !noalias !363
  %45 = load <16 x i8>, <16 x i8>* %11, align 1, !alias.scope !363
  %46 = zext <16 x i8> %45 to <16 x i32>
  %47 = mul nuw nsw <16 x i32> %35, %46
  %48 = add nuw nsw <16 x i32> %37, %47
  %49 = lshr <16 x i32> %48, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %50 = trunc <16 x i32> %49 to <16 x i8>
  %51 = getelementptr inbounds i8, i8* %18, i64 16
  %52 = bitcast i8* %51 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %52, align 1, !alias.scope !366, !noalias !363
  %53 = load <16 x i8>, <16 x i8>* %13, align 1, !alias.scope !363
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %35, %54
  %56 = add nuw nsw <16 x i32> %37, %55
  %57 = lshr <16 x i32> %56, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %58 = trunc <16 x i32> %57 to <16 x i8>
  %59 = getelementptr inbounds i8, i8* %18, i64 32
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1, !alias.scope !366, !noalias !363
  %61 = load <16 x i8>, <16 x i8>* %15, align 1, !alias.scope !363
  %62 = zext <16 x i8> %61 to <16 x i32>
  %63 = mul nuw nsw <16 x i32> %35, %62
  %64 = add nuw nsw <16 x i32> %37, %63
  %65 = lshr <16 x i32> %64, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %66 = trunc <16 x i32> %65 to <16 x i8>
  %67 = getelementptr inbounds i8, i8* %18, i64 48
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %68, align 1, !alias.scope !366, !noalias !363
  br label %70

69:                                               ; preds = %70
  ret void

70:                                               ; preds = %74, %33
  %71 = getelementptr inbounds i8, i8* %18, i64 %1
  %72 = add nuw nsw i64 %17, 1
  %73 = icmp eq i64 %72, 32
  br i1 %73, label %69, label %16

74:                                               ; preds = %16, %74
  %75 = phi i64 [ %93, %74 ], [ 0, %16 ]
  %76 = getelementptr inbounds i8, i8* %2, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = mul nuw nsw i32 %78, %22
  %80 = add nuw nsw i32 %26, %79
  %81 = lshr i32 %80, 8
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %18, i64 %75
  store i8 %82, i8* %83, align 1
  %84 = or i64 %75, 1
  %85 = getelementptr inbounds i8, i8* %2, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = mul nuw nsw i32 %87, %22
  %89 = add nuw nsw i32 %26, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %18, i64 %84
  store i8 %91, i8* %92, align 1
  %93 = add nuw nsw i64 %75, 2
  %94 = icmp eq i64 %93, 64
  br i1 %94, label %70, label %74, !llvm.loop !368
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <16 x i32> undef, i32 %7, i32 0
  %9 = shufflevector <16 x i32> %8, <16 x i32> undef, <16 x i32> zeroinitializer
  %10 = mul nuw nsw <16 x i32> %9, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53, i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %11 = add nuw nsw <16 x i32> %10, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %12 = mul nuw nsw <16 x i32> %9, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150, i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %13 = add nuw nsw <16 x i32> %12, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %14 = mul nuw nsw <16 x i32> %9, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215, i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %15 = add nuw nsw <16 x i32> %14, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %16 = mul nuw nsw <16 x i32> %9, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248, i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  %17 = add nuw nsw <16 x i32> %16, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %18

18:                                               ; preds = %72, %4
  %19 = phi i64 [ 0, %4 ], [ %74, %72 ]
  %20 = phi i8* [ %0, %4 ], [ %73, %72 ]
  %21 = mul i64 %19, %1
  %22 = getelementptr inbounds i8, i8* %3, i64 %19
  %23 = add nuw i64 %19, 1
  %24 = getelementptr i8, i8* %3, i64 %23
  %25 = add i64 %21, 64
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = getelementptr i8, i8* %0, i64 %21
  %28 = icmp ult i8* %27, %24
  %29 = icmp ult i8* %22, %26
  %30 = and i1 %28, %29
  br i1 %30, label %76, label %31

31:                                               ; preds = %18
  %32 = load i8, i8* %22, align 1, !alias.scope !369
  %33 = insertelement <16 x i8> undef, i8 %32, i32 0
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <16 x i32> zeroinitializer
  %35 = zext <16 x i8> %34 to <16 x i32>
  %36 = mul nuw nsw <16 x i32> %35, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203, i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %37 = add nuw nsw <16 x i32> %11, %36
  %38 = lshr <16 x i32> %37, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %39 = trunc <16 x i32> %38 to <16 x i8>
  %40 = bitcast i8* %20 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %40, align 1, !alias.scope !372, !noalias !369
  %41 = load i8, i8* %22, align 1, !alias.scope !369
  %42 = insertelement <16 x i8> undef, i8 %41, i32 0
  %43 = shufflevector <16 x i8> %42, <16 x i8> undef, <16 x i32> zeroinitializer
  %44 = zext <16 x i8> %43 to <16 x i32>
  %45 = mul nuw nsw <16 x i32> %44, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106, i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %46 = add nuw nsw <16 x i32> %13, %45
  %47 = lshr <16 x i32> %46, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %48 = trunc <16 x i32> %47 to <16 x i8>
  %49 = getelementptr inbounds i8, i8* %20, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %48, <16 x i8>* %50, align 1, !alias.scope !372, !noalias !369
  %51 = load i8, i8* %22, align 1, !alias.scope !369
  %52 = insertelement <16 x i8> undef, i8 %51, i32 0
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> zeroinitializer
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41, i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %56 = add nuw nsw <16 x i32> %15, %55
  %57 = lshr <16 x i32> %56, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %58 = trunc <16 x i32> %57 to <16 x i8>
  %59 = getelementptr inbounds i8, i8* %20, i64 32
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1, !alias.scope !372, !noalias !369
  %61 = load i8, i8* %22, align 1, !alias.scope !369
  %62 = insertelement <16 x i8> undef, i8 %61, i32 0
  %63 = shufflevector <16 x i8> %62, <16 x i8> undef, <16 x i32> zeroinitializer
  %64 = zext <16 x i8> %63 to <16 x i32>
  %65 = mul nuw nsw <16 x i32> %64, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %66 = add nuw nsw <16 x i32> %17, %65
  %67 = lshr <16 x i32> %66, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %68 = trunc <16 x i32> %67 to <16 x i8>
  %69 = getelementptr inbounds i8, i8* %20, i64 48
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %70, align 1, !alias.scope !372, !noalias !369
  br label %72

71:                                               ; preds = %72
  ret void

72:                                               ; preds = %76, %31
  %73 = getelementptr inbounds i8, i8* %20, i64 %1
  %74 = add nuw nsw i64 %19, 1
  %75 = icmp eq i64 %74, 32
  br i1 %75, label %71, label %18

76:                                               ; preds = %18, %76
  %77 = phi i64 [ %107, %76 ], [ 0, %18 ]
  %78 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %77
  %79 = load i8, i8* %78, align 2
  %80 = zext i8 %79 to i32
  %81 = load i8, i8* %22, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nuw nsw i32 %82, %80
  %84 = sub i8 0, %79
  %85 = zext i8 %84 to i32
  %86 = mul nuw nsw i32 %85, %7
  %87 = add nuw nsw i32 %86, 128
  %88 = add nuw nsw i32 %87, %83
  %89 = lshr i32 %88, 8
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds i8, i8* %20, i64 %77
  store i8 %90, i8* %91, align 1
  %92 = or i64 %77, 1
  %93 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = load i8, i8* %22, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nuw nsw i32 %97, %95
  %99 = sub i8 0, %94
  %100 = zext i8 %99 to i32
  %101 = mul nuw nsw i32 %100, %7
  %102 = add nuw nsw i32 %101, 128
  %103 = add nuw nsw i32 %102, %98
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %20, i64 %92
  store i8 %105, i8* %106, align 1
  %107 = add nuw nsw i64 %77, 2
  %108 = icmp eq i64 %107, 64
  br i1 %108, label %72, label %76, !llvm.loop !374
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi64ELi8EhE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 64, i1 false) #5
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 64, i1 false) #5
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 64, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 64, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 64, i1 false) #5
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 64, i1 false) #5
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 64, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 64, i1 false) #5
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 64, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 64, i1 false) #5
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 64, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 64, i1 false) #5
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 64, i1 false) #5
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 64, i1 false) #5
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 64, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 64, i1 false) #5
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 -128, i64 64, i1 false) #5
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 -128, i64 64, i1 false) #5
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -128, i64 64, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 -128, i64 64, i1 false) #5
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 -128, i64 64, i1 false) #5
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 -128, i64 64, i1 false) #5
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 -128, i64 64, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 -128, i64 64, i1 false) #5
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 -128, i64 64, i1 false) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 -128, i64 64, i1 false) #5
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 -128, i64 64, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 -128, i64 64, i1 false) #5
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 -128, i64 64, i1 false) #5
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 -128, i64 64, i1 false) #5
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 -128, i64 64, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 -128, i64 64, i1 false) #5
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 -128, i64 64, i1 false) #5
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 -128, i64 64, i1 false) #5
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 -128, i64 64, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 -128, i64 64, i1 false) #5
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 -128, i64 64, i1 false) #5
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 -128, i64 64, i1 false) #5
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 -128, i64 64, i1 false) #5
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 -128, i64 64, i1 false) #5
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 -128, i64 64, i1 false) #5
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 -128, i64 64, i1 false) #5
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 -128, i64 64, i1 false) #5
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 -128, i64 64, i1 false) #5
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 -128, i64 64, i1 false) #5
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 -128, i64 64, i1 false) #5
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 -128, i64 64, i1 false) #5
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 -128, i64 64, i1 false) #5
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 -128, i64 64, i1 false) #5
  %53 = getelementptr inbounds i8, i8* %52, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 -128, i64 64, i1 false) #5
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 -128, i64 64, i1 false) #5
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 -128, i64 64, i1 false) #5
  %56 = getelementptr inbounds i8, i8* %55, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 -128, i64 64, i1 false) #5
  %57 = getelementptr inbounds i8, i8* %56, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 -128, i64 64, i1 false) #5
  %58 = getelementptr inbounds i8, i8* %57, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 -128, i64 64, i1 false) #5
  %59 = getelementptr inbounds i8, i8* %58, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 -128, i64 64, i1 false) #5
  %60 = getelementptr inbounds i8, i8* %59, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 -128, i64 64, i1 false) #5
  %61 = getelementptr inbounds i8, i8* %60, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 -128, i64 64, i1 false) #5
  %62 = getelementptr inbounds i8, i8* %61, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 -128, i64 64, i1 false) #5
  %63 = getelementptr inbounds i8, i8* %62, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 -128, i64 64, i1 false) #5
  %64 = getelementptr inbounds i8, i8* %63, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 -128, i64 64, i1 false) #5
  %65 = getelementptr inbounds i8, i8* %64, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 -128, i64 64, i1 false) #5
  %66 = getelementptr inbounds i8, i8* %65, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 -128, i64 64, i1 false) #5
  %67 = getelementptr inbounds i8, i8* %66, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 -128, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  %5 = bitcast i8* %2 to <4 x i8>*
  %6 = load <4 x i8>, <4 x i8>* %5, align 1
  %7 = zext <4 x i8> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 4
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = zext <4 x i8> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = zext <4 x i8> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 16
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 20
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 28
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = zext <4 x i8> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 32
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 36
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 40
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 44
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 48
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 52
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 56
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 60
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = trunc i32 %89 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %90, i64 64, i1 false) #5
  %91 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %90, i64 64, i1 false) #5
  %92 = getelementptr inbounds i8, i8* %91, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %92, i8 %90, i64 64, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %92, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %90, i64 64, i1 false) #5
  %94 = getelementptr inbounds i8, i8* %93, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %90, i64 64, i1 false) #5
  %95 = getelementptr inbounds i8, i8* %94, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %90, i64 64, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %95, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %90, i64 64, i1 false) #5
  %97 = getelementptr inbounds i8, i8* %96, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %90, i64 64, i1 false) #5
  %98 = getelementptr inbounds i8, i8* %97, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 %90, i64 64, i1 false) #5
  %99 = getelementptr inbounds i8, i8* %98, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 %90, i64 64, i1 false) #5
  %100 = getelementptr inbounds i8, i8* %99, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 %90, i64 64, i1 false) #5
  %101 = getelementptr inbounds i8, i8* %100, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %90, i64 64, i1 false) #5
  %102 = getelementptr inbounds i8, i8* %101, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 %90, i64 64, i1 false) #5
  %103 = getelementptr inbounds i8, i8* %102, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 %90, i64 64, i1 false) #5
  %104 = getelementptr inbounds i8, i8* %103, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %90, i64 64, i1 false) #5
  %105 = getelementptr inbounds i8, i8* %104, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 %90, i64 64, i1 false) #5
  %106 = getelementptr inbounds i8, i8* %105, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 %90, i64 64, i1 false) #5
  %107 = getelementptr inbounds i8, i8* %106, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %90, i64 64, i1 false) #5
  %108 = getelementptr inbounds i8, i8* %107, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %108, i8 %90, i64 64, i1 false) #5
  %109 = getelementptr inbounds i8, i8* %108, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 %90, i64 64, i1 false) #5
  %110 = getelementptr inbounds i8, i8* %109, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 %90, i64 64, i1 false) #5
  %111 = getelementptr inbounds i8, i8* %110, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %111, i8 %90, i64 64, i1 false) #5
  %112 = getelementptr inbounds i8, i8* %111, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %112, i8 %90, i64 64, i1 false) #5
  %113 = getelementptr inbounds i8, i8* %112, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %113, i8 %90, i64 64, i1 false) #5
  %114 = getelementptr inbounds i8, i8* %113, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 %90, i64 64, i1 false) #5
  %115 = getelementptr inbounds i8, i8* %114, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %115, i8 %90, i64 64, i1 false) #5
  %116 = getelementptr inbounds i8, i8* %115, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %116, i8 %90, i64 64, i1 false) #5
  %117 = getelementptr inbounds i8, i8* %116, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %117, i8 %90, i64 64, i1 false) #5
  %118 = getelementptr inbounds i8, i8* %117, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %118, i8 %90, i64 64, i1 false) #5
  %119 = getelementptr inbounds i8, i8* %118, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %119, i8 %90, i64 64, i1 false) #5
  %120 = getelementptr inbounds i8, i8* %119, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %120, i8 %90, i64 64, i1 false) #5
  %121 = getelementptr inbounds i8, i8* %120, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 %90, i64 64, i1 false) #5
  %122 = getelementptr inbounds i8, i8* %121, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %122, i8 %90, i64 64, i1 false) #5
  %123 = getelementptr inbounds i8, i8* %122, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %123, i8 %90, i64 64, i1 false) #5
  %124 = getelementptr inbounds i8, i8* %123, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %124, i8 %90, i64 64, i1 false) #5
  %125 = getelementptr inbounds i8, i8* %124, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %125, i8 %90, i64 64, i1 false) #5
  %126 = getelementptr inbounds i8, i8* %125, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %126, i8 %90, i64 64, i1 false) #5
  %127 = getelementptr inbounds i8, i8* %126, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %127, i8 %90, i64 64, i1 false) #5
  %128 = getelementptr inbounds i8, i8* %127, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %128, i8 %90, i64 64, i1 false) #5
  %129 = getelementptr inbounds i8, i8* %128, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %129, i8 %90, i64 64, i1 false) #5
  %130 = getelementptr inbounds i8, i8* %129, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %130, i8 %90, i64 64, i1 false) #5
  %131 = getelementptr inbounds i8, i8* %130, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %131, i8 %90, i64 64, i1 false) #5
  %132 = getelementptr inbounds i8, i8* %131, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %132, i8 %90, i64 64, i1 false) #5
  %133 = getelementptr inbounds i8, i8* %132, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %133, i8 %90, i64 64, i1 false) #5
  %134 = getelementptr inbounds i8, i8* %133, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %134, i8 %90, i64 64, i1 false) #5
  %135 = getelementptr inbounds i8, i8* %134, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 %90, i64 64, i1 false) #5
  %136 = getelementptr inbounds i8, i8* %135, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %136, i8 %90, i64 64, i1 false) #5
  %137 = getelementptr inbounds i8, i8* %136, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %137, i8 %90, i64 64, i1 false) #5
  %138 = getelementptr inbounds i8, i8* %137, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %138, i8 %90, i64 64, i1 false) #5
  %139 = getelementptr inbounds i8, i8* %138, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %139, i8 %90, i64 64, i1 false) #5
  %140 = getelementptr inbounds i8, i8* %139, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %140, i8 %90, i64 64, i1 false) #5
  %141 = getelementptr inbounds i8, i8* %140, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %141, i8 %90, i64 64, i1 false) #5
  %142 = getelementptr inbounds i8, i8* %141, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %142, i8 %90, i64 64, i1 false) #5
  %143 = getelementptr inbounds i8, i8* %142, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %143, i8 %90, i64 64, i1 false) #5
  %144 = getelementptr inbounds i8, i8* %143, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %144, i8 %90, i64 64, i1 false) #5
  %145 = getelementptr inbounds i8, i8* %144, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %145, i8 %90, i64 64, i1 false) #5
  %146 = getelementptr inbounds i8, i8* %145, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %146, i8 %90, i64 64, i1 false) #5
  %147 = getelementptr inbounds i8, i8* %146, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %147, i8 %90, i64 64, i1 false) #5
  %148 = getelementptr inbounds i8, i8* %147, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %148, i8 %90, i64 64, i1 false) #5
  %149 = getelementptr inbounds i8, i8* %148, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %149, i8 %90, i64 64, i1 false) #5
  %150 = getelementptr inbounds i8, i8* %149, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %150, i8 %90, i64 64, i1 false) #5
  %151 = getelementptr inbounds i8, i8* %150, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %151, i8 %90, i64 64, i1 false) #5
  %152 = getelementptr inbounds i8, i8* %151, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %152, i8 %90, i64 64, i1 false) #5
  %153 = getelementptr inbounds i8, i8* %152, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %153, i8 %90, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %3 to <4 x i8>*
  %6 = load <4 x i8>, <4 x i8>* %5, align 1
  %7 = zext <4 x i8> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %3, i64 4
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = zext <4 x i8> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 8
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = zext <4 x i8> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 12
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 16
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 20
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 24
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 28
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = zext <4 x i8> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 32
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 36
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 40
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 44
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 48
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 52
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 56
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 60
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = trunc i32 %89 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %90, i64 64, i1 false) #5
  %91 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %90, i64 64, i1 false) #5
  %92 = getelementptr inbounds i8, i8* %91, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %92, i8 %90, i64 64, i1 false) #5
  %93 = getelementptr inbounds i8, i8* %92, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 %90, i64 64, i1 false) #5
  %94 = getelementptr inbounds i8, i8* %93, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %94, i8 %90, i64 64, i1 false) #5
  %95 = getelementptr inbounds i8, i8* %94, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %95, i8 %90, i64 64, i1 false) #5
  %96 = getelementptr inbounds i8, i8* %95, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %96, i8 %90, i64 64, i1 false) #5
  %97 = getelementptr inbounds i8, i8* %96, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %90, i64 64, i1 false) #5
  %98 = getelementptr inbounds i8, i8* %97, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %98, i8 %90, i64 64, i1 false) #5
  %99 = getelementptr inbounds i8, i8* %98, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 %90, i64 64, i1 false) #5
  %100 = getelementptr inbounds i8, i8* %99, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %100, i8 %90, i64 64, i1 false) #5
  %101 = getelementptr inbounds i8, i8* %100, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 %90, i64 64, i1 false) #5
  %102 = getelementptr inbounds i8, i8* %101, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 %90, i64 64, i1 false) #5
  %103 = getelementptr inbounds i8, i8* %102, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %103, i8 %90, i64 64, i1 false) #5
  %104 = getelementptr inbounds i8, i8* %103, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %90, i64 64, i1 false) #5
  %105 = getelementptr inbounds i8, i8* %104, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 %90, i64 64, i1 false) #5
  %106 = getelementptr inbounds i8, i8* %105, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 %90, i64 64, i1 false) #5
  %107 = getelementptr inbounds i8, i8* %106, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 %90, i64 64, i1 false) #5
  %108 = getelementptr inbounds i8, i8* %107, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %108, i8 %90, i64 64, i1 false) #5
  %109 = getelementptr inbounds i8, i8* %108, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 %90, i64 64, i1 false) #5
  %110 = getelementptr inbounds i8, i8* %109, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 %90, i64 64, i1 false) #5
  %111 = getelementptr inbounds i8, i8* %110, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %111, i8 %90, i64 64, i1 false) #5
  %112 = getelementptr inbounds i8, i8* %111, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %112, i8 %90, i64 64, i1 false) #5
  %113 = getelementptr inbounds i8, i8* %112, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %113, i8 %90, i64 64, i1 false) #5
  %114 = getelementptr inbounds i8, i8* %113, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 %90, i64 64, i1 false) #5
  %115 = getelementptr inbounds i8, i8* %114, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %115, i8 %90, i64 64, i1 false) #5
  %116 = getelementptr inbounds i8, i8* %115, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %116, i8 %90, i64 64, i1 false) #5
  %117 = getelementptr inbounds i8, i8* %116, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %117, i8 %90, i64 64, i1 false) #5
  %118 = getelementptr inbounds i8, i8* %117, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %118, i8 %90, i64 64, i1 false) #5
  %119 = getelementptr inbounds i8, i8* %118, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %119, i8 %90, i64 64, i1 false) #5
  %120 = getelementptr inbounds i8, i8* %119, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %120, i8 %90, i64 64, i1 false) #5
  %121 = getelementptr inbounds i8, i8* %120, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 %90, i64 64, i1 false) #5
  %122 = getelementptr inbounds i8, i8* %121, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %122, i8 %90, i64 64, i1 false) #5
  %123 = getelementptr inbounds i8, i8* %122, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %123, i8 %90, i64 64, i1 false) #5
  %124 = getelementptr inbounds i8, i8* %123, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %124, i8 %90, i64 64, i1 false) #5
  %125 = getelementptr inbounds i8, i8* %124, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %125, i8 %90, i64 64, i1 false) #5
  %126 = getelementptr inbounds i8, i8* %125, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %126, i8 %90, i64 64, i1 false) #5
  %127 = getelementptr inbounds i8, i8* %126, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %127, i8 %90, i64 64, i1 false) #5
  %128 = getelementptr inbounds i8, i8* %127, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %128, i8 %90, i64 64, i1 false) #5
  %129 = getelementptr inbounds i8, i8* %128, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %129, i8 %90, i64 64, i1 false) #5
  %130 = getelementptr inbounds i8, i8* %129, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %130, i8 %90, i64 64, i1 false) #5
  %131 = getelementptr inbounds i8, i8* %130, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %131, i8 %90, i64 64, i1 false) #5
  %132 = getelementptr inbounds i8, i8* %131, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %132, i8 %90, i64 64, i1 false) #5
  %133 = getelementptr inbounds i8, i8* %132, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %133, i8 %90, i64 64, i1 false) #5
  %134 = getelementptr inbounds i8, i8* %133, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %134, i8 %90, i64 64, i1 false) #5
  %135 = getelementptr inbounds i8, i8* %134, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %135, i8 %90, i64 64, i1 false) #5
  %136 = getelementptr inbounds i8, i8* %135, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %136, i8 %90, i64 64, i1 false) #5
  %137 = getelementptr inbounds i8, i8* %136, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %137, i8 %90, i64 64, i1 false) #5
  %138 = getelementptr inbounds i8, i8* %137, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %138, i8 %90, i64 64, i1 false) #5
  %139 = getelementptr inbounds i8, i8* %138, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %139, i8 %90, i64 64, i1 false) #5
  %140 = getelementptr inbounds i8, i8* %139, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %140, i8 %90, i64 64, i1 false) #5
  %141 = getelementptr inbounds i8, i8* %140, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %141, i8 %90, i64 64, i1 false) #5
  %142 = getelementptr inbounds i8, i8* %141, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %142, i8 %90, i64 64, i1 false) #5
  %143 = getelementptr inbounds i8, i8* %142, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %143, i8 %90, i64 64, i1 false) #5
  %144 = getelementptr inbounds i8, i8* %143, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %144, i8 %90, i64 64, i1 false) #5
  %145 = getelementptr inbounds i8, i8* %144, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %145, i8 %90, i64 64, i1 false) #5
  %146 = getelementptr inbounds i8, i8* %145, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %146, i8 %90, i64 64, i1 false) #5
  %147 = getelementptr inbounds i8, i8* %146, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %147, i8 %90, i64 64, i1 false) #5
  %148 = getelementptr inbounds i8, i8* %147, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %148, i8 %90, i64 64, i1 false) #5
  %149 = getelementptr inbounds i8, i8* %148, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %149, i8 %90, i64 64, i1 false) #5
  %150 = getelementptr inbounds i8, i8* %149, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %150, i8 %90, i64 64, i1 false) #5
  %151 = getelementptr inbounds i8, i8* %150, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %151, i8 %90, i64 64, i1 false) #5
  %152 = getelementptr inbounds i8, i8* %151, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %152, i8 %90, i64 64, i1 false) #5
  %153 = getelementptr inbounds i8, i8* %152, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %153, i8 %90, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %5 = bitcast i8* %2 to <4 x i8>*
  %6 = load <4 x i8>, <4 x i8>* %5, align 1
  %7 = zext <4 x i8> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 64, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 4
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = zext <4 x i8> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = zext <4 x i8> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to <4 x i8>*
  %21 = load <4 x i8>, <4 x i8>* %20, align 1
  %22 = zext <4 x i8> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 16
  %25 = bitcast i8* %24 to <4 x i8>*
  %26 = load <4 x i8>, <4 x i8>* %25, align 1
  %27 = zext <4 x i8> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 20
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = zext <4 x i8> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = zext <4 x i8> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 28
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = zext <4 x i8> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 32
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 36
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 40
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = zext <4 x i8> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 44
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = zext <4 x i8> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 48
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 52
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 56
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 60
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = shufflevector <4 x i32> %87, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %89 = bitcast i8* %3 to <4 x i8>*
  %90 = load <4 x i8>, <4 x i8>* %89, align 1
  %91 = zext <4 x i8> %90 to <4 x i32>
  %92 = add nuw nsw <4 x i32> %88, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 4
  %94 = bitcast i8* %93 to <4 x i8>*
  %95 = load <4 x i8>, <4 x i8>* %94, align 1
  %96 = zext <4 x i8> %95 to <4 x i32>
  %97 = add nuw nsw <4 x i32> %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 8
  %99 = bitcast i8* %98 to <4 x i8>*
  %100 = load <4 x i8>, <4 x i8>* %99, align 1
  %101 = zext <4 x i8> %100 to <4 x i32>
  %102 = add nuw nsw <4 x i32> %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 12
  %104 = bitcast i8* %103 to <4 x i8>*
  %105 = load <4 x i8>, <4 x i8>* %104, align 1
  %106 = zext <4 x i8> %105 to <4 x i32>
  %107 = add nuw nsw <4 x i32> %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 16
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = zext <4 x i8> %110 to <4 x i32>
  %112 = add nuw nsw <4 x i32> %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 20
  %114 = bitcast i8* %113 to <4 x i8>*
  %115 = load <4 x i8>, <4 x i8>* %114, align 1
  %116 = zext <4 x i8> %115 to <4 x i32>
  %117 = add nuw nsw <4 x i32> %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 24
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = zext <4 x i8> %120 to <4 x i32>
  %122 = add nuw nsw <4 x i32> %117, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 28
  %124 = bitcast i8* %123 to <4 x i8>*
  %125 = load <4 x i8>, <4 x i8>* %124, align 1
  %126 = zext <4 x i8> %125 to <4 x i32>
  %127 = add nuw nsw <4 x i32> %122, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 32
  %129 = bitcast i8* %128 to <4 x i8>*
  %130 = load <4 x i8>, <4 x i8>* %129, align 1
  %131 = zext <4 x i8> %130 to <4 x i32>
  %132 = add nuw nsw <4 x i32> %127, %131
  %133 = getelementptr inbounds i8, i8* %3, i64 36
  %134 = bitcast i8* %133 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1
  %136 = zext <4 x i8> %135 to <4 x i32>
  %137 = add nuw nsw <4 x i32> %132, %136
  %138 = getelementptr inbounds i8, i8* %3, i64 40
  %139 = bitcast i8* %138 to <4 x i8>*
  %140 = load <4 x i8>, <4 x i8>* %139, align 1
  %141 = zext <4 x i8> %140 to <4 x i32>
  %142 = add nuw nsw <4 x i32> %137, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 44
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 1
  %146 = zext <4 x i8> %145 to <4 x i32>
  %147 = add nuw nsw <4 x i32> %142, %146
  %148 = getelementptr inbounds i8, i8* %3, i64 48
  %149 = bitcast i8* %148 to <4 x i8>*
  %150 = load <4 x i8>, <4 x i8>* %149, align 1
  %151 = zext <4 x i8> %150 to <4 x i32>
  %152 = add nuw nsw <4 x i32> %147, %151
  %153 = getelementptr inbounds i8, i8* %3, i64 52
  %154 = bitcast i8* %153 to <4 x i8>*
  %155 = load <4 x i8>, <4 x i8>* %154, align 1
  %156 = zext <4 x i8> %155 to <4 x i32>
  %157 = add nuw nsw <4 x i32> %152, %156
  %158 = getelementptr inbounds i8, i8* %3, i64 56
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = add nuw nsw <4 x i32> %157, %161
  %163 = getelementptr inbounds i8, i8* %3, i64 60
  %164 = bitcast i8* %163 to <4 x i8>*
  %165 = load <4 x i8>, <4 x i8>* %164, align 1
  %166 = zext <4 x i8> %165 to <4 x i32>
  %167 = add nuw nsw <4 x i32> %162, %166
  %168 = shufflevector <4 x i32> %167, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %169 = add <4 x i32> %167, %168
  %170 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %171 = add <4 x i32> %169, %170
  %172 = extractelement <4 x i32> %171, i32 0
  %173 = lshr i32 %172, 7
  %174 = trunc i32 %173 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %174, i64 64, i1 false) #5
  %175 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %175, i8 %174, i64 64, i1 false) #5
  %176 = getelementptr inbounds i8, i8* %175, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %176, i8 %174, i64 64, i1 false) #5
  %177 = getelementptr inbounds i8, i8* %176, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %177, i8 %174, i64 64, i1 false) #5
  %178 = getelementptr inbounds i8, i8* %177, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %178, i8 %174, i64 64, i1 false) #5
  %179 = getelementptr inbounds i8, i8* %178, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %179, i8 %174, i64 64, i1 false) #5
  %180 = getelementptr inbounds i8, i8* %179, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %180, i8 %174, i64 64, i1 false) #5
  %181 = getelementptr inbounds i8, i8* %180, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %181, i8 %174, i64 64, i1 false) #5
  %182 = getelementptr inbounds i8, i8* %181, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %182, i8 %174, i64 64, i1 false) #5
  %183 = getelementptr inbounds i8, i8* %182, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %183, i8 %174, i64 64, i1 false) #5
  %184 = getelementptr inbounds i8, i8* %183, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %184, i8 %174, i64 64, i1 false) #5
  %185 = getelementptr inbounds i8, i8* %184, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %185, i8 %174, i64 64, i1 false) #5
  %186 = getelementptr inbounds i8, i8* %185, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %186, i8 %174, i64 64, i1 false) #5
  %187 = getelementptr inbounds i8, i8* %186, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %187, i8 %174, i64 64, i1 false) #5
  %188 = getelementptr inbounds i8, i8* %187, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %188, i8 %174, i64 64, i1 false) #5
  %189 = getelementptr inbounds i8, i8* %188, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %189, i8 %174, i64 64, i1 false) #5
  %190 = getelementptr inbounds i8, i8* %189, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %190, i8 %174, i64 64, i1 false) #5
  %191 = getelementptr inbounds i8, i8* %190, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %191, i8 %174, i64 64, i1 false) #5
  %192 = getelementptr inbounds i8, i8* %191, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %192, i8 %174, i64 64, i1 false) #5
  %193 = getelementptr inbounds i8, i8* %192, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %193, i8 %174, i64 64, i1 false) #5
  %194 = getelementptr inbounds i8, i8* %193, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %194, i8 %174, i64 64, i1 false) #5
  %195 = getelementptr inbounds i8, i8* %194, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %195, i8 %174, i64 64, i1 false) #5
  %196 = getelementptr inbounds i8, i8* %195, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %196, i8 %174, i64 64, i1 false) #5
  %197 = getelementptr inbounds i8, i8* %196, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %197, i8 %174, i64 64, i1 false) #5
  %198 = getelementptr inbounds i8, i8* %197, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %198, i8 %174, i64 64, i1 false) #5
  %199 = getelementptr inbounds i8, i8* %198, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %199, i8 %174, i64 64, i1 false) #5
  %200 = getelementptr inbounds i8, i8* %199, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %200, i8 %174, i64 64, i1 false) #5
  %201 = getelementptr inbounds i8, i8* %200, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %201, i8 %174, i64 64, i1 false) #5
  %202 = getelementptr inbounds i8, i8* %201, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %202, i8 %174, i64 64, i1 false) #5
  %203 = getelementptr inbounds i8, i8* %202, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %203, i8 %174, i64 64, i1 false) #5
  %204 = getelementptr inbounds i8, i8* %203, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %204, i8 %174, i64 64, i1 false) #5
  %205 = getelementptr inbounds i8, i8* %204, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %205, i8 %174, i64 64, i1 false) #5
  %206 = getelementptr inbounds i8, i8* %205, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %206, i8 %174, i64 64, i1 false) #5
  %207 = getelementptr inbounds i8, i8* %206, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %207, i8 %174, i64 64, i1 false) #5
  %208 = getelementptr inbounds i8, i8* %207, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %208, i8 %174, i64 64, i1 false) #5
  %209 = getelementptr inbounds i8, i8* %208, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %209, i8 %174, i64 64, i1 false) #5
  %210 = getelementptr inbounds i8, i8* %209, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %210, i8 %174, i64 64, i1 false) #5
  %211 = getelementptr inbounds i8, i8* %210, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %211, i8 %174, i64 64, i1 false) #5
  %212 = getelementptr inbounds i8, i8* %211, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %212, i8 %174, i64 64, i1 false) #5
  %213 = getelementptr inbounds i8, i8* %212, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %213, i8 %174, i64 64, i1 false) #5
  %214 = getelementptr inbounds i8, i8* %213, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %214, i8 %174, i64 64, i1 false) #5
  %215 = getelementptr inbounds i8, i8* %214, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %215, i8 %174, i64 64, i1 false) #5
  %216 = getelementptr inbounds i8, i8* %215, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %216, i8 %174, i64 64, i1 false) #5
  %217 = getelementptr inbounds i8, i8* %216, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %217, i8 %174, i64 64, i1 false) #5
  %218 = getelementptr inbounds i8, i8* %217, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %218, i8 %174, i64 64, i1 false) #5
  %219 = getelementptr inbounds i8, i8* %218, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %219, i8 %174, i64 64, i1 false) #5
  %220 = getelementptr inbounds i8, i8* %219, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %220, i8 %174, i64 64, i1 false) #5
  %221 = getelementptr inbounds i8, i8* %220, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %221, i8 %174, i64 64, i1 false) #5
  %222 = getelementptr inbounds i8, i8* %221, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %222, i8 %174, i64 64, i1 false) #5
  %223 = getelementptr inbounds i8, i8* %222, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %223, i8 %174, i64 64, i1 false) #5
  %224 = getelementptr inbounds i8, i8* %223, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %224, i8 %174, i64 64, i1 false) #5
  %225 = getelementptr inbounds i8, i8* %224, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %225, i8 %174, i64 64, i1 false) #5
  %226 = getelementptr inbounds i8, i8* %225, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %226, i8 %174, i64 64, i1 false) #5
  %227 = getelementptr inbounds i8, i8* %226, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %227, i8 %174, i64 64, i1 false) #5
  %228 = getelementptr inbounds i8, i8* %227, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %228, i8 %174, i64 64, i1 false) #5
  %229 = getelementptr inbounds i8, i8* %228, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %229, i8 %174, i64 64, i1 false) #5
  %230 = getelementptr inbounds i8, i8* %229, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %230, i8 %174, i64 64, i1 false) #5
  %231 = getelementptr inbounds i8, i8* %230, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %231, i8 %174, i64 64, i1 false) #5
  %232 = getelementptr inbounds i8, i8* %231, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %232, i8 %174, i64 64, i1 false) #5
  %233 = getelementptr inbounds i8, i8* %232, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %233, i8 %174, i64 64, i1 false) #5
  %234 = getelementptr inbounds i8, i8* %233, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %234, i8 %174, i64 64, i1 false) #5
  %235 = getelementptr inbounds i8, i8* %234, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %235, i8 %174, i64 64, i1 false) #5
  %236 = getelementptr inbounds i8, i8* %235, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %236, i8 %174, i64 64, i1 false) #5
  %237 = getelementptr inbounds i8, i8* %236, i64 %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %237, i8 %174, i64 64, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 64, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 64, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 64, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 64, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 64
  br i1 %14, label %5, label %6
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i64 [ 0, %4 ], [ %40, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %39, %6 ]
  %9 = getelementptr inbounds i8, i8* %3, i64 %7
  %10 = load i8, i8* %9, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 %10, i64 64, i1 false) #5
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = or i64 %7, 1
  %13 = getelementptr inbounds i8, i8* %3, i64 %12
  %14 = load i8, i8* %13, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 %14, i64 64, i1 false) #5
  %15 = getelementptr inbounds i8, i8* %11, i64 %1
  %16 = or i64 %7, 2
  %17 = getelementptr inbounds i8, i8* %3, i64 %16
  %18 = load i8, i8* %17, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 %18, i64 64, i1 false) #5
  %19 = getelementptr inbounds i8, i8* %15, i64 %1
  %20 = or i64 %7, 3
  %21 = getelementptr inbounds i8, i8* %3, i64 %20
  %22 = load i8, i8* %21, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 %22, i64 64, i1 false) #5
  %23 = getelementptr inbounds i8, i8* %19, i64 %1
  %24 = or i64 %7, 4
  %25 = getelementptr inbounds i8, i8* %3, i64 %24
  %26 = load i8, i8* %25, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 %26, i64 64, i1 false) #5
  %27 = getelementptr inbounds i8, i8* %23, i64 %1
  %28 = or i64 %7, 5
  %29 = getelementptr inbounds i8, i8* %3, i64 %28
  %30 = load i8, i8* %29, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 %30, i64 64, i1 false) #5
  %31 = getelementptr inbounds i8, i8* %27, i64 %1
  %32 = or i64 %7, 6
  %33 = getelementptr inbounds i8, i8* %3, i64 %32
  %34 = load i8, i8* %33, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 %34, i64 64, i1 false) #5
  %35 = getelementptr inbounds i8, i8* %31, i64 %1
  %36 = or i64 %7, 7
  %37 = getelementptr inbounds i8, i8* %3, i64 %36
  %38 = load i8, i8* %37, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 %38, i64 64, i1 false) #5
  %39 = getelementptr inbounds i8, i8* %35, i64 %1
  %40 = add nuw nsw i64 %7, 8
  %41 = icmp eq i64 %40, 64
  br i1 %41, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 1
  br label %10

9:                                                ; preds = %21
  ret void

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i8* [ %0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds i8, i8* %3, i64 %11
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %15, %7
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %8
  br label %25

21:                                               ; preds = %48
  %22 = getelementptr inbounds i8, i8* %12, i64 %1
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, 64
  br i1 %24, label %9, label %10

25:                                               ; preds = %48, %10
  %26 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %29, %7
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = add nsw i32 %20, %29
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = icmp sgt i32 %33, %19
  %39 = icmp sgt i32 %33, %37
  %40 = or i1 %38, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %25
  %42 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8 %14, i8* %42, align 1
  br label %48

43:                                               ; preds = %25
  %44 = icmp sgt i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %12, i64 %26
  br i1 %44, label %47, label %46

46:                                               ; preds = %43
  store i8 %28, i8* %45, align 1
  br label %48

47:                                               ; preds = %43
  store i8 %6, i8* %45, align 1
  br label %48

48:                                               ; preds = %46, %47, %41
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %21, label %25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 63
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = zext i8 %6 to i32
  %11 = getelementptr i8, i8* %2, i64 64
  %12 = insertelement <16 x i32> undef, i32 %10, i32 0
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = mul nuw nsw <16 x i32> %13, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53, i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %16 = getelementptr inbounds i8, i8* %2, i64 16
  %17 = bitcast i8* %16 to <16 x i8>*
  %18 = mul nuw nsw <16 x i32> %13, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150, i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %19 = getelementptr inbounds i8, i8* %2, i64 32
  %20 = bitcast i8* %19 to <16 x i8>*
  %21 = mul nuw nsw <16 x i32> %13, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215, i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %22 = getelementptr inbounds i8, i8* %2, i64 48
  %23 = bitcast i8* %22 to <16 x i8>*
  %24 = mul nuw nsw <16 x i32> %13, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248, i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  br label %25

25:                                               ; preds = %114, %4
  %26 = phi i64 [ 0, %4 ], [ %116, %114 ]
  %27 = phi i8* [ %0, %4 ], [ %115, %114 ]
  %28 = mul i64 %26, %1
  %29 = getelementptr i8, i8* %0, i64 %28
  %30 = add i64 %28, 64
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %26
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %3, i64 %26
  %36 = sub i8 0, %33
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %37, %9
  %39 = add nuw nsw i32 %38, 256
  %40 = add nuw i64 %26, 1
  %41 = getelementptr i8, i8* %3, i64 %40
  %42 = icmp ult i8* %29, %11
  %43 = icmp ugt i8* %31, %2
  %44 = and i1 %42, %43
  %45 = icmp ult i8* %29, %41
  %46 = icmp ult i8* %35, %31
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  br i1 %48, label %118, label %49

49:                                               ; preds = %25
  %50 = insertelement <16 x i32> undef, i32 %34, i32 0
  %51 = shufflevector <16 x i32> %50, <16 x i32> undef, <16 x i32> zeroinitializer
  %52 = insertelement <16 x i32> undef, i32 %39, i32 0
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <16 x i32> zeroinitializer
  %54 = load <16 x i8>, <16 x i8>* %14, align 1, !alias.scope !375
  %55 = zext <16 x i8> %54 to <16 x i32>
  %56 = mul nuw nsw <16 x i32> %51, %55
  %57 = load i8, i8* %35, align 1, !alias.scope !378
  %58 = insertelement <16 x i8> undef, i8 %57, i32 0
  %59 = shufflevector <16 x i8> %58, <16 x i8> undef, <16 x i32> zeroinitializer
  %60 = zext <16 x i8> %59 to <16 x i32>
  %61 = mul nuw nsw <16 x i32> %60, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203, i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %62 = add nuw nsw <16 x i32> %53, %56
  %63 = add nuw nsw <16 x i32> %62, %15
  %64 = add nuw nsw <16 x i32> %63, %61
  %65 = lshr <16 x i32> %64, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %66 = trunc <16 x i32> %65 to <16 x i8>
  %67 = bitcast i8* %27 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %67, align 1, !alias.scope !380, !noalias !382
  %68 = load <16 x i8>, <16 x i8>* %17, align 1, !alias.scope !375
  %69 = zext <16 x i8> %68 to <16 x i32>
  %70 = mul nuw nsw <16 x i32> %51, %69
  %71 = load i8, i8* %35, align 1, !alias.scope !378
  %72 = insertelement <16 x i8> undef, i8 %71, i32 0
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <16 x i32> zeroinitializer
  %74 = zext <16 x i8> %73 to <16 x i32>
  %75 = mul nuw nsw <16 x i32> %74, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106, i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %76 = add nuw nsw <16 x i32> %53, %70
  %77 = add nuw nsw <16 x i32> %76, %18
  %78 = add nuw nsw <16 x i32> %77, %75
  %79 = lshr <16 x i32> %78, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %80 = trunc <16 x i32> %79 to <16 x i8>
  %81 = getelementptr inbounds i8, i8* %27, i64 16
  %82 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %82, align 1, !alias.scope !380, !noalias !382
  %83 = load <16 x i8>, <16 x i8>* %20, align 1, !alias.scope !375
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = mul nuw nsw <16 x i32> %51, %84
  %86 = load i8, i8* %35, align 1, !alias.scope !378
  %87 = insertelement <16 x i8> undef, i8 %86, i32 0
  %88 = shufflevector <16 x i8> %87, <16 x i8> undef, <16 x i32> zeroinitializer
  %89 = zext <16 x i8> %88 to <16 x i32>
  %90 = mul nuw nsw <16 x i32> %89, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41, i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %91 = add nuw nsw <16 x i32> %53, %85
  %92 = add nuw nsw <16 x i32> %91, %21
  %93 = add nuw nsw <16 x i32> %92, %90
  %94 = lshr <16 x i32> %93, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %95 = trunc <16 x i32> %94 to <16 x i8>
  %96 = getelementptr inbounds i8, i8* %27, i64 32
  %97 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %97, align 1, !alias.scope !380, !noalias !382
  %98 = load <16 x i8>, <16 x i8>* %23, align 1, !alias.scope !375
  %99 = zext <16 x i8> %98 to <16 x i32>
  %100 = mul nuw nsw <16 x i32> %51, %99
  %101 = load i8, i8* %35, align 1, !alias.scope !378
  %102 = insertelement <16 x i8> undef, i8 %101, i32 0
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> zeroinitializer
  %104 = zext <16 x i8> %103 to <16 x i32>
  %105 = mul nuw nsw <16 x i32> %104, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %106 = add nuw nsw <16 x i32> %53, %100
  %107 = add nuw nsw <16 x i32> %106, %24
  %108 = add nuw nsw <16 x i32> %107, %105
  %109 = lshr <16 x i32> %108, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %110 = trunc <16 x i32> %109 to <16 x i8>
  %111 = getelementptr inbounds i8, i8* %27, i64 48
  %112 = bitcast i8* %111 to <16 x i8>*
  store <16 x i8> %110, <16 x i8>* %112, align 1, !alias.scope !380, !noalias !382
  br label %114

113:                                              ; preds = %114
  ret void

114:                                              ; preds = %118, %49
  %115 = getelementptr inbounds i8, i8* %27, i64 %1
  %116 = add nuw nsw i64 %26, 1
  %117 = icmp eq i64 %116, 64
  br i1 %117, label %113, label %25

118:                                              ; preds = %25, %118
  %119 = phi i64 [ %139, %118 ], [ 0, %25 ]
  %120 = getelementptr inbounds i8, i8* %2, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = mul nuw nsw i32 %122, %34
  %124 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %119
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = load i8, i8* %35, align 1
  %128 = zext i8 %127 to i32
  %129 = mul nuw nsw i32 %128, %126
  %130 = sub i8 0, %125
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %10
  %133 = add nuw nsw i32 %39, %123
  %134 = add nuw nsw i32 %133, %132
  %135 = add nuw nsw i32 %134, %129
  %136 = lshr i32 %135, 9
  %137 = trunc i32 %136 to i8
  %138 = getelementptr inbounds i8, i8* %27, i64 %119
  store i8 %137, i8* %138, align 1
  %139 = add nuw nsw i64 %119, 1
  %140 = icmp eq i64 %139, 64
  br i1 %140, label %114, label %118, !llvm.loop !383
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %3, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr i8, i8* %2, i64 64
  %9 = bitcast i8* %2 to <16 x i8>*
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to <16 x i8>*
  %12 = getelementptr inbounds i8, i8* %2, i64 32
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = getelementptr inbounds i8, i8* %2, i64 48
  %15 = bitcast i8* %14 to <16 x i8>*
  br label %16

16:                                               ; preds = %70, %4
  %17 = phi i64 [ 0, %4 ], [ %72, %70 ]
  %18 = phi i8* [ %0, %4 ], [ %71, %70 ]
  %19 = mul i64 %17, %1
  %20 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %17
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = sub i8 0, %21
  %24 = zext i8 %23 to i32
  %25 = mul nuw nsw i32 %24, %7
  %26 = add nuw nsw i32 %25, 128
  %27 = add i64 %19, 64
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 %19
  %30 = icmp ult i8* %29, %8
  %31 = icmp ugt i8* %28, %2
  %32 = and i1 %30, %31
  br i1 %32, label %74, label %33

33:                                               ; preds = %16
  %34 = insertelement <16 x i32> undef, i32 %22, i32 0
  %35 = shufflevector <16 x i32> %34, <16 x i32> undef, <16 x i32> zeroinitializer
  %36 = insertelement <16 x i32> undef, i32 %26, i32 0
  %37 = shufflevector <16 x i32> %36, <16 x i32> undef, <16 x i32> zeroinitializer
  %38 = load <16 x i8>, <16 x i8>* %9, align 1, !alias.scope !384
  %39 = zext <16 x i8> %38 to <16 x i32>
  %40 = mul nuw nsw <16 x i32> %35, %39
  %41 = add nuw nsw <16 x i32> %37, %40
  %42 = lshr <16 x i32> %41, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %43 = trunc <16 x i32> %42 to <16 x i8>
  %44 = bitcast i8* %18 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %44, align 1, !alias.scope !387, !noalias !384
  %45 = load <16 x i8>, <16 x i8>* %11, align 1, !alias.scope !384
  %46 = zext <16 x i8> %45 to <16 x i32>
  %47 = mul nuw nsw <16 x i32> %35, %46
  %48 = add nuw nsw <16 x i32> %37, %47
  %49 = lshr <16 x i32> %48, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %50 = trunc <16 x i32> %49 to <16 x i8>
  %51 = getelementptr inbounds i8, i8* %18, i64 16
  %52 = bitcast i8* %51 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %52, align 1, !alias.scope !387, !noalias !384
  %53 = load <16 x i8>, <16 x i8>* %13, align 1, !alias.scope !384
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %35, %54
  %56 = add nuw nsw <16 x i32> %37, %55
  %57 = lshr <16 x i32> %56, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %58 = trunc <16 x i32> %57 to <16 x i8>
  %59 = getelementptr inbounds i8, i8* %18, i64 32
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1, !alias.scope !387, !noalias !384
  %61 = load <16 x i8>, <16 x i8>* %15, align 1, !alias.scope !384
  %62 = zext <16 x i8> %61 to <16 x i32>
  %63 = mul nuw nsw <16 x i32> %35, %62
  %64 = add nuw nsw <16 x i32> %37, %63
  %65 = lshr <16 x i32> %64, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %66 = trunc <16 x i32> %65 to <16 x i8>
  %67 = getelementptr inbounds i8, i8* %18, i64 48
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %68, align 1, !alias.scope !387, !noalias !384
  br label %70

69:                                               ; preds = %70
  ret void

70:                                               ; preds = %74, %33
  %71 = getelementptr inbounds i8, i8* %18, i64 %1
  %72 = add nuw nsw i64 %17, 1
  %73 = icmp eq i64 %72, 64
  br i1 %73, label %69, label %16

74:                                               ; preds = %16, %74
  %75 = phi i64 [ %93, %74 ], [ 0, %16 ]
  %76 = getelementptr inbounds i8, i8* %2, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = mul nuw nsw i32 %78, %22
  %80 = add nuw nsw i32 %26, %79
  %81 = lshr i32 %80, 8
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %18, i64 %75
  store i8 %82, i8* %83, align 1
  %84 = or i64 %75, 1
  %85 = getelementptr inbounds i8, i8* %2, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = mul nuw nsw i32 %87, %22
  %89 = add nuw nsw i32 %26, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %18, i64 %84
  store i8 %91, i8* %92, align 1
  %93 = add nuw nsw i64 %75, 2
  %94 = icmp eq i64 %93, 64
  br i1 %94, label %70, label %74, !llvm.loop !389
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EhE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = getelementptr inbounds i8, i8* %2, i64 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = insertelement <16 x i32> undef, i32 %7, i32 0
  %9 = shufflevector <16 x i32> %8, <16 x i32> undef, <16 x i32> zeroinitializer
  %10 = mul nuw nsw <16 x i32> %9, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53, i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %11 = add nuw nsw <16 x i32> %10, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %12 = mul nuw nsw <16 x i32> %9, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150, i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %13 = add nuw nsw <16 x i32> %12, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %14 = mul nuw nsw <16 x i32> %9, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215, i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %15 = add nuw nsw <16 x i32> %14, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %16 = mul nuw nsw <16 x i32> %9, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248, i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  %17 = add nuw nsw <16 x i32> %16, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %18

18:                                               ; preds = %72, %4
  %19 = phi i64 [ 0, %4 ], [ %74, %72 ]
  %20 = phi i8* [ %0, %4 ], [ %73, %72 ]
  %21 = mul i64 %19, %1
  %22 = getelementptr inbounds i8, i8* %3, i64 %19
  %23 = add nuw i64 %19, 1
  %24 = getelementptr i8, i8* %3, i64 %23
  %25 = add i64 %21, 64
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = getelementptr i8, i8* %0, i64 %21
  %28 = icmp ult i8* %27, %24
  %29 = icmp ult i8* %22, %26
  %30 = and i1 %28, %29
  br i1 %30, label %76, label %31

31:                                               ; preds = %18
  %32 = load i8, i8* %22, align 1, !alias.scope !390
  %33 = insertelement <16 x i8> undef, i8 %32, i32 0
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <16 x i32> zeroinitializer
  %35 = zext <16 x i8> %34 to <16 x i32>
  %36 = mul nuw nsw <16 x i32> %35, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203, i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %37 = add nuw nsw <16 x i32> %11, %36
  %38 = lshr <16 x i32> %37, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %39 = trunc <16 x i32> %38 to <16 x i8>
  %40 = bitcast i8* %20 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %40, align 1, !alias.scope !393, !noalias !390
  %41 = load i8, i8* %22, align 1, !alias.scope !390
  %42 = insertelement <16 x i8> undef, i8 %41, i32 0
  %43 = shufflevector <16 x i8> %42, <16 x i8> undef, <16 x i32> zeroinitializer
  %44 = zext <16 x i8> %43 to <16 x i32>
  %45 = mul nuw nsw <16 x i32> %44, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106, i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %46 = add nuw nsw <16 x i32> %13, %45
  %47 = lshr <16 x i32> %46, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %48 = trunc <16 x i32> %47 to <16 x i8>
  %49 = getelementptr inbounds i8, i8* %20, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %48, <16 x i8>* %50, align 1, !alias.scope !393, !noalias !390
  %51 = load i8, i8* %22, align 1, !alias.scope !390
  %52 = insertelement <16 x i8> undef, i8 %51, i32 0
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> zeroinitializer
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41, i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %56 = add nuw nsw <16 x i32> %15, %55
  %57 = lshr <16 x i32> %56, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %58 = trunc <16 x i32> %57 to <16 x i8>
  %59 = getelementptr inbounds i8, i8* %20, i64 32
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1, !alias.scope !393, !noalias !390
  %61 = load i8, i8* %22, align 1, !alias.scope !390
  %62 = insertelement <16 x i8> undef, i8 %61, i32 0
  %63 = shufflevector <16 x i8> %62, <16 x i8> undef, <16 x i32> zeroinitializer
  %64 = zext <16 x i8> %63 to <16 x i32>
  %65 = mul nuw nsw <16 x i32> %64, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %66 = add nuw nsw <16 x i32> %17, %65
  %67 = lshr <16 x i32> %66, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %68 = trunc <16 x i32> %67 to <16 x i8>
  %69 = getelementptr inbounds i8, i8* %20, i64 48
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %70, align 1, !alias.scope !393, !noalias !390
  br label %72

71:                                               ; preds = %72
  ret void

72:                                               ; preds = %76, %31
  %73 = getelementptr inbounds i8, i8* %20, i64 %1
  %74 = add nuw nsw i64 %19, 1
  %75 = icmp eq i64 %74, 64
  br i1 %75, label %71, label %18

76:                                               ; preds = %18, %76
  %77 = phi i64 [ %107, %76 ], [ 0, %18 ]
  %78 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %77
  %79 = load i8, i8* %78, align 2
  %80 = zext i8 %79 to i32
  %81 = load i8, i8* %22, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nuw nsw i32 %82, %80
  %84 = sub i8 0, %79
  %85 = zext i8 %84 to i32
  %86 = mul nuw nsw i32 %85, %7
  %87 = add nuw nsw i32 %86, 128
  %88 = add nuw nsw i32 %87, %83
  %89 = lshr i32 %88, 8
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds i8, i8* %20, i64 %77
  store i8 %90, i8* %91, align 1
  %92 = or i64 %77, 1
  %93 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = load i8, i8* %22, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nuw nsw i32 %97, %95
  %99 = sub i8 0, %94
  %100 = zext i8 %99 to i32
  %101 = mul nuw nsw i32 %100, %7
  %102 = add nuw nsw i32 %101, 128
  %103 = add nuw nsw i32 %102, %98
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %20, i64 %92
  store i8 %105, i8* %106, align 1
  %107 = add nuw nsw i64 %77, 2
  %108 = icmp eq i64 %107, 64
  br i1 %108, label %72, label %76, !llvm.loop !395
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone1_CIhEEvPvlPKviiib(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i1 zeroext) #0 {
  %8 = icmp eq i32 %5, 64
  br i1 %8, label %9, label %32

9:                                                ; preds = %7
  %10 = icmp sgt i32 %4, 0
  br i1 %10, label %11, label %143

11:                                               ; preds = %9
  %12 = sext i32 %3 to i64
  %13 = add i32 %4, -1
  %14 = and i32 %4, 3
  %15 = icmp ult i32 %13, 3
  br i1 %15, label %131, label %16

16:                                               ; preds = %11
  %17 = sub i32 %4, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i8* [ %2, %16 ], [ %28, %18 ]
  %20 = phi i8* [ %0, %16 ], [ %29, %18 ]
  %21 = phi i32 [ %17, %16 ], [ %30, %18 ]
  %22 = getelementptr inbounds i8, i8* %19, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %22, i64 %12, i1 false)
  %23 = getelementptr inbounds i8, i8* %20, i64 %1
  %24 = getelementptr inbounds i8, i8* %19, i64 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %24, i64 %12, i1 false)
  %25 = getelementptr inbounds i8, i8* %23, i64 %1
  %26 = getelementptr inbounds i8, i8* %19, i64 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %26, i64 %12, i1 false)
  %27 = getelementptr inbounds i8, i8* %25, i64 %1
  %28 = getelementptr inbounds i8, i8* %19, i64 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %28, i64 %12, i1 false)
  %29 = getelementptr inbounds i8, i8* %27, i64 %1
  %30 = add i32 %21, -4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %131, label %18

32:                                               ; preds = %7
  %33 = zext i1 %6 to i32
  %34 = add i32 %3, -1
  %35 = add i32 %34, %4
  %36 = shl i32 %35, %33
  %37 = select i1 %6, i32 5, i32 6
  %38 = shl i32 1, %33
  %39 = sext i32 %36 to i64
  %40 = getelementptr inbounds i8, i8* %2, i64 %39
  %41 = zext i32 %38 to i64
  %42 = sext i32 %3 to i64
  br label %43

43:                                               ; preds = %126, %32
  %44 = phi i8* [ %0, %32 ], [ %127, %126 ]
  %45 = phi i32 [ %5, %32 ], [ %128, %126 ]
  %46 = phi i32 [ 0, %32 ], [ %129, %126 ]
  %47 = ashr i32 %45, %37
  %48 = icmp slt i32 %47, %36
  br i1 %48, label %91, label %49

49:                                               ; preds = %43
  %50 = icmp slt i32 %46, %4
  br i1 %50, label %51, label %143

51:                                               ; preds = %49
  %52 = sub i32 %4, %46
  %53 = xor i32 %46, -1
  %54 = add i32 %53, %4
  %55 = and i32 %52, 7
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %66, label %57

57:                                               ; preds = %51, %57
  %58 = phi i32 [ %63, %57 ], [ %46, %51 ]
  %59 = phi i8* [ %62, %57 ], [ %44, %51 ]
  %60 = phi i32 [ %64, %57 ], [ %55, %51 ]
  %61 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 %61, i64 %42, i1 false) #5
  %62 = getelementptr inbounds i8, i8* %59, i64 %1
  %63 = add nuw nsw i32 %58, 1
  %64 = add i32 %60, -1
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %57, !llvm.loop !396

66:                                               ; preds = %57, %51
  %67 = phi i32 [ %46, %51 ], [ %63, %57 ]
  %68 = phi i8* [ %44, %51 ], [ %62, %57 ]
  %69 = icmp ult i32 %54, 7
  br i1 %69, label %143, label %70

70:                                               ; preds = %66, %70
  %71 = phi i32 [ %89, %70 ], [ %67, %66 ]
  %72 = phi i8* [ %88, %70 ], [ %68, %66 ]
  %73 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 %73, i64 %42, i1 false) #5
  %74 = getelementptr inbounds i8, i8* %72, i64 %1
  %75 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 %75, i64 %42, i1 false) #5
  %76 = getelementptr inbounds i8, i8* %74, i64 %1
  %77 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 %77, i64 %42, i1 false) #5
  %78 = getelementptr inbounds i8, i8* %76, i64 %1
  %79 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %78, i8 %79, i64 %42, i1 false) #5
  %80 = getelementptr inbounds i8, i8* %78, i64 %1
  %81 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %80, i8 %81, i64 %42, i1 false) #5
  %82 = getelementptr inbounds i8, i8* %80, i64 %1
  %83 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %82, i8 %83, i64 %42, i1 false) #5
  %84 = getelementptr inbounds i8, i8* %82, i64 %1
  %85 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 %85, i64 %42, i1 false) #5
  %86 = getelementptr inbounds i8, i8* %84, i64 %1
  %87 = load i8, i8* %40, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %86, i8 %87, i64 %42, i1 false) #5
  %88 = getelementptr inbounds i8, i8* %86, i64 %1
  %89 = add nuw nsw i32 %71, 8
  %90 = icmp eq i32 %89, %4
  br i1 %90, label %143, label %70

91:                                               ; preds = %43
  %92 = shl i32 %45, %33
  %93 = lshr i32 %92, 1
  %94 = and i32 %93, 31
  %95 = sub nuw nsw i32 32, %94
  %96 = sext i32 %47 to i64
  br label %97

97:                                               ; preds = %108, %91
  %98 = phi i64 [ %124, %108 ], [ 0, %91 ]
  %99 = phi i64 [ %123, %108 ], [ %96, %91 ]
  %100 = icmp slt i64 %99, %39
  br i1 %100, label %108, label %101

101:                                              ; preds = %97
  %102 = trunc i64 %98 to i32
  %103 = and i64 %98, 4294967295
  %104 = getelementptr inbounds i8, i8* %44, i64 %103
  %105 = load i8, i8* %40, align 1
  %106 = sub nsw i32 %3, %102
  %107 = sext i32 %106 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %105, i64 %107, i1 false) #5
  br label %126

108:                                              ; preds = %97
  %109 = getelementptr inbounds i8, i8* %2, i64 %99
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = mul nuw nsw i32 %95, %111
  %113 = add nsw i64 %99, 1
  %114 = getelementptr inbounds i8, i8* %2, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %94, %116
  %118 = add nuw nsw i32 %112, 16
  %119 = add nuw nsw i32 %118, %117
  %120 = lshr i32 %119, 5
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %44, i64 %98
  store i8 %121, i8* %122, align 1
  %123 = add i64 %99, %41
  %124 = add nuw nsw i64 %98, 1
  %125 = icmp slt i64 %124, %42
  br i1 %125, label %97, label %126

126:                                              ; preds = %108, %101
  %127 = getelementptr inbounds i8, i8* %44, i64 %1
  %128 = add nsw i32 %45, %5
  %129 = add nuw nsw i32 %46, 1
  %130 = icmp slt i32 %129, %4
  br i1 %130, label %43, label %143

131:                                              ; preds = %18, %11
  %132 = phi i8* [ %2, %11 ], [ %28, %18 ]
  %133 = phi i8* [ %0, %11 ], [ %29, %18 ]
  %134 = icmp eq i32 %14, 0
  br i1 %134, label %143, label %135

135:                                              ; preds = %131, %135
  %136 = phi i8* [ %139, %135 ], [ %132, %131 ]
  %137 = phi i8* [ %140, %135 ], [ %133, %131 ]
  %138 = phi i32 [ %141, %135 ], [ %14, %131 ]
  %139 = getelementptr inbounds i8, i8* %136, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %137, i8* align 1 %139, i64 %12, i1 false)
  %140 = getelementptr inbounds i8, i8* %137, i64 %1
  %141 = add i32 %138, -1
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %135, !llvm.loop !398

143:                                              ; preds = %126, %66, %70, %131, %135, %49, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone2_CIhEEvPvlPKvS5_iiiibb(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i32, i1 zeroext, i1 zeroext) #3 {
  %11 = zext i1 %8 to i32
  %12 = zext i1 %9 to i32
  %13 = select i1 %8, i32 5, i32 6
  %14 = select i1 %9, i32 5, i32 6
  %15 = shl i32 1, %11
  %16 = sub nsw i32 0, %15
  %17 = zext i32 %15 to i64
  %18 = sext i32 %16 to i64
  %19 = sext i32 %4 to i64
  br label %20

20:                                               ; preds = %74, %10
  %21 = phi i8* [ %0, %10 ], [ %75, %74 ]
  %22 = phi i32 [ 0, %10 ], [ %76, %74 ]
  %23 = phi i32 [ 0, %10 ], [ %24, %74 ]
  %24 = sub nsw i32 %23, %6
  %25 = ashr i32 %24, %13
  %26 = shl i32 %22, 6
  %27 = shl i32 %24, %11
  %28 = lshr i32 %27, 1
  %29 = and i32 %28, 31
  %30 = sub nuw nsw i32 32, %29
  %31 = sext i32 %25 to i64
  br label %32

32:                                               ; preds = %59, %20
  %33 = phi i64 [ %72, %59 ], [ 0, %20 ]
  %34 = phi i64 [ %71, %59 ], [ %31, %20 ]
  %35 = phi i32 [ %36, %59 ], [ %26, %20 ]
  %36 = sub nsw i32 %35, %7
  %37 = icmp slt i64 %34, %18
  br i1 %37, label %45, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds i8, i8* %2, i64 %34
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = mul nuw nsw i32 %30, %41
  %43 = add nsw i64 %34, 1
  %44 = getelementptr inbounds i8, i8* %2, i64 %43
  br label %59

45:                                               ; preds = %32
  %46 = ashr i32 %36, %14
  %47 = shl i32 %36, %12
  %48 = lshr i32 %47, 1
  %49 = and i32 %48, 31
  %50 = sext i32 %46 to i64
  %51 = getelementptr inbounds i8, i8* %3, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = sub nuw nsw i32 32, %49
  %55 = mul nuw nsw i32 %54, %53
  %56 = add nsw i32 %46, 1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %3, i64 %57
  br label %59

59:                                               ; preds = %45, %38
  %60 = phi i8* [ %58, %45 ], [ %44, %38 ]
  %61 = phi i32 [ %49, %45 ], [ %29, %38 ]
  %62 = phi i32 [ %55, %45 ], [ %42, %38 ]
  %63 = load i8, i8* %60, align 1
  %64 = zext i8 %63 to i32
  %65 = mul nuw nsw i32 %61, %64
  %66 = add nuw nsw i32 %65, %62
  %67 = add nuw nsw i32 %66, 16
  %68 = lshr i32 %67, 5
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %21, i64 %33
  store i8 %69, i8* %70, align 1
  %71 = add i64 %34, %17
  %72 = add nuw nsw i64 %33, 1
  %73 = icmp slt i64 %72, %19
  br i1 %73, label %32, label %74

74:                                               ; preds = %59
  %75 = getelementptr inbounds i8, i8* %21, i64 %1
  %76 = add nuw nsw i32 %22, 1
  %77 = icmp slt i32 %76, %5
  br i1 %77, label %20, label %78

78:                                               ; preds = %74
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone3_CIhEEvPvlPKviiib(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i1 zeroext) #3 {
  %8 = zext i1 %6 to i32
  %9 = select i1 %6, i32 5, i32 6
  %10 = shl i32 1, %8
  %11 = zext i32 %10 to i64
  %12 = sext i32 %3 to i64
  br label %13

13:                                               ; preds = %44, %7
  %14 = phi i64 [ %46, %44 ], [ 0, %7 ]
  %15 = phi i32 [ %45, %44 ], [ %5, %7 ]
  %16 = ashr i32 %15, %9
  %17 = shl i32 %15, %8
  %18 = lshr i32 %17, 1
  %19 = and i32 %18, 31
  %20 = sub nuw nsw i32 32, %19
  %21 = sext i32 %16 to i64
  br label %22

22:                                               ; preds = %22, %13
  %23 = phi i64 [ %41, %22 ], [ %21, %13 ]
  %24 = phi i8* [ %40, %22 ], [ %0, %13 ]
  %25 = phi i32 [ %42, %22 ], [ 0, %13 ]
  %26 = getelementptr inbounds i8, i8* %2, i64 %23
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %20, %28
  %30 = add nsw i64 %23, 1
  %31 = getelementptr inbounds i8, i8* %2, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = mul nuw nsw i32 %19, %33
  %35 = add nuw nsw i32 %29, 16
  %36 = add nuw nsw i32 %35, %34
  %37 = lshr i32 %36, 5
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %24, i64 %14
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %24, i64 %1
  %41 = add i64 %23, %11
  %42 = add nuw nsw i32 %25, 1
  %43 = icmp slt i32 %42, %4
  br i1 %43, label %22, label %44

44:                                               ; preds = %22
  %45 = add nsw i32 %15, %5
  %46 = add nuw nsw i64 %14, 1
  %47 = icmp slt i64 %46, %12
  br i1 %47, label %13, label %48

48:                                               ; preds = %44
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_122FilterIntraPredictor_CILi8EhEEvPvlPKvS5_NS_20FilterIntraPredictorEii(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly, i8 zeroext, i32, i32) #0 {
  %8 = alloca [3 x [33 x i8]], align 16
  %9 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 99, i8* nonnull %9) #5
  %10 = getelementptr inbounds i8, i8* %2, i64 -1
  %11 = add nsw i32 %5, 1
  %12 = sext i32 %11 to i64
  %13 = icmp ugt i32 %11, 98
  %14 = sub nsw i64 99, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = getelementptr [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 0, i64 %12
  call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -86, i64 %15, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %9, i8* align 1 %10, i64 %12, i1 false)
  %17 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 1, i64 1
  %18 = sext i32 %5 to i64
  %19 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 1, i64 0
  %20 = zext i8 %4 to i64
  %21 = sext i32 %6 to i64
  br label %22

22:                                               ; preds = %122, %7
  %23 = phi i64 [ %129, %122 ], [ 0, %7 ]
  %24 = phi i32 [ %126, %122 ], [ 0, %7 ]
  %25 = phi i32 [ %127, %122 ], [ 2, %7 ]
  %26 = phi i32 [ %128, %122 ], [ 1, %7 ]
  %27 = phi i8* [ %125, %122 ], [ %0, %7 ]
  %28 = getelementptr inbounds i8, i8* %3, i64 %23
  %29 = load i8, i8* %28, align 1
  store i8 %29, i8* %19, align 1
  %30 = or i64 %23, 1
  %31 = getelementptr inbounds i8, i8* %3, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = sext i32 %25 to i64
  %34 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 %33, i64 0
  store i8 %32, i8* %34, align 1
  %35 = sext i32 %24 to i64
  br label %36

36:                                               ; preds = %65, %22
  %37 = phi i8 [ %67, %65 ], [ %32, %22 ]
  %38 = phi i64 [ %63, %65 ], [ 1, %22 ]
  %39 = add nsw i64 %38, -1
  %40 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 %35, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 %35, i64 %38
  %43 = load i8, i8* %42, align 1
  %44 = add nuw nsw i64 %38, 1
  %45 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 %35, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = add nuw nsw i64 %38, 2
  %48 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 %35, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = add nuw nsw i64 %38, 3
  %51 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 %35, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 1, i64 %39
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %41 to i32
  %56 = zext i8 %43 to i32
  %57 = zext i8 %46 to i32
  %58 = zext i8 %49 to i32
  %59 = zext i8 %52 to i32
  %60 = zext i8 %54 to i32
  %61 = zext i8 %37 to i32
  br label %68

62:                                               ; preds = %68
  %63 = add nuw nsw i64 %38, 4
  %64 = icmp slt i64 %63, %18
  br i1 %64, label %65, label %122

65:                                               ; preds = %62
  %66 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 %33, i64 %50
  %67 = load i8, i8* %66, align 1
  br label %36

68:                                               ; preds = %68, %36
  %69 = phi i64 [ 0, %36 ], [ %120, %68 ]
  %70 = trunc i64 %69 to i32
  %71 = and i64 %69, 3
  %72 = lshr i32 %70, 2
  %73 = mul nsw i32 %72, %26
  %74 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %20, i64 %69, i64 0
  %75 = load i8, i8* %74, align 8
  %76 = sext i8 %75 to i32
  %77 = mul nsw i32 %76, %55
  %78 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %20, i64 %69, i64 1
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = mul nsw i32 %80, %56
  %82 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %20, i64 %69, i64 2
  %83 = load i8, i8* %82, align 2
  %84 = sext i8 %83 to i32
  %85 = mul nsw i32 %84, %57
  %86 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %20, i64 %69, i64 3
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = mul nsw i32 %88, %58
  %90 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %20, i64 %69, i64 4
  %91 = load i8, i8* %90, align 4
  %92 = sext i8 %91 to i32
  %93 = mul nsw i32 %92, %59
  %94 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %20, i64 %69, i64 5
  %95 = load i8, i8* %94, align 1
  %96 = sext i8 %95 to i32
  %97 = mul nsw i32 %96, %60
  %98 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %20, i64 %69, i64 6
  %99 = load i8, i8* %98, align 2
  %100 = sext i8 %99 to i32
  %101 = mul nsw i32 %100, %61
  %102 = add nsw i32 %77, 8
  %103 = add nsw i32 %102, %81
  %104 = add nsw i32 %103, %85
  %105 = add nsw i32 %104, %89
  %106 = add nsw i32 %105, %93
  %107 = add i32 %106, %97
  %108 = add i32 %107, %101
  %109 = ashr i32 %108, 4
  %110 = icmp slt i32 %109, 255
  %111 = select i1 %110, i32 %109, i32 255
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i8
  %115 = add nsw i32 %73, 1
  %116 = sext i32 %115 to i64
  %117 = add nuw i64 %71, %38
  %118 = and i64 %117, 4294967295
  %119 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 %116, i64 %118
  store i8 %114, i8* %119, align 1
  %120 = add nuw nsw i64 %69, 1
  %121 = icmp eq i64 %120, 8
  br i1 %121, label %62, label %68

122:                                              ; preds = %62
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %17, i64 %18, i1 false)
  %123 = getelementptr inbounds i8, i8* %27, i64 %1
  %124 = getelementptr inbounds [3 x [33 x i8]], [3 x [33 x i8]]* %8, i64 0, i64 %33, i64 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %123, i8* align 1 %124, i64 %18, i1 false)
  %125 = getelementptr inbounds i8, i8* %123, i64 %1
  %126 = xor i32 %24, 2
  %127 = xor i32 %25, 2
  %128 = sub nsw i32 0, %26
  %129 = add nuw nsw i64 %23, 2
  %130 = icmp slt i64 %129, %21
  br i1 %130, label %22, label %131

131:                                              ; preds = %122
  call void @llvm.lifetime.end.p0i8(i64 99, i8* nonnull %9) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi4ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i64 [ 0, %4 ], [ %70, %7 ]
  %9 = phi i8* [ %0, %4 ], [ %69, %7 ]
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 0
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = mul nsw i32 %12, %3
  %14 = ashr i32 %13, 31
  %15 = add i32 %13, 32
  %16 = add i32 %15, %14
  %17 = ashr i32 %16, 6
  %18 = add nsw i32 %17, %6
  %19 = icmp slt i32 %18, 255
  %20 = select i1 %19, i32 %18, i32 255
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, %3
  %28 = ashr i32 %27, 31
  %29 = add i32 %27, 32
  %30 = add i32 %29, %28
  %31 = ashr i32 %30, 6
  %32 = add nsw i32 %31, %6
  %33 = icmp slt i32 %32, 255
  %34 = select i1 %33, i32 %32, i32 255
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 2
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %3
  %43 = ashr i32 %42, 31
  %44 = add i32 %42, 32
  %45 = add i32 %44, %43
  %46 = ashr i32 %45, 6
  %47 = add nsw i32 %46, %6
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 3
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = mul nsw i32 %56, %3
  %58 = ashr i32 %57, 31
  %59 = add i32 %57, 32
  %60 = add i32 %59, %58
  %61 = ashr i32 %60, 6
  %62 = add nsw i32 %61, %6
  %63 = icmp slt i32 %62, 255
  %64 = select i1 %63, i32 %62, i32 255
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %9, i64 %1
  %70 = add nuw nsw i64 %8, 1
  %71 = icmp eq i64 %70, 4
  br i1 %71, label %72, label %7

72:                                               ; preds = %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %3, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = shl nuw nsw i16 %13, 3
  %15 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  store i16 %14, i16* %15, align 2
  %16 = icmp slt i32 %6, 1
  %17 = select i1 %16, i32 %6, i32 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %3, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i16
  %22 = shl nuw nsw i16 %21, 3
  %23 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  store i16 %22, i16* %23, align 2
  %24 = add nuw nsw i16 %14, %22
  %25 = icmp slt i32 %6, 2
  %26 = select i1 %25, i32 %6, i32 2
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %3, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  %31 = shl nuw nsw i16 %30, 3
  %32 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  store i16 %31, i16* %32, align 2
  %33 = add nuw nsw i16 %24, %31
  %34 = icmp slt i32 %6, 3
  %35 = select i1 %34, i32 %6, i32 3
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %3, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = shl nuw nsw i16 %39, 3
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  store i16 %40, i16* %41, align 2
  %42 = add nuw nsw i16 %33, %40
  %43 = icmp sgt i32 %7, 0
  %44 = getelementptr inbounds i8, i8* %3, i64 %4
  %45 = select i1 %43, i8* %44, i8* %3
  %46 = getelementptr inbounds i8, i8* %45, i64 %10
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i16
  %49 = shl nuw nsw i16 %48, 3
  %50 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  store i16 %49, i16* %50, align 2
  %51 = add nuw nsw i16 %42, %49
  %52 = getelementptr inbounds i8, i8* %45, i64 %18
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i16
  %55 = shl nuw nsw i16 %54, 3
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  store i16 %55, i16* %56, align 2
  %57 = add nuw nsw i16 %51, %55
  %58 = zext i16 %57 to i32
  %59 = getelementptr inbounds i8, i8* %45, i64 %27
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = shl nuw nsw i16 %61, 3
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  store i16 %62, i16* %63, align 2
  %64 = zext i16 %62 to i32
  %65 = add nuw nsw i32 %58, %64
  %66 = getelementptr inbounds i8, i8* %45, i64 %36
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  %69 = shl nuw nsw i16 %68, 3
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  store i16 %69, i16* %70, align 2
  %71 = zext i16 %69 to i32
  %72 = add nuw nsw i32 %65, %71
  %73 = icmp sgt i32 %7, 1
  %74 = getelementptr inbounds i8, i8* %45, i64 %4
  %75 = select i1 %73, i8* %74, i8* %45
  %76 = getelementptr inbounds i8, i8* %75, i64 %10
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  %79 = shl nuw nsw i16 %78, 3
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  store i16 %79, i16* %80, align 2
  %81 = zext i16 %79 to i32
  %82 = add nuw nsw i32 %72, %81
  %83 = getelementptr inbounds i8, i8* %75, i64 %18
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i16
  %86 = shl nuw nsw i16 %85, 3
  %87 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  store i16 %86, i16* %87, align 2
  %88 = zext i16 %86 to i32
  %89 = add nuw nsw i32 %82, %88
  %90 = getelementptr inbounds i8, i8* %75, i64 %27
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i16
  %93 = shl nuw nsw i16 %92, 3
  %94 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  store i16 %93, i16* %94, align 2
  %95 = zext i16 %93 to i32
  %96 = add nuw nsw i32 %89, %95
  %97 = getelementptr inbounds i8, i8* %75, i64 %36
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i16
  %100 = shl nuw nsw i16 %99, 3
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  store i16 %100, i16* %101, align 2
  %102 = zext i16 %100 to i32
  %103 = add nuw nsw i32 %96, %102
  %104 = icmp sgt i32 %7, 2
  %105 = getelementptr inbounds i8, i8* %75, i64 %4
  %106 = select i1 %104, i8* %105, i8* %75
  %107 = getelementptr inbounds i8, i8* %106, i64 %10
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i16
  %110 = shl nuw nsw i16 %109, 3
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  store i16 %110, i16* %111, align 2
  %112 = zext i16 %110 to i32
  %113 = add nuw nsw i32 %103, %112
  %114 = getelementptr inbounds i8, i8* %106, i64 %18
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i16
  %117 = shl nuw nsw i16 %116, 3
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  store i16 %117, i16* %118, align 2
  %119 = zext i16 %117 to i32
  %120 = add nuw nsw i32 %113, %119
  %121 = getelementptr inbounds i8, i8* %106, i64 %27
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i16
  %124 = shl nuw nsw i16 %123, 3
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  store i16 %124, i16* %125, align 2
  %126 = zext i16 %124 to i32
  %127 = add nuw nsw i32 %120, %126
  %128 = getelementptr inbounds i8, i8* %106, i64 %36
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = shl nuw nsw i16 %130, 3
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %133 = zext i16 %131 to i32
  %134 = add nuw nsw i32 %127, %133
  %135 = add nuw nsw i32 %134, 8
  %136 = lshr i32 %135, 4
  %137 = trunc i32 %136 to i16
  %138 = load i16, i16* %15, align 2
  %139 = sub i16 %138, %137
  store i16 %139, i16* %15, align 2
  %140 = load i16, i16* %23, align 2
  %141 = sub i16 %140, %137
  store i16 %141, i16* %23, align 2
  %142 = load i16, i16* %32, align 2
  %143 = sub i16 %142, %137
  store i16 %143, i16* %32, align 2
  %144 = load i16, i16* %41, align 2
  %145 = sub i16 %144, %137
  store i16 %145, i16* %41, align 2
  %146 = load i16, i16* %50, align 2
  %147 = sub i16 %146, %137
  store i16 %147, i16* %50, align 2
  %148 = load i16, i16* %56, align 2
  %149 = sub i16 %148, %137
  store i16 %149, i16* %56, align 2
  %150 = load i16, i16* %63, align 2
  %151 = sub i16 %150, %137
  store i16 %151, i16* %63, align 2
  %152 = sub nsw i16 %69, %137
  store i16 %152, i16* %70, align 2
  %153 = sub nsw i16 %79, %137
  store i16 %153, i16* %80, align 2
  %154 = sub nsw i16 %86, %137
  store i16 %154, i16* %87, align 2
  %155 = sub nsw i16 %93, %137
  store i16 %155, i16* %94, align 2
  %156 = sub nsw i16 %100, %137
  store i16 %156, i16* %101, align 2
  %157 = sub nsw i16 %110, %137
  store i16 %157, i16* %111, align 2
  %158 = sub nsw i16 %117, %137
  store i16 %158, i16* %118, align 2
  %159 = sub nsw i16 %124, %137
  store i16 %159, i16* %125, align 2
  %160 = sub nsw i16 %131, %137
  store i16 %160, i16* %132, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = add nsw i64 %10, 1
  %12 = icmp slt i32 %6, 2
  %13 = select i1 %12, i32 %6, i32 2
  %14 = sext i32 %13 to i64
  %15 = add nsw i64 %14, 1
  %16 = icmp slt i32 %6, 4
  %17 = select i1 %16, i32 %6, i32 4
  %18 = sext i32 %17 to i64
  %19 = add nsw i64 %18, 1
  %20 = icmp slt i32 %6, 6
  %21 = select i1 %20, i32 %6, i32 6
  %22 = sext i32 %21 to i64
  %23 = add nsw i64 %22, 1
  %24 = getelementptr inbounds i8, i8* %3, i64 %10
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = getelementptr inbounds i8, i8* %3, i64 %11
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i16
  %30 = add nuw nsw i16 %29, %26
  %31 = shl nuw nsw i16 %30, 2
  %32 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  store i16 %31, i16* %32, align 2
  %33 = getelementptr inbounds i8, i8* %3, i64 %14
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  %36 = getelementptr inbounds i8, i8* %3, i64 %15
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i16
  %39 = add nuw nsw i16 %38, %35
  %40 = shl nuw nsw i16 %39, 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  store i16 %40, i16* %41, align 2
  %42 = add nuw nsw i16 %31, %40
  %43 = getelementptr inbounds i8, i8* %3, i64 %18
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = getelementptr inbounds i8, i8* %3, i64 %19
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i16
  %49 = add nuw nsw i16 %48, %45
  %50 = shl nuw nsw i16 %49, 2
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  store i16 %50, i16* %51, align 2
  %52 = add nuw nsw i16 %42, %50
  %53 = getelementptr inbounds i8, i8* %3, i64 %22
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i16
  %56 = getelementptr inbounds i8, i8* %3, i64 %23
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i16
  %59 = add nuw nsw i16 %58, %55
  %60 = shl nuw nsw i16 %59, 2
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  store i16 %60, i16* %61, align 2
  %62 = add nuw nsw i16 %52, %60
  %63 = icmp sgt i32 %7, 0
  %64 = getelementptr inbounds i8, i8* %3, i64 %4
  %65 = select i1 %63, i8* %64, i8* %3
  %66 = getelementptr inbounds i8, i8* %65, i64 %10
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  %69 = getelementptr inbounds i8, i8* %65, i64 %11
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i16
  %72 = add nuw nsw i16 %71, %68
  %73 = shl nuw nsw i16 %72, 2
  %74 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  store i16 %73, i16* %74, align 2
  %75 = add nuw nsw i16 %62, %73
  %76 = zext i16 %75 to i32
  %77 = getelementptr inbounds i8, i8* %65, i64 %14
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i16
  %80 = getelementptr inbounds i8, i8* %65, i64 %15
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i16
  %83 = add nuw nsw i16 %82, %79
  %84 = shl nuw nsw i16 %83, 2
  %85 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  store i16 %84, i16* %85, align 2
  %86 = zext i16 %84 to i32
  %87 = add nuw nsw i32 %76, %86
  %88 = getelementptr inbounds i8, i8* %65, i64 %18
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i16
  %91 = getelementptr inbounds i8, i8* %65, i64 %19
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i16
  %94 = add nuw nsw i16 %93, %90
  %95 = shl nuw nsw i16 %94, 2
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  store i16 %95, i16* %96, align 2
  %97 = zext i16 %95 to i32
  %98 = add nuw nsw i32 %87, %97
  %99 = getelementptr inbounds i8, i8* %65, i64 %22
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i16
  %102 = getelementptr inbounds i8, i8* %65, i64 %23
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i16
  %105 = add nuw nsw i16 %104, %101
  %106 = shl nuw nsw i16 %105, 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  store i16 %106, i16* %107, align 2
  %108 = zext i16 %106 to i32
  %109 = add nuw nsw i32 %98, %108
  %110 = icmp sgt i32 %7, 1
  %111 = getelementptr inbounds i8, i8* %65, i64 %4
  %112 = select i1 %110, i8* %111, i8* %65
  %113 = getelementptr inbounds i8, i8* %112, i64 %10
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i16
  %116 = getelementptr inbounds i8, i8* %112, i64 %11
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i16
  %119 = add nuw nsw i16 %118, %115
  %120 = shl nuw nsw i16 %119, 2
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  store i16 %120, i16* %121, align 2
  %122 = zext i16 %120 to i32
  %123 = add nuw nsw i32 %109, %122
  %124 = getelementptr inbounds i8, i8* %112, i64 %14
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i16
  %127 = getelementptr inbounds i8, i8* %112, i64 %15
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i16
  %130 = add nuw nsw i16 %129, %126
  %131 = shl nuw nsw i16 %130, 2
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  store i16 %131, i16* %132, align 2
  %133 = zext i16 %131 to i32
  %134 = add nuw nsw i32 %123, %133
  %135 = getelementptr inbounds i8, i8* %112, i64 %18
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i16
  %138 = getelementptr inbounds i8, i8* %112, i64 %19
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i16
  %141 = add nuw nsw i16 %140, %137
  %142 = shl nuw nsw i16 %141, 2
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  store i16 %142, i16* %143, align 2
  %144 = zext i16 %142 to i32
  %145 = add nuw nsw i32 %134, %144
  %146 = getelementptr inbounds i8, i8* %112, i64 %22
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i16
  %149 = getelementptr inbounds i8, i8* %112, i64 %23
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i16
  %152 = add nuw nsw i16 %151, %148
  %153 = shl nuw nsw i16 %152, 2
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  store i16 %153, i16* %154, align 2
  %155 = zext i16 %153 to i32
  %156 = add nsw i32 %145, %155
  %157 = icmp sgt i32 %7, 2
  %158 = getelementptr inbounds i8, i8* %112, i64 %4
  %159 = select i1 %157, i8* %158, i8* %112
  %160 = getelementptr inbounds i8, i8* %159, i64 %10
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i16
  %163 = getelementptr inbounds i8, i8* %159, i64 %11
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i16
  %166 = add nuw nsw i16 %165, %162
  %167 = shl nuw nsw i16 %166, 2
  %168 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  store i16 %167, i16* %168, align 2
  %169 = zext i16 %167 to i32
  %170 = add nsw i32 %156, %169
  %171 = getelementptr inbounds i8, i8* %159, i64 %14
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i16
  %174 = getelementptr inbounds i8, i8* %159, i64 %15
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i16
  %177 = add nuw nsw i16 %176, %173
  %178 = shl nuw nsw i16 %177, 2
  %179 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  store i16 %178, i16* %179, align 2
  %180 = zext i16 %178 to i32
  %181 = add nsw i32 %170, %180
  %182 = getelementptr inbounds i8, i8* %159, i64 %18
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i16
  %185 = getelementptr inbounds i8, i8* %159, i64 %19
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i16
  %188 = add nuw nsw i16 %187, %184
  %189 = shl nuw nsw i16 %188, 2
  %190 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  store i16 %189, i16* %190, align 2
  %191 = zext i16 %189 to i32
  %192 = add nsw i32 %181, %191
  %193 = getelementptr inbounds i8, i8* %159, i64 %22
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i16
  %196 = getelementptr inbounds i8, i8* %159, i64 %23
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i16
  %199 = add nuw nsw i16 %198, %195
  %200 = shl nuw nsw i16 %199, 2
  %201 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  store i16 %200, i16* %201, align 2
  %202 = zext i16 %200 to i32
  %203 = add nsw i32 %192, %202
  %204 = add nsw i32 %203, 8
  %205 = lshr i32 %204, 4
  %206 = trunc i32 %205 to i16
  %207 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %208 = load i16, i16* %207, align 2
  %209 = sub i16 %208, %206
  store i16 %209, i16* %207, align 2
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %211 = load i16, i16* %210, align 2
  %212 = sub i16 %211, %206
  store i16 %212, i16* %210, align 2
  %213 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %214 = load i16, i16* %213, align 2
  %215 = sub i16 %214, %206
  store i16 %215, i16* %213, align 2
  %216 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %217 = load i16, i16* %216, align 2
  %218 = sub i16 %217, %206
  store i16 %218, i16* %216, align 2
  %219 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %220 = load i16, i16* %219, align 2
  %221 = sub i16 %220, %206
  store i16 %221, i16* %219, align 2
  %222 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %223 = load i16, i16* %222, align 2
  %224 = sub i16 %223, %206
  store i16 %224, i16* %222, align 2
  %225 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %226 = load i16, i16* %225, align 2
  %227 = sub i16 %226, %206
  store i16 %227, i16* %225, align 2
  %228 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %229 = load i16, i16* %228, align 2
  %230 = sub i16 %229, %206
  store i16 %230, i16* %228, align 2
  %231 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %232 = load i16, i16* %231, align 2
  %233 = sub i16 %232, %206
  store i16 %233, i16* %231, align 2
  %234 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %235 = load i16, i16* %234, align 2
  %236 = sub i16 %235, %206
  store i16 %236, i16* %234, align 2
  %237 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %238 = load i16, i16* %237, align 2
  %239 = sub i16 %238, %206
  store i16 %239, i16* %237, align 2
  %240 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %241 = load i16, i16* %240, align 2
  %242 = sub i16 %241, %206
  store i16 %242, i16* %240, align 2
  %243 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %244 = load i16, i16* %243, align 2
  %245 = sub i16 %244, %206
  store i16 %245, i16* %243, align 2
  %246 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %247 = load i16, i16* %246, align 2
  %248 = sub i16 %247, %206
  store i16 %248, i16* %246, align 2
  %249 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %250 = load i16, i16* %249, align 2
  %251 = sub i16 %250, %206
  store i16 %251, i16* %249, align 2
  %252 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %253 = load i16, i16* %252, align 2
  %254 = sub i16 %253, %206
  store i16 %254, i16* %252, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = icmp slt i32 %6, 0
  %10 = select i1 %9, i32 %6, i32 0
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %11, %4
  %13 = sext i32 %7 to i64
  %14 = add nsw i64 %11, 1
  %15 = add nsw i64 %12, 1
  %16 = icmp slt i32 %6, 2
  %17 = select i1 %16, i32 %6, i32 2
  %18 = sext i32 %17 to i64
  %19 = add nsw i64 %18, %4
  %20 = add nsw i64 %18, 1
  %21 = add nsw i64 %19, 1
  %22 = icmp slt i32 %6, 4
  %23 = select i1 %22, i32 %6, i32 4
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, %4
  %26 = add nsw i64 %24, 1
  %27 = add nsw i64 %25, 1
  %28 = icmp slt i32 %6, 6
  %29 = select i1 %28, i32 %6, i32 6
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, %4
  %32 = add nsw i64 %30, 1
  %33 = add nsw i64 %31, 1
  br label %34

34:                                               ; preds = %34, %5
  %35 = phi i64 [ 0, %5 ], [ %118, %34 ]
  %36 = phi i8* [ %3, %5 ], [ %117, %34 ]
  %37 = phi i32 [ 0, %5 ], [ %113, %34 ]
  %38 = getelementptr inbounds i8, i8* %36, i64 %11
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = getelementptr inbounds i8, i8* %36, i64 %14
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  %44 = getelementptr inbounds i8, i8* %36, i64 %12
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = getelementptr inbounds i8, i8* %36, i64 %15
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = add nuw nsw i16 %43, %40
  %51 = add nuw nsw i16 %50, %46
  %52 = add nuw nsw i16 %51, %49
  %53 = shl nuw nsw i16 %52, 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 0
  store i16 %53, i16* %54, align 2
  %55 = zext i16 %53 to i32
  %56 = add nsw i32 %37, %55
  %57 = getelementptr inbounds i8, i8* %36, i64 %18
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i16
  %60 = getelementptr inbounds i8, i8* %36, i64 %20
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  %63 = getelementptr inbounds i8, i8* %36, i64 %19
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = getelementptr inbounds i8, i8* %36, i64 %21
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  %69 = add nuw nsw i16 %62, %59
  %70 = add nuw nsw i16 %69, %65
  %71 = add nuw nsw i16 %70, %68
  %72 = shl nuw nsw i16 %71, 1
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 1
  store i16 %72, i16* %73, align 2
  %74 = zext i16 %72 to i32
  %75 = add nsw i32 %56, %74
  %76 = getelementptr inbounds i8, i8* %36, i64 %24
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  %79 = getelementptr inbounds i8, i8* %36, i64 %26
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = getelementptr inbounds i8, i8* %36, i64 %25
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i16
  %85 = getelementptr inbounds i8, i8* %36, i64 %27
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i16
  %88 = add nuw nsw i16 %81, %78
  %89 = add nuw nsw i16 %88, %84
  %90 = add nuw nsw i16 %89, %87
  %91 = shl nuw nsw i16 %90, 1
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 2
  store i16 %91, i16* %92, align 2
  %93 = zext i16 %91 to i32
  %94 = add nsw i32 %75, %93
  %95 = getelementptr inbounds i8, i8* %36, i64 %30
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = getelementptr inbounds i8, i8* %36, i64 %32
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i16
  %101 = getelementptr inbounds i8, i8* %36, i64 %31
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i16
  %104 = getelementptr inbounds i8, i8* %36, i64 %33
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  %107 = add nuw nsw i16 %100, %97
  %108 = add nuw nsw i16 %107, %103
  %109 = add nuw nsw i16 %108, %106
  %110 = shl nuw nsw i16 %109, 1
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 3
  store i16 %110, i16* %111, align 2
  %112 = zext i16 %110 to i32
  %113 = add nsw i32 %94, %112
  %114 = shl nuw i64 %35, 1
  %115 = icmp slt i64 %114, %13
  %116 = getelementptr inbounds i8, i8* %36, i64 %8
  %117 = select i1 %115, i8* %116, i8* %36
  %118 = add nuw nsw i64 %35, 1
  %119 = icmp eq i64 %118, 4
  br i1 %119, label %120, label %34

120:                                              ; preds = %34
  %121 = add nsw i32 %113, 8
  %122 = lshr i32 %121, 4
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %125 = load i16, i16* %124, align 2
  %126 = sub i16 %125, %123
  store i16 %126, i16* %124, align 2
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %128 = load i16, i16* %127, align 2
  %129 = sub i16 %128, %123
  store i16 %129, i16* %127, align 2
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %131 = load i16, i16* %130, align 2
  %132 = sub i16 %131, %123
  store i16 %132, i16* %130, align 2
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %134 = load i16, i16* %133, align 2
  %135 = sub i16 %134, %123
  store i16 %135, i16* %133, align 2
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %137 = load i16, i16* %136, align 2
  %138 = sub i16 %137, %123
  store i16 %138, i16* %136, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %140 = load i16, i16* %139, align 2
  %141 = sub i16 %140, %123
  store i16 %141, i16* %139, align 2
  %142 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %143 = load i16, i16* %142, align 2
  %144 = sub i16 %143, %123
  store i16 %144, i16* %142, align 2
  %145 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %146 = load i16, i16* %145, align 2
  %147 = sub i16 %146, %123
  store i16 %147, i16* %145, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %149 = load i16, i16* %148, align 2
  %150 = sub i16 %149, %123
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %152 = load i16, i16* %151, align 2
  %153 = sub i16 %152, %123
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %155 = load i16, i16* %154, align 2
  %156 = sub i16 %155, %123
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %158 = load i16, i16* %157, align 2
  %159 = sub i16 %158, %123
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %161 = load i16, i16* %160, align 2
  %162 = sub i16 %161, %123
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %164 = load i16, i16* %163, align 2
  %165 = sub i16 %164, %123
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %167 = load i16, i16* %166, align 2
  %168 = sub i16 %167, %123
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %170 = load i16, i16* %169, align 2
  %171 = sub i16 %170, %123
  store i16 %171, i16* %169, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi8ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i64 [ 0, %4 ], [ %70, %7 ]
  %9 = phi i8* [ %0, %4 ], [ %69, %7 ]
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 0
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = mul nsw i32 %12, %3
  %14 = ashr i32 %13, 31
  %15 = add i32 %13, 32
  %16 = add i32 %15, %14
  %17 = ashr i32 %16, 6
  %18 = add nsw i32 %17, %6
  %19 = icmp slt i32 %18, 255
  %20 = select i1 %19, i32 %18, i32 255
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, %3
  %28 = ashr i32 %27, 31
  %29 = add i32 %27, 32
  %30 = add i32 %29, %28
  %31 = ashr i32 %30, 6
  %32 = add nsw i32 %31, %6
  %33 = icmp slt i32 %32, 255
  %34 = select i1 %33, i32 %32, i32 255
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 2
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %3
  %43 = ashr i32 %42, 31
  %44 = add i32 %42, 32
  %45 = add i32 %44, %43
  %46 = ashr i32 %45, 6
  %47 = add nsw i32 %46, %6
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 3
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = mul nsw i32 %56, %3
  %58 = ashr i32 %57, 31
  %59 = add i32 %57, 32
  %60 = add i32 %59, %58
  %61 = ashr i32 %60, 6
  %62 = add nsw i32 %61, %6
  %63 = icmp slt i32 %62, 255
  %64 = select i1 %63, i32 %62, i32 255
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %9, i64 %1
  %70 = add nuw nsw i64 %8, 1
  %71 = icmp eq i64 %70, 8
  br i1 %71, label %72, label %7

72:                                               ; preds = %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = icmp slt i32 %6, 1
  %13 = select i1 %12, i32 %6, i32 1
  %14 = sext i32 %13 to i64
  %15 = icmp slt i32 %6, 2
  %16 = select i1 %15, i32 %6, i32 2
  %17 = sext i32 %16 to i64
  %18 = icmp slt i32 %6, 3
  %19 = select i1 %18, i32 %6, i32 3
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %21, %5
  %22 = phi i64 [ 0, %5 ], [ %56, %21 ]
  %23 = phi i8* [ %3, %5 ], [ %55, %21 ]
  %24 = phi i32 [ 0, %5 ], [ %52, %21 ]
  %25 = getelementptr inbounds i8, i8* %23, i64 %10
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  %28 = shl nuw nsw i16 %27, 3
  %29 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %22, i64 0
  store i16 %28, i16* %29, align 2
  %30 = zext i16 %28 to i32
  %31 = add nsw i32 %24, %30
  %32 = getelementptr inbounds i8, i8* %23, i64 %14
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = shl nuw nsw i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %22, i64 1
  store i16 %35, i16* %36, align 2
  %37 = zext i16 %35 to i32
  %38 = add nsw i32 %31, %37
  %39 = getelementptr inbounds i8, i8* %23, i64 %17
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  %42 = shl nuw nsw i16 %41, 3
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %22, i64 2
  store i16 %42, i16* %43, align 2
  %44 = zext i16 %42 to i32
  %45 = add nsw i32 %38, %44
  %46 = getelementptr inbounds i8, i8* %23, i64 %20
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i16
  %49 = shl nuw nsw i16 %48, 3
  %50 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %22, i64 3
  store i16 %49, i16* %50, align 2
  %51 = zext i16 %49 to i32
  %52 = add nsw i32 %45, %51
  %53 = icmp slt i64 %22, %11
  %54 = getelementptr inbounds i8, i8* %23, i64 %4
  %55 = select i1 %53, i8* %54, i8* %23
  %56 = add nuw nsw i64 %22, 1
  %57 = icmp eq i64 %56, 8
  br i1 %57, label %58, label %21

58:                                               ; preds = %21
  %59 = add nsw i32 %52, 16
  %60 = lshr i32 %59, 5
  %61 = trunc i32 %60 to i16
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %63 = load i16, i16* %62, align 2
  %64 = sub i16 %63, %61
  store i16 %64, i16* %62, align 2
  %65 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %66 = load i16, i16* %65, align 2
  %67 = sub i16 %66, %61
  store i16 %67, i16* %65, align 2
  %68 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %69 = load i16, i16* %68, align 2
  %70 = sub i16 %69, %61
  store i16 %70, i16* %68, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %72 = load i16, i16* %71, align 2
  %73 = sub i16 %72, %61
  store i16 %73, i16* %71, align 2
  %74 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %75 = load i16, i16* %74, align 2
  %76 = sub i16 %75, %61
  store i16 %76, i16* %74, align 2
  %77 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %78 = load i16, i16* %77, align 2
  %79 = sub i16 %78, %61
  store i16 %79, i16* %77, align 2
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %81 = load i16, i16* %80, align 2
  %82 = sub i16 %81, %61
  store i16 %82, i16* %80, align 2
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %84 = load i16, i16* %83, align 2
  %85 = sub i16 %84, %61
  store i16 %85, i16* %83, align 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %87 = load i16, i16* %86, align 2
  %88 = sub i16 %87, %61
  store i16 %88, i16* %86, align 2
  %89 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %90 = load i16, i16* %89, align 2
  %91 = sub i16 %90, %61
  store i16 %91, i16* %89, align 2
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %93 = load i16, i16* %92, align 2
  %94 = sub i16 %93, %61
  store i16 %94, i16* %92, align 2
  %95 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %96 = load i16, i16* %95, align 2
  %97 = sub i16 %96, %61
  store i16 %97, i16* %95, align 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %99 = load i16, i16* %98, align 2
  %100 = sub i16 %99, %61
  store i16 %100, i16* %98, align 2
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %102 = load i16, i16* %101, align 2
  %103 = sub i16 %102, %61
  store i16 %103, i16* %101, align 2
  %104 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %105 = load i16, i16* %104, align 2
  %106 = sub i16 %105, %61
  store i16 %106, i16* %104, align 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %108 = load i16, i16* %107, align 2
  %109 = sub i16 %108, %61
  store i16 %109, i16* %107, align 2
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %111 = load i16, i16* %110, align 2
  %112 = sub i16 %111, %61
  store i16 %112, i16* %110, align 2
  %113 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 1
  %114 = load i16, i16* %113, align 2
  %115 = sub i16 %114, %61
  store i16 %115, i16* %113, align 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 2
  %117 = load i16, i16* %116, align 2
  %118 = sub i16 %117, %61
  store i16 %118, i16* %116, align 2
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 3
  %120 = load i16, i16* %119, align 2
  %121 = sub i16 %120, %61
  store i16 %121, i16* %119, align 2
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %123 = load i16, i16* %122, align 2
  %124 = sub i16 %123, %61
  store i16 %124, i16* %122, align 2
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 1
  %126 = load i16, i16* %125, align 2
  %127 = sub i16 %126, %61
  store i16 %127, i16* %125, align 2
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = sub i16 %129, %61
  store i16 %130, i16* %128, align 2
  %131 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 3
  %132 = load i16, i16* %131, align 2
  %133 = sub i16 %132, %61
  store i16 %133, i16* %131, align 2
  %134 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %135 = load i16, i16* %134, align 2
  %136 = sub i16 %135, %61
  store i16 %136, i16* %134, align 2
  %137 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 1
  %138 = load i16, i16* %137, align 2
  %139 = sub i16 %138, %61
  store i16 %139, i16* %137, align 2
  %140 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 2
  %141 = load i16, i16* %140, align 2
  %142 = sub i16 %141, %61
  store i16 %142, i16* %140, align 2
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 3
  %144 = load i16, i16* %143, align 2
  %145 = sub i16 %144, %61
  store i16 %145, i16* %143, align 2
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %147 = load i16, i16* %146, align 2
  %148 = sub i16 %147, %61
  store i16 %148, i16* %146, align 2
  %149 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 1
  %150 = load i16, i16* %149, align 2
  %151 = sub i16 %150, %61
  store i16 %151, i16* %149, align 2
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 2
  %153 = load i16, i16* %152, align 2
  %154 = sub i16 %153, %61
  store i16 %154, i16* %152, align 2
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 3
  %156 = load i16, i16* %155, align 2
  %157 = sub i16 %156, %61
  store i16 %157, i16* %155, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = add nsw i64 %10, 1
  %13 = icmp slt i32 %6, 2
  %14 = select i1 %13, i32 %6, i32 2
  %15 = sext i32 %14 to i64
  %16 = add nsw i64 %15, 1
  %17 = icmp slt i32 %6, 4
  %18 = select i1 %17, i32 %6, i32 4
  %19 = sext i32 %18 to i64
  %20 = add nsw i64 %19, 1
  %21 = icmp slt i32 %6, 6
  %22 = select i1 %21, i32 %6, i32 6
  %23 = sext i32 %22 to i64
  %24 = add nsw i64 %23, 1
  br label %25

25:                                               ; preds = %25, %5
  %26 = phi i64 [ 0, %5 ], [ %76, %25 ]
  %27 = phi i8* [ %3, %5 ], [ %75, %25 ]
  %28 = phi i32 [ 0, %5 ], [ %72, %25 ]
  %29 = getelementptr inbounds i8, i8* %27, i64 %10
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i16
  %32 = getelementptr inbounds i8, i8* %27, i64 %12
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = add nuw nsw i16 %34, %31
  %36 = shl nuw nsw i16 %35, 2
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %26, i64 0
  store i16 %36, i16* %37, align 2
  %38 = zext i16 %36 to i32
  %39 = add nsw i32 %28, %38
  %40 = getelementptr inbounds i8, i8* %27, i64 %15
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i16
  %43 = getelementptr inbounds i8, i8* %27, i64 %16
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = add nuw nsw i16 %45, %42
  %47 = shl nuw nsw i16 %46, 2
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %26, i64 1
  store i16 %47, i16* %48, align 2
  %49 = zext i16 %47 to i32
  %50 = add nsw i32 %39, %49
  %51 = getelementptr inbounds i8, i8* %27, i64 %19
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = getelementptr inbounds i8, i8* %27, i64 %20
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i16
  %57 = add nuw nsw i16 %56, %53
  %58 = shl nuw nsw i16 %57, 2
  %59 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %26, i64 2
  store i16 %58, i16* %59, align 2
  %60 = zext i16 %58 to i32
  %61 = add nsw i32 %50, %60
  %62 = getelementptr inbounds i8, i8* %27, i64 %23
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = getelementptr inbounds i8, i8* %27, i64 %24
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = add nuw nsw i16 %67, %64
  %69 = shl nuw nsw i16 %68, 2
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %26, i64 3
  store i16 %69, i16* %70, align 2
  %71 = zext i16 %69 to i32
  %72 = add nsw i32 %61, %71
  %73 = icmp slt i64 %26, %11
  %74 = getelementptr inbounds i8, i8* %27, i64 %4
  %75 = select i1 %73, i8* %74, i8* %27
  %76 = add nuw nsw i64 %26, 1
  %77 = icmp eq i64 %76, 8
  br i1 %77, label %78, label %25

78:                                               ; preds = %25
  %79 = add nsw i32 %72, 16
  %80 = lshr i32 %79, 5
  %81 = trunc i32 %80 to i16
  %82 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %83 = load i16, i16* %82, align 2
  %84 = sub i16 %83, %81
  store i16 %84, i16* %82, align 2
  %85 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %86 = load i16, i16* %85, align 2
  %87 = sub i16 %86, %81
  store i16 %87, i16* %85, align 2
  %88 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %89 = load i16, i16* %88, align 2
  %90 = sub i16 %89, %81
  store i16 %90, i16* %88, align 2
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %92 = load i16, i16* %91, align 2
  %93 = sub i16 %92, %81
  store i16 %93, i16* %91, align 2
  %94 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %95 = load i16, i16* %94, align 2
  %96 = sub i16 %95, %81
  store i16 %96, i16* %94, align 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %98 = load i16, i16* %97, align 2
  %99 = sub i16 %98, %81
  store i16 %99, i16* %97, align 2
  %100 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %101 = load i16, i16* %100, align 2
  %102 = sub i16 %101, %81
  store i16 %102, i16* %100, align 2
  %103 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %104 = load i16, i16* %103, align 2
  %105 = sub i16 %104, %81
  store i16 %105, i16* %103, align 2
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %107 = load i16, i16* %106, align 2
  %108 = sub i16 %107, %81
  store i16 %108, i16* %106, align 2
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %110 = load i16, i16* %109, align 2
  %111 = sub i16 %110, %81
  store i16 %111, i16* %109, align 2
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %113 = load i16, i16* %112, align 2
  %114 = sub i16 %113, %81
  store i16 %114, i16* %112, align 2
  %115 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %116 = load i16, i16* %115, align 2
  %117 = sub i16 %116, %81
  store i16 %117, i16* %115, align 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %119 = load i16, i16* %118, align 2
  %120 = sub i16 %119, %81
  store i16 %120, i16* %118, align 2
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %122 = load i16, i16* %121, align 2
  %123 = sub i16 %122, %81
  store i16 %123, i16* %121, align 2
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %125 = load i16, i16* %124, align 2
  %126 = sub i16 %125, %81
  store i16 %126, i16* %124, align 2
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %128 = load i16, i16* %127, align 2
  %129 = sub i16 %128, %81
  store i16 %129, i16* %127, align 2
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %131 = load i16, i16* %130, align 2
  %132 = sub i16 %131, %81
  store i16 %132, i16* %130, align 2
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 1
  %134 = load i16, i16* %133, align 2
  %135 = sub i16 %134, %81
  store i16 %135, i16* %133, align 2
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 2
  %137 = load i16, i16* %136, align 2
  %138 = sub i16 %137, %81
  store i16 %138, i16* %136, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 3
  %140 = load i16, i16* %139, align 2
  %141 = sub i16 %140, %81
  store i16 %141, i16* %139, align 2
  %142 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %143 = load i16, i16* %142, align 2
  %144 = sub i16 %143, %81
  store i16 %144, i16* %142, align 2
  %145 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 1
  %146 = load i16, i16* %145, align 2
  %147 = sub i16 %146, %81
  store i16 %147, i16* %145, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 2
  %149 = load i16, i16* %148, align 2
  %150 = sub i16 %149, %81
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 3
  %152 = load i16, i16* %151, align 2
  %153 = sub i16 %152, %81
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %155 = load i16, i16* %154, align 2
  %156 = sub i16 %155, %81
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 1
  %158 = load i16, i16* %157, align 2
  %159 = sub i16 %158, %81
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 2
  %161 = load i16, i16* %160, align 2
  %162 = sub i16 %161, %81
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 3
  %164 = load i16, i16* %163, align 2
  %165 = sub i16 %164, %81
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %167 = load i16, i16* %166, align 2
  %168 = sub i16 %167, %81
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 1
  %170 = load i16, i16* %169, align 2
  %171 = sub i16 %170, %81
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 2
  %173 = load i16, i16* %172, align 2
  %174 = sub i16 %173, %81
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 3
  %176 = load i16, i16* %175, align 2
  %177 = sub i16 %176, %81
  store i16 %177, i16* %175, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = icmp slt i32 %6, 0
  %10 = select i1 %9, i32 %6, i32 0
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %11, %4
  %13 = sext i32 %7 to i64
  %14 = add nsw i64 %11, 1
  %15 = add nsw i64 %12, 1
  %16 = icmp slt i32 %6, 2
  %17 = select i1 %16, i32 %6, i32 2
  %18 = sext i32 %17 to i64
  %19 = add nsw i64 %18, %4
  %20 = add nsw i64 %18, 1
  %21 = add nsw i64 %19, 1
  %22 = icmp slt i32 %6, 4
  %23 = select i1 %22, i32 %6, i32 4
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, %4
  %26 = add nsw i64 %24, 1
  %27 = add nsw i64 %25, 1
  %28 = icmp slt i32 %6, 6
  %29 = select i1 %28, i32 %6, i32 6
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, %4
  %32 = add nsw i64 %30, 1
  %33 = add nsw i64 %31, 1
  br label %34

34:                                               ; preds = %34, %5
  %35 = phi i64 [ 0, %5 ], [ %118, %34 ]
  %36 = phi i8* [ %3, %5 ], [ %117, %34 ]
  %37 = phi i32 [ 0, %5 ], [ %113, %34 ]
  %38 = getelementptr inbounds i8, i8* %36, i64 %11
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = getelementptr inbounds i8, i8* %36, i64 %14
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  %44 = getelementptr inbounds i8, i8* %36, i64 %12
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = getelementptr inbounds i8, i8* %36, i64 %15
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = add nuw nsw i16 %43, %40
  %51 = add nuw nsw i16 %50, %46
  %52 = add nuw nsw i16 %51, %49
  %53 = shl nuw nsw i16 %52, 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 0
  store i16 %53, i16* %54, align 2
  %55 = zext i16 %53 to i32
  %56 = add nsw i32 %37, %55
  %57 = getelementptr inbounds i8, i8* %36, i64 %18
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i16
  %60 = getelementptr inbounds i8, i8* %36, i64 %20
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  %63 = getelementptr inbounds i8, i8* %36, i64 %19
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = getelementptr inbounds i8, i8* %36, i64 %21
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  %69 = add nuw nsw i16 %62, %59
  %70 = add nuw nsw i16 %69, %65
  %71 = add nuw nsw i16 %70, %68
  %72 = shl nuw nsw i16 %71, 1
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 1
  store i16 %72, i16* %73, align 2
  %74 = zext i16 %72 to i32
  %75 = add nsw i32 %56, %74
  %76 = getelementptr inbounds i8, i8* %36, i64 %24
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  %79 = getelementptr inbounds i8, i8* %36, i64 %26
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = getelementptr inbounds i8, i8* %36, i64 %25
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i16
  %85 = getelementptr inbounds i8, i8* %36, i64 %27
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i16
  %88 = add nuw nsw i16 %81, %78
  %89 = add nuw nsw i16 %88, %84
  %90 = add nuw nsw i16 %89, %87
  %91 = shl nuw nsw i16 %90, 1
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 2
  store i16 %91, i16* %92, align 2
  %93 = zext i16 %91 to i32
  %94 = add nsw i32 %75, %93
  %95 = getelementptr inbounds i8, i8* %36, i64 %30
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = getelementptr inbounds i8, i8* %36, i64 %32
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i16
  %101 = getelementptr inbounds i8, i8* %36, i64 %31
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i16
  %104 = getelementptr inbounds i8, i8* %36, i64 %33
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  %107 = add nuw nsw i16 %100, %97
  %108 = add nuw nsw i16 %107, %103
  %109 = add nuw nsw i16 %108, %106
  %110 = shl nuw nsw i16 %109, 1
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 3
  store i16 %110, i16* %111, align 2
  %112 = zext i16 %110 to i32
  %113 = add nsw i32 %94, %112
  %114 = shl nuw i64 %35, 1
  %115 = icmp slt i64 %114, %13
  %116 = getelementptr inbounds i8, i8* %36, i64 %8
  %117 = select i1 %115, i8* %116, i8* %36
  %118 = add nuw nsw i64 %35, 1
  %119 = icmp eq i64 %118, 8
  br i1 %119, label %120, label %34

120:                                              ; preds = %34
  %121 = add nsw i32 %113, 16
  %122 = lshr i32 %121, 5
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %125 = load i16, i16* %124, align 2
  %126 = sub i16 %125, %123
  store i16 %126, i16* %124, align 2
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %128 = load i16, i16* %127, align 2
  %129 = sub i16 %128, %123
  store i16 %129, i16* %127, align 2
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %131 = load i16, i16* %130, align 2
  %132 = sub i16 %131, %123
  store i16 %132, i16* %130, align 2
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %134 = load i16, i16* %133, align 2
  %135 = sub i16 %134, %123
  store i16 %135, i16* %133, align 2
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %137 = load i16, i16* %136, align 2
  %138 = sub i16 %137, %123
  store i16 %138, i16* %136, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %140 = load i16, i16* %139, align 2
  %141 = sub i16 %140, %123
  store i16 %141, i16* %139, align 2
  %142 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %143 = load i16, i16* %142, align 2
  %144 = sub i16 %143, %123
  store i16 %144, i16* %142, align 2
  %145 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %146 = load i16, i16* %145, align 2
  %147 = sub i16 %146, %123
  store i16 %147, i16* %145, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %149 = load i16, i16* %148, align 2
  %150 = sub i16 %149, %123
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %152 = load i16, i16* %151, align 2
  %153 = sub i16 %152, %123
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %155 = load i16, i16* %154, align 2
  %156 = sub i16 %155, %123
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %158 = load i16, i16* %157, align 2
  %159 = sub i16 %158, %123
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %161 = load i16, i16* %160, align 2
  %162 = sub i16 %161, %123
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %164 = load i16, i16* %163, align 2
  %165 = sub i16 %164, %123
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %167 = load i16, i16* %166, align 2
  %168 = sub i16 %167, %123
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %170 = load i16, i16* %169, align 2
  %171 = sub i16 %170, %123
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %173 = load i16, i16* %172, align 2
  %174 = sub i16 %173, %123
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 1
  %176 = load i16, i16* %175, align 2
  %177 = sub i16 %176, %123
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 2
  %179 = load i16, i16* %178, align 2
  %180 = sub i16 %179, %123
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 3
  %182 = load i16, i16* %181, align 2
  %183 = sub i16 %182, %123
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %185 = load i16, i16* %184, align 2
  %186 = sub i16 %185, %123
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 1
  %188 = load i16, i16* %187, align 2
  %189 = sub i16 %188, %123
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 2
  %191 = load i16, i16* %190, align 2
  %192 = sub i16 %191, %123
  store i16 %192, i16* %190, align 2
  %193 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 3
  %194 = load i16, i16* %193, align 2
  %195 = sub i16 %194, %123
  store i16 %195, i16* %193, align 2
  %196 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %197 = load i16, i16* %196, align 2
  %198 = sub i16 %197, %123
  store i16 %198, i16* %196, align 2
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 1
  %200 = load i16, i16* %199, align 2
  %201 = sub i16 %200, %123
  store i16 %201, i16* %199, align 2
  %202 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 2
  %203 = load i16, i16* %202, align 2
  %204 = sub i16 %203, %123
  store i16 %204, i16* %202, align 2
  %205 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 3
  %206 = load i16, i16* %205, align 2
  %207 = sub i16 %206, %123
  store i16 %207, i16* %205, align 2
  %208 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %209 = load i16, i16* %208, align 2
  %210 = sub i16 %209, %123
  store i16 %210, i16* %208, align 2
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 1
  %212 = load i16, i16* %211, align 2
  %213 = sub i16 %212, %123
  store i16 %213, i16* %211, align 2
  %214 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 2
  %215 = load i16, i16* %214, align 2
  %216 = sub i16 %215, %123
  store i16 %216, i16* %214, align 2
  %217 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 3
  %218 = load i16, i16* %217, align 2
  %219 = sub i16 %218, %123
  store i16 %219, i16* %217, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi16ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i64 [ 0, %4 ], [ %70, %7 ]
  %9 = phi i8* [ %0, %4 ], [ %69, %7 ]
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 0
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = mul nsw i32 %12, %3
  %14 = ashr i32 %13, 31
  %15 = add i32 %13, 32
  %16 = add i32 %15, %14
  %17 = ashr i32 %16, 6
  %18 = add nsw i32 %17, %6
  %19 = icmp slt i32 %18, 255
  %20 = select i1 %19, i32 %18, i32 255
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, %3
  %28 = ashr i32 %27, 31
  %29 = add i32 %27, 32
  %30 = add i32 %29, %28
  %31 = ashr i32 %30, 6
  %32 = add nsw i32 %31, %6
  %33 = icmp slt i32 %32, 255
  %34 = select i1 %33, i32 %32, i32 255
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 2
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %3
  %43 = ashr i32 %42, 31
  %44 = add i32 %42, 32
  %45 = add i32 %44, %43
  %46 = ashr i32 %45, 6
  %47 = add nsw i32 %46, %6
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 3
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = mul nsw i32 %56, %3
  %58 = ashr i32 %57, 31
  %59 = add i32 %57, 32
  %60 = add i32 %59, %58
  %61 = ashr i32 %60, 6
  %62 = add nsw i32 %61, %6
  %63 = icmp slt i32 %62, 255
  %64 = select i1 %63, i32 %62, i32 255
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %9, i64 %1
  %70 = add nuw nsw i64 %8, 1
  %71 = icmp eq i64 %70, 16
  br i1 %71, label %72, label %7

72:                                               ; preds = %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = icmp slt i32 %6, 1
  %13 = select i1 %12, i32 %6, i32 1
  %14 = sext i32 %13 to i64
  %15 = icmp slt i32 %6, 2
  %16 = select i1 %15, i32 %6, i32 2
  %17 = sext i32 %16 to i64
  %18 = icmp slt i32 %6, 3
  %19 = select i1 %18, i32 %6, i32 3
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %21, %5
  %22 = phi i64 [ 0, %5 ], [ %56, %21 ]
  %23 = phi i8* [ %3, %5 ], [ %55, %21 ]
  %24 = phi i32 [ 0, %5 ], [ %52, %21 ]
  %25 = getelementptr inbounds i8, i8* %23, i64 %10
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  %28 = shl nuw nsw i16 %27, 3
  %29 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %22, i64 0
  store i16 %28, i16* %29, align 2
  %30 = zext i16 %28 to i32
  %31 = add nsw i32 %24, %30
  %32 = getelementptr inbounds i8, i8* %23, i64 %14
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = shl nuw nsw i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %22, i64 1
  store i16 %35, i16* %36, align 2
  %37 = zext i16 %35 to i32
  %38 = add nsw i32 %31, %37
  %39 = getelementptr inbounds i8, i8* %23, i64 %17
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  %42 = shl nuw nsw i16 %41, 3
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %22, i64 2
  store i16 %42, i16* %43, align 2
  %44 = zext i16 %42 to i32
  %45 = add nsw i32 %38, %44
  %46 = getelementptr inbounds i8, i8* %23, i64 %20
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i16
  %49 = shl nuw nsw i16 %48, 3
  %50 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %22, i64 3
  store i16 %49, i16* %50, align 2
  %51 = zext i16 %49 to i32
  %52 = add nsw i32 %45, %51
  %53 = icmp slt i64 %22, %11
  %54 = getelementptr inbounds i8, i8* %23, i64 %4
  %55 = select i1 %53, i8* %54, i8* %23
  %56 = add nuw nsw i64 %22, 1
  %57 = icmp eq i64 %56, 16
  br i1 %57, label %58, label %21

58:                                               ; preds = %21
  %59 = add nsw i32 %52, 32
  %60 = lshr i32 %59, 6
  %61 = trunc i32 %60 to i16
  br label %62

62:                                               ; preds = %62, %58
  %63 = phi i64 [ 0, %58 ], [ %76, %62 ]
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %63, i64 0
  %65 = load i16, i16* %64, align 2
  %66 = sub i16 %65, %61
  store i16 %66, i16* %64, align 2
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %63, i64 1
  %68 = load i16, i16* %67, align 2
  %69 = sub i16 %68, %61
  store i16 %69, i16* %67, align 2
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %63, i64 2
  %71 = load i16, i16* %70, align 2
  %72 = sub i16 %71, %61
  store i16 %72, i16* %70, align 2
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %63, i64 3
  %74 = load i16, i16* %73, align 2
  %75 = sub i16 %74, %61
  store i16 %75, i16* %73, align 2
  %76 = add nuw nsw i64 %63, 1
  %77 = icmp eq i64 %76, 16
  br i1 %77, label %78, label %62

78:                                               ; preds = %62
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = add nsw i64 %10, 1
  %13 = icmp slt i32 %6, 2
  %14 = select i1 %13, i32 %6, i32 2
  %15 = sext i32 %14 to i64
  %16 = add nsw i64 %15, 1
  %17 = icmp slt i32 %6, 4
  %18 = select i1 %17, i32 %6, i32 4
  %19 = sext i32 %18 to i64
  %20 = add nsw i64 %19, 1
  %21 = icmp slt i32 %6, 6
  %22 = select i1 %21, i32 %6, i32 6
  %23 = sext i32 %22 to i64
  %24 = add nsw i64 %23, 1
  br label %25

25:                                               ; preds = %25, %5
  %26 = phi i64 [ 0, %5 ], [ %76, %25 ]
  %27 = phi i8* [ %3, %5 ], [ %75, %25 ]
  %28 = phi i32 [ 0, %5 ], [ %72, %25 ]
  %29 = getelementptr inbounds i8, i8* %27, i64 %10
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i16
  %32 = getelementptr inbounds i8, i8* %27, i64 %12
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = add nuw nsw i16 %34, %31
  %36 = shl nuw nsw i16 %35, 2
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %26, i64 0
  store i16 %36, i16* %37, align 2
  %38 = zext i16 %36 to i32
  %39 = add nsw i32 %28, %38
  %40 = getelementptr inbounds i8, i8* %27, i64 %15
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i16
  %43 = getelementptr inbounds i8, i8* %27, i64 %16
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = add nuw nsw i16 %45, %42
  %47 = shl nuw nsw i16 %46, 2
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %26, i64 1
  store i16 %47, i16* %48, align 2
  %49 = zext i16 %47 to i32
  %50 = add nsw i32 %39, %49
  %51 = getelementptr inbounds i8, i8* %27, i64 %19
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = getelementptr inbounds i8, i8* %27, i64 %20
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i16
  %57 = add nuw nsw i16 %56, %53
  %58 = shl nuw nsw i16 %57, 2
  %59 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %26, i64 2
  store i16 %58, i16* %59, align 2
  %60 = zext i16 %58 to i32
  %61 = add nsw i32 %50, %60
  %62 = getelementptr inbounds i8, i8* %27, i64 %23
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = getelementptr inbounds i8, i8* %27, i64 %24
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = add nuw nsw i16 %67, %64
  %69 = shl nuw nsw i16 %68, 2
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %26, i64 3
  store i16 %69, i16* %70, align 2
  %71 = zext i16 %69 to i32
  %72 = add nsw i32 %61, %71
  %73 = icmp slt i64 %26, %11
  %74 = getelementptr inbounds i8, i8* %27, i64 %4
  %75 = select i1 %73, i8* %74, i8* %27
  %76 = add nuw nsw i64 %26, 1
  %77 = icmp eq i64 %76, 16
  br i1 %77, label %78, label %25

78:                                               ; preds = %25
  %79 = add nsw i32 %72, 32
  %80 = lshr i32 %79, 6
  %81 = trunc i32 %80 to i16
  br label %82

82:                                               ; preds = %82, %78
  %83 = phi i64 [ 0, %78 ], [ %96, %82 ]
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %83, i64 0
  %85 = load i16, i16* %84, align 2
  %86 = sub i16 %85, %81
  store i16 %86, i16* %84, align 2
  %87 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %83, i64 1
  %88 = load i16, i16* %87, align 2
  %89 = sub i16 %88, %81
  store i16 %89, i16* %87, align 2
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %83, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = sub i16 %91, %81
  store i16 %92, i16* %90, align 2
  %93 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %83, i64 3
  %94 = load i16, i16* %93, align 2
  %95 = sub i16 %94, %81
  store i16 %95, i16* %93, align 2
  %96 = add nuw nsw i64 %83, 1
  %97 = icmp eq i64 %96, 16
  br i1 %97, label %98, label %82

98:                                               ; preds = %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = icmp slt i32 %6, 0
  %10 = select i1 %9, i32 %6, i32 0
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %11, %4
  %13 = sext i32 %7 to i64
  %14 = add nsw i64 %11, 1
  %15 = add nsw i64 %12, 1
  %16 = icmp slt i32 %6, 2
  %17 = select i1 %16, i32 %6, i32 2
  %18 = sext i32 %17 to i64
  %19 = add nsw i64 %18, %4
  %20 = add nsw i64 %18, 1
  %21 = add nsw i64 %19, 1
  %22 = icmp slt i32 %6, 4
  %23 = select i1 %22, i32 %6, i32 4
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, %4
  %26 = add nsw i64 %24, 1
  %27 = add nsw i64 %25, 1
  %28 = icmp slt i32 %6, 6
  %29 = select i1 %28, i32 %6, i32 6
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, %4
  %32 = add nsw i64 %30, 1
  %33 = add nsw i64 %31, 1
  br label %34

34:                                               ; preds = %34, %5
  %35 = phi i64 [ 0, %5 ], [ %118, %34 ]
  %36 = phi i8* [ %3, %5 ], [ %117, %34 ]
  %37 = phi i32 [ 0, %5 ], [ %113, %34 ]
  %38 = getelementptr inbounds i8, i8* %36, i64 %11
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = getelementptr inbounds i8, i8* %36, i64 %14
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  %44 = getelementptr inbounds i8, i8* %36, i64 %12
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = getelementptr inbounds i8, i8* %36, i64 %15
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = add nuw nsw i16 %43, %40
  %51 = add nuw nsw i16 %50, %46
  %52 = add nuw nsw i16 %51, %49
  %53 = shl nuw nsw i16 %52, 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 0
  store i16 %53, i16* %54, align 2
  %55 = zext i16 %53 to i32
  %56 = add nsw i32 %37, %55
  %57 = getelementptr inbounds i8, i8* %36, i64 %18
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i16
  %60 = getelementptr inbounds i8, i8* %36, i64 %20
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  %63 = getelementptr inbounds i8, i8* %36, i64 %19
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = getelementptr inbounds i8, i8* %36, i64 %21
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  %69 = add nuw nsw i16 %62, %59
  %70 = add nuw nsw i16 %69, %65
  %71 = add nuw nsw i16 %70, %68
  %72 = shl nuw nsw i16 %71, 1
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 1
  store i16 %72, i16* %73, align 2
  %74 = zext i16 %72 to i32
  %75 = add nsw i32 %56, %74
  %76 = getelementptr inbounds i8, i8* %36, i64 %24
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  %79 = getelementptr inbounds i8, i8* %36, i64 %26
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = getelementptr inbounds i8, i8* %36, i64 %25
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i16
  %85 = getelementptr inbounds i8, i8* %36, i64 %27
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i16
  %88 = add nuw nsw i16 %81, %78
  %89 = add nuw nsw i16 %88, %84
  %90 = add nuw nsw i16 %89, %87
  %91 = shl nuw nsw i16 %90, 1
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 2
  store i16 %91, i16* %92, align 2
  %93 = zext i16 %91 to i32
  %94 = add nsw i32 %75, %93
  %95 = getelementptr inbounds i8, i8* %36, i64 %30
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = getelementptr inbounds i8, i8* %36, i64 %32
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i16
  %101 = getelementptr inbounds i8, i8* %36, i64 %31
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i16
  %104 = getelementptr inbounds i8, i8* %36, i64 %33
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  %107 = add nuw nsw i16 %100, %97
  %108 = add nuw nsw i16 %107, %103
  %109 = add nuw nsw i16 %108, %106
  %110 = shl nuw nsw i16 %109, 1
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %35, i64 3
  store i16 %110, i16* %111, align 2
  %112 = zext i16 %110 to i32
  %113 = add nsw i32 %94, %112
  %114 = shl nuw i64 %35, 1
  %115 = icmp slt i64 %114, %13
  %116 = getelementptr inbounds i8, i8* %36, i64 %8
  %117 = select i1 %115, i8* %116, i8* %36
  %118 = add nuw nsw i64 %35, 1
  %119 = icmp eq i64 %118, 16
  br i1 %119, label %120, label %34

120:                                              ; preds = %34
  %121 = add nsw i32 %113, 32
  %122 = lshr i32 %121, 6
  %123 = trunc i32 %122 to i16
  br label %124

124:                                              ; preds = %124, %120
  %125 = phi i64 [ 0, %120 ], [ %138, %124 ]
  %126 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %125, i64 0
  %127 = load i16, i16* %126, align 2
  %128 = sub i16 %127, %123
  store i16 %128, i16* %126, align 2
  %129 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %125, i64 1
  %130 = load i16, i16* %129, align 2
  %131 = sub i16 %130, %123
  store i16 %131, i16* %129, align 2
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %125, i64 2
  %133 = load i16, i16* %132, align 2
  %134 = sub i16 %133, %123
  store i16 %134, i16* %132, align 2
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %125, i64 3
  %136 = load i16, i16* %135, align 2
  %137 = sub i16 %136, %123
  store i16 %137, i16* %135, align 2
  %138 = add nuw nsw i64 %125, 1
  %139 = icmp eq i64 %138, 16
  br i1 %139, label %140, label %124

140:                                              ; preds = %124
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi4ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i64 [ 0, %4 ], [ %130, %7 ]
  %9 = phi i8* [ %0, %4 ], [ %129, %7 ]
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 0
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = mul nsw i32 %12, %3
  %14 = ashr i32 %13, 31
  %15 = add i32 %13, 32
  %16 = add i32 %15, %14
  %17 = ashr i32 %16, 6
  %18 = add nsw i32 %17, %6
  %19 = icmp slt i32 %18, 255
  %20 = select i1 %19, i32 %18, i32 255
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, %3
  %28 = ashr i32 %27, 31
  %29 = add i32 %27, 32
  %30 = add i32 %29, %28
  %31 = ashr i32 %30, 6
  %32 = add nsw i32 %31, %6
  %33 = icmp slt i32 %32, 255
  %34 = select i1 %33, i32 %32, i32 255
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 2
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %3
  %43 = ashr i32 %42, 31
  %44 = add i32 %42, 32
  %45 = add i32 %44, %43
  %46 = ashr i32 %45, 6
  %47 = add nsw i32 %46, %6
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 3
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = mul nsw i32 %56, %3
  %58 = ashr i32 %57, 31
  %59 = add i32 %57, 32
  %60 = add i32 %59, %58
  %61 = ashr i32 %60, 6
  %62 = add nsw i32 %61, %6
  %63 = icmp slt i32 %62, 255
  %64 = select i1 %63, i32 %62, i32 255
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 4
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %3
  %73 = ashr i32 %72, 31
  %74 = add i32 %72, 32
  %75 = add i32 %74, %73
  %76 = ashr i32 %75, 6
  %77 = add nsw i32 %76, %6
  %78 = icmp slt i32 %77, 255
  %79 = select i1 %78, i32 %77, i32 255
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %9, i64 4
  store i8 %82, i8* %83, align 1
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = mul nsw i32 %86, %3
  %88 = ashr i32 %87, 31
  %89 = add i32 %87, 32
  %90 = add i32 %89, %88
  %91 = ashr i32 %90, 6
  %92 = add nsw i32 %91, %6
  %93 = icmp slt i32 %92, 255
  %94 = select i1 %93, i32 %92, i32 255
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %9, i64 5
  store i8 %97, i8* %98, align 1
  %99 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 6
  %100 = load i16, i16* %99, align 2
  %101 = sext i16 %100 to i32
  %102 = mul nsw i32 %101, %3
  %103 = ashr i32 %102, 31
  %104 = add i32 %102, 32
  %105 = add i32 %104, %103
  %106 = ashr i32 %105, 6
  %107 = add nsw i32 %106, %6
  %108 = icmp slt i32 %107, 255
  %109 = select i1 %108, i32 %107, i32 255
  %110 = icmp sgt i32 %109, 0
  %111 = select i1 %110, i32 %109, i32 0
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %9, i64 6
  store i8 %112, i8* %113, align 1
  %114 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = mul nsw i32 %116, %3
  %118 = ashr i32 %117, 31
  %119 = add i32 %117, 32
  %120 = add i32 %119, %118
  %121 = ashr i32 %120, 6
  %122 = add nsw i32 %121, %6
  %123 = icmp slt i32 %122, 255
  %124 = select i1 %123, i32 %122, i32 255
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %9, i64 7
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %9, i64 %1
  %130 = add nuw nsw i64 %8, 1
  %131 = icmp eq i64 %130, 4
  br i1 %131, label %132, label %7

132:                                              ; preds = %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = icmp slt i32 %6, 1
  %13 = select i1 %12, i32 %6, i32 1
  %14 = sext i32 %13 to i64
  %15 = icmp slt i32 %6, 2
  %16 = select i1 %15, i32 %6, i32 2
  %17 = sext i32 %16 to i64
  %18 = icmp slt i32 %6, 3
  %19 = select i1 %18, i32 %6, i32 3
  %20 = sext i32 %19 to i64
  %21 = icmp slt i32 %6, 4
  %22 = select i1 %21, i32 %6, i32 4
  %23 = sext i32 %22 to i64
  %24 = icmp slt i32 %6, 5
  %25 = select i1 %24, i32 %6, i32 5
  %26 = sext i32 %25 to i64
  %27 = icmp slt i32 %6, 6
  %28 = select i1 %27, i32 %6, i32 6
  %29 = sext i32 %28 to i64
  %30 = icmp slt i32 %6, 7
  %31 = select i1 %30, i32 %6, i32 7
  %32 = sext i32 %31 to i64
  br label %33

33:                                               ; preds = %33, %5
  %34 = phi i64 [ 0, %5 ], [ %96, %33 ]
  %35 = phi i8* [ %3, %5 ], [ %95, %33 ]
  %36 = phi i32 [ 0, %5 ], [ %92, %33 ]
  %37 = getelementptr inbounds i8, i8* %35, i64 %10
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = shl nuw nsw i16 %39, 3
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 0
  store i16 %40, i16* %41, align 2
  %42 = zext i16 %40 to i32
  %43 = add nsw i32 %36, %42
  %44 = getelementptr inbounds i8, i8* %35, i64 %14
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = shl nuw nsw i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 1
  store i16 %47, i16* %48, align 2
  %49 = zext i16 %47 to i32
  %50 = add nsw i32 %43, %49
  %51 = getelementptr inbounds i8, i8* %35, i64 %17
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = shl nuw nsw i16 %53, 3
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 2
  store i16 %54, i16* %55, align 2
  %56 = zext i16 %54 to i32
  %57 = add nsw i32 %50, %56
  %58 = getelementptr inbounds i8, i8* %35, i64 %20
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = shl nuw nsw i16 %60, 3
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 3
  store i16 %61, i16* %62, align 2
  %63 = zext i16 %61 to i32
  %64 = add nsw i32 %57, %63
  %65 = getelementptr inbounds i8, i8* %35, i64 %23
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = shl nuw nsw i16 %67, 3
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 4
  store i16 %68, i16* %69, align 2
  %70 = zext i16 %68 to i32
  %71 = add nsw i32 %64, %70
  %72 = getelementptr inbounds i8, i8* %35, i64 %26
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i16
  %75 = shl nuw nsw i16 %74, 3
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 5
  store i16 %75, i16* %76, align 2
  %77 = zext i16 %75 to i32
  %78 = add nsw i32 %71, %77
  %79 = getelementptr inbounds i8, i8* %35, i64 %29
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = shl nuw nsw i16 %81, 3
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 6
  store i16 %82, i16* %83, align 2
  %84 = zext i16 %82 to i32
  %85 = add nsw i32 %78, %84
  %86 = getelementptr inbounds i8, i8* %35, i64 %32
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i16
  %89 = shl nuw nsw i16 %88, 3
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 7
  store i16 %89, i16* %90, align 2
  %91 = zext i16 %89 to i32
  %92 = add nsw i32 %85, %91
  %93 = icmp slt i64 %34, %11
  %94 = getelementptr inbounds i8, i8* %35, i64 %4
  %95 = select i1 %93, i8* %94, i8* %35
  %96 = add nuw nsw i64 %34, 1
  %97 = icmp eq i64 %96, 4
  br i1 %97, label %98, label %33

98:                                               ; preds = %33
  %99 = add nsw i32 %92, 16
  %100 = lshr i32 %99, 5
  %101 = trunc i32 %100 to i16
  %102 = insertelement <8 x i16> undef, i16 %101, i32 0
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> zeroinitializer
  %104 = bitcast [32 x i16]* %0 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2
  %106 = sub <8 x i16> %105, %103
  %107 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2
  %111 = sub <8 x i16> %110, %103
  %112 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2
  %116 = sub <8 x i16> %115, %103
  %117 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2
  %121 = sub <8 x i16> %120, %103
  %122 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = add nsw i64 %10, 1
  %13 = icmp slt i32 %6, 2
  %14 = select i1 %13, i32 %6, i32 2
  %15 = sext i32 %14 to i64
  %16 = add nsw i64 %15, 1
  %17 = icmp slt i32 %6, 4
  %18 = select i1 %17, i32 %6, i32 4
  %19 = sext i32 %18 to i64
  %20 = add nsw i64 %19, 1
  %21 = icmp slt i32 %6, 6
  %22 = select i1 %21, i32 %6, i32 6
  %23 = sext i32 %22 to i64
  %24 = add nsw i64 %23, 1
  %25 = icmp slt i32 %6, 8
  %26 = select i1 %25, i32 %6, i32 8
  %27 = sext i32 %26 to i64
  %28 = add nsw i64 %27, 1
  %29 = icmp slt i32 %6, 10
  %30 = select i1 %29, i32 %6, i32 10
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %31, 1
  %33 = icmp slt i32 %6, 12
  %34 = select i1 %33, i32 %6, i32 12
  %35 = sext i32 %34 to i64
  %36 = add nsw i64 %35, 1
  %37 = icmp slt i32 %6, 14
  %38 = select i1 %37, i32 %6, i32 14
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, 1
  br label %41

41:                                               ; preds = %41, %5
  %42 = phi i64 [ 0, %5 ], [ %136, %41 ]
  %43 = phi i8* [ %3, %5 ], [ %135, %41 ]
  %44 = phi i32 [ 0, %5 ], [ %132, %41 ]
  %45 = getelementptr inbounds i8, i8* %43, i64 %10
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  %48 = getelementptr inbounds i8, i8* %43, i64 %12
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = add nuw nsw i16 %50, %47
  %52 = shl nuw nsw i16 %51, 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 0
  store i16 %52, i16* %53, align 2
  %54 = zext i16 %52 to i32
  %55 = add nsw i32 %44, %54
  %56 = getelementptr inbounds i8, i8* %43, i64 %15
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i16
  %59 = getelementptr inbounds i8, i8* %43, i64 %16
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = add nuw nsw i16 %61, %58
  %63 = shl nuw nsw i16 %62, 2
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 1
  store i16 %63, i16* %64, align 2
  %65 = zext i16 %63 to i32
  %66 = add nsw i32 %55, %65
  %67 = getelementptr inbounds i8, i8* %43, i64 %19
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i16
  %70 = getelementptr inbounds i8, i8* %43, i64 %20
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i16
  %73 = add nuw nsw i16 %72, %69
  %74 = shl nuw nsw i16 %73, 2
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 2
  store i16 %74, i16* %75, align 2
  %76 = zext i16 %74 to i32
  %77 = add nsw i32 %66, %76
  %78 = getelementptr inbounds i8, i8* %43, i64 %23
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i16
  %81 = getelementptr inbounds i8, i8* %43, i64 %24
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = add nuw nsw i16 %83, %80
  %85 = shl nuw nsw i16 %84, 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 3
  store i16 %85, i16* %86, align 2
  %87 = zext i16 %85 to i32
  %88 = add nsw i32 %77, %87
  %89 = getelementptr inbounds i8, i8* %43, i64 %27
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i16
  %92 = getelementptr inbounds i8, i8* %43, i64 %28
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = add nuw nsw i16 %94, %91
  %96 = shl nuw nsw i16 %95, 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 4
  store i16 %96, i16* %97, align 2
  %98 = zext i16 %96 to i32
  %99 = add nsw i32 %88, %98
  %100 = getelementptr inbounds i8, i8* %43, i64 %31
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = getelementptr inbounds i8, i8* %43, i64 %32
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = add nuw nsw i16 %105, %102
  %107 = shl nuw nsw i16 %106, 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 5
  store i16 %107, i16* %108, align 2
  %109 = zext i16 %107 to i32
  %110 = add nsw i32 %99, %109
  %111 = getelementptr inbounds i8, i8* %43, i64 %35
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i16
  %114 = getelementptr inbounds i8, i8* %43, i64 %36
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i16
  %117 = add nuw nsw i16 %116, %113
  %118 = shl nuw nsw i16 %117, 2
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 6
  store i16 %118, i16* %119, align 2
  %120 = zext i16 %118 to i32
  %121 = add nsw i32 %110, %120
  %122 = getelementptr inbounds i8, i8* %43, i64 %39
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = getelementptr inbounds i8, i8* %43, i64 %40
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = add nuw nsw i16 %127, %124
  %129 = shl nuw nsw i16 %128, 2
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 7
  store i16 %129, i16* %130, align 2
  %131 = zext i16 %129 to i32
  %132 = add nsw i32 %121, %131
  %133 = icmp slt i64 %42, %11
  %134 = getelementptr inbounds i8, i8* %43, i64 %4
  %135 = select i1 %133, i8* %134, i8* %43
  %136 = add nuw nsw i64 %42, 1
  %137 = icmp eq i64 %136, 4
  br i1 %137, label %138, label %41

138:                                              ; preds = %41
  %139 = add nsw i32 %132, 16
  %140 = lshr i32 %139, 5
  %141 = trunc i32 %140 to i16
  %142 = insertelement <8 x i16> undef, i16 %141, i32 0
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> zeroinitializer
  %144 = bitcast [32 x i16]* %0 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2
  %146 = sub <8 x i16> %145, %143
  %147 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = sub <8 x i16> %150, %143
  %152 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2
  %156 = sub <8 x i16> %155, %143
  %157 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2
  %161 = sub <8 x i16> %160, %143
  %162 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = icmp slt i32 %6, 0
  %10 = select i1 %9, i32 %6, i32 0
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %11, %4
  %13 = sext i32 %7 to i64
  %14 = add nsw i64 %11, 1
  %15 = add nsw i64 %12, 1
  %16 = icmp slt i32 %6, 2
  %17 = select i1 %16, i32 %6, i32 2
  %18 = sext i32 %17 to i64
  %19 = add nsw i64 %18, %4
  %20 = add nsw i64 %18, 1
  %21 = add nsw i64 %19, 1
  %22 = icmp slt i32 %6, 4
  %23 = select i1 %22, i32 %6, i32 4
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, %4
  %26 = add nsw i64 %24, 1
  %27 = add nsw i64 %25, 1
  %28 = icmp slt i32 %6, 6
  %29 = select i1 %28, i32 %6, i32 6
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, %4
  %32 = add nsw i64 %30, 1
  %33 = add nsw i64 %31, 1
  %34 = icmp slt i32 %6, 8
  %35 = select i1 %34, i32 %6, i32 8
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %36, %4
  %38 = add nsw i64 %36, 1
  %39 = add nsw i64 %37, 1
  %40 = icmp slt i32 %6, 10
  %41 = select i1 %40, i32 %6, i32 10
  %42 = sext i32 %41 to i64
  %43 = add nsw i64 %42, %4
  %44 = add nsw i64 %42, 1
  %45 = add nsw i64 %43, 1
  %46 = icmp slt i32 %6, 12
  %47 = select i1 %46, i32 %6, i32 12
  %48 = sext i32 %47 to i64
  %49 = add nsw i64 %48, %4
  %50 = add nsw i64 %48, 1
  %51 = add nsw i64 %49, 1
  %52 = icmp slt i32 %6, 14
  %53 = select i1 %52, i32 %6, i32 14
  %54 = sext i32 %53 to i64
  %55 = add nsw i64 %54, %4
  %56 = add nsw i64 %54, 1
  %57 = add nsw i64 %55, 1
  br label %58

58:                                               ; preds = %58, %5
  %59 = phi i64 [ 0, %5 ], [ %218, %58 ]
  %60 = phi i8* [ %3, %5 ], [ %217, %58 ]
  %61 = phi i32 [ 0, %5 ], [ %213, %58 ]
  %62 = getelementptr inbounds i8, i8* %60, i64 %11
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = getelementptr inbounds i8, i8* %60, i64 %14
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = getelementptr inbounds i8, i8* %60, i64 %12
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i16
  %71 = getelementptr inbounds i8, i8* %60, i64 %15
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  %74 = add nuw nsw i16 %67, %64
  %75 = add nuw nsw i16 %74, %70
  %76 = add nuw nsw i16 %75, %73
  %77 = shl nuw nsw i16 %76, 1
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 0
  store i16 %77, i16* %78, align 2
  %79 = zext i16 %77 to i32
  %80 = add nsw i32 %61, %79
  %81 = getelementptr inbounds i8, i8* %60, i64 %18
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = getelementptr inbounds i8, i8* %60, i64 %20
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  %87 = getelementptr inbounds i8, i8* %60, i64 %19
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i16
  %90 = getelementptr inbounds i8, i8* %60, i64 %21
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i16
  %93 = add nuw nsw i16 %86, %83
  %94 = add nuw nsw i16 %93, %89
  %95 = add nuw nsw i16 %94, %92
  %96 = shl nuw nsw i16 %95, 1
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 1
  store i16 %96, i16* %97, align 2
  %98 = zext i16 %96 to i32
  %99 = add nsw i32 %80, %98
  %100 = getelementptr inbounds i8, i8* %60, i64 %24
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = getelementptr inbounds i8, i8* %60, i64 %26
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = getelementptr inbounds i8, i8* %60, i64 %25
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i16
  %109 = getelementptr inbounds i8, i8* %60, i64 %27
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i16
  %112 = add nuw nsw i16 %105, %102
  %113 = add nuw nsw i16 %112, %108
  %114 = add nuw nsw i16 %113, %111
  %115 = shl nuw nsw i16 %114, 1
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 2
  store i16 %115, i16* %116, align 2
  %117 = zext i16 %115 to i32
  %118 = add nsw i32 %99, %117
  %119 = getelementptr inbounds i8, i8* %60, i64 %30
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i16
  %122 = getelementptr inbounds i8, i8* %60, i64 %32
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = getelementptr inbounds i8, i8* %60, i64 %31
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = getelementptr inbounds i8, i8* %60, i64 %33
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = add nuw nsw i16 %124, %121
  %132 = add nuw nsw i16 %131, %127
  %133 = add nuw nsw i16 %132, %130
  %134 = shl nuw nsw i16 %133, 1
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 3
  store i16 %134, i16* %135, align 2
  %136 = zext i16 %134 to i32
  %137 = add nsw i32 %118, %136
  %138 = getelementptr inbounds i8, i8* %60, i64 %36
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i16
  %141 = getelementptr inbounds i8, i8* %60, i64 %38
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i16
  %144 = getelementptr inbounds i8, i8* %60, i64 %37
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  %147 = getelementptr inbounds i8, i8* %60, i64 %39
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i16
  %150 = add nuw nsw i16 %143, %140
  %151 = add nuw nsw i16 %150, %146
  %152 = add nuw nsw i16 %151, %149
  %153 = shl nuw nsw i16 %152, 1
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 4
  store i16 %153, i16* %154, align 2
  %155 = zext i16 %153 to i32
  %156 = add nsw i32 %137, %155
  %157 = getelementptr inbounds i8, i8* %60, i64 %42
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i16
  %160 = getelementptr inbounds i8, i8* %60, i64 %44
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i16
  %163 = getelementptr inbounds i8, i8* %60, i64 %43
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i16
  %166 = getelementptr inbounds i8, i8* %60, i64 %45
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i16
  %169 = add nuw nsw i16 %162, %159
  %170 = add nuw nsw i16 %169, %165
  %171 = add nuw nsw i16 %170, %168
  %172 = shl nuw nsw i16 %171, 1
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 5
  store i16 %172, i16* %173, align 2
  %174 = zext i16 %172 to i32
  %175 = add nsw i32 %156, %174
  %176 = getelementptr inbounds i8, i8* %60, i64 %48
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i16
  %179 = getelementptr inbounds i8, i8* %60, i64 %50
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i16
  %182 = getelementptr inbounds i8, i8* %60, i64 %49
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i16
  %185 = getelementptr inbounds i8, i8* %60, i64 %51
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i16
  %188 = add nuw nsw i16 %181, %178
  %189 = add nuw nsw i16 %188, %184
  %190 = add nuw nsw i16 %189, %187
  %191 = shl nuw nsw i16 %190, 1
  %192 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 6
  store i16 %191, i16* %192, align 2
  %193 = zext i16 %191 to i32
  %194 = add nsw i32 %175, %193
  %195 = getelementptr inbounds i8, i8* %60, i64 %54
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i16
  %198 = getelementptr inbounds i8, i8* %60, i64 %56
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i16
  %201 = getelementptr inbounds i8, i8* %60, i64 %55
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i16
  %204 = getelementptr inbounds i8, i8* %60, i64 %57
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i16
  %207 = add nuw nsw i16 %200, %197
  %208 = add nuw nsw i16 %207, %203
  %209 = add nuw nsw i16 %208, %206
  %210 = shl nuw nsw i16 %209, 1
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 7
  store i16 %210, i16* %211, align 2
  %212 = zext i16 %210 to i32
  %213 = add nsw i32 %194, %212
  %214 = shl nuw i64 %59, 1
  %215 = icmp slt i64 %214, %13
  %216 = getelementptr inbounds i8, i8* %60, i64 %8
  %217 = select i1 %215, i8* %216, i8* %60
  %218 = add nuw nsw i64 %59, 1
  %219 = icmp eq i64 %218, 4
  br i1 %219, label %220, label %58

220:                                              ; preds = %58
  %221 = add nsw i32 %213, 16
  %222 = lshr i32 %221, 5
  %223 = trunc i32 %222 to i16
  %224 = insertelement <8 x i16> undef, i16 %223, i32 0
  %225 = shufflevector <8 x i16> %224, <8 x i16> undef, <8 x i32> zeroinitializer
  %226 = bitcast [32 x i16]* %0 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2
  %228 = sub <8 x i16> %227, %225
  %229 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %228, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2
  %233 = sub <8 x i16> %232, %225
  %234 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %234, align 2
  %235 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = sub <8 x i16> %237, %225
  %239 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %239, align 2
  %240 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 2
  %243 = sub <8 x i16> %242, %225
  %244 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %244, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi8ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i64 [ 0, %4 ], [ %130, %7 ]
  %9 = phi i8* [ %0, %4 ], [ %129, %7 ]
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 0
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = mul nsw i32 %12, %3
  %14 = ashr i32 %13, 31
  %15 = add i32 %13, 32
  %16 = add i32 %15, %14
  %17 = ashr i32 %16, 6
  %18 = add nsw i32 %17, %6
  %19 = icmp slt i32 %18, 255
  %20 = select i1 %19, i32 %18, i32 255
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, %3
  %28 = ashr i32 %27, 31
  %29 = add i32 %27, 32
  %30 = add i32 %29, %28
  %31 = ashr i32 %30, 6
  %32 = add nsw i32 %31, %6
  %33 = icmp slt i32 %32, 255
  %34 = select i1 %33, i32 %32, i32 255
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 2
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %3
  %43 = ashr i32 %42, 31
  %44 = add i32 %42, 32
  %45 = add i32 %44, %43
  %46 = ashr i32 %45, 6
  %47 = add nsw i32 %46, %6
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 3
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = mul nsw i32 %56, %3
  %58 = ashr i32 %57, 31
  %59 = add i32 %57, 32
  %60 = add i32 %59, %58
  %61 = ashr i32 %60, 6
  %62 = add nsw i32 %61, %6
  %63 = icmp slt i32 %62, 255
  %64 = select i1 %63, i32 %62, i32 255
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 4
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %3
  %73 = ashr i32 %72, 31
  %74 = add i32 %72, 32
  %75 = add i32 %74, %73
  %76 = ashr i32 %75, 6
  %77 = add nsw i32 %76, %6
  %78 = icmp slt i32 %77, 255
  %79 = select i1 %78, i32 %77, i32 255
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %9, i64 4
  store i8 %82, i8* %83, align 1
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = mul nsw i32 %86, %3
  %88 = ashr i32 %87, 31
  %89 = add i32 %87, 32
  %90 = add i32 %89, %88
  %91 = ashr i32 %90, 6
  %92 = add nsw i32 %91, %6
  %93 = icmp slt i32 %92, 255
  %94 = select i1 %93, i32 %92, i32 255
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %9, i64 5
  store i8 %97, i8* %98, align 1
  %99 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 6
  %100 = load i16, i16* %99, align 2
  %101 = sext i16 %100 to i32
  %102 = mul nsw i32 %101, %3
  %103 = ashr i32 %102, 31
  %104 = add i32 %102, 32
  %105 = add i32 %104, %103
  %106 = ashr i32 %105, 6
  %107 = add nsw i32 %106, %6
  %108 = icmp slt i32 %107, 255
  %109 = select i1 %108, i32 %107, i32 255
  %110 = icmp sgt i32 %109, 0
  %111 = select i1 %110, i32 %109, i32 0
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %9, i64 6
  store i8 %112, i8* %113, align 1
  %114 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = mul nsw i32 %116, %3
  %118 = ashr i32 %117, 31
  %119 = add i32 %117, 32
  %120 = add i32 %119, %118
  %121 = ashr i32 %120, 6
  %122 = add nsw i32 %121, %6
  %123 = icmp slt i32 %122, 255
  %124 = select i1 %123, i32 %122, i32 255
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %9, i64 7
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %9, i64 %1
  %130 = add nuw nsw i64 %8, 1
  %131 = icmp eq i64 %130, 8
  br i1 %131, label %132, label %7

132:                                              ; preds = %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = icmp slt i32 %6, 1
  %13 = select i1 %12, i32 %6, i32 1
  %14 = sext i32 %13 to i64
  %15 = icmp slt i32 %6, 2
  %16 = select i1 %15, i32 %6, i32 2
  %17 = sext i32 %16 to i64
  %18 = icmp slt i32 %6, 3
  %19 = select i1 %18, i32 %6, i32 3
  %20 = sext i32 %19 to i64
  %21 = icmp slt i32 %6, 4
  %22 = select i1 %21, i32 %6, i32 4
  %23 = sext i32 %22 to i64
  %24 = icmp slt i32 %6, 5
  %25 = select i1 %24, i32 %6, i32 5
  %26 = sext i32 %25 to i64
  %27 = icmp slt i32 %6, 6
  %28 = select i1 %27, i32 %6, i32 6
  %29 = sext i32 %28 to i64
  %30 = icmp slt i32 %6, 7
  %31 = select i1 %30, i32 %6, i32 7
  %32 = sext i32 %31 to i64
  br label %33

33:                                               ; preds = %33, %5
  %34 = phi i64 [ 0, %5 ], [ %96, %33 ]
  %35 = phi i8* [ %3, %5 ], [ %95, %33 ]
  %36 = phi i32 [ 0, %5 ], [ %92, %33 ]
  %37 = getelementptr inbounds i8, i8* %35, i64 %10
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = shl nuw nsw i16 %39, 3
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 0
  store i16 %40, i16* %41, align 2
  %42 = zext i16 %40 to i32
  %43 = add nsw i32 %36, %42
  %44 = getelementptr inbounds i8, i8* %35, i64 %14
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = shl nuw nsw i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 1
  store i16 %47, i16* %48, align 2
  %49 = zext i16 %47 to i32
  %50 = add nsw i32 %43, %49
  %51 = getelementptr inbounds i8, i8* %35, i64 %17
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = shl nuw nsw i16 %53, 3
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 2
  store i16 %54, i16* %55, align 2
  %56 = zext i16 %54 to i32
  %57 = add nsw i32 %50, %56
  %58 = getelementptr inbounds i8, i8* %35, i64 %20
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = shl nuw nsw i16 %60, 3
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 3
  store i16 %61, i16* %62, align 2
  %63 = zext i16 %61 to i32
  %64 = add nsw i32 %57, %63
  %65 = getelementptr inbounds i8, i8* %35, i64 %23
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = shl nuw nsw i16 %67, 3
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 4
  store i16 %68, i16* %69, align 2
  %70 = zext i16 %68 to i32
  %71 = add nsw i32 %64, %70
  %72 = getelementptr inbounds i8, i8* %35, i64 %26
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i16
  %75 = shl nuw nsw i16 %74, 3
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 5
  store i16 %75, i16* %76, align 2
  %77 = zext i16 %75 to i32
  %78 = add nsw i32 %71, %77
  %79 = getelementptr inbounds i8, i8* %35, i64 %29
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = shl nuw nsw i16 %81, 3
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 6
  store i16 %82, i16* %83, align 2
  %84 = zext i16 %82 to i32
  %85 = add nsw i32 %78, %84
  %86 = getelementptr inbounds i8, i8* %35, i64 %32
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i16
  %89 = shl nuw nsw i16 %88, 3
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 7
  store i16 %89, i16* %90, align 2
  %91 = zext i16 %89 to i32
  %92 = add nsw i32 %85, %91
  %93 = icmp slt i64 %34, %11
  %94 = getelementptr inbounds i8, i8* %35, i64 %4
  %95 = select i1 %93, i8* %94, i8* %35
  %96 = add nuw nsw i64 %34, 1
  %97 = icmp eq i64 %96, 8
  br i1 %97, label %98, label %33

98:                                               ; preds = %33
  %99 = add nsw i32 %92, 32
  %100 = lshr i32 %99, 6
  %101 = trunc i32 %100 to i16
  %102 = insertelement <8 x i16> undef, i16 %101, i32 0
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> zeroinitializer
  %104 = bitcast [32 x i16]* %0 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2
  %106 = sub <8 x i16> %105, %103
  %107 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2
  %111 = sub <8 x i16> %110, %103
  %112 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2
  %116 = sub <8 x i16> %115, %103
  %117 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2
  %121 = sub <8 x i16> %120, %103
  %122 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2
  %126 = sub <8 x i16> %125, %103
  %127 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2
  %131 = sub <8 x i16> %130, %103
  %132 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2
  %136 = sub <8 x i16> %135, %103
  %137 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2
  %141 = sub <8 x i16> %140, %103
  %142 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %142, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = add nsw i64 %10, 1
  %13 = icmp slt i32 %6, 2
  %14 = select i1 %13, i32 %6, i32 2
  %15 = sext i32 %14 to i64
  %16 = add nsw i64 %15, 1
  %17 = icmp slt i32 %6, 4
  %18 = select i1 %17, i32 %6, i32 4
  %19 = sext i32 %18 to i64
  %20 = add nsw i64 %19, 1
  %21 = icmp slt i32 %6, 6
  %22 = select i1 %21, i32 %6, i32 6
  %23 = sext i32 %22 to i64
  %24 = add nsw i64 %23, 1
  %25 = icmp slt i32 %6, 8
  %26 = select i1 %25, i32 %6, i32 8
  %27 = sext i32 %26 to i64
  %28 = add nsw i64 %27, 1
  %29 = icmp slt i32 %6, 10
  %30 = select i1 %29, i32 %6, i32 10
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %31, 1
  %33 = icmp slt i32 %6, 12
  %34 = select i1 %33, i32 %6, i32 12
  %35 = sext i32 %34 to i64
  %36 = add nsw i64 %35, 1
  %37 = icmp slt i32 %6, 14
  %38 = select i1 %37, i32 %6, i32 14
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, 1
  br label %41

41:                                               ; preds = %41, %5
  %42 = phi i64 [ 0, %5 ], [ %136, %41 ]
  %43 = phi i8* [ %3, %5 ], [ %135, %41 ]
  %44 = phi i32 [ 0, %5 ], [ %132, %41 ]
  %45 = getelementptr inbounds i8, i8* %43, i64 %10
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  %48 = getelementptr inbounds i8, i8* %43, i64 %12
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = add nuw nsw i16 %50, %47
  %52 = shl nuw nsw i16 %51, 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 0
  store i16 %52, i16* %53, align 2
  %54 = zext i16 %52 to i32
  %55 = add nsw i32 %44, %54
  %56 = getelementptr inbounds i8, i8* %43, i64 %15
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i16
  %59 = getelementptr inbounds i8, i8* %43, i64 %16
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = add nuw nsw i16 %61, %58
  %63 = shl nuw nsw i16 %62, 2
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 1
  store i16 %63, i16* %64, align 2
  %65 = zext i16 %63 to i32
  %66 = add nsw i32 %55, %65
  %67 = getelementptr inbounds i8, i8* %43, i64 %19
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i16
  %70 = getelementptr inbounds i8, i8* %43, i64 %20
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i16
  %73 = add nuw nsw i16 %72, %69
  %74 = shl nuw nsw i16 %73, 2
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 2
  store i16 %74, i16* %75, align 2
  %76 = zext i16 %74 to i32
  %77 = add nsw i32 %66, %76
  %78 = getelementptr inbounds i8, i8* %43, i64 %23
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i16
  %81 = getelementptr inbounds i8, i8* %43, i64 %24
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = add nuw nsw i16 %83, %80
  %85 = shl nuw nsw i16 %84, 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 3
  store i16 %85, i16* %86, align 2
  %87 = zext i16 %85 to i32
  %88 = add nsw i32 %77, %87
  %89 = getelementptr inbounds i8, i8* %43, i64 %27
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i16
  %92 = getelementptr inbounds i8, i8* %43, i64 %28
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = add nuw nsw i16 %94, %91
  %96 = shl nuw nsw i16 %95, 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 4
  store i16 %96, i16* %97, align 2
  %98 = zext i16 %96 to i32
  %99 = add nsw i32 %88, %98
  %100 = getelementptr inbounds i8, i8* %43, i64 %31
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = getelementptr inbounds i8, i8* %43, i64 %32
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = add nuw nsw i16 %105, %102
  %107 = shl nuw nsw i16 %106, 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 5
  store i16 %107, i16* %108, align 2
  %109 = zext i16 %107 to i32
  %110 = add nsw i32 %99, %109
  %111 = getelementptr inbounds i8, i8* %43, i64 %35
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i16
  %114 = getelementptr inbounds i8, i8* %43, i64 %36
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i16
  %117 = add nuw nsw i16 %116, %113
  %118 = shl nuw nsw i16 %117, 2
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 6
  store i16 %118, i16* %119, align 2
  %120 = zext i16 %118 to i32
  %121 = add nsw i32 %110, %120
  %122 = getelementptr inbounds i8, i8* %43, i64 %39
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = getelementptr inbounds i8, i8* %43, i64 %40
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = add nuw nsw i16 %127, %124
  %129 = shl nuw nsw i16 %128, 2
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 7
  store i16 %129, i16* %130, align 2
  %131 = zext i16 %129 to i32
  %132 = add nsw i32 %121, %131
  %133 = icmp slt i64 %42, %11
  %134 = getelementptr inbounds i8, i8* %43, i64 %4
  %135 = select i1 %133, i8* %134, i8* %43
  %136 = add nuw nsw i64 %42, 1
  %137 = icmp eq i64 %136, 8
  br i1 %137, label %138, label %41

138:                                              ; preds = %41
  %139 = add nsw i32 %132, 32
  %140 = lshr i32 %139, 6
  %141 = trunc i32 %140 to i16
  %142 = insertelement <8 x i16> undef, i16 %141, i32 0
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> zeroinitializer
  %144 = bitcast [32 x i16]* %0 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2
  %146 = sub <8 x i16> %145, %143
  %147 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = sub <8 x i16> %150, %143
  %152 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2
  %156 = sub <8 x i16> %155, %143
  %157 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2
  %161 = sub <8 x i16> %160, %143
  %162 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = sub <8 x i16> %165, %143
  %167 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = sub <8 x i16> %170, %143
  %172 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2
  %176 = sub <8 x i16> %175, %143
  %177 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2
  %181 = sub <8 x i16> %180, %143
  %182 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %182, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = icmp slt i32 %6, 0
  %10 = select i1 %9, i32 %6, i32 0
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %11, %4
  %13 = sext i32 %7 to i64
  %14 = add nsw i64 %11, 1
  %15 = add nsw i64 %12, 1
  %16 = icmp slt i32 %6, 2
  %17 = select i1 %16, i32 %6, i32 2
  %18 = sext i32 %17 to i64
  %19 = add nsw i64 %18, %4
  %20 = add nsw i64 %18, 1
  %21 = add nsw i64 %19, 1
  %22 = icmp slt i32 %6, 4
  %23 = select i1 %22, i32 %6, i32 4
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, %4
  %26 = add nsw i64 %24, 1
  %27 = add nsw i64 %25, 1
  %28 = icmp slt i32 %6, 6
  %29 = select i1 %28, i32 %6, i32 6
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, %4
  %32 = add nsw i64 %30, 1
  %33 = add nsw i64 %31, 1
  %34 = icmp slt i32 %6, 8
  %35 = select i1 %34, i32 %6, i32 8
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %36, %4
  %38 = add nsw i64 %36, 1
  %39 = add nsw i64 %37, 1
  %40 = icmp slt i32 %6, 10
  %41 = select i1 %40, i32 %6, i32 10
  %42 = sext i32 %41 to i64
  %43 = add nsw i64 %42, %4
  %44 = add nsw i64 %42, 1
  %45 = add nsw i64 %43, 1
  %46 = icmp slt i32 %6, 12
  %47 = select i1 %46, i32 %6, i32 12
  %48 = sext i32 %47 to i64
  %49 = add nsw i64 %48, %4
  %50 = add nsw i64 %48, 1
  %51 = add nsw i64 %49, 1
  %52 = icmp slt i32 %6, 14
  %53 = select i1 %52, i32 %6, i32 14
  %54 = sext i32 %53 to i64
  %55 = add nsw i64 %54, %4
  %56 = add nsw i64 %54, 1
  %57 = add nsw i64 %55, 1
  br label %58

58:                                               ; preds = %58, %5
  %59 = phi i64 [ 0, %5 ], [ %218, %58 ]
  %60 = phi i8* [ %3, %5 ], [ %217, %58 ]
  %61 = phi i32 [ 0, %5 ], [ %213, %58 ]
  %62 = getelementptr inbounds i8, i8* %60, i64 %11
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = getelementptr inbounds i8, i8* %60, i64 %14
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = getelementptr inbounds i8, i8* %60, i64 %12
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i16
  %71 = getelementptr inbounds i8, i8* %60, i64 %15
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  %74 = add nuw nsw i16 %67, %64
  %75 = add nuw nsw i16 %74, %70
  %76 = add nuw nsw i16 %75, %73
  %77 = shl nuw nsw i16 %76, 1
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 0
  store i16 %77, i16* %78, align 2
  %79 = zext i16 %77 to i32
  %80 = add nsw i32 %61, %79
  %81 = getelementptr inbounds i8, i8* %60, i64 %18
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = getelementptr inbounds i8, i8* %60, i64 %20
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  %87 = getelementptr inbounds i8, i8* %60, i64 %19
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i16
  %90 = getelementptr inbounds i8, i8* %60, i64 %21
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i16
  %93 = add nuw nsw i16 %86, %83
  %94 = add nuw nsw i16 %93, %89
  %95 = add nuw nsw i16 %94, %92
  %96 = shl nuw nsw i16 %95, 1
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 1
  store i16 %96, i16* %97, align 2
  %98 = zext i16 %96 to i32
  %99 = add nsw i32 %80, %98
  %100 = getelementptr inbounds i8, i8* %60, i64 %24
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = getelementptr inbounds i8, i8* %60, i64 %26
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = getelementptr inbounds i8, i8* %60, i64 %25
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i16
  %109 = getelementptr inbounds i8, i8* %60, i64 %27
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i16
  %112 = add nuw nsw i16 %105, %102
  %113 = add nuw nsw i16 %112, %108
  %114 = add nuw nsw i16 %113, %111
  %115 = shl nuw nsw i16 %114, 1
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 2
  store i16 %115, i16* %116, align 2
  %117 = zext i16 %115 to i32
  %118 = add nsw i32 %99, %117
  %119 = getelementptr inbounds i8, i8* %60, i64 %30
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i16
  %122 = getelementptr inbounds i8, i8* %60, i64 %32
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = getelementptr inbounds i8, i8* %60, i64 %31
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = getelementptr inbounds i8, i8* %60, i64 %33
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = add nuw nsw i16 %124, %121
  %132 = add nuw nsw i16 %131, %127
  %133 = add nuw nsw i16 %132, %130
  %134 = shl nuw nsw i16 %133, 1
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 3
  store i16 %134, i16* %135, align 2
  %136 = zext i16 %134 to i32
  %137 = add nsw i32 %118, %136
  %138 = getelementptr inbounds i8, i8* %60, i64 %36
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i16
  %141 = getelementptr inbounds i8, i8* %60, i64 %38
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i16
  %144 = getelementptr inbounds i8, i8* %60, i64 %37
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  %147 = getelementptr inbounds i8, i8* %60, i64 %39
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i16
  %150 = add nuw nsw i16 %143, %140
  %151 = add nuw nsw i16 %150, %146
  %152 = add nuw nsw i16 %151, %149
  %153 = shl nuw nsw i16 %152, 1
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 4
  store i16 %153, i16* %154, align 2
  %155 = zext i16 %153 to i32
  %156 = add nsw i32 %137, %155
  %157 = getelementptr inbounds i8, i8* %60, i64 %42
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i16
  %160 = getelementptr inbounds i8, i8* %60, i64 %44
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i16
  %163 = getelementptr inbounds i8, i8* %60, i64 %43
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i16
  %166 = getelementptr inbounds i8, i8* %60, i64 %45
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i16
  %169 = add nuw nsw i16 %162, %159
  %170 = add nuw nsw i16 %169, %165
  %171 = add nuw nsw i16 %170, %168
  %172 = shl nuw nsw i16 %171, 1
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 5
  store i16 %172, i16* %173, align 2
  %174 = zext i16 %172 to i32
  %175 = add nsw i32 %156, %174
  %176 = getelementptr inbounds i8, i8* %60, i64 %48
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i16
  %179 = getelementptr inbounds i8, i8* %60, i64 %50
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i16
  %182 = getelementptr inbounds i8, i8* %60, i64 %49
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i16
  %185 = getelementptr inbounds i8, i8* %60, i64 %51
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i16
  %188 = add nuw nsw i16 %181, %178
  %189 = add nuw nsw i16 %188, %184
  %190 = add nuw nsw i16 %189, %187
  %191 = shl nuw nsw i16 %190, 1
  %192 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 6
  store i16 %191, i16* %192, align 2
  %193 = zext i16 %191 to i32
  %194 = add nsw i32 %175, %193
  %195 = getelementptr inbounds i8, i8* %60, i64 %54
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i16
  %198 = getelementptr inbounds i8, i8* %60, i64 %56
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i16
  %201 = getelementptr inbounds i8, i8* %60, i64 %55
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i16
  %204 = getelementptr inbounds i8, i8* %60, i64 %57
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i16
  %207 = add nuw nsw i16 %200, %197
  %208 = add nuw nsw i16 %207, %203
  %209 = add nuw nsw i16 %208, %206
  %210 = shl nuw nsw i16 %209, 1
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 7
  store i16 %210, i16* %211, align 2
  %212 = zext i16 %210 to i32
  %213 = add nsw i32 %194, %212
  %214 = shl nuw i64 %59, 1
  %215 = icmp slt i64 %214, %13
  %216 = getelementptr inbounds i8, i8* %60, i64 %8
  %217 = select i1 %215, i8* %216, i8* %60
  %218 = add nuw nsw i64 %59, 1
  %219 = icmp eq i64 %218, 8
  br i1 %219, label %220, label %58

220:                                              ; preds = %58
  %221 = add nsw i32 %213, 32
  %222 = lshr i32 %221, 6
  %223 = trunc i32 %222 to i16
  %224 = insertelement <8 x i16> undef, i16 %223, i32 0
  %225 = shufflevector <8 x i16> %224, <8 x i16> undef, <8 x i32> zeroinitializer
  %226 = bitcast [32 x i16]* %0 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2
  %228 = sub <8 x i16> %227, %225
  %229 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %228, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2
  %233 = sub <8 x i16> %232, %225
  %234 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %234, align 2
  %235 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = sub <8 x i16> %237, %225
  %239 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %239, align 2
  %240 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 2
  %243 = sub <8 x i16> %242, %225
  %244 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %244, align 2
  %245 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %246 = bitcast i16* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 2
  %248 = sub <8 x i16> %247, %225
  %249 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %249, align 2
  %250 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %251 = bitcast i16* %250 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2
  %253 = sub <8 x i16> %252, %225
  %254 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %254, align 2
  %255 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 2
  %258 = sub <8 x i16> %257, %225
  %259 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %259, align 2
  %260 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %261 = bitcast i16* %260 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 2
  %263 = sub <8 x i16> %262, %225
  %264 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %264, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi16ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i64 [ 0, %4 ], [ %130, %7 ]
  %9 = phi i8* [ %0, %4 ], [ %129, %7 ]
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 0
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = mul nsw i32 %12, %3
  %14 = ashr i32 %13, 31
  %15 = add i32 %13, 32
  %16 = add i32 %15, %14
  %17 = ashr i32 %16, 6
  %18 = add nsw i32 %17, %6
  %19 = icmp slt i32 %18, 255
  %20 = select i1 %19, i32 %18, i32 255
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, %3
  %28 = ashr i32 %27, 31
  %29 = add i32 %27, 32
  %30 = add i32 %29, %28
  %31 = ashr i32 %30, 6
  %32 = add nsw i32 %31, %6
  %33 = icmp slt i32 %32, 255
  %34 = select i1 %33, i32 %32, i32 255
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 2
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %3
  %43 = ashr i32 %42, 31
  %44 = add i32 %42, 32
  %45 = add i32 %44, %43
  %46 = ashr i32 %45, 6
  %47 = add nsw i32 %46, %6
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 3
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = mul nsw i32 %56, %3
  %58 = ashr i32 %57, 31
  %59 = add i32 %57, 32
  %60 = add i32 %59, %58
  %61 = ashr i32 %60, 6
  %62 = add nsw i32 %61, %6
  %63 = icmp slt i32 %62, 255
  %64 = select i1 %63, i32 %62, i32 255
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 4
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %3
  %73 = ashr i32 %72, 31
  %74 = add i32 %72, 32
  %75 = add i32 %74, %73
  %76 = ashr i32 %75, 6
  %77 = add nsw i32 %76, %6
  %78 = icmp slt i32 %77, 255
  %79 = select i1 %78, i32 %77, i32 255
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %9, i64 4
  store i8 %82, i8* %83, align 1
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = mul nsw i32 %86, %3
  %88 = ashr i32 %87, 31
  %89 = add i32 %87, 32
  %90 = add i32 %89, %88
  %91 = ashr i32 %90, 6
  %92 = add nsw i32 %91, %6
  %93 = icmp slt i32 %92, 255
  %94 = select i1 %93, i32 %92, i32 255
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %9, i64 5
  store i8 %97, i8* %98, align 1
  %99 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 6
  %100 = load i16, i16* %99, align 2
  %101 = sext i16 %100 to i32
  %102 = mul nsw i32 %101, %3
  %103 = ashr i32 %102, 31
  %104 = add i32 %102, 32
  %105 = add i32 %104, %103
  %106 = ashr i32 %105, 6
  %107 = add nsw i32 %106, %6
  %108 = icmp slt i32 %107, 255
  %109 = select i1 %108, i32 %107, i32 255
  %110 = icmp sgt i32 %109, 0
  %111 = select i1 %110, i32 %109, i32 0
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %9, i64 6
  store i8 %112, i8* %113, align 1
  %114 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = mul nsw i32 %116, %3
  %118 = ashr i32 %117, 31
  %119 = add i32 %117, 32
  %120 = add i32 %119, %118
  %121 = ashr i32 %120, 6
  %122 = add nsw i32 %121, %6
  %123 = icmp slt i32 %122, 255
  %124 = select i1 %123, i32 %122, i32 255
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %9, i64 7
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %9, i64 %1
  %130 = add nuw nsw i64 %8, 1
  %131 = icmp eq i64 %130, 16
  br i1 %131, label %132, label %7

132:                                              ; preds = %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = icmp slt i32 %6, 1
  %13 = select i1 %12, i32 %6, i32 1
  %14 = sext i32 %13 to i64
  %15 = icmp slt i32 %6, 2
  %16 = select i1 %15, i32 %6, i32 2
  %17 = sext i32 %16 to i64
  %18 = icmp slt i32 %6, 3
  %19 = select i1 %18, i32 %6, i32 3
  %20 = sext i32 %19 to i64
  %21 = icmp slt i32 %6, 4
  %22 = select i1 %21, i32 %6, i32 4
  %23 = sext i32 %22 to i64
  %24 = icmp slt i32 %6, 5
  %25 = select i1 %24, i32 %6, i32 5
  %26 = sext i32 %25 to i64
  %27 = icmp slt i32 %6, 6
  %28 = select i1 %27, i32 %6, i32 6
  %29 = sext i32 %28 to i64
  %30 = icmp slt i32 %6, 7
  %31 = select i1 %30, i32 %6, i32 7
  %32 = sext i32 %31 to i64
  br label %33

33:                                               ; preds = %33, %5
  %34 = phi i64 [ 0, %5 ], [ %96, %33 ]
  %35 = phi i8* [ %3, %5 ], [ %95, %33 ]
  %36 = phi i32 [ 0, %5 ], [ %92, %33 ]
  %37 = getelementptr inbounds i8, i8* %35, i64 %10
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = shl nuw nsw i16 %39, 3
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 0
  store i16 %40, i16* %41, align 2
  %42 = zext i16 %40 to i32
  %43 = add nsw i32 %36, %42
  %44 = getelementptr inbounds i8, i8* %35, i64 %14
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = shl nuw nsw i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 1
  store i16 %47, i16* %48, align 2
  %49 = zext i16 %47 to i32
  %50 = add nsw i32 %43, %49
  %51 = getelementptr inbounds i8, i8* %35, i64 %17
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = shl nuw nsw i16 %53, 3
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 2
  store i16 %54, i16* %55, align 2
  %56 = zext i16 %54 to i32
  %57 = add nsw i32 %50, %56
  %58 = getelementptr inbounds i8, i8* %35, i64 %20
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = shl nuw nsw i16 %60, 3
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 3
  store i16 %61, i16* %62, align 2
  %63 = zext i16 %61 to i32
  %64 = add nsw i32 %57, %63
  %65 = getelementptr inbounds i8, i8* %35, i64 %23
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = shl nuw nsw i16 %67, 3
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 4
  store i16 %68, i16* %69, align 2
  %70 = zext i16 %68 to i32
  %71 = add nsw i32 %64, %70
  %72 = getelementptr inbounds i8, i8* %35, i64 %26
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i16
  %75 = shl nuw nsw i16 %74, 3
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 5
  store i16 %75, i16* %76, align 2
  %77 = zext i16 %75 to i32
  %78 = add nsw i32 %71, %77
  %79 = getelementptr inbounds i8, i8* %35, i64 %29
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = shl nuw nsw i16 %81, 3
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 6
  store i16 %82, i16* %83, align 2
  %84 = zext i16 %82 to i32
  %85 = add nsw i32 %78, %84
  %86 = getelementptr inbounds i8, i8* %35, i64 %32
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i16
  %89 = shl nuw nsw i16 %88, 3
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 7
  store i16 %89, i16* %90, align 2
  %91 = zext i16 %89 to i32
  %92 = add nsw i32 %85, %91
  %93 = icmp slt i64 %34, %11
  %94 = getelementptr inbounds i8, i8* %35, i64 %4
  %95 = select i1 %93, i8* %94, i8* %35
  %96 = add nuw nsw i64 %34, 1
  %97 = icmp eq i64 %96, 16
  br i1 %97, label %98, label %33

98:                                               ; preds = %33
  %99 = add nsw i32 %92, 64
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = insertelement <8 x i16> undef, i16 %101, i32 0
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> zeroinitializer
  %104 = bitcast [32 x i16]* %0 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2
  %106 = sub <8 x i16> %105, %103
  %107 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2
  %111 = sub <8 x i16> %110, %103
  %112 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2
  %116 = sub <8 x i16> %115, %103
  %117 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2
  %121 = sub <8 x i16> %120, %103
  %122 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2
  %126 = sub <8 x i16> %125, %103
  %127 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2
  %131 = sub <8 x i16> %130, %103
  %132 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2
  %136 = sub <8 x i16> %135, %103
  %137 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2
  %141 = sub <8 x i16> %140, %103
  %142 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %142, align 2
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2
  %146 = sub <8 x i16> %145, %103
  %147 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = sub <8 x i16> %150, %103
  %152 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2
  %156 = sub <8 x i16> %155, %103
  %157 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2
  %161 = sub <8 x i16> %160, %103
  %162 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = sub <8 x i16> %165, %103
  %167 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = sub <8 x i16> %170, %103
  %172 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2
  %176 = sub <8 x i16> %175, %103
  %177 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2
  %181 = sub <8 x i16> %180, %103
  %182 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %182, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = add nsw i64 %10, 1
  %13 = icmp slt i32 %6, 2
  %14 = select i1 %13, i32 %6, i32 2
  %15 = sext i32 %14 to i64
  %16 = add nsw i64 %15, 1
  %17 = icmp slt i32 %6, 4
  %18 = select i1 %17, i32 %6, i32 4
  %19 = sext i32 %18 to i64
  %20 = add nsw i64 %19, 1
  %21 = icmp slt i32 %6, 6
  %22 = select i1 %21, i32 %6, i32 6
  %23 = sext i32 %22 to i64
  %24 = add nsw i64 %23, 1
  %25 = icmp slt i32 %6, 8
  %26 = select i1 %25, i32 %6, i32 8
  %27 = sext i32 %26 to i64
  %28 = add nsw i64 %27, 1
  %29 = icmp slt i32 %6, 10
  %30 = select i1 %29, i32 %6, i32 10
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %31, 1
  %33 = icmp slt i32 %6, 12
  %34 = select i1 %33, i32 %6, i32 12
  %35 = sext i32 %34 to i64
  %36 = add nsw i64 %35, 1
  %37 = icmp slt i32 %6, 14
  %38 = select i1 %37, i32 %6, i32 14
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, 1
  br label %41

41:                                               ; preds = %41, %5
  %42 = phi i64 [ 0, %5 ], [ %136, %41 ]
  %43 = phi i8* [ %3, %5 ], [ %135, %41 ]
  %44 = phi i32 [ 0, %5 ], [ %132, %41 ]
  %45 = getelementptr inbounds i8, i8* %43, i64 %10
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  %48 = getelementptr inbounds i8, i8* %43, i64 %12
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = add nuw nsw i16 %50, %47
  %52 = shl nuw nsw i16 %51, 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 0
  store i16 %52, i16* %53, align 2
  %54 = zext i16 %52 to i32
  %55 = add nsw i32 %44, %54
  %56 = getelementptr inbounds i8, i8* %43, i64 %15
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i16
  %59 = getelementptr inbounds i8, i8* %43, i64 %16
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = add nuw nsw i16 %61, %58
  %63 = shl nuw nsw i16 %62, 2
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 1
  store i16 %63, i16* %64, align 2
  %65 = zext i16 %63 to i32
  %66 = add nsw i32 %55, %65
  %67 = getelementptr inbounds i8, i8* %43, i64 %19
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i16
  %70 = getelementptr inbounds i8, i8* %43, i64 %20
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i16
  %73 = add nuw nsw i16 %72, %69
  %74 = shl nuw nsw i16 %73, 2
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 2
  store i16 %74, i16* %75, align 2
  %76 = zext i16 %74 to i32
  %77 = add nsw i32 %66, %76
  %78 = getelementptr inbounds i8, i8* %43, i64 %23
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i16
  %81 = getelementptr inbounds i8, i8* %43, i64 %24
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = add nuw nsw i16 %83, %80
  %85 = shl nuw nsw i16 %84, 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 3
  store i16 %85, i16* %86, align 2
  %87 = zext i16 %85 to i32
  %88 = add nsw i32 %77, %87
  %89 = getelementptr inbounds i8, i8* %43, i64 %27
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i16
  %92 = getelementptr inbounds i8, i8* %43, i64 %28
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = add nuw nsw i16 %94, %91
  %96 = shl nuw nsw i16 %95, 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 4
  store i16 %96, i16* %97, align 2
  %98 = zext i16 %96 to i32
  %99 = add nsw i32 %88, %98
  %100 = getelementptr inbounds i8, i8* %43, i64 %31
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = getelementptr inbounds i8, i8* %43, i64 %32
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = add nuw nsw i16 %105, %102
  %107 = shl nuw nsw i16 %106, 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 5
  store i16 %107, i16* %108, align 2
  %109 = zext i16 %107 to i32
  %110 = add nsw i32 %99, %109
  %111 = getelementptr inbounds i8, i8* %43, i64 %35
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i16
  %114 = getelementptr inbounds i8, i8* %43, i64 %36
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i16
  %117 = add nuw nsw i16 %116, %113
  %118 = shl nuw nsw i16 %117, 2
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 6
  store i16 %118, i16* %119, align 2
  %120 = zext i16 %118 to i32
  %121 = add nsw i32 %110, %120
  %122 = getelementptr inbounds i8, i8* %43, i64 %39
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = getelementptr inbounds i8, i8* %43, i64 %40
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = add nuw nsw i16 %127, %124
  %129 = shl nuw nsw i16 %128, 2
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 7
  store i16 %129, i16* %130, align 2
  %131 = zext i16 %129 to i32
  %132 = add nsw i32 %121, %131
  %133 = icmp slt i64 %42, %11
  %134 = getelementptr inbounds i8, i8* %43, i64 %4
  %135 = select i1 %133, i8* %134, i8* %43
  %136 = add nuw nsw i64 %42, 1
  %137 = icmp eq i64 %136, 16
  br i1 %137, label %138, label %41

138:                                              ; preds = %41
  %139 = add nsw i32 %132, 64
  %140 = lshr i32 %139, 7
  %141 = trunc i32 %140 to i16
  %142 = insertelement <8 x i16> undef, i16 %141, i32 0
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> zeroinitializer
  %144 = bitcast [32 x i16]* %0 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2
  %146 = sub <8 x i16> %145, %143
  %147 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = sub <8 x i16> %150, %143
  %152 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2
  %156 = sub <8 x i16> %155, %143
  %157 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2
  %161 = sub <8 x i16> %160, %143
  %162 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = sub <8 x i16> %165, %143
  %167 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = sub <8 x i16> %170, %143
  %172 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2
  %176 = sub <8 x i16> %175, %143
  %177 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2
  %181 = sub <8 x i16> %180, %143
  %182 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 2
  %186 = sub <8 x i16> %185, %143
  %187 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2
  %188 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2
  %191 = sub <8 x i16> %190, %143
  %192 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2
  %196 = sub <8 x i16> %195, %143
  %197 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %196, <8 x i16>* %197, align 2
  %198 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 2
  %201 = sub <8 x i16> %200, %143
  %202 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %204 = bitcast i16* %203 to <8 x i16>*
  %205 = load <8 x i16>, <8 x i16>* %204, align 2
  %206 = sub <8 x i16> %205, %143
  %207 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %206, <8 x i16>* %207, align 2
  %208 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %209 = bitcast i16* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 2
  %211 = sub <8 x i16> %210, %143
  %212 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = sub <8 x i16> %215, %143
  %217 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %216, <8 x i16>* %217, align 2
  %218 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %219 = bitcast i16* %218 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 2
  %221 = sub <8 x i16> %220, %143
  %222 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %222, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = icmp slt i32 %6, 0
  %10 = select i1 %9, i32 %6, i32 0
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %11, %4
  %13 = sext i32 %7 to i64
  %14 = add nsw i64 %11, 1
  %15 = add nsw i64 %12, 1
  %16 = icmp slt i32 %6, 2
  %17 = select i1 %16, i32 %6, i32 2
  %18 = sext i32 %17 to i64
  %19 = add nsw i64 %18, %4
  %20 = add nsw i64 %18, 1
  %21 = add nsw i64 %19, 1
  %22 = icmp slt i32 %6, 4
  %23 = select i1 %22, i32 %6, i32 4
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, %4
  %26 = add nsw i64 %24, 1
  %27 = add nsw i64 %25, 1
  %28 = icmp slt i32 %6, 6
  %29 = select i1 %28, i32 %6, i32 6
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, %4
  %32 = add nsw i64 %30, 1
  %33 = add nsw i64 %31, 1
  %34 = icmp slt i32 %6, 8
  %35 = select i1 %34, i32 %6, i32 8
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %36, %4
  %38 = add nsw i64 %36, 1
  %39 = add nsw i64 %37, 1
  %40 = icmp slt i32 %6, 10
  %41 = select i1 %40, i32 %6, i32 10
  %42 = sext i32 %41 to i64
  %43 = add nsw i64 %42, %4
  %44 = add nsw i64 %42, 1
  %45 = add nsw i64 %43, 1
  %46 = icmp slt i32 %6, 12
  %47 = select i1 %46, i32 %6, i32 12
  %48 = sext i32 %47 to i64
  %49 = add nsw i64 %48, %4
  %50 = add nsw i64 %48, 1
  %51 = add nsw i64 %49, 1
  %52 = icmp slt i32 %6, 14
  %53 = select i1 %52, i32 %6, i32 14
  %54 = sext i32 %53 to i64
  %55 = add nsw i64 %54, %4
  %56 = add nsw i64 %54, 1
  %57 = add nsw i64 %55, 1
  br label %58

58:                                               ; preds = %58, %5
  %59 = phi i64 [ 0, %5 ], [ %218, %58 ]
  %60 = phi i8* [ %3, %5 ], [ %217, %58 ]
  %61 = phi i32 [ 0, %5 ], [ %213, %58 ]
  %62 = getelementptr inbounds i8, i8* %60, i64 %11
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = getelementptr inbounds i8, i8* %60, i64 %14
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = getelementptr inbounds i8, i8* %60, i64 %12
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i16
  %71 = getelementptr inbounds i8, i8* %60, i64 %15
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  %74 = add nuw nsw i16 %67, %64
  %75 = add nuw nsw i16 %74, %70
  %76 = add nuw nsw i16 %75, %73
  %77 = shl nuw nsw i16 %76, 1
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 0
  store i16 %77, i16* %78, align 2
  %79 = zext i16 %77 to i32
  %80 = add nsw i32 %61, %79
  %81 = getelementptr inbounds i8, i8* %60, i64 %18
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = getelementptr inbounds i8, i8* %60, i64 %20
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  %87 = getelementptr inbounds i8, i8* %60, i64 %19
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i16
  %90 = getelementptr inbounds i8, i8* %60, i64 %21
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i16
  %93 = add nuw nsw i16 %86, %83
  %94 = add nuw nsw i16 %93, %89
  %95 = add nuw nsw i16 %94, %92
  %96 = shl nuw nsw i16 %95, 1
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 1
  store i16 %96, i16* %97, align 2
  %98 = zext i16 %96 to i32
  %99 = add nsw i32 %80, %98
  %100 = getelementptr inbounds i8, i8* %60, i64 %24
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = getelementptr inbounds i8, i8* %60, i64 %26
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = getelementptr inbounds i8, i8* %60, i64 %25
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i16
  %109 = getelementptr inbounds i8, i8* %60, i64 %27
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i16
  %112 = add nuw nsw i16 %105, %102
  %113 = add nuw nsw i16 %112, %108
  %114 = add nuw nsw i16 %113, %111
  %115 = shl nuw nsw i16 %114, 1
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 2
  store i16 %115, i16* %116, align 2
  %117 = zext i16 %115 to i32
  %118 = add nsw i32 %99, %117
  %119 = getelementptr inbounds i8, i8* %60, i64 %30
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i16
  %122 = getelementptr inbounds i8, i8* %60, i64 %32
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = getelementptr inbounds i8, i8* %60, i64 %31
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = getelementptr inbounds i8, i8* %60, i64 %33
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = add nuw nsw i16 %124, %121
  %132 = add nuw nsw i16 %131, %127
  %133 = add nuw nsw i16 %132, %130
  %134 = shl nuw nsw i16 %133, 1
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 3
  store i16 %134, i16* %135, align 2
  %136 = zext i16 %134 to i32
  %137 = add nsw i32 %118, %136
  %138 = getelementptr inbounds i8, i8* %60, i64 %36
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i16
  %141 = getelementptr inbounds i8, i8* %60, i64 %38
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i16
  %144 = getelementptr inbounds i8, i8* %60, i64 %37
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  %147 = getelementptr inbounds i8, i8* %60, i64 %39
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i16
  %150 = add nuw nsw i16 %143, %140
  %151 = add nuw nsw i16 %150, %146
  %152 = add nuw nsw i16 %151, %149
  %153 = shl nuw nsw i16 %152, 1
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 4
  store i16 %153, i16* %154, align 2
  %155 = zext i16 %153 to i32
  %156 = add nsw i32 %137, %155
  %157 = getelementptr inbounds i8, i8* %60, i64 %42
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i16
  %160 = getelementptr inbounds i8, i8* %60, i64 %44
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i16
  %163 = getelementptr inbounds i8, i8* %60, i64 %43
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i16
  %166 = getelementptr inbounds i8, i8* %60, i64 %45
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i16
  %169 = add nuw nsw i16 %162, %159
  %170 = add nuw nsw i16 %169, %165
  %171 = add nuw nsw i16 %170, %168
  %172 = shl nuw nsw i16 %171, 1
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 5
  store i16 %172, i16* %173, align 2
  %174 = zext i16 %172 to i32
  %175 = add nsw i32 %156, %174
  %176 = getelementptr inbounds i8, i8* %60, i64 %48
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i16
  %179 = getelementptr inbounds i8, i8* %60, i64 %50
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i16
  %182 = getelementptr inbounds i8, i8* %60, i64 %49
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i16
  %185 = getelementptr inbounds i8, i8* %60, i64 %51
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i16
  %188 = add nuw nsw i16 %181, %178
  %189 = add nuw nsw i16 %188, %184
  %190 = add nuw nsw i16 %189, %187
  %191 = shl nuw nsw i16 %190, 1
  %192 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 6
  store i16 %191, i16* %192, align 2
  %193 = zext i16 %191 to i32
  %194 = add nsw i32 %175, %193
  %195 = getelementptr inbounds i8, i8* %60, i64 %54
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i16
  %198 = getelementptr inbounds i8, i8* %60, i64 %56
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i16
  %201 = getelementptr inbounds i8, i8* %60, i64 %55
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i16
  %204 = getelementptr inbounds i8, i8* %60, i64 %57
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i16
  %207 = add nuw nsw i16 %200, %197
  %208 = add nuw nsw i16 %207, %203
  %209 = add nuw nsw i16 %208, %206
  %210 = shl nuw nsw i16 %209, 1
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 7
  store i16 %210, i16* %211, align 2
  %212 = zext i16 %210 to i32
  %213 = add nsw i32 %194, %212
  %214 = shl nuw i64 %59, 1
  %215 = icmp slt i64 %214, %13
  %216 = getelementptr inbounds i8, i8* %60, i64 %8
  %217 = select i1 %215, i8* %216, i8* %60
  %218 = add nuw nsw i64 %59, 1
  %219 = icmp eq i64 %218, 16
  br i1 %219, label %220, label %58

220:                                              ; preds = %58
  %221 = add nsw i32 %213, 64
  %222 = lshr i32 %221, 7
  %223 = trunc i32 %222 to i16
  %224 = insertelement <8 x i16> undef, i16 %223, i32 0
  %225 = shufflevector <8 x i16> %224, <8 x i16> undef, <8 x i32> zeroinitializer
  %226 = bitcast [32 x i16]* %0 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2
  %228 = sub <8 x i16> %227, %225
  %229 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %228, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2
  %233 = sub <8 x i16> %232, %225
  %234 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %234, align 2
  %235 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = sub <8 x i16> %237, %225
  %239 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %239, align 2
  %240 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 2
  %243 = sub <8 x i16> %242, %225
  %244 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %244, align 2
  %245 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %246 = bitcast i16* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 2
  %248 = sub <8 x i16> %247, %225
  %249 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %249, align 2
  %250 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %251 = bitcast i16* %250 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2
  %253 = sub <8 x i16> %252, %225
  %254 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %254, align 2
  %255 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 2
  %258 = sub <8 x i16> %257, %225
  %259 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %259, align 2
  %260 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %261 = bitcast i16* %260 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 2
  %263 = sub <8 x i16> %262, %225
  %264 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %264, align 2
  %265 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = sub <8 x i16> %267, %225
  %269 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2
  %273 = sub <8 x i16> %272, %225
  %274 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %274, align 2
  %275 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %276 = bitcast i16* %275 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 2
  %278 = sub <8 x i16> %277, %225
  %279 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %279, align 2
  %280 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %281 = bitcast i16* %280 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 2
  %283 = sub <8 x i16> %282, %225
  %284 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %284, align 2
  %285 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %286 = bitcast i16* %285 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 2
  %288 = sub <8 x i16> %287, %225
  %289 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %289, align 2
  %290 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %291 = bitcast i16* %290 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 2
  %293 = sub <8 x i16> %292, %225
  %294 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %293, <8 x i16>* %294, align 2
  %295 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %296 = bitcast i16* %295 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 2
  %298 = sub <8 x i16> %297, %225
  %299 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %299, align 2
  %300 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2
  %303 = sub <8 x i16> %302, %225
  %304 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %303, <8 x i16>* %304, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi32ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i64 [ 0, %4 ], [ %130, %7 ]
  %9 = phi i8* [ %0, %4 ], [ %129, %7 ]
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 0
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = mul nsw i32 %12, %3
  %14 = ashr i32 %13, 31
  %15 = add i32 %13, 32
  %16 = add i32 %15, %14
  %17 = ashr i32 %16, 6
  %18 = add nsw i32 %17, %6
  %19 = icmp slt i32 %18, 255
  %20 = select i1 %19, i32 %18, i32 255
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %9, align 1
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, %3
  %28 = ashr i32 %27, 31
  %29 = add i32 %27, 32
  %30 = add i32 %29, %28
  %31 = ashr i32 %30, 6
  %32 = add nsw i32 %31, %6
  %33 = icmp slt i32 %32, 255
  %34 = select i1 %33, i32 %32, i32 255
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 2
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %3
  %43 = ashr i32 %42, 31
  %44 = add i32 %42, 32
  %45 = add i32 %44, %43
  %46 = ashr i32 %45, 6
  %47 = add nsw i32 %46, %6
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 3
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = mul nsw i32 %56, %3
  %58 = ashr i32 %57, 31
  %59 = add i32 %57, 32
  %60 = add i32 %59, %58
  %61 = ashr i32 %60, 6
  %62 = add nsw i32 %61, %6
  %63 = icmp slt i32 %62, 255
  %64 = select i1 %63, i32 %62, i32 255
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 4
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %3
  %73 = ashr i32 %72, 31
  %74 = add i32 %72, 32
  %75 = add i32 %74, %73
  %76 = ashr i32 %75, 6
  %77 = add nsw i32 %76, %6
  %78 = icmp slt i32 %77, 255
  %79 = select i1 %78, i32 %77, i32 255
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %9, i64 4
  store i8 %82, i8* %83, align 1
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = mul nsw i32 %86, %3
  %88 = ashr i32 %87, 31
  %89 = add i32 %87, 32
  %90 = add i32 %89, %88
  %91 = ashr i32 %90, 6
  %92 = add nsw i32 %91, %6
  %93 = icmp slt i32 %92, 255
  %94 = select i1 %93, i32 %92, i32 255
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %9, i64 5
  store i8 %97, i8* %98, align 1
  %99 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 6
  %100 = load i16, i16* %99, align 2
  %101 = sext i16 %100 to i32
  %102 = mul nsw i32 %101, %3
  %103 = ashr i32 %102, 31
  %104 = add i32 %102, 32
  %105 = add i32 %104, %103
  %106 = ashr i32 %105, 6
  %107 = add nsw i32 %106, %6
  %108 = icmp slt i32 %107, 255
  %109 = select i1 %108, i32 %107, i32 255
  %110 = icmp sgt i32 %109, 0
  %111 = select i1 %110, i32 %109, i32 0
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %9, i64 6
  store i8 %112, i8* %113, align 1
  %114 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %8, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = mul nsw i32 %116, %3
  %118 = ashr i32 %117, 31
  %119 = add i32 %117, 32
  %120 = add i32 %119, %118
  %121 = ashr i32 %120, 6
  %122 = add nsw i32 %121, %6
  %123 = icmp slt i32 %122, 255
  %124 = select i1 %123, i32 %122, i32 255
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %9, i64 7
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %9, i64 %1
  %130 = add nuw nsw i64 %8, 1
  %131 = icmp eq i64 %130, 32
  br i1 %131, label %132, label %7

132:                                              ; preds = %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = icmp slt i32 %6, 1
  %13 = select i1 %12, i32 %6, i32 1
  %14 = sext i32 %13 to i64
  %15 = icmp slt i32 %6, 2
  %16 = select i1 %15, i32 %6, i32 2
  %17 = sext i32 %16 to i64
  %18 = icmp slt i32 %6, 3
  %19 = select i1 %18, i32 %6, i32 3
  %20 = sext i32 %19 to i64
  %21 = icmp slt i32 %6, 4
  %22 = select i1 %21, i32 %6, i32 4
  %23 = sext i32 %22 to i64
  %24 = icmp slt i32 %6, 5
  %25 = select i1 %24, i32 %6, i32 5
  %26 = sext i32 %25 to i64
  %27 = icmp slt i32 %6, 6
  %28 = select i1 %27, i32 %6, i32 6
  %29 = sext i32 %28 to i64
  %30 = icmp slt i32 %6, 7
  %31 = select i1 %30, i32 %6, i32 7
  %32 = sext i32 %31 to i64
  br label %33

33:                                               ; preds = %33, %5
  %34 = phi i64 [ 0, %5 ], [ %96, %33 ]
  %35 = phi i8* [ %3, %5 ], [ %95, %33 ]
  %36 = phi i32 [ 0, %5 ], [ %92, %33 ]
  %37 = getelementptr inbounds i8, i8* %35, i64 %10
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = shl nuw nsw i16 %39, 3
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 0
  store i16 %40, i16* %41, align 2
  %42 = zext i16 %40 to i32
  %43 = add nsw i32 %36, %42
  %44 = getelementptr inbounds i8, i8* %35, i64 %14
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = shl nuw nsw i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 1
  store i16 %47, i16* %48, align 2
  %49 = zext i16 %47 to i32
  %50 = add nsw i32 %43, %49
  %51 = getelementptr inbounds i8, i8* %35, i64 %17
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = shl nuw nsw i16 %53, 3
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 2
  store i16 %54, i16* %55, align 2
  %56 = zext i16 %54 to i32
  %57 = add nsw i32 %50, %56
  %58 = getelementptr inbounds i8, i8* %35, i64 %20
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = shl nuw nsw i16 %60, 3
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 3
  store i16 %61, i16* %62, align 2
  %63 = zext i16 %61 to i32
  %64 = add nsw i32 %57, %63
  %65 = getelementptr inbounds i8, i8* %35, i64 %23
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = shl nuw nsw i16 %67, 3
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 4
  store i16 %68, i16* %69, align 2
  %70 = zext i16 %68 to i32
  %71 = add nsw i32 %64, %70
  %72 = getelementptr inbounds i8, i8* %35, i64 %26
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i16
  %75 = shl nuw nsw i16 %74, 3
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 5
  store i16 %75, i16* %76, align 2
  %77 = zext i16 %75 to i32
  %78 = add nsw i32 %71, %77
  %79 = getelementptr inbounds i8, i8* %35, i64 %29
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i16
  %82 = shl nuw nsw i16 %81, 3
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 6
  store i16 %82, i16* %83, align 2
  %84 = zext i16 %82 to i32
  %85 = add nsw i32 %78, %84
  %86 = getelementptr inbounds i8, i8* %35, i64 %32
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i16
  %89 = shl nuw nsw i16 %88, 3
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %34, i64 7
  store i16 %89, i16* %90, align 2
  %91 = zext i16 %89 to i32
  %92 = add nsw i32 %85, %91
  %93 = icmp slt i64 %34, %11
  %94 = getelementptr inbounds i8, i8* %35, i64 %4
  %95 = select i1 %93, i8* %94, i8* %35
  %96 = add nuw nsw i64 %34, 1
  %97 = icmp eq i64 %96, 32
  br i1 %97, label %98, label %33

98:                                               ; preds = %33
  %99 = add nsw i32 %92, 128
  %100 = lshr i32 %99, 8
  %101 = trunc i32 %100 to i16
  %102 = insertelement <8 x i16> undef, i16 %101, i32 0
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %104

104:                                              ; preds = %104, %98
  %105 = phi i64 [ 0, %98 ], [ %129, %104 ]
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %105, i64 0
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2
  %109 = sub <8 x i16> %108, %103
  %110 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %110, align 2
  %111 = or i64 %105, 1
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %111, i64 0
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = sub <8 x i16> %114, %103
  %116 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2
  %117 = or i64 %105, 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %117, i64 0
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2
  %121 = sub <8 x i16> %120, %103
  %122 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  %123 = or i64 %105, 3
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %123, i64 0
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2
  %127 = sub <8 x i16> %126, %103
  %128 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %128, align 2
  %129 = add nuw nsw i64 %105, 4
  %130 = icmp eq i64 %129, 32
  br i1 %130, label %131, label %104

131:                                              ; preds = %104
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 %6, i32 0
  %10 = sext i32 %9 to i64
  %11 = sext i32 %7 to i64
  %12 = add nsw i64 %10, 1
  %13 = icmp slt i32 %6, 2
  %14 = select i1 %13, i32 %6, i32 2
  %15 = sext i32 %14 to i64
  %16 = add nsw i64 %15, 1
  %17 = icmp slt i32 %6, 4
  %18 = select i1 %17, i32 %6, i32 4
  %19 = sext i32 %18 to i64
  %20 = add nsw i64 %19, 1
  %21 = icmp slt i32 %6, 6
  %22 = select i1 %21, i32 %6, i32 6
  %23 = sext i32 %22 to i64
  %24 = add nsw i64 %23, 1
  %25 = icmp slt i32 %6, 8
  %26 = select i1 %25, i32 %6, i32 8
  %27 = sext i32 %26 to i64
  %28 = add nsw i64 %27, 1
  %29 = icmp slt i32 %6, 10
  %30 = select i1 %29, i32 %6, i32 10
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %31, 1
  %33 = icmp slt i32 %6, 12
  %34 = select i1 %33, i32 %6, i32 12
  %35 = sext i32 %34 to i64
  %36 = add nsw i64 %35, 1
  %37 = icmp slt i32 %6, 14
  %38 = select i1 %37, i32 %6, i32 14
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, 1
  br label %41

41:                                               ; preds = %41, %5
  %42 = phi i64 [ 0, %5 ], [ %136, %41 ]
  %43 = phi i8* [ %3, %5 ], [ %135, %41 ]
  %44 = phi i32 [ 0, %5 ], [ %132, %41 ]
  %45 = getelementptr inbounds i8, i8* %43, i64 %10
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  %48 = getelementptr inbounds i8, i8* %43, i64 %12
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = add nuw nsw i16 %50, %47
  %52 = shl nuw nsw i16 %51, 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 0
  store i16 %52, i16* %53, align 2
  %54 = zext i16 %52 to i32
  %55 = add nsw i32 %44, %54
  %56 = getelementptr inbounds i8, i8* %43, i64 %15
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i16
  %59 = getelementptr inbounds i8, i8* %43, i64 %16
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = add nuw nsw i16 %61, %58
  %63 = shl nuw nsw i16 %62, 2
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 1
  store i16 %63, i16* %64, align 2
  %65 = zext i16 %63 to i32
  %66 = add nsw i32 %55, %65
  %67 = getelementptr inbounds i8, i8* %43, i64 %19
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i16
  %70 = getelementptr inbounds i8, i8* %43, i64 %20
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i16
  %73 = add nuw nsw i16 %72, %69
  %74 = shl nuw nsw i16 %73, 2
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 2
  store i16 %74, i16* %75, align 2
  %76 = zext i16 %74 to i32
  %77 = add nsw i32 %66, %76
  %78 = getelementptr inbounds i8, i8* %43, i64 %23
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i16
  %81 = getelementptr inbounds i8, i8* %43, i64 %24
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = add nuw nsw i16 %83, %80
  %85 = shl nuw nsw i16 %84, 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 3
  store i16 %85, i16* %86, align 2
  %87 = zext i16 %85 to i32
  %88 = add nsw i32 %77, %87
  %89 = getelementptr inbounds i8, i8* %43, i64 %27
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i16
  %92 = getelementptr inbounds i8, i8* %43, i64 %28
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = add nuw nsw i16 %94, %91
  %96 = shl nuw nsw i16 %95, 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 4
  store i16 %96, i16* %97, align 2
  %98 = zext i16 %96 to i32
  %99 = add nsw i32 %88, %98
  %100 = getelementptr inbounds i8, i8* %43, i64 %31
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = getelementptr inbounds i8, i8* %43, i64 %32
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = add nuw nsw i16 %105, %102
  %107 = shl nuw nsw i16 %106, 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 5
  store i16 %107, i16* %108, align 2
  %109 = zext i16 %107 to i32
  %110 = add nsw i32 %99, %109
  %111 = getelementptr inbounds i8, i8* %43, i64 %35
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i16
  %114 = getelementptr inbounds i8, i8* %43, i64 %36
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i16
  %117 = add nuw nsw i16 %116, %113
  %118 = shl nuw nsw i16 %117, 2
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 6
  store i16 %118, i16* %119, align 2
  %120 = zext i16 %118 to i32
  %121 = add nsw i32 %110, %120
  %122 = getelementptr inbounds i8, i8* %43, i64 %39
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = getelementptr inbounds i8, i8* %43, i64 %40
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = add nuw nsw i16 %127, %124
  %129 = shl nuw nsw i16 %128, 2
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %42, i64 7
  store i16 %129, i16* %130, align 2
  %131 = zext i16 %129 to i32
  %132 = add nsw i32 %121, %131
  %133 = icmp slt i64 %42, %11
  %134 = getelementptr inbounds i8, i8* %43, i64 %4
  %135 = select i1 %133, i8* %134, i8* %43
  %136 = add nuw nsw i64 %42, 1
  %137 = icmp eq i64 %136, 32
  br i1 %137, label %138, label %41

138:                                              ; preds = %41
  %139 = add nsw i32 %132, 128
  %140 = lshr i32 %139, 8
  %141 = trunc i32 %140 to i16
  %142 = insertelement <8 x i16> undef, i16 %141, i32 0
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %144

144:                                              ; preds = %144, %138
  %145 = phi i64 [ 0, %138 ], [ %169, %144 ]
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %145, i64 0
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2
  %149 = sub <8 x i16> %148, %143
  %150 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 2
  %151 = or i64 %145, 1
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %151, i64 0
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2
  %155 = sub <8 x i16> %154, %143
  %156 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %155, <8 x i16>* %156, align 2
  %157 = or i64 %145, 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %157, i64 0
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2
  %161 = sub <8 x i16> %160, %143
  %162 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  %163 = or i64 %145, 3
  %164 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %163, i64 0
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = sub <8 x i16> %166, %143
  %168 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %168, align 2
  %169 = add nuw nsw i64 %145, 4
  %170 = icmp eq i64 %169, 32
  br i1 %170, label %171, label %144

171:                                              ; preds = %144
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = icmp slt i32 %6, 0
  %10 = select i1 %9, i32 %6, i32 0
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %11, %4
  %13 = sext i32 %7 to i64
  %14 = add nsw i64 %11, 1
  %15 = add nsw i64 %12, 1
  %16 = icmp slt i32 %6, 2
  %17 = select i1 %16, i32 %6, i32 2
  %18 = sext i32 %17 to i64
  %19 = add nsw i64 %18, %4
  %20 = add nsw i64 %18, 1
  %21 = add nsw i64 %19, 1
  %22 = icmp slt i32 %6, 4
  %23 = select i1 %22, i32 %6, i32 4
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, %4
  %26 = add nsw i64 %24, 1
  %27 = add nsw i64 %25, 1
  %28 = icmp slt i32 %6, 6
  %29 = select i1 %28, i32 %6, i32 6
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, %4
  %32 = add nsw i64 %30, 1
  %33 = add nsw i64 %31, 1
  %34 = icmp slt i32 %6, 8
  %35 = select i1 %34, i32 %6, i32 8
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %36, %4
  %38 = add nsw i64 %36, 1
  %39 = add nsw i64 %37, 1
  %40 = icmp slt i32 %6, 10
  %41 = select i1 %40, i32 %6, i32 10
  %42 = sext i32 %41 to i64
  %43 = add nsw i64 %42, %4
  %44 = add nsw i64 %42, 1
  %45 = add nsw i64 %43, 1
  %46 = icmp slt i32 %6, 12
  %47 = select i1 %46, i32 %6, i32 12
  %48 = sext i32 %47 to i64
  %49 = add nsw i64 %48, %4
  %50 = add nsw i64 %48, 1
  %51 = add nsw i64 %49, 1
  %52 = icmp slt i32 %6, 14
  %53 = select i1 %52, i32 %6, i32 14
  %54 = sext i32 %53 to i64
  %55 = add nsw i64 %54, %4
  %56 = add nsw i64 %54, 1
  %57 = add nsw i64 %55, 1
  br label %58

58:                                               ; preds = %58, %5
  %59 = phi i64 [ 0, %5 ], [ %218, %58 ]
  %60 = phi i8* [ %3, %5 ], [ %217, %58 ]
  %61 = phi i32 [ 0, %5 ], [ %213, %58 ]
  %62 = getelementptr inbounds i8, i8* %60, i64 %11
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = getelementptr inbounds i8, i8* %60, i64 %14
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = getelementptr inbounds i8, i8* %60, i64 %12
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i16
  %71 = getelementptr inbounds i8, i8* %60, i64 %15
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  %74 = add nuw nsw i16 %67, %64
  %75 = add nuw nsw i16 %74, %70
  %76 = add nuw nsw i16 %75, %73
  %77 = shl nuw nsw i16 %76, 1
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 0
  store i16 %77, i16* %78, align 2
  %79 = zext i16 %77 to i32
  %80 = add nsw i32 %61, %79
  %81 = getelementptr inbounds i8, i8* %60, i64 %18
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = getelementptr inbounds i8, i8* %60, i64 %20
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i16
  %87 = getelementptr inbounds i8, i8* %60, i64 %19
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i16
  %90 = getelementptr inbounds i8, i8* %60, i64 %21
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i16
  %93 = add nuw nsw i16 %86, %83
  %94 = add nuw nsw i16 %93, %89
  %95 = add nuw nsw i16 %94, %92
  %96 = shl nuw nsw i16 %95, 1
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 1
  store i16 %96, i16* %97, align 2
  %98 = zext i16 %96 to i32
  %99 = add nsw i32 %80, %98
  %100 = getelementptr inbounds i8, i8* %60, i64 %24
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = getelementptr inbounds i8, i8* %60, i64 %26
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  %106 = getelementptr inbounds i8, i8* %60, i64 %25
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i16
  %109 = getelementptr inbounds i8, i8* %60, i64 %27
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i16
  %112 = add nuw nsw i16 %105, %102
  %113 = add nuw nsw i16 %112, %108
  %114 = add nuw nsw i16 %113, %111
  %115 = shl nuw nsw i16 %114, 1
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 2
  store i16 %115, i16* %116, align 2
  %117 = zext i16 %115 to i32
  %118 = add nsw i32 %99, %117
  %119 = getelementptr inbounds i8, i8* %60, i64 %30
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i16
  %122 = getelementptr inbounds i8, i8* %60, i64 %32
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = getelementptr inbounds i8, i8* %60, i64 %31
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = getelementptr inbounds i8, i8* %60, i64 %33
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = add nuw nsw i16 %124, %121
  %132 = add nuw nsw i16 %131, %127
  %133 = add nuw nsw i16 %132, %130
  %134 = shl nuw nsw i16 %133, 1
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 3
  store i16 %134, i16* %135, align 2
  %136 = zext i16 %134 to i32
  %137 = add nsw i32 %118, %136
  %138 = getelementptr inbounds i8, i8* %60, i64 %36
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i16
  %141 = getelementptr inbounds i8, i8* %60, i64 %38
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i16
  %144 = getelementptr inbounds i8, i8* %60, i64 %37
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  %147 = getelementptr inbounds i8, i8* %60, i64 %39
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i16
  %150 = add nuw nsw i16 %143, %140
  %151 = add nuw nsw i16 %150, %146
  %152 = add nuw nsw i16 %151, %149
  %153 = shl nuw nsw i16 %152, 1
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 4
  store i16 %153, i16* %154, align 2
  %155 = zext i16 %153 to i32
  %156 = add nsw i32 %137, %155
  %157 = getelementptr inbounds i8, i8* %60, i64 %42
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i16
  %160 = getelementptr inbounds i8, i8* %60, i64 %44
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i16
  %163 = getelementptr inbounds i8, i8* %60, i64 %43
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i16
  %166 = getelementptr inbounds i8, i8* %60, i64 %45
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i16
  %169 = add nuw nsw i16 %162, %159
  %170 = add nuw nsw i16 %169, %165
  %171 = add nuw nsw i16 %170, %168
  %172 = shl nuw nsw i16 %171, 1
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 5
  store i16 %172, i16* %173, align 2
  %174 = zext i16 %172 to i32
  %175 = add nsw i32 %156, %174
  %176 = getelementptr inbounds i8, i8* %60, i64 %48
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i16
  %179 = getelementptr inbounds i8, i8* %60, i64 %50
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i16
  %182 = getelementptr inbounds i8, i8* %60, i64 %49
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i16
  %185 = getelementptr inbounds i8, i8* %60, i64 %51
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i16
  %188 = add nuw nsw i16 %181, %178
  %189 = add nuw nsw i16 %188, %184
  %190 = add nuw nsw i16 %189, %187
  %191 = shl nuw nsw i16 %190, 1
  %192 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 6
  store i16 %191, i16* %192, align 2
  %193 = zext i16 %191 to i32
  %194 = add nsw i32 %175, %193
  %195 = getelementptr inbounds i8, i8* %60, i64 %54
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i16
  %198 = getelementptr inbounds i8, i8* %60, i64 %56
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i16
  %201 = getelementptr inbounds i8, i8* %60, i64 %55
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i16
  %204 = getelementptr inbounds i8, i8* %60, i64 %57
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i16
  %207 = add nuw nsw i16 %200, %197
  %208 = add nuw nsw i16 %207, %203
  %209 = add nuw nsw i16 %208, %206
  %210 = shl nuw nsw i16 %209, 1
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 7
  store i16 %210, i16* %211, align 2
  %212 = zext i16 %210 to i32
  %213 = add nsw i32 %194, %212
  %214 = shl nuw i64 %59, 1
  %215 = icmp slt i64 %214, %13
  %216 = getelementptr inbounds i8, i8* %60, i64 %8
  %217 = select i1 %215, i8* %216, i8* %60
  %218 = add nuw nsw i64 %59, 1
  %219 = icmp eq i64 %218, 32
  br i1 %219, label %220, label %58

220:                                              ; preds = %58
  %221 = add nsw i32 %213, 128
  %222 = lshr i32 %221, 8
  %223 = trunc i32 %222 to i16
  %224 = insertelement <8 x i16> undef, i16 %223, i32 0
  %225 = shufflevector <8 x i16> %224, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %226

226:                                              ; preds = %226, %220
  %227 = phi i64 [ 0, %220 ], [ %251, %226 ]
  %228 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %227, i64 0
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2
  %231 = sub <8 x i16> %230, %225
  %232 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %231, <8 x i16>* %232, align 2
  %233 = or i64 %227, 1
  %234 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %233, i64 0
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2
  %237 = sub <8 x i16> %236, %225
  %238 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %238, align 2
  %239 = or i64 %227, 2
  %240 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %239, i64 0
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 2
  %243 = sub <8 x i16> %242, %225
  %244 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %244, align 2
  %245 = or i64 %227, 3
  %246 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %245, i64 0
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = sub <8 x i16> %248, %225
  %250 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %250, align 2
  %251 = add nuw nsw i64 %227, 4
  %252 = icmp eq i64 %251, 32
  br i1 %252, label %253, label %226

253:                                              ; preds = %226
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi4ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = bitcast [32 x i16]* %2 to i8*
  %8 = getelementptr i8, i8* %0, i64 16
  %9 = getelementptr [32 x i16], [32 x i16]* %2, i64 0, i64 16
  %10 = bitcast i16* %9 to i8*
  %11 = icmp ugt i8* %10, %0
  %12 = icmp ugt i8* %8, %7
  %13 = and i1 %11, %12
  br i1 %13, label %100, label %14

14:                                               ; preds = %4
  %15 = insertelement <8 x i32> undef, i32 %3, i32 0
  %16 = shufflevector <8 x i32> %15, <8 x i32> undef, <8 x i32> zeroinitializer
  %17 = insertelement <8 x i32> undef, i32 %6, i32 0
  %18 = shufflevector <8 x i32> %17, <8 x i32> undef, <8 x i32> zeroinitializer
  %19 = bitcast [32 x i16]* %2 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 2, !alias.scope !399
  %21 = sext <8 x i16> %20 to <8 x i32>
  %22 = mul nsw <8 x i32> %16, %21
  %23 = ashr <8 x i32> %22, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %24 = add <8 x i32> %22, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %25 = add <8 x i32> %24, %23
  %26 = ashr <8 x i32> %25, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %27 = add nsw <8 x i32> %26, %18
  %28 = icmp slt <8 x i32> %27, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %29 = select <8 x i1> %28, <8 x i32> %27, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %30 = icmp sgt <8 x i32> %29, zeroinitializer
  %31 = select <8 x i1> %30, <8 x i32> %29, <8 x i32> zeroinitializer
  %32 = trunc <8 x i32> %31 to <8 x i8>
  %33 = bitcast i8* %0 to <8 x i8>*
  store <8 x i8> %32, <8 x i8>* %33, align 1, !alias.scope !402, !noalias !399
  %34 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 8
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 2, !alias.scope !399
  %37 = sext <8 x i16> %36 to <8 x i32>
  %38 = mul nsw <8 x i32> %16, %37
  %39 = ashr <8 x i32> %38, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %40 = add <8 x i32> %38, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %41 = add <8 x i32> %40, %39
  %42 = ashr <8 x i32> %41, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %43 = add nsw <8 x i32> %42, %18
  %44 = icmp slt <8 x i32> %43, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %45 = select <8 x i1> %44, <8 x i32> %43, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %46 = icmp sgt <8 x i32> %45, zeroinitializer
  %47 = select <8 x i1> %46, <8 x i32> %45, <8 x i32> zeroinitializer
  %48 = trunc <8 x i32> %47 to <8 x i8>
  %49 = getelementptr inbounds i8, i8* %0, i64 8
  %50 = bitcast i8* %49 to <8 x i8>*
  store <8 x i8> %48, <8 x i8>* %50, align 1, !alias.scope !402, !noalias !399
  br label %51

51:                                               ; preds = %100, %14
  %52 = getelementptr inbounds i8, i8* %0, i64 %1
  %53 = add i64 %1, 16
  %54 = getelementptr i8, i8* %0, i64 %53
  %55 = getelementptr [32 x i16], [32 x i16]* %2, i64 1, i64 0
  %56 = bitcast i16* %55 to i8*
  %57 = getelementptr [32 x i16], [32 x i16]* %2, i64 1, i64 16
  %58 = bitcast i16* %57 to i8*
  %59 = icmp ult i8* %52, %58
  %60 = icmp ugt i8* %54, %56
  %61 = and i1 %59, %60
  br i1 %61, label %119, label %62

62:                                               ; preds = %51
  %63 = insertelement <8 x i32> undef, i32 %3, i32 0
  %64 = shufflevector <8 x i32> %63, <8 x i32> undef, <8 x i32> zeroinitializer
  %65 = insertelement <8 x i32> undef, i32 %6, i32 0
  %66 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> zeroinitializer
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1, i64 0
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !404
  %70 = sext <8 x i16> %69 to <8 x i32>
  %71 = mul nsw <8 x i32> %64, %70
  %72 = ashr <8 x i32> %71, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %73 = add <8 x i32> %71, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %74 = add <8 x i32> %73, %72
  %75 = ashr <8 x i32> %74, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %76 = add nsw <8 x i32> %75, %66
  %77 = icmp slt <8 x i32> %76, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %78 = select <8 x i1> %77, <8 x i32> %76, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %79 = icmp sgt <8 x i32> %78, zeroinitializer
  %80 = select <8 x i1> %79, <8 x i32> %78, <8 x i32> zeroinitializer
  %81 = trunc <8 x i32> %80 to <8 x i8>
  %82 = bitcast i8* %52 to <8 x i8>*
  store <8 x i8> %81, <8 x i8>* %82, align 1, !alias.scope !407, !noalias !404
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !404
  %86 = sext <8 x i16> %85 to <8 x i32>
  %87 = mul nsw <8 x i32> %64, %86
  %88 = ashr <8 x i32> %87, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %89 = add <8 x i32> %87, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %90 = add <8 x i32> %89, %88
  %91 = ashr <8 x i32> %90, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %92 = add nsw <8 x i32> %91, %66
  %93 = icmp slt <8 x i32> %92, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %94 = select <8 x i1> %93, <8 x i32> %92, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %95 = icmp sgt <8 x i32> %94, zeroinitializer
  %96 = select <8 x i1> %95, <8 x i32> %94, <8 x i32> zeroinitializer
  %97 = trunc <8 x i32> %96 to <8 x i8>
  %98 = getelementptr inbounds i8, i8* %52, i64 8
  %99 = bitcast i8* %98 to <8 x i8>*
  store <8 x i8> %97, <8 x i8>* %99, align 1, !alias.scope !407, !noalias !404
  br label %138

100:                                              ; preds = %4, %100
  %101 = phi i64 [ %117, %100 ], [ 0, %4 ]
  %102 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = sext i16 %103 to i32
  %105 = mul nsw i32 %104, %3
  %106 = ashr i32 %105, 31
  %107 = add i32 %105, 32
  %108 = add i32 %107, %106
  %109 = ashr i32 %108, 6
  %110 = add nsw i32 %109, %6
  %111 = icmp slt i32 %110, 255
  %112 = select i1 %111, i32 %110, i32 255
  %113 = icmp sgt i32 %112, 0
  %114 = select i1 %113, i32 %112, i32 0
  %115 = trunc i32 %114 to i8
  %116 = getelementptr inbounds i8, i8* %0, i64 %101
  store i8 %115, i8* %116, align 1
  %117 = add nuw nsw i64 %101, 1
  %118 = icmp eq i64 %117, 16
  br i1 %118, label %51, label %100, !llvm.loop !409

119:                                              ; preds = %51, %119
  %120 = phi i64 [ %136, %119 ], [ 0, %51 ]
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = sext i16 %122 to i32
  %124 = mul nsw i32 %123, %3
  %125 = ashr i32 %124, 31
  %126 = add i32 %124, 32
  %127 = add i32 %126, %125
  %128 = ashr i32 %127, 6
  %129 = add nsw i32 %128, %6
  %130 = icmp slt i32 %129, 255
  %131 = select i1 %130, i32 %129, i32 255
  %132 = icmp sgt i32 %131, 0
  %133 = select i1 %132, i32 %131, i32 0
  %134 = trunc i32 %133 to i8
  %135 = getelementptr inbounds i8, i8* %52, i64 %120
  store i8 %134, i8* %135, align 1
  %136 = add nuw nsw i64 %120, 1
  %137 = icmp eq i64 %136, 16
  br i1 %137, label %138, label %119, !llvm.loop !410

138:                                              ; preds = %119, %62
  %139 = getelementptr inbounds i8, i8* %52, i64 %1
  %140 = shl i64 %1, 1
  %141 = add i64 %140, 16
  %142 = getelementptr i8, i8* %0, i64 %141
  %143 = getelementptr [32 x i16], [32 x i16]* %2, i64 2, i64 0
  %144 = bitcast i16* %143 to i8*
  %145 = getelementptr [32 x i16], [32 x i16]* %2, i64 2, i64 16
  %146 = bitcast i16* %145 to i8*
  %147 = icmp ult i8* %139, %146
  %148 = icmp ugt i8* %142, %144
  %149 = and i1 %147, %148
  br i1 %149, label %188, label %150

150:                                              ; preds = %138
  %151 = insertelement <8 x i32> undef, i32 %3, i32 0
  %152 = shufflevector <8 x i32> %151, <8 x i32> undef, <8 x i32> zeroinitializer
  %153 = insertelement <8 x i32> undef, i32 %6, i32 0
  %154 = shufflevector <8 x i32> %153, <8 x i32> undef, <8 x i32> zeroinitializer
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2, i64 0
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 2, !alias.scope !411
  %158 = sext <8 x i16> %157 to <8 x i32>
  %159 = mul nsw <8 x i32> %152, %158
  %160 = ashr <8 x i32> %159, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %161 = add <8 x i32> %159, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %162 = add <8 x i32> %161, %160
  %163 = ashr <8 x i32> %162, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %164 = add nsw <8 x i32> %163, %154
  %165 = icmp slt <8 x i32> %164, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %166 = select <8 x i1> %165, <8 x i32> %164, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %167 = icmp sgt <8 x i32> %166, zeroinitializer
  %168 = select <8 x i1> %167, <8 x i32> %166, <8 x i32> zeroinitializer
  %169 = trunc <8 x i32> %168 to <8 x i8>
  %170 = bitcast i8* %139 to <8 x i8>*
  store <8 x i8> %169, <8 x i8>* %170, align 1, !alias.scope !414, !noalias !411
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2, i64 8
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 2, !alias.scope !411
  %174 = sext <8 x i16> %173 to <8 x i32>
  %175 = mul nsw <8 x i32> %152, %174
  %176 = ashr <8 x i32> %175, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %177 = add <8 x i32> %175, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %178 = add <8 x i32> %177, %176
  %179 = ashr <8 x i32> %178, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %180 = add nsw <8 x i32> %179, %154
  %181 = icmp slt <8 x i32> %180, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %182 = select <8 x i1> %181, <8 x i32> %180, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %183 = icmp sgt <8 x i32> %182, zeroinitializer
  %184 = select <8 x i1> %183, <8 x i32> %182, <8 x i32> zeroinitializer
  %185 = trunc <8 x i32> %184 to <8 x i8>
  %186 = getelementptr inbounds i8, i8* %139, i64 8
  %187 = bitcast i8* %186 to <8 x i8>*
  store <8 x i8> %185, <8 x i8>* %187, align 1, !alias.scope !414, !noalias !411
  br label %207

188:                                              ; preds = %138, %188
  %189 = phi i64 [ %205, %188 ], [ 0, %138 ]
  %190 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2, i64 %189
  %191 = load i16, i16* %190, align 2
  %192 = sext i16 %191 to i32
  %193 = mul nsw i32 %192, %3
  %194 = ashr i32 %193, 31
  %195 = add i32 %193, 32
  %196 = add i32 %195, %194
  %197 = ashr i32 %196, 6
  %198 = add nsw i32 %197, %6
  %199 = icmp slt i32 %198, 255
  %200 = select i1 %199, i32 %198, i32 255
  %201 = icmp sgt i32 %200, 0
  %202 = select i1 %201, i32 %200, i32 0
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds i8, i8* %139, i64 %189
  store i8 %203, i8* %204, align 1
  %205 = add nuw nsw i64 %189, 1
  %206 = icmp eq i64 %205, 16
  br i1 %206, label %207, label %188, !llvm.loop !416

207:                                              ; preds = %188, %150
  %208 = getelementptr inbounds i8, i8* %139, i64 %1
  %209 = mul i64 %1, 3
  %210 = add i64 %209, 16
  %211 = getelementptr i8, i8* %0, i64 %210
  %212 = getelementptr [32 x i16], [32 x i16]* %2, i64 3, i64 0
  %213 = bitcast i16* %212 to i8*
  %214 = getelementptr [32 x i16], [32 x i16]* %2, i64 3, i64 16
  %215 = bitcast i16* %214 to i8*
  %216 = icmp ult i8* %208, %215
  %217 = icmp ugt i8* %211, %213
  %218 = and i1 %216, %217
  br i1 %218, label %257, label %219

219:                                              ; preds = %207
  %220 = insertelement <8 x i32> undef, i32 %3, i32 0
  %221 = shufflevector <8 x i32> %220, <8 x i32> undef, <8 x i32> zeroinitializer
  %222 = insertelement <8 x i32> undef, i32 %6, i32 0
  %223 = shufflevector <8 x i32> %222, <8 x i32> undef, <8 x i32> zeroinitializer
  %224 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3, i64 0
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2, !alias.scope !417
  %227 = sext <8 x i16> %226 to <8 x i32>
  %228 = mul nsw <8 x i32> %221, %227
  %229 = ashr <8 x i32> %228, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %230 = add <8 x i32> %228, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %231 = add <8 x i32> %230, %229
  %232 = ashr <8 x i32> %231, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %233 = add nsw <8 x i32> %232, %223
  %234 = icmp slt <8 x i32> %233, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %235 = select <8 x i1> %234, <8 x i32> %233, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %236 = icmp sgt <8 x i32> %235, zeroinitializer
  %237 = select <8 x i1> %236, <8 x i32> %235, <8 x i32> zeroinitializer
  %238 = trunc <8 x i32> %237 to <8 x i8>
  %239 = bitcast i8* %208 to <8 x i8>*
  store <8 x i8> %238, <8 x i8>* %239, align 1, !alias.scope !420, !noalias !417
  %240 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3, i64 8
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 2, !alias.scope !417
  %243 = sext <8 x i16> %242 to <8 x i32>
  %244 = mul nsw <8 x i32> %221, %243
  %245 = ashr <8 x i32> %244, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %246 = add <8 x i32> %244, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %247 = add <8 x i32> %246, %245
  %248 = ashr <8 x i32> %247, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %249 = add nsw <8 x i32> %248, %223
  %250 = icmp slt <8 x i32> %249, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %251 = select <8 x i1> %250, <8 x i32> %249, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %252 = icmp sgt <8 x i32> %251, zeroinitializer
  %253 = select <8 x i1> %252, <8 x i32> %251, <8 x i32> zeroinitializer
  %254 = trunc <8 x i32> %253 to <8 x i8>
  %255 = getelementptr inbounds i8, i8* %208, i64 8
  %256 = bitcast i8* %255 to <8 x i8>*
  store <8 x i8> %254, <8 x i8>* %256, align 1, !alias.scope !420, !noalias !417
  br label %276

257:                                              ; preds = %207, %257
  %258 = phi i64 [ %274, %257 ], [ 0, %207 ]
  %259 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3, i64 %258
  %260 = load i16, i16* %259, align 2
  %261 = sext i16 %260 to i32
  %262 = mul nsw i32 %261, %3
  %263 = ashr i32 %262, 31
  %264 = add i32 %262, 32
  %265 = add i32 %264, %263
  %266 = ashr i32 %265, 6
  %267 = add nsw i32 %266, %6
  %268 = icmp slt i32 %267, 255
  %269 = select i1 %268, i32 %267, i32 255
  %270 = icmp sgt i32 %269, 0
  %271 = select i1 %270, i32 %269, i32 0
  %272 = trunc i32 %271 to i8
  %273 = getelementptr inbounds i8, i8* %208, i64 %258
  store i8 %272, i8* %273, align 1
  %274 = add nuw nsw i64 %258, 1
  %275 = icmp eq i64 %274, 16
  br i1 %275, label %276, label %257, !llvm.loop !422

276:                                              ; preds = %257, %219
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  br label %13

9:                                                ; preds = %13
  %10 = icmp sgt i32 %7, 0
  %11 = getelementptr inbounds i8, i8* %3, i64 %4
  %12 = select i1 %10, i8* %11, i8* %3
  br label %41

13:                                               ; preds = %13, %5
  %14 = phi i64 [ 0, %5 ], [ %39, %13 ]
  %15 = phi i32 [ 0, %5 ], [ %38, %13 ]
  %16 = icmp sgt i64 %14, %8
  %17 = trunc i64 %14 to i32
  %18 = select i1 %16, i32 %6, i32 %17
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %3, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = shl nuw nsw i16 %22, 3
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %14
  store i16 %23, i16* %24, align 2
  %25 = zext i16 %23 to i32
  %26 = add nuw nsw i32 %15, %25
  %27 = or i64 %14, 1
  %28 = icmp slt i64 %14, %8
  %29 = trunc i64 %27 to i32
  %30 = select i1 %28, i32 %29, i32 %6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %3, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = shl nuw nsw i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %27
  store i16 %35, i16* %36, align 2
  %37 = zext i16 %35 to i32
  %38 = add nuw nsw i32 %26, %37
  %39 = add nuw nsw i64 %14, 2
  %40 = icmp eq i64 %39, 16
  br i1 %40, label %9, label %13

41:                                               ; preds = %41, %9
  %42 = phi i64 [ 0, %9 ], [ %67, %41 ]
  %43 = phi i32 [ %38, %9 ], [ %66, %41 ]
  %44 = icmp sgt i64 %42, %8
  %45 = trunc i64 %42 to i32
  %46 = select i1 %44, i32 %6, i32 %45
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %12, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = shl nuw nsw i16 %50, 3
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %42
  store i16 %51, i16* %52, align 2
  %53 = zext i16 %51 to i32
  %54 = add nsw i32 %43, %53
  %55 = or i64 %42, 1
  %56 = icmp slt i64 %42, %8
  %57 = trunc i64 %55 to i32
  %58 = select i1 %56, i32 %57, i32 %6
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %12, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  %63 = shl nuw nsw i16 %62, 3
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %55
  store i16 %63, i16* %64, align 2
  %65 = zext i16 %63 to i32
  %66 = add nsw i32 %54, %65
  %67 = add nuw nsw i64 %42, 2
  %68 = icmp eq i64 %67, 16
  br i1 %68, label %69, label %41

69:                                               ; preds = %41
  %70 = icmp sgt i32 %7, 1
  %71 = getelementptr inbounds i8, i8* %12, i64 %4
  %72 = select i1 %70, i8* %71, i8* %12
  br label %73

73:                                               ; preds = %73, %69
  %74 = phi i64 [ 0, %69 ], [ %99, %73 ]
  %75 = phi i32 [ %66, %69 ], [ %98, %73 ]
  %76 = icmp sgt i64 %74, %8
  %77 = trunc i64 %74 to i32
  %78 = select i1 %76, i32 %6, i32 %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %72, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i16
  %83 = shl nuw nsw i16 %82, 3
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %74
  store i16 %83, i16* %84, align 2
  %85 = zext i16 %83 to i32
  %86 = add nsw i32 %75, %85
  %87 = or i64 %74, 1
  %88 = icmp slt i64 %74, %8
  %89 = trunc i64 %87 to i32
  %90 = select i1 %88, i32 %89, i32 %6
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %72, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = shl nuw nsw i16 %94, 3
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %87
  store i16 %95, i16* %96, align 2
  %97 = zext i16 %95 to i32
  %98 = add nsw i32 %86, %97
  %99 = add nuw nsw i64 %74, 2
  %100 = icmp eq i64 %99, 16
  br i1 %100, label %101, label %73

101:                                              ; preds = %73
  %102 = icmp sgt i32 %7, 2
  %103 = getelementptr inbounds i8, i8* %72, i64 %4
  %104 = select i1 %102, i8* %103, i8* %72
  br label %105

105:                                              ; preds = %105, %101
  %106 = phi i64 [ 0, %101 ], [ %131, %105 ]
  %107 = phi i32 [ %98, %101 ], [ %130, %105 ]
  %108 = icmp sgt i64 %106, %8
  %109 = trunc i64 %106 to i32
  %110 = select i1 %108, i32 %6, i32 %109
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %104, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i16
  %115 = shl nuw nsw i16 %114, 3
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %106
  store i16 %115, i16* %116, align 2
  %117 = zext i16 %115 to i32
  %118 = add nsw i32 %107, %117
  %119 = or i64 %106, 1
  %120 = icmp slt i64 %106, %8
  %121 = trunc i64 %119 to i32
  %122 = select i1 %120, i32 %121, i32 %6
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %104, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i16
  %127 = shl nuw nsw i16 %126, 3
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %119
  store i16 %127, i16* %128, align 2
  %129 = zext i16 %127 to i32
  %130 = add nsw i32 %118, %129
  %131 = add nuw nsw i64 %106, 2
  %132 = icmp eq i64 %131, 16
  br i1 %132, label %133, label %105

133:                                              ; preds = %105
  %134 = add nsw i32 %130, 32
  %135 = lshr i32 %134, 6
  %136 = trunc i32 %135 to i16
  %137 = insertelement <8 x i16> undef, i16 %136, i32 0
  %138 = shufflevector <8 x i16> %137, <8 x i16> undef, <8 x i32> zeroinitializer
  %139 = insertelement <8 x i16> undef, i16 %136, i32 0
  %140 = shufflevector <8 x i16> %139, <8 x i16> undef, <8 x i32> zeroinitializer
  %141 = bitcast [32 x i16]* %0 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2
  %143 = sub <8 x i16> %142, %138
  %144 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %144, align 2
  %145 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = sub <8 x i16> %147, %140
  %149 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %149, align 2
  %150 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %151 = bitcast i16* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 2
  %153 = sub <8 x i16> %152, %138
  %154 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %154, align 2
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 2
  %158 = sub <8 x i16> %157, %140
  %159 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %159, align 2
  %160 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2
  %163 = sub <8 x i16> %162, %138
  %164 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %164, align 2
  %165 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 2
  %168 = sub <8 x i16> %167, %140
  %169 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %169, align 2
  %170 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %171 = bitcast i16* %170 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2
  %173 = sub <8 x i16> %172, %138
  %174 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2
  %178 = sub <8 x i16> %177, %140
  %179 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %179, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  br label %13

9:                                                ; preds = %13
  %10 = icmp sgt i32 %7, 0
  %11 = getelementptr inbounds i8, i8* %3, i64 %4
  %12 = select i1 %10, i8* %11, i8* %3
  br label %35

13:                                               ; preds = %13, %5
  %14 = phi i64 [ 0, %5 ], [ %33, %13 ]
  %15 = phi i32 [ 0, %5 ], [ %32, %13 ]
  %16 = shl nuw i64 %14, 1
  %17 = icmp sgt i64 %16, %8
  %18 = trunc i64 %16 to i32
  %19 = select i1 %17, i32 %6, i32 %18
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %3, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  %24 = add nsw i64 %20, 1
  %25 = getelementptr inbounds i8, i8* %3, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  %28 = add nuw nsw i16 %27, %23
  %29 = shl nuw nsw i16 %28, 2
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %14
  store i16 %29, i16* %30, align 2
  %31 = zext i16 %29 to i32
  %32 = add nuw nsw i32 %15, %31
  %33 = add nuw nsw i64 %14, 1
  %34 = icmp eq i64 %33, 16
  br i1 %34, label %9, label %13

35:                                               ; preds = %35, %9
  %36 = phi i64 [ 0, %9 ], [ %55, %35 ]
  %37 = phi i32 [ %32, %9 ], [ %54, %35 ]
  %38 = shl nuw i64 %36, 1
  %39 = icmp sgt i64 %38, %8
  %40 = trunc i64 %38 to i32
  %41 = select i1 %39, i32 %6, i32 %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %12, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = add nsw i64 %42, 1
  %47 = getelementptr inbounds i8, i8* %12, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = add nuw nsw i16 %49, %45
  %51 = shl nuw nsw i16 %50, 2
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %36
  store i16 %51, i16* %52, align 2
  %53 = zext i16 %51 to i32
  %54 = add nsw i32 %37, %53
  %55 = add nuw nsw i64 %36, 1
  %56 = icmp eq i64 %55, 16
  br i1 %56, label %57, label %35

57:                                               ; preds = %35
  %58 = icmp sgt i32 %7, 1
  %59 = getelementptr inbounds i8, i8* %12, i64 %4
  %60 = select i1 %58, i8* %59, i8* %12
  br label %61

61:                                               ; preds = %61, %57
  %62 = phi i64 [ 0, %57 ], [ %81, %61 ]
  %63 = phi i32 [ %54, %57 ], [ %80, %61 ]
  %64 = shl nuw i64 %62, 1
  %65 = icmp sgt i64 %64, %8
  %66 = trunc i64 %64 to i32
  %67 = select i1 %65, i32 %6, i32 %66
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %60, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i16
  %72 = add nsw i64 %68, 1
  %73 = getelementptr inbounds i8, i8* %60, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i16
  %76 = add nuw nsw i16 %75, %71
  %77 = shl nuw nsw i16 %76, 2
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %62
  store i16 %77, i16* %78, align 2
  %79 = zext i16 %77 to i32
  %80 = add nsw i32 %63, %79
  %81 = add nuw nsw i64 %62, 1
  %82 = icmp eq i64 %81, 16
  br i1 %82, label %83, label %61

83:                                               ; preds = %61
  %84 = icmp sgt i32 %7, 2
  %85 = getelementptr inbounds i8, i8* %60, i64 %4
  %86 = select i1 %84, i8* %85, i8* %60
  br label %87

87:                                               ; preds = %87, %83
  %88 = phi i64 [ 0, %83 ], [ %107, %87 ]
  %89 = phi i32 [ %80, %83 ], [ %106, %87 ]
  %90 = shl nuw i64 %88, 1
  %91 = icmp sgt i64 %90, %8
  %92 = trunc i64 %90 to i32
  %93 = select i1 %91, i32 %6, i32 %92
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %86, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = add nsw i64 %94, 1
  %99 = getelementptr inbounds i8, i8* %86, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i16
  %102 = add nuw nsw i16 %101, %97
  %103 = shl nuw nsw i16 %102, 2
  %104 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %88
  store i16 %103, i16* %104, align 2
  %105 = zext i16 %103 to i32
  %106 = add nsw i32 %89, %105
  %107 = add nuw nsw i64 %88, 1
  %108 = icmp eq i64 %107, 16
  br i1 %108, label %109, label %87

109:                                              ; preds = %87
  %110 = add nsw i32 %106, 32
  %111 = lshr i32 %110, 6
  %112 = trunc i32 %111 to i16
  %113 = insertelement <8 x i16> undef, i16 %112, i32 0
  %114 = shufflevector <8 x i16> %113, <8 x i16> undef, <8 x i32> zeroinitializer
  %115 = insertelement <8 x i16> undef, i16 %112, i32 0
  %116 = shufflevector <8 x i16> %115, <8 x i16> undef, <8 x i32> zeroinitializer
  %117 = bitcast [32 x i16]* %0 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2
  %119 = sub <8 x i16> %118, %114
  %120 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2
  %124 = sub <8 x i16> %123, %116
  %125 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2
  %129 = sub <8 x i16> %128, %114
  %130 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2
  %134 = sub <8 x i16> %133, %116
  %135 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %135, align 2
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2
  %139 = sub <8 x i16> %138, %114
  %140 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %140, align 2
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2
  %144 = sub <8 x i16> %143, %116
  %145 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %145, align 2
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2
  %149 = sub <8 x i16> %148, %114
  %150 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2
  %154 = sub <8 x i16> %153, %116
  %155 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = sext i32 %6 to i64
  br label %14

10:                                               ; preds = %14
  %11 = icmp sgt i32 %7, 0
  %12 = getelementptr inbounds i8, i8* %3, i64 %8
  %13 = select i1 %11, i8* %12, i8* %3
  br label %46

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %44, %14 ]
  %16 = phi i32 [ 0, %5 ], [ %43, %14 ]
  %17 = shl nuw i64 %15, 1
  %18 = icmp sgt i64 %17, %9
  %19 = trunc i64 %17 to i32
  %20 = select i1 %18, i32 %6, i32 %19
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, %4
  %23 = getelementptr inbounds i8, i8* %3, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  %26 = add nsw i64 %21, 1
  %27 = getelementptr inbounds i8, i8* %3, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i16
  %30 = getelementptr inbounds i8, i8* %3, i64 %22
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i16
  %33 = add nsw i64 %22, 1
  %34 = getelementptr inbounds i8, i8* %3, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i16
  %37 = add nuw nsw i16 %29, %25
  %38 = add nuw nsw i16 %37, %32
  %39 = add nuw nsw i16 %38, %36
  %40 = shl nuw nsw i16 %39, 1
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %15
  store i16 %40, i16* %41, align 2
  %42 = zext i16 %40 to i32
  %43 = add nuw nsw i32 %16, %42
  %44 = add nuw nsw i64 %15, 1
  %45 = icmp eq i64 %44, 16
  br i1 %45, label %10, label %14

46:                                               ; preds = %46, %10
  %47 = phi i64 [ 0, %10 ], [ %76, %46 ]
  %48 = phi i32 [ %43, %10 ], [ %75, %46 ]
  %49 = shl nuw i64 %47, 1
  %50 = icmp sgt i64 %49, %9
  %51 = trunc i64 %49 to i32
  %52 = select i1 %50, i32 %6, i32 %51
  %53 = sext i32 %52 to i64
  %54 = add nsw i64 %53, %4
  %55 = getelementptr inbounds i8, i8* %13, i64 %53
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  %58 = add nsw i64 %53, 1
  %59 = getelementptr inbounds i8, i8* %13, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  %62 = getelementptr inbounds i8, i8* %13, i64 %54
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = add nsw i64 %54, 1
  %66 = getelementptr inbounds i8, i8* %13, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  %69 = add nuw nsw i16 %61, %57
  %70 = add nuw nsw i16 %69, %64
  %71 = add nuw nsw i16 %70, %68
  %72 = shl nuw nsw i16 %71, 1
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %47
  store i16 %72, i16* %73, align 2
  %74 = zext i16 %72 to i32
  %75 = add nsw i32 %48, %74
  %76 = add nuw nsw i64 %47, 1
  %77 = icmp eq i64 %76, 16
  br i1 %77, label %78, label %46

78:                                               ; preds = %46
  %79 = icmp sgt i32 %7, 2
  %80 = getelementptr inbounds i8, i8* %13, i64 %8
  %81 = select i1 %79, i8* %80, i8* %13
  br label %82

82:                                               ; preds = %82, %78
  %83 = phi i64 [ 0, %78 ], [ %112, %82 ]
  %84 = phi i32 [ %75, %78 ], [ %111, %82 ]
  %85 = shl nuw i64 %83, 1
  %86 = icmp sgt i64 %85, %9
  %87 = trunc i64 %85 to i32
  %88 = select i1 %86, i32 %6, i32 %87
  %89 = sext i32 %88 to i64
  %90 = add nsw i64 %89, %4
  %91 = getelementptr inbounds i8, i8* %81, i64 %89
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i16
  %94 = add nsw i64 %89, 1
  %95 = getelementptr inbounds i8, i8* %81, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  %98 = getelementptr inbounds i8, i8* %81, i64 %90
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i16
  %101 = add nsw i64 %90, 1
  %102 = getelementptr inbounds i8, i8* %81, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i16
  %105 = add nuw nsw i16 %97, %93
  %106 = add nuw nsw i16 %105, %100
  %107 = add nuw nsw i16 %106, %104
  %108 = shl nuw nsw i16 %107, 1
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %83
  store i16 %108, i16* %109, align 2
  %110 = zext i16 %108 to i32
  %111 = add nsw i32 %84, %110
  %112 = add nuw nsw i64 %83, 1
  %113 = icmp eq i64 %112, 16
  br i1 %113, label %114, label %82

114:                                              ; preds = %82
  %115 = icmp sgt i32 %7, 4
  %116 = getelementptr inbounds i8, i8* %81, i64 %8
  %117 = select i1 %115, i8* %116, i8* %81
  br label %118

118:                                              ; preds = %118, %114
  %119 = phi i64 [ 0, %114 ], [ %148, %118 ]
  %120 = phi i32 [ %111, %114 ], [ %147, %118 ]
  %121 = shl nuw i64 %119, 1
  %122 = icmp sgt i64 %121, %9
  %123 = trunc i64 %121 to i32
  %124 = select i1 %122, i32 %6, i32 %123
  %125 = sext i32 %124 to i64
  %126 = add nsw i64 %125, %4
  %127 = getelementptr inbounds i8, i8* %117, i64 %125
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i16
  %130 = add nsw i64 %125, 1
  %131 = getelementptr inbounds i8, i8* %117, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i16
  %134 = getelementptr inbounds i8, i8* %117, i64 %126
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i16
  %137 = add nsw i64 %126, 1
  %138 = getelementptr inbounds i8, i8* %117, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i16
  %141 = add nuw nsw i16 %133, %129
  %142 = add nuw nsw i16 %141, %136
  %143 = add nuw nsw i16 %142, %140
  %144 = shl nuw nsw i16 %143, 1
  %145 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %119
  store i16 %144, i16* %145, align 2
  %146 = zext i16 %144 to i32
  %147 = add nsw i32 %120, %146
  %148 = add nuw nsw i64 %119, 1
  %149 = icmp eq i64 %148, 16
  br i1 %149, label %150, label %118

150:                                              ; preds = %118
  %151 = add nsw i32 %147, 32
  %152 = lshr i32 %151, 6
  %153 = trunc i32 %152 to i16
  %154 = insertelement <8 x i16> undef, i16 %153, i32 0
  %155 = shufflevector <8 x i16> %154, <8 x i16> undef, <8 x i32> zeroinitializer
  %156 = insertelement <8 x i16> undef, i16 %153, i32 0
  %157 = shufflevector <8 x i16> %156, <8 x i16> undef, <8 x i32> zeroinitializer
  %158 = bitcast [32 x i16]* %0 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2
  %160 = sub <8 x i16> %159, %155
  %161 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %161, align 2
  %162 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2
  %165 = sub <8 x i16> %164, %157
  %166 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %166, align 2
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 2
  %170 = sub <8 x i16> %169, %155
  %171 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %171, align 2
  %172 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %173 = bitcast i16* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 2
  %175 = sub <8 x i16> %174, %157
  %176 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 2
  %180 = sub <8 x i16> %179, %155
  %181 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %181, align 2
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2
  %185 = sub <8 x i16> %184, %157
  %186 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %185, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %188 = bitcast i16* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 2
  %190 = sub <8 x i16> %189, %155
  %191 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %190, <8 x i16>* %191, align 2
  %192 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %193 = bitcast i16* %192 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 2
  %195 = sub <8 x i16> %194, %157
  %196 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %196, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi8ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = insertelement <8 x i32> undef, i32 %3, i32 0
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> zeroinitializer
  %9 = insertelement <8 x i32> undef, i32 %6, i32 0
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %11

11:                                               ; preds = %60, %4
  %12 = phi i64 [ 0, %4 ], [ %62, %60 ]
  %13 = phi i8* [ %0, %4 ], [ %61, %60 ]
  %14 = mul i64 %12, %1
  %15 = getelementptr [32 x i16], [32 x i16]* %2, i64 %12, i64 16
  %16 = bitcast i16* %15 to i8*
  %17 = getelementptr [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %18 = bitcast i16* %17 to i8*
  %19 = add i64 %14, 16
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = getelementptr i8, i8* %0, i64 %14
  %22 = icmp ult i8* %21, %16
  %23 = icmp ugt i8* %20, %18
  %24 = and i1 %22, %23
  br i1 %24, label %64, label %25

25:                                               ; preds = %11
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !423
  %29 = sext <8 x i16> %28 to <8 x i32>
  %30 = mul nsw <8 x i32> %8, %29
  %31 = ashr <8 x i32> %30, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %32 = add <8 x i32> %30, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %33 = add <8 x i32> %32, %31
  %34 = ashr <8 x i32> %33, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %35 = add nsw <8 x i32> %34, %10
  %36 = icmp slt <8 x i32> %35, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %37 = select <8 x i1> %36, <8 x i32> %35, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %38 = icmp sgt <8 x i32> %37, zeroinitializer
  %39 = select <8 x i1> %38, <8 x i32> %37, <8 x i32> zeroinitializer
  %40 = trunc <8 x i32> %39 to <8 x i8>
  %41 = bitcast i8* %13 to <8 x i8>*
  store <8 x i8> %40, <8 x i8>* %41, align 1, !alias.scope !426, !noalias !423
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 8
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2, !alias.scope !423
  %45 = sext <8 x i16> %44 to <8 x i32>
  %46 = mul nsw <8 x i32> %8, %45
  %47 = ashr <8 x i32> %46, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %48 = add <8 x i32> %46, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %49 = add <8 x i32> %48, %47
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = add nsw <8 x i32> %50, %10
  %52 = icmp slt <8 x i32> %51, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %53 = select <8 x i1> %52, <8 x i32> %51, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %54 = icmp sgt <8 x i32> %53, zeroinitializer
  %55 = select <8 x i1> %54, <8 x i32> %53, <8 x i32> zeroinitializer
  %56 = trunc <8 x i32> %55 to <8 x i8>
  %57 = getelementptr inbounds i8, i8* %13, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  store <8 x i8> %56, <8 x i8>* %58, align 1, !alias.scope !426, !noalias !423
  br label %60

59:                                               ; preds = %60
  ret void

60:                                               ; preds = %64, %25
  %61 = getelementptr inbounds i8, i8* %13, i64 %1
  %62 = add nuw nsw i64 %12, 1
  %63 = icmp eq i64 %62, 8
  br i1 %63, label %59, label %11

64:                                               ; preds = %11, %64
  %65 = phi i64 [ %81, %64 ], [ 0, %11 ]
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = mul nsw i32 %68, %3
  %70 = ashr i32 %69, 31
  %71 = add i32 %69, 32
  %72 = add i32 %71, %70
  %73 = ashr i32 %72, 6
  %74 = add nsw i32 %73, %6
  %75 = icmp slt i32 %74, 255
  %76 = select i1 %75, i32 %74, i32 255
  %77 = icmp sgt i32 %76, 0
  %78 = select i1 %77, i32 %76, i32 0
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %13, i64 %65
  store i8 %79, i8* %80, align 1
  %81 = add nuw nsw i64 %65, 1
  %82 = icmp eq i64 %81, 16
  br i1 %82, label %60, label %64, !llvm.loop !428
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  br label %13

9:                                                ; preds = %13
  %10 = icmp sgt i32 %7, 0
  %11 = getelementptr inbounds i8, i8* %3, i64 %4
  %12 = select i1 %10, i8* %11, i8* %3
  br label %41

13:                                               ; preds = %13, %5
  %14 = phi i64 [ 0, %5 ], [ %39, %13 ]
  %15 = phi i32 [ 0, %5 ], [ %38, %13 ]
  %16 = icmp sgt i64 %14, %8
  %17 = trunc i64 %14 to i32
  %18 = select i1 %16, i32 %6, i32 %17
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %3, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = shl nuw nsw i16 %22, 3
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %14
  store i16 %23, i16* %24, align 2
  %25 = zext i16 %23 to i32
  %26 = add nuw nsw i32 %15, %25
  %27 = or i64 %14, 1
  %28 = icmp slt i64 %14, %8
  %29 = trunc i64 %27 to i32
  %30 = select i1 %28, i32 %29, i32 %6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %3, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = shl nuw nsw i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %27
  store i16 %35, i16* %36, align 2
  %37 = zext i16 %35 to i32
  %38 = add nuw nsw i32 %26, %37
  %39 = add nuw nsw i64 %14, 2
  %40 = icmp eq i64 %39, 16
  br i1 %40, label %9, label %13

41:                                               ; preds = %41, %9
  %42 = phi i64 [ 0, %9 ], [ %67, %41 ]
  %43 = phi i32 [ %38, %9 ], [ %66, %41 ]
  %44 = icmp sgt i64 %42, %8
  %45 = trunc i64 %42 to i32
  %46 = select i1 %44, i32 %6, i32 %45
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %12, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = shl nuw nsw i16 %50, 3
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %42
  store i16 %51, i16* %52, align 2
  %53 = zext i16 %51 to i32
  %54 = add nsw i32 %43, %53
  %55 = or i64 %42, 1
  %56 = icmp slt i64 %42, %8
  %57 = trunc i64 %55 to i32
  %58 = select i1 %56, i32 %57, i32 %6
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %12, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  %63 = shl nuw nsw i16 %62, 3
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %55
  store i16 %63, i16* %64, align 2
  %65 = zext i16 %63 to i32
  %66 = add nsw i32 %54, %65
  %67 = add nuw nsw i64 %42, 2
  %68 = icmp eq i64 %67, 16
  br i1 %68, label %69, label %41

69:                                               ; preds = %41
  %70 = icmp sgt i32 %7, 1
  %71 = getelementptr inbounds i8, i8* %12, i64 %4
  %72 = select i1 %70, i8* %71, i8* %12
  br label %73

73:                                               ; preds = %73, %69
  %74 = phi i64 [ 0, %69 ], [ %99, %73 ]
  %75 = phi i32 [ %66, %69 ], [ %98, %73 ]
  %76 = icmp sgt i64 %74, %8
  %77 = trunc i64 %74 to i32
  %78 = select i1 %76, i32 %6, i32 %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %72, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i16
  %83 = shl nuw nsw i16 %82, 3
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %74
  store i16 %83, i16* %84, align 2
  %85 = zext i16 %83 to i32
  %86 = add nsw i32 %75, %85
  %87 = or i64 %74, 1
  %88 = icmp slt i64 %74, %8
  %89 = trunc i64 %87 to i32
  %90 = select i1 %88, i32 %89, i32 %6
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %72, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = shl nuw nsw i16 %94, 3
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %87
  store i16 %95, i16* %96, align 2
  %97 = zext i16 %95 to i32
  %98 = add nsw i32 %86, %97
  %99 = add nuw nsw i64 %74, 2
  %100 = icmp eq i64 %99, 16
  br i1 %100, label %101, label %73

101:                                              ; preds = %73
  %102 = icmp sgt i32 %7, 2
  %103 = getelementptr inbounds i8, i8* %72, i64 %4
  %104 = select i1 %102, i8* %103, i8* %72
  br label %105

105:                                              ; preds = %105, %101
  %106 = phi i64 [ 0, %101 ], [ %131, %105 ]
  %107 = phi i32 [ %98, %101 ], [ %130, %105 ]
  %108 = icmp sgt i64 %106, %8
  %109 = trunc i64 %106 to i32
  %110 = select i1 %108, i32 %6, i32 %109
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %104, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i16
  %115 = shl nuw nsw i16 %114, 3
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %106
  store i16 %115, i16* %116, align 2
  %117 = zext i16 %115 to i32
  %118 = add nsw i32 %107, %117
  %119 = or i64 %106, 1
  %120 = icmp slt i64 %106, %8
  %121 = trunc i64 %119 to i32
  %122 = select i1 %120, i32 %121, i32 %6
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %104, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i16
  %127 = shl nuw nsw i16 %126, 3
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %119
  store i16 %127, i16* %128, align 2
  %129 = zext i16 %127 to i32
  %130 = add nsw i32 %118, %129
  %131 = add nuw nsw i64 %106, 2
  %132 = icmp eq i64 %131, 16
  br i1 %132, label %133, label %105

133:                                              ; preds = %105
  %134 = icmp sgt i32 %7, 3
  %135 = getelementptr inbounds i8, i8* %104, i64 %4
  %136 = select i1 %134, i8* %135, i8* %104
  br label %137

137:                                              ; preds = %137, %133
  %138 = phi i64 [ 0, %133 ], [ %163, %137 ]
  %139 = phi i32 [ %130, %133 ], [ %162, %137 ]
  %140 = icmp sgt i64 %138, %8
  %141 = trunc i64 %138 to i32
  %142 = select i1 %140, i32 %6, i32 %141
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %136, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  %147 = shl nuw nsw i16 %146, 3
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 %138
  store i16 %147, i16* %148, align 2
  %149 = zext i16 %147 to i32
  %150 = add nsw i32 %139, %149
  %151 = or i64 %138, 1
  %152 = icmp slt i64 %138, %8
  %153 = trunc i64 %151 to i32
  %154 = select i1 %152, i32 %153, i32 %6
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %136, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i16
  %159 = shl nuw nsw i16 %158, 3
  %160 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 %151
  store i16 %159, i16* %160, align 2
  %161 = zext i16 %159 to i32
  %162 = add nsw i32 %150, %161
  %163 = add nuw nsw i64 %138, 2
  %164 = icmp eq i64 %163, 16
  br i1 %164, label %165, label %137

165:                                              ; preds = %137
  %166 = icmp sgt i32 %7, 4
  %167 = getelementptr inbounds i8, i8* %136, i64 %4
  %168 = select i1 %166, i8* %167, i8* %136
  br label %169

169:                                              ; preds = %169, %165
  %170 = phi i64 [ 0, %165 ], [ %195, %169 ]
  %171 = phi i32 [ %162, %165 ], [ %194, %169 ]
  %172 = icmp sgt i64 %170, %8
  %173 = trunc i64 %170 to i32
  %174 = select i1 %172, i32 %6, i32 %173
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %168, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i16
  %179 = shl nuw nsw i16 %178, 3
  %180 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 %170
  store i16 %179, i16* %180, align 2
  %181 = zext i16 %179 to i32
  %182 = add nsw i32 %171, %181
  %183 = or i64 %170, 1
  %184 = icmp slt i64 %170, %8
  %185 = trunc i64 %183 to i32
  %186 = select i1 %184, i32 %185, i32 %6
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %168, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i16
  %191 = shl nuw nsw i16 %190, 3
  %192 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 %183
  store i16 %191, i16* %192, align 2
  %193 = zext i16 %191 to i32
  %194 = add nsw i32 %182, %193
  %195 = add nuw nsw i64 %170, 2
  %196 = icmp eq i64 %195, 16
  br i1 %196, label %197, label %169

197:                                              ; preds = %169
  %198 = icmp sgt i32 %7, 5
  %199 = getelementptr inbounds i8, i8* %168, i64 %4
  %200 = select i1 %198, i8* %199, i8* %168
  br label %201

201:                                              ; preds = %201, %197
  %202 = phi i64 [ 0, %197 ], [ %227, %201 ]
  %203 = phi i32 [ %194, %197 ], [ %226, %201 ]
  %204 = icmp sgt i64 %202, %8
  %205 = trunc i64 %202 to i32
  %206 = select i1 %204, i32 %6, i32 %205
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i8, i8* %200, i64 %207
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i16
  %211 = shl nuw nsw i16 %210, 3
  %212 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 %202
  store i16 %211, i16* %212, align 2
  %213 = zext i16 %211 to i32
  %214 = add nsw i32 %203, %213
  %215 = or i64 %202, 1
  %216 = icmp slt i64 %202, %8
  %217 = trunc i64 %215 to i32
  %218 = select i1 %216, i32 %217, i32 %6
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i8, i8* %200, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i16
  %223 = shl nuw nsw i16 %222, 3
  %224 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 %215
  store i16 %223, i16* %224, align 2
  %225 = zext i16 %223 to i32
  %226 = add nsw i32 %214, %225
  %227 = add nuw nsw i64 %202, 2
  %228 = icmp eq i64 %227, 16
  br i1 %228, label %229, label %201

229:                                              ; preds = %201
  %230 = icmp sgt i32 %7, 6
  %231 = getelementptr inbounds i8, i8* %200, i64 %4
  %232 = select i1 %230, i8* %231, i8* %200
  br label %233

233:                                              ; preds = %233, %229
  %234 = phi i64 [ 0, %229 ], [ %259, %233 ]
  %235 = phi i32 [ %226, %229 ], [ %258, %233 ]
  %236 = icmp sgt i64 %234, %8
  %237 = trunc i64 %234 to i32
  %238 = select i1 %236, i32 %6, i32 %237
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %232, i64 %239
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i16
  %243 = shl nuw nsw i16 %242, 3
  %244 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 %234
  store i16 %243, i16* %244, align 2
  %245 = zext i16 %243 to i32
  %246 = add nsw i32 %235, %245
  %247 = or i64 %234, 1
  %248 = icmp slt i64 %234, %8
  %249 = trunc i64 %247 to i32
  %250 = select i1 %248, i32 %249, i32 %6
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i8, i8* %232, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i16
  %255 = shl nuw nsw i16 %254, 3
  %256 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 %247
  store i16 %255, i16* %256, align 2
  %257 = zext i16 %255 to i32
  %258 = add nsw i32 %246, %257
  %259 = add nuw nsw i64 %234, 2
  %260 = icmp eq i64 %259, 16
  br i1 %260, label %261, label %233

261:                                              ; preds = %233
  %262 = add nsw i32 %258, 64
  %263 = lshr i32 %262, 7
  %264 = trunc i32 %263 to i16
  %265 = insertelement <8 x i16> undef, i16 %264, i32 0
  %266 = shufflevector <8 x i16> %265, <8 x i16> undef, <8 x i32> zeroinitializer
  %267 = insertelement <8 x i16> undef, i16 %264, i32 0
  %268 = shufflevector <8 x i16> %267, <8 x i16> undef, <8 x i32> zeroinitializer
  %269 = bitcast [32 x i16]* %0 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2
  %271 = sub <8 x i16> %270, %266
  %272 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %271, <8 x i16>* %272, align 2
  %273 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2
  %276 = sub <8 x i16> %275, %268
  %277 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %276, <8 x i16>* %277, align 2
  %278 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %279 = bitcast i16* %278 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 2
  %281 = sub <8 x i16> %280, %266
  %282 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %282, align 2
  %283 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2
  %286 = sub <8 x i16> %285, %268
  %287 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> %286, <8 x i16>* %287, align 2
  %288 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %289 = bitcast i16* %288 to <8 x i16>*
  %290 = load <8 x i16>, <8 x i16>* %289, align 2
  %291 = sub <8 x i16> %290, %266
  %292 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %291, <8 x i16>* %292, align 2
  %293 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 2
  %296 = sub <8 x i16> %295, %268
  %297 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %297, align 2
  %298 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %299 = bitcast i16* %298 to <8 x i16>*
  %300 = load <8 x i16>, <8 x i16>* %299, align 2
  %301 = sub <8 x i16> %300, %266
  %302 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %301, <8 x i16>* %302, align 2
  %303 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2
  %306 = sub <8 x i16> %305, %268
  %307 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %306, <8 x i16>* %307, align 2
  %308 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %309 = bitcast i16* %308 to <8 x i16>*
  %310 = load <8 x i16>, <8 x i16>* %309, align 2
  %311 = sub <8 x i16> %310, %266
  %312 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> %311, <8 x i16>* %312, align 2
  %313 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2
  %316 = sub <8 x i16> %315, %268
  %317 = bitcast i16* %313 to <8 x i16>*
  store <8 x i16> %316, <8 x i16>* %317, align 2
  %318 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2
  %321 = sub <8 x i16> %320, %266
  %322 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %321, <8 x i16>* %322, align 2
  %323 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %324 = bitcast i16* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 2
  %326 = sub <8 x i16> %325, %268
  %327 = bitcast i16* %323 to <8 x i16>*
  store <8 x i16> %326, <8 x i16>* %327, align 2
  %328 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %329 = bitcast i16* %328 to <8 x i16>*
  %330 = load <8 x i16>, <8 x i16>* %329, align 2
  %331 = sub <8 x i16> %330, %266
  %332 = bitcast i16* %328 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %332, align 2
  %333 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %334 = bitcast i16* %333 to <8 x i16>*
  %335 = load <8 x i16>, <8 x i16>* %334, align 2
  %336 = sub <8 x i16> %335, %268
  %337 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %336, <8 x i16>* %337, align 2
  %338 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %339 = bitcast i16* %338 to <8 x i16>*
  %340 = load <8 x i16>, <8 x i16>* %339, align 2
  %341 = sub <8 x i16> %340, %266
  %342 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %342, align 2
  %343 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2
  %346 = sub <8 x i16> %345, %268
  %347 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %347, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %101, %5
  %11 = phi i64 [ 0, %5 ], [ %105, %101 ]
  %12 = phi i8* [ %3, %5 ], [ %104, %101 ]
  %13 = phi i32 [ 0, %5 ], [ %126, %101 ]
  br label %107

14:                                               ; preds = %101
  %15 = add nsw i32 %126, 64
  %16 = lshr i32 %15, 7
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = insertelement <8 x i16> undef, i16 %17, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = bitcast [32 x i16]* %0 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 2
  %24 = sub <8 x i16> %23, %19
  %25 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  %29 = sub <8 x i16> %28, %21
  %30 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 2
  %34 = sub <8 x i16> %33, %19
  %35 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %34, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2
  %39 = sub <8 x i16> %38, %21
  %40 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %42 = bitcast i16* %41 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2
  %44 = sub <8 x i16> %43, %19
  %45 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2
  %49 = sub <8 x i16> %48, %21
  %50 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2
  %54 = sub <8 x i16> %53, %19
  %55 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = sub <8 x i16> %58, %21
  %60 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2
  %64 = sub <8 x i16> %63, %19
  %65 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = sub <8 x i16> %68, %21
  %70 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = sub <8 x i16> %73, %19
  %75 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 2
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2
  %79 = sub <8 x i16> %78, %21
  %80 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2
  %84 = sub <8 x i16> %83, %19
  %85 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2
  %89 = sub <8 x i16> %88, %21
  %90 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2
  %94 = sub <8 x i16> %93, %19
  %95 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2
  %99 = sub <8 x i16> %98, %21
  %100 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 2
  ret void

101:                                              ; preds = %107
  %102 = icmp slt i64 %11, %9
  %103 = getelementptr inbounds i8, i8* %12, i64 %4
  %104 = select i1 %102, i8* %103, i8* %12
  %105 = add nuw nsw i64 %11, 1
  %106 = icmp eq i64 %105, 8
  br i1 %106, label %14, label %10

107:                                              ; preds = %107, %10
  %108 = phi i64 [ 0, %10 ], [ %127, %107 ]
  %109 = phi i32 [ %13, %10 ], [ %126, %107 ]
  %110 = shl nuw i64 %108, 1
  %111 = icmp sgt i64 %110, %8
  %112 = trunc i64 %110 to i32
  %113 = select i1 %111, i32 %6, i32 %112
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %12, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i16
  %118 = add nsw i64 %114, 1
  %119 = getelementptr inbounds i8, i8* %12, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i16
  %122 = add nuw nsw i16 %121, %117
  %123 = shl nuw nsw i16 %122, 2
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %108
  store i16 %123, i16* %124, align 2
  %125 = zext i16 %123 to i32
  %126 = add nsw i32 %109, %125
  %127 = add nuw nsw i64 %108, 1
  %128 = icmp eq i64 %127, 16
  br i1 %128, label %101, label %107
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = sext i32 %6 to i64
  %10 = sext i32 %7 to i64
  br label %11

11:                                               ; preds = %102, %5
  %12 = phi i64 [ 0, %5 ], [ %107, %102 ]
  %13 = phi i8* [ %3, %5 ], [ %106, %102 ]
  %14 = phi i32 [ 0, %5 ], [ %138, %102 ]
  br label %109

15:                                               ; preds = %102
  %16 = add nsw i32 %138, 64
  %17 = lshr i32 %16, 7
  %18 = trunc i32 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = insertelement <8 x i16> undef, i16 %18, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast [32 x i16]* %0 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = sub <8 x i16> %24, %20
  %26 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %25, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 2
  %30 = sub <8 x i16> %29, %22
  %31 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> %30, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %33 = bitcast i16* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 2
  %35 = sub <8 x i16> %34, %20
  %36 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %38 = bitcast i16* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 2
  %40 = sub <8 x i16> %39, %22
  %41 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %40, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2
  %45 = sub <8 x i16> %44, %20
  %46 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %46, align 2
  %47 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %48 = bitcast i16* %47 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 2
  %50 = sub <8 x i16> %49, %22
  %51 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2
  %55 = sub <8 x i16> %54, %20
  %56 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2
  %60 = sub <8 x i16> %59, %22
  %61 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2
  %65 = sub <8 x i16> %64, %20
  %66 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %66, align 2
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2
  %70 = sub <8 x i16> %69, %22
  %71 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %71, align 2
  %72 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = sub <8 x i16> %74, %20
  %76 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2
  %80 = sub <8 x i16> %79, %22
  %81 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %81, align 2
  %82 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2
  %85 = sub <8 x i16> %84, %20
  %86 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %86, align 2
  %87 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2
  %90 = sub <8 x i16> %89, %22
  %91 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2
  %95 = sub <8 x i16> %94, %20
  %96 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2
  %100 = sub <8 x i16> %99, %22
  %101 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 2
  ret void

102:                                              ; preds = %109
  %103 = shl nuw i64 %12, 1
  %104 = icmp slt i64 %103, %10
  %105 = getelementptr inbounds i8, i8* %13, i64 %8
  %106 = select i1 %104, i8* %105, i8* %13
  %107 = add nuw nsw i64 %12, 1
  %108 = icmp eq i64 %107, 8
  br i1 %108, label %15, label %11

109:                                              ; preds = %109, %11
  %110 = phi i64 [ 0, %11 ], [ %139, %109 ]
  %111 = phi i32 [ %14, %11 ], [ %138, %109 ]
  %112 = shl nuw i64 %110, 1
  %113 = icmp sgt i64 %112, %9
  %114 = trunc i64 %112 to i32
  %115 = select i1 %113, i32 %6, i32 %114
  %116 = sext i32 %115 to i64
  %117 = add nsw i64 %116, %4
  %118 = getelementptr inbounds i8, i8* %13, i64 %116
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i16
  %121 = add nsw i64 %116, 1
  %122 = getelementptr inbounds i8, i8* %13, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = getelementptr inbounds i8, i8* %13, i64 %117
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = add nsw i64 %117, 1
  %129 = getelementptr inbounds i8, i8* %13, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i16
  %132 = add nuw nsw i16 %124, %120
  %133 = add nuw nsw i16 %132, %127
  %134 = add nuw nsw i16 %133, %131
  %135 = shl nuw nsw i16 %134, 1
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %12, i64 %110
  store i16 %135, i16* %136, align 2
  %137 = zext i16 %135 to i32
  %138 = add nsw i32 %111, %137
  %139 = add nuw nsw i64 %110, 1
  %140 = icmp eq i64 %139, 16
  br i1 %140, label %102, label %109
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi16ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = insertelement <8 x i32> undef, i32 %3, i32 0
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> zeroinitializer
  %9 = insertelement <8 x i32> undef, i32 %6, i32 0
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %11

11:                                               ; preds = %60, %4
  %12 = phi i64 [ 0, %4 ], [ %62, %60 ]
  %13 = phi i8* [ %0, %4 ], [ %61, %60 ]
  %14 = mul i64 %12, %1
  %15 = getelementptr [32 x i16], [32 x i16]* %2, i64 %12, i64 16
  %16 = bitcast i16* %15 to i8*
  %17 = getelementptr [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %18 = bitcast i16* %17 to i8*
  %19 = add i64 %14, 16
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = getelementptr i8, i8* %0, i64 %14
  %22 = icmp ult i8* %21, %16
  %23 = icmp ugt i8* %20, %18
  %24 = and i1 %22, %23
  br i1 %24, label %64, label %25

25:                                               ; preds = %11
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !429
  %29 = sext <8 x i16> %28 to <8 x i32>
  %30 = mul nsw <8 x i32> %8, %29
  %31 = ashr <8 x i32> %30, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %32 = add <8 x i32> %30, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %33 = add <8 x i32> %32, %31
  %34 = ashr <8 x i32> %33, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %35 = add nsw <8 x i32> %34, %10
  %36 = icmp slt <8 x i32> %35, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %37 = select <8 x i1> %36, <8 x i32> %35, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %38 = icmp sgt <8 x i32> %37, zeroinitializer
  %39 = select <8 x i1> %38, <8 x i32> %37, <8 x i32> zeroinitializer
  %40 = trunc <8 x i32> %39 to <8 x i8>
  %41 = bitcast i8* %13 to <8 x i8>*
  store <8 x i8> %40, <8 x i8>* %41, align 1, !alias.scope !432, !noalias !429
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 8
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2, !alias.scope !429
  %45 = sext <8 x i16> %44 to <8 x i32>
  %46 = mul nsw <8 x i32> %8, %45
  %47 = ashr <8 x i32> %46, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %48 = add <8 x i32> %46, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %49 = add <8 x i32> %48, %47
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = add nsw <8 x i32> %50, %10
  %52 = icmp slt <8 x i32> %51, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %53 = select <8 x i1> %52, <8 x i32> %51, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %54 = icmp sgt <8 x i32> %53, zeroinitializer
  %55 = select <8 x i1> %54, <8 x i32> %53, <8 x i32> zeroinitializer
  %56 = trunc <8 x i32> %55 to <8 x i8>
  %57 = getelementptr inbounds i8, i8* %13, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  store <8 x i8> %56, <8 x i8>* %58, align 1, !alias.scope !432, !noalias !429
  br label %60

59:                                               ; preds = %60
  ret void

60:                                               ; preds = %64, %25
  %61 = getelementptr inbounds i8, i8* %13, i64 %1
  %62 = add nuw nsw i64 %12, 1
  %63 = icmp eq i64 %62, 16
  br i1 %63, label %59, label %11

64:                                               ; preds = %11, %64
  %65 = phi i64 [ %81, %64 ], [ 0, %11 ]
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = mul nsw i32 %68, %3
  %70 = ashr i32 %69, 31
  %71 = add i32 %69, 32
  %72 = add i32 %71, %70
  %73 = ashr i32 %72, 6
  %74 = add nsw i32 %73, %6
  %75 = icmp slt i32 %74, 255
  %76 = select i1 %75, i32 %74, i32 255
  %77 = icmp sgt i32 %76, 0
  %78 = select i1 %77, i32 %76, i32 0
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %13, i64 %65
  store i8 %79, i8* %80, align 1
  %81 = add nuw nsw i64 %65, 1
  %82 = icmp eq i64 %81, 16
  br i1 %82, label %60, label %64, !llvm.loop !434
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %181, %5
  %11 = phi i64 [ 0, %5 ], [ %185, %181 ]
  %12 = phi i8* [ %3, %5 ], [ %184, %181 ]
  %13 = phi i32 [ 0, %5 ], [ %212, %181 ]
  br label %187

14:                                               ; preds = %181
  %15 = add nsw i32 %212, 128
  %16 = lshr i32 %15, 8
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = insertelement <8 x i16> undef, i16 %17, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = bitcast [32 x i16]* %0 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 2
  %24 = sub <8 x i16> %23, %19
  %25 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  %29 = sub <8 x i16> %28, %21
  %30 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 2
  %34 = sub <8 x i16> %33, %19
  %35 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %34, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2
  %39 = sub <8 x i16> %38, %21
  %40 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %42 = bitcast i16* %41 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2
  %44 = sub <8 x i16> %43, %19
  %45 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2
  %49 = sub <8 x i16> %48, %21
  %50 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2
  %54 = sub <8 x i16> %53, %19
  %55 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = sub <8 x i16> %58, %21
  %60 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2
  %64 = sub <8 x i16> %63, %19
  %65 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = sub <8 x i16> %68, %21
  %70 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = sub <8 x i16> %73, %19
  %75 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 2
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2
  %79 = sub <8 x i16> %78, %21
  %80 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2
  %84 = sub <8 x i16> %83, %19
  %85 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2
  %89 = sub <8 x i16> %88, %21
  %90 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2
  %94 = sub <8 x i16> %93, %19
  %95 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2
  %99 = sub <8 x i16> %98, %21
  %100 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2
  %104 = sub <8 x i16> %103, %19
  %105 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2
  %109 = sub <8 x i16> %108, %21
  %110 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2
  %114 = sub <8 x i16> %113, %19
  %115 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2
  %119 = sub <8 x i16> %118, %21
  %120 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2
  %124 = sub <8 x i16> %123, %19
  %125 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2
  %129 = sub <8 x i16> %128, %21
  %130 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2
  %134 = sub <8 x i16> %133, %19
  %135 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %135, align 2
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2
  %139 = sub <8 x i16> %138, %21
  %140 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %140, align 2
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2
  %144 = sub <8 x i16> %143, %19
  %145 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %145, align 2
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 8
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2
  %149 = sub <8 x i16> %148, %21
  %150 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2
  %154 = sub <8 x i16> %153, %19
  %155 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2
  %156 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2
  %159 = sub <8 x i16> %158, %21
  %160 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %160, align 2
  %161 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2
  %164 = sub <8 x i16> %163, %19
  %165 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %165, align 2
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 8
  %167 = bitcast i16* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 2
  %169 = sub <8 x i16> %168, %21
  %170 = bitcast i16* %166 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %170, align 2
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 2
  %174 = sub <8 x i16> %173, %19
  %175 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %175, align 2
  %176 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 8
  %177 = bitcast i16* %176 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 2
  %179 = sub <8 x i16> %178, %21
  %180 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %180, align 2
  ret void

181:                                              ; preds = %187
  %182 = icmp slt i64 %11, %9
  %183 = getelementptr inbounds i8, i8* %12, i64 %4
  %184 = select i1 %182, i8* %183, i8* %12
  %185 = add nuw nsw i64 %11, 1
  %186 = icmp eq i64 %185, 16
  br i1 %186, label %14, label %10

187:                                              ; preds = %187, %10
  %188 = phi i64 [ 0, %10 ], [ %213, %187 ]
  %189 = phi i32 [ %13, %10 ], [ %212, %187 ]
  %190 = icmp sgt i64 %188, %8
  %191 = trunc i64 %188 to i32
  %192 = select i1 %190, i32 %6, i32 %191
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %12, i64 %193
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i16
  %197 = shl nuw nsw i16 %196, 3
  %198 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %188
  store i16 %197, i16* %198, align 2
  %199 = zext i16 %197 to i32
  %200 = add nsw i32 %189, %199
  %201 = or i64 %188, 1
  %202 = icmp slt i64 %188, %8
  %203 = trunc i64 %201 to i32
  %204 = select i1 %202, i32 %203, i32 %6
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds i8, i8* %12, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i16
  %209 = shl nuw nsw i16 %208, 3
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %201
  store i16 %209, i16* %210, align 2
  %211 = zext i16 %209 to i32
  %212 = add nsw i32 %200, %211
  %213 = add nuw nsw i64 %188, 2
  %214 = icmp eq i64 %213, 16
  br i1 %214, label %181, label %187
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %181, %5
  %11 = phi i64 [ 0, %5 ], [ %185, %181 ]
  %12 = phi i8* [ %3, %5 ], [ %184, %181 ]
  %13 = phi i32 [ 0, %5 ], [ %206, %181 ]
  br label %187

14:                                               ; preds = %181
  %15 = add nsw i32 %206, 128
  %16 = lshr i32 %15, 8
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = insertelement <8 x i16> undef, i16 %17, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = bitcast [32 x i16]* %0 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 2
  %24 = sub <8 x i16> %23, %19
  %25 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  %29 = sub <8 x i16> %28, %21
  %30 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 2
  %34 = sub <8 x i16> %33, %19
  %35 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %34, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2
  %39 = sub <8 x i16> %38, %21
  %40 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %42 = bitcast i16* %41 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2
  %44 = sub <8 x i16> %43, %19
  %45 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2
  %49 = sub <8 x i16> %48, %21
  %50 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2
  %54 = sub <8 x i16> %53, %19
  %55 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = sub <8 x i16> %58, %21
  %60 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2
  %64 = sub <8 x i16> %63, %19
  %65 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = sub <8 x i16> %68, %21
  %70 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = sub <8 x i16> %73, %19
  %75 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 2
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2
  %79 = sub <8 x i16> %78, %21
  %80 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2
  %84 = sub <8 x i16> %83, %19
  %85 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2
  %89 = sub <8 x i16> %88, %21
  %90 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2
  %94 = sub <8 x i16> %93, %19
  %95 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2
  %99 = sub <8 x i16> %98, %21
  %100 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2
  %104 = sub <8 x i16> %103, %19
  %105 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2
  %109 = sub <8 x i16> %108, %21
  %110 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2
  %114 = sub <8 x i16> %113, %19
  %115 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2
  %119 = sub <8 x i16> %118, %21
  %120 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2
  %124 = sub <8 x i16> %123, %19
  %125 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2
  %129 = sub <8 x i16> %128, %21
  %130 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2
  %134 = sub <8 x i16> %133, %19
  %135 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %135, align 2
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2
  %139 = sub <8 x i16> %138, %21
  %140 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %140, align 2
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2
  %144 = sub <8 x i16> %143, %19
  %145 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %145, align 2
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 8
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2
  %149 = sub <8 x i16> %148, %21
  %150 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2
  %154 = sub <8 x i16> %153, %19
  %155 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2
  %156 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2
  %159 = sub <8 x i16> %158, %21
  %160 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %160, align 2
  %161 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2
  %164 = sub <8 x i16> %163, %19
  %165 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %165, align 2
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 8
  %167 = bitcast i16* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 2
  %169 = sub <8 x i16> %168, %21
  %170 = bitcast i16* %166 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %170, align 2
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %172 = bitcast i16* %171 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 2
  %174 = sub <8 x i16> %173, %19
  %175 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %175, align 2
  %176 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 8
  %177 = bitcast i16* %176 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 2
  %179 = sub <8 x i16> %178, %21
  %180 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %180, align 2
  ret void

181:                                              ; preds = %187
  %182 = icmp slt i64 %11, %9
  %183 = getelementptr inbounds i8, i8* %12, i64 %4
  %184 = select i1 %182, i8* %183, i8* %12
  %185 = add nuw nsw i64 %11, 1
  %186 = icmp eq i64 %185, 16
  br i1 %186, label %14, label %10

187:                                              ; preds = %187, %10
  %188 = phi i64 [ 0, %10 ], [ %207, %187 ]
  %189 = phi i32 [ %13, %10 ], [ %206, %187 ]
  %190 = shl nuw i64 %188, 1
  %191 = icmp sgt i64 %190, %8
  %192 = trunc i64 %190 to i32
  %193 = select i1 %191, i32 %6, i32 %192
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i8, i8* %12, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i16
  %198 = add nsw i64 %194, 1
  %199 = getelementptr inbounds i8, i8* %12, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i16
  %202 = add nuw nsw i16 %201, %197
  %203 = shl nuw nsw i16 %202, 2
  %204 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %188
  store i16 %203, i16* %204, align 2
  %205 = zext i16 %203 to i32
  %206 = add nsw i32 %189, %205
  %207 = add nuw nsw i64 %188, 1
  %208 = icmp eq i64 %207, 16
  br i1 %208, label %181, label %187
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = sext i32 %6 to i64
  %10 = sext i32 %7 to i64
  br label %11

11:                                               ; preds = %182, %5
  %12 = phi i64 [ 0, %5 ], [ %187, %182 ]
  %13 = phi i8* [ %3, %5 ], [ %186, %182 ]
  %14 = phi i32 [ 0, %5 ], [ %218, %182 ]
  br label %189

15:                                               ; preds = %182
  %16 = add nsw i32 %218, 128
  %17 = lshr i32 %16, 8
  %18 = trunc i32 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = insertelement <8 x i16> undef, i16 %18, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast [32 x i16]* %0 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = sub <8 x i16> %24, %20
  %26 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %25, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 2
  %30 = sub <8 x i16> %29, %22
  %31 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> %30, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %33 = bitcast i16* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 2
  %35 = sub <8 x i16> %34, %20
  %36 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %38 = bitcast i16* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 2
  %40 = sub <8 x i16> %39, %22
  %41 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %40, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2
  %45 = sub <8 x i16> %44, %20
  %46 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %46, align 2
  %47 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %48 = bitcast i16* %47 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 2
  %50 = sub <8 x i16> %49, %22
  %51 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2
  %55 = sub <8 x i16> %54, %20
  %56 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2
  %60 = sub <8 x i16> %59, %22
  %61 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2
  %65 = sub <8 x i16> %64, %20
  %66 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %66, align 2
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2
  %70 = sub <8 x i16> %69, %22
  %71 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %71, align 2
  %72 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = sub <8 x i16> %74, %20
  %76 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2
  %80 = sub <8 x i16> %79, %22
  %81 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %81, align 2
  %82 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2
  %85 = sub <8 x i16> %84, %20
  %86 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %86, align 2
  %87 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2
  %90 = sub <8 x i16> %89, %22
  %91 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2
  %95 = sub <8 x i16> %94, %20
  %96 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2
  %100 = sub <8 x i16> %99, %22
  %101 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = sub <8 x i16> %104, %20
  %106 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2
  %110 = sub <8 x i16> %109, %22
  %111 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = sub <8 x i16> %114, %20
  %116 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2
  %120 = sub <8 x i16> %119, %22
  %121 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2
  %125 = sub <8 x i16> %124, %20
  %126 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2
  %130 = sub <8 x i16> %129, %22
  %131 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2
  %135 = sub <8 x i16> %134, %20
  %136 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %136, align 2
  %137 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2
  %140 = sub <8 x i16> %139, %22
  %141 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %141, align 2
  %142 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %143 = bitcast i16* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2
  %145 = sub <8 x i16> %144, %20
  %146 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %146, align 2
  %147 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 8
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2
  %150 = sub <8 x i16> %149, %22
  %151 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %151, align 2
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2
  %155 = sub <8 x i16> %154, %20
  %156 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %155, <8 x i16>* %156, align 2
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 8
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2
  %160 = sub <8 x i16> %159, %22
  %161 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %161, align 2
  %162 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2
  %165 = sub <8 x i16> %164, %20
  %166 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %166, align 2
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 2
  %170 = sub <8 x i16> %169, %22
  %171 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %171, align 2
  %172 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %173 = bitcast i16* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 2
  %175 = sub <8 x i16> %174, %20
  %176 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 2
  %180 = sub <8 x i16> %179, %22
  %181 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %181, align 2
  ret void

182:                                              ; preds = %189
  %183 = shl nuw i64 %12, 1
  %184 = icmp slt i64 %183, %10
  %185 = getelementptr inbounds i8, i8* %13, i64 %8
  %186 = select i1 %184, i8* %185, i8* %13
  %187 = add nuw nsw i64 %12, 1
  %188 = icmp eq i64 %187, 16
  br i1 %188, label %15, label %11

189:                                              ; preds = %189, %11
  %190 = phi i64 [ 0, %11 ], [ %219, %189 ]
  %191 = phi i32 [ %14, %11 ], [ %218, %189 ]
  %192 = shl nuw i64 %190, 1
  %193 = icmp sgt i64 %192, %9
  %194 = trunc i64 %192 to i32
  %195 = select i1 %193, i32 %6, i32 %194
  %196 = sext i32 %195 to i64
  %197 = add nsw i64 %196, %4
  %198 = getelementptr inbounds i8, i8* %13, i64 %196
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i16
  %201 = add nsw i64 %196, 1
  %202 = getelementptr inbounds i8, i8* %13, i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i16
  %205 = getelementptr inbounds i8, i8* %13, i64 %197
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i16
  %208 = add nsw i64 %197, 1
  %209 = getelementptr inbounds i8, i8* %13, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i16
  %212 = add nuw nsw i16 %204, %200
  %213 = add nuw nsw i16 %212, %207
  %214 = add nuw nsw i16 %213, %211
  %215 = shl nuw nsw i16 %214, 1
  %216 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %12, i64 %190
  store i16 %215, i16* %216, align 2
  %217 = zext i16 %215 to i32
  %218 = add nsw i32 %191, %217
  %219 = add nuw nsw i64 %190, 1
  %220 = icmp eq i64 %219, 16
  br i1 %220, label %182, label %189
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi32ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = insertelement <8 x i32> undef, i32 %3, i32 0
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> zeroinitializer
  %9 = insertelement <8 x i32> undef, i32 %6, i32 0
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %11

11:                                               ; preds = %60, %4
  %12 = phi i64 [ 0, %4 ], [ %62, %60 ]
  %13 = phi i8* [ %0, %4 ], [ %61, %60 ]
  %14 = mul i64 %12, %1
  %15 = getelementptr [32 x i16], [32 x i16]* %2, i64 %12, i64 16
  %16 = bitcast i16* %15 to i8*
  %17 = getelementptr [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %18 = bitcast i16* %17 to i8*
  %19 = add i64 %14, 16
  %20 = getelementptr i8, i8* %0, i64 %19
  %21 = getelementptr i8, i8* %0, i64 %14
  %22 = icmp ult i8* %21, %16
  %23 = icmp ugt i8* %20, %18
  %24 = and i1 %22, %23
  br i1 %24, label %64, label %25

25:                                               ; preds = %11
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !435
  %29 = sext <8 x i16> %28 to <8 x i32>
  %30 = mul nsw <8 x i32> %8, %29
  %31 = ashr <8 x i32> %30, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %32 = add <8 x i32> %30, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %33 = add <8 x i32> %32, %31
  %34 = ashr <8 x i32> %33, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %35 = add nsw <8 x i32> %34, %10
  %36 = icmp slt <8 x i32> %35, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %37 = select <8 x i1> %36, <8 x i32> %35, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %38 = icmp sgt <8 x i32> %37, zeroinitializer
  %39 = select <8 x i1> %38, <8 x i32> %37, <8 x i32> zeroinitializer
  %40 = trunc <8 x i32> %39 to <8 x i8>
  %41 = bitcast i8* %13 to <8 x i8>*
  store <8 x i8> %40, <8 x i8>* %41, align 1, !alias.scope !438, !noalias !435
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 8
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2, !alias.scope !435
  %45 = sext <8 x i16> %44 to <8 x i32>
  %46 = mul nsw <8 x i32> %8, %45
  %47 = ashr <8 x i32> %46, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %48 = add <8 x i32> %46, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %49 = add <8 x i32> %48, %47
  %50 = ashr <8 x i32> %49, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %51 = add nsw <8 x i32> %50, %10
  %52 = icmp slt <8 x i32> %51, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %53 = select <8 x i1> %52, <8 x i32> %51, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %54 = icmp sgt <8 x i32> %53, zeroinitializer
  %55 = select <8 x i1> %54, <8 x i32> %53, <8 x i32> zeroinitializer
  %56 = trunc <8 x i32> %55 to <8 x i8>
  %57 = getelementptr inbounds i8, i8* %13, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  store <8 x i8> %56, <8 x i8>* %58, align 1, !alias.scope !438, !noalias !435
  br label %60

59:                                               ; preds = %60
  ret void

60:                                               ; preds = %64, %25
  %61 = getelementptr inbounds i8, i8* %13, i64 %1
  %62 = add nuw nsw i64 %12, 1
  %63 = icmp eq i64 %62, 32
  br i1 %63, label %59, label %11

64:                                               ; preds = %11, %64
  %65 = phi i64 [ %81, %64 ], [ 0, %11 ]
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = mul nsw i32 %68, %3
  %70 = ashr i32 %69, 31
  %71 = add i32 %69, 32
  %72 = add i32 %71, %70
  %73 = ashr i32 %72, 6
  %74 = add nsw i32 %73, %6
  %75 = icmp slt i32 %74, 255
  %76 = select i1 %75, i32 %74, i32 255
  %77 = icmp sgt i32 %76, 0
  %78 = select i1 %77, i32 %76, i32 0
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %13, i64 %65
  store i8 %79, i8* %80, align 1
  %81 = add nuw nsw i64 %65, 1
  %82 = icmp eq i64 %81, 16
  br i1 %82, label %60, label %64, !llvm.loop !440
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %22, %5
  %11 = phi i64 [ 0, %5 ], [ %26, %22 ]
  %12 = phi i8* [ %3, %5 ], [ %25, %22 ]
  %13 = phi i32 [ 0, %5 ], [ %53, %22 ]
  br label %28

14:                                               ; preds = %22
  %15 = add nsw i32 %53, 256
  %16 = lshr i32 %15, 9
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = insertelement <8 x i16> undef, i16 %17, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %56

22:                                               ; preds = %28
  %23 = icmp slt i64 %11, %9
  %24 = getelementptr inbounds i8, i8* %12, i64 %4
  %25 = select i1 %23, i8* %24, i8* %12
  %26 = add nuw nsw i64 %11, 1
  %27 = icmp eq i64 %26, 32
  br i1 %27, label %14, label %10

28:                                               ; preds = %28, %10
  %29 = phi i64 [ 0, %10 ], [ %54, %28 ]
  %30 = phi i32 [ %13, %10 ], [ %53, %28 ]
  %31 = icmp sgt i64 %29, %8
  %32 = trunc i64 %29 to i32
  %33 = select i1 %31, i32 %6, i32 %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %12, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i16
  %38 = shl nuw nsw i16 %37, 3
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %29
  store i16 %38, i16* %39, align 2
  %40 = zext i16 %38 to i32
  %41 = add nsw i32 %30, %40
  %42 = or i64 %29, 1
  %43 = icmp slt i64 %29, %8
  %44 = trunc i64 %42 to i32
  %45 = select i1 %43, i32 %44, i32 %6
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %12, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = shl nuw nsw i16 %49, 3
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %42
  store i16 %50, i16* %51, align 2
  %52 = zext i16 %50 to i32
  %53 = add nsw i32 %41, %52
  %54 = add nuw nsw i64 %29, 2
  %55 = icmp eq i64 %54, 16
  br i1 %55, label %22, label %28

56:                                               ; preds = %56, %14
  %57 = phi i64 [ 0, %14 ], [ %79, %56 ]
  %58 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %57, i64 0
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2
  %61 = sub <8 x i16> %60, %19
  %62 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %57, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = sub <8 x i16> %65, %21
  %67 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %67, align 2
  %68 = or i64 %57, 1
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %68, i64 0
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = sub <8 x i16> %71, %19
  %73 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %73, align 2
  %74 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %68, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2
  %77 = sub <8 x i16> %76, %21
  %78 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %78, align 2
  %79 = add nuw nsw i64 %57, 2
  %80 = icmp eq i64 %79, 32
  br i1 %80, label %81, label %56

81:                                               ; preds = %56
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %22, %5
  %11 = phi i64 [ 0, %5 ], [ %26, %22 ]
  %12 = phi i8* [ %3, %5 ], [ %25, %22 ]
  %13 = phi i32 [ 0, %5 ], [ %47, %22 ]
  br label %28

14:                                               ; preds = %22
  %15 = add nsw i32 %47, 256
  %16 = lshr i32 %15, 9
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = insertelement <8 x i16> undef, i16 %17, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %50

22:                                               ; preds = %28
  %23 = icmp slt i64 %11, %9
  %24 = getelementptr inbounds i8, i8* %12, i64 %4
  %25 = select i1 %23, i8* %24, i8* %12
  %26 = add nuw nsw i64 %11, 1
  %27 = icmp eq i64 %26, 32
  br i1 %27, label %14, label %10

28:                                               ; preds = %28, %10
  %29 = phi i64 [ 0, %10 ], [ %48, %28 ]
  %30 = phi i32 [ %13, %10 ], [ %47, %28 ]
  %31 = shl nuw i64 %29, 1
  %32 = icmp sgt i64 %31, %8
  %33 = trunc i64 %31 to i32
  %34 = select i1 %32, i32 %6, i32 %33
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %12, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i16
  %39 = add nsw i64 %35, 1
  %40 = getelementptr inbounds i8, i8* %12, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i16
  %43 = add nuw nsw i16 %42, %38
  %44 = shl nuw nsw i16 %43, 2
  %45 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %29
  store i16 %44, i16* %45, align 2
  %46 = zext i16 %44 to i32
  %47 = add nsw i32 %30, %46
  %48 = add nuw nsw i64 %29, 1
  %49 = icmp eq i64 %48, 16
  br i1 %49, label %22, label %28

50:                                               ; preds = %50, %14
  %51 = phi i64 [ 0, %14 ], [ %73, %50 ]
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %51, i64 0
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2
  %55 = sub <8 x i16> %54, %19
  %56 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %51, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2
  %60 = sub <8 x i16> %59, %21
  %61 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %61, align 2
  %62 = or i64 %51, 1
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %62, i64 0
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = sub <8 x i16> %65, %19
  %67 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %62, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2
  %71 = sub <8 x i16> %70, %21
  %72 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %72, align 2
  %73 = add nuw nsw i64 %51, 2
  %74 = icmp eq i64 %73, 32
  br i1 %74, label %75, label %50

75:                                               ; preds = %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = sext i32 %6 to i64
  %10 = sext i32 %7 to i64
  br label %11

11:                                               ; preds = %23, %5
  %12 = phi i64 [ 0, %5 ], [ %28, %23 ]
  %13 = phi i8* [ %3, %5 ], [ %27, %23 ]
  %14 = phi i32 [ 0, %5 ], [ %59, %23 ]
  br label %30

15:                                               ; preds = %23
  %16 = add nsw i32 %59, 256
  %17 = lshr i32 %16, 9
  %18 = trunc i32 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = insertelement <8 x i16> undef, i16 %18, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %62

23:                                               ; preds = %30
  %24 = shl nuw i64 %12, 1
  %25 = icmp slt i64 %24, %10
  %26 = getelementptr inbounds i8, i8* %13, i64 %8
  %27 = select i1 %25, i8* %26, i8* %13
  %28 = add nuw nsw i64 %12, 1
  %29 = icmp eq i64 %28, 32
  br i1 %29, label %15, label %11

30:                                               ; preds = %30, %11
  %31 = phi i64 [ 0, %11 ], [ %60, %30 ]
  %32 = phi i32 [ %14, %11 ], [ %59, %30 ]
  %33 = shl nuw i64 %31, 1
  %34 = icmp sgt i64 %33, %9
  %35 = trunc i64 %33 to i32
  %36 = select i1 %34, i32 %6, i32 %35
  %37 = sext i32 %36 to i64
  %38 = add nsw i64 %37, %4
  %39 = getelementptr inbounds i8, i8* %13, i64 %37
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i16
  %42 = add nsw i64 %37, 1
  %43 = getelementptr inbounds i8, i8* %13, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i16
  %46 = getelementptr inbounds i8, i8* %13, i64 %38
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i16
  %49 = add nsw i64 %38, 1
  %50 = getelementptr inbounds i8, i8* %13, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i16
  %53 = add nuw nsw i16 %45, %41
  %54 = add nuw nsw i16 %53, %48
  %55 = add nuw nsw i16 %54, %52
  %56 = shl nuw nsw i16 %55, 1
  %57 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %12, i64 %31
  store i16 %56, i16* %57, align 2
  %58 = zext i16 %56 to i32
  %59 = add nsw i32 %32, %58
  %60 = add nuw nsw i64 %31, 1
  %61 = icmp eq i64 %60, 16
  br i1 %61, label %23, label %30

62:                                               ; preds = %62, %15
  %63 = phi i64 [ 0, %15 ], [ %85, %62 ]
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %63, i64 0
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = sub <8 x i16> %66, %20
  %68 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 2
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %63, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = sub <8 x i16> %71, %22
  %73 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %73, align 2
  %74 = or i64 %63, 1
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %74, i64 0
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2
  %78 = sub <8 x i16> %77, %20
  %79 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %79, align 2
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %74, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2
  %83 = sub <8 x i16> %82, %22
  %84 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %84, align 2
  %85 = add nuw nsw i64 %63, 2
  %86 = icmp eq i64 %85, 32
  br i1 %86, label %87, label %62

87:                                               ; preds = %62
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi8ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = insertelement <8 x i32> undef, i32 %3, i32 0
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> zeroinitializer
  %9 = insertelement <8 x i32> undef, i32 %6, i32 0
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %11

11:                                               ; preds = %95, %4
  %12 = phi i64 [ 0, %4 ], [ %97, %95 ]
  %13 = phi i8* [ %0, %4 ], [ %96, %95 ]
  %14 = mul i64 %12, %1
  %15 = add nuw i64 %12, 1
  %16 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %17 = bitcast i16* %16 to i8*
  %18 = getelementptr [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %19 = bitcast i16* %18 to i8*
  %20 = add i64 %14, 32
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = getelementptr i8, i8* %0, i64 %14
  %23 = icmp ult i8* %22, %17
  %24 = icmp ugt i8* %21, %19
  %25 = and i1 %23, %24
  br i1 %25, label %99, label %26

26:                                               ; preds = %11
  %27 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 2, !alias.scope !441
  %30 = sext <8 x i16> %29 to <8 x i32>
  %31 = mul nsw <8 x i32> %8, %30
  %32 = ashr <8 x i32> %31, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %33 = add <8 x i32> %31, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %34 = add <8 x i32> %33, %32
  %35 = ashr <8 x i32> %34, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %36 = add nsw <8 x i32> %35, %10
  %37 = icmp slt <8 x i32> %36, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %38 = select <8 x i1> %37, <8 x i32> %36, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %39 = icmp sgt <8 x i32> %38, zeroinitializer
  %40 = select <8 x i1> %39, <8 x i32> %38, <8 x i32> zeroinitializer
  %41 = trunc <8 x i32> %40 to <8 x i8>
  %42 = bitcast i8* %13 to <8 x i8>*
  store <8 x i8> %41, <8 x i8>* %42, align 1, !alias.scope !444, !noalias !441
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 8
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !441
  %46 = sext <8 x i16> %45 to <8 x i32>
  %47 = mul nsw <8 x i32> %8, %46
  %48 = ashr <8 x i32> %47, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %49 = add <8 x i32> %47, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = add <8 x i32> %49, %48
  %51 = ashr <8 x i32> %50, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %52 = add nsw <8 x i32> %51, %10
  %53 = icmp slt <8 x i32> %52, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %54 = select <8 x i1> %53, <8 x i32> %52, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %55 = icmp sgt <8 x i32> %54, zeroinitializer
  %56 = select <8 x i1> %55, <8 x i32> %54, <8 x i32> zeroinitializer
  %57 = trunc <8 x i32> %56 to <8 x i8>
  %58 = getelementptr inbounds i8, i8* %13, i64 8
  %59 = bitcast i8* %58 to <8 x i8>*
  store <8 x i8> %57, <8 x i8>* %59, align 1, !alias.scope !444, !noalias !441
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 16
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !441
  %63 = sext <8 x i16> %62 to <8 x i32>
  %64 = mul nsw <8 x i32> %8, %63
  %65 = ashr <8 x i32> %64, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %66 = add <8 x i32> %64, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %67 = add <8 x i32> %66, %65
  %68 = ashr <8 x i32> %67, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %69 = add nsw <8 x i32> %68, %10
  %70 = icmp slt <8 x i32> %69, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %71 = select <8 x i1> %70, <8 x i32> %69, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %72 = icmp sgt <8 x i32> %71, zeroinitializer
  %73 = select <8 x i1> %72, <8 x i32> %71, <8 x i32> zeroinitializer
  %74 = trunc <8 x i32> %73 to <8 x i8>
  %75 = getelementptr inbounds i8, i8* %13, i64 16
  %76 = bitcast i8* %75 to <8 x i8>*
  store <8 x i8> %74, <8 x i8>* %76, align 1, !alias.scope !444, !noalias !441
  %77 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 24
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !441
  %80 = sext <8 x i16> %79 to <8 x i32>
  %81 = mul nsw <8 x i32> %8, %80
  %82 = ashr <8 x i32> %81, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %83 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %84 = add <8 x i32> %83, %82
  %85 = ashr <8 x i32> %84, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %86 = add nsw <8 x i32> %85, %10
  %87 = icmp slt <8 x i32> %86, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %88 = select <8 x i1> %87, <8 x i32> %86, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %89 = icmp sgt <8 x i32> %88, zeroinitializer
  %90 = select <8 x i1> %89, <8 x i32> %88, <8 x i32> zeroinitializer
  %91 = trunc <8 x i32> %90 to <8 x i8>
  %92 = getelementptr inbounds i8, i8* %13, i64 24
  %93 = bitcast i8* %92 to <8 x i8>*
  store <8 x i8> %91, <8 x i8>* %93, align 1, !alias.scope !444, !noalias !441
  br label %95

94:                                               ; preds = %95
  ret void

95:                                               ; preds = %99, %26
  %96 = getelementptr inbounds i8, i8* %13, i64 %1
  %97 = add nuw nsw i64 %12, 1
  %98 = icmp eq i64 %97, 8
  br i1 %98, label %94, label %11

99:                                               ; preds = %11, %99
  %100 = phi i64 [ %116, %99 ], [ 0, %11 ]
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 %100
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = mul nsw i32 %103, %3
  %105 = ashr i32 %104, 31
  %106 = add i32 %104, 32
  %107 = add i32 %106, %105
  %108 = ashr i32 %107, 6
  %109 = add nsw i32 %108, %6
  %110 = icmp slt i32 %109, 255
  %111 = select i1 %110, i32 %109, i32 255
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %13, i64 %100
  store i8 %114, i8* %115, align 1
  %116 = add nuw nsw i64 %100, 1
  %117 = icmp eq i64 %116, 32
  br i1 %117, label %95, label %99, !llvm.loop !446
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  br label %13

9:                                                ; preds = %13
  %10 = icmp sgt i32 %7, 0
  %11 = getelementptr inbounds i8, i8* %3, i64 %4
  %12 = select i1 %10, i8* %11, i8* %3
  br label %41

13:                                               ; preds = %13, %5
  %14 = phi i64 [ 0, %5 ], [ %39, %13 ]
  %15 = phi i32 [ 0, %5 ], [ %38, %13 ]
  %16 = icmp sgt i64 %14, %8
  %17 = trunc i64 %14 to i32
  %18 = select i1 %16, i32 %6, i32 %17
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %3, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = shl nuw nsw i16 %22, 3
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %14
  store i16 %23, i16* %24, align 2
  %25 = zext i16 %23 to i32
  %26 = add nuw nsw i32 %15, %25
  %27 = or i64 %14, 1
  %28 = icmp slt i64 %14, %8
  %29 = trunc i64 %27 to i32
  %30 = select i1 %28, i32 %29, i32 %6
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %3, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = shl nuw nsw i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %27
  store i16 %35, i16* %36, align 2
  %37 = zext i16 %35 to i32
  %38 = add nuw nsw i32 %26, %37
  %39 = add nuw nsw i64 %14, 2
  %40 = icmp eq i64 %39, 32
  br i1 %40, label %9, label %13

41:                                               ; preds = %41, %9
  %42 = phi i64 [ 0, %9 ], [ %67, %41 ]
  %43 = phi i32 [ %38, %9 ], [ %66, %41 ]
  %44 = icmp sgt i64 %42, %8
  %45 = trunc i64 %42 to i32
  %46 = select i1 %44, i32 %6, i32 %45
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %12, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = shl nuw nsw i16 %50, 3
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %42
  store i16 %51, i16* %52, align 2
  %53 = zext i16 %51 to i32
  %54 = add nsw i32 %43, %53
  %55 = or i64 %42, 1
  %56 = icmp slt i64 %42, %8
  %57 = trunc i64 %55 to i32
  %58 = select i1 %56, i32 %57, i32 %6
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %12, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  %63 = shl nuw nsw i16 %62, 3
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %55
  store i16 %63, i16* %64, align 2
  %65 = zext i16 %63 to i32
  %66 = add nsw i32 %54, %65
  %67 = add nuw nsw i64 %42, 2
  %68 = icmp eq i64 %67, 32
  br i1 %68, label %69, label %41

69:                                               ; preds = %41
  %70 = icmp sgt i32 %7, 1
  %71 = getelementptr inbounds i8, i8* %12, i64 %4
  %72 = select i1 %70, i8* %71, i8* %12
  br label %73

73:                                               ; preds = %73, %69
  %74 = phi i64 [ 0, %69 ], [ %99, %73 ]
  %75 = phi i32 [ %66, %69 ], [ %98, %73 ]
  %76 = icmp sgt i64 %74, %8
  %77 = trunc i64 %74 to i32
  %78 = select i1 %76, i32 %6, i32 %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %72, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i16
  %83 = shl nuw nsw i16 %82, 3
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %74
  store i16 %83, i16* %84, align 2
  %85 = zext i16 %83 to i32
  %86 = add nsw i32 %75, %85
  %87 = or i64 %74, 1
  %88 = icmp slt i64 %74, %8
  %89 = trunc i64 %87 to i32
  %90 = select i1 %88, i32 %89, i32 %6
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %72, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = shl nuw nsw i16 %94, 3
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %87
  store i16 %95, i16* %96, align 2
  %97 = zext i16 %95 to i32
  %98 = add nsw i32 %86, %97
  %99 = add nuw nsw i64 %74, 2
  %100 = icmp eq i64 %99, 32
  br i1 %100, label %101, label %73

101:                                              ; preds = %73
  %102 = icmp sgt i32 %7, 2
  %103 = getelementptr inbounds i8, i8* %72, i64 %4
  %104 = select i1 %102, i8* %103, i8* %72
  br label %105

105:                                              ; preds = %105, %101
  %106 = phi i64 [ 0, %101 ], [ %131, %105 ]
  %107 = phi i32 [ %98, %101 ], [ %130, %105 ]
  %108 = icmp sgt i64 %106, %8
  %109 = trunc i64 %106 to i32
  %110 = select i1 %108, i32 %6, i32 %109
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %104, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i16
  %115 = shl nuw nsw i16 %114, 3
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %106
  store i16 %115, i16* %116, align 2
  %117 = zext i16 %115 to i32
  %118 = add nsw i32 %107, %117
  %119 = or i64 %106, 1
  %120 = icmp slt i64 %106, %8
  %121 = trunc i64 %119 to i32
  %122 = select i1 %120, i32 %121, i32 %6
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %104, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i16
  %127 = shl nuw nsw i16 %126, 3
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %119
  store i16 %127, i16* %128, align 2
  %129 = zext i16 %127 to i32
  %130 = add nsw i32 %118, %129
  %131 = add nuw nsw i64 %106, 2
  %132 = icmp eq i64 %131, 32
  br i1 %132, label %133, label %105

133:                                              ; preds = %105
  %134 = icmp sgt i32 %7, 3
  %135 = getelementptr inbounds i8, i8* %104, i64 %4
  %136 = select i1 %134, i8* %135, i8* %104
  br label %137

137:                                              ; preds = %137, %133
  %138 = phi i64 [ 0, %133 ], [ %163, %137 ]
  %139 = phi i32 [ %130, %133 ], [ %162, %137 ]
  %140 = icmp sgt i64 %138, %8
  %141 = trunc i64 %138 to i32
  %142 = select i1 %140, i32 %6, i32 %141
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %136, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i16
  %147 = shl nuw nsw i16 %146, 3
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 %138
  store i16 %147, i16* %148, align 2
  %149 = zext i16 %147 to i32
  %150 = add nsw i32 %139, %149
  %151 = or i64 %138, 1
  %152 = icmp slt i64 %138, %8
  %153 = trunc i64 %151 to i32
  %154 = select i1 %152, i32 %153, i32 %6
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %136, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i16
  %159 = shl nuw nsw i16 %158, 3
  %160 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 %151
  store i16 %159, i16* %160, align 2
  %161 = zext i16 %159 to i32
  %162 = add nsw i32 %150, %161
  %163 = add nuw nsw i64 %138, 2
  %164 = icmp eq i64 %163, 32
  br i1 %164, label %165, label %137

165:                                              ; preds = %137
  %166 = icmp sgt i32 %7, 4
  %167 = getelementptr inbounds i8, i8* %136, i64 %4
  %168 = select i1 %166, i8* %167, i8* %136
  br label %169

169:                                              ; preds = %169, %165
  %170 = phi i64 [ 0, %165 ], [ %195, %169 ]
  %171 = phi i32 [ %162, %165 ], [ %194, %169 ]
  %172 = icmp sgt i64 %170, %8
  %173 = trunc i64 %170 to i32
  %174 = select i1 %172, i32 %6, i32 %173
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %168, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i16
  %179 = shl nuw nsw i16 %178, 3
  %180 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 %170
  store i16 %179, i16* %180, align 2
  %181 = zext i16 %179 to i32
  %182 = add nsw i32 %171, %181
  %183 = or i64 %170, 1
  %184 = icmp slt i64 %170, %8
  %185 = trunc i64 %183 to i32
  %186 = select i1 %184, i32 %185, i32 %6
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %168, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i16
  %191 = shl nuw nsw i16 %190, 3
  %192 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 %183
  store i16 %191, i16* %192, align 2
  %193 = zext i16 %191 to i32
  %194 = add nsw i32 %182, %193
  %195 = add nuw nsw i64 %170, 2
  %196 = icmp eq i64 %195, 32
  br i1 %196, label %197, label %169

197:                                              ; preds = %169
  %198 = icmp sgt i32 %7, 5
  %199 = getelementptr inbounds i8, i8* %168, i64 %4
  %200 = select i1 %198, i8* %199, i8* %168
  br label %201

201:                                              ; preds = %201, %197
  %202 = phi i64 [ 0, %197 ], [ %227, %201 ]
  %203 = phi i32 [ %194, %197 ], [ %226, %201 ]
  %204 = icmp sgt i64 %202, %8
  %205 = trunc i64 %202 to i32
  %206 = select i1 %204, i32 %6, i32 %205
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i8, i8* %200, i64 %207
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i16
  %211 = shl nuw nsw i16 %210, 3
  %212 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 %202
  store i16 %211, i16* %212, align 2
  %213 = zext i16 %211 to i32
  %214 = add nsw i32 %203, %213
  %215 = or i64 %202, 1
  %216 = icmp slt i64 %202, %8
  %217 = trunc i64 %215 to i32
  %218 = select i1 %216, i32 %217, i32 %6
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i8, i8* %200, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i16
  %223 = shl nuw nsw i16 %222, 3
  %224 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 %215
  store i16 %223, i16* %224, align 2
  %225 = zext i16 %223 to i32
  %226 = add nsw i32 %214, %225
  %227 = add nuw nsw i64 %202, 2
  %228 = icmp eq i64 %227, 32
  br i1 %228, label %229, label %201

229:                                              ; preds = %201
  %230 = icmp sgt i32 %7, 6
  %231 = getelementptr inbounds i8, i8* %200, i64 %4
  %232 = select i1 %230, i8* %231, i8* %200
  br label %233

233:                                              ; preds = %233, %229
  %234 = phi i64 [ 0, %229 ], [ %259, %233 ]
  %235 = phi i32 [ %226, %229 ], [ %258, %233 ]
  %236 = icmp sgt i64 %234, %8
  %237 = trunc i64 %234 to i32
  %238 = select i1 %236, i32 %6, i32 %237
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %232, i64 %239
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i16
  %243 = shl nuw nsw i16 %242, 3
  %244 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 %234
  store i16 %243, i16* %244, align 2
  %245 = zext i16 %243 to i32
  %246 = add nsw i32 %235, %245
  %247 = or i64 %234, 1
  %248 = icmp slt i64 %234, %8
  %249 = trunc i64 %247 to i32
  %250 = select i1 %248, i32 %249, i32 %6
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i8, i8* %232, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i16
  %255 = shl nuw nsw i16 %254, 3
  %256 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 %247
  store i16 %255, i16* %256, align 2
  %257 = zext i16 %255 to i32
  %258 = add nsw i32 %246, %257
  %259 = add nuw nsw i64 %234, 2
  %260 = icmp eq i64 %259, 32
  br i1 %260, label %261, label %233

261:                                              ; preds = %233
  %262 = add nsw i32 %258, 128
  %263 = lshr i32 %262, 8
  %264 = trunc i32 %263 to i16
  %265 = insertelement <8 x i16> undef, i16 %264, i32 0
  %266 = shufflevector <8 x i16> %265, <8 x i16> undef, <8 x i32> zeroinitializer
  %267 = bitcast [32 x i16]* %0 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 2
  %269 = sub <8 x i16> %268, %266
  %270 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %270, align 2
  %271 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2
  %274 = sub <8 x i16> %273, %266
  %275 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %275, align 2
  %276 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 2
  %279 = sub <8 x i16> %278, %266
  %280 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %279, <8 x i16>* %280, align 2
  %281 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2
  %284 = sub <8 x i16> %283, %266
  %285 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %284, <8 x i16>* %285, align 2
  %286 = insertelement <8 x i16> undef, i16 %264, i32 0
  %287 = shufflevector <8 x i16> %286, <8 x i16> undef, <8 x i32> zeroinitializer
  %288 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %289 = bitcast i16* %288 to <8 x i16>*
  %290 = load <8 x i16>, <8 x i16>* %289, align 2
  %291 = sub <8 x i16> %290, %287
  %292 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %291, <8 x i16>* %292, align 2
  %293 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 2
  %296 = sub <8 x i16> %295, %287
  %297 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %297, align 2
  %298 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 16
  %299 = bitcast i16* %298 to <8 x i16>*
  %300 = load <8 x i16>, <8 x i16>* %299, align 2
  %301 = sub <8 x i16> %300, %287
  %302 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %301, <8 x i16>* %302, align 2
  %303 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 24
  %304 = bitcast i16* %303 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2
  %306 = sub <8 x i16> %305, %287
  %307 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %306, <8 x i16>* %307, align 2
  %308 = insertelement <8 x i16> undef, i16 %264, i32 0
  %309 = shufflevector <8 x i16> %308, <8 x i16> undef, <8 x i32> zeroinitializer
  %310 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %311 = bitcast i16* %310 to <8 x i16>*
  %312 = load <8 x i16>, <8 x i16>* %311, align 2
  %313 = sub <8 x i16> %312, %309
  %314 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %314, align 2
  %315 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 2
  %318 = sub <8 x i16> %317, %309
  %319 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %319, align 2
  %320 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 16
  %321 = bitcast i16* %320 to <8 x i16>*
  %322 = load <8 x i16>, <8 x i16>* %321, align 2
  %323 = sub <8 x i16> %322, %309
  %324 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %324, align 2
  %325 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 24
  %326 = bitcast i16* %325 to <8 x i16>*
  %327 = load <8 x i16>, <8 x i16>* %326, align 2
  %328 = sub <8 x i16> %327, %309
  %329 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %329, align 2
  %330 = insertelement <8 x i16> undef, i16 %264, i32 0
  %331 = shufflevector <8 x i16> %330, <8 x i16> undef, <8 x i32> zeroinitializer
  %332 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2
  %335 = sub <8 x i16> %334, %331
  %336 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %336, align 2
  %337 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 2
  %340 = sub <8 x i16> %339, %331
  %341 = bitcast i16* %337 to <8 x i16>*
  store <8 x i16> %340, <8 x i16>* %341, align 2
  %342 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 16
  %343 = bitcast i16* %342 to <8 x i16>*
  %344 = load <8 x i16>, <8 x i16>* %343, align 2
  %345 = sub <8 x i16> %344, %331
  %346 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %346, align 2
  %347 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 24
  %348 = bitcast i16* %347 to <8 x i16>*
  %349 = load <8 x i16>, <8 x i16>* %348, align 2
  %350 = sub <8 x i16> %349, %331
  %351 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %350, <8 x i16>* %351, align 2
  %352 = insertelement <8 x i16> undef, i16 %264, i32 0
  %353 = shufflevector <8 x i16> %352, <8 x i16> undef, <8 x i32> zeroinitializer
  %354 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2
  %357 = sub <8 x i16> %356, %353
  %358 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %357, <8 x i16>* %358, align 2
  %359 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %360 = bitcast i16* %359 to <8 x i16>*
  %361 = load <8 x i16>, <8 x i16>* %360, align 2
  %362 = sub <8 x i16> %361, %353
  %363 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %362, <8 x i16>* %363, align 2
  %364 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 16
  %365 = bitcast i16* %364 to <8 x i16>*
  %366 = load <8 x i16>, <8 x i16>* %365, align 2
  %367 = sub <8 x i16> %366, %353
  %368 = bitcast i16* %364 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %368, align 2
  %369 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 24
  %370 = bitcast i16* %369 to <8 x i16>*
  %371 = load <8 x i16>, <8 x i16>* %370, align 2
  %372 = sub <8 x i16> %371, %353
  %373 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %372, <8 x i16>* %373, align 2
  %374 = insertelement <8 x i16> undef, i16 %264, i32 0
  %375 = shufflevector <8 x i16> %374, <8 x i16> undef, <8 x i32> zeroinitializer
  %376 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %377 = bitcast i16* %376 to <8 x i16>*
  %378 = load <8 x i16>, <8 x i16>* %377, align 2
  %379 = sub <8 x i16> %378, %375
  %380 = bitcast i16* %376 to <8 x i16>*
  store <8 x i16> %379, <8 x i16>* %380, align 2
  %381 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %382 = bitcast i16* %381 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2
  %384 = sub <8 x i16> %383, %375
  %385 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %385, align 2
  %386 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 16
  %387 = bitcast i16* %386 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2
  %389 = sub <8 x i16> %388, %375
  %390 = bitcast i16* %386 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %390, align 2
  %391 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 24
  %392 = bitcast i16* %391 to <8 x i16>*
  %393 = load <8 x i16>, <8 x i16>* %392, align 2
  %394 = sub <8 x i16> %393, %375
  %395 = bitcast i16* %391 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %395, align 2
  %396 = insertelement <8 x i16> undef, i16 %264, i32 0
  %397 = shufflevector <8 x i16> %396, <8 x i16> undef, <8 x i32> zeroinitializer
  %398 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %399 = bitcast i16* %398 to <8 x i16>*
  %400 = load <8 x i16>, <8 x i16>* %399, align 2
  %401 = sub <8 x i16> %400, %397
  %402 = bitcast i16* %398 to <8 x i16>*
  store <8 x i16> %401, <8 x i16>* %402, align 2
  %403 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %404 = bitcast i16* %403 to <8 x i16>*
  %405 = load <8 x i16>, <8 x i16>* %404, align 2
  %406 = sub <8 x i16> %405, %397
  %407 = bitcast i16* %403 to <8 x i16>*
  store <8 x i16> %406, <8 x i16>* %407, align 2
  %408 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 16
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2
  %411 = sub <8 x i16> %410, %397
  %412 = bitcast i16* %408 to <8 x i16>*
  store <8 x i16> %411, <8 x i16>* %412, align 2
  %413 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 24
  %414 = bitcast i16* %413 to <8 x i16>*
  %415 = load <8 x i16>, <8 x i16>* %414, align 2
  %416 = sub <8 x i16> %415, %397
  %417 = bitcast i16* %413 to <8 x i16>*
  store <8 x i16> %416, <8 x i16>* %417, align 2
  %418 = insertelement <8 x i16> undef, i16 %264, i32 0
  %419 = shufflevector <8 x i16> %418, <8 x i16> undef, <8 x i32> zeroinitializer
  %420 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %421 = bitcast i16* %420 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 2
  %423 = sub <8 x i16> %422, %419
  %424 = bitcast i16* %420 to <8 x i16>*
  store <8 x i16> %423, <8 x i16>* %424, align 2
  %425 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %426 = bitcast i16* %425 to <8 x i16>*
  %427 = load <8 x i16>, <8 x i16>* %426, align 2
  %428 = sub <8 x i16> %427, %419
  %429 = bitcast i16* %425 to <8 x i16>*
  store <8 x i16> %428, <8 x i16>* %429, align 2
  %430 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 16
  %431 = bitcast i16* %430 to <8 x i16>*
  %432 = load <8 x i16>, <8 x i16>* %431, align 2
  %433 = sub <8 x i16> %432, %419
  %434 = bitcast i16* %430 to <8 x i16>*
  store <8 x i16> %433, <8 x i16>* %434, align 2
  %435 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 24
  %436 = bitcast i16* %435 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2
  %438 = sub <8 x i16> %437, %419
  %439 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %439, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %193, %5
  %11 = phi i64 [ 0, %5 ], [ %197, %193 ]
  %12 = phi i8* [ %3, %5 ], [ %196, %193 ]
  %13 = phi i32 [ 0, %5 ], [ %218, %193 ]
  br label %199

14:                                               ; preds = %193
  %15 = add nsw i32 %218, 128
  %16 = lshr i32 %15, 8
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = bitcast [32 x i16]* %0 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 2
  %22 = sub <8 x i16> %21, %19
  %23 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %22, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %25 = bitcast i16* %24 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 2
  %27 = sub <8 x i16> %26, %19
  %28 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %27, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2
  %32 = sub <8 x i16> %31, %19
  %33 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> %32, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 2
  %37 = sub <8 x i16> %36, %19
  %38 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 2
  %39 = insertelement <8 x i16> undef, i16 %17, i32 0
  %40 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> zeroinitializer
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %42 = bitcast i16* %41 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2
  %44 = sub <8 x i16> %43, %40
  %45 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2
  %49 = sub <8 x i16> %48, %40
  %50 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 16
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2
  %54 = sub <8 x i16> %53, %40
  %55 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 24
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = sub <8 x i16> %58, %40
  %60 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2
  %61 = insertelement <8 x i16> undef, i16 %17, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = sub <8 x i16> %65, %62
  %67 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2
  %71 = sub <8 x i16> %70, %62
  %72 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %72, align 2
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 16
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2
  %76 = sub <8 x i16> %75, %62
  %77 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 2
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 24
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2
  %81 = sub <8 x i16> %80, %62
  %82 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %82, align 2
  %83 = insertelement <8 x i16> undef, i16 %17, i32 0
  %84 = shufflevector <8 x i16> %83, <8 x i16> undef, <8 x i32> zeroinitializer
  %85 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 2
  %88 = sub <8 x i16> %87, %84
  %89 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %89, align 2
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2
  %93 = sub <8 x i16> %92, %84
  %94 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 16
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2
  %98 = sub <8 x i16> %97, %84
  %99 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %99, align 2
  %100 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 24
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2
  %103 = sub <8 x i16> %102, %84
  %104 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %104, align 2
  %105 = insertelement <8 x i16> undef, i16 %17, i32 0
  %106 = shufflevector <8 x i16> %105, <8 x i16> undef, <8 x i32> zeroinitializer
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2
  %110 = sub <8 x i16> %109, %106
  %111 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = sub <8 x i16> %114, %106
  %116 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 16
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2
  %120 = sub <8 x i16> %119, %106
  %121 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 24
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2
  %125 = sub <8 x i16> %124, %106
  %126 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 2
  %127 = insertelement <8 x i16> undef, i16 %17, i32 0
  %128 = shufflevector <8 x i16> %127, <8 x i16> undef, <8 x i32> zeroinitializer
  %129 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2
  %132 = sub <8 x i16> %131, %128
  %133 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2
  %137 = sub <8 x i16> %136, %128
  %138 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 16
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2
  %142 = sub <8 x i16> %141, %128
  %143 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 24
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2
  %147 = sub <8 x i16> %146, %128
  %148 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 2
  %149 = insertelement <8 x i16> undef, i16 %17, i32 0
  %150 = shufflevector <8 x i16> %149, <8 x i16> undef, <8 x i32> zeroinitializer
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2
  %154 = sub <8 x i16> %153, %150
  %155 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2
  %156 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2
  %159 = sub <8 x i16> %158, %150
  %160 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %159, <8 x i16>* %160, align 2
  %161 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 16
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2
  %164 = sub <8 x i16> %163, %150
  %165 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %165, align 2
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 24
  %167 = bitcast i16* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 2
  %169 = sub <8 x i16> %168, %150
  %170 = bitcast i16* %166 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %170, align 2
  %171 = insertelement <8 x i16> undef, i16 %17, i32 0
  %172 = shufflevector <8 x i16> %171, <8 x i16> undef, <8 x i32> zeroinitializer
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2
  %176 = sub <8 x i16> %175, %172
  %177 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2
  %181 = sub <8 x i16> %180, %172
  %182 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 16
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 2
  %186 = sub <8 x i16> %185, %172
  %187 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2
  %188 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 24
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2
  %191 = sub <8 x i16> %190, %172
  %192 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %192, align 2
  ret void

193:                                              ; preds = %199
  %194 = icmp slt i64 %11, %9
  %195 = getelementptr inbounds i8, i8* %12, i64 %4
  %196 = select i1 %194, i8* %195, i8* %12
  %197 = add nuw nsw i64 %11, 1
  %198 = icmp eq i64 %197, 8
  br i1 %198, label %14, label %10

199:                                              ; preds = %199, %10
  %200 = phi i64 [ 0, %10 ], [ %219, %199 ]
  %201 = phi i32 [ %13, %10 ], [ %218, %199 ]
  %202 = shl nuw i64 %200, 1
  %203 = icmp sgt i64 %202, %8
  %204 = trunc i64 %202 to i32
  %205 = select i1 %203, i32 %6, i32 %204
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i8, i8* %12, i64 %206
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i16
  %210 = add nsw i64 %206, 1
  %211 = getelementptr inbounds i8, i8* %12, i64 %210
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i16
  %214 = add nuw nsw i16 %213, %209
  %215 = shl nuw nsw i16 %214, 2
  %216 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %200
  store i16 %215, i16* %216, align 2
  %217 = zext i16 %215 to i32
  %218 = add nsw i32 %201, %217
  %219 = add nuw nsw i64 %200, 1
  %220 = icmp eq i64 %219, 32
  br i1 %220, label %193, label %199
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = sext i32 %6 to i64
  %10 = sext i32 %7 to i64
  br label %11

11:                                               ; preds = %194, %5
  %12 = phi i64 [ 0, %5 ], [ %199, %194 ]
  %13 = phi i8* [ %3, %5 ], [ %198, %194 ]
  %14 = phi i32 [ 0, %5 ], [ %230, %194 ]
  br label %201

15:                                               ; preds = %194
  %16 = add nsw i32 %230, 128
  %17 = lshr i32 %16, 8
  %18 = trunc i32 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = bitcast [32 x i16]* %0 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 2
  %23 = sub <8 x i16> %22, %20
  %24 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 2
  %28 = sub <8 x i16> %27, %20
  %29 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 2
  %33 = sub <8 x i16> %32, %20
  %34 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %36 = bitcast i16* %35 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 2
  %38 = sub <8 x i16> %37, %20
  %39 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %39, align 2
  %40 = insertelement <8 x i16> undef, i16 %18, i32 0
  %41 = shufflevector <8 x i16> %40, <8 x i16> undef, <8 x i32> zeroinitializer
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2
  %45 = sub <8 x i16> %44, %41
  %46 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %46, align 2
  %47 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %48 = bitcast i16* %47 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 2
  %50 = sub <8 x i16> %49, %41
  %51 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 16
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2
  %55 = sub <8 x i16> %54, %41
  %56 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 24
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2
  %60 = sub <8 x i16> %59, %41
  %61 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %61, align 2
  %62 = insertelement <8 x i16> undef, i16 %18, i32 0
  %63 = shufflevector <8 x i16> %62, <8 x i16> undef, <8 x i32> zeroinitializer
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = sub <8 x i16> %66, %63
  %68 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 2
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = sub <8 x i16> %71, %63
  %73 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %73, align 2
  %74 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2
  %77 = sub <8 x i16> %76, %63
  %78 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 24
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2
  %82 = sub <8 x i16> %81, %63
  %83 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %83, align 2
  %84 = insertelement <8 x i16> undef, i16 %18, i32 0
  %85 = shufflevector <8 x i16> %84, <8 x i16> undef, <8 x i32> zeroinitializer
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2
  %89 = sub <8 x i16> %88, %85
  %90 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2
  %94 = sub <8 x i16> %93, %85
  %95 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 16
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2
  %99 = sub <8 x i16> %98, %85
  %100 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 24
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2
  %104 = sub <8 x i16> %103, %85
  %105 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 2
  %106 = insertelement <8 x i16> undef, i16 %18, i32 0
  %107 = shufflevector <8 x i16> %106, <8 x i16> undef, <8 x i32> zeroinitializer
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2
  %111 = sub <8 x i16> %110, %107
  %112 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2
  %116 = sub <8 x i16> %115, %107
  %117 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 16
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2
  %121 = sub <8 x i16> %120, %107
  %122 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 24
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2
  %126 = sub <8 x i16> %125, %107
  %127 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %127, align 2
  %128 = insertelement <8 x i16> undef, i16 %18, i32 0
  %129 = shufflevector <8 x i16> %128, <8 x i16> undef, <8 x i32> zeroinitializer
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2
  %133 = sub <8 x i16> %132, %129
  %134 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %134, align 2
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2
  %138 = sub <8 x i16> %137, %129
  %139 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %139, align 2
  %140 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 16
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2
  %143 = sub <8 x i16> %142, %129
  %144 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %144, align 2
  %145 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 24
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = sub <8 x i16> %147, %129
  %149 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %149, align 2
  %150 = insertelement <8 x i16> undef, i16 %18, i32 0
  %151 = shufflevector <8 x i16> %150, <8 x i16> undef, <8 x i32> zeroinitializer
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2
  %155 = sub <8 x i16> %154, %151
  %156 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %155, <8 x i16>* %156, align 2
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2
  %160 = sub <8 x i16> %159, %151
  %161 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %161, align 2
  %162 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 16
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2
  %165 = sub <8 x i16> %164, %151
  %166 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %166, align 2
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 24
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 2
  %170 = sub <8 x i16> %169, %151
  %171 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %171, align 2
  %172 = insertelement <8 x i16> undef, i16 %18, i32 0
  %173 = shufflevector <8 x i16> %172, <8 x i16> undef, <8 x i32> zeroinitializer
  %174 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 2
  %177 = sub <8 x i16> %176, %173
  %178 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2
  %182 = sub <8 x i16> %181, %173
  %183 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %183, align 2
  %184 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 16
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 2
  %187 = sub <8 x i16> %186, %173
  %188 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %187, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 24
  %190 = bitcast i16* %189 to <8 x i16>*
  %191 = load <8 x i16>, <8 x i16>* %190, align 2
  %192 = sub <8 x i16> %191, %173
  %193 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %193, align 2
  ret void

194:                                              ; preds = %201
  %195 = shl nuw i64 %12, 1
  %196 = icmp slt i64 %195, %10
  %197 = getelementptr inbounds i8, i8* %13, i64 %8
  %198 = select i1 %196, i8* %197, i8* %13
  %199 = add nuw nsw i64 %12, 1
  %200 = icmp eq i64 %199, 8
  br i1 %200, label %15, label %11

201:                                              ; preds = %201, %11
  %202 = phi i64 [ 0, %11 ], [ %231, %201 ]
  %203 = phi i32 [ %14, %11 ], [ %230, %201 ]
  %204 = shl nuw i64 %202, 1
  %205 = icmp sgt i64 %204, %9
  %206 = trunc i64 %204 to i32
  %207 = select i1 %205, i32 %6, i32 %206
  %208 = sext i32 %207 to i64
  %209 = add nsw i64 %208, %4
  %210 = getelementptr inbounds i8, i8* %13, i64 %208
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i16
  %213 = add nsw i64 %208, 1
  %214 = getelementptr inbounds i8, i8* %13, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i16
  %217 = getelementptr inbounds i8, i8* %13, i64 %209
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i16
  %220 = add nsw i64 %209, 1
  %221 = getelementptr inbounds i8, i8* %13, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i16
  %224 = add nuw nsw i16 %216, %212
  %225 = add nuw nsw i16 %224, %219
  %226 = add nuw nsw i16 %225, %223
  %227 = shl nuw nsw i16 %226, 1
  %228 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %12, i64 %202
  store i16 %227, i16* %228, align 2
  %229 = zext i16 %227 to i32
  %230 = add nsw i32 %203, %229
  %231 = add nuw nsw i64 %202, 1
  %232 = icmp eq i64 %231, 32
  br i1 %232, label %194, label %201
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi16ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = insertelement <8 x i32> undef, i32 %3, i32 0
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> zeroinitializer
  %9 = insertelement <8 x i32> undef, i32 %6, i32 0
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %11

11:                                               ; preds = %95, %4
  %12 = phi i64 [ 0, %4 ], [ %97, %95 ]
  %13 = phi i8* [ %0, %4 ], [ %96, %95 ]
  %14 = mul i64 %12, %1
  %15 = add nuw i64 %12, 1
  %16 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %17 = bitcast i16* %16 to i8*
  %18 = getelementptr [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %19 = bitcast i16* %18 to i8*
  %20 = add i64 %14, 32
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = getelementptr i8, i8* %0, i64 %14
  %23 = icmp ult i8* %22, %17
  %24 = icmp ugt i8* %21, %19
  %25 = and i1 %23, %24
  br i1 %25, label %99, label %26

26:                                               ; preds = %11
  %27 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 2, !alias.scope !447
  %30 = sext <8 x i16> %29 to <8 x i32>
  %31 = mul nsw <8 x i32> %8, %30
  %32 = ashr <8 x i32> %31, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %33 = add <8 x i32> %31, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %34 = add <8 x i32> %33, %32
  %35 = ashr <8 x i32> %34, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %36 = add nsw <8 x i32> %35, %10
  %37 = icmp slt <8 x i32> %36, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %38 = select <8 x i1> %37, <8 x i32> %36, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %39 = icmp sgt <8 x i32> %38, zeroinitializer
  %40 = select <8 x i1> %39, <8 x i32> %38, <8 x i32> zeroinitializer
  %41 = trunc <8 x i32> %40 to <8 x i8>
  %42 = bitcast i8* %13 to <8 x i8>*
  store <8 x i8> %41, <8 x i8>* %42, align 1, !alias.scope !450, !noalias !447
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 8
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !447
  %46 = sext <8 x i16> %45 to <8 x i32>
  %47 = mul nsw <8 x i32> %8, %46
  %48 = ashr <8 x i32> %47, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %49 = add <8 x i32> %47, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = add <8 x i32> %49, %48
  %51 = ashr <8 x i32> %50, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %52 = add nsw <8 x i32> %51, %10
  %53 = icmp slt <8 x i32> %52, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %54 = select <8 x i1> %53, <8 x i32> %52, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %55 = icmp sgt <8 x i32> %54, zeroinitializer
  %56 = select <8 x i1> %55, <8 x i32> %54, <8 x i32> zeroinitializer
  %57 = trunc <8 x i32> %56 to <8 x i8>
  %58 = getelementptr inbounds i8, i8* %13, i64 8
  %59 = bitcast i8* %58 to <8 x i8>*
  store <8 x i8> %57, <8 x i8>* %59, align 1, !alias.scope !450, !noalias !447
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 16
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !447
  %63 = sext <8 x i16> %62 to <8 x i32>
  %64 = mul nsw <8 x i32> %8, %63
  %65 = ashr <8 x i32> %64, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %66 = add <8 x i32> %64, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %67 = add <8 x i32> %66, %65
  %68 = ashr <8 x i32> %67, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %69 = add nsw <8 x i32> %68, %10
  %70 = icmp slt <8 x i32> %69, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %71 = select <8 x i1> %70, <8 x i32> %69, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %72 = icmp sgt <8 x i32> %71, zeroinitializer
  %73 = select <8 x i1> %72, <8 x i32> %71, <8 x i32> zeroinitializer
  %74 = trunc <8 x i32> %73 to <8 x i8>
  %75 = getelementptr inbounds i8, i8* %13, i64 16
  %76 = bitcast i8* %75 to <8 x i8>*
  store <8 x i8> %74, <8 x i8>* %76, align 1, !alias.scope !450, !noalias !447
  %77 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 24
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !447
  %80 = sext <8 x i16> %79 to <8 x i32>
  %81 = mul nsw <8 x i32> %8, %80
  %82 = ashr <8 x i32> %81, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %83 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %84 = add <8 x i32> %83, %82
  %85 = ashr <8 x i32> %84, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %86 = add nsw <8 x i32> %85, %10
  %87 = icmp slt <8 x i32> %86, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %88 = select <8 x i1> %87, <8 x i32> %86, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %89 = icmp sgt <8 x i32> %88, zeroinitializer
  %90 = select <8 x i1> %89, <8 x i32> %88, <8 x i32> zeroinitializer
  %91 = trunc <8 x i32> %90 to <8 x i8>
  %92 = getelementptr inbounds i8, i8* %13, i64 24
  %93 = bitcast i8* %92 to <8 x i8>*
  store <8 x i8> %91, <8 x i8>* %93, align 1, !alias.scope !450, !noalias !447
  br label %95

94:                                               ; preds = %95
  ret void

95:                                               ; preds = %99, %26
  %96 = getelementptr inbounds i8, i8* %13, i64 %1
  %97 = add nuw nsw i64 %12, 1
  %98 = icmp eq i64 %97, 16
  br i1 %98, label %94, label %11

99:                                               ; preds = %11, %99
  %100 = phi i64 [ %116, %99 ], [ 0, %11 ]
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 %100
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = mul nsw i32 %103, %3
  %105 = ashr i32 %104, 31
  %106 = add i32 %104, 32
  %107 = add i32 %106, %105
  %108 = ashr i32 %107, 6
  %109 = add nsw i32 %108, %6
  %110 = icmp slt i32 %109, 255
  %111 = select i1 %110, i32 %109, i32 255
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %13, i64 %100
  store i8 %114, i8* %115, align 1
  %116 = add nuw nsw i64 %100, 1
  %117 = icmp eq i64 %116, 32
  br i1 %117, label %95, label %99, !llvm.loop !452
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %20, %5
  %11 = phi i64 [ 0, %5 ], [ %24, %20 ]
  %12 = phi i8* [ %3, %5 ], [ %23, %20 ]
  %13 = phi i32 [ 0, %5 ], [ %51, %20 ]
  br label %26

14:                                               ; preds = %20
  %15 = add nsw i32 %51, 256
  %16 = lshr i32 %15, 9
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %54

20:                                               ; preds = %26
  %21 = icmp slt i64 %11, %9
  %22 = getelementptr inbounds i8, i8* %12, i64 %4
  %23 = select i1 %21, i8* %22, i8* %12
  %24 = add nuw nsw i64 %11, 1
  %25 = icmp eq i64 %24, 16
  br i1 %25, label %14, label %10

26:                                               ; preds = %26, %10
  %27 = phi i64 [ 0, %10 ], [ %52, %26 ]
  %28 = phi i32 [ %13, %10 ], [ %51, %26 ]
  %29 = icmp sgt i64 %27, %8
  %30 = trunc i64 %27 to i32
  %31 = select i1 %29, i32 %6, i32 %30
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %12, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  %36 = shl nuw nsw i16 %35, 3
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %27
  store i16 %36, i16* %37, align 2
  %38 = zext i16 %36 to i32
  %39 = add nsw i32 %28, %38
  %40 = or i64 %27, 1
  %41 = icmp slt i64 %27, %8
  %42 = trunc i64 %40 to i32
  %43 = select i1 %41, i32 %42, i32 %6
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %12, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  %48 = shl nuw nsw i16 %47, 3
  %49 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %40
  store i16 %48, i16* %49, align 2
  %50 = zext i16 %48 to i32
  %51 = add nsw i32 %39, %50
  %52 = add nuw nsw i64 %27, 2
  %53 = icmp eq i64 %52, 32
  br i1 %53, label %20, label %26

54:                                               ; preds = %14, %54
  %55 = phi i64 [ 0, %14 ], [ %76, %54 ]
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 0
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = sub <8 x i16> %58, %19
  %60 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2
  %64 = sub <8 x i16> %63, %19
  %65 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = sub <8 x i16> %68, %19
  %70 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 24
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = sub <8 x i16> %73, %19
  %75 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 2
  %76 = add nuw nsw i64 %55, 1
  %77 = icmp eq i64 %76, 16
  br i1 %77, label %78, label %54

78:                                               ; preds = %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %20, %5
  %11 = phi i64 [ 0, %5 ], [ %24, %20 ]
  %12 = phi i8* [ %3, %5 ], [ %23, %20 ]
  %13 = phi i32 [ 0, %5 ], [ %45, %20 ]
  br label %26

14:                                               ; preds = %20
  %15 = add nsw i32 %45, 256
  %16 = lshr i32 %15, 9
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %48

20:                                               ; preds = %26
  %21 = icmp slt i64 %11, %9
  %22 = getelementptr inbounds i8, i8* %12, i64 %4
  %23 = select i1 %21, i8* %22, i8* %12
  %24 = add nuw nsw i64 %11, 1
  %25 = icmp eq i64 %24, 16
  br i1 %25, label %14, label %10

26:                                               ; preds = %26, %10
  %27 = phi i64 [ 0, %10 ], [ %46, %26 ]
  %28 = phi i32 [ %13, %10 ], [ %45, %26 ]
  %29 = shl nuw i64 %27, 1
  %30 = icmp sgt i64 %29, %8
  %31 = trunc i64 %29 to i32
  %32 = select i1 %30, i32 %6, i32 %31
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %12, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i16
  %37 = add nsw i64 %33, 1
  %38 = getelementptr inbounds i8, i8* %12, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = add nuw nsw i16 %40, %36
  %42 = shl nuw nsw i16 %41, 2
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %27
  store i16 %42, i16* %43, align 2
  %44 = zext i16 %42 to i32
  %45 = add nsw i32 %28, %44
  %46 = add nuw nsw i64 %27, 1
  %47 = icmp eq i64 %46, 32
  br i1 %47, label %20, label %26

48:                                               ; preds = %14, %48
  %49 = phi i64 [ 0, %14 ], [ %70, %48 ]
  %50 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 0
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2
  %53 = sub <8 x i16> %52, %19
  %54 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> %53, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 8
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2
  %58 = sub <8 x i16> %57, %19
  %59 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 16
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = sub <8 x i16> %62, %19
  %64 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 24
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = sub <8 x i16> %67, %19
  %69 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2
  %70 = add nuw nsw i64 %49, 1
  %71 = icmp eq i64 %70, 16
  br i1 %71, label %72, label %48

72:                                               ; preds = %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = sext i32 %6 to i64
  %10 = sext i32 %7 to i64
  br label %11

11:                                               ; preds = %21, %5
  %12 = phi i64 [ 0, %5 ], [ %26, %21 ]
  %13 = phi i8* [ %3, %5 ], [ %25, %21 ]
  %14 = phi i32 [ 0, %5 ], [ %57, %21 ]
  br label %28

15:                                               ; preds = %21
  %16 = add nsw i32 %57, 256
  %17 = lshr i32 %16, 9
  %18 = trunc i32 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %60

21:                                               ; preds = %28
  %22 = shl nuw i64 %12, 1
  %23 = icmp slt i64 %22, %10
  %24 = getelementptr inbounds i8, i8* %13, i64 %8
  %25 = select i1 %23, i8* %24, i8* %13
  %26 = add nuw nsw i64 %12, 1
  %27 = icmp eq i64 %26, 16
  br i1 %27, label %15, label %11

28:                                               ; preds = %28, %11
  %29 = phi i64 [ 0, %11 ], [ %58, %28 ]
  %30 = phi i32 [ %14, %11 ], [ %57, %28 ]
  %31 = shl nuw i64 %29, 1
  %32 = icmp sgt i64 %31, %9
  %33 = trunc i64 %31 to i32
  %34 = select i1 %32, i32 %6, i32 %33
  %35 = sext i32 %34 to i64
  %36 = add nsw i64 %35, %4
  %37 = getelementptr inbounds i8, i8* %13, i64 %35
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = add nsw i64 %35, 1
  %41 = getelementptr inbounds i8, i8* %13, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  %44 = getelementptr inbounds i8, i8* %13, i64 %36
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = add nsw i64 %36, 1
  %48 = getelementptr inbounds i8, i8* %13, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = add nuw nsw i16 %43, %39
  %52 = add nuw nsw i16 %51, %46
  %53 = add nuw nsw i16 %52, %50
  %54 = shl nuw nsw i16 %53, 1
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %12, i64 %29
  store i16 %54, i16* %55, align 2
  %56 = zext i16 %54 to i32
  %57 = add nsw i32 %30, %56
  %58 = add nuw nsw i64 %29, 1
  %59 = icmp eq i64 %58, 32
  br i1 %59, label %21, label %28

60:                                               ; preds = %15, %60
  %61 = phi i64 [ 0, %15 ], [ %82, %60 ]
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 0
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2
  %65 = sub <8 x i16> %64, %20
  %66 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %66, align 2
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2
  %70 = sub <8 x i16> %69, %20
  %71 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %71, align 2
  %72 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 16
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = sub <8 x i16> %74, %20
  %76 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 24
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2
  %80 = sub <8 x i16> %79, %20
  %81 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %81, align 2
  %82 = add nuw nsw i64 %61, 1
  %83 = icmp eq i64 %82, 16
  br i1 %83, label %84, label %60

84:                                               ; preds = %60
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi32ELi8EhEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = insertelement <8 x i32> undef, i32 %3, i32 0
  %8 = shufflevector <8 x i32> %7, <8 x i32> undef, <8 x i32> zeroinitializer
  %9 = insertelement <8 x i32> undef, i32 %6, i32 0
  %10 = shufflevector <8 x i32> %9, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %11

11:                                               ; preds = %95, %4
  %12 = phi i64 [ 0, %4 ], [ %97, %95 ]
  %13 = phi i8* [ %0, %4 ], [ %96, %95 ]
  %14 = mul i64 %12, %1
  %15 = add nuw i64 %12, 1
  %16 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %17 = bitcast i16* %16 to i8*
  %18 = getelementptr [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %19 = bitcast i16* %18 to i8*
  %20 = add i64 %14, 32
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = getelementptr i8, i8* %0, i64 %14
  %23 = icmp ult i8* %22, %17
  %24 = icmp ugt i8* %21, %19
  %25 = and i1 %23, %24
  br i1 %25, label %99, label %26

26:                                               ; preds = %11
  %27 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 0
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 2, !alias.scope !453
  %30 = sext <8 x i16> %29 to <8 x i32>
  %31 = mul nsw <8 x i32> %8, %30
  %32 = ashr <8 x i32> %31, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %33 = add <8 x i32> %31, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %34 = add <8 x i32> %33, %32
  %35 = ashr <8 x i32> %34, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %36 = add nsw <8 x i32> %35, %10
  %37 = icmp slt <8 x i32> %36, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %38 = select <8 x i1> %37, <8 x i32> %36, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %39 = icmp sgt <8 x i32> %38, zeroinitializer
  %40 = select <8 x i1> %39, <8 x i32> %38, <8 x i32> zeroinitializer
  %41 = trunc <8 x i32> %40 to <8 x i8>
  %42 = bitcast i8* %13 to <8 x i8>*
  store <8 x i8> %41, <8 x i8>* %42, align 1, !alias.scope !456, !noalias !453
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 8
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !453
  %46 = sext <8 x i16> %45 to <8 x i32>
  %47 = mul nsw <8 x i32> %8, %46
  %48 = ashr <8 x i32> %47, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %49 = add <8 x i32> %47, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %50 = add <8 x i32> %49, %48
  %51 = ashr <8 x i32> %50, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %52 = add nsw <8 x i32> %51, %10
  %53 = icmp slt <8 x i32> %52, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %54 = select <8 x i1> %53, <8 x i32> %52, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %55 = icmp sgt <8 x i32> %54, zeroinitializer
  %56 = select <8 x i1> %55, <8 x i32> %54, <8 x i32> zeroinitializer
  %57 = trunc <8 x i32> %56 to <8 x i8>
  %58 = getelementptr inbounds i8, i8* %13, i64 8
  %59 = bitcast i8* %58 to <8 x i8>*
  store <8 x i8> %57, <8 x i8>* %59, align 1, !alias.scope !456, !noalias !453
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 16
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !453
  %63 = sext <8 x i16> %62 to <8 x i32>
  %64 = mul nsw <8 x i32> %8, %63
  %65 = ashr <8 x i32> %64, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %66 = add <8 x i32> %64, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %67 = add <8 x i32> %66, %65
  %68 = ashr <8 x i32> %67, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %69 = add nsw <8 x i32> %68, %10
  %70 = icmp slt <8 x i32> %69, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %71 = select <8 x i1> %70, <8 x i32> %69, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %72 = icmp sgt <8 x i32> %71, zeroinitializer
  %73 = select <8 x i1> %72, <8 x i32> %71, <8 x i32> zeroinitializer
  %74 = trunc <8 x i32> %73 to <8 x i8>
  %75 = getelementptr inbounds i8, i8* %13, i64 16
  %76 = bitcast i8* %75 to <8 x i8>*
  store <8 x i8> %74, <8 x i8>* %76, align 1, !alias.scope !456, !noalias !453
  %77 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 24
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !453
  %80 = sext <8 x i16> %79 to <8 x i32>
  %81 = mul nsw <8 x i32> %8, %80
  %82 = ashr <8 x i32> %81, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %83 = add <8 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %84 = add <8 x i32> %83, %82
  %85 = ashr <8 x i32> %84, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %86 = add nsw <8 x i32> %85, %10
  %87 = icmp slt <8 x i32> %86, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %88 = select <8 x i1> %87, <8 x i32> %86, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %89 = icmp sgt <8 x i32> %88, zeroinitializer
  %90 = select <8 x i1> %89, <8 x i32> %88, <8 x i32> zeroinitializer
  %91 = trunc <8 x i32> %90 to <8 x i8>
  %92 = getelementptr inbounds i8, i8* %13, i64 24
  %93 = bitcast i8* %92 to <8 x i8>*
  store <8 x i8> %91, <8 x i8>* %93, align 1, !alias.scope !456, !noalias !453
  br label %95

94:                                               ; preds = %95
  ret void

95:                                               ; preds = %99, %26
  %96 = getelementptr inbounds i8, i8* %13, i64 %1
  %97 = add nuw nsw i64 %12, 1
  %98 = icmp eq i64 %97, 32
  br i1 %98, label %94, label %11

99:                                               ; preds = %11, %99
  %100 = phi i64 [ %116, %99 ], [ 0, %11 ]
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %12, i64 %100
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = mul nsw i32 %103, %3
  %105 = ashr i32 %104, 31
  %106 = add i32 %104, 32
  %107 = add i32 %106, %105
  %108 = ashr i32 %107, 6
  %109 = add nsw i32 %108, %6
  %110 = icmp slt i32 %109, 255
  %111 = select i1 %110, i32 %109, i32 255
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %13, i64 %100
  store i8 %114, i8* %115, align 1
  %116 = add nuw nsw i64 %100, 1
  %117 = icmp eq i64 %116, 32
  br i1 %117, label %95, label %99, !llvm.loop !458
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi8EhLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -1
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %20, %5
  %11 = phi i64 [ 0, %5 ], [ %24, %20 ]
  %12 = phi i8* [ %3, %5 ], [ %23, %20 ]
  %13 = phi i32 [ 0, %5 ], [ %51, %20 ]
  br label %26

14:                                               ; preds = %20
  %15 = add nsw i32 %51, 512
  %16 = lshr i32 %15, 10
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %54

20:                                               ; preds = %26
  %21 = icmp slt i64 %11, %9
  %22 = getelementptr inbounds i8, i8* %12, i64 %4
  %23 = select i1 %21, i8* %22, i8* %12
  %24 = add nuw nsw i64 %11, 1
  %25 = icmp eq i64 %24, 32
  br i1 %25, label %14, label %10

26:                                               ; preds = %26, %10
  %27 = phi i64 [ 0, %10 ], [ %52, %26 ]
  %28 = phi i32 [ %13, %10 ], [ %51, %26 ]
  %29 = icmp sgt i64 %27, %8
  %30 = trunc i64 %27 to i32
  %31 = select i1 %29, i32 %6, i32 %30
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %12, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  %36 = shl nuw nsw i16 %35, 3
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %27
  store i16 %36, i16* %37, align 2
  %38 = zext i16 %36 to i32
  %39 = add nsw i32 %28, %38
  %40 = or i64 %27, 1
  %41 = icmp slt i64 %27, %8
  %42 = trunc i64 %40 to i32
  %43 = select i1 %41, i32 %42, i32 %6
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %12, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  %48 = shl nuw nsw i16 %47, 3
  %49 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %40
  store i16 %48, i16* %49, align 2
  %50 = zext i16 %48 to i32
  %51 = add nsw i32 %39, %50
  %52 = add nuw nsw i64 %27, 2
  %53 = icmp eq i64 %52, 32
  br i1 %53, label %20, label %26

54:                                               ; preds = %14, %54
  %55 = phi i64 [ 0, %14 ], [ %76, %54 ]
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 0
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = sub <8 x i16> %58, %19
  %60 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2
  %64 = sub <8 x i16> %63, %19
  %65 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = sub <8 x i16> %68, %19
  %70 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 24
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = sub <8 x i16> %73, %19
  %75 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 2
  %76 = add nuw nsw i64 %55, 1
  %77 = icmp eq i64 %76, 32
  br i1 %77, label %78, label %54

78:                                               ; preds = %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi8EhLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -1
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  br label %10

10:                                               ; preds = %20, %5
  %11 = phi i64 [ 0, %5 ], [ %24, %20 ]
  %12 = phi i8* [ %3, %5 ], [ %23, %20 ]
  %13 = phi i32 [ 0, %5 ], [ %45, %20 ]
  br label %26

14:                                               ; preds = %20
  %15 = add nsw i32 %45, 512
  %16 = lshr i32 %15, 10
  %17 = trunc i32 %16 to i16
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %48

20:                                               ; preds = %26
  %21 = icmp slt i64 %11, %9
  %22 = getelementptr inbounds i8, i8* %12, i64 %4
  %23 = select i1 %21, i8* %22, i8* %12
  %24 = add nuw nsw i64 %11, 1
  %25 = icmp eq i64 %24, 32
  br i1 %25, label %14, label %10

26:                                               ; preds = %26, %10
  %27 = phi i64 [ 0, %10 ], [ %46, %26 ]
  %28 = phi i32 [ %13, %10 ], [ %45, %26 ]
  %29 = shl nuw i64 %27, 1
  %30 = icmp sgt i64 %29, %8
  %31 = trunc i64 %29 to i32
  %32 = select i1 %30, i32 %6, i32 %31
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %12, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i16
  %37 = add nsw i64 %33, 1
  %38 = getelementptr inbounds i8, i8* %12, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = add nuw nsw i16 %40, %36
  %42 = shl nuw nsw i16 %41, 2
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %11, i64 %27
  store i16 %42, i16* %43, align 2
  %44 = zext i16 %42 to i32
  %45 = add nsw i32 %28, %44
  %46 = add nuw nsw i64 %27, 1
  %47 = icmp eq i64 %46, 32
  br i1 %47, label %20, label %26

48:                                               ; preds = %14, %48
  %49 = phi i64 [ 0, %14 ], [ %70, %48 ]
  %50 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 0
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2
  %53 = sub <8 x i16> %52, %19
  %54 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> %53, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 8
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2
  %58 = sub <8 x i16> %57, %19
  %59 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 16
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = sub <8 x i16> %62, %19
  %64 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 24
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = sub <8 x i16> %67, %19
  %69 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2
  %70 = add nuw nsw i64 %49, 1
  %71 = icmp eq i64 %70, 32
  br i1 %71, label %72, label %48

72:                                               ; preds = %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi8EhLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = add nsw i32 %1, -2
  %7 = add nsw i32 %2, -2
  %8 = shl i64 %4, 1
  %9 = sext i32 %6 to i64
  %10 = sext i32 %7 to i64
  br label %11

11:                                               ; preds = %21, %5
  %12 = phi i64 [ 0, %5 ], [ %26, %21 ]
  %13 = phi i8* [ %3, %5 ], [ %25, %21 ]
  %14 = phi i32 [ 0, %5 ], [ %57, %21 ]
  br label %28

15:                                               ; preds = %21
  %16 = add nsw i32 %57, 512
  %17 = lshr i32 %16, 10
  %18 = trunc i32 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %60

21:                                               ; preds = %28
  %22 = shl nuw i64 %12, 1
  %23 = icmp slt i64 %22, %10
  %24 = getelementptr inbounds i8, i8* %13, i64 %8
  %25 = select i1 %23, i8* %24, i8* %13
  %26 = add nuw nsw i64 %12, 1
  %27 = icmp eq i64 %26, 32
  br i1 %27, label %15, label %11

28:                                               ; preds = %28, %11
  %29 = phi i64 [ 0, %11 ], [ %58, %28 ]
  %30 = phi i32 [ %14, %11 ], [ %57, %28 ]
  %31 = shl nuw i64 %29, 1
  %32 = icmp sgt i64 %31, %9
  %33 = trunc i64 %31 to i32
  %34 = select i1 %32, i32 %6, i32 %33
  %35 = sext i32 %34 to i64
  %36 = add nsw i64 %35, %4
  %37 = getelementptr inbounds i8, i8* %13, i64 %35
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = add nsw i64 %35, 1
  %41 = getelementptr inbounds i8, i8* %13, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  %44 = getelementptr inbounds i8, i8* %13, i64 %36
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i16
  %47 = add nsw i64 %36, 1
  %48 = getelementptr inbounds i8, i8* %13, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i16
  %51 = add nuw nsw i16 %43, %39
  %52 = add nuw nsw i16 %51, %46
  %53 = add nuw nsw i16 %52, %50
  %54 = shl nuw nsw i16 %53, 1
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %12, i64 %29
  store i16 %54, i16* %55, align 2
  %56 = zext i16 %54 to i32
  %57 = add nsw i32 %30, %56
  %58 = add nuw nsw i64 %29, 1
  %59 = icmp eq i64 %58, 32
  br i1 %59, label %21, label %28

60:                                               ; preds = %15, %60
  %61 = phi i64 [ 0, %15 ], [ %82, %60 ]
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 0
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2
  %65 = sub <8 x i16> %64, %20
  %66 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %66, align 2
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2
  %70 = sub <8 x i16> %69, %20
  %71 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %71, align 2
  %72 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 16
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = sub <8 x i16> %74, %20
  %76 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 24
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2
  %80 = sub <8 x i16> %79, %20
  %81 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %81, align 2
  %82 = add nuw nsw i64 %61, 1
  %83 = icmp eq i64 %82, 32
  br i1 %83, label %84, label %60

84:                                               ; preds = %60
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi4ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  store i16 512, i16* %6, align 2
  %7 = getelementptr inbounds i8, i8* %0, i64 2
  %8 = bitcast i8* %7 to i16*
  store i16 512, i16* %8, align 2
  %9 = getelementptr inbounds i8, i8* %0, i64 4
  %10 = bitcast i8* %9 to i16*
  store i16 512, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %0, i64 6
  %12 = bitcast i8* %11 to i16*
  store i16 512, i16* %12, align 2
  %13 = getelementptr inbounds i16, i16* %6, i64 %5
  store i16 512, i16* %13, align 2
  %14 = getelementptr inbounds i16, i16* %13, i64 1
  store i16 512, i16* %14, align 2
  %15 = getelementptr inbounds i16, i16* %13, i64 2
  store i16 512, i16* %15, align 2
  %16 = getelementptr inbounds i16, i16* %13, i64 3
  store i16 512, i16* %16, align 2
  %17 = getelementptr inbounds i16, i16* %13, i64 %5
  store i16 512, i16* %17, align 2
  %18 = getelementptr inbounds i16, i16* %17, i64 1
  store i16 512, i16* %18, align 2
  %19 = getelementptr inbounds i16, i16* %17, i64 2
  store i16 512, i16* %19, align 2
  %20 = getelementptr inbounds i16, i16* %17, i64 3
  store i16 512, i16* %20, align 2
  %21 = getelementptr inbounds i16, i16* %17, i64 %5
  store i16 512, i16* %21, align 2
  %22 = getelementptr inbounds i16, i16* %21, i64 1
  store i16 512, i16* %22, align 2
  %23 = getelementptr inbounds i16, i16* %21, i64 2
  store i16 512, i16* %23, align 2
  %24 = getelementptr inbounds i16, i16* %21, i64 3
  store i16 512, i16* %24, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 2
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = lshr i32 %23, 2
  %25 = bitcast i8* %0 to i16*
  %26 = lshr i64 %1, 1
  %27 = trunc i32 %24 to i16
  store i16 %27, i16* %25, align 2
  %28 = getelementptr inbounds i8, i8* %0, i64 2
  %29 = bitcast i8* %28 to i16*
  store i16 %27, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %0, i64 4
  %31 = bitcast i8* %30 to i16*
  store i16 %27, i16* %31, align 2
  %32 = getelementptr inbounds i8, i8* %0, i64 6
  %33 = bitcast i8* %32 to i16*
  store i16 %27, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %25, i64 %26
  store i16 %27, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %34, i64 1
  store i16 %27, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %34, i64 2
  store i16 %27, i16* %36, align 2
  %37 = getelementptr inbounds i16, i16* %34, i64 3
  store i16 %27, i16* %37, align 2
  %38 = getelementptr inbounds i16, i16* %34, i64 %26
  store i16 %27, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %38, i64 1
  store i16 %27, i16* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 2
  store i16 %27, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %38, i64 3
  store i16 %27, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 %26
  store i16 %27, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %42, i64 1
  store i16 %27, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %42, i64 2
  store i16 %27, i16* %44, align 2
  %45 = getelementptr inbounds i16, i16* %42, i64 3
  store i16 %27, i16* %45, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 2
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = lshr i32 %23, 2
  %25 = bitcast i8* %0 to i16*
  %26 = lshr i64 %1, 1
  %27 = trunc i32 %24 to i16
  store i16 %27, i16* %25, align 2
  %28 = getelementptr inbounds i8, i8* %0, i64 2
  %29 = bitcast i8* %28 to i16*
  store i16 %27, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %0, i64 4
  %31 = bitcast i8* %30 to i16*
  store i16 %27, i16* %31, align 2
  %32 = getelementptr inbounds i8, i8* %0, i64 6
  %33 = bitcast i8* %32 to i16*
  store i16 %27, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %25, i64 %26
  store i16 %27, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %34, i64 1
  store i16 %27, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %34, i64 2
  store i16 %27, i16* %36, align 2
  %37 = getelementptr inbounds i16, i16* %34, i64 3
  store i16 %27, i16* %37, align 2
  %38 = getelementptr inbounds i16, i16* %34, i64 %26
  store i16 %27, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %38, i64 1
  store i16 %27, i16* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 2
  store i16 %27, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %38, i64 3
  store i16 %27, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 %26
  store i16 %27, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %42, i64 1
  store i16 %27, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %42, i64 2
  store i16 %27, i16* %44, align 2
  %45 = getelementptr inbounds i16, i16* %42, i64 3
  store i16 %27, i16* %45, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 4
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = bitcast i8* %3 to i16*
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = add nuw nsw i32 %23, %26
  %28 = getelementptr inbounds i8, i8* %3, i64 2
  %29 = bitcast i8* %28 to i16*
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = add nuw nsw i32 %27, %31
  %33 = getelementptr inbounds i8, i8* %3, i64 4
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = add nuw nsw i32 %32, %36
  %38 = getelementptr inbounds i8, i8* %3, i64 6
  %39 = bitcast i8* %38 to i16*
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = add nuw nsw i32 %37, %41
  %43 = lshr i32 %42, 3
  %44 = bitcast i8* %0 to i16*
  %45 = lshr i64 %1, 1
  %46 = trunc i32 %43 to i16
  store i16 %46, i16* %44, align 2
  %47 = getelementptr inbounds i8, i8* %0, i64 2
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = getelementptr inbounds i8, i8* %0, i64 4
  %50 = bitcast i8* %49 to i16*
  store i16 %46, i16* %50, align 2
  %51 = getelementptr inbounds i8, i8* %0, i64 6
  %52 = bitcast i8* %51 to i16*
  store i16 %46, i16* %52, align 2
  %53 = getelementptr inbounds i16, i16* %44, i64 %45
  store i16 %46, i16* %53, align 2
  %54 = getelementptr inbounds i16, i16* %53, i64 1
  store i16 %46, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %53, i64 2
  store i16 %46, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %53, i64 3
  store i16 %46, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %53, i64 %45
  store i16 %46, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %57, i64 1
  store i16 %46, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %57, i64 2
  store i16 %46, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %57, i64 3
  store i16 %46, i16* %60, align 2
  %61 = getelementptr inbounds i16, i16* %57, i64 %45
  store i16 %46, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %61, i64 1
  store i16 %46, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %61, i64 2
  store i16 %46, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %61, i64 3
  store i16 %46, i16* %64, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i64*
  %6 = bitcast i8* %0 to i64*
  %7 = load i64, i64* %5, align 1
  store i64 %7, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %5, align 1
  store i64 %10, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %5, align 1
  store i64 %13, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %5, align 1
  store i64 %16, i64* %15, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %6, align 2
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  %10 = bitcast i8* %9 to i16*
  store i16 %8, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %0, i64 4
  %12 = bitcast i8* %11 to i16*
  store i16 %8, i16* %12, align 2
  %13 = getelementptr inbounds i8, i8* %0, i64 6
  %14 = bitcast i8* %13 to i16*
  store i16 %8, i16* %14, align 2
  %15 = getelementptr inbounds i16, i16* %6, i64 %7
  %16 = getelementptr inbounds i8, i8* %3, i64 2
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 2
  store i16 %18, i16* %15, align 2
  %19 = getelementptr inbounds i16, i16* %15, i64 1
  store i16 %18, i16* %19, align 2
  %20 = getelementptr inbounds i16, i16* %15, i64 2
  store i16 %18, i16* %20, align 2
  %21 = getelementptr inbounds i16, i16* %15, i64 3
  store i16 %18, i16* %21, align 2
  %22 = getelementptr inbounds i16, i16* %15, i64 %7
  %23 = getelementptr inbounds i8, i8* %3, i64 4
  %24 = bitcast i8* %23 to i16*
  %25 = load i16, i16* %24, align 2
  store i16 %25, i16* %22, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 1
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i16, i16* %22, i64 2
  store i16 %25, i16* %27, align 2
  %28 = getelementptr inbounds i16, i16* %22, i64 3
  store i16 %25, i16* %28, align 2
  %29 = getelementptr inbounds i16, i16* %22, i64 %7
  %30 = getelementptr inbounds i8, i8* %3, i64 6
  %31 = bitcast i8* %30 to i16*
  %32 = load i16, i16* %31, align 2
  store i16 %32, i16* %29, align 2
  %33 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 %32, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %29, i64 2
  store i16 %32, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %29, i64 3
  store i16 %32, i16* %35, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  %14 = getelementptr inbounds i8, i8* %2, i64 2
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 4
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 6
  %19 = bitcast i8* %18 to i16*
  br label %21

20:                                               ; preds = %110
  ret void

21:                                               ; preds = %110, %4
  %22 = phi i64 [ 0, %4 ], [ %112, %110 ]
  %23 = phi i16* [ %12, %4 ], [ %111, %110 ]
  %24 = getelementptr inbounds i16, i16* %6, i64 %22
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = sub nsw i32 %26, %10
  %28 = icmp slt i32 %27, 0
  %29 = sub nsw i32 0, %27
  %30 = select i1 %28, i32 %29, i32 %27
  %31 = sub nsw i32 %26, %11
  %32 = load i16, i16* %5, align 2
  %33 = zext i16 %32 to i32
  %34 = sub nsw i32 %33, %10
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = add nsw i32 %31, %33
  %39 = icmp slt i32 %38, 0
  %40 = sub nsw i32 0, %38
  %41 = select i1 %39, i32 %40, i32 %38
  %42 = icmp sgt i32 %37, %30
  %43 = icmp sgt i32 %37, %41
  %44 = or i1 %42, %43
  %45 = icmp sgt i32 %30, %41
  %46 = select i1 %45, i16 %9, i16 %32
  %47 = select i1 %44, i16 %46, i16 %25
  store i16 %47, i16* %23, align 2
  %48 = load i16, i16* %15, align 2
  %49 = zext i16 %48 to i32
  %50 = sub nsw i32 %49, %10
  %51 = icmp slt i32 %50, 0
  %52 = sub nsw i32 0, %50
  %53 = select i1 %51, i32 %52, i32 %50
  %54 = add nsw i32 %31, %49
  %55 = icmp slt i32 %54, 0
  %56 = sub nsw i32 0, %54
  %57 = select i1 %55, i32 %56, i32 %54
  %58 = icmp sgt i32 %53, %30
  %59 = icmp sgt i32 %53, %57
  %60 = or i1 %58, %59
  br i1 %60, label %63, label %61

61:                                               ; preds = %21
  %62 = getelementptr inbounds i16, i16* %23, i64 1
  store i16 %25, i16* %62, align 2
  br label %68

63:                                               ; preds = %21
  %64 = icmp sgt i32 %30, %57
  %65 = getelementptr inbounds i16, i16* %23, i64 1
  br i1 %64, label %67, label %66

66:                                               ; preds = %63
  store i16 %48, i16* %65, align 2
  br label %68

67:                                               ; preds = %63
  store i16 %9, i16* %65, align 2
  br label %68

68:                                               ; preds = %67, %66, %61
  %69 = load i16, i16* %17, align 2
  %70 = zext i16 %69 to i32
  %71 = sub nsw i32 %70, %10
  %72 = icmp slt i32 %71, 0
  %73 = sub nsw i32 0, %71
  %74 = select i1 %72, i32 %73, i32 %71
  %75 = add nsw i32 %31, %70
  %76 = icmp slt i32 %75, 0
  %77 = sub nsw i32 0, %75
  %78 = select i1 %76, i32 %77, i32 %75
  %79 = icmp sgt i32 %74, %30
  %80 = icmp sgt i32 %74, %78
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %68
  %83 = getelementptr inbounds i16, i16* %23, i64 2
  store i16 %25, i16* %83, align 2
  br label %89

84:                                               ; preds = %68
  %85 = icmp sgt i32 %30, %78
  %86 = getelementptr inbounds i16, i16* %23, i64 2
  br i1 %85, label %88, label %87

87:                                               ; preds = %84
  store i16 %69, i16* %86, align 2
  br label %89

88:                                               ; preds = %84
  store i16 %9, i16* %86, align 2
  br label %89

89:                                               ; preds = %88, %87, %82
  %90 = load i16, i16* %19, align 2
  %91 = zext i16 %90 to i32
  %92 = sub nsw i32 %91, %10
  %93 = icmp slt i32 %92, 0
  %94 = sub nsw i32 0, %92
  %95 = select i1 %93, i32 %94, i32 %92
  %96 = add nsw i32 %31, %91
  %97 = icmp slt i32 %96, 0
  %98 = sub nsw i32 0, %96
  %99 = select i1 %97, i32 %98, i32 %96
  %100 = icmp sgt i32 %95, %30
  %101 = icmp sgt i32 %95, %99
  %102 = or i1 %100, %101
  br i1 %102, label %105, label %103

103:                                              ; preds = %89
  %104 = getelementptr inbounds i16, i16* %23, i64 3
  store i16 %25, i16* %104, align 2
  br label %110

105:                                              ; preds = %89
  %106 = icmp sgt i32 %30, %99
  %107 = getelementptr inbounds i16, i16* %23, i64 3
  br i1 %106, label %109, label %108

108:                                              ; preds = %105
  store i16 %90, i16* %107, align 2
  br label %110

109:                                              ; preds = %105
  store i16 %9, i16* %107, align 2
  br label %110

110:                                              ; preds = %109, %108, %103
  %111 = getelementptr inbounds i16, i16* %23, i64 %13
  %112 = add nuw nsw i64 %22, 1
  %113 = icmp eq i64 %112, 4
  br i1 %113, label %20, label %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 6
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 6
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = add nuw nsw i32 %15, 256
  %18 = load i16, i16* %5, align 2
  %19 = zext i16 %18 to i32
  %20 = mul nuw nsw i32 %19, 255
  %21 = load i16, i16* %6, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw nsw i32 %22, 255
  %24 = add nuw nsw i32 %17, %20
  %25 = add nuw nsw i32 %24, %16
  %26 = add nuw nsw i32 %25, %23
  %27 = lshr i32 %26, 9
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %13, align 2
  %29 = getelementptr inbounds i8, i8* %2, i64 2
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = mul nuw nsw i32 %32, 255
  %34 = load i16, i16* %6, align 2
  %35 = zext i16 %34 to i32
  %36 = mul nuw nsw i32 %35, 149
  %37 = mul nuw nsw i32 %16, 107
  %38 = add nuw nsw i32 %17, %33
  %39 = add nuw nsw i32 %38, %37
  %40 = add nuw nsw i32 %39, %36
  %41 = lshr i32 %40, 9
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds i8, i8* %0, i64 2
  %44 = bitcast i8* %43 to i16*
  store i16 %42, i16* %44, align 2
  %45 = getelementptr inbounds i8, i8* %2, i64 4
  %46 = bitcast i8* %45 to i16*
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %48, 255
  %50 = load i16, i16* %6, align 2
  %51 = zext i16 %50 to i32
  %52 = mul nuw nsw i32 %51, 85
  %53 = mul nuw nsw i32 %16, 171
  %54 = add nuw nsw i32 %17, %49
  %55 = add nuw nsw i32 %54, %53
  %56 = add nuw nsw i32 %55, %52
  %57 = lshr i32 %56, 9
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds i8, i8* %0, i64 4
  %60 = bitcast i8* %59 to i16*
  store i16 %58, i16* %60, align 2
  %61 = getelementptr inbounds i8, i8* %2, i64 6
  %62 = bitcast i8* %61 to i16*
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, 255
  %66 = load i16, i16* %6, align 2
  %67 = zext i16 %66 to i32
  %68 = shl nuw nsw i32 %67, 6
  %69 = mul nuw nsw i32 %16, 192
  %70 = add nuw nsw i32 %17, %65
  %71 = add nuw nsw i32 %70, %69
  %72 = add nuw nsw i32 %71, %68
  %73 = lshr i32 %72, 9
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i8, i8* %0, i64 6
  %76 = bitcast i8* %75 to i16*
  store i16 %74, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %13, i64 %14
  %78 = getelementptr inbounds i8, i8* %3, i64 2
  %79 = bitcast i8* %78 to i16*
  %80 = mul nuw nsw i32 %15, 107
  %81 = add nuw nsw i32 %80, 256
  %82 = load i16, i16* %5, align 2
  %83 = zext i16 %82 to i32
  %84 = mul nuw nsw i32 %83, 149
  %85 = load i16, i16* %79, align 2
  %86 = zext i16 %85 to i32
  %87 = mul nuw nsw i32 %86, 255
  %88 = add nuw nsw i32 %81, %84
  %89 = add nuw nsw i32 %88, %16
  %90 = add nuw nsw i32 %89, %87
  %91 = lshr i32 %90, 9
  %92 = trunc i32 %91 to i16
  store i16 %92, i16* %77, align 2
  %93 = load i16, i16* %30, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %94, 149
  %96 = load i16, i16* %79, align 2
  %97 = zext i16 %96 to i32
  %98 = mul nuw nsw i32 %97, 149
  %99 = add nuw nsw i32 %81, %95
  %100 = add nuw nsw i32 %99, %37
  %101 = add nuw nsw i32 %100, %98
  %102 = lshr i32 %101, 9
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %77, i64 1
  store i16 %103, i16* %104, align 2
  %105 = load i16, i16* %46, align 2
  %106 = zext i16 %105 to i32
  %107 = mul nuw nsw i32 %106, 149
  %108 = load i16, i16* %79, align 2
  %109 = zext i16 %108 to i32
  %110 = mul nuw nsw i32 %109, 85
  %111 = add nuw nsw i32 %81, %107
  %112 = add nuw nsw i32 %111, %53
  %113 = add nuw nsw i32 %112, %110
  %114 = lshr i32 %113, 9
  %115 = trunc i32 %114 to i16
  %116 = getelementptr inbounds i16, i16* %77, i64 2
  store i16 %115, i16* %116, align 2
  %117 = load i16, i16* %62, align 2
  %118 = zext i16 %117 to i32
  %119 = mul nuw nsw i32 %118, 149
  %120 = load i16, i16* %79, align 2
  %121 = zext i16 %120 to i32
  %122 = shl nuw nsw i32 %121, 6
  %123 = add nuw nsw i32 %81, %119
  %124 = add nuw nsw i32 %123, %69
  %125 = add nuw nsw i32 %124, %122
  %126 = lshr i32 %125, 9
  %127 = trunc i32 %126 to i16
  %128 = getelementptr inbounds i16, i16* %77, i64 3
  store i16 %127, i16* %128, align 2
  %129 = getelementptr inbounds i16, i16* %77, i64 %14
  %130 = getelementptr inbounds i8, i8* %3, i64 4
  %131 = bitcast i8* %130 to i16*
  %132 = mul nuw nsw i32 %15, 171
  %133 = add nuw nsw i32 %132, 256
  %134 = load i16, i16* %5, align 2
  %135 = zext i16 %134 to i32
  %136 = mul nuw nsw i32 %135, 85
  %137 = load i16, i16* %131, align 2
  %138 = zext i16 %137 to i32
  %139 = mul nuw nsw i32 %138, 255
  %140 = add nuw nsw i32 %133, %136
  %141 = add nuw nsw i32 %140, %16
  %142 = add nuw nsw i32 %141, %139
  %143 = lshr i32 %142, 9
  %144 = trunc i32 %143 to i16
  store i16 %144, i16* %129, align 2
  %145 = load i16, i16* %30, align 2
  %146 = zext i16 %145 to i32
  %147 = mul nuw nsw i32 %146, 85
  %148 = load i16, i16* %131, align 2
  %149 = zext i16 %148 to i32
  %150 = mul nuw nsw i32 %149, 149
  %151 = add nuw nsw i32 %133, %147
  %152 = add nuw nsw i32 %151, %37
  %153 = add nuw nsw i32 %152, %150
  %154 = lshr i32 %153, 9
  %155 = trunc i32 %154 to i16
  %156 = getelementptr inbounds i16, i16* %129, i64 1
  store i16 %155, i16* %156, align 2
  %157 = load i16, i16* %46, align 2
  %158 = zext i16 %157 to i32
  %159 = mul nuw nsw i32 %158, 85
  %160 = load i16, i16* %131, align 2
  %161 = zext i16 %160 to i32
  %162 = mul nuw nsw i32 %161, 85
  %163 = add nuw nsw i32 %133, %159
  %164 = add nuw nsw i32 %163, %53
  %165 = add nuw nsw i32 %164, %162
  %166 = lshr i32 %165, 9
  %167 = trunc i32 %166 to i16
  %168 = getelementptr inbounds i16, i16* %129, i64 2
  store i16 %167, i16* %168, align 2
  %169 = load i16, i16* %62, align 2
  %170 = zext i16 %169 to i32
  %171 = mul nuw nsw i32 %170, 85
  %172 = load i16, i16* %131, align 2
  %173 = zext i16 %172 to i32
  %174 = shl nuw nsw i32 %173, 6
  %175 = add nuw nsw i32 %133, %171
  %176 = add nuw nsw i32 %175, %69
  %177 = add nuw nsw i32 %176, %174
  %178 = lshr i32 %177, 9
  %179 = trunc i32 %178 to i16
  %180 = getelementptr inbounds i16, i16* %129, i64 3
  store i16 %179, i16* %180, align 2
  %181 = getelementptr inbounds i16, i16* %129, i64 %14
  %182 = getelementptr inbounds i8, i8* %3, i64 6
  %183 = bitcast i8* %182 to i16*
  %184 = mul nuw nsw i32 %15, 192
  %185 = add nuw nsw i32 %184, 256
  %186 = load i16, i16* %5, align 2
  %187 = zext i16 %186 to i32
  %188 = shl nuw nsw i32 %187, 6
  %189 = load i16, i16* %183, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %190, 255
  %192 = add nuw nsw i32 %185, %188
  %193 = add nuw nsw i32 %192, %16
  %194 = add nuw nsw i32 %193, %191
  %195 = lshr i32 %194, 9
  %196 = trunc i32 %195 to i16
  store i16 %196, i16* %181, align 2
  %197 = load i16, i16* %30, align 2
  %198 = zext i16 %197 to i32
  %199 = shl nuw nsw i32 %198, 6
  %200 = load i16, i16* %183, align 2
  %201 = zext i16 %200 to i32
  %202 = mul nuw nsw i32 %201, 149
  %203 = add nuw nsw i32 %185, %199
  %204 = add nuw nsw i32 %203, %37
  %205 = add nuw nsw i32 %204, %202
  %206 = lshr i32 %205, 9
  %207 = trunc i32 %206 to i16
  %208 = getelementptr inbounds i16, i16* %181, i64 1
  store i16 %207, i16* %208, align 2
  %209 = load i16, i16* %46, align 2
  %210 = zext i16 %209 to i32
  %211 = shl nuw nsw i32 %210, 6
  %212 = load i16, i16* %183, align 2
  %213 = zext i16 %212 to i32
  %214 = mul nuw nsw i32 %213, 85
  %215 = add nuw nsw i32 %185, %211
  %216 = add nuw nsw i32 %215, %53
  %217 = add nuw nsw i32 %216, %214
  %218 = lshr i32 %217, 9
  %219 = trunc i32 %218 to i16
  %220 = getelementptr inbounds i16, i16* %181, i64 2
  store i16 %219, i16* %220, align 2
  %221 = load i16, i16* %62, align 2
  %222 = zext i16 %221 to i32
  %223 = shl nuw nsw i32 %222, 6
  %224 = load i16, i16* %183, align 2
  %225 = zext i16 %224 to i32
  %226 = shl nuw nsw i32 %225, 6
  %227 = add nuw nsw i32 %185, %223
  %228 = add nuw nsw i32 %227, %69
  %229 = add nuw nsw i32 %228, %226
  %230 = lshr i32 %229, 9
  %231 = trunc i32 %230 to i16
  %232 = getelementptr inbounds i16, i16* %181, i64 3
  store i16 %231, i16* %232, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 6
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = add nuw nsw i32 %11, 128
  %13 = load i16, i16* %5, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nuw nsw i32 %14, 255
  %16 = add nuw nsw i32 %12, %15
  %17 = lshr i32 %16, 8
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* %9, align 2
  %19 = getelementptr inbounds i8, i8* %2, i64 2
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw nsw i32 %22, 255
  %24 = add nuw nsw i32 %12, %23
  %25 = lshr i32 %24, 8
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds i8, i8* %0, i64 2
  %28 = bitcast i8* %27 to i16*
  store i16 %26, i16* %28, align 2
  %29 = getelementptr inbounds i8, i8* %2, i64 4
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = mul nuw nsw i32 %32, 255
  %34 = add nuw nsw i32 %12, %33
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i16
  %37 = getelementptr inbounds i8, i8* %0, i64 4
  %38 = bitcast i8* %37 to i16*
  store i16 %36, i16* %38, align 2
  %39 = getelementptr inbounds i8, i8* %2, i64 6
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %42, 255
  %44 = add nuw nsw i32 %12, %43
  %45 = lshr i32 %44, 8
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds i8, i8* %0, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %9, i64 %10
  %50 = mul nuw nsw i32 %11, 107
  %51 = add nuw nsw i32 %50, 128
  %52 = load i16, i16* %5, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, 149
  %55 = add nuw nsw i32 %51, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %49, align 2
  %58 = load i16, i16* %20, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, 149
  %61 = add nuw nsw i32 %51, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %49, i64 1
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %30, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, 149
  %68 = add nuw nsw i32 %51, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %49, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %40, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, 149
  %75 = add nuw nsw i32 %51, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %49, i64 3
  store i16 %77, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %49, i64 %10
  %80 = mul nuw nsw i32 %11, 171
  %81 = add nuw nsw i32 %80, 128
  %82 = load i16, i16* %5, align 2
  %83 = zext i16 %82 to i32
  %84 = mul nuw nsw i32 %83, 85
  %85 = add nuw nsw i32 %81, %84
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i16
  store i16 %87, i16* %79, align 2
  %88 = load i16, i16* %20, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %89, 85
  %91 = add nuw nsw i32 %81, %90
  %92 = lshr i32 %91, 8
  %93 = trunc i32 %92 to i16
  %94 = getelementptr inbounds i16, i16* %79, i64 1
  store i16 %93, i16* %94, align 2
  %95 = load i16, i16* %30, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %96, 85
  %98 = add nuw nsw i32 %81, %97
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %79, i64 2
  store i16 %100, i16* %101, align 2
  %102 = load i16, i16* %40, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nuw nsw i32 %103, 85
  %105 = add nuw nsw i32 %81, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i16
  %108 = getelementptr inbounds i16, i16* %79, i64 3
  store i16 %107, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %79, i64 %10
  %110 = mul nuw nsw i32 %11, 192
  %111 = add nuw nsw i32 %110, 128
  %112 = load i16, i16* %5, align 2
  %113 = zext i16 %112 to i32
  %114 = shl nuw nsw i32 %113, 6
  %115 = add nuw nsw i32 %111, %114
  %116 = lshr i32 %115, 8
  %117 = trunc i32 %116 to i16
  store i16 %117, i16* %109, align 2
  %118 = load i16, i16* %20, align 2
  %119 = zext i16 %118 to i32
  %120 = shl nuw nsw i32 %119, 6
  %121 = add nuw nsw i32 %111, %120
  %122 = lshr i32 %121, 8
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds i16, i16* %109, i64 1
  store i16 %123, i16* %124, align 2
  %125 = load i16, i16* %30, align 2
  %126 = zext i16 %125 to i32
  %127 = shl nuw nsw i32 %126, 6
  %128 = add nuw nsw i32 %111, %127
  %129 = lshr i32 %128, 8
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %109, i64 2
  store i16 %130, i16* %131, align 2
  %132 = load i16, i16* %40, align 2
  %133 = zext i16 %132 to i32
  %134 = shl nuw nsw i32 %133, 6
  %135 = add nuw nsw i32 %111, %134
  %136 = lshr i32 %135, 8
  %137 = trunc i32 %136 to i16
  %138 = getelementptr inbounds i16, i16* %109, i64 3
  store i16 %137, i16* %138, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi4EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 6
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = load i16, i16* %5, align 2
  %13 = zext i16 %12 to i32
  %14 = mul nuw nsw i32 %13, 255
  %15 = add nuw nsw i32 %11, 128
  %16 = add nuw nsw i32 %15, %14
  %17 = lshr i32 %16, 8
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* %9, align 2
  %19 = load i16, i16* %5, align 2
  %20 = zext i16 %19 to i32
  %21 = mul nuw nsw i32 %20, 149
  %22 = mul nuw nsw i32 %11, 107
  %23 = add nuw nsw i32 %22, 128
  %24 = add nuw nsw i32 %23, %21
  %25 = lshr i32 %24, 8
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds i8, i8* %0, i64 2
  %28 = bitcast i8* %27 to i16*
  store i16 %26, i16* %28, align 2
  %29 = load i16, i16* %5, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %30, 85
  %32 = mul nuw nsw i32 %11, 171
  %33 = add nuw nsw i32 %32, 128
  %34 = add nuw nsw i32 %33, %31
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i16
  %37 = getelementptr inbounds i8, i8* %0, i64 4
  %38 = bitcast i8* %37 to i16*
  store i16 %36, i16* %38, align 2
  %39 = load i16, i16* %5, align 2
  %40 = zext i16 %39 to i32
  %41 = shl nuw nsw i32 %40, 6
  %42 = mul nuw nsw i32 %11, 192
  %43 = add nuw nsw i32 %42, 128
  %44 = add nuw nsw i32 %43, %41
  %45 = lshr i32 %44, 8
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds i8, i8* %0, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %9, i64 %10
  %50 = getelementptr inbounds i8, i8* %3, i64 2
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, 255
  %55 = add nuw nsw i32 %15, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %49, align 2
  %58 = load i16, i16* %51, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, 149
  %61 = add nuw nsw i32 %23, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %49, i64 1
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %51, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, 85
  %68 = add nuw nsw i32 %33, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %49, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %51, align 2
  %73 = zext i16 %72 to i32
  %74 = shl nuw nsw i32 %73, 6
  %75 = add nuw nsw i32 %43, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %49, i64 3
  store i16 %77, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %49, i64 %10
  %80 = getelementptr inbounds i8, i8* %3, i64 4
  %81 = bitcast i8* %80 to i16*
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = mul nuw nsw i32 %83, 255
  %85 = add nuw nsw i32 %15, %84
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i16
  store i16 %87, i16* %79, align 2
  %88 = load i16, i16* %81, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %89, 149
  %91 = add nuw nsw i32 %23, %90
  %92 = lshr i32 %91, 8
  %93 = trunc i32 %92 to i16
  %94 = getelementptr inbounds i16, i16* %79, i64 1
  store i16 %93, i16* %94, align 2
  %95 = load i16, i16* %81, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %96, 85
  %98 = add nuw nsw i32 %33, %97
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %79, i64 2
  store i16 %100, i16* %101, align 2
  %102 = load i16, i16* %81, align 2
  %103 = zext i16 %102 to i32
  %104 = shl nuw nsw i32 %103, 6
  %105 = add nuw nsw i32 %43, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i16
  %108 = getelementptr inbounds i16, i16* %79, i64 3
  store i16 %107, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %79, i64 %10
  %110 = getelementptr inbounds i8, i8* %3, i64 6
  %111 = bitcast i8* %110 to i16*
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %113, 255
  %115 = add nuw nsw i32 %15, %114
  %116 = lshr i32 %115, 8
  %117 = trunc i32 %116 to i16
  store i16 %117, i16* %109, align 2
  %118 = load i16, i16* %111, align 2
  %119 = zext i16 %118 to i32
  %120 = mul nuw nsw i32 %119, 149
  %121 = add nuw nsw i32 %23, %120
  %122 = lshr i32 %121, 8
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds i16, i16* %109, i64 1
  store i16 %123, i16* %124, align 2
  %125 = load i16, i16* %111, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %126, 85
  %128 = add nuw nsw i32 %33, %127
  %129 = lshr i32 %128, 8
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %109, i64 2
  store i16 %130, i16* %131, align 2
  %132 = load i16, i16* %111, align 2
  %133 = zext i16 %132 to i32
  %134 = shl nuw nsw i32 %133, 6
  %135 = add nuw nsw i32 %43, %134
  %136 = lshr i32 %135, 8
  %137 = trunc i32 %136 to i16
  %138 = getelementptr inbounds i16, i16* %109, i64 3
  store i16 %137, i16* %138, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi8ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  store i16 512, i16* %6, align 2
  %7 = getelementptr inbounds i8, i8* %0, i64 2
  %8 = bitcast i8* %7 to i16*
  store i16 512, i16* %8, align 2
  %9 = getelementptr inbounds i8, i8* %0, i64 4
  %10 = bitcast i8* %9 to i16*
  store i16 512, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %0, i64 6
  %12 = bitcast i8* %11 to i16*
  store i16 512, i16* %12, align 2
  %13 = getelementptr inbounds i16, i16* %6, i64 %5
  store i16 512, i16* %13, align 2
  %14 = getelementptr inbounds i16, i16* %13, i64 1
  store i16 512, i16* %14, align 2
  %15 = getelementptr inbounds i16, i16* %13, i64 2
  store i16 512, i16* %15, align 2
  %16 = getelementptr inbounds i16, i16* %13, i64 3
  store i16 512, i16* %16, align 2
  %17 = getelementptr inbounds i16, i16* %13, i64 %5
  store i16 512, i16* %17, align 2
  %18 = getelementptr inbounds i16, i16* %17, i64 1
  store i16 512, i16* %18, align 2
  %19 = getelementptr inbounds i16, i16* %17, i64 2
  store i16 512, i16* %19, align 2
  %20 = getelementptr inbounds i16, i16* %17, i64 3
  store i16 512, i16* %20, align 2
  %21 = getelementptr inbounds i16, i16* %17, i64 %5
  store i16 512, i16* %21, align 2
  %22 = getelementptr inbounds i16, i16* %21, i64 1
  store i16 512, i16* %22, align 2
  %23 = getelementptr inbounds i16, i16* %21, i64 2
  store i16 512, i16* %23, align 2
  %24 = getelementptr inbounds i16, i16* %21, i64 3
  store i16 512, i16* %24, align 2
  %25 = getelementptr inbounds i16, i16* %21, i64 %5
  store i16 512, i16* %25, align 2
  %26 = getelementptr inbounds i16, i16* %25, i64 1
  store i16 512, i16* %26, align 2
  %27 = getelementptr inbounds i16, i16* %25, i64 2
  store i16 512, i16* %27, align 2
  %28 = getelementptr inbounds i16, i16* %25, i64 3
  store i16 512, i16* %28, align 2
  %29 = getelementptr inbounds i16, i16* %25, i64 %5
  store i16 512, i16* %29, align 2
  %30 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 512, i16* %30, align 2
  %31 = getelementptr inbounds i16, i16* %29, i64 2
  store i16 512, i16* %31, align 2
  %32 = getelementptr inbounds i16, i16* %29, i64 3
  store i16 512, i16* %32, align 2
  %33 = getelementptr inbounds i16, i16* %29, i64 %5
  store i16 512, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %33, i64 1
  store i16 512, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %33, i64 2
  store i16 512, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %33, i64 3
  store i16 512, i16* %36, align 2
  %37 = getelementptr inbounds i16, i16* %33, i64 %5
  store i16 512, i16* %37, align 2
  %38 = getelementptr inbounds i16, i16* %37, i64 1
  store i16 512, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %37, i64 2
  store i16 512, i16* %39, align 2
  %40 = getelementptr inbounds i16, i16* %37, i64 3
  store i16 512, i16* %40, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 2
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = lshr i32 %23, 2
  %25 = bitcast i8* %0 to i16*
  %26 = lshr i64 %1, 1
  %27 = trunc i32 %24 to i16
  store i16 %27, i16* %25, align 2
  %28 = getelementptr inbounds i8, i8* %0, i64 2
  %29 = bitcast i8* %28 to i16*
  store i16 %27, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %0, i64 4
  %31 = bitcast i8* %30 to i16*
  store i16 %27, i16* %31, align 2
  %32 = getelementptr inbounds i8, i8* %0, i64 6
  %33 = bitcast i8* %32 to i16*
  store i16 %27, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %25, i64 %26
  store i16 %27, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %34, i64 1
  store i16 %27, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %34, i64 2
  store i16 %27, i16* %36, align 2
  %37 = getelementptr inbounds i16, i16* %34, i64 3
  store i16 %27, i16* %37, align 2
  %38 = getelementptr inbounds i16, i16* %34, i64 %26
  store i16 %27, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %38, i64 1
  store i16 %27, i16* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 2
  store i16 %27, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %38, i64 3
  store i16 %27, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 %26
  store i16 %27, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %42, i64 1
  store i16 %27, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %42, i64 2
  store i16 %27, i16* %44, align 2
  %45 = getelementptr inbounds i16, i16* %42, i64 3
  store i16 %27, i16* %45, align 2
  %46 = getelementptr inbounds i16, i16* %42, i64 %26
  store i16 %27, i16* %46, align 2
  %47 = getelementptr inbounds i16, i16* %46, i64 1
  store i16 %27, i16* %47, align 2
  %48 = getelementptr inbounds i16, i16* %46, i64 2
  store i16 %27, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %46, i64 3
  store i16 %27, i16* %49, align 2
  %50 = getelementptr inbounds i16, i16* %46, i64 %26
  store i16 %27, i16* %50, align 2
  %51 = getelementptr inbounds i16, i16* %50, i64 1
  store i16 %27, i16* %51, align 2
  %52 = getelementptr inbounds i16, i16* %50, i64 2
  store i16 %27, i16* %52, align 2
  %53 = getelementptr inbounds i16, i16* %50, i64 3
  store i16 %27, i16* %53, align 2
  %54 = getelementptr inbounds i16, i16* %50, i64 %26
  store i16 %27, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %54, i64 1
  store i16 %27, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 2
  store i16 %27, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %54, i64 3
  store i16 %27, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %54, i64 %26
  store i16 %27, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %58, i64 1
  store i16 %27, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %58, i64 2
  store i16 %27, i16* %60, align 2
  %61 = getelementptr inbounds i16, i16* %58, i64 3
  store i16 %27, i16* %61, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 4
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = lshr i32 %43, 3
  %45 = bitcast i8* %0 to i16*
  %46 = lshr i64 %1, 1
  %47 = trunc i32 %44 to i16
  store i16 %47, i16* %45, align 2
  %48 = getelementptr inbounds i8, i8* %0, i64 2
  %49 = bitcast i8* %48 to i16*
  store i16 %47, i16* %49, align 2
  %50 = getelementptr inbounds i8, i8* %0, i64 4
  %51 = bitcast i8* %50 to i16*
  store i16 %47, i16* %51, align 2
  %52 = getelementptr inbounds i8, i8* %0, i64 6
  %53 = bitcast i8* %52 to i16*
  store i16 %47, i16* %53, align 2
  %54 = getelementptr inbounds i16, i16* %45, i64 %46
  store i16 %47, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %54, i64 1
  store i16 %47, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 2
  store i16 %47, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %54, i64 3
  store i16 %47, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %54, i64 %46
  store i16 %47, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %58, i64 1
  store i16 %47, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %58, i64 2
  store i16 %47, i16* %60, align 2
  %61 = getelementptr inbounds i16, i16* %58, i64 3
  store i16 %47, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %58, i64 %46
  store i16 %47, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %62, i64 1
  store i16 %47, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %62, i64 2
  store i16 %47, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %62, i64 3
  store i16 %47, i16* %65, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 %46
  store i16 %47, i16* %66, align 2
  %67 = getelementptr inbounds i16, i16* %66, i64 1
  store i16 %47, i16* %67, align 2
  %68 = getelementptr inbounds i16, i16* %66, i64 2
  store i16 %47, i16* %68, align 2
  %69 = getelementptr inbounds i16, i16* %66, i64 3
  store i16 %47, i16* %69, align 2
  %70 = getelementptr inbounds i16, i16* %66, i64 %46
  store i16 %47, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %70, i64 1
  store i16 %47, i16* %71, align 2
  %72 = getelementptr inbounds i16, i16* %70, i64 2
  store i16 %47, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %70, i64 3
  store i16 %47, i16* %73, align 2
  %74 = getelementptr inbounds i16, i16* %70, i64 %46
  store i16 %47, i16* %74, align 2
  %75 = getelementptr inbounds i16, i16* %74, i64 1
  store i16 %47, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %74, i64 2
  store i16 %47, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %74, i64 3
  store i16 %47, i16* %77, align 2
  %78 = getelementptr inbounds i16, i16* %74, i64 %46
  store i16 %47, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %78, i64 1
  store i16 %47, i16* %79, align 2
  %80 = getelementptr inbounds i16, i16* %78, i64 2
  store i16 %47, i16* %80, align 2
  %81 = getelementptr inbounds i16, i16* %78, i64 3
  store i16 %47, i16* %81, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 6
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = bitcast i8* %3 to i16*
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = add nuw nsw i32 %23, %26
  %28 = getelementptr inbounds i8, i8* %3, i64 2
  %29 = bitcast i8* %28 to i16*
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = add nuw nsw i32 %27, %31
  %33 = getelementptr inbounds i8, i8* %3, i64 4
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = add nuw nsw i32 %32, %36
  %38 = getelementptr inbounds i8, i8* %3, i64 6
  %39 = bitcast i8* %38 to i16*
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = add nuw nsw i32 %37, %41
  %43 = getelementptr inbounds i8, i8* %3, i64 8
  %44 = bitcast i8* %43 to i16*
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = add nuw nsw i32 %42, %46
  %48 = getelementptr inbounds i8, i8* %3, i64 10
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nuw nsw i32 %47, %51
  %53 = getelementptr inbounds i8, i8* %3, i64 12
  %54 = bitcast i8* %53 to i16*
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = add nuw nsw i32 %52, %56
  %58 = getelementptr inbounds i8, i8* %3, i64 14
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = add nuw nsw i32 %57, %61
  %63 = udiv i32 %62, 12
  %64 = bitcast i8* %0 to i16*
  %65 = lshr i64 %1, 1
  %66 = trunc i32 %63 to i16
  store i16 %66, i16* %64, align 2
  %67 = getelementptr inbounds i8, i8* %0, i64 2
  %68 = bitcast i8* %67 to i16*
  store i16 %66, i16* %68, align 2
  %69 = getelementptr inbounds i8, i8* %0, i64 4
  %70 = bitcast i8* %69 to i16*
  store i16 %66, i16* %70, align 2
  %71 = getelementptr inbounds i8, i8* %0, i64 6
  %72 = bitcast i8* %71 to i16*
  store i16 %66, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %64, i64 %65
  store i16 %66, i16* %73, align 2
  %74 = getelementptr inbounds i16, i16* %73, i64 1
  store i16 %66, i16* %74, align 2
  %75 = getelementptr inbounds i16, i16* %73, i64 2
  store i16 %66, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %73, i64 3
  store i16 %66, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %73, i64 %65
  store i16 %66, i16* %77, align 2
  %78 = getelementptr inbounds i16, i16* %77, i64 1
  store i16 %66, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %77, i64 2
  store i16 %66, i16* %79, align 2
  %80 = getelementptr inbounds i16, i16* %77, i64 3
  store i16 %66, i16* %80, align 2
  %81 = getelementptr inbounds i16, i16* %77, i64 %65
  store i16 %66, i16* %81, align 2
  %82 = getelementptr inbounds i16, i16* %81, i64 1
  store i16 %66, i16* %82, align 2
  %83 = getelementptr inbounds i16, i16* %81, i64 2
  store i16 %66, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %81, i64 3
  store i16 %66, i16* %84, align 2
  %85 = getelementptr inbounds i16, i16* %81, i64 %65
  store i16 %66, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %85, i64 1
  store i16 %66, i16* %86, align 2
  %87 = getelementptr inbounds i16, i16* %85, i64 2
  store i16 %66, i16* %87, align 2
  %88 = getelementptr inbounds i16, i16* %85, i64 3
  store i16 %66, i16* %88, align 2
  %89 = getelementptr inbounds i16, i16* %85, i64 %65
  store i16 %66, i16* %89, align 2
  %90 = getelementptr inbounds i16, i16* %89, i64 1
  store i16 %66, i16* %90, align 2
  %91 = getelementptr inbounds i16, i16* %89, i64 2
  store i16 %66, i16* %91, align 2
  %92 = getelementptr inbounds i16, i16* %89, i64 3
  store i16 %66, i16* %92, align 2
  %93 = getelementptr inbounds i16, i16* %89, i64 %65
  store i16 %66, i16* %93, align 2
  %94 = getelementptr inbounds i16, i16* %93, i64 1
  store i16 %66, i16* %94, align 2
  %95 = getelementptr inbounds i16, i16* %93, i64 2
  store i16 %66, i16* %95, align 2
  %96 = getelementptr inbounds i16, i16* %93, i64 3
  store i16 %66, i16* %96, align 2
  %97 = getelementptr inbounds i16, i16* %93, i64 %65
  store i16 %66, i16* %97, align 2
  %98 = getelementptr inbounds i16, i16* %97, i64 1
  store i16 %66, i16* %98, align 2
  %99 = getelementptr inbounds i16, i16* %97, i64 2
  store i16 %66, i16* %99, align 2
  %100 = getelementptr inbounds i16, i16* %97, i64 3
  store i16 %66, i16* %100, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i64*
  %6 = bitcast i8* %0 to i64*
  %7 = load i64, i64* %5, align 1
  store i64 %7, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %5, align 1
  store i64 %10, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %5, align 1
  store i64 %13, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %5, align 1
  store i64 %16, i64* %15, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %5, align 1
  store i64 %19, i64* %18, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 %1
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %5, align 1
  store i64 %22, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %20, i64 %1
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %5, align 1
  store i64 %25, i64* %24, align 1
  %26 = getelementptr inbounds i8, i8* %23, i64 %1
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %5, align 1
  store i64 %28, i64* %27, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %6, align 2
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  %10 = bitcast i8* %9 to i16*
  store i16 %8, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %0, i64 4
  %12 = bitcast i8* %11 to i16*
  store i16 %8, i16* %12, align 2
  %13 = getelementptr inbounds i8, i8* %0, i64 6
  %14 = bitcast i8* %13 to i16*
  store i16 %8, i16* %14, align 2
  %15 = getelementptr inbounds i16, i16* %6, i64 %7
  %16 = getelementptr inbounds i8, i8* %3, i64 2
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 2
  store i16 %18, i16* %15, align 2
  %19 = getelementptr inbounds i16, i16* %15, i64 1
  store i16 %18, i16* %19, align 2
  %20 = getelementptr inbounds i16, i16* %15, i64 2
  store i16 %18, i16* %20, align 2
  %21 = getelementptr inbounds i16, i16* %15, i64 3
  store i16 %18, i16* %21, align 2
  %22 = getelementptr inbounds i16, i16* %15, i64 %7
  %23 = getelementptr inbounds i8, i8* %3, i64 4
  %24 = bitcast i8* %23 to i16*
  %25 = load i16, i16* %24, align 2
  store i16 %25, i16* %22, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 1
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i16, i16* %22, i64 2
  store i16 %25, i16* %27, align 2
  %28 = getelementptr inbounds i16, i16* %22, i64 3
  store i16 %25, i16* %28, align 2
  %29 = getelementptr inbounds i16, i16* %22, i64 %7
  %30 = getelementptr inbounds i8, i8* %3, i64 6
  %31 = bitcast i8* %30 to i16*
  %32 = load i16, i16* %31, align 2
  store i16 %32, i16* %29, align 2
  %33 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 %32, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %29, i64 2
  store i16 %32, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %29, i64 3
  store i16 %32, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %29, i64 %7
  %37 = getelementptr inbounds i8, i8* %3, i64 8
  %38 = bitcast i8* %37 to i16*
  %39 = load i16, i16* %38, align 2
  store i16 %39, i16* %36, align 2
  %40 = getelementptr inbounds i16, i16* %36, i64 1
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %36, i64 2
  store i16 %39, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %36, i64 3
  store i16 %39, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %36, i64 %7
  %44 = getelementptr inbounds i8, i8* %3, i64 10
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  store i16 %46, i16* %43, align 2
  %47 = getelementptr inbounds i16, i16* %43, i64 1
  store i16 %46, i16* %47, align 2
  %48 = getelementptr inbounds i16, i16* %43, i64 2
  store i16 %46, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %43, i64 3
  store i16 %46, i16* %49, align 2
  %50 = getelementptr inbounds i16, i16* %43, i64 %7
  %51 = getelementptr inbounds i8, i8* %3, i64 12
  %52 = bitcast i8* %51 to i16*
  %53 = load i16, i16* %52, align 2
  store i16 %53, i16* %50, align 2
  %54 = getelementptr inbounds i16, i16* %50, i64 1
  store i16 %53, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %50, i64 2
  store i16 %53, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %50, i64 3
  store i16 %53, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %50, i64 %7
  %58 = getelementptr inbounds i8, i8* %3, i64 14
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  store i16 %60, i16* %57, align 2
  %61 = getelementptr inbounds i16, i16* %57, i64 1
  store i16 %60, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %57, i64 2
  store i16 %60, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %57, i64 3
  store i16 %60, i16* %63, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  %14 = getelementptr inbounds i8, i8* %2, i64 2
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 4
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 6
  %19 = bitcast i8* %18 to i16*
  br label %21

20:                                               ; preds = %110
  ret void

21:                                               ; preds = %110, %4
  %22 = phi i64 [ 0, %4 ], [ %112, %110 ]
  %23 = phi i16* [ %12, %4 ], [ %111, %110 ]
  %24 = getelementptr inbounds i16, i16* %6, i64 %22
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = sub nsw i32 %26, %10
  %28 = icmp slt i32 %27, 0
  %29 = sub nsw i32 0, %27
  %30 = select i1 %28, i32 %29, i32 %27
  %31 = sub nsw i32 %26, %11
  %32 = load i16, i16* %5, align 2
  %33 = zext i16 %32 to i32
  %34 = sub nsw i32 %33, %10
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = add nsw i32 %31, %33
  %39 = icmp slt i32 %38, 0
  %40 = sub nsw i32 0, %38
  %41 = select i1 %39, i32 %40, i32 %38
  %42 = icmp sgt i32 %37, %30
  %43 = icmp sgt i32 %37, %41
  %44 = or i1 %42, %43
  %45 = icmp sgt i32 %30, %41
  %46 = select i1 %45, i16 %9, i16 %32
  %47 = select i1 %44, i16 %46, i16 %25
  store i16 %47, i16* %23, align 2
  %48 = load i16, i16* %15, align 2
  %49 = zext i16 %48 to i32
  %50 = sub nsw i32 %49, %10
  %51 = icmp slt i32 %50, 0
  %52 = sub nsw i32 0, %50
  %53 = select i1 %51, i32 %52, i32 %50
  %54 = add nsw i32 %31, %49
  %55 = icmp slt i32 %54, 0
  %56 = sub nsw i32 0, %54
  %57 = select i1 %55, i32 %56, i32 %54
  %58 = icmp sgt i32 %53, %30
  %59 = icmp sgt i32 %53, %57
  %60 = or i1 %58, %59
  br i1 %60, label %63, label %61

61:                                               ; preds = %21
  %62 = getelementptr inbounds i16, i16* %23, i64 1
  store i16 %25, i16* %62, align 2
  br label %68

63:                                               ; preds = %21
  %64 = icmp sgt i32 %30, %57
  %65 = getelementptr inbounds i16, i16* %23, i64 1
  br i1 %64, label %67, label %66

66:                                               ; preds = %63
  store i16 %48, i16* %65, align 2
  br label %68

67:                                               ; preds = %63
  store i16 %9, i16* %65, align 2
  br label %68

68:                                               ; preds = %67, %66, %61
  %69 = load i16, i16* %17, align 2
  %70 = zext i16 %69 to i32
  %71 = sub nsw i32 %70, %10
  %72 = icmp slt i32 %71, 0
  %73 = sub nsw i32 0, %71
  %74 = select i1 %72, i32 %73, i32 %71
  %75 = add nsw i32 %31, %70
  %76 = icmp slt i32 %75, 0
  %77 = sub nsw i32 0, %75
  %78 = select i1 %76, i32 %77, i32 %75
  %79 = icmp sgt i32 %74, %30
  %80 = icmp sgt i32 %74, %78
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %68
  %83 = getelementptr inbounds i16, i16* %23, i64 2
  store i16 %25, i16* %83, align 2
  br label %89

84:                                               ; preds = %68
  %85 = icmp sgt i32 %30, %78
  %86 = getelementptr inbounds i16, i16* %23, i64 2
  br i1 %85, label %88, label %87

87:                                               ; preds = %84
  store i16 %69, i16* %86, align 2
  br label %89

88:                                               ; preds = %84
  store i16 %9, i16* %86, align 2
  br label %89

89:                                               ; preds = %88, %87, %82
  %90 = load i16, i16* %19, align 2
  %91 = zext i16 %90 to i32
  %92 = sub nsw i32 %91, %10
  %93 = icmp slt i32 %92, 0
  %94 = sub nsw i32 0, %92
  %95 = select i1 %93, i32 %94, i32 %92
  %96 = add nsw i32 %31, %91
  %97 = icmp slt i32 %96, 0
  %98 = sub nsw i32 0, %96
  %99 = select i1 %97, i32 %98, i32 %96
  %100 = icmp sgt i32 %95, %30
  %101 = icmp sgt i32 %95, %99
  %102 = or i1 %100, %101
  br i1 %102, label %105, label %103

103:                                              ; preds = %89
  %104 = getelementptr inbounds i16, i16* %23, i64 3
  store i16 %25, i16* %104, align 2
  br label %110

105:                                              ; preds = %89
  %106 = icmp sgt i32 %30, %99
  %107 = getelementptr inbounds i16, i16* %23, i64 3
  br i1 %106, label %109, label %108

108:                                              ; preds = %105
  store i16 %90, i16* %107, align 2
  br label %110

109:                                              ; preds = %105
  store i16 %9, i16* %107, align 2
  br label %110

110:                                              ; preds = %109, %108, %103
  %111 = getelementptr inbounds i16, i16* %23, i64 %13
  %112 = add nuw nsw i64 %22, 1
  %113 = icmp eq i64 %112, 8
  br i1 %113, label %20, label %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 6
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 14
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = getelementptr inbounds i8, i8* %2, i64 2
  %18 = bitcast i8* %17 to i16*
  %19 = mul nuw nsw i32 %16, 107
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = mul nuw nsw i32 %16, 171
  %23 = getelementptr inbounds i8, i8* %2, i64 6
  %24 = bitcast i8* %23 to i16*
  %25 = mul nuw nsw i32 %16, 192
  br label %26

26:                                               ; preds = %26, %4
  %27 = phi i64 [ 0, %4 ], [ %85, %26 ]
  %28 = phi i16* [ %13, %4 ], [ %84, %26 ]
  %29 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %27
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i16, i16* %6, i64 %27
  %33 = sub i8 0, %30
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, %15
  %36 = add nuw nsw i32 %35, 256
  %37 = load i16, i16* %5, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %38, %31
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %41, 255
  %43 = add nuw nsw i32 %36, %39
  %44 = add nuw nsw i32 %43, %16
  %45 = add nuw nsw i32 %44, %42
  %46 = lshr i32 %45, 9
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %28, align 2
  %48 = load i16, i16* %18, align 2
  %49 = zext i16 %48 to i32
  %50 = mul nuw nsw i32 %49, %31
  %51 = load i16, i16* %32, align 2
  %52 = zext i16 %51 to i32
  %53 = mul nuw nsw i32 %52, 149
  %54 = add nuw nsw i32 %36, %50
  %55 = add nuw nsw i32 %54, %19
  %56 = add nuw nsw i32 %55, %53
  %57 = lshr i32 %56, 9
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %58, i16* %59, align 2
  %60 = load i16, i16* %21, align 2
  %61 = zext i16 %60 to i32
  %62 = mul nuw nsw i32 %61, %31
  %63 = load i16, i16* %32, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, 85
  %66 = add nuw nsw i32 %36, %62
  %67 = add nuw nsw i32 %66, %22
  %68 = add nuw nsw i32 %67, %65
  %69 = lshr i32 %68, 9
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %24, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %31
  %75 = load i16, i16* %32, align 2
  %76 = zext i16 %75 to i32
  %77 = shl nuw nsw i32 %76, 6
  %78 = add nuw nsw i32 %36, %74
  %79 = add nuw nsw i32 %78, %25
  %80 = add nuw nsw i32 %79, %77
  %81 = lshr i32 %80, 9
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %82, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %28, i64 %14
  %85 = add nuw nsw i64 %27, 1
  %86 = icmp eq i64 %85, 8
  br i1 %86, label %87, label %26

87:                                               ; preds = %26
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 14
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = add nuw nsw i32 %11, 128
  %13 = load i16, i16* %5, align 2
  %14 = zext i16 %13 to i32
  %15 = mul nuw nsw i32 %14, 255
  %16 = add nuw nsw i32 %12, %15
  %17 = lshr i32 %16, 8
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* %9, align 2
  %19 = getelementptr inbounds i8, i8* %2, i64 2
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = mul nuw nsw i32 %22, 255
  %24 = add nuw nsw i32 %12, %23
  %25 = lshr i32 %24, 8
  %26 = trunc i32 %25 to i16
  %27 = getelementptr inbounds i8, i8* %0, i64 2
  %28 = bitcast i8* %27 to i16*
  store i16 %26, i16* %28, align 2
  %29 = getelementptr inbounds i8, i8* %2, i64 4
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = mul nuw nsw i32 %32, 255
  %34 = add nuw nsw i32 %12, %33
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i16
  %37 = getelementptr inbounds i8, i8* %0, i64 4
  %38 = bitcast i8* %37 to i16*
  store i16 %36, i16* %38, align 2
  %39 = getelementptr inbounds i8, i8* %2, i64 6
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %42, 255
  %44 = add nuw nsw i32 %12, %43
  %45 = lshr i32 %44, 8
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds i8, i8* %0, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %9, i64 %10
  %50 = mul nuw nsw i32 %11, 59
  %51 = add nuw nsw i32 %50, 128
  %52 = load i16, i16* %5, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, 197
  %55 = add nuw nsw i32 %51, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %49, align 2
  %58 = load i16, i16* %20, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, 197
  %61 = add nuw nsw i32 %51, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %49, i64 1
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %30, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, 197
  %68 = add nuw nsw i32 %51, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %49, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %40, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, 197
  %75 = add nuw nsw i32 %51, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %49, i64 3
  store i16 %77, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %49, i64 %10
  %80 = mul nuw nsw i32 %11, 110
  %81 = add nuw nsw i32 %80, 128
  %82 = load i16, i16* %5, align 2
  %83 = zext i16 %82 to i32
  %84 = mul nuw nsw i32 %83, 146
  %85 = add nuw nsw i32 %81, %84
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i16
  store i16 %87, i16* %79, align 2
  %88 = load i16, i16* %20, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %89, 146
  %91 = add nuw nsw i32 %81, %90
  %92 = lshr i32 %91, 8
  %93 = trunc i32 %92 to i16
  %94 = getelementptr inbounds i16, i16* %79, i64 1
  store i16 %93, i16* %94, align 2
  %95 = load i16, i16* %30, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %96, 146
  %98 = add nuw nsw i32 %81, %97
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %79, i64 2
  store i16 %100, i16* %101, align 2
  %102 = load i16, i16* %40, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nuw nsw i32 %103, 146
  %105 = add nuw nsw i32 %81, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i16
  %108 = getelementptr inbounds i16, i16* %79, i64 3
  store i16 %107, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %79, i64 %10
  %110 = mul nuw nsw i32 %11, 151
  %111 = add nuw nsw i32 %110, 128
  %112 = load i16, i16* %5, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %113, 105
  %115 = add nuw nsw i32 %111, %114
  %116 = lshr i32 %115, 8
  %117 = trunc i32 %116 to i16
  store i16 %117, i16* %109, align 2
  %118 = load i16, i16* %20, align 2
  %119 = zext i16 %118 to i32
  %120 = mul nuw nsw i32 %119, 105
  %121 = add nuw nsw i32 %111, %120
  %122 = lshr i32 %121, 8
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds i16, i16* %109, i64 1
  store i16 %123, i16* %124, align 2
  %125 = load i16, i16* %30, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %126, 105
  %128 = add nuw nsw i32 %111, %127
  %129 = lshr i32 %128, 8
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %109, i64 2
  store i16 %130, i16* %131, align 2
  %132 = load i16, i16* %40, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %133, 105
  %135 = add nuw nsw i32 %111, %134
  %136 = lshr i32 %135, 8
  %137 = trunc i32 %136 to i16
  %138 = getelementptr inbounds i16, i16* %109, i64 3
  store i16 %137, i16* %138, align 2
  %139 = getelementptr inbounds i16, i16* %109, i64 %10
  %140 = mul nuw nsw i32 %11, 183
  %141 = add nuw nsw i32 %140, 128
  %142 = load i16, i16* %5, align 2
  %143 = zext i16 %142 to i32
  %144 = mul nuw nsw i32 %143, 73
  %145 = add nuw nsw i32 %141, %144
  %146 = lshr i32 %145, 8
  %147 = trunc i32 %146 to i16
  store i16 %147, i16* %139, align 2
  %148 = load i16, i16* %20, align 2
  %149 = zext i16 %148 to i32
  %150 = mul nuw nsw i32 %149, 73
  %151 = add nuw nsw i32 %141, %150
  %152 = lshr i32 %151, 8
  %153 = trunc i32 %152 to i16
  %154 = getelementptr inbounds i16, i16* %139, i64 1
  store i16 %153, i16* %154, align 2
  %155 = load i16, i16* %30, align 2
  %156 = zext i16 %155 to i32
  %157 = mul nuw nsw i32 %156, 73
  %158 = add nuw nsw i32 %141, %157
  %159 = lshr i32 %158, 8
  %160 = trunc i32 %159 to i16
  %161 = getelementptr inbounds i16, i16* %139, i64 2
  store i16 %160, i16* %161, align 2
  %162 = load i16, i16* %40, align 2
  %163 = zext i16 %162 to i32
  %164 = mul nuw nsw i32 %163, 73
  %165 = add nuw nsw i32 %141, %164
  %166 = lshr i32 %165, 8
  %167 = trunc i32 %166 to i16
  %168 = getelementptr inbounds i16, i16* %139, i64 3
  store i16 %167, i16* %168, align 2
  %169 = getelementptr inbounds i16, i16* %139, i64 %10
  %170 = mul nuw nsw i32 %11, 206
  %171 = add nuw nsw i32 %170, 128
  %172 = load i16, i16* %5, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %173, 50
  %175 = add nuw nsw i32 %171, %174
  %176 = lshr i32 %175, 8
  %177 = trunc i32 %176 to i16
  store i16 %177, i16* %169, align 2
  %178 = load i16, i16* %20, align 2
  %179 = zext i16 %178 to i32
  %180 = mul nuw nsw i32 %179, 50
  %181 = add nuw nsw i32 %171, %180
  %182 = lshr i32 %181, 8
  %183 = trunc i32 %182 to i16
  %184 = getelementptr inbounds i16, i16* %169, i64 1
  store i16 %183, i16* %184, align 2
  %185 = load i16, i16* %30, align 2
  %186 = zext i16 %185 to i32
  %187 = mul nuw nsw i32 %186, 50
  %188 = add nuw nsw i32 %171, %187
  %189 = lshr i32 %188, 8
  %190 = trunc i32 %189 to i16
  %191 = getelementptr inbounds i16, i16* %169, i64 2
  store i16 %190, i16* %191, align 2
  %192 = load i16, i16* %40, align 2
  %193 = zext i16 %192 to i32
  %194 = mul nuw nsw i32 %193, 50
  %195 = add nuw nsw i32 %171, %194
  %196 = lshr i32 %195, 8
  %197 = trunc i32 %196 to i16
  %198 = getelementptr inbounds i16, i16* %169, i64 3
  store i16 %197, i16* %198, align 2
  %199 = getelementptr inbounds i16, i16* %169, i64 %10
  %200 = mul nuw nsw i32 %11, 219
  %201 = add nuw nsw i32 %200, 128
  %202 = load i16, i16* %5, align 2
  %203 = zext i16 %202 to i32
  %204 = mul nuw nsw i32 %203, 37
  %205 = add nuw nsw i32 %201, %204
  %206 = lshr i32 %205, 8
  %207 = trunc i32 %206 to i16
  store i16 %207, i16* %199, align 2
  %208 = load i16, i16* %20, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nuw nsw i32 %209, 37
  %211 = add nuw nsw i32 %201, %210
  %212 = lshr i32 %211, 8
  %213 = trunc i32 %212 to i16
  %214 = getelementptr inbounds i16, i16* %199, i64 1
  store i16 %213, i16* %214, align 2
  %215 = load i16, i16* %30, align 2
  %216 = zext i16 %215 to i32
  %217 = mul nuw nsw i32 %216, 37
  %218 = add nuw nsw i32 %201, %217
  %219 = lshr i32 %218, 8
  %220 = trunc i32 %219 to i16
  %221 = getelementptr inbounds i16, i16* %199, i64 2
  store i16 %220, i16* %221, align 2
  %222 = load i16, i16* %40, align 2
  %223 = zext i16 %222 to i32
  %224 = mul nuw nsw i32 %223, 37
  %225 = add nuw nsw i32 %201, %224
  %226 = lshr i32 %225, 8
  %227 = trunc i32 %226 to i16
  %228 = getelementptr inbounds i16, i16* %199, i64 3
  store i16 %227, i16* %228, align 2
  %229 = getelementptr inbounds i16, i16* %199, i64 %10
  %230 = mul nuw nsw i32 %11, 224
  %231 = add nuw nsw i32 %230, 128
  %232 = load i16, i16* %5, align 2
  %233 = zext i16 %232 to i32
  %234 = shl nuw nsw i32 %233, 5
  %235 = add nuw nsw i32 %231, %234
  %236 = lshr i32 %235, 8
  %237 = trunc i32 %236 to i16
  store i16 %237, i16* %229, align 2
  %238 = load i16, i16* %20, align 2
  %239 = zext i16 %238 to i32
  %240 = shl nuw nsw i32 %239, 5
  %241 = add nuw nsw i32 %231, %240
  %242 = lshr i32 %241, 8
  %243 = trunc i32 %242 to i16
  %244 = getelementptr inbounds i16, i16* %229, i64 1
  store i16 %243, i16* %244, align 2
  %245 = load i16, i16* %30, align 2
  %246 = zext i16 %245 to i32
  %247 = shl nuw nsw i32 %246, 5
  %248 = add nuw nsw i32 %231, %247
  %249 = lshr i32 %248, 8
  %250 = trunc i32 %249 to i16
  %251 = getelementptr inbounds i16, i16* %229, i64 2
  store i16 %250, i16* %251, align 2
  %252 = load i16, i16* %40, align 2
  %253 = zext i16 %252 to i32
  %254 = shl nuw nsw i32 %253, 5
  %255 = add nuw nsw i32 %231, %254
  %256 = lshr i32 %255, 8
  %257 = trunc i32 %256 to i16
  %258 = getelementptr inbounds i16, i16* %229, i64 3
  store i16 %257, i16* %258, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi8EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 6
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %11, 107
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %11, 171
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %11, 192
  %18 = add nuw nsw i32 %17, 128
  %19 = load i16, i16* %5, align 2
  %20 = zext i16 %19 to i32
  %21 = mul nuw nsw i32 %20, 255
  %22 = add nuw nsw i32 %12, %21
  %23 = lshr i32 %22, 8
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %9, align 2
  %25 = load i16, i16* %5, align 2
  %26 = zext i16 %25 to i32
  %27 = mul nuw nsw i32 %26, 149
  %28 = add nuw nsw i32 %14, %27
  %29 = lshr i32 %28, 8
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds i8, i8* %0, i64 2
  %32 = bitcast i8* %31 to i16*
  store i16 %30, i16* %32, align 2
  %33 = load i16, i16* %5, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %34, 85
  %36 = add nuw nsw i32 %16, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i16
  %39 = getelementptr inbounds i8, i8* %0, i64 4
  %40 = bitcast i8* %39 to i16*
  store i16 %38, i16* %40, align 2
  %41 = load i16, i16* %5, align 2
  %42 = zext i16 %41 to i32
  %43 = shl nuw nsw i32 %42, 6
  %44 = add nuw nsw i32 %18, %43
  %45 = lshr i32 %44, 8
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds i8, i8* %0, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %9, i64 %10
  %50 = getelementptr inbounds i8, i8* %3, i64 2
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, 255
  %55 = add nuw nsw i32 %12, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %49, align 2
  %58 = load i16, i16* %51, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, 149
  %61 = add nuw nsw i32 %14, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %49, i64 1
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %51, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, 85
  %68 = add nuw nsw i32 %16, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %49, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %51, align 2
  %73 = zext i16 %72 to i32
  %74 = shl nuw nsw i32 %73, 6
  %75 = add nuw nsw i32 %18, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %49, i64 3
  store i16 %77, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %49, i64 %10
  %80 = getelementptr inbounds i8, i8* %3, i64 4
  %81 = bitcast i8* %80 to i16*
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = mul nuw nsw i32 %83, 255
  %85 = add nuw nsw i32 %12, %84
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i16
  store i16 %87, i16* %79, align 2
  %88 = load i16, i16* %81, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %89, 149
  %91 = add nuw nsw i32 %14, %90
  %92 = lshr i32 %91, 8
  %93 = trunc i32 %92 to i16
  %94 = getelementptr inbounds i16, i16* %79, i64 1
  store i16 %93, i16* %94, align 2
  %95 = load i16, i16* %81, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %96, 85
  %98 = add nuw nsw i32 %16, %97
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %79, i64 2
  store i16 %100, i16* %101, align 2
  %102 = load i16, i16* %81, align 2
  %103 = zext i16 %102 to i32
  %104 = shl nuw nsw i32 %103, 6
  %105 = add nuw nsw i32 %18, %104
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i16
  %108 = getelementptr inbounds i16, i16* %79, i64 3
  store i16 %107, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %79, i64 %10
  %110 = getelementptr inbounds i8, i8* %3, i64 6
  %111 = bitcast i8* %110 to i16*
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %113, 255
  %115 = add nuw nsw i32 %12, %114
  %116 = lshr i32 %115, 8
  %117 = trunc i32 %116 to i16
  store i16 %117, i16* %109, align 2
  %118 = load i16, i16* %111, align 2
  %119 = zext i16 %118 to i32
  %120 = mul nuw nsw i32 %119, 149
  %121 = add nuw nsw i32 %14, %120
  %122 = lshr i32 %121, 8
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds i16, i16* %109, i64 1
  store i16 %123, i16* %124, align 2
  %125 = load i16, i16* %111, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %126, 85
  %128 = add nuw nsw i32 %16, %127
  %129 = lshr i32 %128, 8
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %109, i64 2
  store i16 %130, i16* %131, align 2
  %132 = load i16, i16* %111, align 2
  %133 = zext i16 %132 to i32
  %134 = shl nuw nsw i32 %133, 6
  %135 = add nuw nsw i32 %18, %134
  %136 = lshr i32 %135, 8
  %137 = trunc i32 %136 to i16
  %138 = getelementptr inbounds i16, i16* %109, i64 3
  store i16 %137, i16* %138, align 2
  %139 = getelementptr inbounds i16, i16* %109, i64 %10
  %140 = getelementptr inbounds i8, i8* %3, i64 8
  %141 = bitcast i8* %140 to i16*
  %142 = load i16, i16* %141, align 2
  %143 = zext i16 %142 to i32
  %144 = mul nuw nsw i32 %143, 255
  %145 = add nuw nsw i32 %12, %144
  %146 = lshr i32 %145, 8
  %147 = trunc i32 %146 to i16
  store i16 %147, i16* %139, align 2
  %148 = load i16, i16* %141, align 2
  %149 = zext i16 %148 to i32
  %150 = mul nuw nsw i32 %149, 149
  %151 = add nuw nsw i32 %14, %150
  %152 = lshr i32 %151, 8
  %153 = trunc i32 %152 to i16
  %154 = getelementptr inbounds i16, i16* %139, i64 1
  store i16 %153, i16* %154, align 2
  %155 = load i16, i16* %141, align 2
  %156 = zext i16 %155 to i32
  %157 = mul nuw nsw i32 %156, 85
  %158 = add nuw nsw i32 %16, %157
  %159 = lshr i32 %158, 8
  %160 = trunc i32 %159 to i16
  %161 = getelementptr inbounds i16, i16* %139, i64 2
  store i16 %160, i16* %161, align 2
  %162 = load i16, i16* %141, align 2
  %163 = zext i16 %162 to i32
  %164 = shl nuw nsw i32 %163, 6
  %165 = add nuw nsw i32 %18, %164
  %166 = lshr i32 %165, 8
  %167 = trunc i32 %166 to i16
  %168 = getelementptr inbounds i16, i16* %139, i64 3
  store i16 %167, i16* %168, align 2
  %169 = getelementptr inbounds i16, i16* %139, i64 %10
  %170 = getelementptr inbounds i8, i8* %3, i64 10
  %171 = bitcast i8* %170 to i16*
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %173, 255
  %175 = add nuw nsw i32 %12, %174
  %176 = lshr i32 %175, 8
  %177 = trunc i32 %176 to i16
  store i16 %177, i16* %169, align 2
  %178 = load i16, i16* %171, align 2
  %179 = zext i16 %178 to i32
  %180 = mul nuw nsw i32 %179, 149
  %181 = add nuw nsw i32 %14, %180
  %182 = lshr i32 %181, 8
  %183 = trunc i32 %182 to i16
  %184 = getelementptr inbounds i16, i16* %169, i64 1
  store i16 %183, i16* %184, align 2
  %185 = load i16, i16* %171, align 2
  %186 = zext i16 %185 to i32
  %187 = mul nuw nsw i32 %186, 85
  %188 = add nuw nsw i32 %16, %187
  %189 = lshr i32 %188, 8
  %190 = trunc i32 %189 to i16
  %191 = getelementptr inbounds i16, i16* %169, i64 2
  store i16 %190, i16* %191, align 2
  %192 = load i16, i16* %171, align 2
  %193 = zext i16 %192 to i32
  %194 = shl nuw nsw i32 %193, 6
  %195 = add nuw nsw i32 %18, %194
  %196 = lshr i32 %195, 8
  %197 = trunc i32 %196 to i16
  %198 = getelementptr inbounds i16, i16* %169, i64 3
  store i16 %197, i16* %198, align 2
  %199 = getelementptr inbounds i16, i16* %169, i64 %10
  %200 = getelementptr inbounds i8, i8* %3, i64 12
  %201 = bitcast i8* %200 to i16*
  %202 = load i16, i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = mul nuw nsw i32 %203, 255
  %205 = add nuw nsw i32 %12, %204
  %206 = lshr i32 %205, 8
  %207 = trunc i32 %206 to i16
  store i16 %207, i16* %199, align 2
  %208 = load i16, i16* %201, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nuw nsw i32 %209, 149
  %211 = add nuw nsw i32 %14, %210
  %212 = lshr i32 %211, 8
  %213 = trunc i32 %212 to i16
  %214 = getelementptr inbounds i16, i16* %199, i64 1
  store i16 %213, i16* %214, align 2
  %215 = load i16, i16* %201, align 2
  %216 = zext i16 %215 to i32
  %217 = mul nuw nsw i32 %216, 85
  %218 = add nuw nsw i32 %16, %217
  %219 = lshr i32 %218, 8
  %220 = trunc i32 %219 to i16
  %221 = getelementptr inbounds i16, i16* %199, i64 2
  store i16 %220, i16* %221, align 2
  %222 = load i16, i16* %201, align 2
  %223 = zext i16 %222 to i32
  %224 = shl nuw nsw i32 %223, 6
  %225 = add nuw nsw i32 %18, %224
  %226 = lshr i32 %225, 8
  %227 = trunc i32 %226 to i16
  %228 = getelementptr inbounds i16, i16* %199, i64 3
  store i16 %227, i16* %228, align 2
  %229 = getelementptr inbounds i16, i16* %199, i64 %10
  %230 = getelementptr inbounds i8, i8* %3, i64 14
  %231 = bitcast i8* %230 to i16*
  %232 = load i16, i16* %231, align 2
  %233 = zext i16 %232 to i32
  %234 = mul nuw nsw i32 %233, 255
  %235 = add nuw nsw i32 %12, %234
  %236 = lshr i32 %235, 8
  %237 = trunc i32 %236 to i16
  store i16 %237, i16* %229, align 2
  %238 = load i16, i16* %231, align 2
  %239 = zext i16 %238 to i32
  %240 = mul nuw nsw i32 %239, 149
  %241 = add nuw nsw i32 %14, %240
  %242 = lshr i32 %241, 8
  %243 = trunc i32 %242 to i16
  %244 = getelementptr inbounds i16, i16* %229, i64 1
  store i16 %243, i16* %244, align 2
  %245 = load i16, i16* %231, align 2
  %246 = zext i16 %245 to i32
  %247 = mul nuw nsw i32 %246, 85
  %248 = add nuw nsw i32 %16, %247
  %249 = lshr i32 %248, 8
  %250 = trunc i32 %249 to i16
  %251 = getelementptr inbounds i16, i16* %229, i64 2
  store i16 %250, i16* %251, align 2
  %252 = load i16, i16* %231, align 2
  %253 = zext i16 %252 to i32
  %254 = shl nuw nsw i32 %253, 6
  %255 = add nuw nsw i32 %18, %254
  %256 = lshr i32 %255, 8
  %257 = trunc i32 %256 to i16
  %258 = getelementptr inbounds i16, i16* %229, i64 3
  store i16 %257, i16* %258, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi4ELi16ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  store i16 512, i16* %6, align 2
  %7 = getelementptr inbounds i8, i8* %0, i64 2
  %8 = bitcast i8* %7 to i16*
  store i16 512, i16* %8, align 2
  %9 = getelementptr inbounds i8, i8* %0, i64 4
  %10 = bitcast i8* %9 to i16*
  store i16 512, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %0, i64 6
  %12 = bitcast i8* %11 to i16*
  store i16 512, i16* %12, align 2
  %13 = getelementptr inbounds i16, i16* %6, i64 %5
  store i16 512, i16* %13, align 2
  %14 = getelementptr inbounds i16, i16* %13, i64 1
  store i16 512, i16* %14, align 2
  %15 = getelementptr inbounds i16, i16* %13, i64 2
  store i16 512, i16* %15, align 2
  %16 = getelementptr inbounds i16, i16* %13, i64 3
  store i16 512, i16* %16, align 2
  %17 = getelementptr inbounds i16, i16* %13, i64 %5
  store i16 512, i16* %17, align 2
  %18 = getelementptr inbounds i16, i16* %17, i64 1
  store i16 512, i16* %18, align 2
  %19 = getelementptr inbounds i16, i16* %17, i64 2
  store i16 512, i16* %19, align 2
  %20 = getelementptr inbounds i16, i16* %17, i64 3
  store i16 512, i16* %20, align 2
  %21 = getelementptr inbounds i16, i16* %17, i64 %5
  store i16 512, i16* %21, align 2
  %22 = getelementptr inbounds i16, i16* %21, i64 1
  store i16 512, i16* %22, align 2
  %23 = getelementptr inbounds i16, i16* %21, i64 2
  store i16 512, i16* %23, align 2
  %24 = getelementptr inbounds i16, i16* %21, i64 3
  store i16 512, i16* %24, align 2
  %25 = getelementptr inbounds i16, i16* %21, i64 %5
  store i16 512, i16* %25, align 2
  %26 = getelementptr inbounds i16, i16* %25, i64 1
  store i16 512, i16* %26, align 2
  %27 = getelementptr inbounds i16, i16* %25, i64 2
  store i16 512, i16* %27, align 2
  %28 = getelementptr inbounds i16, i16* %25, i64 3
  store i16 512, i16* %28, align 2
  %29 = getelementptr inbounds i16, i16* %25, i64 %5
  store i16 512, i16* %29, align 2
  %30 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 512, i16* %30, align 2
  %31 = getelementptr inbounds i16, i16* %29, i64 2
  store i16 512, i16* %31, align 2
  %32 = getelementptr inbounds i16, i16* %29, i64 3
  store i16 512, i16* %32, align 2
  %33 = getelementptr inbounds i16, i16* %29, i64 %5
  store i16 512, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %33, i64 1
  store i16 512, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %33, i64 2
  store i16 512, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %33, i64 3
  store i16 512, i16* %36, align 2
  %37 = getelementptr inbounds i16, i16* %33, i64 %5
  store i16 512, i16* %37, align 2
  %38 = getelementptr inbounds i16, i16* %37, i64 1
  store i16 512, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %37, i64 2
  store i16 512, i16* %39, align 2
  %40 = getelementptr inbounds i16, i16* %37, i64 3
  store i16 512, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %37, i64 %5
  store i16 512, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %41, i64 1
  store i16 512, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %41, i64 2
  store i16 512, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %41, i64 3
  store i16 512, i16* %44, align 2
  %45 = getelementptr inbounds i16, i16* %41, i64 %5
  store i16 512, i16* %45, align 2
  %46 = getelementptr inbounds i16, i16* %45, i64 1
  store i16 512, i16* %46, align 2
  %47 = getelementptr inbounds i16, i16* %45, i64 2
  store i16 512, i16* %47, align 2
  %48 = getelementptr inbounds i16, i16* %45, i64 3
  store i16 512, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %45, i64 %5
  store i16 512, i16* %49, align 2
  %50 = getelementptr inbounds i16, i16* %49, i64 1
  store i16 512, i16* %50, align 2
  %51 = getelementptr inbounds i16, i16* %49, i64 2
  store i16 512, i16* %51, align 2
  %52 = getelementptr inbounds i16, i16* %49, i64 3
  store i16 512, i16* %52, align 2
  %53 = getelementptr inbounds i16, i16* %49, i64 %5
  store i16 512, i16* %53, align 2
  %54 = getelementptr inbounds i16, i16* %53, i64 1
  store i16 512, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %53, i64 2
  store i16 512, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %53, i64 3
  store i16 512, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %53, i64 %5
  store i16 512, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %57, i64 1
  store i16 512, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %57, i64 2
  store i16 512, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %57, i64 3
  store i16 512, i16* %60, align 2
  %61 = getelementptr inbounds i16, i16* %57, i64 %5
  store i16 512, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %61, i64 1
  store i16 512, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %61, i64 2
  store i16 512, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %61, i64 3
  store i16 512, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %61, i64 %5
  store i16 512, i16* %65, align 2
  %66 = getelementptr inbounds i16, i16* %65, i64 1
  store i16 512, i16* %66, align 2
  %67 = getelementptr inbounds i16, i16* %65, i64 2
  store i16 512, i16* %67, align 2
  %68 = getelementptr inbounds i16, i16* %65, i64 3
  store i16 512, i16* %68, align 2
  %69 = getelementptr inbounds i16, i16* %65, i64 %5
  store i16 512, i16* %69, align 2
  %70 = getelementptr inbounds i16, i16* %69, i64 1
  store i16 512, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %69, i64 2
  store i16 512, i16* %71, align 2
  %72 = getelementptr inbounds i16, i16* %69, i64 3
  store i16 512, i16* %72, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 2
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = lshr i32 %23, 2
  %25 = bitcast i8* %0 to i16*
  %26 = lshr i64 %1, 1
  %27 = trunc i32 %24 to i16
  store i16 %27, i16* %25, align 2
  %28 = getelementptr inbounds i8, i8* %0, i64 2
  %29 = bitcast i8* %28 to i16*
  store i16 %27, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %0, i64 4
  %31 = bitcast i8* %30 to i16*
  store i16 %27, i16* %31, align 2
  %32 = getelementptr inbounds i8, i8* %0, i64 6
  %33 = bitcast i8* %32 to i16*
  store i16 %27, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %25, i64 %26
  store i16 %27, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %34, i64 1
  store i16 %27, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %34, i64 2
  store i16 %27, i16* %36, align 2
  %37 = getelementptr inbounds i16, i16* %34, i64 3
  store i16 %27, i16* %37, align 2
  %38 = getelementptr inbounds i16, i16* %34, i64 %26
  store i16 %27, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %38, i64 1
  store i16 %27, i16* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 2
  store i16 %27, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %38, i64 3
  store i16 %27, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 %26
  store i16 %27, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %42, i64 1
  store i16 %27, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %42, i64 2
  store i16 %27, i16* %44, align 2
  %45 = getelementptr inbounds i16, i16* %42, i64 3
  store i16 %27, i16* %45, align 2
  %46 = getelementptr inbounds i16, i16* %42, i64 %26
  store i16 %27, i16* %46, align 2
  %47 = getelementptr inbounds i16, i16* %46, i64 1
  store i16 %27, i16* %47, align 2
  %48 = getelementptr inbounds i16, i16* %46, i64 2
  store i16 %27, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %46, i64 3
  store i16 %27, i16* %49, align 2
  %50 = getelementptr inbounds i16, i16* %46, i64 %26
  store i16 %27, i16* %50, align 2
  %51 = getelementptr inbounds i16, i16* %50, i64 1
  store i16 %27, i16* %51, align 2
  %52 = getelementptr inbounds i16, i16* %50, i64 2
  store i16 %27, i16* %52, align 2
  %53 = getelementptr inbounds i16, i16* %50, i64 3
  store i16 %27, i16* %53, align 2
  %54 = getelementptr inbounds i16, i16* %50, i64 %26
  store i16 %27, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %54, i64 1
  store i16 %27, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 2
  store i16 %27, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %54, i64 3
  store i16 %27, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %54, i64 %26
  store i16 %27, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %58, i64 1
  store i16 %27, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %58, i64 2
  store i16 %27, i16* %60, align 2
  %61 = getelementptr inbounds i16, i16* %58, i64 3
  store i16 %27, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %58, i64 %26
  store i16 %27, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %62, i64 1
  store i16 %27, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %62, i64 2
  store i16 %27, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %62, i64 3
  store i16 %27, i16* %65, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 %26
  store i16 %27, i16* %66, align 2
  %67 = getelementptr inbounds i16, i16* %66, i64 1
  store i16 %27, i16* %67, align 2
  %68 = getelementptr inbounds i16, i16* %66, i64 2
  store i16 %27, i16* %68, align 2
  %69 = getelementptr inbounds i16, i16* %66, i64 3
  store i16 %27, i16* %69, align 2
  %70 = getelementptr inbounds i16, i16* %66, i64 %26
  store i16 %27, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %70, i64 1
  store i16 %27, i16* %71, align 2
  %72 = getelementptr inbounds i16, i16* %70, i64 2
  store i16 %27, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %70, i64 3
  store i16 %27, i16* %73, align 2
  %74 = getelementptr inbounds i16, i16* %70, i64 %26
  store i16 %27, i16* %74, align 2
  %75 = getelementptr inbounds i16, i16* %74, i64 1
  store i16 %27, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %74, i64 2
  store i16 %27, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %74, i64 3
  store i16 %27, i16* %77, align 2
  %78 = getelementptr inbounds i16, i16* %74, i64 %26
  store i16 %27, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %78, i64 1
  store i16 %27, i16* %79, align 2
  %80 = getelementptr inbounds i16, i16* %78, i64 2
  store i16 %27, i16* %80, align 2
  %81 = getelementptr inbounds i16, i16* %78, i64 3
  store i16 %27, i16* %81, align 2
  %82 = getelementptr inbounds i16, i16* %78, i64 %26
  store i16 %27, i16* %82, align 2
  %83 = getelementptr inbounds i16, i16* %82, i64 1
  store i16 %27, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %82, i64 2
  store i16 %27, i16* %84, align 2
  %85 = getelementptr inbounds i16, i16* %82, i64 3
  store i16 %27, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %82, i64 %26
  store i16 %27, i16* %86, align 2
  %87 = getelementptr inbounds i16, i16* %86, i64 1
  store i16 %27, i16* %87, align 2
  %88 = getelementptr inbounds i16, i16* %86, i64 2
  store i16 %27, i16* %88, align 2
  %89 = getelementptr inbounds i16, i16* %86, i64 3
  store i16 %27, i16* %89, align 2
  %90 = getelementptr inbounds i16, i16* %86, i64 %26
  store i16 %27, i16* %90, align 2
  %91 = getelementptr inbounds i16, i16* %90, i64 1
  store i16 %27, i16* %91, align 2
  %92 = getelementptr inbounds i16, i16* %90, i64 2
  store i16 %27, i16* %92, align 2
  %93 = getelementptr inbounds i16, i16* %90, i64 3
  store i16 %27, i16* %93, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = bitcast i8* %0 to i16*
  %86 = lshr i64 %1, 1
  %87 = trunc i32 %84 to i16
  store i16 %87, i16* %85, align 2
  %88 = getelementptr inbounds i8, i8* %0, i64 2
  %89 = bitcast i8* %88 to i16*
  store i16 %87, i16* %89, align 2
  %90 = getelementptr inbounds i8, i8* %0, i64 4
  %91 = bitcast i8* %90 to i16*
  store i16 %87, i16* %91, align 2
  %92 = getelementptr inbounds i8, i8* %0, i64 6
  %93 = bitcast i8* %92 to i16*
  store i16 %87, i16* %93, align 2
  %94 = getelementptr inbounds i16, i16* %85, i64 %86
  store i16 %87, i16* %94, align 2
  %95 = getelementptr inbounds i16, i16* %94, i64 1
  store i16 %87, i16* %95, align 2
  %96 = getelementptr inbounds i16, i16* %94, i64 2
  store i16 %87, i16* %96, align 2
  %97 = getelementptr inbounds i16, i16* %94, i64 3
  store i16 %87, i16* %97, align 2
  %98 = getelementptr inbounds i16, i16* %94, i64 %86
  store i16 %87, i16* %98, align 2
  %99 = getelementptr inbounds i16, i16* %98, i64 1
  store i16 %87, i16* %99, align 2
  %100 = getelementptr inbounds i16, i16* %98, i64 2
  store i16 %87, i16* %100, align 2
  %101 = getelementptr inbounds i16, i16* %98, i64 3
  store i16 %87, i16* %101, align 2
  %102 = getelementptr inbounds i16, i16* %98, i64 %86
  store i16 %87, i16* %102, align 2
  %103 = getelementptr inbounds i16, i16* %102, i64 1
  store i16 %87, i16* %103, align 2
  %104 = getelementptr inbounds i16, i16* %102, i64 2
  store i16 %87, i16* %104, align 2
  %105 = getelementptr inbounds i16, i16* %102, i64 3
  store i16 %87, i16* %105, align 2
  %106 = getelementptr inbounds i16, i16* %102, i64 %86
  store i16 %87, i16* %106, align 2
  %107 = getelementptr inbounds i16, i16* %106, i64 1
  store i16 %87, i16* %107, align 2
  %108 = getelementptr inbounds i16, i16* %106, i64 2
  store i16 %87, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %106, i64 3
  store i16 %87, i16* %109, align 2
  %110 = getelementptr inbounds i16, i16* %106, i64 %86
  store i16 %87, i16* %110, align 2
  %111 = getelementptr inbounds i16, i16* %110, i64 1
  store i16 %87, i16* %111, align 2
  %112 = getelementptr inbounds i16, i16* %110, i64 2
  store i16 %87, i16* %112, align 2
  %113 = getelementptr inbounds i16, i16* %110, i64 3
  store i16 %87, i16* %113, align 2
  %114 = getelementptr inbounds i16, i16* %110, i64 %86
  store i16 %87, i16* %114, align 2
  %115 = getelementptr inbounds i16, i16* %114, i64 1
  store i16 %87, i16* %115, align 2
  %116 = getelementptr inbounds i16, i16* %114, i64 2
  store i16 %87, i16* %116, align 2
  %117 = getelementptr inbounds i16, i16* %114, i64 3
  store i16 %87, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %114, i64 %86
  store i16 %87, i16* %118, align 2
  %119 = getelementptr inbounds i16, i16* %118, i64 1
  store i16 %87, i16* %119, align 2
  %120 = getelementptr inbounds i16, i16* %118, i64 2
  store i16 %87, i16* %120, align 2
  %121 = getelementptr inbounds i16, i16* %118, i64 3
  store i16 %87, i16* %121, align 2
  %122 = getelementptr inbounds i16, i16* %118, i64 %86
  store i16 %87, i16* %122, align 2
  %123 = getelementptr inbounds i16, i16* %122, i64 1
  store i16 %87, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %122, i64 2
  store i16 %87, i16* %124, align 2
  %125 = getelementptr inbounds i16, i16* %122, i64 3
  store i16 %87, i16* %125, align 2
  %126 = getelementptr inbounds i16, i16* %122, i64 %86
  store i16 %87, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %126, i64 1
  store i16 %87, i16* %127, align 2
  %128 = getelementptr inbounds i16, i16* %126, i64 2
  store i16 %87, i16* %128, align 2
  %129 = getelementptr inbounds i16, i16* %126, i64 3
  store i16 %87, i16* %129, align 2
  %130 = getelementptr inbounds i16, i16* %126, i64 %86
  store i16 %87, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %130, i64 1
  store i16 %87, i16* %131, align 2
  %132 = getelementptr inbounds i16, i16* %130, i64 2
  store i16 %87, i16* %132, align 2
  %133 = getelementptr inbounds i16, i16* %130, i64 3
  store i16 %87, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %130, i64 %86
  store i16 %87, i16* %134, align 2
  %135 = getelementptr inbounds i16, i16* %134, i64 1
  store i16 %87, i16* %135, align 2
  %136 = getelementptr inbounds i16, i16* %134, i64 2
  store i16 %87, i16* %136, align 2
  %137 = getelementptr inbounds i16, i16* %134, i64 3
  store i16 %87, i16* %137, align 2
  %138 = getelementptr inbounds i16, i16* %134, i64 %86
  store i16 %87, i16* %138, align 2
  %139 = getelementptr inbounds i16, i16* %138, i64 1
  store i16 %87, i16* %139, align 2
  %140 = getelementptr inbounds i16, i16* %138, i64 2
  store i16 %87, i16* %140, align 2
  %141 = getelementptr inbounds i16, i16* %138, i64 3
  store i16 %87, i16* %141, align 2
  %142 = getelementptr inbounds i16, i16* %138, i64 %86
  store i16 %87, i16* %142, align 2
  %143 = getelementptr inbounds i16, i16* %142, i64 1
  store i16 %87, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %142, i64 2
  store i16 %87, i16* %144, align 2
  %145 = getelementptr inbounds i16, i16* %142, i64 3
  store i16 %87, i16* %145, align 2
  %146 = getelementptr inbounds i16, i16* %142, i64 %86
  store i16 %87, i16* %146, align 2
  %147 = getelementptr inbounds i16, i16* %146, i64 1
  store i16 %87, i16* %147, align 2
  %148 = getelementptr inbounds i16, i16* %146, i64 2
  store i16 %87, i16* %148, align 2
  %149 = getelementptr inbounds i16, i16* %146, i64 3
  store i16 %87, i16* %149, align 2
  %150 = getelementptr inbounds i16, i16* %146, i64 %86
  store i16 %87, i16* %150, align 2
  %151 = getelementptr inbounds i16, i16* %150, i64 1
  store i16 %87, i16* %151, align 2
  %152 = getelementptr inbounds i16, i16* %150, i64 2
  store i16 %87, i16* %152, align 2
  %153 = getelementptr inbounds i16, i16* %150, i64 3
  store i16 %87, i16* %153, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 10
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = bitcast i8* %3 to i16*
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = add nuw nsw i32 %23, %26
  %28 = getelementptr inbounds i8, i8* %3, i64 2
  %29 = bitcast i8* %28 to i16*
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = add nuw nsw i32 %27, %31
  %33 = getelementptr inbounds i8, i8* %3, i64 4
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = add nuw nsw i32 %32, %36
  %38 = getelementptr inbounds i8, i8* %3, i64 6
  %39 = bitcast i8* %38 to i16*
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = add nuw nsw i32 %37, %41
  %43 = getelementptr inbounds i8, i8* %3, i64 8
  %44 = bitcast i8* %43 to i16*
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = add nuw nsw i32 %42, %46
  %48 = getelementptr inbounds i8, i8* %3, i64 10
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nuw nsw i32 %47, %51
  %53 = getelementptr inbounds i8, i8* %3, i64 12
  %54 = bitcast i8* %53 to i16*
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = add nuw nsw i32 %52, %56
  %58 = getelementptr inbounds i8, i8* %3, i64 14
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = add nuw nsw i32 %57, %61
  %63 = getelementptr inbounds i8, i8* %3, i64 16
  %64 = bitcast i8* %63 to i16*
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = add nuw nsw i32 %62, %66
  %68 = getelementptr inbounds i8, i8* %3, i64 18
  %69 = bitcast i8* %68 to i16*
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = add nuw nsw i32 %67, %71
  %73 = getelementptr inbounds i8, i8* %3, i64 20
  %74 = bitcast i8* %73 to i16*
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = add nuw nsw i32 %72, %76
  %78 = getelementptr inbounds i8, i8* %3, i64 22
  %79 = bitcast i8* %78 to i16*
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = add nuw nsw i32 %77, %81
  %83 = getelementptr inbounds i8, i8* %3, i64 24
  %84 = bitcast i8* %83 to i16*
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nuw nsw i32 %82, %86
  %88 = getelementptr inbounds i8, i8* %3, i64 26
  %89 = bitcast i8* %88 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %87, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 28
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 30
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nuw nsw i32 %97, %101
  %103 = udiv i32 %102, 20
  %104 = bitcast i8* %0 to i16*
  %105 = lshr i64 %1, 1
  %106 = trunc i32 %103 to i16
  store i16 %106, i16* %104, align 2
  %107 = getelementptr inbounds i8, i8* %0, i64 2
  %108 = bitcast i8* %107 to i16*
  store i16 %106, i16* %108, align 2
  %109 = getelementptr inbounds i8, i8* %0, i64 4
  %110 = bitcast i8* %109 to i16*
  store i16 %106, i16* %110, align 2
  %111 = getelementptr inbounds i8, i8* %0, i64 6
  %112 = bitcast i8* %111 to i16*
  store i16 %106, i16* %112, align 2
  %113 = getelementptr inbounds i16, i16* %104, i64 %105
  store i16 %106, i16* %113, align 2
  %114 = getelementptr inbounds i16, i16* %113, i64 1
  store i16 %106, i16* %114, align 2
  %115 = getelementptr inbounds i16, i16* %113, i64 2
  store i16 %106, i16* %115, align 2
  %116 = getelementptr inbounds i16, i16* %113, i64 3
  store i16 %106, i16* %116, align 2
  %117 = getelementptr inbounds i16, i16* %113, i64 %105
  store i16 %106, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %117, i64 1
  store i16 %106, i16* %118, align 2
  %119 = getelementptr inbounds i16, i16* %117, i64 2
  store i16 %106, i16* %119, align 2
  %120 = getelementptr inbounds i16, i16* %117, i64 3
  store i16 %106, i16* %120, align 2
  %121 = getelementptr inbounds i16, i16* %117, i64 %105
  store i16 %106, i16* %121, align 2
  %122 = getelementptr inbounds i16, i16* %121, i64 1
  store i16 %106, i16* %122, align 2
  %123 = getelementptr inbounds i16, i16* %121, i64 2
  store i16 %106, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %121, i64 3
  store i16 %106, i16* %124, align 2
  %125 = getelementptr inbounds i16, i16* %121, i64 %105
  store i16 %106, i16* %125, align 2
  %126 = getelementptr inbounds i16, i16* %125, i64 1
  store i16 %106, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %125, i64 2
  store i16 %106, i16* %127, align 2
  %128 = getelementptr inbounds i16, i16* %125, i64 3
  store i16 %106, i16* %128, align 2
  %129 = getelementptr inbounds i16, i16* %125, i64 %105
  store i16 %106, i16* %129, align 2
  %130 = getelementptr inbounds i16, i16* %129, i64 1
  store i16 %106, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %129, i64 2
  store i16 %106, i16* %131, align 2
  %132 = getelementptr inbounds i16, i16* %129, i64 3
  store i16 %106, i16* %132, align 2
  %133 = getelementptr inbounds i16, i16* %129, i64 %105
  store i16 %106, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %133, i64 1
  store i16 %106, i16* %134, align 2
  %135 = getelementptr inbounds i16, i16* %133, i64 2
  store i16 %106, i16* %135, align 2
  %136 = getelementptr inbounds i16, i16* %133, i64 3
  store i16 %106, i16* %136, align 2
  %137 = getelementptr inbounds i16, i16* %133, i64 %105
  store i16 %106, i16* %137, align 2
  %138 = getelementptr inbounds i16, i16* %137, i64 1
  store i16 %106, i16* %138, align 2
  %139 = getelementptr inbounds i16, i16* %137, i64 2
  store i16 %106, i16* %139, align 2
  %140 = getelementptr inbounds i16, i16* %137, i64 3
  store i16 %106, i16* %140, align 2
  %141 = getelementptr inbounds i16, i16* %137, i64 %105
  store i16 %106, i16* %141, align 2
  %142 = getelementptr inbounds i16, i16* %141, i64 1
  store i16 %106, i16* %142, align 2
  %143 = getelementptr inbounds i16, i16* %141, i64 2
  store i16 %106, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %141, i64 3
  store i16 %106, i16* %144, align 2
  %145 = getelementptr inbounds i16, i16* %141, i64 %105
  store i16 %106, i16* %145, align 2
  %146 = getelementptr inbounds i16, i16* %145, i64 1
  store i16 %106, i16* %146, align 2
  %147 = getelementptr inbounds i16, i16* %145, i64 2
  store i16 %106, i16* %147, align 2
  %148 = getelementptr inbounds i16, i16* %145, i64 3
  store i16 %106, i16* %148, align 2
  %149 = getelementptr inbounds i16, i16* %145, i64 %105
  store i16 %106, i16* %149, align 2
  %150 = getelementptr inbounds i16, i16* %149, i64 1
  store i16 %106, i16* %150, align 2
  %151 = getelementptr inbounds i16, i16* %149, i64 2
  store i16 %106, i16* %151, align 2
  %152 = getelementptr inbounds i16, i16* %149, i64 3
  store i16 %106, i16* %152, align 2
  %153 = getelementptr inbounds i16, i16* %149, i64 %105
  store i16 %106, i16* %153, align 2
  %154 = getelementptr inbounds i16, i16* %153, i64 1
  store i16 %106, i16* %154, align 2
  %155 = getelementptr inbounds i16, i16* %153, i64 2
  store i16 %106, i16* %155, align 2
  %156 = getelementptr inbounds i16, i16* %153, i64 3
  store i16 %106, i16* %156, align 2
  %157 = getelementptr inbounds i16, i16* %153, i64 %105
  store i16 %106, i16* %157, align 2
  %158 = getelementptr inbounds i16, i16* %157, i64 1
  store i16 %106, i16* %158, align 2
  %159 = getelementptr inbounds i16, i16* %157, i64 2
  store i16 %106, i16* %159, align 2
  %160 = getelementptr inbounds i16, i16* %157, i64 3
  store i16 %106, i16* %160, align 2
  %161 = getelementptr inbounds i16, i16* %157, i64 %105
  store i16 %106, i16* %161, align 2
  %162 = getelementptr inbounds i16, i16* %161, i64 1
  store i16 %106, i16* %162, align 2
  %163 = getelementptr inbounds i16, i16* %161, i64 2
  store i16 %106, i16* %163, align 2
  %164 = getelementptr inbounds i16, i16* %161, i64 3
  store i16 %106, i16* %164, align 2
  %165 = getelementptr inbounds i16, i16* %161, i64 %105
  store i16 %106, i16* %165, align 2
  %166 = getelementptr inbounds i16, i16* %165, i64 1
  store i16 %106, i16* %166, align 2
  %167 = getelementptr inbounds i16, i16* %165, i64 2
  store i16 %106, i16* %167, align 2
  %168 = getelementptr inbounds i16, i16* %165, i64 3
  store i16 %106, i16* %168, align 2
  %169 = getelementptr inbounds i16, i16* %165, i64 %105
  store i16 %106, i16* %169, align 2
  %170 = getelementptr inbounds i16, i16* %169, i64 1
  store i16 %106, i16* %170, align 2
  %171 = getelementptr inbounds i16, i16* %169, i64 2
  store i16 %106, i16* %171, align 2
  %172 = getelementptr inbounds i16, i16* %169, i64 3
  store i16 %106, i16* %172, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i64*
  %6 = bitcast i8* %0 to i64*
  %7 = load i64, i64* %5, align 1
  store i64 %7, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %5, align 1
  store i64 %10, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %8, i64 %1
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %5, align 1
  store i64 %13, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %1
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %5, align 1
  store i64 %16, i64* %15, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %5, align 1
  store i64 %19, i64* %18, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 %1
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %5, align 1
  store i64 %22, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %20, i64 %1
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %5, align 1
  store i64 %25, i64* %24, align 1
  %26 = getelementptr inbounds i8, i8* %23, i64 %1
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %5, align 1
  store i64 %28, i64* %27, align 1
  %29 = getelementptr inbounds i8, i8* %26, i64 %1
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %5, align 1
  store i64 %31, i64* %30, align 1
  %32 = getelementptr inbounds i8, i8* %29, i64 %1
  %33 = bitcast i8* %32 to i64*
  %34 = load i64, i64* %5, align 1
  store i64 %34, i64* %33, align 1
  %35 = getelementptr inbounds i8, i8* %32, i64 %1
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %5, align 1
  store i64 %37, i64* %36, align 1
  %38 = getelementptr inbounds i8, i8* %35, i64 %1
  %39 = bitcast i8* %38 to i64*
  %40 = load i64, i64* %5, align 1
  store i64 %40, i64* %39, align 1
  %41 = getelementptr inbounds i8, i8* %38, i64 %1
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %5, align 1
  store i64 %43, i64* %42, align 1
  %44 = getelementptr inbounds i8, i8* %41, i64 %1
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %5, align 1
  store i64 %46, i64* %45, align 1
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %5, align 1
  store i64 %49, i64* %48, align 1
  %50 = getelementptr inbounds i8, i8* %47, i64 %1
  %51 = bitcast i8* %50 to i64*
  %52 = load i64, i64* %5, align 1
  store i64 %52, i64* %51, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %6, align 2
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  %10 = bitcast i8* %9 to i16*
  store i16 %8, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %0, i64 4
  %12 = bitcast i8* %11 to i16*
  store i16 %8, i16* %12, align 2
  %13 = getelementptr inbounds i8, i8* %0, i64 6
  %14 = bitcast i8* %13 to i16*
  store i16 %8, i16* %14, align 2
  %15 = getelementptr inbounds i16, i16* %6, i64 %7
  %16 = getelementptr inbounds i8, i8* %3, i64 2
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 2
  store i16 %18, i16* %15, align 2
  %19 = getelementptr inbounds i16, i16* %15, i64 1
  store i16 %18, i16* %19, align 2
  %20 = getelementptr inbounds i16, i16* %15, i64 2
  store i16 %18, i16* %20, align 2
  %21 = getelementptr inbounds i16, i16* %15, i64 3
  store i16 %18, i16* %21, align 2
  %22 = getelementptr inbounds i16, i16* %15, i64 %7
  %23 = getelementptr inbounds i8, i8* %3, i64 4
  %24 = bitcast i8* %23 to i16*
  %25 = load i16, i16* %24, align 2
  store i16 %25, i16* %22, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 1
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i16, i16* %22, i64 2
  store i16 %25, i16* %27, align 2
  %28 = getelementptr inbounds i16, i16* %22, i64 3
  store i16 %25, i16* %28, align 2
  %29 = getelementptr inbounds i16, i16* %22, i64 %7
  %30 = getelementptr inbounds i8, i8* %3, i64 6
  %31 = bitcast i8* %30 to i16*
  %32 = load i16, i16* %31, align 2
  store i16 %32, i16* %29, align 2
  %33 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 %32, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %29, i64 2
  store i16 %32, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %29, i64 3
  store i16 %32, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %29, i64 %7
  %37 = getelementptr inbounds i8, i8* %3, i64 8
  %38 = bitcast i8* %37 to i16*
  %39 = load i16, i16* %38, align 2
  store i16 %39, i16* %36, align 2
  %40 = getelementptr inbounds i16, i16* %36, i64 1
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %36, i64 2
  store i16 %39, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %36, i64 3
  store i16 %39, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %36, i64 %7
  %44 = getelementptr inbounds i8, i8* %3, i64 10
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  store i16 %46, i16* %43, align 2
  %47 = getelementptr inbounds i16, i16* %43, i64 1
  store i16 %46, i16* %47, align 2
  %48 = getelementptr inbounds i16, i16* %43, i64 2
  store i16 %46, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %43, i64 3
  store i16 %46, i16* %49, align 2
  %50 = getelementptr inbounds i16, i16* %43, i64 %7
  %51 = getelementptr inbounds i8, i8* %3, i64 12
  %52 = bitcast i8* %51 to i16*
  %53 = load i16, i16* %52, align 2
  store i16 %53, i16* %50, align 2
  %54 = getelementptr inbounds i16, i16* %50, i64 1
  store i16 %53, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %50, i64 2
  store i16 %53, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %50, i64 3
  store i16 %53, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %50, i64 %7
  %58 = getelementptr inbounds i8, i8* %3, i64 14
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  store i16 %60, i16* %57, align 2
  %61 = getelementptr inbounds i16, i16* %57, i64 1
  store i16 %60, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %57, i64 2
  store i16 %60, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %57, i64 3
  store i16 %60, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %57, i64 %7
  %65 = getelementptr inbounds i8, i8* %3, i64 16
  %66 = bitcast i8* %65 to i16*
  %67 = load i16, i16* %66, align 2
  store i16 %67, i16* %64, align 2
  %68 = getelementptr inbounds i16, i16* %64, i64 1
  store i16 %67, i16* %68, align 2
  %69 = getelementptr inbounds i16, i16* %64, i64 2
  store i16 %67, i16* %69, align 2
  %70 = getelementptr inbounds i16, i16* %64, i64 3
  store i16 %67, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %64, i64 %7
  %72 = getelementptr inbounds i8, i8* %3, i64 18
  %73 = bitcast i8* %72 to i16*
  %74 = load i16, i16* %73, align 2
  store i16 %74, i16* %71, align 2
  %75 = getelementptr inbounds i16, i16* %71, i64 1
  store i16 %74, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %71, i64 2
  store i16 %74, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %71, i64 3
  store i16 %74, i16* %77, align 2
  %78 = getelementptr inbounds i16, i16* %71, i64 %7
  %79 = getelementptr inbounds i8, i8* %3, i64 20
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  store i16 %81, i16* %78, align 2
  %82 = getelementptr inbounds i16, i16* %78, i64 1
  store i16 %81, i16* %82, align 2
  %83 = getelementptr inbounds i16, i16* %78, i64 2
  store i16 %81, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %78, i64 3
  store i16 %81, i16* %84, align 2
  %85 = getelementptr inbounds i16, i16* %78, i64 %7
  %86 = getelementptr inbounds i8, i8* %3, i64 22
  %87 = bitcast i8* %86 to i16*
  %88 = load i16, i16* %87, align 2
  store i16 %88, i16* %85, align 2
  %89 = getelementptr inbounds i16, i16* %85, i64 1
  store i16 %88, i16* %89, align 2
  %90 = getelementptr inbounds i16, i16* %85, i64 2
  store i16 %88, i16* %90, align 2
  %91 = getelementptr inbounds i16, i16* %85, i64 3
  store i16 %88, i16* %91, align 2
  %92 = getelementptr inbounds i16, i16* %85, i64 %7
  %93 = getelementptr inbounds i8, i8* %3, i64 24
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  store i16 %95, i16* %92, align 2
  %96 = getelementptr inbounds i16, i16* %92, i64 1
  store i16 %95, i16* %96, align 2
  %97 = getelementptr inbounds i16, i16* %92, i64 2
  store i16 %95, i16* %97, align 2
  %98 = getelementptr inbounds i16, i16* %92, i64 3
  store i16 %95, i16* %98, align 2
  %99 = getelementptr inbounds i16, i16* %92, i64 %7
  %100 = getelementptr inbounds i8, i8* %3, i64 26
  %101 = bitcast i8* %100 to i16*
  %102 = load i16, i16* %101, align 2
  store i16 %102, i16* %99, align 2
  %103 = getelementptr inbounds i16, i16* %99, i64 1
  store i16 %102, i16* %103, align 2
  %104 = getelementptr inbounds i16, i16* %99, i64 2
  store i16 %102, i16* %104, align 2
  %105 = getelementptr inbounds i16, i16* %99, i64 3
  store i16 %102, i16* %105, align 2
  %106 = getelementptr inbounds i16, i16* %99, i64 %7
  %107 = getelementptr inbounds i8, i8* %3, i64 28
  %108 = bitcast i8* %107 to i16*
  %109 = load i16, i16* %108, align 2
  store i16 %109, i16* %106, align 2
  %110 = getelementptr inbounds i16, i16* %106, i64 1
  store i16 %109, i16* %110, align 2
  %111 = getelementptr inbounds i16, i16* %106, i64 2
  store i16 %109, i16* %111, align 2
  %112 = getelementptr inbounds i16, i16* %106, i64 3
  store i16 %109, i16* %112, align 2
  %113 = getelementptr inbounds i16, i16* %106, i64 %7
  %114 = getelementptr inbounds i8, i8* %3, i64 30
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  store i16 %116, i16* %113, align 2
  %117 = getelementptr inbounds i16, i16* %113, i64 1
  store i16 %116, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %113, i64 2
  store i16 %116, i16* %118, align 2
  %119 = getelementptr inbounds i16, i16* %113, i64 3
  store i16 %116, i16* %119, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  %14 = getelementptr inbounds i8, i8* %2, i64 2
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 4
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 6
  %19 = bitcast i8* %18 to i16*
  br label %21

20:                                               ; preds = %110
  ret void

21:                                               ; preds = %110, %4
  %22 = phi i64 [ 0, %4 ], [ %112, %110 ]
  %23 = phi i16* [ %12, %4 ], [ %111, %110 ]
  %24 = getelementptr inbounds i16, i16* %6, i64 %22
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = sub nsw i32 %26, %10
  %28 = icmp slt i32 %27, 0
  %29 = sub nsw i32 0, %27
  %30 = select i1 %28, i32 %29, i32 %27
  %31 = sub nsw i32 %26, %11
  %32 = load i16, i16* %5, align 2
  %33 = zext i16 %32 to i32
  %34 = sub nsw i32 %33, %10
  %35 = icmp slt i32 %34, 0
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %36, i32 %34
  %38 = add nsw i32 %31, %33
  %39 = icmp slt i32 %38, 0
  %40 = sub nsw i32 0, %38
  %41 = select i1 %39, i32 %40, i32 %38
  %42 = icmp sgt i32 %37, %30
  %43 = icmp sgt i32 %37, %41
  %44 = or i1 %42, %43
  %45 = icmp sgt i32 %30, %41
  %46 = select i1 %45, i16 %9, i16 %32
  %47 = select i1 %44, i16 %46, i16 %25
  store i16 %47, i16* %23, align 2
  %48 = load i16, i16* %15, align 2
  %49 = zext i16 %48 to i32
  %50 = sub nsw i32 %49, %10
  %51 = icmp slt i32 %50, 0
  %52 = sub nsw i32 0, %50
  %53 = select i1 %51, i32 %52, i32 %50
  %54 = add nsw i32 %31, %49
  %55 = icmp slt i32 %54, 0
  %56 = sub nsw i32 0, %54
  %57 = select i1 %55, i32 %56, i32 %54
  %58 = icmp sgt i32 %53, %30
  %59 = icmp sgt i32 %53, %57
  %60 = or i1 %58, %59
  br i1 %60, label %63, label %61

61:                                               ; preds = %21
  %62 = getelementptr inbounds i16, i16* %23, i64 1
  store i16 %25, i16* %62, align 2
  br label %68

63:                                               ; preds = %21
  %64 = icmp sgt i32 %30, %57
  %65 = getelementptr inbounds i16, i16* %23, i64 1
  br i1 %64, label %67, label %66

66:                                               ; preds = %63
  store i16 %48, i16* %65, align 2
  br label %68

67:                                               ; preds = %63
  store i16 %9, i16* %65, align 2
  br label %68

68:                                               ; preds = %67, %66, %61
  %69 = load i16, i16* %17, align 2
  %70 = zext i16 %69 to i32
  %71 = sub nsw i32 %70, %10
  %72 = icmp slt i32 %71, 0
  %73 = sub nsw i32 0, %71
  %74 = select i1 %72, i32 %73, i32 %71
  %75 = add nsw i32 %31, %70
  %76 = icmp slt i32 %75, 0
  %77 = sub nsw i32 0, %75
  %78 = select i1 %76, i32 %77, i32 %75
  %79 = icmp sgt i32 %74, %30
  %80 = icmp sgt i32 %74, %78
  %81 = or i1 %79, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %68
  %83 = getelementptr inbounds i16, i16* %23, i64 2
  store i16 %25, i16* %83, align 2
  br label %89

84:                                               ; preds = %68
  %85 = icmp sgt i32 %30, %78
  %86 = getelementptr inbounds i16, i16* %23, i64 2
  br i1 %85, label %88, label %87

87:                                               ; preds = %84
  store i16 %69, i16* %86, align 2
  br label %89

88:                                               ; preds = %84
  store i16 %9, i16* %86, align 2
  br label %89

89:                                               ; preds = %88, %87, %82
  %90 = load i16, i16* %19, align 2
  %91 = zext i16 %90 to i32
  %92 = sub nsw i32 %91, %10
  %93 = icmp slt i32 %92, 0
  %94 = sub nsw i32 0, %92
  %95 = select i1 %93, i32 %94, i32 %92
  %96 = add nsw i32 %31, %91
  %97 = icmp slt i32 %96, 0
  %98 = sub nsw i32 0, %96
  %99 = select i1 %97, i32 %98, i32 %96
  %100 = icmp sgt i32 %95, %30
  %101 = icmp sgt i32 %95, %99
  %102 = or i1 %100, %101
  br i1 %102, label %105, label %103

103:                                              ; preds = %89
  %104 = getelementptr inbounds i16, i16* %23, i64 3
  store i16 %25, i16* %104, align 2
  br label %110

105:                                              ; preds = %89
  %106 = icmp sgt i32 %30, %99
  %107 = getelementptr inbounds i16, i16* %23, i64 3
  br i1 %106, label %109, label %108

108:                                              ; preds = %105
  store i16 %90, i16* %107, align 2
  br label %110

109:                                              ; preds = %105
  store i16 %9, i16* %107, align 2
  br label %110

110:                                              ; preds = %109, %108, %103
  %111 = getelementptr inbounds i16, i16* %23, i64 %13
  %112 = add nuw nsw i64 %22, 1
  %113 = icmp eq i64 %112, 16
  br i1 %113, label %20, label %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 6
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 30
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = getelementptr inbounds i8, i8* %2, i64 2
  %18 = bitcast i8* %17 to i16*
  %19 = mul nuw nsw i32 %16, 107
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = mul nuw nsw i32 %16, 171
  %23 = getelementptr inbounds i8, i8* %2, i64 6
  %24 = bitcast i8* %23 to i16*
  %25 = mul nuw nsw i32 %16, 192
  br label %26

26:                                               ; preds = %26, %4
  %27 = phi i64 [ 0, %4 ], [ %85, %26 ]
  %28 = phi i16* [ %13, %4 ], [ %84, %26 ]
  %29 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %27
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i16, i16* %6, i64 %27
  %33 = sub i8 0, %30
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %34, %15
  %36 = add nuw nsw i32 %35, 256
  %37 = load i16, i16* %5, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %38, %31
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %41, 255
  %43 = add nuw nsw i32 %36, %39
  %44 = add nuw nsw i32 %43, %16
  %45 = add nuw nsw i32 %44, %42
  %46 = lshr i32 %45, 9
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %28, align 2
  %48 = load i16, i16* %18, align 2
  %49 = zext i16 %48 to i32
  %50 = mul nuw nsw i32 %49, %31
  %51 = load i16, i16* %32, align 2
  %52 = zext i16 %51 to i32
  %53 = mul nuw nsw i32 %52, 149
  %54 = add nuw nsw i32 %36, %50
  %55 = add nuw nsw i32 %54, %19
  %56 = add nuw nsw i32 %55, %53
  %57 = lshr i32 %56, 9
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %58, i16* %59, align 2
  %60 = load i16, i16* %21, align 2
  %61 = zext i16 %60 to i32
  %62 = mul nuw nsw i32 %61, %31
  %63 = load i16, i16* %32, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, 85
  %66 = add nuw nsw i32 %36, %62
  %67 = add nuw nsw i32 %66, %22
  %68 = add nuw nsw i32 %67, %65
  %69 = lshr i32 %68, 9
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %24, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %31
  %75 = load i16, i16* %32, align 2
  %76 = zext i16 %75 to i32
  %77 = shl nuw nsw i32 %76, 6
  %78 = add nuw nsw i32 %36, %74
  %79 = add nuw nsw i32 %78, %25
  %80 = add nuw nsw i32 %79, %77
  %81 = lshr i32 %80, 9
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %82, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %28, i64 %14
  %85 = add nuw nsw i64 %27, 1
  %86 = icmp eq i64 %85, 16
  br i1 %86, label %87, label %26

87:                                               ; preds = %26
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  br label %18

18:                                               ; preds = %18, %4
  %19 = phi i64 [ 0, %4 ], [ %56, %18 ]
  %20 = phi i16* [ %9, %4 ], [ %55, %18 ]
  %21 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %19
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub i8 0, %22
  %25 = zext i8 %24 to i32
  %26 = mul nuw nsw i32 %25, %11
  %27 = add nuw nsw i32 %26, 128
  %28 = load i16, i16* %5, align 2
  %29 = zext i16 %28 to i32
  %30 = mul nuw nsw i32 %29, %23
  %31 = add nuw nsw i32 %27, %30
  %32 = lshr i32 %31, 8
  %33 = trunc i32 %32 to i16
  store i16 %33, i16* %20, align 2
  %34 = load i16, i16* %13, align 2
  %35 = zext i16 %34 to i32
  %36 = mul nuw nsw i32 %35, %23
  %37 = add nuw nsw i32 %27, %36
  %38 = lshr i32 %37, 8
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds i16, i16* %20, i64 1
  store i16 %39, i16* %40, align 2
  %41 = load i16, i16* %15, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %42, %23
  %44 = add nuw nsw i32 %27, %43
  %45 = lshr i32 %44, 8
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds i16, i16* %20, i64 2
  store i16 %46, i16* %47, align 2
  %48 = load i16, i16* %17, align 2
  %49 = zext i16 %48 to i32
  %50 = mul nuw nsw i32 %49, %23
  %51 = add nuw nsw i32 %27, %50
  %52 = lshr i32 %51, 8
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %20, i64 3
  store i16 %53, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %20, i64 %10
  %56 = add nuw nsw i64 %19, 1
  %57 = icmp eq i64 %56, 16
  br i1 %57, label %58, label %18

58:                                               ; preds = %18
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi4ELi16EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 6
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %11, 107
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %11, 171
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %11, 192
  %18 = add nuw nsw i32 %17, 128
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi i64 [ 0, %4 ], [ %51, %19 ]
  %21 = phi i16* [ %9, %4 ], [ %50, %19 ]
  %22 = getelementptr inbounds i16, i16* %5, i64 %20
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = mul nuw nsw i32 %24, 255
  %26 = add nuw nsw i32 %12, %25
  %27 = lshr i32 %26, 8
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %21, align 2
  %29 = load i16, i16* %22, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %30, 149
  %32 = add nuw nsw i32 %14, %31
  %33 = lshr i32 %32, 8
  %34 = trunc i32 %33 to i16
  %35 = getelementptr inbounds i16, i16* %21, i64 1
  store i16 %34, i16* %35, align 2
  %36 = load i16, i16* %22, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %37, 85
  %39 = add nuw nsw i32 %16, %38
  %40 = lshr i32 %39, 8
  %41 = trunc i32 %40 to i16
  %42 = getelementptr inbounds i16, i16* %21, i64 2
  store i16 %41, i16* %42, align 2
  %43 = load i16, i16* %22, align 2
  %44 = zext i16 %43 to i32
  %45 = shl nuw nsw i32 %44, 6
  %46 = add nuw nsw i32 %18, %45
  %47 = lshr i32 %46, 8
  %48 = trunc i32 %47 to i16
  %49 = getelementptr inbounds i16, i16* %21, i64 3
  store i16 %48, i16* %49, align 2
  %50 = getelementptr inbounds i16, i16* %21, i64 %10
  %51 = add nuw nsw i64 %20, 1
  %52 = icmp eq i64 %51, 16
  br i1 %52, label %53, label %19

53:                                               ; preds = %19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi4ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i16, i16* %6, i64 %5
  %9 = bitcast i16* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i16, i16* %8, i64 %5
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %10, i64 %5
  %13 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 4
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = lshr i32 %43, 3
  %45 = bitcast i8* %0 to i16*
  %46 = lshr i64 %1, 1
  %47 = trunc i32 %44 to i16
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds i16, i16* %45, i64 %46
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %51, i64 %46
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds i16, i16* %53, i64 %46
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %56, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 2
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = lshr i32 %23, 2
  %25 = bitcast i8* %0 to i16*
  %26 = lshr i64 %1, 1
  %27 = trunc i32 %24 to i16
  %28 = insertelement <8 x i16> undef, i16 %27, i32 0
  %29 = shufflevector <8 x i16> %28, <8 x i16> undef, <8 x i32> zeroinitializer
  %30 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %25, i64 %26
  %32 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %31, i64 %26
  %34 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %33, i64 %26
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %36, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 6
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = bitcast i8* %3 to i16*
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = add nuw nsw i32 %43, %46
  %48 = getelementptr inbounds i8, i8* %3, i64 2
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nuw nsw i32 %47, %51
  %53 = getelementptr inbounds i8, i8* %3, i64 4
  %54 = bitcast i8* %53 to i16*
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = add nuw nsw i32 %52, %56
  %58 = getelementptr inbounds i8, i8* %3, i64 6
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = add nuw nsw i32 %57, %61
  %63 = udiv i32 %62, 12
  %64 = bitcast i8* %0 to i16*
  %65 = lshr i64 %1, 1
  %66 = trunc i32 %63 to i16
  %67 = insertelement <8 x i16> undef, i16 %66, i32 0
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> zeroinitializer
  %69 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2
  %70 = getelementptr inbounds i16, i16* %64, i64 %65
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %71, align 2
  %72 = getelementptr inbounds i16, i16* %70, i64 %65
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %73, align 2
  %74 = getelementptr inbounds i16, i16* %72, i64 %65
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %75, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 16, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 16, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 16, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 16, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  %8 = load i16, i16* %5, align 2
  %9 = insertelement <8 x i16> undef, i16 %8, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %6, i64 %7
  %13 = getelementptr inbounds i8, i8* %3, i64 2
  %14 = bitcast i8* %13 to i16*
  %15 = load i16, i16* %14, align 2
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = shufflevector <8 x i16> %16, <8 x i16> undef, <8 x i32> zeroinitializer
  %18 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> %17, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %12, i64 %7
  %20 = getelementptr inbounds i8, i8* %3, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = load i16, i16* %21, align 2
  %23 = insertelement <8 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  %25 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %19, i64 %7
  %27 = getelementptr inbounds i8, i8* %3, i64 6
  %28 = bitcast i8* %27 to i16*
  %29 = load i16, i16* %28, align 2
  %30 = insertelement <8 x i16> undef, i16 %29, i32 0
  %31 = shufflevector <8 x i16> %30, <8 x i16> undef, <8 x i32> zeroinitializer
  %32 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %32, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  %14 = load i16, i16* %6, align 2
  %15 = zext i16 %14 to i32
  %16 = sub nsw i32 %15, %10
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %11
  br label %32

21:                                               ; preds = %55
  %22 = getelementptr inbounds i16, i16* %12, i64 %13
  %23 = getelementptr inbounds i8, i8* %3, i64 2
  %24 = bitcast i8* %23 to i16*
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = sub nsw i32 %26, %10
  %28 = icmp slt i32 %27, 0
  %29 = sub nsw i32 0, %27
  %30 = select i1 %28, i32 %29, i32 %27
  %31 = sub nsw i32 %26, %11
  br label %58

32:                                               ; preds = %55, %4
  %33 = phi i64 [ 0, %4 ], [ %56, %55 ]
  %34 = getelementptr inbounds i16, i16* %5, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = sub nsw i32 %36, %10
  %38 = icmp slt i32 %37, 0
  %39 = sub nsw i32 0, %37
  %40 = select i1 %38, i32 %39, i32 %37
  %41 = add nsw i32 %20, %36
  %42 = icmp slt i32 %41, 0
  %43 = sub nsw i32 0, %41
  %44 = select i1 %42, i32 %43, i32 %41
  %45 = icmp sgt i32 %40, %19
  %46 = icmp sgt i32 %40, %44
  %47 = or i1 %45, %46
  br i1 %47, label %50, label %48

48:                                               ; preds = %32
  %49 = getelementptr inbounds i16, i16* %12, i64 %33
  store i16 %14, i16* %49, align 2
  br label %55

50:                                               ; preds = %32
  %51 = icmp sgt i32 %19, %44
  %52 = getelementptr inbounds i16, i16* %12, i64 %33
  br i1 %51, label %54, label %53

53:                                               ; preds = %50
  store i16 %35, i16* %52, align 2
  br label %55

54:                                               ; preds = %50
  store i16 %9, i16* %52, align 2
  br label %55

55:                                               ; preds = %53, %54, %48
  %56 = add nuw nsw i64 %33, 1
  %57 = icmp eq i64 %56, 8
  br i1 %57, label %21, label %32

58:                                               ; preds = %81, %21
  %59 = phi i64 [ 0, %21 ], [ %82, %81 ]
  %60 = getelementptr inbounds i16, i16* %5, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = sub nsw i32 %62, %10
  %64 = icmp slt i32 %63, 0
  %65 = sub nsw i32 0, %63
  %66 = select i1 %64, i32 %65, i32 %63
  %67 = add nsw i32 %31, %62
  %68 = icmp slt i32 %67, 0
  %69 = sub nsw i32 0, %67
  %70 = select i1 %68, i32 %69, i32 %67
  %71 = icmp sgt i32 %66, %30
  %72 = icmp sgt i32 %66, %70
  %73 = or i1 %71, %72
  br i1 %73, label %76, label %74

74:                                               ; preds = %58
  %75 = getelementptr inbounds i16, i16* %22, i64 %59
  store i16 %25, i16* %75, align 2
  br label %81

76:                                               ; preds = %58
  %77 = icmp sgt i32 %30, %70
  %78 = getelementptr inbounds i16, i16* %22, i64 %59
  br i1 %77, label %80, label %79

79:                                               ; preds = %76
  store i16 %61, i16* %78, align 2
  br label %81

80:                                               ; preds = %76
  store i16 %9, i16* %78, align 2
  br label %81

81:                                               ; preds = %80, %79, %74
  %82 = add nuw nsw i64 %59, 1
  %83 = icmp eq i64 %82, 8
  br i1 %83, label %84, label %58

84:                                               ; preds = %81
  %85 = getelementptr inbounds i16, i16* %22, i64 %13
  %86 = getelementptr inbounds i8, i8* %3, i64 4
  %87 = bitcast i8* %86 to i16*
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = sub nsw i32 %89, %10
  %91 = icmp slt i32 %90, 0
  %92 = sub nsw i32 0, %90
  %93 = select i1 %91, i32 %92, i32 %90
  %94 = sub nsw i32 %89, %11
  br label %95

95:                                               ; preds = %118, %84
  %96 = phi i64 [ 0, %84 ], [ %119, %118 ]
  %97 = getelementptr inbounds i16, i16* %5, i64 %96
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = sub nsw i32 %99, %10
  %101 = icmp slt i32 %100, 0
  %102 = sub nsw i32 0, %100
  %103 = select i1 %101, i32 %102, i32 %100
  %104 = add nsw i32 %94, %99
  %105 = icmp slt i32 %104, 0
  %106 = sub nsw i32 0, %104
  %107 = select i1 %105, i32 %106, i32 %104
  %108 = icmp sgt i32 %103, %93
  %109 = icmp sgt i32 %103, %107
  %110 = or i1 %108, %109
  br i1 %110, label %113, label %111

111:                                              ; preds = %95
  %112 = getelementptr inbounds i16, i16* %85, i64 %96
  store i16 %88, i16* %112, align 2
  br label %118

113:                                              ; preds = %95
  %114 = icmp sgt i32 %93, %107
  %115 = getelementptr inbounds i16, i16* %85, i64 %96
  br i1 %114, label %117, label %116

116:                                              ; preds = %113
  store i16 %98, i16* %115, align 2
  br label %118

117:                                              ; preds = %113
  store i16 %9, i16* %115, align 2
  br label %118

118:                                              ; preds = %117, %116, %111
  %119 = add nuw nsw i64 %96, 1
  %120 = icmp eq i64 %119, 8
  br i1 %120, label %121, label %95

121:                                              ; preds = %118
  %122 = getelementptr inbounds i16, i16* %85, i64 %13
  %123 = getelementptr inbounds i8, i8* %3, i64 6
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = sub nsw i32 %126, %10
  %128 = icmp slt i32 %127, 0
  %129 = sub nsw i32 0, %127
  %130 = select i1 %128, i32 %129, i32 %127
  %131 = sub nsw i32 %126, %11
  br label %132

132:                                              ; preds = %155, %121
  %133 = phi i64 [ 0, %121 ], [ %156, %155 ]
  %134 = getelementptr inbounds i16, i16* %5, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = sub nsw i32 %136, %10
  %138 = icmp slt i32 %137, 0
  %139 = sub nsw i32 0, %137
  %140 = select i1 %138, i32 %139, i32 %137
  %141 = add nsw i32 %131, %136
  %142 = icmp slt i32 %141, 0
  %143 = sub nsw i32 0, %141
  %144 = select i1 %142, i32 %143, i32 %141
  %145 = icmp sgt i32 %140, %130
  %146 = icmp sgt i32 %140, %144
  %147 = or i1 %145, %146
  br i1 %147, label %150, label %148

148:                                              ; preds = %132
  %149 = getelementptr inbounds i16, i16* %122, i64 %133
  store i16 %125, i16* %149, align 2
  br label %155

150:                                              ; preds = %132
  %151 = icmp sgt i32 %130, %144
  %152 = getelementptr inbounds i16, i16* %122, i64 %133
  br i1 %151, label %154, label %153

153:                                              ; preds = %150
  store i16 %135, i16* %152, align 2
  br label %155

154:                                              ; preds = %150
  store i16 %9, i16* %152, align 2
  br label %155

155:                                              ; preds = %154, %153, %148
  %156 = add nuw nsw i64 %133, 1
  %157 = icmp eq i64 %156, 8
  br i1 %157, label %158, label %132

158:                                              ; preds = %155
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 14
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 6
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = getelementptr inbounds i8, i8* %2, i64 2
  %18 = bitcast i8* %17 to i16*
  %19 = mul nuw nsw i32 %16, 59
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = mul nuw nsw i32 %16, 110
  %23 = getelementptr inbounds i8, i8* %2, i64 6
  %24 = bitcast i8* %23 to i16*
  %25 = mul nuw nsw i32 %16, 151
  %26 = getelementptr inbounds i8, i8* %2, i64 8
  %27 = bitcast i8* %26 to i16*
  %28 = mul nuw nsw i32 %16, 183
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = mul nuw nsw i32 %16, 206
  %32 = getelementptr inbounds i8, i8* %2, i64 12
  %33 = bitcast i8* %32 to i16*
  %34 = mul nuw nsw i32 %16, 219
  %35 = getelementptr inbounds i8, i8* %2, i64 14
  %36 = bitcast i8* %35 to i16*
  %37 = mul nuw nsw i32 %16, 224
  br label %38

38:                                               ; preds = %38, %4
  %39 = phi i64 [ 0, %4 ], [ %145, %38 ]
  %40 = phi i16* [ %13, %4 ], [ %144, %38 ]
  %41 = getelementptr inbounds [124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 %39
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds i16, i16* %6, i64 %39
  %45 = sub i8 0, %42
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %15
  %48 = add nuw nsw i32 %47, 256
  %49 = load i16, i16* %5, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %50, %43
  %52 = load i16, i16* %44, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, 255
  %55 = add nuw nsw i32 %48, %51
  %56 = add nuw nsw i32 %55, %16
  %57 = add nuw nsw i32 %56, %54
  %58 = lshr i32 %57, 9
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %40, align 2
  %60 = load i16, i16* %18, align 2
  %61 = zext i16 %60 to i32
  %62 = mul nuw nsw i32 %61, %43
  %63 = load i16, i16* %44, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, 197
  %66 = add nuw nsw i32 %48, %62
  %67 = add nuw nsw i32 %66, %19
  %68 = add nuw nsw i32 %67, %65
  %69 = lshr i32 %68, 9
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %40, i64 1
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %21, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %43
  %75 = load i16, i16* %44, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %76, 146
  %78 = add nuw nsw i32 %48, %74
  %79 = add nuw nsw i32 %78, %22
  %80 = add nuw nsw i32 %79, %77
  %81 = lshr i32 %80, 9
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %40, i64 2
  store i16 %82, i16* %83, align 2
  %84 = load i16, i16* %24, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %85, %43
  %87 = load i16, i16* %44, align 2
  %88 = zext i16 %87 to i32
  %89 = mul nuw nsw i32 %88, 105
  %90 = add nuw nsw i32 %48, %86
  %91 = add nuw nsw i32 %90, %25
  %92 = add nuw nsw i32 %91, %89
  %93 = lshr i32 %92, 9
  %94 = trunc i32 %93 to i16
  %95 = getelementptr inbounds i16, i16* %40, i64 3
  store i16 %94, i16* %95, align 2
  %96 = load i16, i16* %27, align 2
  %97 = zext i16 %96 to i32
  %98 = mul nuw nsw i32 %97, %43
  %99 = load i16, i16* %44, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nuw nsw i32 %100, 73
  %102 = add nuw nsw i32 %48, %98
  %103 = add nuw nsw i32 %102, %28
  %104 = add nuw nsw i32 %103, %101
  %105 = lshr i32 %104, 9
  %106 = trunc i32 %105 to i16
  %107 = getelementptr inbounds i16, i16* %40, i64 4
  store i16 %106, i16* %107, align 2
  %108 = load i16, i16* %30, align 2
  %109 = zext i16 %108 to i32
  %110 = mul nuw nsw i32 %109, %43
  %111 = load i16, i16* %44, align 2
  %112 = zext i16 %111 to i32
  %113 = mul nuw nsw i32 %112, 50
  %114 = add nuw nsw i32 %48, %110
  %115 = add nuw nsw i32 %114, %31
  %116 = add nuw nsw i32 %115, %113
  %117 = lshr i32 %116, 9
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds i16, i16* %40, i64 5
  store i16 %118, i16* %119, align 2
  %120 = load i16, i16* %33, align 2
  %121 = zext i16 %120 to i32
  %122 = mul nuw nsw i32 %121, %43
  %123 = load i16, i16* %44, align 2
  %124 = zext i16 %123 to i32
  %125 = mul nuw nsw i32 %124, 37
  %126 = add nuw nsw i32 %48, %122
  %127 = add nuw nsw i32 %126, %34
  %128 = add nuw nsw i32 %127, %125
  %129 = lshr i32 %128, 9
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %40, i64 6
  store i16 %130, i16* %131, align 2
  %132 = load i16, i16* %36, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %133, %43
  %135 = load i16, i16* %44, align 2
  %136 = zext i16 %135 to i32
  %137 = shl nuw nsw i32 %136, 5
  %138 = add nuw nsw i32 %48, %134
  %139 = add nuw nsw i32 %138, %37
  %140 = add nuw nsw i32 %139, %137
  %141 = lshr i32 %140, 9
  %142 = trunc i32 %141 to i16
  %143 = getelementptr inbounds i16, i16* %40, i64 7
  store i16 %142, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %40, i64 %14
  %145 = add nuw nsw i64 %39, 1
  %146 = icmp eq i64 %145, 4
  br i1 %146, label %147, label %38

147:                                              ; preds = %38
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 6
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %2, i64 10
  %21 = bitcast i8* %20 to i16*
  %22 = getelementptr inbounds i8, i8* %2, i64 12
  %23 = bitcast i8* %22 to i16*
  %24 = getelementptr inbounds i8, i8* %2, i64 14
  %25 = bitcast i8* %24 to i16*
  %26 = add nuw nsw i32 %11, 128
  %27 = load i16, i16* %5, align 2
  %28 = zext i16 %27 to i32
  %29 = mul nuw nsw i32 %28, 255
  %30 = add nuw nsw i32 %26, %29
  %31 = lshr i32 %30, 8
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %9, align 2
  %33 = load i16, i16* %13, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %34, 255
  %36 = add nuw nsw i32 %26, %35
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i16
  %39 = getelementptr inbounds i8, i8* %0, i64 2
  %40 = bitcast i8* %39 to i16*
  store i16 %38, i16* %40, align 2
  %41 = load i16, i16* %15, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %42, 255
  %44 = add nuw nsw i32 %26, %43
  %45 = lshr i32 %44, 8
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds i8, i8* %0, i64 4
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = load i16, i16* %17, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %50, 255
  %52 = add nuw nsw i32 %26, %51
  %53 = lshr i32 %52, 8
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i8, i8* %0, i64 6
  %56 = bitcast i8* %55 to i16*
  store i16 %54, i16* %56, align 2
  %57 = load i16, i16* %19, align 2
  %58 = zext i16 %57 to i32
  %59 = mul nuw nsw i32 %58, 255
  %60 = add nuw nsw i32 %26, %59
  %61 = lshr i32 %60, 8
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i8, i8* %0, i64 8
  %64 = bitcast i8* %63 to i16*
  store i16 %62, i16* %64, align 2
  %65 = load i16, i16* %21, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, 255
  %68 = add nuw nsw i32 %26, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i8, i8* %0, i64 10
  %72 = bitcast i8* %71 to i16*
  store i16 %70, i16* %72, align 2
  %73 = load i16, i16* %23, align 2
  %74 = zext i16 %73 to i32
  %75 = mul nuw nsw i32 %74, 255
  %76 = add nuw nsw i32 %26, %75
  %77 = lshr i32 %76, 8
  %78 = trunc i32 %77 to i16
  %79 = getelementptr inbounds i8, i8* %0, i64 12
  %80 = bitcast i8* %79 to i16*
  store i16 %78, i16* %80, align 2
  %81 = load i16, i16* %25, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nuw nsw i32 %82, 255
  %84 = add nuw nsw i32 %26, %83
  %85 = lshr i32 %84, 8
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i8, i8* %0, i64 14
  %88 = bitcast i8* %87 to i16*
  store i16 %86, i16* %88, align 2
  %89 = getelementptr inbounds i16, i16* %9, i64 %10
  %90 = mul nuw nsw i32 %11, 107
  %91 = add nuw nsw i32 %90, 128
  %92 = load i16, i16* %5, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %93, 149
  %95 = add nuw nsw i32 %91, %94
  %96 = lshr i32 %95, 8
  %97 = trunc i32 %96 to i16
  store i16 %97, i16* %89, align 2
  %98 = load i16, i16* %13, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nuw nsw i32 %99, 149
  %101 = add nuw nsw i32 %91, %100
  %102 = lshr i32 %101, 8
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %89, i64 1
  store i16 %103, i16* %104, align 2
  %105 = load i16, i16* %15, align 2
  %106 = zext i16 %105 to i32
  %107 = mul nuw nsw i32 %106, 149
  %108 = add nuw nsw i32 %91, %107
  %109 = lshr i32 %108, 8
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %89, i64 2
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %17, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %113, 149
  %115 = add nuw nsw i32 %91, %114
  %116 = lshr i32 %115, 8
  %117 = trunc i32 %116 to i16
  %118 = getelementptr inbounds i16, i16* %89, i64 3
  store i16 %117, i16* %118, align 2
  %119 = load i16, i16* %19, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %120, 149
  %122 = add nuw nsw i32 %91, %121
  %123 = lshr i32 %122, 8
  %124 = trunc i32 %123 to i16
  %125 = getelementptr inbounds i16, i16* %89, i64 4
  store i16 %124, i16* %125, align 2
  %126 = load i16, i16* %21, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %127, 149
  %129 = add nuw nsw i32 %91, %128
  %130 = lshr i32 %129, 8
  %131 = trunc i32 %130 to i16
  %132 = getelementptr inbounds i16, i16* %89, i64 5
  store i16 %131, i16* %132, align 2
  %133 = load i16, i16* %23, align 2
  %134 = zext i16 %133 to i32
  %135 = mul nuw nsw i32 %134, 149
  %136 = add nuw nsw i32 %91, %135
  %137 = lshr i32 %136, 8
  %138 = trunc i32 %137 to i16
  %139 = getelementptr inbounds i16, i16* %89, i64 6
  store i16 %138, i16* %139, align 2
  %140 = load i16, i16* %25, align 2
  %141 = zext i16 %140 to i32
  %142 = mul nuw nsw i32 %141, 149
  %143 = add nuw nsw i32 %91, %142
  %144 = lshr i32 %143, 8
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds i16, i16* %89, i64 7
  store i16 %145, i16* %146, align 2
  %147 = getelementptr inbounds i16, i16* %89, i64 %10
  %148 = mul nuw nsw i32 %11, 171
  %149 = add nuw nsw i32 %148, 128
  %150 = load i16, i16* %5, align 2
  %151 = zext i16 %150 to i32
  %152 = mul nuw nsw i32 %151, 85
  %153 = add nuw nsw i32 %149, %152
  %154 = lshr i32 %153, 8
  %155 = trunc i32 %154 to i16
  store i16 %155, i16* %147, align 2
  %156 = load i16, i16* %13, align 2
  %157 = zext i16 %156 to i32
  %158 = mul nuw nsw i32 %157, 85
  %159 = add nuw nsw i32 %149, %158
  %160 = lshr i32 %159, 8
  %161 = trunc i32 %160 to i16
  %162 = getelementptr inbounds i16, i16* %147, i64 1
  store i16 %161, i16* %162, align 2
  %163 = load i16, i16* %15, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %164, 85
  %166 = add nuw nsw i32 %149, %165
  %167 = lshr i32 %166, 8
  %168 = trunc i32 %167 to i16
  %169 = getelementptr inbounds i16, i16* %147, i64 2
  store i16 %168, i16* %169, align 2
  %170 = load i16, i16* %17, align 2
  %171 = zext i16 %170 to i32
  %172 = mul nuw nsw i32 %171, 85
  %173 = add nuw nsw i32 %149, %172
  %174 = lshr i32 %173, 8
  %175 = trunc i32 %174 to i16
  %176 = getelementptr inbounds i16, i16* %147, i64 3
  store i16 %175, i16* %176, align 2
  %177 = load i16, i16* %19, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %178, 85
  %180 = add nuw nsw i32 %149, %179
  %181 = lshr i32 %180, 8
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %147, i64 4
  store i16 %182, i16* %183, align 2
  %184 = load i16, i16* %21, align 2
  %185 = zext i16 %184 to i32
  %186 = mul nuw nsw i32 %185, 85
  %187 = add nuw nsw i32 %149, %186
  %188 = lshr i32 %187, 8
  %189 = trunc i32 %188 to i16
  %190 = getelementptr inbounds i16, i16* %147, i64 5
  store i16 %189, i16* %190, align 2
  %191 = load i16, i16* %23, align 2
  %192 = zext i16 %191 to i32
  %193 = mul nuw nsw i32 %192, 85
  %194 = add nuw nsw i32 %149, %193
  %195 = lshr i32 %194, 8
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %147, i64 6
  store i16 %196, i16* %197, align 2
  %198 = load i16, i16* %25, align 2
  %199 = zext i16 %198 to i32
  %200 = mul nuw nsw i32 %199, 85
  %201 = add nuw nsw i32 %149, %200
  %202 = lshr i32 %201, 8
  %203 = trunc i32 %202 to i16
  %204 = getelementptr inbounds i16, i16* %147, i64 7
  store i16 %203, i16* %204, align 2
  %205 = getelementptr inbounds i16, i16* %147, i64 %10
  %206 = mul nuw nsw i32 %11, 192
  %207 = add nuw nsw i32 %206, 128
  %208 = load i16, i16* %5, align 2
  %209 = zext i16 %208 to i32
  %210 = shl nuw nsw i32 %209, 6
  %211 = add nuw nsw i32 %207, %210
  %212 = lshr i32 %211, 8
  %213 = trunc i32 %212 to i16
  store i16 %213, i16* %205, align 2
  %214 = load i16, i16* %13, align 2
  %215 = zext i16 %214 to i32
  %216 = shl nuw nsw i32 %215, 6
  %217 = add nuw nsw i32 %207, %216
  %218 = lshr i32 %217, 8
  %219 = trunc i32 %218 to i16
  %220 = getelementptr inbounds i16, i16* %205, i64 1
  store i16 %219, i16* %220, align 2
  %221 = load i16, i16* %15, align 2
  %222 = zext i16 %221 to i32
  %223 = shl nuw nsw i32 %222, 6
  %224 = add nuw nsw i32 %207, %223
  %225 = lshr i32 %224, 8
  %226 = trunc i32 %225 to i16
  %227 = getelementptr inbounds i16, i16* %205, i64 2
  store i16 %226, i16* %227, align 2
  %228 = load i16, i16* %17, align 2
  %229 = zext i16 %228 to i32
  %230 = shl nuw nsw i32 %229, 6
  %231 = add nuw nsw i32 %207, %230
  %232 = lshr i32 %231, 8
  %233 = trunc i32 %232 to i16
  %234 = getelementptr inbounds i16, i16* %205, i64 3
  store i16 %233, i16* %234, align 2
  %235 = load i16, i16* %19, align 2
  %236 = zext i16 %235 to i32
  %237 = shl nuw nsw i32 %236, 6
  %238 = add nuw nsw i32 %207, %237
  %239 = lshr i32 %238, 8
  %240 = trunc i32 %239 to i16
  %241 = getelementptr inbounds i16, i16* %205, i64 4
  store i16 %240, i16* %241, align 2
  %242 = load i16, i16* %21, align 2
  %243 = zext i16 %242 to i32
  %244 = shl nuw nsw i32 %243, 6
  %245 = add nuw nsw i32 %207, %244
  %246 = lshr i32 %245, 8
  %247 = trunc i32 %246 to i16
  %248 = getelementptr inbounds i16, i16* %205, i64 5
  store i16 %247, i16* %248, align 2
  %249 = load i16, i16* %23, align 2
  %250 = zext i16 %249 to i32
  %251 = shl nuw nsw i32 %250, 6
  %252 = add nuw nsw i32 %207, %251
  %253 = lshr i32 %252, 8
  %254 = trunc i32 %253 to i16
  %255 = getelementptr inbounds i16, i16* %205, i64 6
  store i16 %254, i16* %255, align 2
  %256 = load i16, i16* %25, align 2
  %257 = zext i16 %256 to i32
  %258 = shl nuw nsw i32 %257, 6
  %259 = add nuw nsw i32 %207, %258
  %260 = lshr i32 %259, 8
  %261 = trunc i32 %260 to i16
  %262 = getelementptr inbounds i16, i16* %205, i64 7
  store i16 %261, i16* %262, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi4EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 14
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %11, 59
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %11, 110
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %11, 151
  %18 = add nuw nsw i32 %17, 128
  %19 = mul nuw nsw i32 %11, 183
  %20 = add nuw nsw i32 %19, 128
  %21 = mul nuw nsw i32 %11, 206
  %22 = add nuw nsw i32 %21, 128
  %23 = mul nuw nsw i32 %11, 219
  %24 = add nuw nsw i32 %23, 128
  %25 = mul nuw nsw i32 %11, 224
  %26 = add nuw nsw i32 %25, 128
  br label %27

27:                                               ; preds = %27, %4
  %28 = phi i64 [ 0, %4 ], [ %87, %27 ]
  %29 = phi i16* [ %9, %4 ], [ %86, %27 ]
  %30 = getelementptr inbounds i16, i16* %5, i64 %28
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = mul nuw nsw i32 %32, 255
  %34 = add nuw nsw i32 %12, %33
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %29, align 2
  %37 = load i16, i16* %30, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %38, 197
  %40 = add nuw nsw i32 %14, %39
  %41 = lshr i32 %40, 8
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 %42, i16* %43, align 2
  %44 = load i16, i16* %30, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %45, 146
  %47 = add nuw nsw i32 %16, %46
  %48 = lshr i32 %47, 8
  %49 = trunc i32 %48 to i16
  %50 = getelementptr inbounds i16, i16* %29, i64 2
  store i16 %49, i16* %50, align 2
  %51 = load i16, i16* %30, align 2
  %52 = zext i16 %51 to i32
  %53 = mul nuw nsw i32 %52, 105
  %54 = add nuw nsw i32 %18, %53
  %55 = lshr i32 %54, 8
  %56 = trunc i32 %55 to i16
  %57 = getelementptr inbounds i16, i16* %29, i64 3
  store i16 %56, i16* %57, align 2
  %58 = load i16, i16* %30, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, 73
  %61 = add nuw nsw i32 %20, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %29, i64 4
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %30, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, 50
  %68 = add nuw nsw i32 %22, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %29, i64 5
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %30, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, 37
  %75 = add nuw nsw i32 %24, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %29, i64 6
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %30, align 2
  %80 = zext i16 %79 to i32
  %81 = shl nuw nsw i32 %80, 5
  %82 = add nuw nsw i32 %26, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %29, i64 7
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %29, i64 %10
  %87 = add nuw nsw i64 %28, 1
  %88 = icmp eq i64 %87, 4
  br i1 %88, label %89, label %27

89:                                               ; preds = %27
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi8ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i16, i16* %6, i64 %5
  %9 = bitcast i16* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i16, i16* %8, i64 %5
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %10, i64 %5
  %13 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %12, i64 %5
  store i16 512, i16* %14, align 2
  %15 = getelementptr inbounds i16, i16* %14, i64 1
  store i16 512, i16* %15, align 2
  %16 = getelementptr inbounds i16, i16* %14, i64 2
  store i16 512, i16* %16, align 2
  %17 = getelementptr inbounds i16, i16* %14, i64 3
  store i16 512, i16* %17, align 2
  %18 = getelementptr inbounds i16, i16* %14, i64 4
  store i16 512, i16* %18, align 2
  %19 = getelementptr inbounds i16, i16* %14, i64 5
  store i16 512, i16* %19, align 2
  %20 = getelementptr inbounds i16, i16* %14, i64 6
  store i16 512, i16* %20, align 2
  %21 = getelementptr inbounds i16, i16* %14, i64 7
  store i16 512, i16* %21, align 2
  %22 = getelementptr inbounds i16, i16* %14, i64 %5
  store i16 512, i16* %22, align 2
  %23 = getelementptr inbounds i16, i16* %22, i64 1
  store i16 512, i16* %23, align 2
  %24 = getelementptr inbounds i16, i16* %22, i64 2
  store i16 512, i16* %24, align 2
  %25 = getelementptr inbounds i16, i16* %22, i64 3
  store i16 512, i16* %25, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 4
  store i16 512, i16* %26, align 2
  %27 = getelementptr inbounds i16, i16* %22, i64 5
  store i16 512, i16* %27, align 2
  %28 = getelementptr inbounds i16, i16* %22, i64 6
  store i16 512, i16* %28, align 2
  %29 = getelementptr inbounds i16, i16* %22, i64 7
  store i16 512, i16* %29, align 2
  %30 = getelementptr inbounds i16, i16* %22, i64 %5
  store i16 512, i16* %30, align 2
  %31 = getelementptr inbounds i16, i16* %30, i64 1
  store i16 512, i16* %31, align 2
  %32 = getelementptr inbounds i16, i16* %30, i64 2
  store i16 512, i16* %32, align 2
  %33 = getelementptr inbounds i16, i16* %30, i64 3
  store i16 512, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %30, i64 4
  store i16 512, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %30, i64 5
  store i16 512, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %30, i64 6
  store i16 512, i16* %36, align 2
  %37 = getelementptr inbounds i16, i16* %30, i64 7
  store i16 512, i16* %37, align 2
  %38 = getelementptr inbounds i16, i16* %30, i64 %5
  store i16 512, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %38, i64 1
  store i16 512, i16* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 2
  store i16 512, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %38, i64 3
  store i16 512, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 4
  store i16 512, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %38, i64 5
  store i16 512, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %38, i64 6
  store i16 512, i16* %44, align 2
  %45 = getelementptr inbounds i16, i16* %38, i64 7
  store i16 512, i16* %45, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 4
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = lshr i32 %43, 3
  %45 = bitcast i8* %0 to i16*
  %46 = lshr i64 %1, 1
  %47 = trunc i32 %44 to i16
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds i16, i16* %45, i64 %46
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %51, i64 %46
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds i16, i16* %53, i64 %46
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i16, i16* %55, i64 %46
  store i16 %47, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %57, i64 1
  store i16 %47, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %57, i64 2
  store i16 %47, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %57, i64 3
  store i16 %47, i16* %60, align 2
  %61 = getelementptr inbounds i16, i16* %57, i64 4
  store i16 %47, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %57, i64 5
  store i16 %47, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %57, i64 6
  store i16 %47, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %57, i64 7
  store i16 %47, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %57, i64 %46
  store i16 %47, i16* %65, align 2
  %66 = getelementptr inbounds i16, i16* %65, i64 1
  store i16 %47, i16* %66, align 2
  %67 = getelementptr inbounds i16, i16* %65, i64 2
  store i16 %47, i16* %67, align 2
  %68 = getelementptr inbounds i16, i16* %65, i64 3
  store i16 %47, i16* %68, align 2
  %69 = getelementptr inbounds i16, i16* %65, i64 4
  store i16 %47, i16* %69, align 2
  %70 = getelementptr inbounds i16, i16* %65, i64 5
  store i16 %47, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %65, i64 6
  store i16 %47, i16* %71, align 2
  %72 = getelementptr inbounds i16, i16* %65, i64 7
  store i16 %47, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %65, i64 %46
  store i16 %47, i16* %73, align 2
  %74 = getelementptr inbounds i16, i16* %73, i64 1
  store i16 %47, i16* %74, align 2
  %75 = getelementptr inbounds i16, i16* %73, i64 2
  store i16 %47, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %73, i64 3
  store i16 %47, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %73, i64 4
  store i16 %47, i16* %77, align 2
  %78 = getelementptr inbounds i16, i16* %73, i64 5
  store i16 %47, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %73, i64 6
  store i16 %47, i16* %79, align 2
  %80 = getelementptr inbounds i16, i16* %73, i64 7
  store i16 %47, i16* %80, align 2
  %81 = getelementptr inbounds i16, i16* %73, i64 %46
  store i16 %47, i16* %81, align 2
  %82 = getelementptr inbounds i16, i16* %81, i64 1
  store i16 %47, i16* %82, align 2
  %83 = getelementptr inbounds i16, i16* %81, i64 2
  store i16 %47, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %81, i64 3
  store i16 %47, i16* %84, align 2
  %85 = getelementptr inbounds i16, i16* %81, i64 4
  store i16 %47, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %81, i64 5
  store i16 %47, i16* %86, align 2
  %87 = getelementptr inbounds i16, i16* %81, i64 6
  store i16 %47, i16* %87, align 2
  %88 = getelementptr inbounds i16, i16* %81, i64 7
  store i16 %47, i16* %88, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 4
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = lshr i32 %43, 3
  %45 = bitcast i8* %0 to i16*
  %46 = lshr i64 %1, 1
  %47 = trunc i32 %44 to i16
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds i16, i16* %45, i64 %46
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %51, i64 %46
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds i16, i16* %53, i64 %46
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i16, i16* %55, i64 %46
  store i16 %47, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %57, i64 1
  store i16 %47, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %57, i64 2
  store i16 %47, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %57, i64 3
  store i16 %47, i16* %60, align 2
  %61 = getelementptr inbounds i16, i16* %57, i64 4
  store i16 %47, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %57, i64 5
  store i16 %47, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %57, i64 6
  store i16 %47, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %57, i64 7
  store i16 %47, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %57, i64 %46
  store i16 %47, i16* %65, align 2
  %66 = getelementptr inbounds i16, i16* %65, i64 1
  store i16 %47, i16* %66, align 2
  %67 = getelementptr inbounds i16, i16* %65, i64 2
  store i16 %47, i16* %67, align 2
  %68 = getelementptr inbounds i16, i16* %65, i64 3
  store i16 %47, i16* %68, align 2
  %69 = getelementptr inbounds i16, i16* %65, i64 4
  store i16 %47, i16* %69, align 2
  %70 = getelementptr inbounds i16, i16* %65, i64 5
  store i16 %47, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %65, i64 6
  store i16 %47, i16* %71, align 2
  %72 = getelementptr inbounds i16, i16* %65, i64 7
  store i16 %47, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %65, i64 %46
  store i16 %47, i16* %73, align 2
  %74 = getelementptr inbounds i16, i16* %73, i64 1
  store i16 %47, i16* %74, align 2
  %75 = getelementptr inbounds i16, i16* %73, i64 2
  store i16 %47, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %73, i64 3
  store i16 %47, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %73, i64 4
  store i16 %47, i16* %77, align 2
  %78 = getelementptr inbounds i16, i16* %73, i64 5
  store i16 %47, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %73, i64 6
  store i16 %47, i16* %79, align 2
  %80 = getelementptr inbounds i16, i16* %73, i64 7
  store i16 %47, i16* %80, align 2
  %81 = getelementptr inbounds i16, i16* %73, i64 %46
  store i16 %47, i16* %81, align 2
  %82 = getelementptr inbounds i16, i16* %81, i64 1
  store i16 %47, i16* %82, align 2
  %83 = getelementptr inbounds i16, i16* %81, i64 2
  store i16 %47, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %81, i64 3
  store i16 %47, i16* %84, align 2
  %85 = getelementptr inbounds i16, i16* %81, i64 4
  store i16 %47, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %81, i64 5
  store i16 %47, i16* %86, align 2
  %87 = getelementptr inbounds i16, i16* %81, i64 6
  store i16 %47, i16* %87, align 2
  %88 = getelementptr inbounds i16, i16* %81, i64 7
  store i16 %47, i16* %88, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = bitcast i8* %3 to i16*
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = add nuw nsw i32 %43, %46
  %48 = getelementptr inbounds i8, i8* %3, i64 2
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nuw nsw i32 %47, %51
  %53 = getelementptr inbounds i8, i8* %3, i64 4
  %54 = bitcast i8* %53 to i16*
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = add nuw nsw i32 %52, %56
  %58 = getelementptr inbounds i8, i8* %3, i64 6
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = add nuw nsw i32 %57, %61
  %63 = getelementptr inbounds i8, i8* %3, i64 8
  %64 = bitcast i8* %63 to i16*
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = add nuw nsw i32 %62, %66
  %68 = getelementptr inbounds i8, i8* %3, i64 10
  %69 = bitcast i8* %68 to i16*
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = add nuw nsw i32 %67, %71
  %73 = getelementptr inbounds i8, i8* %3, i64 12
  %74 = bitcast i8* %73 to i16*
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = add nuw nsw i32 %72, %76
  %78 = getelementptr inbounds i8, i8* %3, i64 14
  %79 = bitcast i8* %78 to i16*
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = add nuw nsw i32 %77, %81
  %83 = lshr i32 %82, 4
  %84 = bitcast i8* %0 to i16*
  %85 = lshr i64 %1, 1
  %86 = trunc i32 %83 to i16
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %89, align 2
  %90 = getelementptr inbounds i16, i16* %84, i64 %85
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds i16, i16* %90, i64 %85
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %93, align 2
  %94 = getelementptr inbounds i16, i16* %92, i64 %85
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds i16, i16* %94, i64 %85
  store i16 %86, i16* %96, align 2
  %97 = getelementptr inbounds i16, i16* %96, i64 1
  store i16 %86, i16* %97, align 2
  %98 = getelementptr inbounds i16, i16* %96, i64 2
  store i16 %86, i16* %98, align 2
  %99 = getelementptr inbounds i16, i16* %96, i64 3
  store i16 %86, i16* %99, align 2
  %100 = getelementptr inbounds i16, i16* %96, i64 4
  store i16 %86, i16* %100, align 2
  %101 = getelementptr inbounds i16, i16* %96, i64 5
  store i16 %86, i16* %101, align 2
  %102 = getelementptr inbounds i16, i16* %96, i64 6
  store i16 %86, i16* %102, align 2
  %103 = getelementptr inbounds i16, i16* %96, i64 7
  store i16 %86, i16* %103, align 2
  %104 = getelementptr inbounds i16, i16* %96, i64 %85
  store i16 %86, i16* %104, align 2
  %105 = getelementptr inbounds i16, i16* %104, i64 1
  store i16 %86, i16* %105, align 2
  %106 = getelementptr inbounds i16, i16* %104, i64 2
  store i16 %86, i16* %106, align 2
  %107 = getelementptr inbounds i16, i16* %104, i64 3
  store i16 %86, i16* %107, align 2
  %108 = getelementptr inbounds i16, i16* %104, i64 4
  store i16 %86, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %104, i64 5
  store i16 %86, i16* %109, align 2
  %110 = getelementptr inbounds i16, i16* %104, i64 6
  store i16 %86, i16* %110, align 2
  %111 = getelementptr inbounds i16, i16* %104, i64 7
  store i16 %86, i16* %111, align 2
  %112 = getelementptr inbounds i16, i16* %104, i64 %85
  store i16 %86, i16* %112, align 2
  %113 = getelementptr inbounds i16, i16* %112, i64 1
  store i16 %86, i16* %113, align 2
  %114 = getelementptr inbounds i16, i16* %112, i64 2
  store i16 %86, i16* %114, align 2
  %115 = getelementptr inbounds i16, i16* %112, i64 3
  store i16 %86, i16* %115, align 2
  %116 = getelementptr inbounds i16, i16* %112, i64 4
  store i16 %86, i16* %116, align 2
  %117 = getelementptr inbounds i16, i16* %112, i64 5
  store i16 %86, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %112, i64 6
  store i16 %86, i16* %118, align 2
  %119 = getelementptr inbounds i16, i16* %112, i64 7
  store i16 %86, i16* %119, align 2
  %120 = getelementptr inbounds i16, i16* %112, i64 %85
  store i16 %86, i16* %120, align 2
  %121 = getelementptr inbounds i16, i16* %120, i64 1
  store i16 %86, i16* %121, align 2
  %122 = getelementptr inbounds i16, i16* %120, i64 2
  store i16 %86, i16* %122, align 2
  %123 = getelementptr inbounds i16, i16* %120, i64 3
  store i16 %86, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %120, i64 4
  store i16 %86, i16* %124, align 2
  %125 = getelementptr inbounds i16, i16* %120, i64 5
  store i16 %86, i16* %125, align 2
  %126 = getelementptr inbounds i16, i16* %120, i64 6
  store i16 %86, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %120, i64 7
  store i16 %86, i16* %127, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 16, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 16, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 16, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 16, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 16, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 16, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 16, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 16, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  %8 = load i16, i16* %5, align 2
  %9 = insertelement <8 x i16> undef, i16 %8, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %6, i64 %7
  %13 = getelementptr inbounds i8, i8* %3, i64 2
  %14 = bitcast i8* %13 to i16*
  %15 = load i16, i16* %14, align 2
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = shufflevector <8 x i16> %16, <8 x i16> undef, <8 x i32> zeroinitializer
  %18 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> %17, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %12, i64 %7
  %20 = getelementptr inbounds i8, i8* %3, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = load i16, i16* %21, align 2
  %23 = insertelement <8 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  %25 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %19, i64 %7
  %27 = getelementptr inbounds i8, i8* %3, i64 6
  %28 = bitcast i8* %27 to i16*
  %29 = load i16, i16* %28, align 2
  %30 = insertelement <8 x i16> undef, i16 %29, i32 0
  %31 = shufflevector <8 x i16> %30, <8 x i16> undef, <8 x i32> zeroinitializer
  %32 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %26, i64 %7
  %34 = getelementptr inbounds i8, i8* %3, i64 8
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  store i16 %36, i16* %33, align 2
  %37 = getelementptr inbounds i16, i16* %33, i64 1
  store i16 %36, i16* %37, align 2
  %38 = getelementptr inbounds i16, i16* %33, i64 2
  store i16 %36, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %33, i64 3
  store i16 %36, i16* %39, align 2
  %40 = getelementptr inbounds i16, i16* %33, i64 4
  store i16 %36, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %33, i64 5
  store i16 %36, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %33, i64 6
  store i16 %36, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %33, i64 7
  store i16 %36, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %33, i64 %7
  %45 = getelementptr inbounds i8, i8* %3, i64 10
  %46 = bitcast i8* %45 to i16*
  %47 = load i16, i16* %46, align 2
  store i16 %47, i16* %44, align 2
  %48 = getelementptr inbounds i16, i16* %44, i64 1
  store i16 %47, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %44, i64 2
  store i16 %47, i16* %49, align 2
  %50 = getelementptr inbounds i16, i16* %44, i64 3
  store i16 %47, i16* %50, align 2
  %51 = getelementptr inbounds i16, i16* %44, i64 4
  store i16 %47, i16* %51, align 2
  %52 = getelementptr inbounds i16, i16* %44, i64 5
  store i16 %47, i16* %52, align 2
  %53 = getelementptr inbounds i16, i16* %44, i64 6
  store i16 %47, i16* %53, align 2
  %54 = getelementptr inbounds i16, i16* %44, i64 7
  store i16 %47, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %44, i64 %7
  %56 = getelementptr inbounds i8, i8* %3, i64 12
  %57 = bitcast i8* %56 to i16*
  %58 = load i16, i16* %57, align 2
  store i16 %58, i16* %55, align 2
  %59 = getelementptr inbounds i16, i16* %55, i64 1
  store i16 %58, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %55, i64 2
  store i16 %58, i16* %60, align 2
  %61 = getelementptr inbounds i16, i16* %55, i64 3
  store i16 %58, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %55, i64 4
  store i16 %58, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %55, i64 5
  store i16 %58, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %55, i64 6
  store i16 %58, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %55, i64 7
  store i16 %58, i16* %65, align 2
  %66 = getelementptr inbounds i16, i16* %55, i64 %7
  %67 = getelementptr inbounds i8, i8* %3, i64 14
  %68 = bitcast i8* %67 to i16*
  %69 = load i16, i16* %68, align 2
  store i16 %69, i16* %66, align 2
  %70 = getelementptr inbounds i16, i16* %66, i64 1
  store i16 %69, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %66, i64 2
  store i16 %69, i16* %71, align 2
  %72 = getelementptr inbounds i16, i16* %66, i64 3
  store i16 %69, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %66, i64 4
  store i16 %69, i16* %73, align 2
  %74 = getelementptr inbounds i16, i16* %66, i64 5
  store i16 %69, i16* %74, align 2
  %75 = getelementptr inbounds i16, i16* %66, i64 6
  store i16 %69, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %66, i64 7
  store i16 %69, i16* %76, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 8
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 8
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 14
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 14
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = getelementptr inbounds i8, i8* %2, i64 2
  %18 = bitcast i8* %17 to i16*
  %19 = mul nuw nsw i32 %16, 59
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = mul nuw nsw i32 %16, 110
  %23 = getelementptr inbounds i8, i8* %2, i64 6
  %24 = bitcast i8* %23 to i16*
  %25 = mul nuw nsw i32 %16, 151
  %26 = getelementptr inbounds i8, i8* %2, i64 8
  %27 = bitcast i8* %26 to i16*
  %28 = mul nuw nsw i32 %16, 183
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = mul nuw nsw i32 %16, 206
  %32 = getelementptr inbounds i8, i8* %2, i64 12
  %33 = bitcast i8* %32 to i16*
  %34 = mul nuw nsw i32 %16, 219
  %35 = getelementptr inbounds i8, i8* %2, i64 14
  %36 = bitcast i8* %35 to i16*
  %37 = mul nuw nsw i32 %16, 224
  br label %38

38:                                               ; preds = %38, %4
  %39 = phi i64 [ 0, %4 ], [ %145, %38 ]
  %40 = phi i16* [ %13, %4 ], [ %144, %38 ]
  %41 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %39
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds i16, i16* %6, i64 %39
  %45 = sub i8 0, %42
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %15
  %48 = add nuw nsw i32 %47, 256
  %49 = load i16, i16* %5, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %50, %43
  %52 = load i16, i16* %44, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, 255
  %55 = add nuw nsw i32 %48, %51
  %56 = add nuw nsw i32 %55, %16
  %57 = add nuw nsw i32 %56, %54
  %58 = lshr i32 %57, 9
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %40, align 2
  %60 = load i16, i16* %18, align 2
  %61 = zext i16 %60 to i32
  %62 = mul nuw nsw i32 %61, %43
  %63 = load i16, i16* %44, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, 197
  %66 = add nuw nsw i32 %48, %62
  %67 = add nuw nsw i32 %66, %19
  %68 = add nuw nsw i32 %67, %65
  %69 = lshr i32 %68, 9
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %40, i64 1
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %21, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %43
  %75 = load i16, i16* %44, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %76, 146
  %78 = add nuw nsw i32 %48, %74
  %79 = add nuw nsw i32 %78, %22
  %80 = add nuw nsw i32 %79, %77
  %81 = lshr i32 %80, 9
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %40, i64 2
  store i16 %82, i16* %83, align 2
  %84 = load i16, i16* %24, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %85, %43
  %87 = load i16, i16* %44, align 2
  %88 = zext i16 %87 to i32
  %89 = mul nuw nsw i32 %88, 105
  %90 = add nuw nsw i32 %48, %86
  %91 = add nuw nsw i32 %90, %25
  %92 = add nuw nsw i32 %91, %89
  %93 = lshr i32 %92, 9
  %94 = trunc i32 %93 to i16
  %95 = getelementptr inbounds i16, i16* %40, i64 3
  store i16 %94, i16* %95, align 2
  %96 = load i16, i16* %27, align 2
  %97 = zext i16 %96 to i32
  %98 = mul nuw nsw i32 %97, %43
  %99 = load i16, i16* %44, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nuw nsw i32 %100, 73
  %102 = add nuw nsw i32 %48, %98
  %103 = add nuw nsw i32 %102, %28
  %104 = add nuw nsw i32 %103, %101
  %105 = lshr i32 %104, 9
  %106 = trunc i32 %105 to i16
  %107 = getelementptr inbounds i16, i16* %40, i64 4
  store i16 %106, i16* %107, align 2
  %108 = load i16, i16* %30, align 2
  %109 = zext i16 %108 to i32
  %110 = mul nuw nsw i32 %109, %43
  %111 = load i16, i16* %44, align 2
  %112 = zext i16 %111 to i32
  %113 = mul nuw nsw i32 %112, 50
  %114 = add nuw nsw i32 %48, %110
  %115 = add nuw nsw i32 %114, %31
  %116 = add nuw nsw i32 %115, %113
  %117 = lshr i32 %116, 9
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds i16, i16* %40, i64 5
  store i16 %118, i16* %119, align 2
  %120 = load i16, i16* %33, align 2
  %121 = zext i16 %120 to i32
  %122 = mul nuw nsw i32 %121, %43
  %123 = load i16, i16* %44, align 2
  %124 = zext i16 %123 to i32
  %125 = mul nuw nsw i32 %124, 37
  %126 = add nuw nsw i32 %48, %122
  %127 = add nuw nsw i32 %126, %34
  %128 = add nuw nsw i32 %127, %125
  %129 = lshr i32 %128, 9
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %40, i64 6
  store i16 %130, i16* %131, align 2
  %132 = load i16, i16* %36, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %133, %43
  %135 = load i16, i16* %44, align 2
  %136 = zext i16 %135 to i32
  %137 = shl nuw nsw i32 %136, 5
  %138 = add nuw nsw i32 %48, %134
  %139 = add nuw nsw i32 %138, %37
  %140 = add nuw nsw i32 %139, %137
  %141 = lshr i32 %140, 9
  %142 = trunc i32 %141 to i16
  %143 = getelementptr inbounds i16, i16* %40, i64 7
  store i16 %142, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %40, i64 %14
  %145 = add nuw nsw i64 %39, 1
  %146 = icmp eq i64 %145, 8
  br i1 %146, label %147, label %38

147:                                              ; preds = %38
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 14
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %2, i64 10
  %21 = bitcast i8* %20 to i16*
  %22 = getelementptr inbounds i8, i8* %2, i64 12
  %23 = bitcast i8* %22 to i16*
  %24 = getelementptr inbounds i8, i8* %2, i64 14
  %25 = bitcast i8* %24 to i16*
  br label %26

26:                                               ; preds = %26, %4
  %27 = phi i64 [ 0, %4 ], [ %92, %26 ]
  %28 = phi i16* [ %9, %4 ], [ %91, %26 ]
  %29 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %27
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = sub i8 0, %30
  %33 = zext i8 %32 to i32
  %34 = mul nuw nsw i32 %33, %11
  %35 = add nuw nsw i32 %34, 128
  %36 = load i16, i16* %5, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %37, %31
  %39 = add nuw nsw i32 %35, %38
  %40 = lshr i32 %39, 8
  %41 = trunc i32 %40 to i16
  store i16 %41, i16* %28, align 2
  %42 = load i16, i16* %13, align 2
  %43 = zext i16 %42 to i32
  %44 = mul nuw nsw i32 %43, %31
  %45 = add nuw nsw i32 %35, %44
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i16
  %48 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %47, i16* %48, align 2
  %49 = load i16, i16* %15, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %50, %31
  %52 = add nuw nsw i32 %35, %51
  %53 = lshr i32 %52, 8
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %54, i16* %55, align 2
  %56 = load i16, i16* %17, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %57, %31
  %59 = add nuw nsw i32 %35, %58
  %60 = lshr i32 %59, 8
  %61 = trunc i32 %60 to i16
  %62 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %61, i16* %62, align 2
  %63 = load i16, i16* %19, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, %31
  %66 = add nuw nsw i32 %35, %65
  %67 = lshr i32 %66, 8
  %68 = trunc i32 %67 to i16
  %69 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %68, i16* %69, align 2
  %70 = load i16, i16* %21, align 2
  %71 = zext i16 %70 to i32
  %72 = mul nuw nsw i32 %71, %31
  %73 = add nuw nsw i32 %35, %72
  %74 = lshr i32 %73, 8
  %75 = trunc i32 %74 to i16
  %76 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %75, i16* %76, align 2
  %77 = load i16, i16* %23, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nuw nsw i32 %78, %31
  %80 = add nuw nsw i32 %35, %79
  %81 = lshr i32 %80, 8
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %82, i16* %83, align 2
  %84 = load i16, i16* %25, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %85, %31
  %87 = add nuw nsw i32 %35, %86
  %88 = lshr i32 %87, 8
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %89, i16* %90, align 2
  %91 = getelementptr inbounds i16, i16* %28, i64 %10
  %92 = add nuw nsw i64 %27, 1
  %93 = icmp eq i64 %92, 8
  br i1 %93, label %94, label %26

94:                                               ; preds = %26
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi8EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 14
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %11, 59
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %11, 110
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %11, 151
  %18 = add nuw nsw i32 %17, 128
  %19 = mul nuw nsw i32 %11, 183
  %20 = add nuw nsw i32 %19, 128
  %21 = mul nuw nsw i32 %11, 206
  %22 = add nuw nsw i32 %21, 128
  %23 = mul nuw nsw i32 %11, 219
  %24 = add nuw nsw i32 %23, 128
  %25 = mul nuw nsw i32 %11, 224
  %26 = add nuw nsw i32 %25, 128
  br label %27

27:                                               ; preds = %27, %4
  %28 = phi i64 [ 0, %4 ], [ %87, %27 ]
  %29 = phi i16* [ %9, %4 ], [ %86, %27 ]
  %30 = getelementptr inbounds i16, i16* %5, i64 %28
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = mul nuw nsw i32 %32, 255
  %34 = add nuw nsw i32 %12, %33
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %29, align 2
  %37 = load i16, i16* %30, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %38, 197
  %40 = add nuw nsw i32 %14, %39
  %41 = lshr i32 %40, 8
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 %42, i16* %43, align 2
  %44 = load i16, i16* %30, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %45, 146
  %47 = add nuw nsw i32 %16, %46
  %48 = lshr i32 %47, 8
  %49 = trunc i32 %48 to i16
  %50 = getelementptr inbounds i16, i16* %29, i64 2
  store i16 %49, i16* %50, align 2
  %51 = load i16, i16* %30, align 2
  %52 = zext i16 %51 to i32
  %53 = mul nuw nsw i32 %52, 105
  %54 = add nuw nsw i32 %18, %53
  %55 = lshr i32 %54, 8
  %56 = trunc i32 %55 to i16
  %57 = getelementptr inbounds i16, i16* %29, i64 3
  store i16 %56, i16* %57, align 2
  %58 = load i16, i16* %30, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, 73
  %61 = add nuw nsw i32 %20, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %29, i64 4
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %30, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, 50
  %68 = add nuw nsw i32 %22, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %29, i64 5
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %30, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, 37
  %75 = add nuw nsw i32 %24, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %29, i64 6
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %30, align 2
  %80 = zext i16 %79 to i32
  %81 = shl nuw nsw i32 %80, 5
  %82 = add nuw nsw i32 %26, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %29, i64 7
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %29, i64 %10
  %87 = add nuw nsw i64 %28, 1
  %88 = icmp eq i64 %87, 8
  br i1 %88, label %89, label %27

89:                                               ; preds = %27
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi16ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i16, i16* %6, i64 %5
  %9 = bitcast i16* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i16, i16* %8, i64 %5
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %10, i64 %5
  %13 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %12, i64 %5
  %15 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i16, i16* %14, i64 %5
  %17 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %16, i64 %5
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i16, i16* %18, i64 %5
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds i16, i16* %20, i64 %5
  %23 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds i16, i16* %22, i64 %5
  %25 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %24, i64 %5
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds i16, i16* %26, i64 %5
  %29 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %28, i64 %5
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %30, i64 %5
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds i16, i16* %32, i64 %5
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds i16, i16* %34, i64 %5
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %37, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 4
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = lshr i32 %43, 3
  %45 = lshr i64 %1, 1
  %46 = trunc i32 %44 to i16
  %47 = insertelement <8 x i16> undef, i16 %46, i32 0
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <8 x i32> zeroinitializer
  %49 = bitcast i8* %0 to i16*
  %50 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds i16, i16* %49, i64 %45
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %51, i64 %45
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds i16, i16* %53, i64 %45
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i16, i16* %55, i64 %45
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %58, align 2
  %59 = getelementptr inbounds i16, i16* %57, i64 %45
  %60 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds i16, i16* %59, i64 %45
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds i16, i16* %61, i64 %45
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds i16, i16* %63, i64 %45
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %66, align 2
  %67 = getelementptr inbounds i16, i16* %65, i64 %45
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %68, align 2
  %69 = getelementptr inbounds i16, i16* %67, i64 %45
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds i16, i16* %69, i64 %45
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %72, align 2
  %73 = getelementptr inbounds i16, i16* %71, i64 %45
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds i16, i16* %73, i64 %45
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds i16, i16* %75, i64 %45
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds i16, i16* %77, i64 %45
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %80, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = lshr i64 %1, 1
  %86 = trunc i32 %84 to i16
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = bitcast i8* %0 to i16*
  %90 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds i16, i16* %89, i64 %85
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i16, i16* %91, i64 %85
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i16, i16* %93, i64 %85
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %95, i64 %85
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i16, i16* %97, i64 %85
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i16, i16* %99, i64 %85
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %101, i64 %85
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %103, i64 %85
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %105, i64 %85
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %107, i64 %85
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %109, i64 %85
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %111, i64 %85
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds i16, i16* %113, i64 %85
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %115, i64 %85
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds i16, i16* %117, i64 %85
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %120, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 12
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = bitcast i8* %3 to i16*
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = add nuw nsw i32 %43, %46
  %48 = getelementptr inbounds i8, i8* %3, i64 2
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nuw nsw i32 %47, %51
  %53 = getelementptr inbounds i8, i8* %3, i64 4
  %54 = bitcast i8* %53 to i16*
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = add nuw nsw i32 %52, %56
  %58 = getelementptr inbounds i8, i8* %3, i64 6
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = add nuw nsw i32 %57, %61
  %63 = getelementptr inbounds i8, i8* %3, i64 8
  %64 = bitcast i8* %63 to i16*
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = add nuw nsw i32 %62, %66
  %68 = getelementptr inbounds i8, i8* %3, i64 10
  %69 = bitcast i8* %68 to i16*
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = add nuw nsw i32 %67, %71
  %73 = getelementptr inbounds i8, i8* %3, i64 12
  %74 = bitcast i8* %73 to i16*
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = add nuw nsw i32 %72, %76
  %78 = getelementptr inbounds i8, i8* %3, i64 14
  %79 = bitcast i8* %78 to i16*
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = add nuw nsw i32 %77, %81
  %83 = getelementptr inbounds i8, i8* %3, i64 16
  %84 = bitcast i8* %83 to i16*
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nuw nsw i32 %82, %86
  %88 = getelementptr inbounds i8, i8* %3, i64 18
  %89 = bitcast i8* %88 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %87, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 20
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 22
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nuw nsw i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 24
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = add nuw nsw i32 %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 26
  %109 = bitcast i8* %108 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = add nuw nsw i32 %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 28
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = add nuw nsw i32 %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 30
  %119 = bitcast i8* %118 to i16*
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = add nuw nsw i32 %117, %121
  %123 = udiv i32 %122, 24
  %124 = lshr i64 %1, 1
  %125 = trunc i32 %123 to i16
  %126 = insertelement <8 x i16> undef, i16 %125, i32 0
  %127 = shufflevector <8 x i16> %126, <8 x i16> undef, <8 x i32> zeroinitializer
  %128 = bitcast i8* %0 to i16*
  %129 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i16, i16* %128, i64 %124
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %130, i64 %124
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds i16, i16* %132, i64 %124
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %135, align 2
  %136 = getelementptr inbounds i16, i16* %134, i64 %124
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds i16, i16* %136, i64 %124
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %139, align 2
  %140 = getelementptr inbounds i16, i16* %138, i64 %124
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %141, align 2
  %142 = getelementptr inbounds i16, i16* %140, i64 %124
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds i16, i16* %142, i64 %124
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %145, align 2
  %146 = getelementptr inbounds i16, i16* %144, i64 %124
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds i16, i16* %146, i64 %124
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %149, align 2
  %150 = getelementptr inbounds i16, i16* %148, i64 %124
  %151 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %151, align 2
  %152 = getelementptr inbounds i16, i16* %150, i64 %124
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %153, align 2
  %154 = getelementptr inbounds i16, i16* %152, i64 %124
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %155, align 2
  %156 = getelementptr inbounds i16, i16* %154, i64 %124
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds i16, i16* %156, i64 %124
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %159, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 16, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 16, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 16, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 16, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 16, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 16, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 16, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 16, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %2, i64 16, i1 false)
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %2, i64 16, i1 false)
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %2, i64 16, i1 false)
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %2, i64 16, i1 false)
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %2, i64 16, i1 false)
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %2, i64 16, i1 false)
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %2, i64 16, i1 false)
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %2, i64 16, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %3 to i16*
  %7 = bitcast i8* %0 to i16*
  %8 = load i16, i16* %6, align 2
  %9 = insertelement <8 x i16> undef, i16 %8, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %7, i64 %5
  %13 = getelementptr inbounds i8, i8* %3, i64 2
  %14 = bitcast i8* %13 to i16*
  %15 = load i16, i16* %14, align 2
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = shufflevector <8 x i16> %16, <8 x i16> undef, <8 x i32> zeroinitializer
  %18 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> %17, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %12, i64 %5
  %20 = getelementptr inbounds i8, i8* %3, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = load i16, i16* %21, align 2
  %23 = insertelement <8 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  %25 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %19, i64 %5
  %27 = getelementptr inbounds i8, i8* %3, i64 6
  %28 = bitcast i8* %27 to i16*
  %29 = load i16, i16* %28, align 2
  %30 = insertelement <8 x i16> undef, i16 %29, i32 0
  %31 = shufflevector <8 x i16> %30, <8 x i16> undef, <8 x i32> zeroinitializer
  %32 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %26, i64 %5
  %34 = getelementptr inbounds i8, i8* %3, i64 8
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> undef, i16 %36, i32 0
  %38 = shufflevector <8 x i16> %37, <8 x i16> undef, <8 x i32> zeroinitializer
  %39 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %33, i64 %5
  %41 = getelementptr inbounds i8, i8* %3, i64 10
  %42 = bitcast i8* %41 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = insertelement <8 x i16> undef, i16 %43, i32 0
  %45 = shufflevector <8 x i16> %44, <8 x i16> undef, <8 x i32> zeroinitializer
  %46 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %46, align 2
  %47 = getelementptr inbounds i16, i16* %40, i64 %5
  %48 = getelementptr inbounds i8, i8* %3, i64 12
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <8 x i16> undef, i16 %50, i32 0
  %52 = shufflevector <8 x i16> %51, <8 x i16> undef, <8 x i32> zeroinitializer
  %53 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds i16, i16* %47, i64 %5
  %55 = getelementptr inbounds i8, i8* %3, i64 14
  %56 = bitcast i8* %55 to i16*
  %57 = load i16, i16* %56, align 2
  %58 = insertelement <8 x i16> undef, i16 %57, i32 0
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <8 x i32> zeroinitializer
  %60 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds i16, i16* %54, i64 %5
  %62 = getelementptr inbounds i8, i8* %3, i64 16
  %63 = bitcast i8* %62 to i16*
  %64 = load i16, i16* %63, align 2
  %65 = insertelement <8 x i16> undef, i16 %64, i32 0
  %66 = shufflevector <8 x i16> %65, <8 x i16> undef, <8 x i32> zeroinitializer
  %67 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %61, i64 %5
  %69 = getelementptr inbounds i8, i8* %3, i64 18
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <8 x i16> undef, i16 %71, i32 0
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <8 x i32> zeroinitializer
  %74 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds i16, i16* %68, i64 %5
  %76 = getelementptr inbounds i8, i8* %3, i64 20
  %77 = bitcast i8* %76 to i16*
  %78 = load i16, i16* %77, align 2
  %79 = insertelement <8 x i16> undef, i16 %78, i32 0
  %80 = shufflevector <8 x i16> %79, <8 x i16> undef, <8 x i32> zeroinitializer
  %81 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %81, align 2
  %82 = getelementptr inbounds i16, i16* %75, i64 %5
  %83 = getelementptr inbounds i8, i8* %3, i64 22
  %84 = bitcast i8* %83 to i16*
  %85 = load i16, i16* %84, align 2
  %86 = insertelement <8 x i16> undef, i16 %85, i32 0
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> zeroinitializer
  %88 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %88, align 2
  %89 = getelementptr inbounds i16, i16* %82, i64 %5
  %90 = getelementptr inbounds i8, i8* %3, i64 24
  %91 = bitcast i8* %90 to i16*
  %92 = load i16, i16* %91, align 2
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds i16, i16* %89, i64 %5
  %97 = getelementptr inbounds i8, i8* %3, i64 26
  %98 = bitcast i8* %97 to i16*
  %99 = load i16, i16* %98, align 2
  %100 = insertelement <8 x i16> undef, i16 %99, i32 0
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> zeroinitializer
  %102 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %96, i64 %5
  %104 = getelementptr inbounds i8, i8* %3, i64 28
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = insertelement <8 x i16> undef, i16 %106, i32 0
  %108 = shufflevector <8 x i16> %107, <8 x i16> undef, <8 x i32> zeroinitializer
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %103, i64 %5
  %111 = getelementptr inbounds i8, i8* %3, i64 30
  %112 = bitcast i8* %111 to i16*
  %113 = load i16, i16* %112, align 2
  %114 = insertelement <8 x i16> undef, i16 %113, i32 0
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <8 x i32> zeroinitializer
  %116 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 16
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 8
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 14
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 30
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = getelementptr inbounds i8, i8* %2, i64 2
  %18 = bitcast i8* %17 to i16*
  %19 = mul nuw nsw i32 %16, 59
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = mul nuw nsw i32 %16, 110
  %23 = getelementptr inbounds i8, i8* %2, i64 6
  %24 = bitcast i8* %23 to i16*
  %25 = mul nuw nsw i32 %16, 151
  %26 = getelementptr inbounds i8, i8* %2, i64 8
  %27 = bitcast i8* %26 to i16*
  %28 = mul nuw nsw i32 %16, 183
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = mul nuw nsw i32 %16, 206
  %32 = getelementptr inbounds i8, i8* %2, i64 12
  %33 = bitcast i8* %32 to i16*
  %34 = mul nuw nsw i32 %16, 219
  %35 = getelementptr inbounds i8, i8* %2, i64 14
  %36 = bitcast i8* %35 to i16*
  %37 = mul nuw nsw i32 %16, 224
  br label %38

38:                                               ; preds = %38, %4
  %39 = phi i64 [ 0, %4 ], [ %145, %38 ]
  %40 = phi i16* [ %13, %4 ], [ %144, %38 ]
  %41 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %39
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds i16, i16* %6, i64 %39
  %45 = sub i8 0, %42
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %15
  %48 = add nuw nsw i32 %47, 256
  %49 = load i16, i16* %5, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %50, %43
  %52 = load i16, i16* %44, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, 255
  %55 = add nuw nsw i32 %48, %51
  %56 = add nuw nsw i32 %55, %16
  %57 = add nuw nsw i32 %56, %54
  %58 = lshr i32 %57, 9
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %40, align 2
  %60 = load i16, i16* %18, align 2
  %61 = zext i16 %60 to i32
  %62 = mul nuw nsw i32 %61, %43
  %63 = load i16, i16* %44, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, 197
  %66 = add nuw nsw i32 %48, %62
  %67 = add nuw nsw i32 %66, %19
  %68 = add nuw nsw i32 %67, %65
  %69 = lshr i32 %68, 9
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %40, i64 1
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %21, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %43
  %75 = load i16, i16* %44, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %76, 146
  %78 = add nuw nsw i32 %48, %74
  %79 = add nuw nsw i32 %78, %22
  %80 = add nuw nsw i32 %79, %77
  %81 = lshr i32 %80, 9
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %40, i64 2
  store i16 %82, i16* %83, align 2
  %84 = load i16, i16* %24, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %85, %43
  %87 = load i16, i16* %44, align 2
  %88 = zext i16 %87 to i32
  %89 = mul nuw nsw i32 %88, 105
  %90 = add nuw nsw i32 %48, %86
  %91 = add nuw nsw i32 %90, %25
  %92 = add nuw nsw i32 %91, %89
  %93 = lshr i32 %92, 9
  %94 = trunc i32 %93 to i16
  %95 = getelementptr inbounds i16, i16* %40, i64 3
  store i16 %94, i16* %95, align 2
  %96 = load i16, i16* %27, align 2
  %97 = zext i16 %96 to i32
  %98 = mul nuw nsw i32 %97, %43
  %99 = load i16, i16* %44, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nuw nsw i32 %100, 73
  %102 = add nuw nsw i32 %48, %98
  %103 = add nuw nsw i32 %102, %28
  %104 = add nuw nsw i32 %103, %101
  %105 = lshr i32 %104, 9
  %106 = trunc i32 %105 to i16
  %107 = getelementptr inbounds i16, i16* %40, i64 4
  store i16 %106, i16* %107, align 2
  %108 = load i16, i16* %30, align 2
  %109 = zext i16 %108 to i32
  %110 = mul nuw nsw i32 %109, %43
  %111 = load i16, i16* %44, align 2
  %112 = zext i16 %111 to i32
  %113 = mul nuw nsw i32 %112, 50
  %114 = add nuw nsw i32 %48, %110
  %115 = add nuw nsw i32 %114, %31
  %116 = add nuw nsw i32 %115, %113
  %117 = lshr i32 %116, 9
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds i16, i16* %40, i64 5
  store i16 %118, i16* %119, align 2
  %120 = load i16, i16* %33, align 2
  %121 = zext i16 %120 to i32
  %122 = mul nuw nsw i32 %121, %43
  %123 = load i16, i16* %44, align 2
  %124 = zext i16 %123 to i32
  %125 = mul nuw nsw i32 %124, 37
  %126 = add nuw nsw i32 %48, %122
  %127 = add nuw nsw i32 %126, %34
  %128 = add nuw nsw i32 %127, %125
  %129 = lshr i32 %128, 9
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %40, i64 6
  store i16 %130, i16* %131, align 2
  %132 = load i16, i16* %36, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %133, %43
  %135 = load i16, i16* %44, align 2
  %136 = zext i16 %135 to i32
  %137 = shl nuw nsw i32 %136, 5
  %138 = add nuw nsw i32 %48, %134
  %139 = add nuw nsw i32 %138, %37
  %140 = add nuw nsw i32 %139, %137
  %141 = lshr i32 %140, 9
  %142 = trunc i32 %141 to i16
  %143 = getelementptr inbounds i16, i16* %40, i64 7
  store i16 %142, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %40, i64 %14
  %145 = add nuw nsw i64 %39, 1
  %146 = icmp eq i64 %145, 16
  br i1 %146, label %147, label %38

147:                                              ; preds = %38
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %2, i64 10
  %21 = bitcast i8* %20 to i16*
  %22 = getelementptr inbounds i8, i8* %2, i64 12
  %23 = bitcast i8* %22 to i16*
  %24 = getelementptr inbounds i8, i8* %2, i64 14
  %25 = bitcast i8* %24 to i16*
  br label %26

26:                                               ; preds = %26, %4
  %27 = phi i64 [ 0, %4 ], [ %92, %26 ]
  %28 = phi i16* [ %9, %4 ], [ %91, %26 ]
  %29 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %27
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = sub i8 0, %30
  %33 = zext i8 %32 to i32
  %34 = mul nuw nsw i32 %33, %11
  %35 = add nuw nsw i32 %34, 128
  %36 = load i16, i16* %5, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %37, %31
  %39 = add nuw nsw i32 %35, %38
  %40 = lshr i32 %39, 8
  %41 = trunc i32 %40 to i16
  store i16 %41, i16* %28, align 2
  %42 = load i16, i16* %13, align 2
  %43 = zext i16 %42 to i32
  %44 = mul nuw nsw i32 %43, %31
  %45 = add nuw nsw i32 %35, %44
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i16
  %48 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %47, i16* %48, align 2
  %49 = load i16, i16* %15, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %50, %31
  %52 = add nuw nsw i32 %35, %51
  %53 = lshr i32 %52, 8
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %54, i16* %55, align 2
  %56 = load i16, i16* %17, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %57, %31
  %59 = add nuw nsw i32 %35, %58
  %60 = lshr i32 %59, 8
  %61 = trunc i32 %60 to i16
  %62 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %61, i16* %62, align 2
  %63 = load i16, i16* %19, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, %31
  %66 = add nuw nsw i32 %35, %65
  %67 = lshr i32 %66, 8
  %68 = trunc i32 %67 to i16
  %69 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %68, i16* %69, align 2
  %70 = load i16, i16* %21, align 2
  %71 = zext i16 %70 to i32
  %72 = mul nuw nsw i32 %71, %31
  %73 = add nuw nsw i32 %35, %72
  %74 = lshr i32 %73, 8
  %75 = trunc i32 %74 to i16
  %76 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %75, i16* %76, align 2
  %77 = load i16, i16* %23, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nuw nsw i32 %78, %31
  %80 = add nuw nsw i32 %35, %79
  %81 = lshr i32 %80, 8
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %82, i16* %83, align 2
  %84 = load i16, i16* %25, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %85, %31
  %87 = add nuw nsw i32 %35, %86
  %88 = lshr i32 %87, 8
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %89, i16* %90, align 2
  %91 = getelementptr inbounds i16, i16* %28, i64 %10
  %92 = add nuw nsw i64 %27, 1
  %93 = icmp eq i64 %92, 16
  br i1 %93, label %94, label %26

94:                                               ; preds = %26
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi16EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 14
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %11, 59
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %11, 110
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %11, 151
  %18 = add nuw nsw i32 %17, 128
  %19 = mul nuw nsw i32 %11, 183
  %20 = add nuw nsw i32 %19, 128
  %21 = mul nuw nsw i32 %11, 206
  %22 = add nuw nsw i32 %21, 128
  %23 = mul nuw nsw i32 %11, 219
  %24 = add nuw nsw i32 %23, 128
  %25 = mul nuw nsw i32 %11, 224
  %26 = add nuw nsw i32 %25, 128
  br label %27

27:                                               ; preds = %27, %4
  %28 = phi i64 [ 0, %4 ], [ %87, %27 ]
  %29 = phi i16* [ %9, %4 ], [ %86, %27 ]
  %30 = getelementptr inbounds i16, i16* %5, i64 %28
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = mul nuw nsw i32 %32, 255
  %34 = add nuw nsw i32 %12, %33
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %29, align 2
  %37 = load i16, i16* %30, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %38, 197
  %40 = add nuw nsw i32 %14, %39
  %41 = lshr i32 %40, 8
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 %42, i16* %43, align 2
  %44 = load i16, i16* %30, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %45, 146
  %47 = add nuw nsw i32 %16, %46
  %48 = lshr i32 %47, 8
  %49 = trunc i32 %48 to i16
  %50 = getelementptr inbounds i16, i16* %29, i64 2
  store i16 %49, i16* %50, align 2
  %51 = load i16, i16* %30, align 2
  %52 = zext i16 %51 to i32
  %53 = mul nuw nsw i32 %52, 105
  %54 = add nuw nsw i32 %18, %53
  %55 = lshr i32 %54, 8
  %56 = trunc i32 %55 to i16
  %57 = getelementptr inbounds i16, i16* %29, i64 3
  store i16 %56, i16* %57, align 2
  %58 = load i16, i16* %30, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, 73
  %61 = add nuw nsw i32 %20, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %29, i64 4
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %30, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, 50
  %68 = add nuw nsw i32 %22, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %29, i64 5
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %30, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, 37
  %75 = add nuw nsw i32 %24, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %29, i64 6
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %30, align 2
  %80 = zext i16 %79 to i32
  %81 = shl nuw nsw i32 %80, 5
  %82 = add nuw nsw i32 %26, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %29, i64 7
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %29, i64 %10
  %87 = add nuw nsw i64 %28, 1
  %88 = icmp eq i64 %87, 16
  br i1 %88, label %89, label %27

89:                                               ; preds = %27
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi8ELi32ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i16, i16* %6, i64 %5
  %9 = bitcast i16* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i16, i16* %8, i64 %5
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %10, i64 %5
  %13 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %12, i64 %5
  %15 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i16, i16* %14, i64 %5
  %17 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %16, i64 %5
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i16, i16* %18, i64 %5
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds i16, i16* %20, i64 %5
  %23 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds i16, i16* %22, i64 %5
  %25 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %24, i64 %5
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds i16, i16* %26, i64 %5
  %29 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %28, i64 %5
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %30, i64 %5
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds i16, i16* %32, i64 %5
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds i16, i16* %34, i64 %5
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %36, i64 %5
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 %5
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %40, i64 %5
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %42, i64 %5
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %44, i64 %5
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i16, i16* %46, i64 %5
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds i16, i16* %48, i64 %5
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds i16, i16* %50, i64 %5
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds i16, i16* %52, i64 %5
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 %5
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds i16, i16* %56, i64 %5
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds i16, i16* %58, i64 %5
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds i16, i16* %60, i64 %5
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds i16, i16* %62, i64 %5
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %64, i64 %5
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %66, i64 %5
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %69, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 4
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = lshr i32 %43, 3
  %45 = lshr i64 %1, 1
  %46 = trunc i32 %44 to i16
  %47 = insertelement <8 x i16> undef, i16 %46, i32 0
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <8 x i32> zeroinitializer
  %49 = bitcast i8* %0 to i16*
  %50 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds i16, i16* %49, i64 %45
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %51, i64 %45
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds i16, i16* %53, i64 %45
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i16, i16* %55, i64 %45
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %58, align 2
  %59 = getelementptr inbounds i16, i16* %57, i64 %45
  %60 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds i16, i16* %59, i64 %45
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds i16, i16* %61, i64 %45
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds i16, i16* %63, i64 %45
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %66, align 2
  %67 = getelementptr inbounds i16, i16* %65, i64 %45
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %68, align 2
  %69 = getelementptr inbounds i16, i16* %67, i64 %45
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds i16, i16* %69, i64 %45
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %72, align 2
  %73 = getelementptr inbounds i16, i16* %71, i64 %45
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds i16, i16* %73, i64 %45
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds i16, i16* %75, i64 %45
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds i16, i16* %77, i64 %45
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds i16, i16* %79, i64 %45
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds i16, i16* %81, i64 %45
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %84, align 2
  %85 = getelementptr inbounds i16, i16* %83, i64 %45
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %86, align 2
  %87 = getelementptr inbounds i16, i16* %85, i64 %45
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %88, align 2
  %89 = getelementptr inbounds i16, i16* %87, i64 %45
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds i16, i16* %89, i64 %45
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i16, i16* %91, i64 %45
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i16, i16* %93, i64 %45
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %95, i64 %45
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i16, i16* %97, i64 %45
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i16, i16* %99, i64 %45
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %101, i64 %45
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %103, i64 %45
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %105, i64 %45
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %107, i64 %45
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %109, i64 %45
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %112, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 16
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %3, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %3, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %3, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %3, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %3, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %3, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %3, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %3, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %3, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %3, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %3, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %3, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %3, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %3, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %3, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %3, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = lshr i32 %163, 5
  %165 = lshr i64 %1, 1
  %166 = trunc i32 %164 to i16
  %167 = insertelement <8 x i16> undef, i16 %166, i32 0
  %168 = shufflevector <8 x i16> %167, <8 x i16> undef, <8 x i32> zeroinitializer
  %169 = bitcast i8* %0 to i16*
  %170 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %170, align 2
  %171 = getelementptr inbounds i16, i16* %169, i64 %165
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds i16, i16* %171, i64 %165
  %174 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds i16, i16* %173, i64 %165
  %176 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i16, i16* %175, i64 %165
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds i16, i16* %177, i64 %165
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %179, i64 %165
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %181, i64 %165
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %183, i64 %165
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %185, i64 %165
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %187, i64 %165
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %189, i64 %165
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %191, i64 %165
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %193, i64 %165
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %195, i64 %165
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %197, i64 %165
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %199, i64 %165
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %201, i64 %165
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %203, i64 %165
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %205, i64 %165
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %207, i64 %165
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %209, i64 %165
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %211, i64 %165
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds i16, i16* %213, i64 %165
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %216, align 2
  %217 = getelementptr inbounds i16, i16* %215, i64 %165
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %218, align 2
  %219 = getelementptr inbounds i16, i16* %217, i64 %165
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %220, align 2
  %221 = getelementptr inbounds i16, i16* %219, i64 %165
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %222, align 2
  %223 = getelementptr inbounds i16, i16* %221, i64 %165
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %224, align 2
  %225 = getelementptr inbounds i16, i16* %223, i64 %165
  %226 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %226, align 2
  %227 = getelementptr inbounds i16, i16* %225, i64 %165
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %228, align 2
  %229 = getelementptr inbounds i16, i16* %227, i64 %165
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %230, align 2
  %231 = getelementptr inbounds i16, i16* %229, i64 %165
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %232, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 20
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = bitcast i8* %3 to i16*
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = add nuw nsw i32 %43, %46
  %48 = getelementptr inbounds i8, i8* %3, i64 2
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nuw nsw i32 %47, %51
  %53 = getelementptr inbounds i8, i8* %3, i64 4
  %54 = bitcast i8* %53 to i16*
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = add nuw nsw i32 %52, %56
  %58 = getelementptr inbounds i8, i8* %3, i64 6
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = add nuw nsw i32 %57, %61
  %63 = getelementptr inbounds i8, i8* %3, i64 8
  %64 = bitcast i8* %63 to i16*
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = add nuw nsw i32 %62, %66
  %68 = getelementptr inbounds i8, i8* %3, i64 10
  %69 = bitcast i8* %68 to i16*
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = add nuw nsw i32 %67, %71
  %73 = getelementptr inbounds i8, i8* %3, i64 12
  %74 = bitcast i8* %73 to i16*
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = add nuw nsw i32 %72, %76
  %78 = getelementptr inbounds i8, i8* %3, i64 14
  %79 = bitcast i8* %78 to i16*
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = add nuw nsw i32 %77, %81
  %83 = getelementptr inbounds i8, i8* %3, i64 16
  %84 = bitcast i8* %83 to i16*
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nuw nsw i32 %82, %86
  %88 = getelementptr inbounds i8, i8* %3, i64 18
  %89 = bitcast i8* %88 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %87, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 20
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 22
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nuw nsw i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 24
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = add nuw nsw i32 %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 26
  %109 = bitcast i8* %108 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = add nuw nsw i32 %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 28
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = add nuw nsw i32 %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 30
  %119 = bitcast i8* %118 to i16*
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = add nuw nsw i32 %117, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 32
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add nuw nsw i32 %122, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 34
  %129 = bitcast i8* %128 to i16*
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = add nuw nsw i32 %127, %131
  %133 = getelementptr inbounds i8, i8* %3, i64 36
  %134 = bitcast i8* %133 to i16*
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = add nuw nsw i32 %132, %136
  %138 = getelementptr inbounds i8, i8* %3, i64 38
  %139 = bitcast i8* %138 to i16*
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = add nuw nsw i32 %137, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 40
  %144 = bitcast i8* %143 to i16*
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = add nuw nsw i32 %142, %146
  %148 = getelementptr inbounds i8, i8* %3, i64 42
  %149 = bitcast i8* %148 to i16*
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = add nuw nsw i32 %147, %151
  %153 = getelementptr inbounds i8, i8* %3, i64 44
  %154 = bitcast i8* %153 to i16*
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = add nuw nsw i32 %152, %156
  %158 = getelementptr inbounds i8, i8* %3, i64 46
  %159 = bitcast i8* %158 to i16*
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = add nuw nsw i32 %157, %161
  %163 = getelementptr inbounds i8, i8* %3, i64 48
  %164 = bitcast i8* %163 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = add nuw nsw i32 %162, %166
  %168 = getelementptr inbounds i8, i8* %3, i64 50
  %169 = bitcast i8* %168 to i16*
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nuw nsw i32 %167, %171
  %173 = getelementptr inbounds i8, i8* %3, i64 52
  %174 = bitcast i8* %173 to i16*
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = add nuw nsw i32 %172, %176
  %178 = getelementptr inbounds i8, i8* %3, i64 54
  %179 = bitcast i8* %178 to i16*
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = add nuw nsw i32 %177, %181
  %183 = getelementptr inbounds i8, i8* %3, i64 56
  %184 = bitcast i8* %183 to i16*
  %185 = load i16, i16* %184, align 2
  %186 = zext i16 %185 to i32
  %187 = add nuw nsw i32 %182, %186
  %188 = getelementptr inbounds i8, i8* %3, i64 58
  %189 = bitcast i8* %188 to i16*
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add nuw nsw i32 %187, %191
  %193 = getelementptr inbounds i8, i8* %3, i64 60
  %194 = bitcast i8* %193 to i16*
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %192, %196
  %198 = getelementptr inbounds i8, i8* %3, i64 62
  %199 = bitcast i8* %198 to i16*
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = add nuw nsw i32 %197, %201
  %203 = udiv i32 %202, 40
  %204 = lshr i64 %1, 1
  %205 = trunc i32 %203 to i16
  %206 = insertelement <8 x i16> undef, i16 %205, i32 0
  %207 = shufflevector <8 x i16> %206, <8 x i16> undef, <8 x i32> zeroinitializer
  %208 = bitcast i8* %0 to i16*
  %209 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %209, align 2
  %210 = getelementptr inbounds i16, i16* %208, i64 %204
  %211 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %211, align 2
  %212 = getelementptr inbounds i16, i16* %210, i64 %204
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %213, align 2
  %214 = getelementptr inbounds i16, i16* %212, i64 %204
  %215 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %215, align 2
  %216 = getelementptr inbounds i16, i16* %214, i64 %204
  %217 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %217, align 2
  %218 = getelementptr inbounds i16, i16* %216, i64 %204
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %219, align 2
  %220 = getelementptr inbounds i16, i16* %218, i64 %204
  %221 = bitcast i16* %220 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %221, align 2
  %222 = getelementptr inbounds i16, i16* %220, i64 %204
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %223, align 2
  %224 = getelementptr inbounds i16, i16* %222, i64 %204
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %225, align 2
  %226 = getelementptr inbounds i16, i16* %224, i64 %204
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %227, align 2
  %228 = getelementptr inbounds i16, i16* %226, i64 %204
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds i16, i16* %228, i64 %204
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %231, align 2
  %232 = getelementptr inbounds i16, i16* %230, i64 %204
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %233, align 2
  %234 = getelementptr inbounds i16, i16* %232, i64 %204
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %235, align 2
  %236 = getelementptr inbounds i16, i16* %234, i64 %204
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %237, align 2
  %238 = getelementptr inbounds i16, i16* %236, i64 %204
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %239, align 2
  %240 = getelementptr inbounds i16, i16* %238, i64 %204
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %241, align 2
  %242 = getelementptr inbounds i16, i16* %240, i64 %204
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %243, align 2
  %244 = getelementptr inbounds i16, i16* %242, i64 %204
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %245, align 2
  %246 = getelementptr inbounds i16, i16* %244, i64 %204
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %247, align 2
  %248 = getelementptr inbounds i16, i16* %246, i64 %204
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %249, align 2
  %250 = getelementptr inbounds i16, i16* %248, i64 %204
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %251, align 2
  %252 = getelementptr inbounds i16, i16* %250, i64 %204
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %253, align 2
  %254 = getelementptr inbounds i16, i16* %252, i64 %204
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %255, align 2
  %256 = getelementptr inbounds i16, i16* %254, i64 %204
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %257, align 2
  %258 = getelementptr inbounds i16, i16* %256, i64 %204
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %259, align 2
  %260 = getelementptr inbounds i16, i16* %258, i64 %204
  %261 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %261, align 2
  %262 = getelementptr inbounds i16, i16* %260, i64 %204
  %263 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %263, align 2
  %264 = getelementptr inbounds i16, i16* %262, i64 %204
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %265, align 2
  %266 = getelementptr inbounds i16, i16* %264, i64 %204
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %267, align 2
  %268 = getelementptr inbounds i16, i16* %266, i64 %204
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds i16, i16* %268, i64 %204
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %271, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 16, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 16, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 16, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 16, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 32
  br i1 %14, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  br label %9

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %39, %9 ]
  %11 = phi i16* [ %6, %4 ], [ %38, %9 ]
  %12 = getelementptr inbounds i16, i16* %5, i64 %10
  %13 = load i16, i16* %12, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %11, i64 %7
  %18 = or i64 %10, 1
  %19 = getelementptr inbounds i16, i16* %5, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> %22, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds i16, i16* %17, i64 %7
  %25 = or i64 %10, 2
  %26 = getelementptr inbounds i16, i16* %5, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = insertelement <8 x i16> undef, i16 %27, i32 0
  %29 = shufflevector <8 x i16> %28, <8 x i16> undef, <8 x i32> zeroinitializer
  %30 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %24, i64 %7
  %32 = or i64 %10, 3
  %33 = getelementptr inbounds i16, i16* %5, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %31, i64 %7
  %39 = add nuw nsw i64 %10, 4
  %40 = icmp eq i64 %39, 32
  br i1 %40, label %8, label %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 32
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 8
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 14
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 62
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = getelementptr inbounds i8, i8* %2, i64 2
  %18 = bitcast i8* %17 to i16*
  %19 = mul nuw nsw i32 %16, 59
  %20 = getelementptr inbounds i8, i8* %2, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = mul nuw nsw i32 %16, 110
  %23 = getelementptr inbounds i8, i8* %2, i64 6
  %24 = bitcast i8* %23 to i16*
  %25 = mul nuw nsw i32 %16, 151
  %26 = getelementptr inbounds i8, i8* %2, i64 8
  %27 = bitcast i8* %26 to i16*
  %28 = mul nuw nsw i32 %16, 183
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = mul nuw nsw i32 %16, 206
  %32 = getelementptr inbounds i8, i8* %2, i64 12
  %33 = bitcast i8* %32 to i16*
  %34 = mul nuw nsw i32 %16, 219
  %35 = getelementptr inbounds i8, i8* %2, i64 14
  %36 = bitcast i8* %35 to i16*
  %37 = mul nuw nsw i32 %16, 224
  br label %38

38:                                               ; preds = %38, %4
  %39 = phi i64 [ 0, %4 ], [ %145, %38 ]
  %40 = phi i16* [ %13, %4 ], [ %144, %38 ]
  %41 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %39
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds i16, i16* %6, i64 %39
  %45 = sub i8 0, %42
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %46, %15
  %48 = add nuw nsw i32 %47, 256
  %49 = load i16, i16* %5, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %50, %43
  %52 = load i16, i16* %44, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, 255
  %55 = add nuw nsw i32 %48, %51
  %56 = add nuw nsw i32 %55, %16
  %57 = add nuw nsw i32 %56, %54
  %58 = lshr i32 %57, 9
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %40, align 2
  %60 = load i16, i16* %18, align 2
  %61 = zext i16 %60 to i32
  %62 = mul nuw nsw i32 %61, %43
  %63 = load i16, i16* %44, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, 197
  %66 = add nuw nsw i32 %48, %62
  %67 = add nuw nsw i32 %66, %19
  %68 = add nuw nsw i32 %67, %65
  %69 = lshr i32 %68, 9
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %40, i64 1
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %21, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %43
  %75 = load i16, i16* %44, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %76, 146
  %78 = add nuw nsw i32 %48, %74
  %79 = add nuw nsw i32 %78, %22
  %80 = add nuw nsw i32 %79, %77
  %81 = lshr i32 %80, 9
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %40, i64 2
  store i16 %82, i16* %83, align 2
  %84 = load i16, i16* %24, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %85, %43
  %87 = load i16, i16* %44, align 2
  %88 = zext i16 %87 to i32
  %89 = mul nuw nsw i32 %88, 105
  %90 = add nuw nsw i32 %48, %86
  %91 = add nuw nsw i32 %90, %25
  %92 = add nuw nsw i32 %91, %89
  %93 = lshr i32 %92, 9
  %94 = trunc i32 %93 to i16
  %95 = getelementptr inbounds i16, i16* %40, i64 3
  store i16 %94, i16* %95, align 2
  %96 = load i16, i16* %27, align 2
  %97 = zext i16 %96 to i32
  %98 = mul nuw nsw i32 %97, %43
  %99 = load i16, i16* %44, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nuw nsw i32 %100, 73
  %102 = add nuw nsw i32 %48, %98
  %103 = add nuw nsw i32 %102, %28
  %104 = add nuw nsw i32 %103, %101
  %105 = lshr i32 %104, 9
  %106 = trunc i32 %105 to i16
  %107 = getelementptr inbounds i16, i16* %40, i64 4
  store i16 %106, i16* %107, align 2
  %108 = load i16, i16* %30, align 2
  %109 = zext i16 %108 to i32
  %110 = mul nuw nsw i32 %109, %43
  %111 = load i16, i16* %44, align 2
  %112 = zext i16 %111 to i32
  %113 = mul nuw nsw i32 %112, 50
  %114 = add nuw nsw i32 %48, %110
  %115 = add nuw nsw i32 %114, %31
  %116 = add nuw nsw i32 %115, %113
  %117 = lshr i32 %116, 9
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds i16, i16* %40, i64 5
  store i16 %118, i16* %119, align 2
  %120 = load i16, i16* %33, align 2
  %121 = zext i16 %120 to i32
  %122 = mul nuw nsw i32 %121, %43
  %123 = load i16, i16* %44, align 2
  %124 = zext i16 %123 to i32
  %125 = mul nuw nsw i32 %124, 37
  %126 = add nuw nsw i32 %48, %122
  %127 = add nuw nsw i32 %126, %34
  %128 = add nuw nsw i32 %127, %125
  %129 = lshr i32 %128, 9
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %40, i64 6
  store i16 %130, i16* %131, align 2
  %132 = load i16, i16* %36, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %133, %43
  %135 = load i16, i16* %44, align 2
  %136 = zext i16 %135 to i32
  %137 = shl nuw nsw i32 %136, 5
  %138 = add nuw nsw i32 %48, %134
  %139 = add nuw nsw i32 %138, %37
  %140 = add nuw nsw i32 %139, %137
  %141 = lshr i32 %140, 9
  %142 = trunc i32 %141 to i16
  %143 = getelementptr inbounds i16, i16* %40, i64 7
  store i16 %142, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %40, i64 %14
  %145 = add nuw nsw i64 %39, 1
  %146 = icmp eq i64 %145, 32
  br i1 %146, label %147, label %38

147:                                              ; preds = %38
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 62
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %2, i64 10
  %21 = bitcast i8* %20 to i16*
  %22 = getelementptr inbounds i8, i8* %2, i64 12
  %23 = bitcast i8* %22 to i16*
  %24 = getelementptr inbounds i8, i8* %2, i64 14
  %25 = bitcast i8* %24 to i16*
  br label %26

26:                                               ; preds = %26, %4
  %27 = phi i64 [ 0, %4 ], [ %92, %26 ]
  %28 = phi i16* [ %9, %4 ], [ %91, %26 ]
  %29 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %27
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = sub i8 0, %30
  %33 = zext i8 %32 to i32
  %34 = mul nuw nsw i32 %33, %11
  %35 = add nuw nsw i32 %34, 128
  %36 = load i16, i16* %5, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %37, %31
  %39 = add nuw nsw i32 %35, %38
  %40 = lshr i32 %39, 8
  %41 = trunc i32 %40 to i16
  store i16 %41, i16* %28, align 2
  %42 = load i16, i16* %13, align 2
  %43 = zext i16 %42 to i32
  %44 = mul nuw nsw i32 %43, %31
  %45 = add nuw nsw i32 %35, %44
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i16
  %48 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %47, i16* %48, align 2
  %49 = load i16, i16* %15, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %50, %31
  %52 = add nuw nsw i32 %35, %51
  %53 = lshr i32 %52, 8
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %54, i16* %55, align 2
  %56 = load i16, i16* %17, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %57, %31
  %59 = add nuw nsw i32 %35, %58
  %60 = lshr i32 %59, 8
  %61 = trunc i32 %60 to i16
  %62 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %61, i16* %62, align 2
  %63 = load i16, i16* %19, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %64, %31
  %66 = add nuw nsw i32 %35, %65
  %67 = lshr i32 %66, 8
  %68 = trunc i32 %67 to i16
  %69 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %68, i16* %69, align 2
  %70 = load i16, i16* %21, align 2
  %71 = zext i16 %70 to i32
  %72 = mul nuw nsw i32 %71, %31
  %73 = add nuw nsw i32 %35, %72
  %74 = lshr i32 %73, 8
  %75 = trunc i32 %74 to i16
  %76 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %75, i16* %76, align 2
  %77 = load i16, i16* %23, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nuw nsw i32 %78, %31
  %80 = add nuw nsw i32 %35, %79
  %81 = lshr i32 %80, 8
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %82, i16* %83, align 2
  %84 = load i16, i16* %25, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %85, %31
  %87 = add nuw nsw i32 %35, %86
  %88 = lshr i32 %87, 8
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %89, i16* %90, align 2
  %91 = getelementptr inbounds i16, i16* %28, i64 %10
  %92 = add nuw nsw i64 %27, 1
  %93 = icmp eq i64 %92, 32
  br i1 %93, label %94, label %26

94:                                               ; preds = %26
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi8ELi32EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 14
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = add nuw nsw i32 %11, 128
  %13 = mul nuw nsw i32 %11, 59
  %14 = add nuw nsw i32 %13, 128
  %15 = mul nuw nsw i32 %11, 110
  %16 = add nuw nsw i32 %15, 128
  %17 = mul nuw nsw i32 %11, 151
  %18 = add nuw nsw i32 %17, 128
  %19 = mul nuw nsw i32 %11, 183
  %20 = add nuw nsw i32 %19, 128
  %21 = mul nuw nsw i32 %11, 206
  %22 = add nuw nsw i32 %21, 128
  %23 = mul nuw nsw i32 %11, 219
  %24 = add nuw nsw i32 %23, 128
  %25 = mul nuw nsw i32 %11, 224
  %26 = add nuw nsw i32 %25, 128
  br label %27

27:                                               ; preds = %27, %4
  %28 = phi i64 [ 0, %4 ], [ %87, %27 ]
  %29 = phi i16* [ %9, %4 ], [ %86, %27 ]
  %30 = getelementptr inbounds i16, i16* %5, i64 %28
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = mul nuw nsw i32 %32, 255
  %34 = add nuw nsw i32 %12, %33
  %35 = lshr i32 %34, 8
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %29, align 2
  %37 = load i16, i16* %30, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %38, 197
  %40 = add nuw nsw i32 %14, %39
  %41 = lshr i32 %40, 8
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 %42, i16* %43, align 2
  %44 = load i16, i16* %30, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %45, 146
  %47 = add nuw nsw i32 %16, %46
  %48 = lshr i32 %47, 8
  %49 = trunc i32 %48 to i16
  %50 = getelementptr inbounds i16, i16* %29, i64 2
  store i16 %49, i16* %50, align 2
  %51 = load i16, i16* %30, align 2
  %52 = zext i16 %51 to i32
  %53 = mul nuw nsw i32 %52, 105
  %54 = add nuw nsw i32 %18, %53
  %55 = lshr i32 %54, 8
  %56 = trunc i32 %55 to i16
  %57 = getelementptr inbounds i16, i16* %29, i64 3
  store i16 %56, i16* %57, align 2
  %58 = load i16, i16* %30, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, 73
  %61 = add nuw nsw i32 %20, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %29, i64 4
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %30, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, 50
  %68 = add nuw nsw i32 %22, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %29, i64 5
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %30, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, 37
  %75 = add nuw nsw i32 %24, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %29, i64 6
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %30, align 2
  %80 = zext i16 %79 to i32
  %81 = shl nuw nsw i32 %80, 5
  %82 = add nuw nsw i32 %26, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %29, i64 7
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %29, i64 %10
  %87 = add nuw nsw i64 %28, 1
  %88 = icmp eq i64 %87, 32
  br i1 %88, label %89, label %27

89:                                               ; preds = %27
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi4ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i16, i16* %6, i64 %5
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %10, i64 8
  %13 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %10, i64 %5
  %15 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i16, i16* %14, i64 8
  %17 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %14, i64 %5
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i16, i16* %18, i64 8
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %21, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = bitcast i8* %0 to i16*
  %86 = lshr i64 %1, 1
  %87 = trunc i32 %84 to i16
  %88 = insertelement <8 x i16> undef, i16 %87, i32 0
  %89 = shufflevector <8 x i16> %88, <8 x i16> undef, <8 x i32> zeroinitializer
  %90 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds i8, i8* %0, i64 16
  %92 = bitcast i8* %91 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i16, i16* %85, i64 %86
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i16, i16* %93, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %93, i64 %86
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i16, i16* %97, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i16, i16* %97, i64 %86
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %101, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %104, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 2
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = lshr i32 %23, 2
  %25 = bitcast i8* %0 to i16*
  %26 = lshr i64 %1, 1
  %27 = trunc i32 %24 to i16
  %28 = insertelement <8 x i16> undef, i16 %27, i32 0
  %29 = shufflevector <8 x i16> %28, <8 x i16> undef, <8 x i32> zeroinitializer
  %30 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i8, i8* %0, i64 16
  %32 = bitcast i8* %31 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %25, i64 %26
  %34 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %33, i64 8
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds i16, i16* %33, i64 %26
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %37, i64 8
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds i16, i16* %37, i64 %26
  %42 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %42, align 2
  %43 = getelementptr inbounds i16, i16* %41, i64 8
  %44 = bitcast i16* %43 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %44, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 10
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = bitcast i8* %3 to i16*
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nuw nsw i32 %83, %86
  %88 = getelementptr inbounds i8, i8* %3, i64 2
  %89 = bitcast i8* %88 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %87, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 4
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 6
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nuw nsw i32 %97, %101
  %103 = udiv i32 %102, 20
  %104 = bitcast i8* %0 to i16*
  %105 = lshr i64 %1, 1
  %106 = trunc i32 %103 to i16
  %107 = insertelement <8 x i16> undef, i16 %106, i32 0
  %108 = shufflevector <8 x i16> %107, <8 x i16> undef, <8 x i32> zeroinitializer
  %109 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i8, i8* %0, i64 16
  %111 = bitcast i8* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %104, i64 %105
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %112, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %112, i64 %105
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %116, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %116, i64 %105
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %120, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %123, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 32, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 32, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 32, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 32, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  %8 = load i16, i16* %5, align 2
  %9 = insertelement <8 x i16> undef, i16 %8, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %6, i64 %7
  %15 = getelementptr inbounds i8, i8* %3, i64 2
  %16 = bitcast i8* %15 to i16*
  %17 = load i16, i16* %16, align 2
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %14, i64 8
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %14, i64 %7
  %24 = getelementptr inbounds i8, i8* %3, i64 4
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = insertelement <8 x i16> undef, i16 %26, i32 0
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <8 x i32> zeroinitializer
  %29 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %23, i64 8
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %23, i64 %7
  %33 = getelementptr inbounds i8, i8* %3, i64 6
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 2
  %36 = insertelement <8 x i16> undef, i16 %35, i32 0
  %37 = shufflevector <8 x i16> %36, <8 x i16> undef, <8 x i32> zeroinitializer
  %38 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %32, i64 8
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %40, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  %14 = load i16, i16* %6, align 2
  %15 = zext i16 %14 to i32
  %16 = sub nsw i32 %15, %10
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = sub nsw i32 %15, %11
  br label %32

21:                                               ; preds = %55
  %22 = getelementptr inbounds i16, i16* %12, i64 %13
  %23 = getelementptr inbounds i8, i8* %3, i64 2
  %24 = bitcast i8* %23 to i16*
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = sub nsw i32 %26, %10
  %28 = icmp slt i32 %27, 0
  %29 = sub nsw i32 0, %27
  %30 = select i1 %28, i32 %29, i32 %27
  %31 = sub nsw i32 %26, %11
  br label %58

32:                                               ; preds = %55, %4
  %33 = phi i64 [ 0, %4 ], [ %56, %55 ]
  %34 = getelementptr inbounds i16, i16* %5, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = sub nsw i32 %36, %10
  %38 = icmp slt i32 %37, 0
  %39 = sub nsw i32 0, %37
  %40 = select i1 %38, i32 %39, i32 %37
  %41 = add nsw i32 %20, %36
  %42 = icmp slt i32 %41, 0
  %43 = sub nsw i32 0, %41
  %44 = select i1 %42, i32 %43, i32 %41
  %45 = icmp sgt i32 %40, %19
  %46 = icmp sgt i32 %40, %44
  %47 = or i1 %45, %46
  br i1 %47, label %50, label %48

48:                                               ; preds = %32
  %49 = getelementptr inbounds i16, i16* %12, i64 %33
  store i16 %14, i16* %49, align 2
  br label %55

50:                                               ; preds = %32
  %51 = icmp sgt i32 %19, %44
  %52 = getelementptr inbounds i16, i16* %12, i64 %33
  br i1 %51, label %54, label %53

53:                                               ; preds = %50
  store i16 %35, i16* %52, align 2
  br label %55

54:                                               ; preds = %50
  store i16 %9, i16* %52, align 2
  br label %55

55:                                               ; preds = %53, %54, %48
  %56 = add nuw nsw i64 %33, 1
  %57 = icmp eq i64 %56, 16
  br i1 %57, label %21, label %32

58:                                               ; preds = %81, %21
  %59 = phi i64 [ 0, %21 ], [ %82, %81 ]
  %60 = getelementptr inbounds i16, i16* %5, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = sub nsw i32 %62, %10
  %64 = icmp slt i32 %63, 0
  %65 = sub nsw i32 0, %63
  %66 = select i1 %64, i32 %65, i32 %63
  %67 = add nsw i32 %31, %62
  %68 = icmp slt i32 %67, 0
  %69 = sub nsw i32 0, %67
  %70 = select i1 %68, i32 %69, i32 %67
  %71 = icmp sgt i32 %66, %30
  %72 = icmp sgt i32 %66, %70
  %73 = or i1 %71, %72
  br i1 %73, label %76, label %74

74:                                               ; preds = %58
  %75 = getelementptr inbounds i16, i16* %22, i64 %59
  store i16 %25, i16* %75, align 2
  br label %81

76:                                               ; preds = %58
  %77 = icmp sgt i32 %30, %70
  %78 = getelementptr inbounds i16, i16* %22, i64 %59
  br i1 %77, label %80, label %79

79:                                               ; preds = %76
  store i16 %61, i16* %78, align 2
  br label %81

80:                                               ; preds = %76
  store i16 %9, i16* %78, align 2
  br label %81

81:                                               ; preds = %80, %79, %74
  %82 = add nuw nsw i64 %59, 1
  %83 = icmp eq i64 %82, 16
  br i1 %83, label %84, label %58

84:                                               ; preds = %81
  %85 = getelementptr inbounds i16, i16* %22, i64 %13
  %86 = getelementptr inbounds i8, i8* %3, i64 4
  %87 = bitcast i8* %86 to i16*
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = sub nsw i32 %89, %10
  %91 = icmp slt i32 %90, 0
  %92 = sub nsw i32 0, %90
  %93 = select i1 %91, i32 %92, i32 %90
  %94 = sub nsw i32 %89, %11
  br label %95

95:                                               ; preds = %118, %84
  %96 = phi i64 [ 0, %84 ], [ %119, %118 ]
  %97 = getelementptr inbounds i16, i16* %5, i64 %96
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = sub nsw i32 %99, %10
  %101 = icmp slt i32 %100, 0
  %102 = sub nsw i32 0, %100
  %103 = select i1 %101, i32 %102, i32 %100
  %104 = add nsw i32 %94, %99
  %105 = icmp slt i32 %104, 0
  %106 = sub nsw i32 0, %104
  %107 = select i1 %105, i32 %106, i32 %104
  %108 = icmp sgt i32 %103, %93
  %109 = icmp sgt i32 %103, %107
  %110 = or i1 %108, %109
  br i1 %110, label %113, label %111

111:                                              ; preds = %95
  %112 = getelementptr inbounds i16, i16* %85, i64 %96
  store i16 %88, i16* %112, align 2
  br label %118

113:                                              ; preds = %95
  %114 = icmp sgt i32 %93, %107
  %115 = getelementptr inbounds i16, i16* %85, i64 %96
  br i1 %114, label %117, label %116

116:                                              ; preds = %113
  store i16 %98, i16* %115, align 2
  br label %118

117:                                              ; preds = %113
  store i16 %9, i16* %115, align 2
  br label %118

118:                                              ; preds = %117, %116, %111
  %119 = add nuw nsw i64 %96, 1
  %120 = icmp eq i64 %119, 16
  br i1 %120, label %121, label %95

121:                                              ; preds = %118
  %122 = getelementptr inbounds i16, i16* %85, i64 %13
  %123 = getelementptr inbounds i8, i8* %3, i64 6
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = sub nsw i32 %126, %10
  %128 = icmp slt i32 %127, 0
  %129 = sub nsw i32 0, %127
  %130 = select i1 %128, i32 %129, i32 %127
  %131 = sub nsw i32 %126, %11
  br label %132

132:                                              ; preds = %155, %121
  %133 = phi i64 [ 0, %121 ], [ %156, %155 ]
  %134 = getelementptr inbounds i16, i16* %5, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = sub nsw i32 %136, %10
  %138 = icmp slt i32 %137, 0
  %139 = sub nsw i32 0, %137
  %140 = select i1 %138, i32 %139, i32 %137
  %141 = add nsw i32 %131, %136
  %142 = icmp slt i32 %141, 0
  %143 = sub nsw i32 0, %141
  %144 = select i1 %142, i32 %143, i32 %141
  %145 = icmp sgt i32 %140, %130
  %146 = icmp sgt i32 %140, %144
  %147 = or i1 %145, %146
  br i1 %147, label %150, label %148

148:                                              ; preds = %132
  %149 = getelementptr inbounds i16, i16* %122, i64 %133
  store i16 %125, i16* %149, align 2
  br label %155

150:                                              ; preds = %132
  %151 = icmp sgt i32 %130, %144
  %152 = getelementptr inbounds i16, i16* %122, i64 %133
  br i1 %151, label %154, label %153

153:                                              ; preds = %150
  store i16 %135, i16* %152, align 2
  br label %155

154:                                              ; preds = %150
  store i16 %9, i16* %152, align 2
  br label %155

155:                                              ; preds = %154, %153, %148
  %156 = add nuw nsw i64 %133, 1
  %157 = icmp eq i64 %156, 16
  br i1 %157, label %158, label %132

158:                                              ; preds = %155
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 30
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 6
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = add nuw nsw i32 %15, 256
  %18 = getelementptr i8, i8* %0, i64 32
  %19 = getelementptr i8, i8* %2, i64 32
  %20 = getelementptr i8, i8* %3, i64 1
  %21 = icmp ugt i8* %19, %0
  %22 = icmp ugt i8* %18, %2
  %23 = and i1 %21, %22
  %24 = icmp ugt i8* %20, %0
  %25 = icmp ugt i8* %18, %3
  %26 = and i1 %24, %25
  %27 = or i1 %23, %26
  br i1 %27, label %125, label %28

28:                                               ; preds = %4
  %29 = insertelement <8 x i32> undef, i32 %16, i32 0
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <8 x i32> zeroinitializer
  %31 = insertelement <8 x i32> undef, i32 %17, i32 0
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> zeroinitializer
  %33 = bitcast i8* %2 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 2, !alias.scope !459
  %35 = zext <8 x i16> %34 to <8 x i32>
  %36 = mul nuw nsw <8 x i32> %35, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %37 = load i16, i16* %6, align 2, !alias.scope !462
  %38 = insertelement <8 x i16> undef, i16 %37, i32 0
  %39 = shufflevector <8 x i16> %38, <8 x i16> undef, <8 x i32> zeroinitializer
  %40 = zext <8 x i16> %39 to <8 x i32>
  %41 = mul nuw nsw <8 x i32> %40, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %42 = mul nuw nsw <8 x i32> %30, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %43 = add nuw nsw <8 x i32> %32, %36
  %44 = add nuw nsw <8 x i32> %43, %42
  %45 = add nuw nsw <8 x i32> %44, %41
  %46 = lshr <8 x i32> %45, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %47 = trunc <8 x i32> %46 to <8 x i16>
  %48 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %48, align 2, !alias.scope !464, !noalias !466
  %49 = getelementptr inbounds i8, i8* %2, i64 16
  %50 = bitcast i8* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2, !alias.scope !459
  %52 = zext <8 x i16> %51 to <8 x i32>
  %53 = mul nuw nsw <8 x i32> %52, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %54 = load i16, i16* %6, align 2, !alias.scope !462
  %55 = insertelement <8 x i16> undef, i16 %54, i32 0
  %56 = shufflevector <8 x i16> %55, <8 x i16> undef, <8 x i32> zeroinitializer
  %57 = zext <8 x i16> %56 to <8 x i32>
  %58 = mul nuw nsw <8 x i32> %57, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %59 = mul nuw nsw <8 x i32> %30, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %60 = add nuw nsw <8 x i32> %32, %53
  %61 = add nuw nsw <8 x i32> %60, %59
  %62 = add nuw nsw <8 x i32> %61, %58
  %63 = lshr <8 x i32> %62, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %64 = trunc <8 x i32> %63 to <8 x i16>
  %65 = getelementptr inbounds i8, i8* %0, i64 16
  %66 = bitcast i8* %65 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %66, align 2, !alias.scope !464, !noalias !466
  br label %67

67:                                               ; preds = %125, %28
  %68 = getelementptr inbounds i16, i16* %13, i64 %14
  %69 = getelementptr inbounds i8, i8* %3, i64 2
  %70 = bitcast i8* %69 to i16*
  %71 = mul nuw nsw i32 %15, 107
  %72 = add nuw nsw i32 %71, 256
  %73 = and i64 %1, -2
  %74 = getelementptr i8, i8* %0, i64 %73
  %75 = add i64 %73, 32
  %76 = getelementptr i8, i8* %0, i64 %75
  %77 = getelementptr i8, i8* %2, i64 32
  %78 = getelementptr i8, i8* %3, i64 3
  %79 = icmp ult i8* %74, %77
  %80 = icmp ugt i8* %76, %2
  %81 = and i1 %79, %80
  %82 = icmp ult i8* %74, %78
  %83 = icmp ult i8* %69, %76
  %84 = and i1 %82, %83
  %85 = or i1 %81, %84
  br i1 %85, label %148, label %86

86:                                               ; preds = %67
  %87 = insertelement <8 x i32> undef, i32 %16, i32 0
  %88 = shufflevector <8 x i32> %87, <8 x i32> undef, <8 x i32> zeroinitializer
  %89 = insertelement <8 x i32> undef, i32 %72, i32 0
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> zeroinitializer
  %91 = bitcast i8* %2 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !467
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %93, <i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149>
  %95 = load i16, i16* %70, align 2, !alias.scope !470
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %98, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %100 = mul nuw nsw <8 x i32> %88, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %101 = add nuw nsw <8 x i32> %90, %94
  %102 = add nuw nsw <8 x i32> %101, %100
  %103 = add nuw nsw <8 x i32> %102, %99
  %104 = lshr <8 x i32> %103, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %105 = trunc <8 x i32> %104 to <8 x i16>
  %106 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 2, !alias.scope !472, !noalias !474
  %107 = getelementptr inbounds i8, i8* %2, i64 16
  %108 = bitcast i8* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !467
  %110 = zext <8 x i16> %109 to <8 x i32>
  %111 = mul nuw nsw <8 x i32> %110, <i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149, i32 149>
  %112 = load i16, i16* %70, align 2, !alias.scope !470
  %113 = insertelement <8 x i16> undef, i16 %112, i32 0
  %114 = shufflevector <8 x i16> %113, <8 x i16> undef, <8 x i32> zeroinitializer
  %115 = zext <8 x i16> %114 to <8 x i32>
  %116 = mul nuw nsw <8 x i32> %115, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %117 = mul nuw nsw <8 x i32> %88, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %118 = add nuw nsw <8 x i32> %90, %111
  %119 = add nuw nsw <8 x i32> %118, %117
  %120 = add nuw nsw <8 x i32> %119, %116
  %121 = lshr <8 x i32> %120, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %122 = trunc <8 x i32> %121 to <8 x i16>
  %123 = getelementptr inbounds i16, i16* %68, i64 8
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %124, align 2, !alias.scope !472, !noalias !474
  br label %171

125:                                              ; preds = %4, %125
  %126 = phi i64 [ %146, %125 ], [ 0, %4 ]
  %127 = getelementptr inbounds i16, i16* %5, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %129, 255
  %131 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %126
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = load i16, i16* %6, align 2
  %135 = zext i16 %134 to i32
  %136 = mul nuw nsw i32 %135, %133
  %137 = sub i8 0, %132
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, %16
  %140 = add nuw nsw i32 %17, %130
  %141 = add nuw nsw i32 %140, %139
  %142 = add nuw nsw i32 %141, %136
  %143 = lshr i32 %142, 9
  %144 = trunc i32 %143 to i16
  %145 = getelementptr inbounds i16, i16* %13, i64 %126
  store i16 %144, i16* %145, align 2
  %146 = add nuw nsw i64 %126, 1
  %147 = icmp eq i64 %146, 16
  br i1 %147, label %67, label %125, !llvm.loop !475

148:                                              ; preds = %67, %148
  %149 = phi i64 [ %169, %148 ], [ 0, %67 ]
  %150 = getelementptr inbounds i16, i16* %5, i64 %149
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %152, 149
  %154 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %149
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = load i16, i16* %70, align 2
  %158 = zext i16 %157 to i32
  %159 = mul nuw nsw i32 %158, %156
  %160 = sub i8 0, %155
  %161 = zext i8 %160 to i32
  %162 = mul nuw nsw i32 %161, %16
  %163 = add nuw nsw i32 %72, %153
  %164 = add nuw nsw i32 %163, %162
  %165 = add nuw nsw i32 %164, %159
  %166 = lshr i32 %165, 9
  %167 = trunc i32 %166 to i16
  %168 = getelementptr inbounds i16, i16* %68, i64 %149
  store i16 %167, i16* %168, align 2
  %169 = add nuw nsw i64 %149, 1
  %170 = icmp eq i64 %169, 16
  br i1 %170, label %171, label %148, !llvm.loop !476

171:                                              ; preds = %148, %86
  %172 = getelementptr inbounds i16, i16* %68, i64 %14
  %173 = getelementptr inbounds i8, i8* %3, i64 4
  %174 = bitcast i8* %173 to i16*
  %175 = mul nuw nsw i32 %15, 171
  %176 = add nuw nsw i32 %175, 256
  %177 = shl i64 %14, 2
  %178 = getelementptr i8, i8* %0, i64 %177
  %179 = add i64 %177, 32
  %180 = getelementptr i8, i8* %0, i64 %179
  %181 = getelementptr i8, i8* %2, i64 32
  %182 = getelementptr i8, i8* %3, i64 5
  %183 = icmp ult i8* %178, %181
  %184 = icmp ugt i8* %180, %2
  %185 = and i1 %183, %184
  %186 = icmp ult i8* %178, %182
  %187 = icmp ult i8* %173, %180
  %188 = and i1 %186, %187
  %189 = or i1 %185, %188
  br i1 %189, label %229, label %190

190:                                              ; preds = %171
  %191 = insertelement <8 x i32> undef, i32 %16, i32 0
  %192 = shufflevector <8 x i32> %191, <8 x i32> undef, <8 x i32> zeroinitializer
  %193 = insertelement <8 x i32> undef, i32 %176, i32 0
  %194 = shufflevector <8 x i32> %193, <8 x i32> undef, <8 x i32> zeroinitializer
  %195 = bitcast i8* %2 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 2, !alias.scope !477
  %197 = zext <8 x i16> %196 to <8 x i32>
  %198 = mul nuw nsw <8 x i32> %197, <i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85>
  %199 = load i16, i16* %174, align 2, !alias.scope !480
  %200 = insertelement <8 x i16> undef, i16 %199, i32 0
  %201 = shufflevector <8 x i16> %200, <8 x i16> undef, <8 x i32> zeroinitializer
  %202 = zext <8 x i16> %201 to <8 x i32>
  %203 = mul nuw nsw <8 x i32> %202, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %204 = mul nuw nsw <8 x i32> %192, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %205 = add nuw nsw <8 x i32> %194, %198
  %206 = add nuw nsw <8 x i32> %205, %204
  %207 = add nuw nsw <8 x i32> %206, %203
  %208 = lshr <8 x i32> %207, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %209 = trunc <8 x i32> %208 to <8 x i16>
  %210 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %210, align 2, !alias.scope !482, !noalias !484
  %211 = getelementptr inbounds i8, i8* %2, i64 16
  %212 = bitcast i8* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 2, !alias.scope !477
  %214 = zext <8 x i16> %213 to <8 x i32>
  %215 = mul nuw nsw <8 x i32> %214, <i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85>
  %216 = load i16, i16* %174, align 2, !alias.scope !480
  %217 = insertelement <8 x i16> undef, i16 %216, i32 0
  %218 = shufflevector <8 x i16> %217, <8 x i16> undef, <8 x i32> zeroinitializer
  %219 = zext <8 x i16> %218 to <8 x i32>
  %220 = mul nuw nsw <8 x i32> %219, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %221 = mul nuw nsw <8 x i32> %192, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %222 = add nuw nsw <8 x i32> %194, %215
  %223 = add nuw nsw <8 x i32> %222, %221
  %224 = add nuw nsw <8 x i32> %223, %220
  %225 = lshr <8 x i32> %224, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %226 = trunc <8 x i32> %225 to <8 x i16>
  %227 = getelementptr inbounds i16, i16* %172, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %228, align 2, !alias.scope !482, !noalias !484
  br label %252

229:                                              ; preds = %171, %229
  %230 = phi i64 [ %250, %229 ], [ 0, %171 ]
  %231 = getelementptr inbounds i16, i16* %5, i64 %230
  %232 = load i16, i16* %231, align 2
  %233 = zext i16 %232 to i32
  %234 = mul nuw nsw i32 %233, 85
  %235 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %230
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = load i16, i16* %174, align 2
  %239 = zext i16 %238 to i32
  %240 = mul nuw nsw i32 %239, %237
  %241 = sub i8 0, %236
  %242 = zext i8 %241 to i32
  %243 = mul nuw nsw i32 %242, %16
  %244 = add nuw nsw i32 %176, %234
  %245 = add nuw nsw i32 %244, %243
  %246 = add nuw nsw i32 %245, %240
  %247 = lshr i32 %246, 9
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %172, i64 %230
  store i16 %248, i16* %249, align 2
  %250 = add nuw nsw i64 %230, 1
  %251 = icmp eq i64 %250, 16
  br i1 %251, label %252, label %229, !llvm.loop !485

252:                                              ; preds = %229, %190
  %253 = getelementptr inbounds i16, i16* %172, i64 %14
  %254 = getelementptr inbounds i8, i8* %3, i64 6
  %255 = bitcast i8* %254 to i16*
  %256 = mul nuw nsw i32 %15, 192
  %257 = add nuw nsw i32 %256, 256
  %258 = mul i64 %14, 6
  %259 = getelementptr i8, i8* %0, i64 %258
  %260 = add i64 %258, 32
  %261 = getelementptr i8, i8* %0, i64 %260
  %262 = getelementptr i8, i8* %2, i64 32
  %263 = getelementptr i8, i8* %3, i64 7
  %264 = icmp ult i8* %259, %262
  %265 = icmp ugt i8* %261, %2
  %266 = and i1 %264, %265
  %267 = icmp ult i8* %259, %263
  %268 = icmp ult i8* %254, %261
  %269 = and i1 %267, %268
  %270 = or i1 %266, %269
  br i1 %270, label %310, label %271

271:                                              ; preds = %252
  %272 = insertelement <8 x i32> undef, i32 %16, i32 0
  %273 = shufflevector <8 x i32> %272, <8 x i32> undef, <8 x i32> zeroinitializer
  %274 = insertelement <8 x i32> undef, i32 %257, i32 0
  %275 = shufflevector <8 x i32> %274, <8 x i32> undef, <8 x i32> zeroinitializer
  %276 = bitcast i8* %2 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 2, !alias.scope !486
  %278 = zext <8 x i16> %277 to <8 x i32>
  %279 = shl nuw nsw <8 x i32> %278, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %280 = load i16, i16* %255, align 2, !alias.scope !489
  %281 = insertelement <8 x i16> undef, i16 %280, i32 0
  %282 = shufflevector <8 x i16> %281, <8 x i16> undef, <8 x i32> zeroinitializer
  %283 = zext <8 x i16> %282 to <8 x i32>
  %284 = mul nuw nsw <8 x i32> %283, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %285 = mul nuw nsw <8 x i32> %273, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %286 = add nuw nsw <8 x i32> %275, %279
  %287 = add nuw nsw <8 x i32> %286, %285
  %288 = add nuw nsw <8 x i32> %287, %284
  %289 = lshr <8 x i32> %288, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %290 = trunc <8 x i32> %289 to <8 x i16>
  %291 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %290, <8 x i16>* %291, align 2, !alias.scope !491, !noalias !493
  %292 = getelementptr inbounds i8, i8* %2, i64 16
  %293 = bitcast i8* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 2, !alias.scope !486
  %295 = zext <8 x i16> %294 to <8 x i32>
  %296 = shl nuw nsw <8 x i32> %295, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %297 = load i16, i16* %255, align 2, !alias.scope !489
  %298 = insertelement <8 x i16> undef, i16 %297, i32 0
  %299 = shufflevector <8 x i16> %298, <8 x i16> undef, <8 x i32> zeroinitializer
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = mul nuw nsw <8 x i32> %300, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %302 = mul nuw nsw <8 x i32> %273, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %303 = add nuw nsw <8 x i32> %275, %296
  %304 = add nuw nsw <8 x i32> %303, %302
  %305 = add nuw nsw <8 x i32> %304, %301
  %306 = lshr <8 x i32> %305, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %307 = trunc <8 x i32> %306 to <8 x i16>
  %308 = getelementptr inbounds i16, i16* %253, i64 8
  %309 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> %307, <8 x i16>* %309, align 2, !alias.scope !491, !noalias !493
  br label %333

310:                                              ; preds = %252, %310
  %311 = phi i64 [ %331, %310 ], [ 0, %252 ]
  %312 = getelementptr inbounds i16, i16* %5, i64 %311
  %313 = load i16, i16* %312, align 2
  %314 = zext i16 %313 to i32
  %315 = shl nuw nsw i32 %314, 6
  %316 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %311
  %317 = load i8, i8* %316, align 1
  %318 = zext i8 %317 to i32
  %319 = load i16, i16* %255, align 2
  %320 = zext i16 %319 to i32
  %321 = mul nuw nsw i32 %320, %318
  %322 = sub i8 0, %317
  %323 = zext i8 %322 to i32
  %324 = mul nuw nsw i32 %323, %16
  %325 = add nuw nsw i32 %257, %315
  %326 = add nuw nsw i32 %325, %324
  %327 = add nuw nsw i32 %326, %321
  %328 = lshr i32 %327, 9
  %329 = trunc i32 %328 to i16
  %330 = getelementptr inbounds i16, i16* %253, i64 %311
  store i16 %329, i16* %330, align 2
  %331 = add nuw nsw i64 %311, 1
  %332 = icmp eq i64 %331, 16
  br i1 %332, label %333, label %310, !llvm.loop !494

333:                                              ; preds = %310, %271
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 6
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %2, i64 10
  %21 = bitcast i8* %20 to i16*
  %22 = getelementptr inbounds i8, i8* %2, i64 12
  %23 = bitcast i8* %22 to i16*
  %24 = getelementptr inbounds i8, i8* %2, i64 14
  %25 = bitcast i8* %24 to i16*
  %26 = getelementptr inbounds i8, i8* %2, i64 16
  %27 = bitcast i8* %26 to i16*
  %28 = getelementptr inbounds i8, i8* %2, i64 18
  %29 = bitcast i8* %28 to i16*
  %30 = getelementptr inbounds i8, i8* %2, i64 20
  %31 = bitcast i8* %30 to i16*
  %32 = getelementptr inbounds i8, i8* %2, i64 22
  %33 = bitcast i8* %32 to i16*
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to i16*
  %36 = getelementptr inbounds i8, i8* %2, i64 26
  %37 = bitcast i8* %36 to i16*
  %38 = getelementptr inbounds i8, i8* %2, i64 28
  %39 = bitcast i8* %38 to i16*
  %40 = getelementptr inbounds i8, i8* %2, i64 30
  %41 = bitcast i8* %40 to i16*
  br label %42

42:                                               ; preds = %42, %4
  %43 = phi i64 [ 0, %4 ], [ %164, %42 ]
  %44 = phi i16* [ %9, %4 ], [ %163, %42 ]
  %45 = getelementptr inbounds [124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 %43
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub i8 0, %46
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, %11
  %51 = add nuw nsw i32 %50, 128
  %52 = load i16, i16* %5, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, %47
  %55 = add nuw nsw i32 %51, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %44, align 2
  %58 = load i16, i16* %13, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, %47
  %61 = add nuw nsw i32 %51, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %44, i64 1
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %15, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, %47
  %68 = add nuw nsw i32 %51, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %44, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %17, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %47
  %75 = add nuw nsw i32 %51, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %44, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %19, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %80, %47
  %82 = add nuw nsw i32 %51, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %44, i64 4
  store i16 %84, i16* %85, align 2
  %86 = load i16, i16* %21, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %87, %47
  %89 = add nuw nsw i32 %51, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i16
  %92 = getelementptr inbounds i16, i16* %44, i64 5
  store i16 %91, i16* %92, align 2
  %93 = load i16, i16* %23, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %94, %47
  %96 = add nuw nsw i32 %51, %95
  %97 = lshr i32 %96, 8
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %44, i64 6
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %25, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %101, %47
  %103 = add nuw nsw i32 %51, %102
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i16
  %106 = getelementptr inbounds i16, i16* %44, i64 7
  store i16 %105, i16* %106, align 2
  %107 = load i16, i16* %27, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %108, %47
  %110 = add nuw nsw i32 %51, %109
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds i16, i16* %44, i64 8
  store i16 %112, i16* %113, align 2
  %114 = load i16, i16* %29, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %115, %47
  %117 = add nuw nsw i32 %51, %116
  %118 = lshr i32 %117, 8
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %44, i64 9
  store i16 %119, i16* %120, align 2
  %121 = load i16, i16* %31, align 2
  %122 = zext i16 %121 to i32
  %123 = mul nuw nsw i32 %122, %47
  %124 = add nuw nsw i32 %51, %123
  %125 = lshr i32 %124, 8
  %126 = trunc i32 %125 to i16
  %127 = getelementptr inbounds i16, i16* %44, i64 10
  store i16 %126, i16* %127, align 2
  %128 = load i16, i16* %33, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %129, %47
  %131 = add nuw nsw i32 %51, %130
  %132 = lshr i32 %131, 8
  %133 = trunc i32 %132 to i16
  %134 = getelementptr inbounds i16, i16* %44, i64 11
  store i16 %133, i16* %134, align 2
  %135 = load i16, i16* %35, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %136, %47
  %138 = add nuw nsw i32 %51, %137
  %139 = lshr i32 %138, 8
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds i16, i16* %44, i64 12
  store i16 %140, i16* %141, align 2
  %142 = load i16, i16* %37, align 2
  %143 = zext i16 %142 to i32
  %144 = mul nuw nsw i32 %143, %47
  %145 = add nuw nsw i32 %51, %144
  %146 = lshr i32 %145, 8
  %147 = trunc i32 %146 to i16
  %148 = getelementptr inbounds i16, i16* %44, i64 13
  store i16 %147, i16* %148, align 2
  %149 = load i16, i16* %39, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %150, %47
  %152 = add nuw nsw i32 %51, %151
  %153 = lshr i32 %152, 8
  %154 = trunc i32 %153 to i16
  %155 = getelementptr inbounds i16, i16* %44, i64 14
  store i16 %154, i16* %155, align 2
  %156 = load i16, i16* %41, align 2
  %157 = zext i16 %156 to i32
  %158 = mul nuw nsw i32 %157, %47
  %159 = add nuw nsw i32 %51, %158
  %160 = lshr i32 %159, 8
  %161 = trunc i32 %160 to i16
  %162 = getelementptr inbounds i16, i16* %44, i64 15
  store i16 %161, i16* %162, align 2
  %163 = getelementptr inbounds i16, i16* %44, i64 %10
  %164 = add nuw nsw i64 %43, 1
  %165 = icmp eq i64 %164, 4
  br i1 %165, label %166, label %42

166:                                              ; preds = %42
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi4EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr i8, i8* %0, i64 32
  %13 = getelementptr i8, i8* %3, i64 1
  %14 = icmp ugt i8* %13, %0
  %15 = icmp ugt i8* %12, %3
  %16 = and i1 %14, %15
  br i1 %16, label %81, label %17

17:                                               ; preds = %4
  %18 = insertelement <8 x i32> undef, i32 %11, i32 0
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> zeroinitializer
  %20 = load i16, i16* %5, align 2, !alias.scope !495
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = zext <8 x i16> %22 to <8 x i32>
  %24 = mul nuw nsw <8 x i32> %23, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %25 = mul nuw nsw <8 x i32> %19, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %26 = add nuw nsw <8 x i32> %25, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %27 = add nuw nsw <8 x i32> %26, %24
  %28 = lshr <8 x i32> %27, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %29 = trunc <8 x i32> %28 to <8 x i16>
  %30 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2, !alias.scope !498, !noalias !495
  %31 = load i16, i16* %5, align 2, !alias.scope !495
  %32 = insertelement <8 x i16> undef, i16 %31, i32 0
  %33 = shufflevector <8 x i16> %32, <8 x i16> undef, <8 x i32> zeroinitializer
  %34 = zext <8 x i16> %33 to <8 x i32>
  %35 = mul nuw nsw <8 x i32> %34, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %36 = mul nuw nsw <8 x i32> %19, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %37 = add nuw nsw <8 x i32> %36, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %38 = add nuw nsw <8 x i32> %37, %35
  %39 = lshr <8 x i32> %38, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %40 = trunc <8 x i32> %39 to <8 x i16>
  %41 = getelementptr inbounds i8, i8* %0, i64 16
  %42 = bitcast i8* %41 to <8 x i16>*
  store <8 x i16> %40, <8 x i16>* %42, align 2, !alias.scope !498, !noalias !495
  br label %43

43:                                               ; preds = %81, %17
  %44 = getelementptr inbounds i16, i16* %9, i64 %10
  %45 = getelementptr inbounds i8, i8* %3, i64 2
  %46 = bitcast i8* %45 to i16*
  %47 = and i64 %1, -2
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = add i64 %47, 32
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = getelementptr i8, i8* %3, i64 3
  %52 = icmp ult i8* %48, %51
  %53 = icmp ult i8* %45, %50
  %54 = and i1 %52, %53
  br i1 %54, label %114, label %55

55:                                               ; preds = %43
  %56 = insertelement <8 x i32> undef, i32 %11, i32 0
  %57 = shufflevector <8 x i32> %56, <8 x i32> undef, <8 x i32> zeroinitializer
  %58 = load i16, i16* %46, align 2, !alias.scope !500
  %59 = insertelement <8 x i16> undef, i16 %58, i32 0
  %60 = shufflevector <8 x i16> %59, <8 x i16> undef, <8 x i32> zeroinitializer
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %61, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %63 = mul nuw nsw <8 x i32> %57, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %64 = add nuw nsw <8 x i32> %63, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %65 = add nuw nsw <8 x i32> %64, %62
  %66 = lshr <8 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %67 = trunc <8 x i32> %66 to <8 x i16>
  %68 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 2, !alias.scope !503, !noalias !500
  %69 = load i16, i16* %46, align 2, !alias.scope !500
  %70 = insertelement <8 x i16> undef, i16 %69, i32 0
  %71 = shufflevector <8 x i16> %70, <8 x i16> undef, <8 x i32> zeroinitializer
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = mul nuw nsw <8 x i32> %72, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %74 = mul nuw nsw <8 x i32> %57, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %75 = add nuw nsw <8 x i32> %74, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %76 = add nuw nsw <8 x i32> %75, %73
  %77 = lshr <8 x i32> %76, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %78 = trunc <8 x i32> %77 to <8 x i16>
  %79 = getelementptr inbounds i16, i16* %44, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %80, align 2, !alias.scope !503, !noalias !500
  br label %147

81:                                               ; preds = %4, %81
  %82 = phi i64 [ %112, %81 ], [ 0, %4 ]
  %83 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %82
  %84 = load i8, i8* %83, align 2
  %85 = zext i8 %84 to i32
  %86 = load i16, i16* %5, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %87, %85
  %89 = sub i8 0, %84
  %90 = zext i8 %89 to i32
  %91 = mul nuw nsw i32 %90, %11
  %92 = add nuw nsw i32 %91, 128
  %93 = add nuw nsw i32 %92, %88
  %94 = lshr i32 %93, 8
  %95 = trunc i32 %94 to i16
  %96 = getelementptr inbounds i16, i16* %9, i64 %82
  store i16 %95, i16* %96, align 2
  %97 = or i64 %82, 1
  %98 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = load i16, i16* %5, align 2
  %102 = zext i16 %101 to i32
  %103 = mul nuw nsw i32 %102, %100
  %104 = sub i8 0, %99
  %105 = zext i8 %104 to i32
  %106 = mul nuw nsw i32 %105, %11
  %107 = add nuw nsw i32 %106, 128
  %108 = add nuw nsw i32 %107, %103
  %109 = lshr i32 %108, 8
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %9, i64 %97
  store i16 %110, i16* %111, align 2
  %112 = add nuw nsw i64 %82, 2
  %113 = icmp eq i64 %112, 16
  br i1 %113, label %43, label %81, !llvm.loop !505

114:                                              ; preds = %43, %114
  %115 = phi i64 [ %145, %114 ], [ 0, %43 ]
  %116 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %115
  %117 = load i8, i8* %116, align 2
  %118 = zext i8 %117 to i32
  %119 = load i16, i16* %46, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %120, %118
  %122 = sub i8 0, %117
  %123 = zext i8 %122 to i32
  %124 = mul nuw nsw i32 %123, %11
  %125 = add nuw nsw i32 %124, 128
  %126 = add nuw nsw i32 %125, %121
  %127 = lshr i32 %126, 8
  %128 = trunc i32 %127 to i16
  %129 = getelementptr inbounds i16, i16* %44, i64 %115
  store i16 %128, i16* %129, align 2
  %130 = or i64 %115, 1
  %131 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = load i16, i16* %46, align 2
  %135 = zext i16 %134 to i32
  %136 = mul nuw nsw i32 %135, %133
  %137 = sub i8 0, %132
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, %11
  %140 = add nuw nsw i32 %139, 128
  %141 = add nuw nsw i32 %140, %136
  %142 = lshr i32 %141, 8
  %143 = trunc i32 %142 to i16
  %144 = getelementptr inbounds i16, i16* %44, i64 %130
  store i16 %143, i16* %144, align 2
  %145 = add nuw nsw i64 %115, 2
  %146 = icmp eq i64 %145, 16
  br i1 %146, label %147, label %114, !llvm.loop !506

147:                                              ; preds = %114, %55
  %148 = getelementptr inbounds i16, i16* %44, i64 %10
  %149 = getelementptr inbounds i8, i8* %3, i64 4
  %150 = bitcast i8* %149 to i16*
  %151 = shl i64 %10, 2
  %152 = getelementptr i8, i8* %0, i64 %151
  %153 = add i64 %151, 32
  %154 = getelementptr i8, i8* %0, i64 %153
  %155 = getelementptr i8, i8* %3, i64 5
  %156 = icmp ult i8* %152, %155
  %157 = icmp ult i8* %149, %154
  %158 = and i1 %156, %157
  br i1 %158, label %185, label %159

159:                                              ; preds = %147
  %160 = insertelement <8 x i32> undef, i32 %11, i32 0
  %161 = shufflevector <8 x i32> %160, <8 x i32> undef, <8 x i32> zeroinitializer
  %162 = load i16, i16* %150, align 2, !alias.scope !507
  %163 = insertelement <8 x i16> undef, i16 %162, i32 0
  %164 = shufflevector <8 x i16> %163, <8 x i16> undef, <8 x i32> zeroinitializer
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %165, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %167 = mul nuw nsw <8 x i32> %161, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %168 = add nuw nsw <8 x i32> %167, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %169 = add nuw nsw <8 x i32> %168, %166
  %170 = lshr <8 x i32> %169, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %171 = trunc <8 x i32> %170 to <8 x i16>
  %172 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2, !alias.scope !510, !noalias !507
  %173 = load i16, i16* %150, align 2, !alias.scope !507
  %174 = insertelement <8 x i16> undef, i16 %173, i32 0
  %175 = shufflevector <8 x i16> %174, <8 x i16> undef, <8 x i32> zeroinitializer
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %176, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %178 = mul nuw nsw <8 x i32> %161, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %179 = add nuw nsw <8 x i32> %178, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %180 = add nuw nsw <8 x i32> %179, %177
  %181 = lshr <8 x i32> %180, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %182 = trunc <8 x i32> %181 to <8 x i16>
  %183 = getelementptr inbounds i16, i16* %148, i64 8
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %184, align 2, !alias.scope !510, !noalias !507
  br label %218

185:                                              ; preds = %147, %185
  %186 = phi i64 [ %216, %185 ], [ 0, %147 ]
  %187 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %186
  %188 = load i8, i8* %187, align 2
  %189 = zext i8 %188 to i32
  %190 = load i16, i16* %150, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %191, %189
  %193 = sub i8 0, %188
  %194 = zext i8 %193 to i32
  %195 = mul nuw nsw i32 %194, %11
  %196 = add nuw nsw i32 %195, 128
  %197 = add nuw nsw i32 %196, %192
  %198 = lshr i32 %197, 8
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %148, i64 %186
  store i16 %199, i16* %200, align 2
  %201 = or i64 %186, 1
  %202 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = load i16, i16* %150, align 2
  %206 = zext i16 %205 to i32
  %207 = mul nuw nsw i32 %206, %204
  %208 = sub i8 0, %203
  %209 = zext i8 %208 to i32
  %210 = mul nuw nsw i32 %209, %11
  %211 = add nuw nsw i32 %210, 128
  %212 = add nuw nsw i32 %211, %207
  %213 = lshr i32 %212, 8
  %214 = trunc i32 %213 to i16
  %215 = getelementptr inbounds i16, i16* %148, i64 %201
  store i16 %214, i16* %215, align 2
  %216 = add nuw nsw i64 %186, 2
  %217 = icmp eq i64 %216, 16
  br i1 %217, label %218, label %185, !llvm.loop !512

218:                                              ; preds = %185, %159
  %219 = getelementptr inbounds i16, i16* %148, i64 %10
  %220 = getelementptr inbounds i8, i8* %3, i64 6
  %221 = bitcast i8* %220 to i16*
  %222 = mul i64 %10, 6
  %223 = getelementptr i8, i8* %0, i64 %222
  %224 = add i64 %222, 32
  %225 = getelementptr i8, i8* %0, i64 %224
  %226 = getelementptr i8, i8* %3, i64 7
  %227 = icmp ult i8* %223, %226
  %228 = icmp ult i8* %220, %225
  %229 = and i1 %227, %228
  br i1 %229, label %256, label %230

230:                                              ; preds = %218
  %231 = insertelement <8 x i32> undef, i32 %11, i32 0
  %232 = shufflevector <8 x i32> %231, <8 x i32> undef, <8 x i32> zeroinitializer
  %233 = load i16, i16* %221, align 2, !alias.scope !513
  %234 = insertelement <8 x i16> undef, i16 %233, i32 0
  %235 = shufflevector <8 x i16> %234, <8 x i16> undef, <8 x i32> zeroinitializer
  %236 = zext <8 x i16> %235 to <8 x i32>
  %237 = mul nuw nsw <8 x i32> %236, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %238 = mul nuw nsw <8 x i32> %232, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %239 = add nuw nsw <8 x i32> %238, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %240 = add nuw nsw <8 x i32> %239, %237
  %241 = lshr <8 x i32> %240, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %242 = trunc <8 x i32> %241 to <8 x i16>
  %243 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %243, align 2, !alias.scope !516, !noalias !513
  %244 = load i16, i16* %221, align 2, !alias.scope !513
  %245 = insertelement <8 x i16> undef, i16 %244, i32 0
  %246 = shufflevector <8 x i16> %245, <8 x i16> undef, <8 x i32> zeroinitializer
  %247 = zext <8 x i16> %246 to <8 x i32>
  %248 = mul nuw nsw <8 x i32> %247, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %249 = mul nuw nsw <8 x i32> %232, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %250 = add nuw nsw <8 x i32> %249, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %251 = add nuw nsw <8 x i32> %250, %248
  %252 = lshr <8 x i32> %251, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %253 = trunc <8 x i32> %252 to <8 x i16>
  %254 = getelementptr inbounds i16, i16* %219, i64 8
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %255, align 2, !alias.scope !516, !noalias !513
  br label %289

256:                                              ; preds = %218, %256
  %257 = phi i64 [ %287, %256 ], [ 0, %218 ]
  %258 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %257
  %259 = load i8, i8* %258, align 2
  %260 = zext i8 %259 to i32
  %261 = load i16, i16* %221, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nuw nsw i32 %262, %260
  %264 = sub i8 0, %259
  %265 = zext i8 %264 to i32
  %266 = mul nuw nsw i32 %265, %11
  %267 = add nuw nsw i32 %266, 128
  %268 = add nuw nsw i32 %267, %263
  %269 = lshr i32 %268, 8
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %219, i64 %257
  store i16 %270, i16* %271, align 2
  %272 = or i64 %257, 1
  %273 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %272
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  %276 = load i16, i16* %221, align 2
  %277 = zext i16 %276 to i32
  %278 = mul nuw nsw i32 %277, %275
  %279 = sub i8 0, %274
  %280 = zext i8 %279 to i32
  %281 = mul nuw nsw i32 %280, %11
  %282 = add nuw nsw i32 %281, 128
  %283 = add nuw nsw i32 %282, %278
  %284 = lshr i32 %283, 8
  %285 = trunc i32 %284 to i16
  %286 = getelementptr inbounds i16, i16* %219, i64 %272
  store i16 %285, i16* %286, align 2
  %287 = add nuw nsw i64 %257, 2
  %288 = icmp eq i64 %287, 16
  br i1 %288, label %289, label %256, !llvm.loop !518

289:                                              ; preds = %256, %230
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi8ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i16, i16* %6, i64 %5
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %10, i64 8
  %13 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %10, i64 %5
  %15 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i16, i16* %14, i64 8
  %17 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %14, i64 %5
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i16, i16* %18, i64 8
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds i16, i16* %18, i64 %5
  store i16 512, i16* %22, align 2
  %23 = getelementptr inbounds i16, i16* %22, i64 1
  store i16 512, i16* %23, align 2
  %24 = getelementptr inbounds i16, i16* %22, i64 2
  store i16 512, i16* %24, align 2
  %25 = getelementptr inbounds i16, i16* %22, i64 3
  store i16 512, i16* %25, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 4
  store i16 512, i16* %26, align 2
  %27 = getelementptr inbounds i16, i16* %22, i64 5
  store i16 512, i16* %27, align 2
  %28 = getelementptr inbounds i16, i16* %22, i64 6
  store i16 512, i16* %28, align 2
  %29 = getelementptr inbounds i16, i16* %22, i64 7
  store i16 512, i16* %29, align 2
  %30 = getelementptr inbounds i16, i16* %22, i64 8
  store i16 512, i16* %30, align 2
  %31 = getelementptr inbounds i16, i16* %22, i64 9
  store i16 512, i16* %31, align 2
  %32 = getelementptr inbounds i16, i16* %22, i64 10
  store i16 512, i16* %32, align 2
  %33 = getelementptr inbounds i16, i16* %22, i64 11
  store i16 512, i16* %33, align 2
  %34 = getelementptr inbounds i16, i16* %22, i64 12
  store i16 512, i16* %34, align 2
  %35 = getelementptr inbounds i16, i16* %22, i64 13
  store i16 512, i16* %35, align 2
  %36 = getelementptr inbounds i16, i16* %22, i64 14
  store i16 512, i16* %36, align 2
  %37 = getelementptr inbounds i16, i16* %22, i64 15
  store i16 512, i16* %37, align 2
  %38 = getelementptr inbounds i16, i16* %22, i64 %5
  store i16 512, i16* %38, align 2
  %39 = getelementptr inbounds i16, i16* %38, i64 1
  store i16 512, i16* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 2
  store i16 512, i16* %40, align 2
  %41 = getelementptr inbounds i16, i16* %38, i64 3
  store i16 512, i16* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 4
  store i16 512, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %38, i64 5
  store i16 512, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %38, i64 6
  store i16 512, i16* %44, align 2
  %45 = getelementptr inbounds i16, i16* %38, i64 7
  store i16 512, i16* %45, align 2
  %46 = getelementptr inbounds i16, i16* %38, i64 8
  store i16 512, i16* %46, align 2
  %47 = getelementptr inbounds i16, i16* %38, i64 9
  store i16 512, i16* %47, align 2
  %48 = getelementptr inbounds i16, i16* %38, i64 10
  store i16 512, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %38, i64 11
  store i16 512, i16* %49, align 2
  %50 = getelementptr inbounds i16, i16* %38, i64 12
  store i16 512, i16* %50, align 2
  %51 = getelementptr inbounds i16, i16* %38, i64 13
  store i16 512, i16* %51, align 2
  %52 = getelementptr inbounds i16, i16* %38, i64 14
  store i16 512, i16* %52, align 2
  %53 = getelementptr inbounds i16, i16* %38, i64 15
  store i16 512, i16* %53, align 2
  %54 = getelementptr inbounds i16, i16* %38, i64 %5
  store i16 512, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %54, i64 1
  store i16 512, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 2
  store i16 512, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %54, i64 3
  store i16 512, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %54, i64 4
  store i16 512, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %54, i64 5
  store i16 512, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %54, i64 6
  store i16 512, i16* %60, align 2
  %61 = getelementptr inbounds i16, i16* %54, i64 7
  store i16 512, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %54, i64 8
  store i16 512, i16* %62, align 2
  %63 = getelementptr inbounds i16, i16* %54, i64 9
  store i16 512, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %54, i64 10
  store i16 512, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %54, i64 11
  store i16 512, i16* %65, align 2
  %66 = getelementptr inbounds i16, i16* %54, i64 12
  store i16 512, i16* %66, align 2
  %67 = getelementptr inbounds i16, i16* %54, i64 13
  store i16 512, i16* %67, align 2
  %68 = getelementptr inbounds i16, i16* %54, i64 14
  store i16 512, i16* %68, align 2
  %69 = getelementptr inbounds i16, i16* %54, i64 15
  store i16 512, i16* %69, align 2
  %70 = getelementptr inbounds i16, i16* %54, i64 %5
  store i16 512, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %70, i64 1
  store i16 512, i16* %71, align 2
  %72 = getelementptr inbounds i16, i16* %70, i64 2
  store i16 512, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %70, i64 3
  store i16 512, i16* %73, align 2
  %74 = getelementptr inbounds i16, i16* %70, i64 4
  store i16 512, i16* %74, align 2
  %75 = getelementptr inbounds i16, i16* %70, i64 5
  store i16 512, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %70, i64 6
  store i16 512, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %70, i64 7
  store i16 512, i16* %77, align 2
  %78 = getelementptr inbounds i16, i16* %70, i64 8
  store i16 512, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %70, i64 9
  store i16 512, i16* %79, align 2
  %80 = getelementptr inbounds i16, i16* %70, i64 10
  store i16 512, i16* %80, align 2
  %81 = getelementptr inbounds i16, i16* %70, i64 11
  store i16 512, i16* %81, align 2
  %82 = getelementptr inbounds i16, i16* %70, i64 12
  store i16 512, i16* %82, align 2
  %83 = getelementptr inbounds i16, i16* %70, i64 13
  store i16 512, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %70, i64 14
  store i16 512, i16* %84, align 2
  %85 = getelementptr inbounds i16, i16* %70, i64 15
  store i16 512, i16* %85, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = bitcast i8* %0 to i16*
  %86 = lshr i64 %1, 1
  %87 = trunc i32 %84 to i16
  %88 = insertelement <8 x i16> undef, i16 %87, i32 0
  %89 = shufflevector <8 x i16> %88, <8 x i16> undef, <8 x i32> zeroinitializer
  %90 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds i8, i8* %0, i64 16
  %92 = bitcast i8* %91 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i16, i16* %85, i64 %86
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i16, i16* %93, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %93, i64 %86
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i16, i16* %97, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i16, i16* %97, i64 %86
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %101, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %101, i64 %86
  store i16 %87, i16* %105, align 2
  %106 = getelementptr inbounds i16, i16* %105, i64 1
  store i16 %87, i16* %106, align 2
  %107 = getelementptr inbounds i16, i16* %105, i64 2
  store i16 %87, i16* %107, align 2
  %108 = getelementptr inbounds i16, i16* %105, i64 3
  store i16 %87, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %105, i64 4
  store i16 %87, i16* %109, align 2
  %110 = getelementptr inbounds i16, i16* %105, i64 5
  store i16 %87, i16* %110, align 2
  %111 = getelementptr inbounds i16, i16* %105, i64 6
  store i16 %87, i16* %111, align 2
  %112 = getelementptr inbounds i16, i16* %105, i64 7
  store i16 %87, i16* %112, align 2
  %113 = getelementptr inbounds i16, i16* %105, i64 8
  store i16 %87, i16* %113, align 2
  %114 = getelementptr inbounds i16, i16* %105, i64 9
  store i16 %87, i16* %114, align 2
  %115 = getelementptr inbounds i16, i16* %105, i64 10
  store i16 %87, i16* %115, align 2
  %116 = getelementptr inbounds i16, i16* %105, i64 11
  store i16 %87, i16* %116, align 2
  %117 = getelementptr inbounds i16, i16* %105, i64 12
  store i16 %87, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %105, i64 13
  store i16 %87, i16* %118, align 2
  %119 = getelementptr inbounds i16, i16* %105, i64 14
  store i16 %87, i16* %119, align 2
  %120 = getelementptr inbounds i16, i16* %105, i64 15
  store i16 %87, i16* %120, align 2
  %121 = getelementptr inbounds i16, i16* %105, i64 %86
  store i16 %87, i16* %121, align 2
  %122 = getelementptr inbounds i16, i16* %121, i64 1
  store i16 %87, i16* %122, align 2
  %123 = getelementptr inbounds i16, i16* %121, i64 2
  store i16 %87, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %121, i64 3
  store i16 %87, i16* %124, align 2
  %125 = getelementptr inbounds i16, i16* %121, i64 4
  store i16 %87, i16* %125, align 2
  %126 = getelementptr inbounds i16, i16* %121, i64 5
  store i16 %87, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %121, i64 6
  store i16 %87, i16* %127, align 2
  %128 = getelementptr inbounds i16, i16* %121, i64 7
  store i16 %87, i16* %128, align 2
  %129 = getelementptr inbounds i16, i16* %121, i64 8
  store i16 %87, i16* %129, align 2
  %130 = getelementptr inbounds i16, i16* %121, i64 9
  store i16 %87, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %121, i64 10
  store i16 %87, i16* %131, align 2
  %132 = getelementptr inbounds i16, i16* %121, i64 11
  store i16 %87, i16* %132, align 2
  %133 = getelementptr inbounds i16, i16* %121, i64 12
  store i16 %87, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %121, i64 13
  store i16 %87, i16* %134, align 2
  %135 = getelementptr inbounds i16, i16* %121, i64 14
  store i16 %87, i16* %135, align 2
  %136 = getelementptr inbounds i16, i16* %121, i64 15
  store i16 %87, i16* %136, align 2
  %137 = getelementptr inbounds i16, i16* %121, i64 %86
  store i16 %87, i16* %137, align 2
  %138 = getelementptr inbounds i16, i16* %137, i64 1
  store i16 %87, i16* %138, align 2
  %139 = getelementptr inbounds i16, i16* %137, i64 2
  store i16 %87, i16* %139, align 2
  %140 = getelementptr inbounds i16, i16* %137, i64 3
  store i16 %87, i16* %140, align 2
  %141 = getelementptr inbounds i16, i16* %137, i64 4
  store i16 %87, i16* %141, align 2
  %142 = getelementptr inbounds i16, i16* %137, i64 5
  store i16 %87, i16* %142, align 2
  %143 = getelementptr inbounds i16, i16* %137, i64 6
  store i16 %87, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %137, i64 7
  store i16 %87, i16* %144, align 2
  %145 = getelementptr inbounds i16, i16* %137, i64 8
  store i16 %87, i16* %145, align 2
  %146 = getelementptr inbounds i16, i16* %137, i64 9
  store i16 %87, i16* %146, align 2
  %147 = getelementptr inbounds i16, i16* %137, i64 10
  store i16 %87, i16* %147, align 2
  %148 = getelementptr inbounds i16, i16* %137, i64 11
  store i16 %87, i16* %148, align 2
  %149 = getelementptr inbounds i16, i16* %137, i64 12
  store i16 %87, i16* %149, align 2
  %150 = getelementptr inbounds i16, i16* %137, i64 13
  store i16 %87, i16* %150, align 2
  %151 = getelementptr inbounds i16, i16* %137, i64 14
  store i16 %87, i16* %151, align 2
  %152 = getelementptr inbounds i16, i16* %137, i64 15
  store i16 %87, i16* %152, align 2
  %153 = getelementptr inbounds i16, i16* %137, i64 %86
  store i16 %87, i16* %153, align 2
  %154 = getelementptr inbounds i16, i16* %153, i64 1
  store i16 %87, i16* %154, align 2
  %155 = getelementptr inbounds i16, i16* %153, i64 2
  store i16 %87, i16* %155, align 2
  %156 = getelementptr inbounds i16, i16* %153, i64 3
  store i16 %87, i16* %156, align 2
  %157 = getelementptr inbounds i16, i16* %153, i64 4
  store i16 %87, i16* %157, align 2
  %158 = getelementptr inbounds i16, i16* %153, i64 5
  store i16 %87, i16* %158, align 2
  %159 = getelementptr inbounds i16, i16* %153, i64 6
  store i16 %87, i16* %159, align 2
  %160 = getelementptr inbounds i16, i16* %153, i64 7
  store i16 %87, i16* %160, align 2
  %161 = getelementptr inbounds i16, i16* %153, i64 8
  store i16 %87, i16* %161, align 2
  %162 = getelementptr inbounds i16, i16* %153, i64 9
  store i16 %87, i16* %162, align 2
  %163 = getelementptr inbounds i16, i16* %153, i64 10
  store i16 %87, i16* %163, align 2
  %164 = getelementptr inbounds i16, i16* %153, i64 11
  store i16 %87, i16* %164, align 2
  %165 = getelementptr inbounds i16, i16* %153, i64 12
  store i16 %87, i16* %165, align 2
  %166 = getelementptr inbounds i16, i16* %153, i64 13
  store i16 %87, i16* %166, align 2
  %167 = getelementptr inbounds i16, i16* %153, i64 14
  store i16 %87, i16* %167, align 2
  %168 = getelementptr inbounds i16, i16* %153, i64 15
  store i16 %87, i16* %168, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 4
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = lshr i32 %43, 3
  %45 = bitcast i8* %0 to i16*
  %46 = lshr i64 %1, 1
  %47 = trunc i32 %44 to i16
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds i8, i8* %0, i64 16
  %52 = bitcast i8* %51 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %45, i64 %46
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds i16, i16* %53, i64 8
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i16, i16* %53, i64 %46
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %58, align 2
  %59 = getelementptr inbounds i16, i16* %57, i64 8
  %60 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds i16, i16* %57, i64 %46
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds i16, i16* %61, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds i16, i16* %61, i64 %46
  store i16 %47, i16* %65, align 2
  %66 = getelementptr inbounds i16, i16* %65, i64 1
  store i16 %47, i16* %66, align 2
  %67 = getelementptr inbounds i16, i16* %65, i64 2
  store i16 %47, i16* %67, align 2
  %68 = getelementptr inbounds i16, i16* %65, i64 3
  store i16 %47, i16* %68, align 2
  %69 = getelementptr inbounds i16, i16* %65, i64 4
  store i16 %47, i16* %69, align 2
  %70 = getelementptr inbounds i16, i16* %65, i64 5
  store i16 %47, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %65, i64 6
  store i16 %47, i16* %71, align 2
  %72 = getelementptr inbounds i16, i16* %65, i64 7
  store i16 %47, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %65, i64 8
  store i16 %47, i16* %73, align 2
  %74 = getelementptr inbounds i16, i16* %65, i64 9
  store i16 %47, i16* %74, align 2
  %75 = getelementptr inbounds i16, i16* %65, i64 10
  store i16 %47, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %65, i64 11
  store i16 %47, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %65, i64 12
  store i16 %47, i16* %77, align 2
  %78 = getelementptr inbounds i16, i16* %65, i64 13
  store i16 %47, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %65, i64 14
  store i16 %47, i16* %79, align 2
  %80 = getelementptr inbounds i16, i16* %65, i64 15
  store i16 %47, i16* %80, align 2
  %81 = getelementptr inbounds i16, i16* %65, i64 %46
  store i16 %47, i16* %81, align 2
  %82 = getelementptr inbounds i16, i16* %81, i64 1
  store i16 %47, i16* %82, align 2
  %83 = getelementptr inbounds i16, i16* %81, i64 2
  store i16 %47, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %81, i64 3
  store i16 %47, i16* %84, align 2
  %85 = getelementptr inbounds i16, i16* %81, i64 4
  store i16 %47, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %81, i64 5
  store i16 %47, i16* %86, align 2
  %87 = getelementptr inbounds i16, i16* %81, i64 6
  store i16 %47, i16* %87, align 2
  %88 = getelementptr inbounds i16, i16* %81, i64 7
  store i16 %47, i16* %88, align 2
  %89 = getelementptr inbounds i16, i16* %81, i64 8
  store i16 %47, i16* %89, align 2
  %90 = getelementptr inbounds i16, i16* %81, i64 9
  store i16 %47, i16* %90, align 2
  %91 = getelementptr inbounds i16, i16* %81, i64 10
  store i16 %47, i16* %91, align 2
  %92 = getelementptr inbounds i16, i16* %81, i64 11
  store i16 %47, i16* %92, align 2
  %93 = getelementptr inbounds i16, i16* %81, i64 12
  store i16 %47, i16* %93, align 2
  %94 = getelementptr inbounds i16, i16* %81, i64 13
  store i16 %47, i16* %94, align 2
  %95 = getelementptr inbounds i16, i16* %81, i64 14
  store i16 %47, i16* %95, align 2
  %96 = getelementptr inbounds i16, i16* %81, i64 15
  store i16 %47, i16* %96, align 2
  %97 = getelementptr inbounds i16, i16* %81, i64 %46
  store i16 %47, i16* %97, align 2
  %98 = getelementptr inbounds i16, i16* %97, i64 1
  store i16 %47, i16* %98, align 2
  %99 = getelementptr inbounds i16, i16* %97, i64 2
  store i16 %47, i16* %99, align 2
  %100 = getelementptr inbounds i16, i16* %97, i64 3
  store i16 %47, i16* %100, align 2
  %101 = getelementptr inbounds i16, i16* %97, i64 4
  store i16 %47, i16* %101, align 2
  %102 = getelementptr inbounds i16, i16* %97, i64 5
  store i16 %47, i16* %102, align 2
  %103 = getelementptr inbounds i16, i16* %97, i64 6
  store i16 %47, i16* %103, align 2
  %104 = getelementptr inbounds i16, i16* %97, i64 7
  store i16 %47, i16* %104, align 2
  %105 = getelementptr inbounds i16, i16* %97, i64 8
  store i16 %47, i16* %105, align 2
  %106 = getelementptr inbounds i16, i16* %97, i64 9
  store i16 %47, i16* %106, align 2
  %107 = getelementptr inbounds i16, i16* %97, i64 10
  store i16 %47, i16* %107, align 2
  %108 = getelementptr inbounds i16, i16* %97, i64 11
  store i16 %47, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %97, i64 12
  store i16 %47, i16* %109, align 2
  %110 = getelementptr inbounds i16, i16* %97, i64 13
  store i16 %47, i16* %110, align 2
  %111 = getelementptr inbounds i16, i16* %97, i64 14
  store i16 %47, i16* %111, align 2
  %112 = getelementptr inbounds i16, i16* %97, i64 15
  store i16 %47, i16* %112, align 2
  %113 = getelementptr inbounds i16, i16* %97, i64 %46
  store i16 %47, i16* %113, align 2
  %114 = getelementptr inbounds i16, i16* %113, i64 1
  store i16 %47, i16* %114, align 2
  %115 = getelementptr inbounds i16, i16* %113, i64 2
  store i16 %47, i16* %115, align 2
  %116 = getelementptr inbounds i16, i16* %113, i64 3
  store i16 %47, i16* %116, align 2
  %117 = getelementptr inbounds i16, i16* %113, i64 4
  store i16 %47, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %113, i64 5
  store i16 %47, i16* %118, align 2
  %119 = getelementptr inbounds i16, i16* %113, i64 6
  store i16 %47, i16* %119, align 2
  %120 = getelementptr inbounds i16, i16* %113, i64 7
  store i16 %47, i16* %120, align 2
  %121 = getelementptr inbounds i16, i16* %113, i64 8
  store i16 %47, i16* %121, align 2
  %122 = getelementptr inbounds i16, i16* %113, i64 9
  store i16 %47, i16* %122, align 2
  %123 = getelementptr inbounds i16, i16* %113, i64 10
  store i16 %47, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %113, i64 11
  store i16 %47, i16* %124, align 2
  %125 = getelementptr inbounds i16, i16* %113, i64 12
  store i16 %47, i16* %125, align 2
  %126 = getelementptr inbounds i16, i16* %113, i64 13
  store i16 %47, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %113, i64 14
  store i16 %47, i16* %127, align 2
  %128 = getelementptr inbounds i16, i16* %113, i64 15
  store i16 %47, i16* %128, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 12
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = bitcast i8* %3 to i16*
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nuw nsw i32 %83, %86
  %88 = getelementptr inbounds i8, i8* %3, i64 2
  %89 = bitcast i8* %88 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %87, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 4
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 6
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nuw nsw i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 8
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = add nuw nsw i32 %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 10
  %109 = bitcast i8* %108 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = add nuw nsw i32 %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 12
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = add nuw nsw i32 %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 14
  %119 = bitcast i8* %118 to i16*
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = add nuw nsw i32 %117, %121
  %123 = udiv i32 %122, 24
  %124 = bitcast i8* %0 to i16*
  %125 = lshr i64 %1, 1
  %126 = trunc i32 %123 to i16
  %127 = insertelement <8 x i16> undef, i16 %126, i32 0
  %128 = shufflevector <8 x i16> %127, <8 x i16> undef, <8 x i32> zeroinitializer
  %129 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i8, i8* %0, i64 16
  %131 = bitcast i8* %130 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %124, i64 %125
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds i16, i16* %132, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %135, align 2
  %136 = getelementptr inbounds i16, i16* %132, i64 %125
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds i16, i16* %136, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %139, align 2
  %140 = getelementptr inbounds i16, i16* %136, i64 %125
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %141, align 2
  %142 = getelementptr inbounds i16, i16* %140, i64 8
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds i16, i16* %140, i64 %125
  store i16 %126, i16* %144, align 2
  %145 = getelementptr inbounds i16, i16* %144, i64 1
  store i16 %126, i16* %145, align 2
  %146 = getelementptr inbounds i16, i16* %144, i64 2
  store i16 %126, i16* %146, align 2
  %147 = getelementptr inbounds i16, i16* %144, i64 3
  store i16 %126, i16* %147, align 2
  %148 = getelementptr inbounds i16, i16* %144, i64 4
  store i16 %126, i16* %148, align 2
  %149 = getelementptr inbounds i16, i16* %144, i64 5
  store i16 %126, i16* %149, align 2
  %150 = getelementptr inbounds i16, i16* %144, i64 6
  store i16 %126, i16* %150, align 2
  %151 = getelementptr inbounds i16, i16* %144, i64 7
  store i16 %126, i16* %151, align 2
  %152 = getelementptr inbounds i16, i16* %144, i64 8
  store i16 %126, i16* %152, align 2
  %153 = getelementptr inbounds i16, i16* %144, i64 9
  store i16 %126, i16* %153, align 2
  %154 = getelementptr inbounds i16, i16* %144, i64 10
  store i16 %126, i16* %154, align 2
  %155 = getelementptr inbounds i16, i16* %144, i64 11
  store i16 %126, i16* %155, align 2
  %156 = getelementptr inbounds i16, i16* %144, i64 12
  store i16 %126, i16* %156, align 2
  %157 = getelementptr inbounds i16, i16* %144, i64 13
  store i16 %126, i16* %157, align 2
  %158 = getelementptr inbounds i16, i16* %144, i64 14
  store i16 %126, i16* %158, align 2
  %159 = getelementptr inbounds i16, i16* %144, i64 15
  store i16 %126, i16* %159, align 2
  %160 = getelementptr inbounds i16, i16* %144, i64 %125
  store i16 %126, i16* %160, align 2
  %161 = getelementptr inbounds i16, i16* %160, i64 1
  store i16 %126, i16* %161, align 2
  %162 = getelementptr inbounds i16, i16* %160, i64 2
  store i16 %126, i16* %162, align 2
  %163 = getelementptr inbounds i16, i16* %160, i64 3
  store i16 %126, i16* %163, align 2
  %164 = getelementptr inbounds i16, i16* %160, i64 4
  store i16 %126, i16* %164, align 2
  %165 = getelementptr inbounds i16, i16* %160, i64 5
  store i16 %126, i16* %165, align 2
  %166 = getelementptr inbounds i16, i16* %160, i64 6
  store i16 %126, i16* %166, align 2
  %167 = getelementptr inbounds i16, i16* %160, i64 7
  store i16 %126, i16* %167, align 2
  %168 = getelementptr inbounds i16, i16* %160, i64 8
  store i16 %126, i16* %168, align 2
  %169 = getelementptr inbounds i16, i16* %160, i64 9
  store i16 %126, i16* %169, align 2
  %170 = getelementptr inbounds i16, i16* %160, i64 10
  store i16 %126, i16* %170, align 2
  %171 = getelementptr inbounds i16, i16* %160, i64 11
  store i16 %126, i16* %171, align 2
  %172 = getelementptr inbounds i16, i16* %160, i64 12
  store i16 %126, i16* %172, align 2
  %173 = getelementptr inbounds i16, i16* %160, i64 13
  store i16 %126, i16* %173, align 2
  %174 = getelementptr inbounds i16, i16* %160, i64 14
  store i16 %126, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %160, i64 15
  store i16 %126, i16* %175, align 2
  %176 = getelementptr inbounds i16, i16* %160, i64 %125
  store i16 %126, i16* %176, align 2
  %177 = getelementptr inbounds i16, i16* %176, i64 1
  store i16 %126, i16* %177, align 2
  %178 = getelementptr inbounds i16, i16* %176, i64 2
  store i16 %126, i16* %178, align 2
  %179 = getelementptr inbounds i16, i16* %176, i64 3
  store i16 %126, i16* %179, align 2
  %180 = getelementptr inbounds i16, i16* %176, i64 4
  store i16 %126, i16* %180, align 2
  %181 = getelementptr inbounds i16, i16* %176, i64 5
  store i16 %126, i16* %181, align 2
  %182 = getelementptr inbounds i16, i16* %176, i64 6
  store i16 %126, i16* %182, align 2
  %183 = getelementptr inbounds i16, i16* %176, i64 7
  store i16 %126, i16* %183, align 2
  %184 = getelementptr inbounds i16, i16* %176, i64 8
  store i16 %126, i16* %184, align 2
  %185 = getelementptr inbounds i16, i16* %176, i64 9
  store i16 %126, i16* %185, align 2
  %186 = getelementptr inbounds i16, i16* %176, i64 10
  store i16 %126, i16* %186, align 2
  %187 = getelementptr inbounds i16, i16* %176, i64 11
  store i16 %126, i16* %187, align 2
  %188 = getelementptr inbounds i16, i16* %176, i64 12
  store i16 %126, i16* %188, align 2
  %189 = getelementptr inbounds i16, i16* %176, i64 13
  store i16 %126, i16* %189, align 2
  %190 = getelementptr inbounds i16, i16* %176, i64 14
  store i16 %126, i16* %190, align 2
  %191 = getelementptr inbounds i16, i16* %176, i64 15
  store i16 %126, i16* %191, align 2
  %192 = getelementptr inbounds i16, i16* %176, i64 %125
  store i16 %126, i16* %192, align 2
  %193 = getelementptr inbounds i16, i16* %192, i64 1
  store i16 %126, i16* %193, align 2
  %194 = getelementptr inbounds i16, i16* %192, i64 2
  store i16 %126, i16* %194, align 2
  %195 = getelementptr inbounds i16, i16* %192, i64 3
  store i16 %126, i16* %195, align 2
  %196 = getelementptr inbounds i16, i16* %192, i64 4
  store i16 %126, i16* %196, align 2
  %197 = getelementptr inbounds i16, i16* %192, i64 5
  store i16 %126, i16* %197, align 2
  %198 = getelementptr inbounds i16, i16* %192, i64 6
  store i16 %126, i16* %198, align 2
  %199 = getelementptr inbounds i16, i16* %192, i64 7
  store i16 %126, i16* %199, align 2
  %200 = getelementptr inbounds i16, i16* %192, i64 8
  store i16 %126, i16* %200, align 2
  %201 = getelementptr inbounds i16, i16* %192, i64 9
  store i16 %126, i16* %201, align 2
  %202 = getelementptr inbounds i16, i16* %192, i64 10
  store i16 %126, i16* %202, align 2
  %203 = getelementptr inbounds i16, i16* %192, i64 11
  store i16 %126, i16* %203, align 2
  %204 = getelementptr inbounds i16, i16* %192, i64 12
  store i16 %126, i16* %204, align 2
  %205 = getelementptr inbounds i16, i16* %192, i64 13
  store i16 %126, i16* %205, align 2
  %206 = getelementptr inbounds i16, i16* %192, i64 14
  store i16 %126, i16* %206, align 2
  %207 = getelementptr inbounds i16, i16* %192, i64 15
  store i16 %126, i16* %207, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 32, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 32, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 32, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 32, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 32, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 32, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 32, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 32, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  %8 = load i16, i16* %5, align 2
  %9 = insertelement <8 x i16> undef, i16 %8, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %6, i64 %7
  %15 = getelementptr inbounds i8, i8* %3, i64 2
  %16 = bitcast i8* %15 to i16*
  %17 = load i16, i16* %16, align 2
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %14, i64 8
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %14, i64 %7
  %24 = getelementptr inbounds i8, i8* %3, i64 4
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = insertelement <8 x i16> undef, i16 %26, i32 0
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <8 x i32> zeroinitializer
  %29 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %23, i64 8
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %23, i64 %7
  %33 = getelementptr inbounds i8, i8* %3, i64 6
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 2
  %36 = insertelement <8 x i16> undef, i16 %35, i32 0
  %37 = shufflevector <8 x i16> %36, <8 x i16> undef, <8 x i32> zeroinitializer
  %38 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %32, i64 8
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds i16, i16* %32, i64 %7
  %42 = getelementptr inbounds i8, i8* %3, i64 8
  %43 = bitcast i8* %42 to i16*
  %44 = load i16, i16* %43, align 2
  store i16 %44, i16* %41, align 2
  %45 = getelementptr inbounds i16, i16* %41, i64 1
  store i16 %44, i16* %45, align 2
  %46 = getelementptr inbounds i16, i16* %41, i64 2
  store i16 %44, i16* %46, align 2
  %47 = getelementptr inbounds i16, i16* %41, i64 3
  store i16 %44, i16* %47, align 2
  %48 = getelementptr inbounds i16, i16* %41, i64 4
  store i16 %44, i16* %48, align 2
  %49 = getelementptr inbounds i16, i16* %41, i64 5
  store i16 %44, i16* %49, align 2
  %50 = getelementptr inbounds i16, i16* %41, i64 6
  store i16 %44, i16* %50, align 2
  %51 = getelementptr inbounds i16, i16* %41, i64 7
  store i16 %44, i16* %51, align 2
  %52 = getelementptr inbounds i16, i16* %41, i64 8
  store i16 %44, i16* %52, align 2
  %53 = getelementptr inbounds i16, i16* %41, i64 9
  store i16 %44, i16* %53, align 2
  %54 = getelementptr inbounds i16, i16* %41, i64 10
  store i16 %44, i16* %54, align 2
  %55 = getelementptr inbounds i16, i16* %41, i64 11
  store i16 %44, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %41, i64 12
  store i16 %44, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %41, i64 13
  store i16 %44, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %41, i64 14
  store i16 %44, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %41, i64 15
  store i16 %44, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %41, i64 %7
  %61 = getelementptr inbounds i8, i8* %3, i64 10
  %62 = bitcast i8* %61 to i16*
  %63 = load i16, i16* %62, align 2
  store i16 %63, i16* %60, align 2
  %64 = getelementptr inbounds i16, i16* %60, i64 1
  store i16 %63, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %60, i64 2
  store i16 %63, i16* %65, align 2
  %66 = getelementptr inbounds i16, i16* %60, i64 3
  store i16 %63, i16* %66, align 2
  %67 = getelementptr inbounds i16, i16* %60, i64 4
  store i16 %63, i16* %67, align 2
  %68 = getelementptr inbounds i16, i16* %60, i64 5
  store i16 %63, i16* %68, align 2
  %69 = getelementptr inbounds i16, i16* %60, i64 6
  store i16 %63, i16* %69, align 2
  %70 = getelementptr inbounds i16, i16* %60, i64 7
  store i16 %63, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %60, i64 8
  store i16 %63, i16* %71, align 2
  %72 = getelementptr inbounds i16, i16* %60, i64 9
  store i16 %63, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %60, i64 10
  store i16 %63, i16* %73, align 2
  %74 = getelementptr inbounds i16, i16* %60, i64 11
  store i16 %63, i16* %74, align 2
  %75 = getelementptr inbounds i16, i16* %60, i64 12
  store i16 %63, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %60, i64 13
  store i16 %63, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %60, i64 14
  store i16 %63, i16* %77, align 2
  %78 = getelementptr inbounds i16, i16* %60, i64 15
  store i16 %63, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %60, i64 %7
  %80 = getelementptr inbounds i8, i8* %3, i64 12
  %81 = bitcast i8* %80 to i16*
  %82 = load i16, i16* %81, align 2
  store i16 %82, i16* %79, align 2
  %83 = getelementptr inbounds i16, i16* %79, i64 1
  store i16 %82, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %79, i64 2
  store i16 %82, i16* %84, align 2
  %85 = getelementptr inbounds i16, i16* %79, i64 3
  store i16 %82, i16* %85, align 2
  %86 = getelementptr inbounds i16, i16* %79, i64 4
  store i16 %82, i16* %86, align 2
  %87 = getelementptr inbounds i16, i16* %79, i64 5
  store i16 %82, i16* %87, align 2
  %88 = getelementptr inbounds i16, i16* %79, i64 6
  store i16 %82, i16* %88, align 2
  %89 = getelementptr inbounds i16, i16* %79, i64 7
  store i16 %82, i16* %89, align 2
  %90 = getelementptr inbounds i16, i16* %79, i64 8
  store i16 %82, i16* %90, align 2
  %91 = getelementptr inbounds i16, i16* %79, i64 9
  store i16 %82, i16* %91, align 2
  %92 = getelementptr inbounds i16, i16* %79, i64 10
  store i16 %82, i16* %92, align 2
  %93 = getelementptr inbounds i16, i16* %79, i64 11
  store i16 %82, i16* %93, align 2
  %94 = getelementptr inbounds i16, i16* %79, i64 12
  store i16 %82, i16* %94, align 2
  %95 = getelementptr inbounds i16, i16* %79, i64 13
  store i16 %82, i16* %95, align 2
  %96 = getelementptr inbounds i16, i16* %79, i64 14
  store i16 %82, i16* %96, align 2
  %97 = getelementptr inbounds i16, i16* %79, i64 15
  store i16 %82, i16* %97, align 2
  %98 = getelementptr inbounds i16, i16* %79, i64 %7
  %99 = getelementptr inbounds i8, i8* %3, i64 14
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  store i16 %101, i16* %98, align 2
  %102 = getelementptr inbounds i16, i16* %98, i64 1
  store i16 %101, i16* %102, align 2
  %103 = getelementptr inbounds i16, i16* %98, i64 2
  store i16 %101, i16* %103, align 2
  %104 = getelementptr inbounds i16, i16* %98, i64 3
  store i16 %101, i16* %104, align 2
  %105 = getelementptr inbounds i16, i16* %98, i64 4
  store i16 %101, i16* %105, align 2
  %106 = getelementptr inbounds i16, i16* %98, i64 5
  store i16 %101, i16* %106, align 2
  %107 = getelementptr inbounds i16, i16* %98, i64 6
  store i16 %101, i16* %107, align 2
  %108 = getelementptr inbounds i16, i16* %98, i64 7
  store i16 %101, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %98, i64 8
  store i16 %101, i16* %109, align 2
  %110 = getelementptr inbounds i16, i16* %98, i64 9
  store i16 %101, i16* %110, align 2
  %111 = getelementptr inbounds i16, i16* %98, i64 10
  store i16 %101, i16* %111, align 2
  %112 = getelementptr inbounds i16, i16* %98, i64 11
  store i16 %101, i16* %112, align 2
  %113 = getelementptr inbounds i16, i16* %98, i64 12
  store i16 %101, i16* %113, align 2
  %114 = getelementptr inbounds i16, i16* %98, i64 13
  store i16 %101, i16* %114, align 2
  %115 = getelementptr inbounds i16, i16* %98, i64 14
  store i16 %101, i16* %115, align 2
  %116 = getelementptr inbounds i16, i16* %98, i64 15
  store i16 %101, i16* %116, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 8
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 16
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 30
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 14
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 32
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  br label %26

26:                                               ; preds = %87, %4
  %27 = phi i64 [ 0, %4 ], [ %89, %87 ]
  %28 = phi i16* [ %13, %4 ], [ %88, %87 ]
  %29 = mul i64 %17, %27
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = add i64 %29, 32
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %27
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds i16, i16* %6, i64 %27
  %37 = sub i8 0, %34
  %38 = zext i8 %37 to i32
  %39 = mul nuw nsw i32 %38, %15
  %40 = add nuw nsw i32 %39, 256
  %41 = shl nuw nsw i64 %27, 1
  %42 = or i64 %41, 1
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = icmp ult i8* %30, %18
  %45 = icmp ugt i8* %32, %2
  %46 = and i1 %44, %45
  %47 = bitcast i16* %36 to i8*
  %48 = icmp ult i8* %30, %43
  %49 = icmp ugt i8* %32, %47
  %50 = and i1 %48, %49
  %51 = or i1 %46, %50
  br i1 %51, label %91, label %52

52:                                               ; preds = %26
  %53 = insertelement <8 x i32> undef, i32 %35, i32 0
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> zeroinitializer
  %55 = insertelement <8 x i32> undef, i32 %40, i32 0
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> zeroinitializer
  %57 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !519
  %58 = zext <8 x i16> %57 to <8 x i32>
  %59 = mul nuw nsw <8 x i32> %54, %58
  %60 = load i16, i16* %36, align 2, !alias.scope !522
  %61 = insertelement <8 x i16> undef, i16 %60, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %63, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %65 = add nuw nsw <8 x i32> %56, %59
  %66 = add nuw nsw <8 x i32> %65, %22
  %67 = add nuw nsw <8 x i32> %66, %64
  %68 = lshr <8 x i32> %67, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2, !alias.scope !524, !noalias !526
  %71 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !519
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = mul nuw nsw <8 x i32> %54, %72
  %74 = load i16, i16* %36, align 2, !alias.scope !522
  %75 = insertelement <8 x i16> undef, i16 %74, i32 0
  %76 = shufflevector <8 x i16> %75, <8 x i16> undef, <8 x i32> zeroinitializer
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %77, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %79 = add nuw nsw <8 x i32> %56, %73
  %80 = add nuw nsw <8 x i32> %79, %25
  %81 = add nuw nsw <8 x i32> %80, %78
  %82 = lshr <8 x i32> %81, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %83 = trunc <8 x i32> %82 to <8 x i16>
  %84 = getelementptr inbounds i16, i16* %28, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %85, align 2, !alias.scope !524, !noalias !526
  br label %87

86:                                               ; preds = %87
  ret void

87:                                               ; preds = %91, %52
  %88 = getelementptr inbounds i16, i16* %28, i64 %14
  %89 = add nuw nsw i64 %27, 1
  %90 = icmp eq i64 %89, 8
  br i1 %90, label %86, label %26

91:                                               ; preds = %26, %91
  %92 = phi i64 [ %112, %91 ], [ 0, %26 ]
  %93 = getelementptr inbounds i16, i16* %5, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %95, %35
  %97 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %92
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = load i16, i16* %36, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %101, %99
  %103 = sub i8 0, %98
  %104 = zext i8 %103 to i32
  %105 = mul nuw nsw i32 %104, %16
  %106 = add nuw nsw i32 %40, %96
  %107 = add nuw nsw i32 %106, %105
  %108 = add nuw nsw i32 %107, %102
  %109 = lshr i32 %108, 9
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 %92
  store i16 %110, i16* %111, align 2
  %112 = add nuw nsw i64 %92, 1
  %113 = icmp eq i64 %112, 16
  br i1 %113, label %87, label %91, !llvm.loop !527
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 14
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %2, i64 10
  %21 = bitcast i8* %20 to i16*
  %22 = getelementptr inbounds i8, i8* %2, i64 12
  %23 = bitcast i8* %22 to i16*
  %24 = getelementptr inbounds i8, i8* %2, i64 14
  %25 = bitcast i8* %24 to i16*
  %26 = getelementptr inbounds i8, i8* %2, i64 16
  %27 = bitcast i8* %26 to i16*
  %28 = getelementptr inbounds i8, i8* %2, i64 18
  %29 = bitcast i8* %28 to i16*
  %30 = getelementptr inbounds i8, i8* %2, i64 20
  %31 = bitcast i8* %30 to i16*
  %32 = getelementptr inbounds i8, i8* %2, i64 22
  %33 = bitcast i8* %32 to i16*
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to i16*
  %36 = getelementptr inbounds i8, i8* %2, i64 26
  %37 = bitcast i8* %36 to i16*
  %38 = getelementptr inbounds i8, i8* %2, i64 28
  %39 = bitcast i8* %38 to i16*
  %40 = getelementptr inbounds i8, i8* %2, i64 30
  %41 = bitcast i8* %40 to i16*
  br label %42

42:                                               ; preds = %42, %4
  %43 = phi i64 [ 0, %4 ], [ %164, %42 ]
  %44 = phi i16* [ %9, %4 ], [ %163, %42 ]
  %45 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %43
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub i8 0, %46
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, %11
  %51 = add nuw nsw i32 %50, 128
  %52 = load i16, i16* %5, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, %47
  %55 = add nuw nsw i32 %51, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %44, align 2
  %58 = load i16, i16* %13, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, %47
  %61 = add nuw nsw i32 %51, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %44, i64 1
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %15, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, %47
  %68 = add nuw nsw i32 %51, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %44, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %17, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %47
  %75 = add nuw nsw i32 %51, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %44, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %19, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %80, %47
  %82 = add nuw nsw i32 %51, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %44, i64 4
  store i16 %84, i16* %85, align 2
  %86 = load i16, i16* %21, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %87, %47
  %89 = add nuw nsw i32 %51, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i16
  %92 = getelementptr inbounds i16, i16* %44, i64 5
  store i16 %91, i16* %92, align 2
  %93 = load i16, i16* %23, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %94, %47
  %96 = add nuw nsw i32 %51, %95
  %97 = lshr i32 %96, 8
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %44, i64 6
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %25, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %101, %47
  %103 = add nuw nsw i32 %51, %102
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i16
  %106 = getelementptr inbounds i16, i16* %44, i64 7
  store i16 %105, i16* %106, align 2
  %107 = load i16, i16* %27, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %108, %47
  %110 = add nuw nsw i32 %51, %109
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds i16, i16* %44, i64 8
  store i16 %112, i16* %113, align 2
  %114 = load i16, i16* %29, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %115, %47
  %117 = add nuw nsw i32 %51, %116
  %118 = lshr i32 %117, 8
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %44, i64 9
  store i16 %119, i16* %120, align 2
  %121 = load i16, i16* %31, align 2
  %122 = zext i16 %121 to i32
  %123 = mul nuw nsw i32 %122, %47
  %124 = add nuw nsw i32 %51, %123
  %125 = lshr i32 %124, 8
  %126 = trunc i32 %125 to i16
  %127 = getelementptr inbounds i16, i16* %44, i64 10
  store i16 %126, i16* %127, align 2
  %128 = load i16, i16* %33, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %129, %47
  %131 = add nuw nsw i32 %51, %130
  %132 = lshr i32 %131, 8
  %133 = trunc i32 %132 to i16
  %134 = getelementptr inbounds i16, i16* %44, i64 11
  store i16 %133, i16* %134, align 2
  %135 = load i16, i16* %35, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %136, %47
  %138 = add nuw nsw i32 %51, %137
  %139 = lshr i32 %138, 8
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds i16, i16* %44, i64 12
  store i16 %140, i16* %141, align 2
  %142 = load i16, i16* %37, align 2
  %143 = zext i16 %142 to i32
  %144 = mul nuw nsw i32 %143, %47
  %145 = add nuw nsw i32 %51, %144
  %146 = lshr i32 %145, 8
  %147 = trunc i32 %146 to i16
  %148 = getelementptr inbounds i16, i16* %44, i64 13
  store i16 %147, i16* %148, align 2
  %149 = load i16, i16* %39, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %150, %47
  %152 = add nuw nsw i32 %51, %151
  %153 = lshr i32 %152, 8
  %154 = trunc i32 %153 to i16
  %155 = getelementptr inbounds i16, i16* %44, i64 14
  store i16 %154, i16* %155, align 2
  %156 = load i16, i16* %41, align 2
  %157 = zext i16 %156 to i32
  %158 = mul nuw nsw i32 %157, %47
  %159 = add nuw nsw i32 %51, %158
  %160 = lshr i32 %159, 8
  %161 = trunc i32 %160 to i16
  %162 = getelementptr inbounds i16, i16* %44, i64 15
  store i16 %161, i16* %162, align 2
  %163 = getelementptr inbounds i16, i16* %44, i64 %10
  %164 = add nuw nsw i64 %43, 1
  %165 = icmp eq i64 %164, 8
  br i1 %165, label %166, label %42

166:                                              ; preds = %42
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi8EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr i8, i8* %0, i64 32
  %13 = getelementptr i8, i8* %3, i64 1
  %14 = icmp ugt i8* %13, %0
  %15 = icmp ugt i8* %12, %3
  %16 = and i1 %14, %15
  br i1 %16, label %81, label %17

17:                                               ; preds = %4
  %18 = insertelement <8 x i32> undef, i32 %11, i32 0
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> zeroinitializer
  %20 = load i16, i16* %5, align 2, !alias.scope !528
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = zext <8 x i16> %22 to <8 x i32>
  %24 = mul nuw nsw <8 x i32> %23, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %25 = mul nuw nsw <8 x i32> %19, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %26 = add nuw nsw <8 x i32> %25, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %27 = add nuw nsw <8 x i32> %26, %24
  %28 = lshr <8 x i32> %27, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %29 = trunc <8 x i32> %28 to <8 x i16>
  %30 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2, !alias.scope !531, !noalias !528
  %31 = load i16, i16* %5, align 2, !alias.scope !528
  %32 = insertelement <8 x i16> undef, i16 %31, i32 0
  %33 = shufflevector <8 x i16> %32, <8 x i16> undef, <8 x i32> zeroinitializer
  %34 = zext <8 x i16> %33 to <8 x i32>
  %35 = mul nuw nsw <8 x i32> %34, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %36 = mul nuw nsw <8 x i32> %19, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %37 = add nuw nsw <8 x i32> %36, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %38 = add nuw nsw <8 x i32> %37, %35
  %39 = lshr <8 x i32> %38, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %40 = trunc <8 x i32> %39 to <8 x i16>
  %41 = getelementptr inbounds i8, i8* %0, i64 16
  %42 = bitcast i8* %41 to <8 x i16>*
  store <8 x i16> %40, <8 x i16>* %42, align 2, !alias.scope !531, !noalias !528
  br label %43

43:                                               ; preds = %81, %17
  %44 = getelementptr inbounds i16, i16* %9, i64 %10
  %45 = getelementptr inbounds i8, i8* %3, i64 2
  %46 = bitcast i8* %45 to i16*
  %47 = and i64 %1, -2
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = add i64 %47, 32
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = getelementptr i8, i8* %3, i64 3
  %52 = icmp ult i8* %48, %51
  %53 = icmp ult i8* %45, %50
  %54 = and i1 %52, %53
  br i1 %54, label %114, label %55

55:                                               ; preds = %43
  %56 = insertelement <8 x i32> undef, i32 %11, i32 0
  %57 = shufflevector <8 x i32> %56, <8 x i32> undef, <8 x i32> zeroinitializer
  %58 = load i16, i16* %46, align 2, !alias.scope !533
  %59 = insertelement <8 x i16> undef, i16 %58, i32 0
  %60 = shufflevector <8 x i16> %59, <8 x i16> undef, <8 x i32> zeroinitializer
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %61, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %63 = mul nuw nsw <8 x i32> %57, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %64 = add nuw nsw <8 x i32> %63, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %65 = add nuw nsw <8 x i32> %64, %62
  %66 = lshr <8 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %67 = trunc <8 x i32> %66 to <8 x i16>
  %68 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 2, !alias.scope !536, !noalias !533
  %69 = load i16, i16* %46, align 2, !alias.scope !533
  %70 = insertelement <8 x i16> undef, i16 %69, i32 0
  %71 = shufflevector <8 x i16> %70, <8 x i16> undef, <8 x i32> zeroinitializer
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = mul nuw nsw <8 x i32> %72, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %74 = mul nuw nsw <8 x i32> %57, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %75 = add nuw nsw <8 x i32> %74, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %76 = add nuw nsw <8 x i32> %75, %73
  %77 = lshr <8 x i32> %76, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %78 = trunc <8 x i32> %77 to <8 x i16>
  %79 = getelementptr inbounds i16, i16* %44, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %80, align 2, !alias.scope !536, !noalias !533
  br label %147

81:                                               ; preds = %4, %81
  %82 = phi i64 [ %112, %81 ], [ 0, %4 ]
  %83 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %82
  %84 = load i8, i8* %83, align 2
  %85 = zext i8 %84 to i32
  %86 = load i16, i16* %5, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %87, %85
  %89 = sub i8 0, %84
  %90 = zext i8 %89 to i32
  %91 = mul nuw nsw i32 %90, %11
  %92 = add nuw nsw i32 %91, 128
  %93 = add nuw nsw i32 %92, %88
  %94 = lshr i32 %93, 8
  %95 = trunc i32 %94 to i16
  %96 = getelementptr inbounds i16, i16* %9, i64 %82
  store i16 %95, i16* %96, align 2
  %97 = or i64 %82, 1
  %98 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = load i16, i16* %5, align 2
  %102 = zext i16 %101 to i32
  %103 = mul nuw nsw i32 %102, %100
  %104 = sub i8 0, %99
  %105 = zext i8 %104 to i32
  %106 = mul nuw nsw i32 %105, %11
  %107 = add nuw nsw i32 %106, 128
  %108 = add nuw nsw i32 %107, %103
  %109 = lshr i32 %108, 8
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %9, i64 %97
  store i16 %110, i16* %111, align 2
  %112 = add nuw nsw i64 %82, 2
  %113 = icmp eq i64 %112, 16
  br i1 %113, label %43, label %81, !llvm.loop !538

114:                                              ; preds = %43, %114
  %115 = phi i64 [ %145, %114 ], [ 0, %43 ]
  %116 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %115
  %117 = load i8, i8* %116, align 2
  %118 = zext i8 %117 to i32
  %119 = load i16, i16* %46, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %120, %118
  %122 = sub i8 0, %117
  %123 = zext i8 %122 to i32
  %124 = mul nuw nsw i32 %123, %11
  %125 = add nuw nsw i32 %124, 128
  %126 = add nuw nsw i32 %125, %121
  %127 = lshr i32 %126, 8
  %128 = trunc i32 %127 to i16
  %129 = getelementptr inbounds i16, i16* %44, i64 %115
  store i16 %128, i16* %129, align 2
  %130 = or i64 %115, 1
  %131 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = load i16, i16* %46, align 2
  %135 = zext i16 %134 to i32
  %136 = mul nuw nsw i32 %135, %133
  %137 = sub i8 0, %132
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, %11
  %140 = add nuw nsw i32 %139, 128
  %141 = add nuw nsw i32 %140, %136
  %142 = lshr i32 %141, 8
  %143 = trunc i32 %142 to i16
  %144 = getelementptr inbounds i16, i16* %44, i64 %130
  store i16 %143, i16* %144, align 2
  %145 = add nuw nsw i64 %115, 2
  %146 = icmp eq i64 %145, 16
  br i1 %146, label %147, label %114, !llvm.loop !539

147:                                              ; preds = %114, %55
  %148 = getelementptr inbounds i16, i16* %44, i64 %10
  %149 = getelementptr inbounds i8, i8* %3, i64 4
  %150 = bitcast i8* %149 to i16*
  %151 = shl i64 %10, 2
  %152 = getelementptr i8, i8* %0, i64 %151
  %153 = add i64 %151, 32
  %154 = getelementptr i8, i8* %0, i64 %153
  %155 = getelementptr i8, i8* %3, i64 5
  %156 = icmp ult i8* %152, %155
  %157 = icmp ult i8* %149, %154
  %158 = and i1 %156, %157
  br i1 %158, label %185, label %159

159:                                              ; preds = %147
  %160 = insertelement <8 x i32> undef, i32 %11, i32 0
  %161 = shufflevector <8 x i32> %160, <8 x i32> undef, <8 x i32> zeroinitializer
  %162 = load i16, i16* %150, align 2, !alias.scope !540
  %163 = insertelement <8 x i16> undef, i16 %162, i32 0
  %164 = shufflevector <8 x i16> %163, <8 x i16> undef, <8 x i32> zeroinitializer
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %165, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %167 = mul nuw nsw <8 x i32> %161, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %168 = add nuw nsw <8 x i32> %167, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %169 = add nuw nsw <8 x i32> %168, %166
  %170 = lshr <8 x i32> %169, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %171 = trunc <8 x i32> %170 to <8 x i16>
  %172 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2, !alias.scope !543, !noalias !540
  %173 = load i16, i16* %150, align 2, !alias.scope !540
  %174 = insertelement <8 x i16> undef, i16 %173, i32 0
  %175 = shufflevector <8 x i16> %174, <8 x i16> undef, <8 x i32> zeroinitializer
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %176, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %178 = mul nuw nsw <8 x i32> %161, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %179 = add nuw nsw <8 x i32> %178, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %180 = add nuw nsw <8 x i32> %179, %177
  %181 = lshr <8 x i32> %180, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %182 = trunc <8 x i32> %181 to <8 x i16>
  %183 = getelementptr inbounds i16, i16* %148, i64 8
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %184, align 2, !alias.scope !543, !noalias !540
  br label %218

185:                                              ; preds = %147, %185
  %186 = phi i64 [ %216, %185 ], [ 0, %147 ]
  %187 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %186
  %188 = load i8, i8* %187, align 2
  %189 = zext i8 %188 to i32
  %190 = load i16, i16* %150, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %191, %189
  %193 = sub i8 0, %188
  %194 = zext i8 %193 to i32
  %195 = mul nuw nsw i32 %194, %11
  %196 = add nuw nsw i32 %195, 128
  %197 = add nuw nsw i32 %196, %192
  %198 = lshr i32 %197, 8
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %148, i64 %186
  store i16 %199, i16* %200, align 2
  %201 = or i64 %186, 1
  %202 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = load i16, i16* %150, align 2
  %206 = zext i16 %205 to i32
  %207 = mul nuw nsw i32 %206, %204
  %208 = sub i8 0, %203
  %209 = zext i8 %208 to i32
  %210 = mul nuw nsw i32 %209, %11
  %211 = add nuw nsw i32 %210, 128
  %212 = add nuw nsw i32 %211, %207
  %213 = lshr i32 %212, 8
  %214 = trunc i32 %213 to i16
  %215 = getelementptr inbounds i16, i16* %148, i64 %201
  store i16 %214, i16* %215, align 2
  %216 = add nuw nsw i64 %186, 2
  %217 = icmp eq i64 %216, 16
  br i1 %217, label %218, label %185, !llvm.loop !545

218:                                              ; preds = %185, %159
  %219 = getelementptr inbounds i16, i16* %148, i64 %10
  %220 = getelementptr inbounds i8, i8* %3, i64 6
  %221 = bitcast i8* %220 to i16*
  %222 = mul i64 %10, 6
  %223 = getelementptr i8, i8* %0, i64 %222
  %224 = add i64 %222, 32
  %225 = getelementptr i8, i8* %0, i64 %224
  %226 = getelementptr i8, i8* %3, i64 7
  %227 = icmp ult i8* %223, %226
  %228 = icmp ult i8* %220, %225
  %229 = and i1 %227, %228
  br i1 %229, label %256, label %230

230:                                              ; preds = %218
  %231 = insertelement <8 x i32> undef, i32 %11, i32 0
  %232 = shufflevector <8 x i32> %231, <8 x i32> undef, <8 x i32> zeroinitializer
  %233 = load i16, i16* %221, align 2, !alias.scope !546
  %234 = insertelement <8 x i16> undef, i16 %233, i32 0
  %235 = shufflevector <8 x i16> %234, <8 x i16> undef, <8 x i32> zeroinitializer
  %236 = zext <8 x i16> %235 to <8 x i32>
  %237 = mul nuw nsw <8 x i32> %236, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %238 = mul nuw nsw <8 x i32> %232, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %239 = add nuw nsw <8 x i32> %238, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %240 = add nuw nsw <8 x i32> %239, %237
  %241 = lshr <8 x i32> %240, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %242 = trunc <8 x i32> %241 to <8 x i16>
  %243 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %243, align 2, !alias.scope !549, !noalias !546
  %244 = load i16, i16* %221, align 2, !alias.scope !546
  %245 = insertelement <8 x i16> undef, i16 %244, i32 0
  %246 = shufflevector <8 x i16> %245, <8 x i16> undef, <8 x i32> zeroinitializer
  %247 = zext <8 x i16> %246 to <8 x i32>
  %248 = mul nuw nsw <8 x i32> %247, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %249 = mul nuw nsw <8 x i32> %232, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %250 = add nuw nsw <8 x i32> %249, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %251 = add nuw nsw <8 x i32> %250, %248
  %252 = lshr <8 x i32> %251, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %253 = trunc <8 x i32> %252 to <8 x i16>
  %254 = getelementptr inbounds i16, i16* %219, i64 8
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %255, align 2, !alias.scope !549, !noalias !546
  br label %289

256:                                              ; preds = %218, %256
  %257 = phi i64 [ %287, %256 ], [ 0, %218 ]
  %258 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %257
  %259 = load i8, i8* %258, align 2
  %260 = zext i8 %259 to i32
  %261 = load i16, i16* %221, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nuw nsw i32 %262, %260
  %264 = sub i8 0, %259
  %265 = zext i8 %264 to i32
  %266 = mul nuw nsw i32 %265, %11
  %267 = add nuw nsw i32 %266, 128
  %268 = add nuw nsw i32 %267, %263
  %269 = lshr i32 %268, 8
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %219, i64 %257
  store i16 %270, i16* %271, align 2
  %272 = or i64 %257, 1
  %273 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %272
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  %276 = load i16, i16* %221, align 2
  %277 = zext i16 %276 to i32
  %278 = mul nuw nsw i32 %277, %275
  %279 = sub i8 0, %274
  %280 = zext i8 %279 to i32
  %281 = mul nuw nsw i32 %280, %11
  %282 = add nuw nsw i32 %281, 128
  %283 = add nuw nsw i32 %282, %278
  %284 = lshr i32 %283, 8
  %285 = trunc i32 %284 to i16
  %286 = getelementptr inbounds i16, i16* %219, i64 %272
  store i16 %285, i16* %286, align 2
  %287 = add nuw nsw i64 %257, 2
  %288 = icmp eq i64 %287, 16
  br i1 %288, label %289, label %256, !llvm.loop !551

289:                                              ; preds = %256, %230
  %290 = getelementptr inbounds i16, i16* %219, i64 %10
  %291 = getelementptr inbounds i8, i8* %3, i64 8
  %292 = bitcast i8* %291 to i16*
  %293 = shl i64 %10, 3
  %294 = getelementptr i8, i8* %0, i64 %293
  %295 = add i64 %293, 32
  %296 = getelementptr i8, i8* %0, i64 %295
  %297 = getelementptr i8, i8* %3, i64 9
  %298 = icmp ult i8* %294, %297
  %299 = icmp ult i8* %291, %296
  %300 = and i1 %298, %299
  br i1 %300, label %327, label %301

301:                                              ; preds = %289
  %302 = insertelement <8 x i32> undef, i32 %11, i32 0
  %303 = shufflevector <8 x i32> %302, <8 x i32> undef, <8 x i32> zeroinitializer
  %304 = load i16, i16* %292, align 2, !alias.scope !552
  %305 = insertelement <8 x i16> undef, i16 %304, i32 0
  %306 = shufflevector <8 x i16> %305, <8 x i16> undef, <8 x i32> zeroinitializer
  %307 = zext <8 x i16> %306 to <8 x i32>
  %308 = mul nuw nsw <8 x i32> %307, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %309 = mul nuw nsw <8 x i32> %303, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %310 = add nuw nsw <8 x i32> %309, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %311 = add nuw nsw <8 x i32> %310, %308
  %312 = lshr <8 x i32> %311, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %313 = trunc <8 x i32> %312 to <8 x i16>
  %314 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %314, align 2, !alias.scope !555, !noalias !552
  %315 = load i16, i16* %292, align 2, !alias.scope !552
  %316 = insertelement <8 x i16> undef, i16 %315, i32 0
  %317 = shufflevector <8 x i16> %316, <8 x i16> undef, <8 x i32> zeroinitializer
  %318 = zext <8 x i16> %317 to <8 x i32>
  %319 = mul nuw nsw <8 x i32> %318, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %320 = mul nuw nsw <8 x i32> %303, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %321 = add nuw nsw <8 x i32> %320, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %322 = add nuw nsw <8 x i32> %321, %319
  %323 = lshr <8 x i32> %322, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %324 = trunc <8 x i32> %323 to <8 x i16>
  %325 = getelementptr inbounds i16, i16* %290, i64 8
  %326 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %324, <8 x i16>* %326, align 2, !alias.scope !555, !noalias !552
  br label %360

327:                                              ; preds = %289, %327
  %328 = phi i64 [ %358, %327 ], [ 0, %289 ]
  %329 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %328
  %330 = load i8, i8* %329, align 2
  %331 = zext i8 %330 to i32
  %332 = load i16, i16* %292, align 2
  %333 = zext i16 %332 to i32
  %334 = mul nuw nsw i32 %333, %331
  %335 = sub i8 0, %330
  %336 = zext i8 %335 to i32
  %337 = mul nuw nsw i32 %336, %11
  %338 = add nuw nsw i32 %337, 128
  %339 = add nuw nsw i32 %338, %334
  %340 = lshr i32 %339, 8
  %341 = trunc i32 %340 to i16
  %342 = getelementptr inbounds i16, i16* %290, i64 %328
  store i16 %341, i16* %342, align 2
  %343 = or i64 %328, 1
  %344 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %343
  %345 = load i8, i8* %344, align 1
  %346 = zext i8 %345 to i32
  %347 = load i16, i16* %292, align 2
  %348 = zext i16 %347 to i32
  %349 = mul nuw nsw i32 %348, %346
  %350 = sub i8 0, %345
  %351 = zext i8 %350 to i32
  %352 = mul nuw nsw i32 %351, %11
  %353 = add nuw nsw i32 %352, 128
  %354 = add nuw nsw i32 %353, %349
  %355 = lshr i32 %354, 8
  %356 = trunc i32 %355 to i16
  %357 = getelementptr inbounds i16, i16* %290, i64 %343
  store i16 %356, i16* %357, align 2
  %358 = add nuw nsw i64 %328, 2
  %359 = icmp eq i64 %358, 16
  br i1 %359, label %360, label %327, !llvm.loop !557

360:                                              ; preds = %327, %301
  %361 = getelementptr inbounds i16, i16* %290, i64 %10
  %362 = getelementptr inbounds i8, i8* %3, i64 10
  %363 = bitcast i8* %362 to i16*
  %364 = mul i64 %10, 10
  %365 = getelementptr i8, i8* %0, i64 %364
  %366 = add i64 %364, 32
  %367 = getelementptr i8, i8* %0, i64 %366
  %368 = getelementptr i8, i8* %3, i64 11
  %369 = icmp ult i8* %365, %368
  %370 = icmp ult i8* %362, %367
  %371 = and i1 %369, %370
  br i1 %371, label %398, label %372

372:                                              ; preds = %360
  %373 = insertelement <8 x i32> undef, i32 %11, i32 0
  %374 = shufflevector <8 x i32> %373, <8 x i32> undef, <8 x i32> zeroinitializer
  %375 = load i16, i16* %363, align 2, !alias.scope !558
  %376 = insertelement <8 x i16> undef, i16 %375, i32 0
  %377 = shufflevector <8 x i16> %376, <8 x i16> undef, <8 x i32> zeroinitializer
  %378 = zext <8 x i16> %377 to <8 x i32>
  %379 = mul nuw nsw <8 x i32> %378, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %380 = mul nuw nsw <8 x i32> %374, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %381 = add nuw nsw <8 x i32> %380, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %382 = add nuw nsw <8 x i32> %381, %379
  %383 = lshr <8 x i32> %382, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %384 = trunc <8 x i32> %383 to <8 x i16>
  %385 = bitcast i16* %361 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %385, align 2, !alias.scope !561, !noalias !558
  %386 = load i16, i16* %363, align 2, !alias.scope !558
  %387 = insertelement <8 x i16> undef, i16 %386, i32 0
  %388 = shufflevector <8 x i16> %387, <8 x i16> undef, <8 x i32> zeroinitializer
  %389 = zext <8 x i16> %388 to <8 x i32>
  %390 = mul nuw nsw <8 x i32> %389, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %391 = mul nuw nsw <8 x i32> %374, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %392 = add nuw nsw <8 x i32> %391, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %393 = add nuw nsw <8 x i32> %392, %390
  %394 = lshr <8 x i32> %393, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %395 = trunc <8 x i32> %394 to <8 x i16>
  %396 = getelementptr inbounds i16, i16* %361, i64 8
  %397 = bitcast i16* %396 to <8 x i16>*
  store <8 x i16> %395, <8 x i16>* %397, align 2, !alias.scope !561, !noalias !558
  br label %431

398:                                              ; preds = %360, %398
  %399 = phi i64 [ %429, %398 ], [ 0, %360 ]
  %400 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %399
  %401 = load i8, i8* %400, align 2
  %402 = zext i8 %401 to i32
  %403 = load i16, i16* %363, align 2
  %404 = zext i16 %403 to i32
  %405 = mul nuw nsw i32 %404, %402
  %406 = sub i8 0, %401
  %407 = zext i8 %406 to i32
  %408 = mul nuw nsw i32 %407, %11
  %409 = add nuw nsw i32 %408, 128
  %410 = add nuw nsw i32 %409, %405
  %411 = lshr i32 %410, 8
  %412 = trunc i32 %411 to i16
  %413 = getelementptr inbounds i16, i16* %361, i64 %399
  store i16 %412, i16* %413, align 2
  %414 = or i64 %399, 1
  %415 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %414
  %416 = load i8, i8* %415, align 1
  %417 = zext i8 %416 to i32
  %418 = load i16, i16* %363, align 2
  %419 = zext i16 %418 to i32
  %420 = mul nuw nsw i32 %419, %417
  %421 = sub i8 0, %416
  %422 = zext i8 %421 to i32
  %423 = mul nuw nsw i32 %422, %11
  %424 = add nuw nsw i32 %423, 128
  %425 = add nuw nsw i32 %424, %420
  %426 = lshr i32 %425, 8
  %427 = trunc i32 %426 to i16
  %428 = getelementptr inbounds i16, i16* %361, i64 %414
  store i16 %427, i16* %428, align 2
  %429 = add nuw nsw i64 %399, 2
  %430 = icmp eq i64 %429, 16
  br i1 %430, label %431, label %398, !llvm.loop !563

431:                                              ; preds = %398, %372
  %432 = getelementptr inbounds i16, i16* %361, i64 %10
  %433 = getelementptr inbounds i8, i8* %3, i64 12
  %434 = bitcast i8* %433 to i16*
  %435 = mul i64 %10, 12
  %436 = getelementptr i8, i8* %0, i64 %435
  %437 = add i64 %435, 32
  %438 = getelementptr i8, i8* %0, i64 %437
  %439 = getelementptr i8, i8* %3, i64 13
  %440 = icmp ult i8* %436, %439
  %441 = icmp ult i8* %433, %438
  %442 = and i1 %440, %441
  br i1 %442, label %469, label %443

443:                                              ; preds = %431
  %444 = insertelement <8 x i32> undef, i32 %11, i32 0
  %445 = shufflevector <8 x i32> %444, <8 x i32> undef, <8 x i32> zeroinitializer
  %446 = load i16, i16* %434, align 2, !alias.scope !564
  %447 = insertelement <8 x i16> undef, i16 %446, i32 0
  %448 = shufflevector <8 x i16> %447, <8 x i16> undef, <8 x i32> zeroinitializer
  %449 = zext <8 x i16> %448 to <8 x i32>
  %450 = mul nuw nsw <8 x i32> %449, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %451 = mul nuw nsw <8 x i32> %445, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %452 = add nuw nsw <8 x i32> %451, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %453 = add nuw nsw <8 x i32> %452, %450
  %454 = lshr <8 x i32> %453, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %455 = trunc <8 x i32> %454 to <8 x i16>
  %456 = bitcast i16* %432 to <8 x i16>*
  store <8 x i16> %455, <8 x i16>* %456, align 2, !alias.scope !567, !noalias !564
  %457 = load i16, i16* %434, align 2, !alias.scope !564
  %458 = insertelement <8 x i16> undef, i16 %457, i32 0
  %459 = shufflevector <8 x i16> %458, <8 x i16> undef, <8 x i32> zeroinitializer
  %460 = zext <8 x i16> %459 to <8 x i32>
  %461 = mul nuw nsw <8 x i32> %460, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %462 = mul nuw nsw <8 x i32> %445, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %463 = add nuw nsw <8 x i32> %462, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %464 = add nuw nsw <8 x i32> %463, %461
  %465 = lshr <8 x i32> %464, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %466 = trunc <8 x i32> %465 to <8 x i16>
  %467 = getelementptr inbounds i16, i16* %432, i64 8
  %468 = bitcast i16* %467 to <8 x i16>*
  store <8 x i16> %466, <8 x i16>* %468, align 2, !alias.scope !567, !noalias !564
  br label %502

469:                                              ; preds = %431, %469
  %470 = phi i64 [ %500, %469 ], [ 0, %431 ]
  %471 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %470
  %472 = load i8, i8* %471, align 2
  %473 = zext i8 %472 to i32
  %474 = load i16, i16* %434, align 2
  %475 = zext i16 %474 to i32
  %476 = mul nuw nsw i32 %475, %473
  %477 = sub i8 0, %472
  %478 = zext i8 %477 to i32
  %479 = mul nuw nsw i32 %478, %11
  %480 = add nuw nsw i32 %479, 128
  %481 = add nuw nsw i32 %480, %476
  %482 = lshr i32 %481, 8
  %483 = trunc i32 %482 to i16
  %484 = getelementptr inbounds i16, i16* %432, i64 %470
  store i16 %483, i16* %484, align 2
  %485 = or i64 %470, 1
  %486 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %485
  %487 = load i8, i8* %486, align 1
  %488 = zext i8 %487 to i32
  %489 = load i16, i16* %434, align 2
  %490 = zext i16 %489 to i32
  %491 = mul nuw nsw i32 %490, %488
  %492 = sub i8 0, %487
  %493 = zext i8 %492 to i32
  %494 = mul nuw nsw i32 %493, %11
  %495 = add nuw nsw i32 %494, 128
  %496 = add nuw nsw i32 %495, %491
  %497 = lshr i32 %496, 8
  %498 = trunc i32 %497 to i16
  %499 = getelementptr inbounds i16, i16* %432, i64 %485
  store i16 %498, i16* %499, align 2
  %500 = add nuw nsw i64 %470, 2
  %501 = icmp eq i64 %500, 16
  br i1 %501, label %502, label %469, !llvm.loop !569

502:                                              ; preds = %469, %443
  %503 = getelementptr inbounds i16, i16* %432, i64 %10
  %504 = getelementptr inbounds i8, i8* %3, i64 14
  %505 = bitcast i8* %504 to i16*
  %506 = mul i64 %10, 14
  %507 = getelementptr i8, i8* %0, i64 %506
  %508 = add i64 %506, 32
  %509 = getelementptr i8, i8* %0, i64 %508
  %510 = getelementptr i8, i8* %3, i64 15
  %511 = icmp ult i8* %507, %510
  %512 = icmp ult i8* %504, %509
  %513 = and i1 %511, %512
  br i1 %513, label %540, label %514

514:                                              ; preds = %502
  %515 = insertelement <8 x i32> undef, i32 %11, i32 0
  %516 = shufflevector <8 x i32> %515, <8 x i32> undef, <8 x i32> zeroinitializer
  %517 = load i16, i16* %505, align 2, !alias.scope !570
  %518 = insertelement <8 x i16> undef, i16 %517, i32 0
  %519 = shufflevector <8 x i16> %518, <8 x i16> undef, <8 x i32> zeroinitializer
  %520 = zext <8 x i16> %519 to <8 x i32>
  %521 = mul nuw nsw <8 x i32> %520, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %522 = mul nuw nsw <8 x i32> %516, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %523 = add nuw nsw <8 x i32> %522, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %524 = add nuw nsw <8 x i32> %523, %521
  %525 = lshr <8 x i32> %524, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %526 = trunc <8 x i32> %525 to <8 x i16>
  %527 = bitcast i16* %503 to <8 x i16>*
  store <8 x i16> %526, <8 x i16>* %527, align 2, !alias.scope !573, !noalias !570
  %528 = load i16, i16* %505, align 2, !alias.scope !570
  %529 = insertelement <8 x i16> undef, i16 %528, i32 0
  %530 = shufflevector <8 x i16> %529, <8 x i16> undef, <8 x i32> zeroinitializer
  %531 = zext <8 x i16> %530 to <8 x i32>
  %532 = mul nuw nsw <8 x i32> %531, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %533 = mul nuw nsw <8 x i32> %516, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %534 = add nuw nsw <8 x i32> %533, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %535 = add nuw nsw <8 x i32> %534, %532
  %536 = lshr <8 x i32> %535, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %537 = trunc <8 x i32> %536 to <8 x i16>
  %538 = getelementptr inbounds i16, i16* %503, i64 8
  %539 = bitcast i16* %538 to <8 x i16>*
  store <8 x i16> %537, <8 x i16>* %539, align 2, !alias.scope !573, !noalias !570
  br label %573

540:                                              ; preds = %502, %540
  %541 = phi i64 [ %571, %540 ], [ 0, %502 ]
  %542 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %541
  %543 = load i8, i8* %542, align 2
  %544 = zext i8 %543 to i32
  %545 = load i16, i16* %505, align 2
  %546 = zext i16 %545 to i32
  %547 = mul nuw nsw i32 %546, %544
  %548 = sub i8 0, %543
  %549 = zext i8 %548 to i32
  %550 = mul nuw nsw i32 %549, %11
  %551 = add nuw nsw i32 %550, 128
  %552 = add nuw nsw i32 %551, %547
  %553 = lshr i32 %552, 8
  %554 = trunc i32 %553 to i16
  %555 = getelementptr inbounds i16, i16* %503, i64 %541
  store i16 %554, i16* %555, align 2
  %556 = or i64 %541, 1
  %557 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %556
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i32
  %560 = load i16, i16* %505, align 2
  %561 = zext i16 %560 to i32
  %562 = mul nuw nsw i32 %561, %559
  %563 = sub i8 0, %558
  %564 = zext i8 %563 to i32
  %565 = mul nuw nsw i32 %564, %11
  %566 = add nuw nsw i32 %565, 128
  %567 = add nuw nsw i32 %566, %562
  %568 = lshr i32 %567, 8
  %569 = trunc i32 %568 to i16
  %570 = getelementptr inbounds i16, i16* %503, i64 %556
  store i16 %569, i16* %570, align 2
  %571 = add nuw nsw i64 %541, 2
  %572 = icmp eq i64 %571, 16
  br i1 %572, label %573, label %540, !llvm.loop !575

573:                                              ; preds = %540, %514
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi16ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i16, i16* %6, i64 %5
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %10, i64 8
  %13 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %10, i64 %5
  %15 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i16, i16* %14, i64 8
  %17 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %14, i64 %5
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i16, i16* %18, i64 8
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds i16, i16* %18, i64 %5
  %23 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds i16, i16* %22, i64 8
  %25 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 %5
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds i16, i16* %26, i64 8
  %29 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %26, i64 %5
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %30, i64 8
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds i16, i16* %30, i64 %5
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds i16, i16* %34, i64 8
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %34, i64 %5
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 8
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 %5
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %42, i64 8
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %42, i64 %5
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i16, i16* %46, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds i16, i16* %46, i64 %5
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds i16, i16* %50, i64 8
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds i16, i16* %50, i64 %5
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds i16, i16* %54, i64 %5
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds i16, i16* %58, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds i16, i16* %58, i64 %5
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds i16, i16* %62, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 %5
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %66, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %69, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = lshr i64 %1, 1
  %86 = trunc i32 %84 to i16
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = insertelement <8 x i16> undef, i16 %86, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = bitcast i8* %0 to i16*
  %92 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i8, i8* %0, i64 16
  %94 = bitcast i8* %93 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i16, i16* %91, i64 %85
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %95, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i16, i16* %95, i64 %85
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i16, i16* %99, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %99, i64 %85
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %103, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %103, i64 %85
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %107, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %107, i64 %85
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %111, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds i16, i16* %111, i64 %85
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %115, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds i16, i16* %115, i64 %85
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds i16, i16* %119, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds i16, i16* %119, i64 %85
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %124, align 2
  %125 = getelementptr inbounds i16, i16* %123, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds i16, i16* %123, i64 %85
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds i16, i16* %127, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds i16, i16* %127, i64 %85
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds i16, i16* %131, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %134, align 2
  %135 = getelementptr inbounds i16, i16* %131, i64 %85
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %136, align 2
  %137 = getelementptr inbounds i16, i16* %135, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds i16, i16* %135, i64 %85
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %140, align 2
  %141 = getelementptr inbounds i16, i16* %139, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %142, align 2
  %143 = getelementptr inbounds i16, i16* %139, i64 %85
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %144, align 2
  %145 = getelementptr inbounds i16, i16* %143, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %146, align 2
  %147 = getelementptr inbounds i16, i16* %143, i64 %85
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds i16, i16* %147, i64 8
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds i16, i16* %147, i64 %85
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds i16, i16* %151, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %154, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = lshr i64 %1, 1
  %86 = trunc i32 %84 to i16
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = insertelement <8 x i16> undef, i16 %86, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = bitcast i8* %0 to i16*
  %92 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i8, i8* %0, i64 16
  %94 = bitcast i8* %93 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i16, i16* %91, i64 %85
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %95, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i16, i16* %95, i64 %85
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i16, i16* %99, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %99, i64 %85
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %103, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %103, i64 %85
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %107, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %107, i64 %85
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %111, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds i16, i16* %111, i64 %85
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %115, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds i16, i16* %115, i64 %85
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds i16, i16* %119, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds i16, i16* %119, i64 %85
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %124, align 2
  %125 = getelementptr inbounds i16, i16* %123, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds i16, i16* %123, i64 %85
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds i16, i16* %127, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds i16, i16* %127, i64 %85
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds i16, i16* %131, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %134, align 2
  %135 = getelementptr inbounds i16, i16* %131, i64 %85
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %136, align 2
  %137 = getelementptr inbounds i16, i16* %135, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds i16, i16* %135, i64 %85
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %140, align 2
  %141 = getelementptr inbounds i16, i16* %139, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %142, align 2
  %143 = getelementptr inbounds i16, i16* %139, i64 %85
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %144, align 2
  %145 = getelementptr inbounds i16, i16* %143, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %146, align 2
  %147 = getelementptr inbounds i16, i16* %143, i64 %85
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds i16, i16* %147, i64 8
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds i16, i16* %147, i64 %85
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds i16, i16* %151, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %154, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 16
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = bitcast i8* %3 to i16*
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nuw nsw i32 %83, %86
  %88 = getelementptr inbounds i8, i8* %3, i64 2
  %89 = bitcast i8* %88 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %87, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 4
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 6
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nuw nsw i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 8
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = add nuw nsw i32 %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 10
  %109 = bitcast i8* %108 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = add nuw nsw i32 %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 12
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = add nuw nsw i32 %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 14
  %119 = bitcast i8* %118 to i16*
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = add nuw nsw i32 %117, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 16
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add nuw nsw i32 %122, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 18
  %129 = bitcast i8* %128 to i16*
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = add nuw nsw i32 %127, %131
  %133 = getelementptr inbounds i8, i8* %3, i64 20
  %134 = bitcast i8* %133 to i16*
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = add nuw nsw i32 %132, %136
  %138 = getelementptr inbounds i8, i8* %3, i64 22
  %139 = bitcast i8* %138 to i16*
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = add nuw nsw i32 %137, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 24
  %144 = bitcast i8* %143 to i16*
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = add nuw nsw i32 %142, %146
  %148 = getelementptr inbounds i8, i8* %3, i64 26
  %149 = bitcast i8* %148 to i16*
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = add nuw nsw i32 %147, %151
  %153 = getelementptr inbounds i8, i8* %3, i64 28
  %154 = bitcast i8* %153 to i16*
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = add nuw nsw i32 %152, %156
  %158 = getelementptr inbounds i8, i8* %3, i64 30
  %159 = bitcast i8* %158 to i16*
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = add nuw nsw i32 %157, %161
  %163 = lshr i32 %162, 5
  %164 = lshr i64 %1, 1
  %165 = trunc i32 %163 to i16
  %166 = insertelement <8 x i16> undef, i16 %165, i32 0
  %167 = shufflevector <8 x i16> %166, <8 x i16> undef, <8 x i32> zeroinitializer
  %168 = insertelement <8 x i16> undef, i16 %165, i32 0
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> zeroinitializer
  %170 = bitcast i8* %0 to i16*
  %171 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %171, align 2
  %172 = getelementptr inbounds i8, i8* %0, i64 16
  %173 = bitcast i8* %172 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %173, align 2
  %174 = getelementptr inbounds i16, i16* %170, i64 %164
  %175 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %175, align 2
  %176 = getelementptr inbounds i16, i16* %174, i64 8
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds i16, i16* %174, i64 %164
  %179 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %179, align 2
  %180 = getelementptr inbounds i16, i16* %178, i64 8
  %181 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %181, align 2
  %182 = getelementptr inbounds i16, i16* %178, i64 %164
  %183 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %183, align 2
  %184 = getelementptr inbounds i16, i16* %182, i64 8
  %185 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %185, align 2
  %186 = getelementptr inbounds i16, i16* %182, i64 %164
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %187, align 2
  %188 = getelementptr inbounds i16, i16* %186, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %189, align 2
  %190 = getelementptr inbounds i16, i16* %186, i64 %164
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %191, align 2
  %192 = getelementptr inbounds i16, i16* %190, i64 8
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds i16, i16* %190, i64 %164
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %195, align 2
  %196 = getelementptr inbounds i16, i16* %194, i64 8
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %197, align 2
  %198 = getelementptr inbounds i16, i16* %194, i64 %164
  %199 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %199, align 2
  %200 = getelementptr inbounds i16, i16* %198, i64 8
  %201 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %201, align 2
  %202 = getelementptr inbounds i16, i16* %198, i64 %164
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %203, align 2
  %204 = getelementptr inbounds i16, i16* %202, i64 8
  %205 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %205, align 2
  %206 = getelementptr inbounds i16, i16* %202, i64 %164
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %207, align 2
  %208 = getelementptr inbounds i16, i16* %206, i64 8
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %209, align 2
  %210 = getelementptr inbounds i16, i16* %206, i64 %164
  %211 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %211, align 2
  %212 = getelementptr inbounds i16, i16* %210, i64 8
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %213, align 2
  %214 = getelementptr inbounds i16, i16* %210, i64 %164
  %215 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %215, align 2
  %216 = getelementptr inbounds i16, i16* %214, i64 8
  %217 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %217, align 2
  %218 = getelementptr inbounds i16, i16* %214, i64 %164
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %219, align 2
  %220 = getelementptr inbounds i16, i16* %218, i64 8
  %221 = bitcast i16* %220 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %221, align 2
  %222 = getelementptr inbounds i16, i16* %218, i64 %164
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %223, align 2
  %224 = getelementptr inbounds i16, i16* %222, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %225, align 2
  %226 = getelementptr inbounds i16, i16* %222, i64 %164
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %227, align 2
  %228 = getelementptr inbounds i16, i16* %226, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds i16, i16* %226, i64 %164
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %231, align 2
  %232 = getelementptr inbounds i16, i16* %230, i64 8
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %233, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 32, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 32, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 32, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 32, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 32, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 32, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 32, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 32, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %2, i64 32, i1 false)
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %2, i64 32, i1 false)
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %2, i64 32, i1 false)
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %2, i64 32, i1 false)
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %2, i64 32, i1 false)
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %2, i64 32, i1 false)
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %2, i64 32, i1 false)
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %2, i64 32, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %3 to i16*
  %7 = bitcast i8* %0 to i16*
  %8 = load i16, i16* %6, align 2
  %9 = insertelement <8 x i16> undef, i16 %8, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %7, i64 %5
  %15 = getelementptr inbounds i8, i8* %3, i64 2
  %16 = bitcast i8* %15 to i16*
  %17 = load i16, i16* %16, align 2
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %14, i64 8
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %14, i64 %5
  %24 = getelementptr inbounds i8, i8* %3, i64 4
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = insertelement <8 x i16> undef, i16 %26, i32 0
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <8 x i32> zeroinitializer
  %29 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %23, i64 8
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %23, i64 %5
  %33 = getelementptr inbounds i8, i8* %3, i64 6
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 2
  %36 = insertelement <8 x i16> undef, i16 %35, i32 0
  %37 = shufflevector <8 x i16> %36, <8 x i16> undef, <8 x i32> zeroinitializer
  %38 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %32, i64 8
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds i16, i16* %32, i64 %5
  %42 = getelementptr inbounds i8, i8* %3, i64 8
  %43 = bitcast i8* %42 to i16*
  %44 = load i16, i16* %43, align 2
  %45 = insertelement <8 x i16> undef, i16 %44, i32 0
  %46 = shufflevector <8 x i16> %45, <8 x i16> undef, <8 x i32> zeroinitializer
  %47 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i16, i16* %41, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds i16, i16* %41, i64 %5
  %51 = getelementptr inbounds i8, i8* %3, i64 10
  %52 = bitcast i8* %51 to i16*
  %53 = load i16, i16* %52, align 2
  %54 = insertelement <8 x i16> undef, i16 %53, i32 0
  %55 = shufflevector <8 x i16> %54, <8 x i16> undef, <8 x i32> zeroinitializer
  %56 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i16, i16* %50, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %58, align 2
  %59 = getelementptr inbounds i16, i16* %50, i64 %5
  %60 = getelementptr inbounds i8, i8* %3, i64 12
  %61 = bitcast i8* %60 to i16*
  %62 = load i16, i16* %61, align 2
  %63 = insertelement <8 x i16> undef, i16 %62, i32 0
  %64 = shufflevector <8 x i16> %63, <8 x i16> undef, <8 x i32> zeroinitializer
  %65 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %59, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %59, i64 %5
  %69 = getelementptr inbounds i8, i8* %3, i64 14
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <8 x i16> undef, i16 %71, i32 0
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <8 x i32> zeroinitializer
  %74 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds i16, i16* %68, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds i16, i16* %68, i64 %5
  %78 = getelementptr inbounds i8, i8* %3, i64 16
  %79 = bitcast i8* %78 to i16*
  %80 = load i16, i16* %79, align 2
  %81 = insertelement <8 x i16> undef, i16 %80, i32 0
  %82 = shufflevector <8 x i16> %81, <8 x i16> undef, <8 x i32> zeroinitializer
  %83 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %83, align 2
  %84 = getelementptr inbounds i16, i16* %77, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2
  %86 = getelementptr inbounds i16, i16* %77, i64 %5
  %87 = getelementptr inbounds i8, i8* %3, i64 18
  %88 = bitcast i8* %87 to i16*
  %89 = load i16, i16* %88, align 2
  %90 = insertelement <8 x i16> undef, i16 %89, i32 0
  %91 = shufflevector <8 x i16> %90, <8 x i16> undef, <8 x i32> zeroinitializer
  %92 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i16, i16* %86, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i16, i16* %86, i64 %5
  %96 = getelementptr inbounds i8, i8* %3, i64 20
  %97 = bitcast i8* %96 to i16*
  %98 = load i16, i16* %97, align 2
  %99 = insertelement <8 x i16> undef, i16 %98, i32 0
  %100 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> zeroinitializer
  %101 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %95, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i16, i16* %95, i64 %5
  %105 = getelementptr inbounds i8, i8* %3, i64 22
  %106 = bitcast i8* %105 to i16*
  %107 = load i16, i16* %106, align 2
  %108 = insertelement <8 x i16> undef, i16 %107, i32 0
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> zeroinitializer
  %110 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %104, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %104, i64 %5
  %114 = getelementptr inbounds i8, i8* %3, i64 24
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = insertelement <8 x i16> undef, i16 %116, i32 0
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <8 x i32> zeroinitializer
  %119 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %113, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %113, i64 %5
  %123 = getelementptr inbounds i8, i8* %3, i64 26
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = insertelement <8 x i16> undef, i16 %125, i32 0
  %127 = shufflevector <8 x i16> %126, <8 x i16> undef, <8 x i32> zeroinitializer
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds i16, i16* %122, i64 %5
  %132 = getelementptr inbounds i8, i8* %3, i64 28
  %133 = bitcast i8* %132 to i16*
  %134 = load i16, i16* %133, align 2
  %135 = insertelement <8 x i16> undef, i16 %134, i32 0
  %136 = shufflevector <8 x i16> %135, <8 x i16> undef, <8 x i32> zeroinitializer
  %137 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds i16, i16* %131, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %139, align 2
  %140 = getelementptr inbounds i16, i16* %131, i64 %5
  %141 = getelementptr inbounds i8, i8* %3, i64 30
  %142 = bitcast i8* %141 to i16*
  %143 = load i16, i16* %142, align 2
  %144 = insertelement <8 x i16> undef, i16 %143, i32 0
  %145 = shufflevector <8 x i16> %144, <8 x i16> undef, <8 x i32> zeroinitializer
  %146 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %146, align 2
  %147 = getelementptr inbounds i16, i16* %140, i64 8
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %148, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 16
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 16
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 30
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 30
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 32
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  br label %26

26:                                               ; preds = %87, %4
  %27 = phi i64 [ 0, %4 ], [ %89, %87 ]
  %28 = phi i16* [ %13, %4 ], [ %88, %87 ]
  %29 = mul i64 %17, %27
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = add i64 %29, 32
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %27
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds i16, i16* %6, i64 %27
  %37 = sub i8 0, %34
  %38 = zext i8 %37 to i32
  %39 = mul nuw nsw i32 %38, %15
  %40 = add nuw nsw i32 %39, 256
  %41 = shl nuw nsw i64 %27, 1
  %42 = or i64 %41, 1
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = icmp ult i8* %30, %18
  %45 = icmp ugt i8* %32, %2
  %46 = and i1 %44, %45
  %47 = bitcast i16* %36 to i8*
  %48 = icmp ult i8* %30, %43
  %49 = icmp ugt i8* %32, %47
  %50 = and i1 %48, %49
  %51 = or i1 %46, %50
  br i1 %51, label %91, label %52

52:                                               ; preds = %26
  %53 = insertelement <8 x i32> undef, i32 %35, i32 0
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> zeroinitializer
  %55 = insertelement <8 x i32> undef, i32 %40, i32 0
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> zeroinitializer
  %57 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !576
  %58 = zext <8 x i16> %57 to <8 x i32>
  %59 = mul nuw nsw <8 x i32> %54, %58
  %60 = load i16, i16* %36, align 2, !alias.scope !579
  %61 = insertelement <8 x i16> undef, i16 %60, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %63, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %65 = add nuw nsw <8 x i32> %56, %59
  %66 = add nuw nsw <8 x i32> %65, %22
  %67 = add nuw nsw <8 x i32> %66, %64
  %68 = lshr <8 x i32> %67, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2, !alias.scope !581, !noalias !583
  %71 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !576
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = mul nuw nsw <8 x i32> %54, %72
  %74 = load i16, i16* %36, align 2, !alias.scope !579
  %75 = insertelement <8 x i16> undef, i16 %74, i32 0
  %76 = shufflevector <8 x i16> %75, <8 x i16> undef, <8 x i32> zeroinitializer
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %77, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %79 = add nuw nsw <8 x i32> %56, %73
  %80 = add nuw nsw <8 x i32> %79, %25
  %81 = add nuw nsw <8 x i32> %80, %78
  %82 = lshr <8 x i32> %81, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %83 = trunc <8 x i32> %82 to <8 x i16>
  %84 = getelementptr inbounds i16, i16* %28, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %85, align 2, !alias.scope !581, !noalias !583
  br label %87

86:                                               ; preds = %87
  ret void

87:                                               ; preds = %91, %52
  %88 = getelementptr inbounds i16, i16* %28, i64 %14
  %89 = add nuw nsw i64 %27, 1
  %90 = icmp eq i64 %89, 16
  br i1 %90, label %86, label %26

91:                                               ; preds = %26, %91
  %92 = phi i64 [ %112, %91 ], [ 0, %26 ]
  %93 = getelementptr inbounds i16, i16* %5, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %95, %35
  %97 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %92
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = load i16, i16* %36, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %101, %99
  %103 = sub i8 0, %98
  %104 = zext i8 %103 to i32
  %105 = mul nuw nsw i32 %104, %16
  %106 = add nuw nsw i32 %40, %96
  %107 = add nuw nsw i32 %106, %105
  %108 = add nuw nsw i32 %107, %102
  %109 = lshr i32 %108, 9
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 %92
  store i16 %110, i16* %111, align 2
  %112 = add nuw nsw i64 %92, 1
  %113 = icmp eq i64 %112, 16
  br i1 %113, label %87, label %91, !llvm.loop !584
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %2, i64 10
  %21 = bitcast i8* %20 to i16*
  %22 = getelementptr inbounds i8, i8* %2, i64 12
  %23 = bitcast i8* %22 to i16*
  %24 = getelementptr inbounds i8, i8* %2, i64 14
  %25 = bitcast i8* %24 to i16*
  %26 = getelementptr inbounds i8, i8* %2, i64 16
  %27 = bitcast i8* %26 to i16*
  %28 = getelementptr inbounds i8, i8* %2, i64 18
  %29 = bitcast i8* %28 to i16*
  %30 = getelementptr inbounds i8, i8* %2, i64 20
  %31 = bitcast i8* %30 to i16*
  %32 = getelementptr inbounds i8, i8* %2, i64 22
  %33 = bitcast i8* %32 to i16*
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to i16*
  %36 = getelementptr inbounds i8, i8* %2, i64 26
  %37 = bitcast i8* %36 to i16*
  %38 = getelementptr inbounds i8, i8* %2, i64 28
  %39 = bitcast i8* %38 to i16*
  %40 = getelementptr inbounds i8, i8* %2, i64 30
  %41 = bitcast i8* %40 to i16*
  br label %42

42:                                               ; preds = %42, %4
  %43 = phi i64 [ 0, %4 ], [ %164, %42 ]
  %44 = phi i16* [ %9, %4 ], [ %163, %42 ]
  %45 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %43
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub i8 0, %46
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, %11
  %51 = add nuw nsw i32 %50, 128
  %52 = load i16, i16* %5, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, %47
  %55 = add nuw nsw i32 %51, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %44, align 2
  %58 = load i16, i16* %13, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, %47
  %61 = add nuw nsw i32 %51, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %44, i64 1
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %15, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, %47
  %68 = add nuw nsw i32 %51, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %44, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %17, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %47
  %75 = add nuw nsw i32 %51, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %44, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %19, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %80, %47
  %82 = add nuw nsw i32 %51, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %44, i64 4
  store i16 %84, i16* %85, align 2
  %86 = load i16, i16* %21, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %87, %47
  %89 = add nuw nsw i32 %51, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i16
  %92 = getelementptr inbounds i16, i16* %44, i64 5
  store i16 %91, i16* %92, align 2
  %93 = load i16, i16* %23, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %94, %47
  %96 = add nuw nsw i32 %51, %95
  %97 = lshr i32 %96, 8
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %44, i64 6
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %25, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %101, %47
  %103 = add nuw nsw i32 %51, %102
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i16
  %106 = getelementptr inbounds i16, i16* %44, i64 7
  store i16 %105, i16* %106, align 2
  %107 = load i16, i16* %27, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %108, %47
  %110 = add nuw nsw i32 %51, %109
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds i16, i16* %44, i64 8
  store i16 %112, i16* %113, align 2
  %114 = load i16, i16* %29, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %115, %47
  %117 = add nuw nsw i32 %51, %116
  %118 = lshr i32 %117, 8
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %44, i64 9
  store i16 %119, i16* %120, align 2
  %121 = load i16, i16* %31, align 2
  %122 = zext i16 %121 to i32
  %123 = mul nuw nsw i32 %122, %47
  %124 = add nuw nsw i32 %51, %123
  %125 = lshr i32 %124, 8
  %126 = trunc i32 %125 to i16
  %127 = getelementptr inbounds i16, i16* %44, i64 10
  store i16 %126, i16* %127, align 2
  %128 = load i16, i16* %33, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %129, %47
  %131 = add nuw nsw i32 %51, %130
  %132 = lshr i32 %131, 8
  %133 = trunc i32 %132 to i16
  %134 = getelementptr inbounds i16, i16* %44, i64 11
  store i16 %133, i16* %134, align 2
  %135 = load i16, i16* %35, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %136, %47
  %138 = add nuw nsw i32 %51, %137
  %139 = lshr i32 %138, 8
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds i16, i16* %44, i64 12
  store i16 %140, i16* %141, align 2
  %142 = load i16, i16* %37, align 2
  %143 = zext i16 %142 to i32
  %144 = mul nuw nsw i32 %143, %47
  %145 = add nuw nsw i32 %51, %144
  %146 = lshr i32 %145, 8
  %147 = trunc i32 %146 to i16
  %148 = getelementptr inbounds i16, i16* %44, i64 13
  store i16 %147, i16* %148, align 2
  %149 = load i16, i16* %39, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %150, %47
  %152 = add nuw nsw i32 %51, %151
  %153 = lshr i32 %152, 8
  %154 = trunc i32 %153 to i16
  %155 = getelementptr inbounds i16, i16* %44, i64 14
  store i16 %154, i16* %155, align 2
  %156 = load i16, i16* %41, align 2
  %157 = zext i16 %156 to i32
  %158 = mul nuw nsw i32 %157, %47
  %159 = add nuw nsw i32 %51, %158
  %160 = lshr i32 %159, 8
  %161 = trunc i32 %160 to i16
  %162 = getelementptr inbounds i16, i16* %44, i64 15
  store i16 %161, i16* %162, align 2
  %163 = getelementptr inbounds i16, i16* %44, i64 %10
  %164 = add nuw nsw i64 %43, 1
  %165 = icmp eq i64 %164, 16
  br i1 %165, label %166, label %42

166:                                              ; preds = %42
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi16EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = insertelement <8 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> zeroinitializer
  %15 = mul nuw nsw <8 x i32> %14, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %16 = add nuw nsw <8 x i32> %15, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %17 = mul nuw nsw <8 x i32> %14, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %18 = add nuw nsw <8 x i32> %17, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %19

19:                                               ; preds = %55, %4
  %20 = phi i64 [ 0, %4 ], [ %57, %55 ]
  %21 = phi i16* [ %9, %4 ], [ %56, %55 ]
  %22 = mul i64 %12, %20
  %23 = getelementptr inbounds i16, i16* %5, i64 %20
  %24 = shl nuw nsw i64 %20, 1
  %25 = or i64 %24, 1
  %26 = getelementptr i8, i8* %3, i64 %25
  %27 = add i64 %22, 32
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 %22
  %30 = bitcast i16* %23 to i8*
  %31 = icmp ult i8* %29, %26
  %32 = icmp ugt i8* %28, %30
  %33 = and i1 %31, %32
  br i1 %33, label %59, label %34

34:                                               ; preds = %19
  %35 = load i16, i16* %23, align 2, !alias.scope !585
  %36 = insertelement <8 x i16> undef, i16 %35, i32 0
  %37 = shufflevector <8 x i16> %36, <8 x i16> undef, <8 x i32> zeroinitializer
  %38 = zext <8 x i16> %37 to <8 x i32>
  %39 = mul nuw nsw <8 x i32> %38, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %40 = add nuw nsw <8 x i32> %16, %39
  %41 = lshr <8 x i32> %40, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %42 = trunc <8 x i32> %41 to <8 x i16>
  %43 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 2, !alias.scope !588, !noalias !585
  %44 = load i16, i16* %23, align 2, !alias.scope !585
  %45 = insertelement <8 x i16> undef, i16 %44, i32 0
  %46 = shufflevector <8 x i16> %45, <8 x i16> undef, <8 x i32> zeroinitializer
  %47 = zext <8 x i16> %46 to <8 x i32>
  %48 = mul nuw nsw <8 x i32> %47, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %49 = add nuw nsw <8 x i32> %18, %48
  %50 = lshr <8 x i32> %49, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %51 = trunc <8 x i32> %50 to <8 x i16>
  %52 = getelementptr inbounds i16, i16* %21, i64 8
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %53, align 2, !alias.scope !588, !noalias !585
  br label %55

54:                                               ; preds = %55
  ret void

55:                                               ; preds = %59, %34
  %56 = getelementptr inbounds i16, i16* %21, i64 %10
  %57 = add nuw nsw i64 %20, 1
  %58 = icmp eq i64 %57, 16
  br i1 %58, label %54, label %19

59:                                               ; preds = %19, %59
  %60 = phi i64 [ %90, %59 ], [ 0, %19 ]
  %61 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %60
  %62 = load i8, i8* %61, align 2
  %63 = zext i8 %62 to i32
  %64 = load i16, i16* %23, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %65, %63
  %67 = sub i8 0, %62
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %11
  %70 = add nuw nsw i32 %69, 128
  %71 = add nuw nsw i32 %70, %66
  %72 = lshr i32 %71, 8
  %73 = trunc i32 %72 to i16
  %74 = getelementptr inbounds i16, i16* %21, i64 %60
  store i16 %73, i16* %74, align 2
  %75 = or i64 %60, 1
  %76 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = load i16, i16* %23, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %80, %78
  %82 = sub i8 0, %77
  %83 = zext i8 %82 to i32
  %84 = mul nuw nsw i32 %83, %11
  %85 = add nuw nsw i32 %84, 128
  %86 = add nuw nsw i32 %85, %81
  %87 = lshr i32 %86, 8
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds i16, i16* %21, i64 %75
  store i16 %88, i16* %89, align 2
  %90 = add nuw nsw i64 %60, 2
  %91 = icmp eq i64 %90, 16
  br i1 %91, label %55, label %59, !llvm.loop !590
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi32ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i16, i16* %6, i64 %5
  %11 = bitcast i16* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i16, i16* %10, i64 8
  %13 = bitcast i16* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %10, i64 %5
  %15 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i16, i16* %14, i64 8
  %17 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %14, i64 %5
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i16, i16* %18, i64 8
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds i16, i16* %18, i64 %5
  %23 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds i16, i16* %22, i64 8
  %25 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 %5
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds i16, i16* %26, i64 8
  %29 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %26, i64 %5
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %30, i64 8
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds i16, i16* %30, i64 %5
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds i16, i16* %34, i64 8
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %34, i64 %5
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 8
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 %5
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %42, i64 8
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %42, i64 %5
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i16, i16* %46, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds i16, i16* %46, i64 %5
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds i16, i16* %50, i64 8
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds i16, i16* %50, i64 %5
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds i16, i16* %54, i64 %5
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds i16, i16* %58, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds i16, i16* %58, i64 %5
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds i16, i16* %62, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 %5
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %66, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %69, align 2
  %70 = getelementptr inbounds i16, i16* %66, i64 %5
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %71, align 2
  %72 = getelementptr inbounds i16, i16* %70, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %73, align 2
  %74 = getelementptr inbounds i16, i16* %70, i64 %5
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %75, align 2
  %76 = getelementptr inbounds i16, i16* %74, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %77, align 2
  %78 = getelementptr inbounds i16, i16* %74, i64 %5
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %79, align 2
  %80 = getelementptr inbounds i16, i16* %78, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %81, align 2
  %82 = getelementptr inbounds i16, i16* %78, i64 %5
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %83, align 2
  %84 = getelementptr inbounds i16, i16* %82, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %85, align 2
  %86 = getelementptr inbounds i16, i16* %82, i64 %5
  %87 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %87, align 2
  %88 = getelementptr inbounds i16, i16* %86, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %89, align 2
  %90 = getelementptr inbounds i16, i16* %86, i64 %5
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds i16, i16* %90, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %93, align 2
  %94 = getelementptr inbounds i16, i16* %90, i64 %5
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds i16, i16* %94, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds i16, i16* %94, i64 %5
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %99, align 2
  %100 = getelementptr inbounds i16, i16* %98, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %98, i64 %5
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i16, i16* %102, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i16, i16* %102, i64 %5
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %106, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %106, i64 %5
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %110, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %110, i64 %5
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %114, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %114, i64 %5
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %118, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %118, i64 %5
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %122, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %122, i64 %5
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %126, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i16, i16* %126, i64 %5
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %130, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %133, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = lshr i64 %1, 1
  %86 = trunc i32 %84 to i16
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = insertelement <8 x i16> undef, i16 %86, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = bitcast i8* %0 to i16*
  %92 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i8, i8* %0, i64 16
  %94 = bitcast i8* %93 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i16, i16* %91, i64 %85
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %95, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i16, i16* %95, i64 %85
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i16, i16* %99, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %99, i64 %85
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %103, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %103, i64 %85
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %107, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %107, i64 %85
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %111, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds i16, i16* %111, i64 %85
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %115, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds i16, i16* %115, i64 %85
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds i16, i16* %119, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds i16, i16* %119, i64 %85
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %124, align 2
  %125 = getelementptr inbounds i16, i16* %123, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds i16, i16* %123, i64 %85
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds i16, i16* %127, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds i16, i16* %127, i64 %85
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds i16, i16* %131, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %134, align 2
  %135 = getelementptr inbounds i16, i16* %131, i64 %85
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %136, align 2
  %137 = getelementptr inbounds i16, i16* %135, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds i16, i16* %135, i64 %85
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %140, align 2
  %141 = getelementptr inbounds i16, i16* %139, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %142, align 2
  %143 = getelementptr inbounds i16, i16* %139, i64 %85
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %144, align 2
  %145 = getelementptr inbounds i16, i16* %143, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %146, align 2
  %147 = getelementptr inbounds i16, i16* %143, i64 %85
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds i16, i16* %147, i64 8
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds i16, i16* %147, i64 %85
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds i16, i16* %151, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %154, align 2
  %155 = getelementptr inbounds i16, i16* %151, i64 %85
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %156, align 2
  %157 = getelementptr inbounds i16, i16* %155, i64 8
  %158 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds i16, i16* %155, i64 %85
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %160, align 2
  %161 = getelementptr inbounds i16, i16* %159, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds i16, i16* %159, i64 %85
  %164 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %164, align 2
  %165 = getelementptr inbounds i16, i16* %163, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %166, align 2
  %167 = getelementptr inbounds i16, i16* %163, i64 %85
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %168, align 2
  %169 = getelementptr inbounds i16, i16* %167, i64 8
  %170 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %170, align 2
  %171 = getelementptr inbounds i16, i16* %167, i64 %85
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds i16, i16* %171, i64 8
  %174 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds i16, i16* %171, i64 %85
  %176 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i16, i16* %175, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds i16, i16* %175, i64 %85
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %179, i64 8
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %179, i64 %85
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %183, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %183, i64 %85
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %187, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %187, i64 %85
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %191, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %191, i64 %85
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %195, i64 8
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %195, i64 %85
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %199, i64 8
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %199, i64 %85
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %203, i64 8
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %203, i64 %85
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %207, i64 8
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %207, i64 %85
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %211, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds i16, i16* %211, i64 %85
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %216, align 2
  %217 = getelementptr inbounds i16, i16* %215, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %218, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 16
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %3, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %3, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %3, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %3, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %3, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %3, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %3, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %3, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %3, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %3, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %3, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %3, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %3, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %3, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %3, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %3, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = lshr i32 %163, 5
  %165 = lshr i64 %1, 1
  %166 = trunc i32 %164 to i16
  %167 = insertelement <8 x i16> undef, i16 %166, i32 0
  %168 = shufflevector <8 x i16> %167, <8 x i16> undef, <8 x i32> zeroinitializer
  %169 = insertelement <8 x i16> undef, i16 %166, i32 0
  %170 = shufflevector <8 x i16> %169, <8 x i16> undef, <8 x i32> zeroinitializer
  %171 = bitcast i8* %0 to i16*
  %172 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds i8, i8* %0, i64 16
  %174 = bitcast i8* %173 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds i16, i16* %171, i64 %165
  %176 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i16, i16* %175, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds i16, i16* %175, i64 %165
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %179, i64 8
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %179, i64 %165
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %183, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %183, i64 %165
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %187, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %187, i64 %165
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %191, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %191, i64 %165
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %195, i64 8
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %195, i64 %165
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %199, i64 8
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %199, i64 %165
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %203, i64 8
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %203, i64 %165
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %207, i64 8
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %207, i64 %165
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %211, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds i16, i16* %211, i64 %165
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %216, align 2
  %217 = getelementptr inbounds i16, i16* %215, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %218, align 2
  %219 = getelementptr inbounds i16, i16* %215, i64 %165
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %220, align 2
  %221 = getelementptr inbounds i16, i16* %219, i64 8
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %222, align 2
  %223 = getelementptr inbounds i16, i16* %219, i64 %165
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %224, align 2
  %225 = getelementptr inbounds i16, i16* %223, i64 8
  %226 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %226, align 2
  %227 = getelementptr inbounds i16, i16* %223, i64 %165
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %228, align 2
  %229 = getelementptr inbounds i16, i16* %227, i64 8
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %230, align 2
  %231 = getelementptr inbounds i16, i16* %227, i64 %165
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %232, align 2
  %233 = getelementptr inbounds i16, i16* %231, i64 8
  %234 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %234, align 2
  %235 = getelementptr inbounds i16, i16* %231, i64 %165
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %236, align 2
  %237 = getelementptr inbounds i16, i16* %235, i64 8
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %238, align 2
  %239 = getelementptr inbounds i16, i16* %235, i64 %165
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %240, align 2
  %241 = getelementptr inbounds i16, i16* %239, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %242, align 2
  %243 = getelementptr inbounds i16, i16* %239, i64 %165
  %244 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %244, align 2
  %245 = getelementptr inbounds i16, i16* %243, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %246, align 2
  %247 = getelementptr inbounds i16, i16* %243, i64 %165
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %248, align 2
  %249 = getelementptr inbounds i16, i16* %247, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %250, align 2
  %251 = getelementptr inbounds i16, i16* %247, i64 %165
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %252, align 2
  %253 = getelementptr inbounds i16, i16* %251, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %254, align 2
  %255 = getelementptr inbounds i16, i16* %251, i64 %165
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %256, align 2
  %257 = getelementptr inbounds i16, i16* %255, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %258, align 2
  %259 = getelementptr inbounds i16, i16* %255, i64 %165
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %260, align 2
  %261 = getelementptr inbounds i16, i16* %259, i64 8
  %262 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %262, align 2
  %263 = getelementptr inbounds i16, i16* %259, i64 %165
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %264, align 2
  %265 = getelementptr inbounds i16, i16* %263, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %266, align 2
  %267 = getelementptr inbounds i16, i16* %263, i64 %165
  %268 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %268, align 2
  %269 = getelementptr inbounds i16, i16* %267, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %270, align 2
  %271 = getelementptr inbounds i16, i16* %267, i64 %165
  %272 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %272, align 2
  %273 = getelementptr inbounds i16, i16* %271, i64 8
  %274 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %274, align 2
  %275 = getelementptr inbounds i16, i16* %271, i64 %165
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %276, align 2
  %277 = getelementptr inbounds i16, i16* %275, i64 8
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %278, align 2
  %279 = getelementptr inbounds i16, i16* %275, i64 %165
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %280, align 2
  %281 = getelementptr inbounds i16, i16* %279, i64 8
  %282 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %282, align 2
  %283 = getelementptr inbounds i16, i16* %279, i64 %165
  %284 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %284, align 2
  %285 = getelementptr inbounds i16, i16* %283, i64 8
  %286 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %286, align 2
  %287 = getelementptr inbounds i16, i16* %283, i64 %165
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %288, align 2
  %289 = getelementptr inbounds i16, i16* %287, i64 8
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %290, align 2
  %291 = getelementptr inbounds i16, i16* %287, i64 %165
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %292, align 2
  %293 = getelementptr inbounds i16, i16* %291, i64 8
  %294 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %294, align 2
  %295 = getelementptr inbounds i16, i16* %291, i64 %165
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %296, align 2
  %297 = getelementptr inbounds i16, i16* %295, i64 8
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %298, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 24
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = bitcast i8* %3 to i16*
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add nuw nsw i32 %83, %86
  %88 = getelementptr inbounds i8, i8* %3, i64 2
  %89 = bitcast i8* %88 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %87, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 4
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 6
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nuw nsw i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 8
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = add nuw nsw i32 %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 10
  %109 = bitcast i8* %108 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = add nuw nsw i32 %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 12
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = add nuw nsw i32 %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 14
  %119 = bitcast i8* %118 to i16*
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = add nuw nsw i32 %117, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 16
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add nuw nsw i32 %122, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 18
  %129 = bitcast i8* %128 to i16*
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = add nuw nsw i32 %127, %131
  %133 = getelementptr inbounds i8, i8* %3, i64 20
  %134 = bitcast i8* %133 to i16*
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = add nuw nsw i32 %132, %136
  %138 = getelementptr inbounds i8, i8* %3, i64 22
  %139 = bitcast i8* %138 to i16*
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = add nuw nsw i32 %137, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 24
  %144 = bitcast i8* %143 to i16*
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = add nuw nsw i32 %142, %146
  %148 = getelementptr inbounds i8, i8* %3, i64 26
  %149 = bitcast i8* %148 to i16*
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = add nuw nsw i32 %147, %151
  %153 = getelementptr inbounds i8, i8* %3, i64 28
  %154 = bitcast i8* %153 to i16*
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = add nuw nsw i32 %152, %156
  %158 = getelementptr inbounds i8, i8* %3, i64 30
  %159 = bitcast i8* %158 to i16*
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = add nuw nsw i32 %157, %161
  %163 = getelementptr inbounds i8, i8* %3, i64 32
  %164 = bitcast i8* %163 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = add nuw nsw i32 %162, %166
  %168 = getelementptr inbounds i8, i8* %3, i64 34
  %169 = bitcast i8* %168 to i16*
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nuw nsw i32 %167, %171
  %173 = getelementptr inbounds i8, i8* %3, i64 36
  %174 = bitcast i8* %173 to i16*
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = add nuw nsw i32 %172, %176
  %178 = getelementptr inbounds i8, i8* %3, i64 38
  %179 = bitcast i8* %178 to i16*
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = add nuw nsw i32 %177, %181
  %183 = getelementptr inbounds i8, i8* %3, i64 40
  %184 = bitcast i8* %183 to i16*
  %185 = load i16, i16* %184, align 2
  %186 = zext i16 %185 to i32
  %187 = add nuw nsw i32 %182, %186
  %188 = getelementptr inbounds i8, i8* %3, i64 42
  %189 = bitcast i8* %188 to i16*
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add nuw nsw i32 %187, %191
  %193 = getelementptr inbounds i8, i8* %3, i64 44
  %194 = bitcast i8* %193 to i16*
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %192, %196
  %198 = getelementptr inbounds i8, i8* %3, i64 46
  %199 = bitcast i8* %198 to i16*
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = add nuw nsw i32 %197, %201
  %203 = getelementptr inbounds i8, i8* %3, i64 48
  %204 = bitcast i8* %203 to i16*
  %205 = load i16, i16* %204, align 2
  %206 = zext i16 %205 to i32
  %207 = add nuw nsw i32 %202, %206
  %208 = getelementptr inbounds i8, i8* %3, i64 50
  %209 = bitcast i8* %208 to i16*
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i32
  %212 = add nuw nsw i32 %207, %211
  %213 = getelementptr inbounds i8, i8* %3, i64 52
  %214 = bitcast i8* %213 to i16*
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = add nuw nsw i32 %212, %216
  %218 = getelementptr inbounds i8, i8* %3, i64 54
  %219 = bitcast i8* %218 to i16*
  %220 = load i16, i16* %219, align 2
  %221 = zext i16 %220 to i32
  %222 = add nuw nsw i32 %217, %221
  %223 = getelementptr inbounds i8, i8* %3, i64 56
  %224 = bitcast i8* %223 to i16*
  %225 = load i16, i16* %224, align 2
  %226 = zext i16 %225 to i32
  %227 = add nuw nsw i32 %222, %226
  %228 = getelementptr inbounds i8, i8* %3, i64 58
  %229 = bitcast i8* %228 to i16*
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = add nuw nsw i32 %227, %231
  %233 = getelementptr inbounds i8, i8* %3, i64 60
  %234 = bitcast i8* %233 to i16*
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = add nuw nsw i32 %232, %236
  %238 = getelementptr inbounds i8, i8* %3, i64 62
  %239 = bitcast i8* %238 to i16*
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = add nuw nsw i32 %237, %241
  %243 = udiv i32 %242, 48
  %244 = lshr i64 %1, 1
  %245 = trunc i32 %243 to i16
  %246 = insertelement <8 x i16> undef, i16 %245, i32 0
  %247 = shufflevector <8 x i16> %246, <8 x i16> undef, <8 x i32> zeroinitializer
  %248 = insertelement <8 x i16> undef, i16 %245, i32 0
  %249 = shufflevector <8 x i16> %248, <8 x i16> undef, <8 x i32> zeroinitializer
  %250 = bitcast i8* %0 to i16*
  %251 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %251, align 2
  %252 = getelementptr inbounds i8, i8* %0, i64 16
  %253 = bitcast i8* %252 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %253, align 2
  %254 = getelementptr inbounds i16, i16* %250, i64 %244
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %255, align 2
  %256 = getelementptr inbounds i16, i16* %254, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %257, align 2
  %258 = getelementptr inbounds i16, i16* %254, i64 %244
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %259, align 2
  %260 = getelementptr inbounds i16, i16* %258, i64 8
  %261 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %261, align 2
  %262 = getelementptr inbounds i16, i16* %258, i64 %244
  %263 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %263, align 2
  %264 = getelementptr inbounds i16, i16* %262, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %265, align 2
  %266 = getelementptr inbounds i16, i16* %262, i64 %244
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %267, align 2
  %268 = getelementptr inbounds i16, i16* %266, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds i16, i16* %266, i64 %244
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %271, align 2
  %272 = getelementptr inbounds i16, i16* %270, i64 8
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %273, align 2
  %274 = getelementptr inbounds i16, i16* %270, i64 %244
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %275, align 2
  %276 = getelementptr inbounds i16, i16* %274, i64 8
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %277, align 2
  %278 = getelementptr inbounds i16, i16* %274, i64 %244
  %279 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %279, align 2
  %280 = getelementptr inbounds i16, i16* %278, i64 8
  %281 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %281, align 2
  %282 = getelementptr inbounds i16, i16* %278, i64 %244
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %283, align 2
  %284 = getelementptr inbounds i16, i16* %282, i64 8
  %285 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %285, align 2
  %286 = getelementptr inbounds i16, i16* %282, i64 %244
  %287 = bitcast i16* %286 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %287, align 2
  %288 = getelementptr inbounds i16, i16* %286, i64 8
  %289 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %289, align 2
  %290 = getelementptr inbounds i16, i16* %286, i64 %244
  %291 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %291, align 2
  %292 = getelementptr inbounds i16, i16* %290, i64 8
  %293 = bitcast i16* %292 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %293, align 2
  %294 = getelementptr inbounds i16, i16* %290, i64 %244
  %295 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %295, align 2
  %296 = getelementptr inbounds i16, i16* %294, i64 8
  %297 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %297, align 2
  %298 = getelementptr inbounds i16, i16* %294, i64 %244
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %299, align 2
  %300 = getelementptr inbounds i16, i16* %298, i64 8
  %301 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %301, align 2
  %302 = getelementptr inbounds i16, i16* %298, i64 %244
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %303, align 2
  %304 = getelementptr inbounds i16, i16* %302, i64 8
  %305 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %305, align 2
  %306 = getelementptr inbounds i16, i16* %302, i64 %244
  %307 = bitcast i16* %306 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %307, align 2
  %308 = getelementptr inbounds i16, i16* %306, i64 8
  %309 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %309, align 2
  %310 = getelementptr inbounds i16, i16* %306, i64 %244
  %311 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %311, align 2
  %312 = getelementptr inbounds i16, i16* %310, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %313, align 2
  %314 = getelementptr inbounds i16, i16* %310, i64 %244
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %315, align 2
  %316 = getelementptr inbounds i16, i16* %314, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %317, align 2
  %318 = getelementptr inbounds i16, i16* %314, i64 %244
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %319, align 2
  %320 = getelementptr inbounds i16, i16* %318, i64 8
  %321 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %321, align 2
  %322 = getelementptr inbounds i16, i16* %318, i64 %244
  %323 = bitcast i16* %322 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %323, align 2
  %324 = getelementptr inbounds i16, i16* %322, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %325, align 2
  %326 = getelementptr inbounds i16, i16* %322, i64 %244
  %327 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %327, align 2
  %328 = getelementptr inbounds i16, i16* %326, i64 8
  %329 = bitcast i16* %328 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %329, align 2
  %330 = getelementptr inbounds i16, i16* %326, i64 %244
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %331, align 2
  %332 = getelementptr inbounds i16, i16* %330, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %333, align 2
  %334 = getelementptr inbounds i16, i16* %330, i64 %244
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %335, align 2
  %336 = getelementptr inbounds i16, i16* %334, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %337, align 2
  %338 = getelementptr inbounds i16, i16* %334, i64 %244
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %339, align 2
  %340 = getelementptr inbounds i16, i16* %338, i64 8
  %341 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %341, align 2
  %342 = getelementptr inbounds i16, i16* %338, i64 %244
  %343 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %343, align 2
  %344 = getelementptr inbounds i16, i16* %342, i64 8
  %345 = bitcast i16* %344 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %345, align 2
  %346 = getelementptr inbounds i16, i16* %342, i64 %244
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %347, align 2
  %348 = getelementptr inbounds i16, i16* %346, i64 8
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %349, align 2
  %350 = getelementptr inbounds i16, i16* %346, i64 %244
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %351, align 2
  %352 = getelementptr inbounds i16, i16* %350, i64 8
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %353, align 2
  %354 = getelementptr inbounds i16, i16* %350, i64 %244
  %355 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %355, align 2
  %356 = getelementptr inbounds i16, i16* %354, i64 8
  %357 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %357, align 2
  %358 = getelementptr inbounds i16, i16* %354, i64 %244
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %359, align 2
  %360 = getelementptr inbounds i16, i16* %358, i64 8
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %361, align 2
  %362 = getelementptr inbounds i16, i16* %358, i64 %244
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %363, align 2
  %364 = getelementptr inbounds i16, i16* %362, i64 8
  %365 = bitcast i16* %364 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %365, align 2
  %366 = getelementptr inbounds i16, i16* %362, i64 %244
  %367 = bitcast i16* %366 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %367, align 2
  %368 = getelementptr inbounds i16, i16* %366, i64 8
  %369 = bitcast i16* %368 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %369, align 2
  %370 = getelementptr inbounds i16, i16* %366, i64 %244
  %371 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %371, align 2
  %372 = getelementptr inbounds i16, i16* %370, i64 8
  %373 = bitcast i16* %372 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %373, align 2
  %374 = getelementptr inbounds i16, i16* %370, i64 %244
  %375 = bitcast i16* %374 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %375, align 2
  %376 = getelementptr inbounds i16, i16* %374, i64 8
  %377 = bitcast i16* %376 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %377, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 32, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 32, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 32, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 32, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 32
  br i1 %14, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  br label %9

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %47, %9 ]
  %11 = phi i16* [ %6, %4 ], [ %46, %9 ]
  %12 = getelementptr inbounds i16, i16* %5, i64 %10
  %13 = load i16, i16* %12, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %11, i64 %7
  %20 = or i64 %10, 1
  %21 = getelementptr inbounds i16, i16* %5, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = insertelement <8 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  %25 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %19, i64 8
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds i16, i16* %19, i64 %7
  %29 = or i64 %10, 2
  %30 = getelementptr inbounds i16, i16* %5, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> undef, i16 %31, i32 0
  %33 = shufflevector <8 x i16> %32, <8 x i16> undef, <8 x i32> zeroinitializer
  %34 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %28, i64 8
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds i16, i16* %28, i64 %7
  %38 = or i64 %10, 3
  %39 = getelementptr inbounds i16, i16* %5, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = insertelement <8 x i16> undef, i16 %40, i32 0
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <8 x i32> zeroinitializer
  %43 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %37, i64 8
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %37, i64 %7
  %47 = add nuw nsw i64 %10, 4
  %48 = icmp eq i64 %47, 32
  br i1 %48, label %8, label %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 32
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 16
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 30
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 62
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 32
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  br label %26

26:                                               ; preds = %87, %4
  %27 = phi i64 [ 0, %4 ], [ %89, %87 ]
  %28 = phi i16* [ %13, %4 ], [ %88, %87 ]
  %29 = mul i64 %17, %27
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = add i64 %29, 32
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %27
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds i16, i16* %6, i64 %27
  %37 = sub i8 0, %34
  %38 = zext i8 %37 to i32
  %39 = mul nuw nsw i32 %38, %15
  %40 = add nuw nsw i32 %39, 256
  %41 = shl nuw nsw i64 %27, 1
  %42 = or i64 %41, 1
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = icmp ult i8* %30, %18
  %45 = icmp ugt i8* %32, %2
  %46 = and i1 %44, %45
  %47 = bitcast i16* %36 to i8*
  %48 = icmp ult i8* %30, %43
  %49 = icmp ugt i8* %32, %47
  %50 = and i1 %48, %49
  %51 = or i1 %46, %50
  br i1 %51, label %91, label %52

52:                                               ; preds = %26
  %53 = insertelement <8 x i32> undef, i32 %35, i32 0
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> zeroinitializer
  %55 = insertelement <8 x i32> undef, i32 %40, i32 0
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> zeroinitializer
  %57 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !591
  %58 = zext <8 x i16> %57 to <8 x i32>
  %59 = mul nuw nsw <8 x i32> %54, %58
  %60 = load i16, i16* %36, align 2, !alias.scope !594
  %61 = insertelement <8 x i16> undef, i16 %60, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %63, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %65 = add nuw nsw <8 x i32> %56, %59
  %66 = add nuw nsw <8 x i32> %65, %22
  %67 = add nuw nsw <8 x i32> %66, %64
  %68 = lshr <8 x i32> %67, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2, !alias.scope !596, !noalias !598
  %71 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !591
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = mul nuw nsw <8 x i32> %54, %72
  %74 = load i16, i16* %36, align 2, !alias.scope !594
  %75 = insertelement <8 x i16> undef, i16 %74, i32 0
  %76 = shufflevector <8 x i16> %75, <8 x i16> undef, <8 x i32> zeroinitializer
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %77, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %79 = add nuw nsw <8 x i32> %56, %73
  %80 = add nuw nsw <8 x i32> %79, %25
  %81 = add nuw nsw <8 x i32> %80, %78
  %82 = lshr <8 x i32> %81, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %83 = trunc <8 x i32> %82 to <8 x i16>
  %84 = getelementptr inbounds i16, i16* %28, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %85, align 2, !alias.scope !596, !noalias !598
  br label %87

86:                                               ; preds = %87
  ret void

87:                                               ; preds = %91, %52
  %88 = getelementptr inbounds i16, i16* %28, i64 %14
  %89 = add nuw nsw i64 %27, 1
  %90 = icmp eq i64 %89, 32
  br i1 %90, label %86, label %26

91:                                               ; preds = %26, %91
  %92 = phi i64 [ %112, %91 ], [ 0, %26 ]
  %93 = getelementptr inbounds i16, i16* %5, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %95, %35
  %97 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %92
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = load i16, i16* %36, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %101, %99
  %103 = sub i8 0, %98
  %104 = zext i8 %103 to i32
  %105 = mul nuw nsw i32 %104, %16
  %106 = add nuw nsw i32 %40, %96
  %107 = add nuw nsw i32 %106, %105
  %108 = add nuw nsw i32 %107, %102
  %109 = lshr i32 %108, 9
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 %92
  store i16 %110, i16* %111, align 2
  %112 = add nuw nsw i64 %92, 1
  %113 = icmp eq i64 %112, 16
  br i1 %113, label %87, label %91, !llvm.loop !599
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 62
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %2, i64 10
  %21 = bitcast i8* %20 to i16*
  %22 = getelementptr inbounds i8, i8* %2, i64 12
  %23 = bitcast i8* %22 to i16*
  %24 = getelementptr inbounds i8, i8* %2, i64 14
  %25 = bitcast i8* %24 to i16*
  %26 = getelementptr inbounds i8, i8* %2, i64 16
  %27 = bitcast i8* %26 to i16*
  %28 = getelementptr inbounds i8, i8* %2, i64 18
  %29 = bitcast i8* %28 to i16*
  %30 = getelementptr inbounds i8, i8* %2, i64 20
  %31 = bitcast i8* %30 to i16*
  %32 = getelementptr inbounds i8, i8* %2, i64 22
  %33 = bitcast i8* %32 to i16*
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to i16*
  %36 = getelementptr inbounds i8, i8* %2, i64 26
  %37 = bitcast i8* %36 to i16*
  %38 = getelementptr inbounds i8, i8* %2, i64 28
  %39 = bitcast i8* %38 to i16*
  %40 = getelementptr inbounds i8, i8* %2, i64 30
  %41 = bitcast i8* %40 to i16*
  br label %42

42:                                               ; preds = %42, %4
  %43 = phi i64 [ 0, %4 ], [ %164, %42 ]
  %44 = phi i16* [ %9, %4 ], [ %163, %42 ]
  %45 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %43
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub i8 0, %46
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, %11
  %51 = add nuw nsw i32 %50, 128
  %52 = load i16, i16* %5, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, %47
  %55 = add nuw nsw i32 %51, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %44, align 2
  %58 = load i16, i16* %13, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, %47
  %61 = add nuw nsw i32 %51, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %44, i64 1
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %15, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, %47
  %68 = add nuw nsw i32 %51, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %44, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %17, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %47
  %75 = add nuw nsw i32 %51, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %44, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %19, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %80, %47
  %82 = add nuw nsw i32 %51, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %44, i64 4
  store i16 %84, i16* %85, align 2
  %86 = load i16, i16* %21, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %87, %47
  %89 = add nuw nsw i32 %51, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i16
  %92 = getelementptr inbounds i16, i16* %44, i64 5
  store i16 %91, i16* %92, align 2
  %93 = load i16, i16* %23, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %94, %47
  %96 = add nuw nsw i32 %51, %95
  %97 = lshr i32 %96, 8
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %44, i64 6
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %25, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %101, %47
  %103 = add nuw nsw i32 %51, %102
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i16
  %106 = getelementptr inbounds i16, i16* %44, i64 7
  store i16 %105, i16* %106, align 2
  %107 = load i16, i16* %27, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %108, %47
  %110 = add nuw nsw i32 %51, %109
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds i16, i16* %44, i64 8
  store i16 %112, i16* %113, align 2
  %114 = load i16, i16* %29, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %115, %47
  %117 = add nuw nsw i32 %51, %116
  %118 = lshr i32 %117, 8
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %44, i64 9
  store i16 %119, i16* %120, align 2
  %121 = load i16, i16* %31, align 2
  %122 = zext i16 %121 to i32
  %123 = mul nuw nsw i32 %122, %47
  %124 = add nuw nsw i32 %51, %123
  %125 = lshr i32 %124, 8
  %126 = trunc i32 %125 to i16
  %127 = getelementptr inbounds i16, i16* %44, i64 10
  store i16 %126, i16* %127, align 2
  %128 = load i16, i16* %33, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %129, %47
  %131 = add nuw nsw i32 %51, %130
  %132 = lshr i32 %131, 8
  %133 = trunc i32 %132 to i16
  %134 = getelementptr inbounds i16, i16* %44, i64 11
  store i16 %133, i16* %134, align 2
  %135 = load i16, i16* %35, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %136, %47
  %138 = add nuw nsw i32 %51, %137
  %139 = lshr i32 %138, 8
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds i16, i16* %44, i64 12
  store i16 %140, i16* %141, align 2
  %142 = load i16, i16* %37, align 2
  %143 = zext i16 %142 to i32
  %144 = mul nuw nsw i32 %143, %47
  %145 = add nuw nsw i32 %51, %144
  %146 = lshr i32 %145, 8
  %147 = trunc i32 %146 to i16
  %148 = getelementptr inbounds i16, i16* %44, i64 13
  store i16 %147, i16* %148, align 2
  %149 = load i16, i16* %39, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %150, %47
  %152 = add nuw nsw i32 %51, %151
  %153 = lshr i32 %152, 8
  %154 = trunc i32 %153 to i16
  %155 = getelementptr inbounds i16, i16* %44, i64 14
  store i16 %154, i16* %155, align 2
  %156 = load i16, i16* %41, align 2
  %157 = zext i16 %156 to i32
  %158 = mul nuw nsw i32 %157, %47
  %159 = add nuw nsw i32 %51, %158
  %160 = lshr i32 %159, 8
  %161 = trunc i32 %160 to i16
  %162 = getelementptr inbounds i16, i16* %44, i64 15
  store i16 %161, i16* %162, align 2
  %163 = getelementptr inbounds i16, i16* %44, i64 %10
  %164 = add nuw nsw i64 %43, 1
  %165 = icmp eq i64 %164, 32
  br i1 %165, label %166, label %42

166:                                              ; preds = %42
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi32EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = insertelement <8 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> zeroinitializer
  %15 = mul nuw nsw <8 x i32> %14, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %16 = add nuw nsw <8 x i32> %15, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %17 = mul nuw nsw <8 x i32> %14, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %18 = add nuw nsw <8 x i32> %17, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %19

19:                                               ; preds = %55, %4
  %20 = phi i64 [ 0, %4 ], [ %57, %55 ]
  %21 = phi i16* [ %9, %4 ], [ %56, %55 ]
  %22 = mul i64 %12, %20
  %23 = getelementptr inbounds i16, i16* %5, i64 %20
  %24 = shl nuw nsw i64 %20, 1
  %25 = or i64 %24, 1
  %26 = getelementptr i8, i8* %3, i64 %25
  %27 = add i64 %22, 32
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 %22
  %30 = bitcast i16* %23 to i8*
  %31 = icmp ult i8* %29, %26
  %32 = icmp ugt i8* %28, %30
  %33 = and i1 %31, %32
  br i1 %33, label %59, label %34

34:                                               ; preds = %19
  %35 = load i16, i16* %23, align 2, !alias.scope !600
  %36 = insertelement <8 x i16> undef, i16 %35, i32 0
  %37 = shufflevector <8 x i16> %36, <8 x i16> undef, <8 x i32> zeroinitializer
  %38 = zext <8 x i16> %37 to <8 x i32>
  %39 = mul nuw nsw <8 x i32> %38, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %40 = add nuw nsw <8 x i32> %16, %39
  %41 = lshr <8 x i32> %40, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %42 = trunc <8 x i32> %41 to <8 x i16>
  %43 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 2, !alias.scope !603, !noalias !600
  %44 = load i16, i16* %23, align 2, !alias.scope !600
  %45 = insertelement <8 x i16> undef, i16 %44, i32 0
  %46 = shufflevector <8 x i16> %45, <8 x i16> undef, <8 x i32> zeroinitializer
  %47 = zext <8 x i16> %46 to <8 x i32>
  %48 = mul nuw nsw <8 x i32> %47, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %49 = add nuw nsw <8 x i32> %18, %48
  %50 = lshr <8 x i32> %49, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %51 = trunc <8 x i32> %50 to <8 x i16>
  %52 = getelementptr inbounds i16, i16* %21, i64 8
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %53, align 2, !alias.scope !603, !noalias !600
  br label %55

54:                                               ; preds = %55
  ret void

55:                                               ; preds = %59, %34
  %56 = getelementptr inbounds i16, i16* %21, i64 %10
  %57 = add nuw nsw i64 %20, 1
  %58 = icmp eq i64 %57, 32
  br i1 %58, label %54, label %19

59:                                               ; preds = %19, %59
  %60 = phi i64 [ %90, %59 ], [ 0, %19 ]
  %61 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %60
  %62 = load i8, i8* %61, align 2
  %63 = zext i8 %62 to i32
  %64 = load i16, i16* %23, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %65, %63
  %67 = sub i8 0, %62
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %11
  %70 = add nuw nsw i32 %69, 128
  %71 = add nuw nsw i32 %70, %66
  %72 = lshr i32 %71, 8
  %73 = trunc i32 %72 to i16
  %74 = getelementptr inbounds i16, i16* %21, i64 %60
  store i16 %73, i16* %74, align 2
  %75 = or i64 %60, 1
  %76 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = load i16, i16* %23, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %80, %78
  %82 = sub i8 0, %77
  %83 = zext i8 %82 to i32
  %84 = mul nuw nsw i32 %83, %11
  %85 = add nuw nsw i32 %84, 128
  %86 = add nuw nsw i32 %85, %81
  %87 = lshr i32 %86, 8
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds i16, i16* %21, i64 %75
  store i16 %88, i16* %89, align 2
  %90 = add nuw nsw i64 %60, 2
  %91 = icmp eq i64 %90, 16
  br i1 %91, label %55, label %59, !llvm.loop !605
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi16ELi64ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i32 [ 0, %4 ], [ %42, %7 ]
  %9 = phi i16* [ %6, %4 ], [ %41, %7 ]
  %10 = bitcast i16* %9 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %10, align 2
  %11 = getelementptr inbounds i16, i16* %9, i64 8
  %12 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %12, align 2
  %13 = getelementptr inbounds i16, i16* %9, i64 %5
  %14 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %14, align 2
  %15 = getelementptr inbounds i16, i16* %13, i64 8
  %16 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %13, i64 %5
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %17, i64 8
  %20 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %17, i64 %5
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %21, i64 8
  %24 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds i16, i16* %21, i64 %5
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds i16, i16* %25, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds i16, i16* %25, i64 %5
  %30 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %29, i64 8
  %32 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %29, i64 %5
  %34 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %33, i64 8
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds i16, i16* %33, i64 %5
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %37, i64 8
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds i16, i16* %37, i64 %5
  %42 = add nuw nsw i32 %8, 8
  %43 = icmp eq i32 %42, 64
  br i1 %43, label %44, label %7

44:                                               ; preds = %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = bitcast i8* %0 to i16*
  %86 = lshr i64 %1, 1
  %87 = trunc i32 %84 to i16
  %88 = insertelement <8 x i16> undef, i16 %87, i32 0
  %89 = shufflevector <8 x i16> %88, <8 x i16> undef, <8 x i32> zeroinitializer
  %90 = insertelement <8 x i16> undef, i16 %87, i32 0
  %91 = shufflevector <8 x i16> %90, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %93

92:                                               ; preds = %93
  ret void

93:                                               ; preds = %93, %4
  %94 = phi i32 [ 0, %4 ], [ %128, %93 ]
  %95 = phi i16* [ %85, %4 ], [ %127, %93 ]
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %95, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i16, i16* %95, i64 %86
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i16, i16* %99, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %99, i64 %86
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %103, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %103, i64 %86
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %107, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %107, i64 %86
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %111, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds i16, i16* %111, i64 %86
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %115, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds i16, i16* %115, i64 %86
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds i16, i16* %119, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds i16, i16* %119, i64 %86
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %124, align 2
  %125 = getelementptr inbounds i16, i16* %123, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds i16, i16* %123, i64 %86
  %128 = add nuw nsw i32 %94, 8
  %129 = icmp eq i32 %128, 64
  br i1 %129, label %92, label %93
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to <4 x i16>*
  %6 = load <4 x i16>, <4 x i16>* %5, align 2
  %7 = zext <4 x i16> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = zext <4 x i16> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 16
  %15 = bitcast i8* %14 to <4 x i16>*
  %16 = load <4 x i16>, <4 x i16>* %15, align 2
  %17 = zext <4 x i16> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 24
  %20 = bitcast i8* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 32
  %25 = bitcast i8* %24 to <4 x i16>*
  %26 = load <4 x i16>, <4 x i16>* %25, align 2
  %27 = zext <4 x i16> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 40
  %30 = bitcast i8* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 48
  %35 = bitcast i8* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 56
  %40 = bitcast i8* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 64
  %45 = bitcast i8* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 72
  %50 = bitcast i8* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 80
  %55 = bitcast i8* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 88
  %60 = bitcast i8* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 96
  %65 = bitcast i8* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 104
  %70 = bitcast i8* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 112
  %75 = bitcast i8* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = zext <4 x i16> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 120
  %80 = bitcast i8* %79 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = bitcast i8* %0 to i16*
  %91 = lshr i64 %1, 1
  %92 = trunc i32 %89 to i16
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = insertelement <8 x i16> undef, i16 %92, i32 0
  %96 = shufflevector <8 x i16> %95, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %98

97:                                               ; preds = %98
  ret void

98:                                               ; preds = %98, %4
  %99 = phi i32 [ 0, %4 ], [ %133, %98 ]
  %100 = phi i16* [ %90, %4 ], [ %132, %98 ]
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %100, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i16, i16* %100, i64 %91
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i16, i16* %104, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %104, i64 %91
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %108, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %108, i64 %91
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %112, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %112, i64 %91
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %116, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %116, i64 %91
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %120, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %120, i64 %91
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %124, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %124, i64 %91
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i16, i16* %128, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %128, i64 %91
  %133 = add nuw nsw i32 %99, 8
  %134 = icmp eq i32 %133, 64
  br i1 %134, label %97, label %98
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 40
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %83, i32 0
  %85 = bitcast i8* %3 to <4 x i16>*
  %86 = load <4 x i16>, <4 x i16>* %85, align 2
  %87 = zext <4 x i16> %86 to <4 x i32>
  %88 = add nuw nsw <4 x i32> %84, %87
  %89 = getelementptr inbounds i8, i8* %3, i64 8
  %90 = bitcast i8* %89 to <4 x i16>*
  %91 = load <4 x i16>, <4 x i16>* %90, align 2
  %92 = zext <4 x i16> %91 to <4 x i32>
  %93 = add nuw nsw <4 x i32> %88, %92
  %94 = getelementptr inbounds i8, i8* %3, i64 16
  %95 = bitcast i8* %94 to <4 x i16>*
  %96 = load <4 x i16>, <4 x i16>* %95, align 2
  %97 = zext <4 x i16> %96 to <4 x i32>
  %98 = add nuw nsw <4 x i32> %93, %97
  %99 = getelementptr inbounds i8, i8* %3, i64 24
  %100 = bitcast i8* %99 to <4 x i16>*
  %101 = load <4 x i16>, <4 x i16>* %100, align 2
  %102 = zext <4 x i16> %101 to <4 x i32>
  %103 = add nuw nsw <4 x i32> %98, %102
  %104 = getelementptr inbounds i8, i8* %3, i64 32
  %105 = bitcast i8* %104 to <4 x i16>*
  %106 = load <4 x i16>, <4 x i16>* %105, align 2
  %107 = zext <4 x i16> %106 to <4 x i32>
  %108 = add nuw nsw <4 x i32> %103, %107
  %109 = getelementptr inbounds i8, i8* %3, i64 40
  %110 = bitcast i8* %109 to <4 x i16>*
  %111 = load <4 x i16>, <4 x i16>* %110, align 2
  %112 = zext <4 x i16> %111 to <4 x i32>
  %113 = add nuw nsw <4 x i32> %108, %112
  %114 = getelementptr inbounds i8, i8* %3, i64 48
  %115 = bitcast i8* %114 to <4 x i16>*
  %116 = load <4 x i16>, <4 x i16>* %115, align 2
  %117 = zext <4 x i16> %116 to <4 x i32>
  %118 = add nuw nsw <4 x i32> %113, %117
  %119 = getelementptr inbounds i8, i8* %3, i64 56
  %120 = bitcast i8* %119 to <4 x i16>*
  %121 = load <4 x i16>, <4 x i16>* %120, align 2
  %122 = zext <4 x i16> %121 to <4 x i32>
  %123 = add nuw nsw <4 x i32> %118, %122
  %124 = getelementptr inbounds i8, i8* %3, i64 64
  %125 = bitcast i8* %124 to <4 x i16>*
  %126 = load <4 x i16>, <4 x i16>* %125, align 2
  %127 = zext <4 x i16> %126 to <4 x i32>
  %128 = add nuw nsw <4 x i32> %123, %127
  %129 = getelementptr inbounds i8, i8* %3, i64 72
  %130 = bitcast i8* %129 to <4 x i16>*
  %131 = load <4 x i16>, <4 x i16>* %130, align 2
  %132 = zext <4 x i16> %131 to <4 x i32>
  %133 = add nuw nsw <4 x i32> %128, %132
  %134 = getelementptr inbounds i8, i8* %3, i64 80
  %135 = bitcast i8* %134 to <4 x i16>*
  %136 = load <4 x i16>, <4 x i16>* %135, align 2
  %137 = zext <4 x i16> %136 to <4 x i32>
  %138 = add nuw nsw <4 x i32> %133, %137
  %139 = getelementptr inbounds i8, i8* %3, i64 88
  %140 = bitcast i8* %139 to <4 x i16>*
  %141 = load <4 x i16>, <4 x i16>* %140, align 2
  %142 = zext <4 x i16> %141 to <4 x i32>
  %143 = add nuw nsw <4 x i32> %138, %142
  %144 = getelementptr inbounds i8, i8* %3, i64 96
  %145 = bitcast i8* %144 to <4 x i16>*
  %146 = load <4 x i16>, <4 x i16>* %145, align 2
  %147 = zext <4 x i16> %146 to <4 x i32>
  %148 = add nuw nsw <4 x i32> %143, %147
  %149 = getelementptr inbounds i8, i8* %3, i64 104
  %150 = bitcast i8* %149 to <4 x i16>*
  %151 = load <4 x i16>, <4 x i16>* %150, align 2
  %152 = zext <4 x i16> %151 to <4 x i32>
  %153 = add nuw nsw <4 x i32> %148, %152
  %154 = getelementptr inbounds i8, i8* %3, i64 112
  %155 = bitcast i8* %154 to <4 x i16>*
  %156 = load <4 x i16>, <4 x i16>* %155, align 2
  %157 = zext <4 x i16> %156 to <4 x i32>
  %158 = add nuw nsw <4 x i32> %153, %157
  %159 = getelementptr inbounds i8, i8* %3, i64 120
  %160 = bitcast i8* %159 to <4 x i16>*
  %161 = load <4 x i16>, <4 x i16>* %160, align 2
  %162 = zext <4 x i16> %161 to <4 x i32>
  %163 = add nuw nsw <4 x i32> %158, %162
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %165 = add <4 x i32> %163, %164
  %166 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %167 = add <4 x i32> %165, %166
  %168 = extractelement <4 x i32> %167, i32 0
  %169 = udiv i32 %168, 80
  %170 = bitcast i8* %0 to i16*
  %171 = lshr i64 %1, 1
  %172 = trunc i32 %169 to i16
  %173 = insertelement <8 x i16> undef, i16 %172, i32 0
  %174 = shufflevector <8 x i16> %173, <8 x i16> undef, <8 x i32> zeroinitializer
  %175 = insertelement <8 x i16> undef, i16 %172, i32 0
  %176 = shufflevector <8 x i16> %175, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %178

177:                                              ; preds = %178
  ret void

178:                                              ; preds = %178, %4
  %179 = phi i32 [ 0, %4 ], [ %213, %178 ]
  %180 = phi i16* [ %170, %4 ], [ %212, %178 ]
  %181 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %181, align 2
  %182 = getelementptr inbounds i16, i16* %180, i64 8
  %183 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %183, align 2
  %184 = getelementptr inbounds i16, i16* %180, i64 %171
  %185 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %185, align 2
  %186 = getelementptr inbounds i16, i16* %184, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %187, align 2
  %188 = getelementptr inbounds i16, i16* %184, i64 %171
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %189, align 2
  %190 = getelementptr inbounds i16, i16* %188, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %191, align 2
  %192 = getelementptr inbounds i16, i16* %188, i64 %171
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds i16, i16* %192, i64 8
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %195, align 2
  %196 = getelementptr inbounds i16, i16* %192, i64 %171
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %197, align 2
  %198 = getelementptr inbounds i16, i16* %196, i64 8
  %199 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %199, align 2
  %200 = getelementptr inbounds i16, i16* %196, i64 %171
  %201 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %201, align 2
  %202 = getelementptr inbounds i16, i16* %200, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %203, align 2
  %204 = getelementptr inbounds i16, i16* %200, i64 %171
  %205 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %205, align 2
  %206 = getelementptr inbounds i16, i16* %204, i64 8
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %207, align 2
  %208 = getelementptr inbounds i16, i16* %204, i64 %171
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %209, align 2
  %210 = getelementptr inbounds i16, i16* %208, i64 8
  %211 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %211, align 2
  %212 = getelementptr inbounds i16, i16* %208, i64 %171
  %213 = add nuw nsw i32 %179, 8
  %214 = icmp eq i32 %213, 64
  br i1 %214, label %177, label %178
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 32, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 32, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 32, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 32, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 64
  br i1 %14, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  br label %9

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %47, %9 ]
  %11 = phi i16* [ %6, %4 ], [ %46, %9 ]
  %12 = getelementptr inbounds i16, i16* %5, i64 %10
  %13 = load i16, i16* %12, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %11, i64 %7
  %20 = or i64 %10, 1
  %21 = getelementptr inbounds i16, i16* %5, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = insertelement <8 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  %25 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %19, i64 8
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds i16, i16* %19, i64 %7
  %29 = or i64 %10, 2
  %30 = getelementptr inbounds i16, i16* %5, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> undef, i16 %31, i32 0
  %33 = shufflevector <8 x i16> %32, <8 x i16> undef, <8 x i32> zeroinitializer
  %34 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %28, i64 8
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds i16, i16* %28, i64 %7
  %38 = or i64 %10, 3
  %39 = getelementptr inbounds i16, i16* %5, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = insertelement <8 x i16> undef, i16 %40, i32 0
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <8 x i32> zeroinitializer
  %43 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %37, i64 8
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %37, i64 %7
  %47 = add nuw nsw i64 %10, 4
  %48 = icmp eq i64 %47, 64
  br i1 %48, label %8, label %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 64
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 16
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 30
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 126
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 32
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  br label %26

26:                                               ; preds = %87, %4
  %27 = phi i64 [ 0, %4 ], [ %89, %87 ]
  %28 = phi i16* [ %13, %4 ], [ %88, %87 ]
  %29 = mul i64 %17, %27
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = add i64 %29, 32
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %27
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds i16, i16* %6, i64 %27
  %37 = sub i8 0, %34
  %38 = zext i8 %37 to i32
  %39 = mul nuw nsw i32 %38, %15
  %40 = add nuw nsw i32 %39, 256
  %41 = shl nuw nsw i64 %27, 1
  %42 = or i64 %41, 1
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = icmp ult i8* %30, %18
  %45 = icmp ugt i8* %32, %2
  %46 = and i1 %44, %45
  %47 = bitcast i16* %36 to i8*
  %48 = icmp ult i8* %30, %43
  %49 = icmp ugt i8* %32, %47
  %50 = and i1 %48, %49
  %51 = or i1 %46, %50
  br i1 %51, label %91, label %52

52:                                               ; preds = %26
  %53 = insertelement <8 x i32> undef, i32 %35, i32 0
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> zeroinitializer
  %55 = insertelement <8 x i32> undef, i32 %40, i32 0
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> zeroinitializer
  %57 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !606
  %58 = zext <8 x i16> %57 to <8 x i32>
  %59 = mul nuw nsw <8 x i32> %54, %58
  %60 = load i16, i16* %36, align 2, !alias.scope !609
  %61 = insertelement <8 x i16> undef, i16 %60, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %63, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %65 = add nuw nsw <8 x i32> %56, %59
  %66 = add nuw nsw <8 x i32> %65, %22
  %67 = add nuw nsw <8 x i32> %66, %64
  %68 = lshr <8 x i32> %67, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2, !alias.scope !611, !noalias !613
  %71 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !606
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = mul nuw nsw <8 x i32> %54, %72
  %74 = load i16, i16* %36, align 2, !alias.scope !609
  %75 = insertelement <8 x i16> undef, i16 %74, i32 0
  %76 = shufflevector <8 x i16> %75, <8 x i16> undef, <8 x i32> zeroinitializer
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %77, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %79 = add nuw nsw <8 x i32> %56, %73
  %80 = add nuw nsw <8 x i32> %79, %25
  %81 = add nuw nsw <8 x i32> %80, %78
  %82 = lshr <8 x i32> %81, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %83 = trunc <8 x i32> %82 to <8 x i16>
  %84 = getelementptr inbounds i16, i16* %28, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %85, align 2, !alias.scope !611, !noalias !613
  br label %87

86:                                               ; preds = %87
  ret void

87:                                               ; preds = %91, %52
  %88 = getelementptr inbounds i16, i16* %28, i64 %14
  %89 = add nuw nsw i64 %27, 1
  %90 = icmp eq i64 %89, 64
  br i1 %90, label %86, label %26

91:                                               ; preds = %26, %91
  %92 = phi i64 [ %112, %91 ], [ 0, %26 ]
  %93 = getelementptr inbounds i16, i16* %5, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %95, %35
  %97 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %92
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = load i16, i16* %36, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %101, %99
  %103 = sub i8 0, %98
  %104 = zext i8 %103 to i32
  %105 = mul nuw nsw i32 %104, %16
  %106 = add nuw nsw i32 %40, %96
  %107 = add nuw nsw i32 %106, %105
  %108 = add nuw nsw i32 %107, %102
  %109 = lshr i32 %108, 9
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 %92
  store i16 %110, i16* %111, align 2
  %112 = add nuw nsw i64 %92, 1
  %113 = icmp eq i64 %112, 16
  br i1 %113, label %87, label %91, !llvm.loop !614
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 126
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %2, i64 6
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %2, i64 8
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %2, i64 10
  %21 = bitcast i8* %20 to i16*
  %22 = getelementptr inbounds i8, i8* %2, i64 12
  %23 = bitcast i8* %22 to i16*
  %24 = getelementptr inbounds i8, i8* %2, i64 14
  %25 = bitcast i8* %24 to i16*
  %26 = getelementptr inbounds i8, i8* %2, i64 16
  %27 = bitcast i8* %26 to i16*
  %28 = getelementptr inbounds i8, i8* %2, i64 18
  %29 = bitcast i8* %28 to i16*
  %30 = getelementptr inbounds i8, i8* %2, i64 20
  %31 = bitcast i8* %30 to i16*
  %32 = getelementptr inbounds i8, i8* %2, i64 22
  %33 = bitcast i8* %32 to i16*
  %34 = getelementptr inbounds i8, i8* %2, i64 24
  %35 = bitcast i8* %34 to i16*
  %36 = getelementptr inbounds i8, i8* %2, i64 26
  %37 = bitcast i8* %36 to i16*
  %38 = getelementptr inbounds i8, i8* %2, i64 28
  %39 = bitcast i8* %38 to i16*
  %40 = getelementptr inbounds i8, i8* %2, i64 30
  %41 = bitcast i8* %40 to i16*
  br label %42

42:                                               ; preds = %42, %4
  %43 = phi i64 [ 0, %4 ], [ %164, %42 ]
  %44 = phi i16* [ %9, %4 ], [ %163, %42 ]
  %45 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %43
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub i8 0, %46
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, %11
  %51 = add nuw nsw i32 %50, 128
  %52 = load i16, i16* %5, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %53, %47
  %55 = add nuw nsw i32 %51, %54
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %44, align 2
  %58 = load i16, i16* %13, align 2
  %59 = zext i16 %58 to i32
  %60 = mul nuw nsw i32 %59, %47
  %61 = add nuw nsw i32 %51, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %44, i64 1
  store i16 %63, i16* %64, align 2
  %65 = load i16, i16* %15, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, %47
  %68 = add nuw nsw i32 %51, %67
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %44, i64 2
  store i16 %70, i16* %71, align 2
  %72 = load i16, i16* %17, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %73, %47
  %75 = add nuw nsw i32 %51, %74
  %76 = lshr i32 %75, 8
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %44, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %19, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %80, %47
  %82 = add nuw nsw i32 %51, %81
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %44, i64 4
  store i16 %84, i16* %85, align 2
  %86 = load i16, i16* %21, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %87, %47
  %89 = add nuw nsw i32 %51, %88
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i16
  %92 = getelementptr inbounds i16, i16* %44, i64 5
  store i16 %91, i16* %92, align 2
  %93 = load i16, i16* %23, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %94, %47
  %96 = add nuw nsw i32 %51, %95
  %97 = lshr i32 %96, 8
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %44, i64 6
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %25, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %101, %47
  %103 = add nuw nsw i32 %51, %102
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i16
  %106 = getelementptr inbounds i16, i16* %44, i64 7
  store i16 %105, i16* %106, align 2
  %107 = load i16, i16* %27, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %108, %47
  %110 = add nuw nsw i32 %51, %109
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds i16, i16* %44, i64 8
  store i16 %112, i16* %113, align 2
  %114 = load i16, i16* %29, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %115, %47
  %117 = add nuw nsw i32 %51, %116
  %118 = lshr i32 %117, 8
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %44, i64 9
  store i16 %119, i16* %120, align 2
  %121 = load i16, i16* %31, align 2
  %122 = zext i16 %121 to i32
  %123 = mul nuw nsw i32 %122, %47
  %124 = add nuw nsw i32 %51, %123
  %125 = lshr i32 %124, 8
  %126 = trunc i32 %125 to i16
  %127 = getelementptr inbounds i16, i16* %44, i64 10
  store i16 %126, i16* %127, align 2
  %128 = load i16, i16* %33, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %129, %47
  %131 = add nuw nsw i32 %51, %130
  %132 = lshr i32 %131, 8
  %133 = trunc i32 %132 to i16
  %134 = getelementptr inbounds i16, i16* %44, i64 11
  store i16 %133, i16* %134, align 2
  %135 = load i16, i16* %35, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %136, %47
  %138 = add nuw nsw i32 %51, %137
  %139 = lshr i32 %138, 8
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds i16, i16* %44, i64 12
  store i16 %140, i16* %141, align 2
  %142 = load i16, i16* %37, align 2
  %143 = zext i16 %142 to i32
  %144 = mul nuw nsw i32 %143, %47
  %145 = add nuw nsw i32 %51, %144
  %146 = lshr i32 %145, 8
  %147 = trunc i32 %146 to i16
  %148 = getelementptr inbounds i16, i16* %44, i64 13
  store i16 %147, i16* %148, align 2
  %149 = load i16, i16* %39, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %150, %47
  %152 = add nuw nsw i32 %51, %151
  %153 = lshr i32 %152, 8
  %154 = trunc i32 %153 to i16
  %155 = getelementptr inbounds i16, i16* %44, i64 14
  store i16 %154, i16* %155, align 2
  %156 = load i16, i16* %41, align 2
  %157 = zext i16 %156 to i32
  %158 = mul nuw nsw i32 %157, %47
  %159 = add nuw nsw i32 %51, %158
  %160 = lshr i32 %159, 8
  %161 = trunc i32 %160 to i16
  %162 = getelementptr inbounds i16, i16* %44, i64 15
  store i16 %161, i16* %162, align 2
  %163 = getelementptr inbounds i16, i16* %44, i64 %10
  %164 = add nuw nsw i64 %43, 1
  %165 = icmp eq i64 %164, 64
  br i1 %165, label %166, label %42

166:                                              ; preds = %42
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi16ELi64EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = insertelement <8 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> zeroinitializer
  %15 = mul nuw nsw <8 x i32> %14, <i32 1, i32 31, i32 60, i32 86, i32 111, i32 133, i32 154, i32 172>
  %16 = add nuw nsw <8 x i32> %15, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %17 = mul nuw nsw <8 x i32> %14, <i32 188, i32 202, i32 213, i32 223, i32 230, i32 236, i32 239, i32 240>
  %18 = add nuw nsw <8 x i32> %17, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %19

19:                                               ; preds = %55, %4
  %20 = phi i64 [ 0, %4 ], [ %57, %55 ]
  %21 = phi i16* [ %9, %4 ], [ %56, %55 ]
  %22 = mul i64 %12, %20
  %23 = getelementptr inbounds i16, i16* %5, i64 %20
  %24 = shl nuw nsw i64 %20, 1
  %25 = or i64 %24, 1
  %26 = getelementptr i8, i8* %3, i64 %25
  %27 = add i64 %22, 32
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 %22
  %30 = bitcast i16* %23 to i8*
  %31 = icmp ult i8* %29, %26
  %32 = icmp ugt i8* %28, %30
  %33 = and i1 %31, %32
  br i1 %33, label %59, label %34

34:                                               ; preds = %19
  %35 = load i16, i16* %23, align 2, !alias.scope !615
  %36 = insertelement <8 x i16> undef, i16 %35, i32 0
  %37 = shufflevector <8 x i16> %36, <8 x i16> undef, <8 x i32> zeroinitializer
  %38 = zext <8 x i16> %37 to <8 x i32>
  %39 = mul nuw nsw <8 x i32> %38, <i32 255, i32 225, i32 196, i32 170, i32 145, i32 123, i32 102, i32 84>
  %40 = add nuw nsw <8 x i32> %16, %39
  %41 = lshr <8 x i32> %40, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %42 = trunc <8 x i32> %41 to <8 x i16>
  %43 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 2, !alias.scope !618, !noalias !615
  %44 = load i16, i16* %23, align 2, !alias.scope !615
  %45 = insertelement <8 x i16> undef, i16 %44, i32 0
  %46 = shufflevector <8 x i16> %45, <8 x i16> undef, <8 x i32> zeroinitializer
  %47 = zext <8 x i16> %46 to <8 x i32>
  %48 = mul nuw nsw <8 x i32> %47, <i32 68, i32 54, i32 43, i32 33, i32 26, i32 20, i32 17, i32 16>
  %49 = add nuw nsw <8 x i32> %18, %48
  %50 = lshr <8 x i32> %49, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %51 = trunc <8 x i32> %50 to <8 x i16>
  %52 = getelementptr inbounds i16, i16* %21, i64 8
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %53, align 2, !alias.scope !618, !noalias !615
  br label %55

54:                                               ; preds = %55
  ret void

55:                                               ; preds = %59, %34
  %56 = getelementptr inbounds i16, i16* %21, i64 %10
  %57 = add nuw nsw i64 %20, 1
  %58 = icmp eq i64 %57, 64
  br i1 %58, label %54, label %19

59:                                               ; preds = %19, %59
  %60 = phi i64 [ %90, %59 ], [ 0, %19 ]
  %61 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %60
  %62 = load i8, i8* %61, align 2
  %63 = zext i8 %62 to i32
  %64 = load i16, i16* %23, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %65, %63
  %67 = sub i8 0, %62
  %68 = zext i8 %67 to i32
  %69 = mul nuw nsw i32 %68, %11
  %70 = add nuw nsw i32 %69, 128
  %71 = add nuw nsw i32 %70, %66
  %72 = lshr i32 %71, 8
  %73 = trunc i32 %72 to i16
  %74 = getelementptr inbounds i16, i16* %21, i64 %60
  store i16 %73, i16* %74, align 2
  %75 = or i64 %60, 1
  %76 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = load i16, i16* %23, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %80, %78
  %82 = sub i8 0, %77
  %83 = zext i8 %82 to i32
  %84 = mul nuw nsw i32 %83, %11
  %85 = add nuw nsw i32 %84, 128
  %86 = add nuw nsw i32 %85, %81
  %87 = lshr i32 %86, 8
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds i16, i16* %21, i64 %75
  store i16 %88, i16* %89, align 2
  %90 = add nuw nsw i64 %60, 2
  %91 = icmp eq i64 %90, 16
  br i1 %91, label %55, label %59, !llvm.loop !620
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi8ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i8, i8* %0, i64 32
  %11 = bitcast i8* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 48
  %13 = bitcast i8* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %6, i64 %5
  %15 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i16, i16* %14, i64 8
  %17 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %14, i64 16
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i16, i16* %14, i64 24
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds i16, i16* %14, i64 %5
  %23 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds i16, i16* %22, i64 8
  %25 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 16
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds i16, i16* %22, i64 24
  %29 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %22, i64 %5
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %30, i64 8
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds i16, i16* %30, i64 16
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds i16, i16* %30, i64 24
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %30, i64 %5
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 8
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 16
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %38, i64 24
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %38, i64 %5
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i16, i16* %46, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds i16, i16* %46, i64 16
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds i16, i16* %46, i64 24
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds i16, i16* %46, i64 %5
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds i16, i16* %54, i64 16
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds i16, i16* %54, i64 24
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds i16, i16* %54, i64 %5
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds i16, i16* %62, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %62, i64 24
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %69, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 16
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %2, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %2, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %2, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %2, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %2, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %2, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %2, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %2, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %2, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %2, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %2, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %2, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %2, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %2, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %2, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = lshr i32 %163, 5
  %165 = lshr i64 %1, 1
  %166 = trunc i32 %164 to i16
  %167 = insertelement <8 x i16> undef, i16 %166, i32 0
  %168 = shufflevector <8 x i16> %167, <8 x i16> undef, <8 x i32> zeroinitializer
  %169 = insertelement <8 x i16> undef, i16 %166, i32 0
  %170 = shufflevector <8 x i16> %169, <8 x i16> undef, <8 x i32> zeroinitializer
  %171 = insertelement <8 x i16> undef, i16 %166, i32 0
  %172 = shufflevector <8 x i16> %171, <8 x i16> undef, <8 x i32> zeroinitializer
  %173 = insertelement <8 x i16> undef, i16 %166, i32 0
  %174 = shufflevector <8 x i16> %173, <8 x i16> undef, <8 x i32> zeroinitializer
  %175 = bitcast i8* %0 to i16*
  %176 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i8, i8* %0, i64 16
  %178 = bitcast i8* %177 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds i8, i8* %0, i64 32
  %180 = bitcast i8* %179 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i8, i8* %0, i64 48
  %182 = bitcast i8* %181 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %175, i64 %165
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %183, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %183, i64 16
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %183, i64 24
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %183, i64 %165
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %191, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %191, i64 16
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %191, i64 24
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %191, i64 %165
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %199, i64 8
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %199, i64 16
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %199, i64 24
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %199, i64 %165
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %207, i64 8
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %207, i64 16
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %207, i64 24
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds i16, i16* %207, i64 %165
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %216, align 2
  %217 = getelementptr inbounds i16, i16* %215, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %218, align 2
  %219 = getelementptr inbounds i16, i16* %215, i64 16
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %220, align 2
  %221 = getelementptr inbounds i16, i16* %215, i64 24
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %222, align 2
  %223 = getelementptr inbounds i16, i16* %215, i64 %165
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %224, align 2
  %225 = getelementptr inbounds i16, i16* %223, i64 8
  %226 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %226, align 2
  %227 = getelementptr inbounds i16, i16* %223, i64 16
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %228, align 2
  %229 = getelementptr inbounds i16, i16* %223, i64 24
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %230, align 2
  %231 = getelementptr inbounds i16, i16* %223, i64 %165
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %232, align 2
  %233 = getelementptr inbounds i16, i16* %231, i64 8
  %234 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %234, align 2
  %235 = getelementptr inbounds i16, i16* %231, i64 16
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %236, align 2
  %237 = getelementptr inbounds i16, i16* %231, i64 24
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %238, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 4
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = lshr i32 %43, 3
  %45 = lshr i64 %1, 1
  %46 = trunc i32 %44 to i16
  %47 = insertelement <8 x i16> undef, i16 %46, i32 0
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <8 x i32> zeroinitializer
  %49 = insertelement <8 x i16> undef, i16 %46, i32 0
  %50 = shufflevector <8 x i16> %49, <8 x i16> undef, <8 x i32> zeroinitializer
  %51 = insertelement <8 x i16> undef, i16 %46, i32 0
  %52 = shufflevector <8 x i16> %51, <8 x i16> undef, <8 x i32> zeroinitializer
  %53 = insertelement <8 x i16> undef, i16 %46, i32 0
  %54 = shufflevector <8 x i16> %53, <8 x i16> undef, <8 x i32> zeroinitializer
  %55 = bitcast i8* %0 to i16*
  %56 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i8, i8* %0, i64 16
  %58 = bitcast i8* %57 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %58, align 2
  %59 = getelementptr inbounds i8, i8* %0, i64 32
  %60 = bitcast i8* %59 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds i8, i8* %0, i64 48
  %62 = bitcast i8* %61 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds i16, i16* %55, i64 %45
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds i16, i16* %63, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %66, align 2
  %67 = getelementptr inbounds i16, i16* %63, i64 16
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %68, align 2
  %69 = getelementptr inbounds i16, i16* %63, i64 24
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds i16, i16* %63, i64 %45
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %72, align 2
  %73 = getelementptr inbounds i16, i16* %71, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds i16, i16* %71, i64 16
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds i16, i16* %71, i64 24
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds i16, i16* %71, i64 %45
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds i16, i16* %79, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds i16, i16* %79, i64 16
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %84, align 2
  %85 = getelementptr inbounds i16, i16* %79, i64 24
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %86, align 2
  %87 = getelementptr inbounds i16, i16* %79, i64 %45
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %88, align 2
  %89 = getelementptr inbounds i16, i16* %87, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds i16, i16* %87, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i16, i16* %87, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i16, i16* %87, i64 %45
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %95, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i16, i16* %95, i64 16
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i16, i16* %95, i64 24
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %95, i64 %45
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %103, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %103, i64 16
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %103, i64 24
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %103, i64 %45
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %111, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds i16, i16* %111, i64 16
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %111, i64 24
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %118, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 20
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %2, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %2, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %2, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %2, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %2, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %2, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %2, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %2, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %2, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %2, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %2, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %2, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %2, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %2, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %2, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = bitcast i8* %3 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = add nuw nsw i32 %163, %166
  %168 = getelementptr inbounds i8, i8* %3, i64 2
  %169 = bitcast i8* %168 to i16*
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nuw nsw i32 %167, %171
  %173 = getelementptr inbounds i8, i8* %3, i64 4
  %174 = bitcast i8* %173 to i16*
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = add nuw nsw i32 %172, %176
  %178 = getelementptr inbounds i8, i8* %3, i64 6
  %179 = bitcast i8* %178 to i16*
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = add nuw nsw i32 %177, %181
  %183 = getelementptr inbounds i8, i8* %3, i64 8
  %184 = bitcast i8* %183 to i16*
  %185 = load i16, i16* %184, align 2
  %186 = zext i16 %185 to i32
  %187 = add nuw nsw i32 %182, %186
  %188 = getelementptr inbounds i8, i8* %3, i64 10
  %189 = bitcast i8* %188 to i16*
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add nuw nsw i32 %187, %191
  %193 = getelementptr inbounds i8, i8* %3, i64 12
  %194 = bitcast i8* %193 to i16*
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %192, %196
  %198 = getelementptr inbounds i8, i8* %3, i64 14
  %199 = bitcast i8* %198 to i16*
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = add nuw nsw i32 %197, %201
  %203 = udiv i32 %202, 40
  %204 = lshr i64 %1, 1
  %205 = trunc i32 %203 to i16
  %206 = insertelement <8 x i16> undef, i16 %205, i32 0
  %207 = shufflevector <8 x i16> %206, <8 x i16> undef, <8 x i32> zeroinitializer
  %208 = insertelement <8 x i16> undef, i16 %205, i32 0
  %209 = shufflevector <8 x i16> %208, <8 x i16> undef, <8 x i32> zeroinitializer
  %210 = insertelement <8 x i16> undef, i16 %205, i32 0
  %211 = shufflevector <8 x i16> %210, <8 x i16> undef, <8 x i32> zeroinitializer
  %212 = insertelement <8 x i16> undef, i16 %205, i32 0
  %213 = shufflevector <8 x i16> %212, <8 x i16> undef, <8 x i32> zeroinitializer
  %214 = bitcast i8* %0 to i16*
  %215 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %215, align 2
  %216 = getelementptr inbounds i8, i8* %0, i64 16
  %217 = bitcast i8* %216 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %217, align 2
  %218 = getelementptr inbounds i8, i8* %0, i64 32
  %219 = bitcast i8* %218 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %219, align 2
  %220 = getelementptr inbounds i8, i8* %0, i64 48
  %221 = bitcast i8* %220 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %221, align 2
  %222 = getelementptr inbounds i16, i16* %214, i64 %204
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %223, align 2
  %224 = getelementptr inbounds i16, i16* %222, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %225, align 2
  %226 = getelementptr inbounds i16, i16* %222, i64 16
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %227, align 2
  %228 = getelementptr inbounds i16, i16* %222, i64 24
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds i16, i16* %222, i64 %204
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %231, align 2
  %232 = getelementptr inbounds i16, i16* %230, i64 8
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %233, align 2
  %234 = getelementptr inbounds i16, i16* %230, i64 16
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %235, align 2
  %236 = getelementptr inbounds i16, i16* %230, i64 24
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %237, align 2
  %238 = getelementptr inbounds i16, i16* %230, i64 %204
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %239, align 2
  %240 = getelementptr inbounds i16, i16* %238, i64 8
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %241, align 2
  %242 = getelementptr inbounds i16, i16* %238, i64 16
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %243, align 2
  %244 = getelementptr inbounds i16, i16* %238, i64 24
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %245, align 2
  %246 = getelementptr inbounds i16, i16* %238, i64 %204
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %247, align 2
  %248 = getelementptr inbounds i16, i16* %246, i64 8
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %249, align 2
  %250 = getelementptr inbounds i16, i16* %246, i64 16
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %251, align 2
  %252 = getelementptr inbounds i16, i16* %246, i64 24
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %253, align 2
  %254 = getelementptr inbounds i16, i16* %246, i64 %204
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %255, align 2
  %256 = getelementptr inbounds i16, i16* %254, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %257, align 2
  %258 = getelementptr inbounds i16, i16* %254, i64 16
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %259, align 2
  %260 = getelementptr inbounds i16, i16* %254, i64 24
  %261 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %261, align 2
  %262 = getelementptr inbounds i16, i16* %254, i64 %204
  %263 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %263, align 2
  %264 = getelementptr inbounds i16, i16* %262, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %265, align 2
  %266 = getelementptr inbounds i16, i16* %262, i64 16
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %267, align 2
  %268 = getelementptr inbounds i16, i16* %262, i64 24
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds i16, i16* %262, i64 %204
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %271, align 2
  %272 = getelementptr inbounds i16, i16* %270, i64 8
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %273, align 2
  %274 = getelementptr inbounds i16, i16* %270, i64 16
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %275, align 2
  %276 = getelementptr inbounds i16, i16* %270, i64 24
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %277, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 64, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 64, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 64, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 64, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 64, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 64, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 64, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 64, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %3 to i16*
  %7 = bitcast i8* %0 to i16*
  %8 = load i16, i16* %6, align 2
  %9 = insertelement <8 x i16> undef, i16 %8, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i8, i8* %0, i64 32
  %15 = bitcast i8* %14 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i8, i8* %0, i64 48
  %17 = bitcast i8* %16 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %7, i64 %5
  %19 = getelementptr inbounds i8, i8* %3, i64 2
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = insertelement <8 x i16> undef, i16 %21, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  %24 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds i16, i16* %18, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds i16, i16* %18, i64 16
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds i16, i16* %18, i64 24
  %30 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %18, i64 %5
  %32 = getelementptr inbounds i8, i8* %3, i64 4
  %33 = bitcast i8* %32 to i16*
  %34 = load i16, i16* %33, align 2
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %31, i64 8
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %31, i64 16
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %31, i64 24
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %31, i64 %5
  %45 = getelementptr inbounds i8, i8* %3, i64 6
  %46 = bitcast i8* %45 to i16*
  %47 = load i16, i16* %46, align 2
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds i16, i16* %44, i64 8
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %44, i64 16
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds i16, i16* %44, i64 24
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i16, i16* %44, i64 %5
  %58 = getelementptr inbounds i8, i8* %3, i64 8
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <8 x i16> undef, i16 %60, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds i16, i16* %57, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %57, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %57, i64 24
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %69, align 2
  %70 = getelementptr inbounds i16, i16* %57, i64 %5
  %71 = getelementptr inbounds i8, i8* %3, i64 10
  %72 = bitcast i8* %71 to i16*
  %73 = load i16, i16* %72, align 2
  %74 = insertelement <8 x i16> undef, i16 %73, i32 0
  %75 = shufflevector <8 x i16> %74, <8 x i16> undef, <8 x i32> zeroinitializer
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds i16, i16* %70, i64 16
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds i16, i16* %70, i64 24
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds i16, i16* %70, i64 %5
  %84 = getelementptr inbounds i8, i8* %3, i64 12
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %89, align 2
  %90 = getelementptr inbounds i16, i16* %83, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds i16, i16* %83, i64 16
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %93, align 2
  %94 = getelementptr inbounds i16, i16* %83, i64 24
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds i16, i16* %83, i64 %5
  %97 = getelementptr inbounds i8, i8* %3, i64 14
  %98 = bitcast i8* %97 to i16*
  %99 = load i16, i16* %98, align 2
  %100 = insertelement <8 x i16> undef, i16 %99, i32 0
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> zeroinitializer
  %102 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %96, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %96, i64 16
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %96, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %108, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 8
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 32
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 62
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 14
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 64
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %26 = getelementptr inbounds i8, i8* %2, i64 32
  %27 = bitcast i8* %26 to <8 x i16>*
  %28 = mul nuw nsw <8 x i32> %20, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %29 = getelementptr inbounds i8, i8* %2, i64 48
  %30 = bitcast i8* %29 to <8 x i16>*
  %31 = mul nuw nsw <8 x i32> %20, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  br label %32

32:                                               ; preds = %123, %4
  %33 = phi i64 [ 0, %4 ], [ %125, %123 ]
  %34 = phi i16* [ %13, %4 ], [ %124, %123 ]
  %35 = mul i64 %17, %33
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = add i64 %35, 64
  %38 = getelementptr i8, i8* %0, i64 %37
  %39 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 4), i64 %33
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds i16, i16* %6, i64 %33
  %43 = sub i8 0, %40
  %44 = zext i8 %43 to i32
  %45 = mul nuw nsw i32 %44, %15
  %46 = add nuw nsw i32 %45, 256
  %47 = shl nuw nsw i64 %33, 1
  %48 = or i64 %47, 1
  %49 = getelementptr i8, i8* %3, i64 %48
  %50 = icmp ult i8* %36, %18
  %51 = icmp ugt i8* %38, %2
  %52 = and i1 %50, %51
  %53 = bitcast i16* %42 to i8*
  %54 = icmp ult i8* %36, %49
  %55 = icmp ugt i8* %38, %53
  %56 = and i1 %54, %55
  %57 = or i1 %52, %56
  br i1 %57, label %127, label %58

58:                                               ; preds = %32
  %59 = insertelement <8 x i32> undef, i32 %41, i32 0
  %60 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> zeroinitializer
  %61 = insertelement <8 x i32> undef, i32 %46, i32 0
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> zeroinitializer
  %63 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !621
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %60, %64
  %66 = load i16, i16* %42, align 2, !alias.scope !624
  %67 = insertelement <8 x i16> undef, i16 %66, i32 0
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> zeroinitializer
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %69, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %71 = add nuw nsw <8 x i32> %62, %65
  %72 = add nuw nsw <8 x i32> %71, %22
  %73 = add nuw nsw <8 x i32> %72, %70
  %74 = lshr <8 x i32> %73, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %75 = trunc <8 x i32> %74 to <8 x i16>
  %76 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2, !alias.scope !626, !noalias !628
  %77 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !621
  %78 = zext <8 x i16> %77 to <8 x i32>
  %79 = mul nuw nsw <8 x i32> %60, %78
  %80 = load i16, i16* %42, align 2, !alias.scope !624
  %81 = insertelement <8 x i16> undef, i16 %80, i32 0
  %82 = shufflevector <8 x i16> %81, <8 x i16> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i16> %82 to <8 x i32>
  %84 = mul nuw nsw <8 x i32> %83, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %85 = add nuw nsw <8 x i32> %62, %79
  %86 = add nuw nsw <8 x i32> %85, %25
  %87 = add nuw nsw <8 x i32> %86, %84
  %88 = lshr <8 x i32> %87, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %34, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !626, !noalias !628
  %92 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !621
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %60, %93
  %95 = load i16, i16* %42, align 2, !alias.scope !624
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %98, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %100 = add nuw nsw <8 x i32> %62, %94
  %101 = add nuw nsw <8 x i32> %100, %28
  %102 = add nuw nsw <8 x i32> %101, %99
  %103 = lshr <8 x i32> %102, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %104 = trunc <8 x i32> %103 to <8 x i16>
  %105 = getelementptr inbounds i16, i16* %34, i64 16
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %106, align 2, !alias.scope !626, !noalias !628
  %107 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !621
  %108 = zext <8 x i16> %107 to <8 x i32>
  %109 = mul nuw nsw <8 x i32> %60, %108
  %110 = load i16, i16* %42, align 2, !alias.scope !624
  %111 = insertelement <8 x i16> undef, i16 %110, i32 0
  %112 = shufflevector <8 x i16> %111, <8 x i16> undef, <8 x i32> zeroinitializer
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = mul nuw nsw <8 x i32> %113, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %115 = add nuw nsw <8 x i32> %62, %109
  %116 = add nuw nsw <8 x i32> %115, %31
  %117 = add nuw nsw <8 x i32> %116, %114
  %118 = lshr <8 x i32> %117, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %34, i64 24
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !626, !noalias !628
  br label %123

122:                                              ; preds = %123
  ret void

123:                                              ; preds = %127, %58
  %124 = getelementptr inbounds i16, i16* %34, i64 %14
  %125 = add nuw nsw i64 %33, 1
  %126 = icmp eq i64 %125, 8
  br i1 %126, label %122, label %32

127:                                              ; preds = %32, %127
  %128 = phi i64 [ %148, %127 ], [ 0, %32 ]
  %129 = getelementptr inbounds i16, i16* %5, i64 %128
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = mul nuw nsw i32 %131, %41
  %133 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %128
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = load i16, i16* %42, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %137, %135
  %139 = sub i8 0, %134
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %140, %16
  %142 = add nuw nsw i32 %46, %132
  %143 = add nuw nsw i32 %142, %141
  %144 = add nuw nsw i32 %143, %138
  %145 = lshr i32 %144, 9
  %146 = trunc i32 %145 to i16
  %147 = getelementptr inbounds i16, i16* %34, i64 %128
  store i16 %146, i16* %147, align 2
  %148 = add nuw nsw i64 %128, 1
  %149 = icmp eq i64 %148, 32
  br i1 %149, label %123, label %127, !llvm.loop !629
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 14
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = add nuw nsw i32 %11, 128
  %13 = getelementptr i8, i8* %0, i64 64
  %14 = getelementptr i8, i8* %2, i64 64
  %15 = icmp ugt i8* %14, %0
  %16 = icmp ugt i8* %13, %2
  %17 = and i1 %15, %16
  br i1 %17, label %112, label %18

18:                                               ; preds = %4
  %19 = insertelement <8 x i32> undef, i32 %12, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !630
  %23 = zext <8 x i16> %22 to <8 x i32>
  %24 = mul nuw nsw <8 x i32> %23, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %25 = add nuw nsw <8 x i32> %20, %24
  %26 = lshr <8 x i32> %25, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %27 = trunc <8 x i32> %26 to <8 x i16>
  %28 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %27, <8 x i16>* %28, align 2, !alias.scope !633, !noalias !630
  %29 = getelementptr inbounds i8, i8* %2, i64 16
  %30 = bitcast i8* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !630
  %32 = zext <8 x i16> %31 to <8 x i32>
  %33 = mul nuw nsw <8 x i32> %32, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %34 = add nuw nsw <8 x i32> %20, %33
  %35 = lshr <8 x i32> %34, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %36 = trunc <8 x i32> %35 to <8 x i16>
  %37 = getelementptr inbounds i8, i8* %0, i64 16
  %38 = bitcast i8* %37 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %38, align 2, !alias.scope !633, !noalias !630
  %39 = getelementptr inbounds i8, i8* %2, i64 32
  %40 = bitcast i8* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 2, !alias.scope !630
  %42 = zext <8 x i16> %41 to <8 x i32>
  %43 = mul nuw nsw <8 x i32> %42, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %44 = add nuw nsw <8 x i32> %20, %43
  %45 = lshr <8 x i32> %44, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %46 = trunc <8 x i32> %45 to <8 x i16>
  %47 = getelementptr inbounds i8, i8* %0, i64 32
  %48 = bitcast i8* %47 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %48, align 2, !alias.scope !633, !noalias !630
  %49 = getelementptr inbounds i8, i8* %2, i64 48
  %50 = bitcast i8* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2, !alias.scope !630
  %52 = zext <8 x i16> %51 to <8 x i32>
  %53 = mul nuw nsw <8 x i32> %52, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %54 = add nuw nsw <8 x i32> %20, %53
  %55 = lshr <8 x i32> %54, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = getelementptr inbounds i8, i8* %0, i64 48
  %58 = bitcast i8* %57 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %58, align 2, !alias.scope !633, !noalias !630
  br label %59

59:                                               ; preds = %112, %18
  %60 = getelementptr inbounds i16, i16* %9, i64 %10
  %61 = mul nuw nsw i32 %11, 59
  %62 = add nuw nsw i32 %61, 128
  %63 = and i64 %1, -2
  %64 = getelementptr i8, i8* %0, i64 %63
  %65 = add i64 %63, 64
  %66 = getelementptr i8, i8* %0, i64 %65
  %67 = getelementptr i8, i8* %2, i64 64
  %68 = icmp ult i8* %64, %67
  %69 = icmp ugt i8* %66, %2
  %70 = and i1 %68, %69
  br i1 %70, label %133, label %71

71:                                               ; preds = %59
  %72 = insertelement <8 x i32> undef, i32 %62, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = bitcast i8* %2 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !635
  %76 = zext <8 x i16> %75 to <8 x i32>
  %77 = mul nuw nsw <8 x i32> %76, <i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197>
  %78 = add nuw nsw <8 x i32> %73, %77
  %79 = lshr <8 x i32> %78, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %80 = trunc <8 x i32> %79 to <8 x i16>
  %81 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %81, align 2, !alias.scope !638, !noalias !635
  %82 = getelementptr inbounds i8, i8* %2, i64 16
  %83 = bitcast i8* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !635
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %85, <i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197>
  %87 = add nuw nsw <8 x i32> %73, %86
  %88 = lshr <8 x i32> %87, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %60, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !638, !noalias !635
  %92 = getelementptr inbounds i8, i8* %2, i64 32
  %93 = bitcast i8* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !635
  %95 = zext <8 x i16> %94 to <8 x i32>
  %96 = mul nuw nsw <8 x i32> %95, <i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197>
  %97 = add nuw nsw <8 x i32> %73, %96
  %98 = lshr <8 x i32> %97, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %99 = trunc <8 x i32> %98 to <8 x i16>
  %100 = getelementptr inbounds i16, i16* %60, i64 16
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %101, align 2, !alias.scope !638, !noalias !635
  %102 = getelementptr inbounds i8, i8* %2, i64 48
  %103 = bitcast i8* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !635
  %105 = zext <8 x i16> %104 to <8 x i32>
  %106 = mul nuw nsw <8 x i32> %105, <i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197, i32 197>
  %107 = add nuw nsw <8 x i32> %73, %106
  %108 = lshr <8 x i32> %107, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %109 = trunc <8 x i32> %108 to <8 x i16>
  %110 = getelementptr inbounds i16, i16* %60, i64 24
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %111, align 2, !alias.scope !638, !noalias !635
  br label %154

112:                                              ; preds = %4, %112
  %113 = phi i64 [ %131, %112 ], [ 0, %4 ]
  %114 = getelementptr inbounds i16, i16* %5, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %116, 255
  %118 = add nuw nsw i32 %12, %117
  %119 = lshr i32 %118, 8
  %120 = trunc i32 %119 to i16
  %121 = getelementptr inbounds i16, i16* %9, i64 %113
  store i16 %120, i16* %121, align 2
  %122 = or i64 %113, 1
  %123 = getelementptr inbounds i16, i16* %5, i64 %122
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nuw nsw i32 %125, 255
  %127 = add nuw nsw i32 %12, %126
  %128 = lshr i32 %127, 8
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %9, i64 %122
  store i16 %129, i16* %130, align 2
  %131 = add nuw nsw i64 %113, 2
  %132 = icmp eq i64 %131, 32
  br i1 %132, label %59, label %112, !llvm.loop !640

133:                                              ; preds = %59, %133
  %134 = phi i64 [ %152, %133 ], [ 0, %59 ]
  %135 = getelementptr inbounds i16, i16* %5, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %137, 197
  %139 = add nuw nsw i32 %62, %138
  %140 = lshr i32 %139, 8
  %141 = trunc i32 %140 to i16
  %142 = getelementptr inbounds i16, i16* %60, i64 %134
  store i16 %141, i16* %142, align 2
  %143 = or i64 %134, 1
  %144 = getelementptr inbounds i16, i16* %5, i64 %143
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = mul nuw nsw i32 %146, 197
  %148 = add nuw nsw i32 %62, %147
  %149 = lshr i32 %148, 8
  %150 = trunc i32 %149 to i16
  %151 = getelementptr inbounds i16, i16* %60, i64 %143
  store i16 %150, i16* %151, align 2
  %152 = add nuw nsw i64 %134, 2
  %153 = icmp eq i64 %152, 32
  br i1 %153, label %154, label %133, !llvm.loop !641

154:                                              ; preds = %133, %71
  %155 = getelementptr inbounds i16, i16* %60, i64 %10
  %156 = mul nuw nsw i32 %11, 110
  %157 = add nuw nsw i32 %156, 128
  %158 = shl i64 %10, 2
  %159 = getelementptr i8, i8* %0, i64 %158
  %160 = add i64 %158, 64
  %161 = getelementptr i8, i8* %0, i64 %160
  %162 = getelementptr i8, i8* %2, i64 64
  %163 = icmp ult i8* %159, %162
  %164 = icmp ugt i8* %161, %2
  %165 = and i1 %163, %164
  br i1 %165, label %207, label %166

166:                                              ; preds = %154
  %167 = insertelement <8 x i32> undef, i32 %157, i32 0
  %168 = shufflevector <8 x i32> %167, <8 x i32> undef, <8 x i32> zeroinitializer
  %169 = bitcast i8* %2 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2, !alias.scope !642
  %171 = zext <8 x i16> %170 to <8 x i32>
  %172 = mul nuw nsw <8 x i32> %171, <i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146>
  %173 = add nuw nsw <8 x i32> %168, %172
  %174 = lshr <8 x i32> %173, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %175 = trunc <8 x i32> %174 to <8 x i16>
  %176 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %176, align 2, !alias.scope !645, !noalias !642
  %177 = getelementptr inbounds i8, i8* %2, i64 16
  %178 = bitcast i8* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 2, !alias.scope !642
  %180 = zext <8 x i16> %179 to <8 x i32>
  %181 = mul nuw nsw <8 x i32> %180, <i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146>
  %182 = add nuw nsw <8 x i32> %168, %181
  %183 = lshr <8 x i32> %182, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %184 = trunc <8 x i32> %183 to <8 x i16>
  %185 = getelementptr inbounds i16, i16* %155, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %186, align 2, !alias.scope !645, !noalias !642
  %187 = getelementptr inbounds i8, i8* %2, i64 32
  %188 = bitcast i8* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 2, !alias.scope !642
  %190 = zext <8 x i16> %189 to <8 x i32>
  %191 = mul nuw nsw <8 x i32> %190, <i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146>
  %192 = add nuw nsw <8 x i32> %168, %191
  %193 = lshr <8 x i32> %192, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %194 = trunc <8 x i32> %193 to <8 x i16>
  %195 = getelementptr inbounds i16, i16* %155, i64 16
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %196, align 2, !alias.scope !645, !noalias !642
  %197 = getelementptr inbounds i8, i8* %2, i64 48
  %198 = bitcast i8* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 2, !alias.scope !642
  %200 = zext <8 x i16> %199 to <8 x i32>
  %201 = mul nuw nsw <8 x i32> %200, <i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146, i32 146>
  %202 = add nuw nsw <8 x i32> %168, %201
  %203 = lshr <8 x i32> %202, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %204 = trunc <8 x i32> %203 to <8 x i16>
  %205 = getelementptr inbounds i16, i16* %155, i64 24
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %206, align 2, !alias.scope !645, !noalias !642
  br label %228

207:                                              ; preds = %154, %207
  %208 = phi i64 [ %226, %207 ], [ 0, %154 ]
  %209 = getelementptr inbounds i16, i16* %5, i64 %208
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i32
  %212 = mul nuw nsw i32 %211, 146
  %213 = add nuw nsw i32 %157, %212
  %214 = lshr i32 %213, 8
  %215 = trunc i32 %214 to i16
  %216 = getelementptr inbounds i16, i16* %155, i64 %208
  store i16 %215, i16* %216, align 2
  %217 = or i64 %208, 1
  %218 = getelementptr inbounds i16, i16* %5, i64 %217
  %219 = load i16, i16* %218, align 2
  %220 = zext i16 %219 to i32
  %221 = mul nuw nsw i32 %220, 146
  %222 = add nuw nsw i32 %157, %221
  %223 = lshr i32 %222, 8
  %224 = trunc i32 %223 to i16
  %225 = getelementptr inbounds i16, i16* %155, i64 %217
  store i16 %224, i16* %225, align 2
  %226 = add nuw nsw i64 %208, 2
  %227 = icmp eq i64 %226, 32
  br i1 %227, label %228, label %207, !llvm.loop !647

228:                                              ; preds = %207, %166
  %229 = getelementptr inbounds i16, i16* %155, i64 %10
  %230 = mul nuw nsw i32 %11, 151
  %231 = add nuw nsw i32 %230, 128
  %232 = mul i64 %10, 6
  %233 = getelementptr i8, i8* %0, i64 %232
  %234 = add i64 %232, 64
  %235 = getelementptr i8, i8* %0, i64 %234
  %236 = getelementptr i8, i8* %2, i64 64
  %237 = icmp ult i8* %233, %236
  %238 = icmp ugt i8* %235, %2
  %239 = and i1 %237, %238
  br i1 %239, label %281, label %240

240:                                              ; preds = %228
  %241 = insertelement <8 x i32> undef, i32 %231, i32 0
  %242 = shufflevector <8 x i32> %241, <8 x i32> undef, <8 x i32> zeroinitializer
  %243 = bitcast i8* %2 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !648
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nuw nsw <8 x i32> %245, <i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105>
  %247 = add nuw nsw <8 x i32> %242, %246
  %248 = lshr <8 x i32> %247, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %249 = trunc <8 x i32> %248 to <8 x i16>
  %250 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %250, align 2, !alias.scope !651, !noalias !648
  %251 = getelementptr inbounds i8, i8* %2, i64 16
  %252 = bitcast i8* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 2, !alias.scope !648
  %254 = zext <8 x i16> %253 to <8 x i32>
  %255 = mul nuw nsw <8 x i32> %254, <i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105>
  %256 = add nuw nsw <8 x i32> %242, %255
  %257 = lshr <8 x i32> %256, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %258 = trunc <8 x i32> %257 to <8 x i16>
  %259 = getelementptr inbounds i16, i16* %229, i64 8
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %260, align 2, !alias.scope !651, !noalias !648
  %261 = getelementptr inbounds i8, i8* %2, i64 32
  %262 = bitcast i8* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !648
  %264 = zext <8 x i16> %263 to <8 x i32>
  %265 = mul nuw nsw <8 x i32> %264, <i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105>
  %266 = add nuw nsw <8 x i32> %242, %265
  %267 = lshr <8 x i32> %266, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %268 = trunc <8 x i32> %267 to <8 x i16>
  %269 = getelementptr inbounds i16, i16* %229, i64 16
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %270, align 2, !alias.scope !651, !noalias !648
  %271 = getelementptr inbounds i8, i8* %2, i64 48
  %272 = bitcast i8* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !648
  %274 = zext <8 x i16> %273 to <8 x i32>
  %275 = mul nuw nsw <8 x i32> %274, <i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105, i32 105>
  %276 = add nuw nsw <8 x i32> %242, %275
  %277 = lshr <8 x i32> %276, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %278 = trunc <8 x i32> %277 to <8 x i16>
  %279 = getelementptr inbounds i16, i16* %229, i64 24
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %280, align 2, !alias.scope !651, !noalias !648
  br label %302

281:                                              ; preds = %228, %281
  %282 = phi i64 [ %300, %281 ], [ 0, %228 ]
  %283 = getelementptr inbounds i16, i16* %5, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = mul nuw nsw i32 %285, 105
  %287 = add nuw nsw i32 %231, %286
  %288 = lshr i32 %287, 8
  %289 = trunc i32 %288 to i16
  %290 = getelementptr inbounds i16, i16* %229, i64 %282
  store i16 %289, i16* %290, align 2
  %291 = or i64 %282, 1
  %292 = getelementptr inbounds i16, i16* %5, i64 %291
  %293 = load i16, i16* %292, align 2
  %294 = zext i16 %293 to i32
  %295 = mul nuw nsw i32 %294, 105
  %296 = add nuw nsw i32 %231, %295
  %297 = lshr i32 %296, 8
  %298 = trunc i32 %297 to i16
  %299 = getelementptr inbounds i16, i16* %229, i64 %291
  store i16 %298, i16* %299, align 2
  %300 = add nuw nsw i64 %282, 2
  %301 = icmp eq i64 %300, 32
  br i1 %301, label %302, label %281, !llvm.loop !653

302:                                              ; preds = %281, %240
  %303 = getelementptr inbounds i16, i16* %229, i64 %10
  %304 = mul nuw nsw i32 %11, 183
  %305 = add nuw nsw i32 %304, 128
  %306 = shl i64 %10, 3
  %307 = getelementptr i8, i8* %0, i64 %306
  %308 = add i64 %306, 64
  %309 = getelementptr i8, i8* %0, i64 %308
  %310 = getelementptr i8, i8* %2, i64 64
  %311 = icmp ult i8* %307, %310
  %312 = icmp ugt i8* %309, %2
  %313 = and i1 %311, %312
  br i1 %313, label %355, label %314

314:                                              ; preds = %302
  %315 = insertelement <8 x i32> undef, i32 %305, i32 0
  %316 = shufflevector <8 x i32> %315, <8 x i32> undef, <8 x i32> zeroinitializer
  %317 = bitcast i8* %2 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !654
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %319, <i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73>
  %321 = add nuw nsw <8 x i32> %316, %320
  %322 = lshr <8 x i32> %321, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %324, align 2, !alias.scope !657, !noalias !654
  %325 = getelementptr inbounds i8, i8* %2, i64 16
  %326 = bitcast i8* %325 to <8 x i16>*
  %327 = load <8 x i16>, <8 x i16>* %326, align 2, !alias.scope !654
  %328 = zext <8 x i16> %327 to <8 x i32>
  %329 = mul nuw nsw <8 x i32> %328, <i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73>
  %330 = add nuw nsw <8 x i32> %316, %329
  %331 = lshr <8 x i32> %330, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %332 = trunc <8 x i32> %331 to <8 x i16>
  %333 = getelementptr inbounds i16, i16* %303, i64 8
  %334 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %334, align 2, !alias.scope !657, !noalias !654
  %335 = getelementptr inbounds i8, i8* %2, i64 32
  %336 = bitcast i8* %335 to <8 x i16>*
  %337 = load <8 x i16>, <8 x i16>* %336, align 2, !alias.scope !654
  %338 = zext <8 x i16> %337 to <8 x i32>
  %339 = mul nuw nsw <8 x i32> %338, <i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73>
  %340 = add nuw nsw <8 x i32> %316, %339
  %341 = lshr <8 x i32> %340, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %342 = trunc <8 x i32> %341 to <8 x i16>
  %343 = getelementptr inbounds i16, i16* %303, i64 16
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %344, align 2, !alias.scope !657, !noalias !654
  %345 = getelementptr inbounds i8, i8* %2, i64 48
  %346 = bitcast i8* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !654
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = mul nuw nsw <8 x i32> %348, <i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73, i32 73>
  %350 = add nuw nsw <8 x i32> %316, %349
  %351 = lshr <8 x i32> %350, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %352 = trunc <8 x i32> %351 to <8 x i16>
  %353 = getelementptr inbounds i16, i16* %303, i64 24
  %354 = bitcast i16* %353 to <8 x i16>*
  store <8 x i16> %352, <8 x i16>* %354, align 2, !alias.scope !657, !noalias !654
  br label %376

355:                                              ; preds = %302, %355
  %356 = phi i64 [ %374, %355 ], [ 0, %302 ]
  %357 = getelementptr inbounds i16, i16* %5, i64 %356
  %358 = load i16, i16* %357, align 2
  %359 = zext i16 %358 to i32
  %360 = mul nuw nsw i32 %359, 73
  %361 = add nuw nsw i32 %305, %360
  %362 = lshr i32 %361, 8
  %363 = trunc i32 %362 to i16
  %364 = getelementptr inbounds i16, i16* %303, i64 %356
  store i16 %363, i16* %364, align 2
  %365 = or i64 %356, 1
  %366 = getelementptr inbounds i16, i16* %5, i64 %365
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nuw nsw i32 %368, 73
  %370 = add nuw nsw i32 %305, %369
  %371 = lshr i32 %370, 8
  %372 = trunc i32 %371 to i16
  %373 = getelementptr inbounds i16, i16* %303, i64 %365
  store i16 %372, i16* %373, align 2
  %374 = add nuw nsw i64 %356, 2
  %375 = icmp eq i64 %374, 32
  br i1 %375, label %376, label %355, !llvm.loop !659

376:                                              ; preds = %355, %314
  %377 = getelementptr inbounds i16, i16* %303, i64 %10
  %378 = mul nuw nsw i32 %11, 206
  %379 = add nuw nsw i32 %378, 128
  %380 = mul i64 %10, 10
  %381 = getelementptr i8, i8* %0, i64 %380
  %382 = add i64 %380, 64
  %383 = getelementptr i8, i8* %0, i64 %382
  %384 = getelementptr i8, i8* %2, i64 64
  %385 = icmp ult i8* %381, %384
  %386 = icmp ugt i8* %383, %2
  %387 = and i1 %385, %386
  br i1 %387, label %429, label %388

388:                                              ; preds = %376
  %389 = insertelement <8 x i32> undef, i32 %379, i32 0
  %390 = shufflevector <8 x i32> %389, <8 x i32> undef, <8 x i32> zeroinitializer
  %391 = bitcast i8* %2 to <8 x i16>*
  %392 = load <8 x i16>, <8 x i16>* %391, align 2, !alias.scope !660
  %393 = zext <8 x i16> %392 to <8 x i32>
  %394 = mul nuw nsw <8 x i32> %393, <i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50>
  %395 = add nuw nsw <8 x i32> %390, %394
  %396 = lshr <8 x i32> %395, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %397 = trunc <8 x i32> %396 to <8 x i16>
  %398 = bitcast i16* %377 to <8 x i16>*
  store <8 x i16> %397, <8 x i16>* %398, align 2, !alias.scope !663, !noalias !660
  %399 = getelementptr inbounds i8, i8* %2, i64 16
  %400 = bitcast i8* %399 to <8 x i16>*
  %401 = load <8 x i16>, <8 x i16>* %400, align 2, !alias.scope !660
  %402 = zext <8 x i16> %401 to <8 x i32>
  %403 = mul nuw nsw <8 x i32> %402, <i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50>
  %404 = add nuw nsw <8 x i32> %390, %403
  %405 = lshr <8 x i32> %404, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %406 = trunc <8 x i32> %405 to <8 x i16>
  %407 = getelementptr inbounds i16, i16* %377, i64 8
  %408 = bitcast i16* %407 to <8 x i16>*
  store <8 x i16> %406, <8 x i16>* %408, align 2, !alias.scope !663, !noalias !660
  %409 = getelementptr inbounds i8, i8* %2, i64 32
  %410 = bitcast i8* %409 to <8 x i16>*
  %411 = load <8 x i16>, <8 x i16>* %410, align 2, !alias.scope !660
  %412 = zext <8 x i16> %411 to <8 x i32>
  %413 = mul nuw nsw <8 x i32> %412, <i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50>
  %414 = add nuw nsw <8 x i32> %390, %413
  %415 = lshr <8 x i32> %414, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %416 = trunc <8 x i32> %415 to <8 x i16>
  %417 = getelementptr inbounds i16, i16* %377, i64 16
  %418 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %416, <8 x i16>* %418, align 2, !alias.scope !663, !noalias !660
  %419 = getelementptr inbounds i8, i8* %2, i64 48
  %420 = bitcast i8* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !660
  %422 = zext <8 x i16> %421 to <8 x i32>
  %423 = mul nuw nsw <8 x i32> %422, <i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50>
  %424 = add nuw nsw <8 x i32> %390, %423
  %425 = lshr <8 x i32> %424, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %426 = trunc <8 x i32> %425 to <8 x i16>
  %427 = getelementptr inbounds i16, i16* %377, i64 24
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %426, <8 x i16>* %428, align 2, !alias.scope !663, !noalias !660
  br label %450

429:                                              ; preds = %376, %429
  %430 = phi i64 [ %448, %429 ], [ 0, %376 ]
  %431 = getelementptr inbounds i16, i16* %5, i64 %430
  %432 = load i16, i16* %431, align 2
  %433 = zext i16 %432 to i32
  %434 = mul nuw nsw i32 %433, 50
  %435 = add nuw nsw i32 %379, %434
  %436 = lshr i32 %435, 8
  %437 = trunc i32 %436 to i16
  %438 = getelementptr inbounds i16, i16* %377, i64 %430
  store i16 %437, i16* %438, align 2
  %439 = or i64 %430, 1
  %440 = getelementptr inbounds i16, i16* %5, i64 %439
  %441 = load i16, i16* %440, align 2
  %442 = zext i16 %441 to i32
  %443 = mul nuw nsw i32 %442, 50
  %444 = add nuw nsw i32 %379, %443
  %445 = lshr i32 %444, 8
  %446 = trunc i32 %445 to i16
  %447 = getelementptr inbounds i16, i16* %377, i64 %439
  store i16 %446, i16* %447, align 2
  %448 = add nuw nsw i64 %430, 2
  %449 = icmp eq i64 %448, 32
  br i1 %449, label %450, label %429, !llvm.loop !665

450:                                              ; preds = %429, %388
  %451 = getelementptr inbounds i16, i16* %377, i64 %10
  %452 = mul nuw nsw i32 %11, 219
  %453 = add nuw nsw i32 %452, 128
  %454 = mul i64 %10, 12
  %455 = getelementptr i8, i8* %0, i64 %454
  %456 = add i64 %454, 64
  %457 = getelementptr i8, i8* %0, i64 %456
  %458 = getelementptr i8, i8* %2, i64 64
  %459 = icmp ult i8* %455, %458
  %460 = icmp ugt i8* %457, %2
  %461 = and i1 %459, %460
  br i1 %461, label %503, label %462

462:                                              ; preds = %450
  %463 = insertelement <8 x i32> undef, i32 %453, i32 0
  %464 = shufflevector <8 x i32> %463, <8 x i32> undef, <8 x i32> zeroinitializer
  %465 = bitcast i8* %2 to <8 x i16>*
  %466 = load <8 x i16>, <8 x i16>* %465, align 2, !alias.scope !666
  %467 = zext <8 x i16> %466 to <8 x i32>
  %468 = mul nuw nsw <8 x i32> %467, <i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37>
  %469 = add nuw nsw <8 x i32> %464, %468
  %470 = lshr <8 x i32> %469, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %471 = trunc <8 x i32> %470 to <8 x i16>
  %472 = bitcast i16* %451 to <8 x i16>*
  store <8 x i16> %471, <8 x i16>* %472, align 2, !alias.scope !669, !noalias !666
  %473 = getelementptr inbounds i8, i8* %2, i64 16
  %474 = bitcast i8* %473 to <8 x i16>*
  %475 = load <8 x i16>, <8 x i16>* %474, align 2, !alias.scope !666
  %476 = zext <8 x i16> %475 to <8 x i32>
  %477 = mul nuw nsw <8 x i32> %476, <i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37>
  %478 = add nuw nsw <8 x i32> %464, %477
  %479 = lshr <8 x i32> %478, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %480 = trunc <8 x i32> %479 to <8 x i16>
  %481 = getelementptr inbounds i16, i16* %451, i64 8
  %482 = bitcast i16* %481 to <8 x i16>*
  store <8 x i16> %480, <8 x i16>* %482, align 2, !alias.scope !669, !noalias !666
  %483 = getelementptr inbounds i8, i8* %2, i64 32
  %484 = bitcast i8* %483 to <8 x i16>*
  %485 = load <8 x i16>, <8 x i16>* %484, align 2, !alias.scope !666
  %486 = zext <8 x i16> %485 to <8 x i32>
  %487 = mul nuw nsw <8 x i32> %486, <i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37>
  %488 = add nuw nsw <8 x i32> %464, %487
  %489 = lshr <8 x i32> %488, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %490 = trunc <8 x i32> %489 to <8 x i16>
  %491 = getelementptr inbounds i16, i16* %451, i64 16
  %492 = bitcast i16* %491 to <8 x i16>*
  store <8 x i16> %490, <8 x i16>* %492, align 2, !alias.scope !669, !noalias !666
  %493 = getelementptr inbounds i8, i8* %2, i64 48
  %494 = bitcast i8* %493 to <8 x i16>*
  %495 = load <8 x i16>, <8 x i16>* %494, align 2, !alias.scope !666
  %496 = zext <8 x i16> %495 to <8 x i32>
  %497 = mul nuw nsw <8 x i32> %496, <i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37, i32 37>
  %498 = add nuw nsw <8 x i32> %464, %497
  %499 = lshr <8 x i32> %498, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %500 = trunc <8 x i32> %499 to <8 x i16>
  %501 = getelementptr inbounds i16, i16* %451, i64 24
  %502 = bitcast i16* %501 to <8 x i16>*
  store <8 x i16> %500, <8 x i16>* %502, align 2, !alias.scope !669, !noalias !666
  br label %524

503:                                              ; preds = %450, %503
  %504 = phi i64 [ %522, %503 ], [ 0, %450 ]
  %505 = getelementptr inbounds i16, i16* %5, i64 %504
  %506 = load i16, i16* %505, align 2
  %507 = zext i16 %506 to i32
  %508 = mul nuw nsw i32 %507, 37
  %509 = add nuw nsw i32 %453, %508
  %510 = lshr i32 %509, 8
  %511 = trunc i32 %510 to i16
  %512 = getelementptr inbounds i16, i16* %451, i64 %504
  store i16 %511, i16* %512, align 2
  %513 = or i64 %504, 1
  %514 = getelementptr inbounds i16, i16* %5, i64 %513
  %515 = load i16, i16* %514, align 2
  %516 = zext i16 %515 to i32
  %517 = mul nuw nsw i32 %516, 37
  %518 = add nuw nsw i32 %453, %517
  %519 = lshr i32 %518, 8
  %520 = trunc i32 %519 to i16
  %521 = getelementptr inbounds i16, i16* %451, i64 %513
  store i16 %520, i16* %521, align 2
  %522 = add nuw nsw i64 %504, 2
  %523 = icmp eq i64 %522, 32
  br i1 %523, label %524, label %503, !llvm.loop !671

524:                                              ; preds = %503, %462
  %525 = getelementptr inbounds i16, i16* %451, i64 %10
  %526 = mul nuw nsw i32 %11, 224
  %527 = add nuw nsw i32 %526, 128
  %528 = mul i64 %10, 14
  %529 = getelementptr i8, i8* %0, i64 %528
  %530 = add i64 %528, 64
  %531 = getelementptr i8, i8* %0, i64 %530
  %532 = getelementptr i8, i8* %2, i64 64
  %533 = icmp ult i8* %529, %532
  %534 = icmp ugt i8* %531, %2
  %535 = and i1 %533, %534
  br i1 %535, label %577, label %536

536:                                              ; preds = %524
  %537 = insertelement <8 x i32> undef, i32 %527, i32 0
  %538 = shufflevector <8 x i32> %537, <8 x i32> undef, <8 x i32> zeroinitializer
  %539 = bitcast i8* %2 to <8 x i16>*
  %540 = load <8 x i16>, <8 x i16>* %539, align 2, !alias.scope !672
  %541 = zext <8 x i16> %540 to <8 x i32>
  %542 = shl nuw nsw <8 x i32> %541, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %543 = add nuw nsw <8 x i32> %538, %542
  %544 = lshr <8 x i32> %543, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %545 = trunc <8 x i32> %544 to <8 x i16>
  %546 = bitcast i16* %525 to <8 x i16>*
  store <8 x i16> %545, <8 x i16>* %546, align 2, !alias.scope !675, !noalias !672
  %547 = getelementptr inbounds i8, i8* %2, i64 16
  %548 = bitcast i8* %547 to <8 x i16>*
  %549 = load <8 x i16>, <8 x i16>* %548, align 2, !alias.scope !672
  %550 = zext <8 x i16> %549 to <8 x i32>
  %551 = shl nuw nsw <8 x i32> %550, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %552 = add nuw nsw <8 x i32> %538, %551
  %553 = lshr <8 x i32> %552, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %554 = trunc <8 x i32> %553 to <8 x i16>
  %555 = getelementptr inbounds i16, i16* %525, i64 8
  %556 = bitcast i16* %555 to <8 x i16>*
  store <8 x i16> %554, <8 x i16>* %556, align 2, !alias.scope !675, !noalias !672
  %557 = getelementptr inbounds i8, i8* %2, i64 32
  %558 = bitcast i8* %557 to <8 x i16>*
  %559 = load <8 x i16>, <8 x i16>* %558, align 2, !alias.scope !672
  %560 = zext <8 x i16> %559 to <8 x i32>
  %561 = shl nuw nsw <8 x i32> %560, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %562 = add nuw nsw <8 x i32> %538, %561
  %563 = lshr <8 x i32> %562, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %564 = trunc <8 x i32> %563 to <8 x i16>
  %565 = getelementptr inbounds i16, i16* %525, i64 16
  %566 = bitcast i16* %565 to <8 x i16>*
  store <8 x i16> %564, <8 x i16>* %566, align 2, !alias.scope !675, !noalias !672
  %567 = getelementptr inbounds i8, i8* %2, i64 48
  %568 = bitcast i8* %567 to <8 x i16>*
  %569 = load <8 x i16>, <8 x i16>* %568, align 2, !alias.scope !672
  %570 = zext <8 x i16> %569 to <8 x i32>
  %571 = shl nuw nsw <8 x i32> %570, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %572 = add nuw nsw <8 x i32> %538, %571
  %573 = lshr <8 x i32> %572, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %574 = trunc <8 x i32> %573 to <8 x i16>
  %575 = getelementptr inbounds i16, i16* %525, i64 24
  %576 = bitcast i16* %575 to <8 x i16>*
  store <8 x i16> %574, <8 x i16>* %576, align 2, !alias.scope !675, !noalias !672
  br label %598

577:                                              ; preds = %524, %577
  %578 = phi i64 [ %596, %577 ], [ 0, %524 ]
  %579 = getelementptr inbounds i16, i16* %5, i64 %578
  %580 = load i16, i16* %579, align 2
  %581 = zext i16 %580 to i32
  %582 = shl nuw nsw i32 %581, 5
  %583 = add nuw nsw i32 %527, %582
  %584 = lshr i32 %583, 8
  %585 = trunc i32 %584 to i16
  %586 = getelementptr inbounds i16, i16* %525, i64 %578
  store i16 %585, i16* %586, align 2
  %587 = or i64 %578, 1
  %588 = getelementptr inbounds i16, i16* %5, i64 %587
  %589 = load i16, i16* %588, align 2
  %590 = zext i16 %589 to i32
  %591 = shl nuw nsw i32 %590, 5
  %592 = add nuw nsw i32 %527, %591
  %593 = lshr i32 %592, 8
  %594 = trunc i32 %593 to i16
  %595 = getelementptr inbounds i16, i16* %525, i64 %587
  store i16 %594, i16* %595, align 2
  %596 = add nuw nsw i64 %578, 2
  %597 = icmp eq i64 %596, 32
  br i1 %597, label %598, label %577, !llvm.loop !677

598:                                              ; preds = %577, %536
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi8EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 62
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = getelementptr i8, i8* %0, i64 64
  %13 = getelementptr i8, i8* %3, i64 1
  %14 = icmp ugt i8* %13, %0
  %15 = icmp ugt i8* %12, %3
  %16 = and i1 %14, %15
  br i1 %16, label %129, label %17

17:                                               ; preds = %4
  %18 = insertelement <8 x i32> undef, i32 %11, i32 0
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> zeroinitializer
  %20 = load i16, i16* %5, align 2, !alias.scope !678
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = zext <8 x i16> %22 to <8 x i32>
  %24 = mul nuw nsw <8 x i32> %23, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %25 = mul nuw nsw <8 x i32> %19, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %26 = add nuw nsw <8 x i32> %25, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %27 = add nuw nsw <8 x i32> %26, %24
  %28 = lshr <8 x i32> %27, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %29 = trunc <8 x i32> %28 to <8 x i16>
  %30 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2, !alias.scope !681, !noalias !678
  %31 = load i16, i16* %5, align 2, !alias.scope !678
  %32 = insertelement <8 x i16> undef, i16 %31, i32 0
  %33 = shufflevector <8 x i16> %32, <8 x i16> undef, <8 x i32> zeroinitializer
  %34 = zext <8 x i16> %33 to <8 x i32>
  %35 = mul nuw nsw <8 x i32> %34, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %36 = mul nuw nsw <8 x i32> %19, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %37 = add nuw nsw <8 x i32> %36, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %38 = add nuw nsw <8 x i32> %37, %35
  %39 = lshr <8 x i32> %38, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %40 = trunc <8 x i32> %39 to <8 x i16>
  %41 = getelementptr inbounds i8, i8* %0, i64 16
  %42 = bitcast i8* %41 to <8 x i16>*
  store <8 x i16> %40, <8 x i16>* %42, align 2, !alias.scope !681, !noalias !678
  %43 = load i16, i16* %5, align 2, !alias.scope !678
  %44 = insertelement <8 x i16> undef, i16 %43, i32 0
  %45 = shufflevector <8 x i16> %44, <8 x i16> undef, <8 x i32> zeroinitializer
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %46, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %48 = mul nuw nsw <8 x i32> %19, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %49 = add nuw nsw <8 x i32> %48, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %50 = add nuw nsw <8 x i32> %49, %47
  %51 = lshr <8 x i32> %50, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %52 = trunc <8 x i32> %51 to <8 x i16>
  %53 = getelementptr inbounds i8, i8* %0, i64 32
  %54 = bitcast i8* %53 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %54, align 2, !alias.scope !681, !noalias !678
  %55 = load i16, i16* %5, align 2, !alias.scope !678
  %56 = insertelement <8 x i16> undef, i16 %55, i32 0
  %57 = shufflevector <8 x i16> %56, <8 x i16> undef, <8 x i32> zeroinitializer
  %58 = zext <8 x i16> %57 to <8 x i32>
  %59 = mul nuw nsw <8 x i32> %58, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %60 = mul nuw nsw <8 x i32> %19, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %61 = add nuw nsw <8 x i32> %60, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %62 = add nuw nsw <8 x i32> %61, %59
  %63 = lshr <8 x i32> %62, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %64 = trunc <8 x i32> %63 to <8 x i16>
  %65 = getelementptr inbounds i8, i8* %0, i64 48
  %66 = bitcast i8* %65 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %66, align 2, !alias.scope !681, !noalias !678
  br label %67

67:                                               ; preds = %129, %17
  %68 = getelementptr inbounds i16, i16* %9, i64 %10
  %69 = getelementptr inbounds i8, i8* %3, i64 2
  %70 = bitcast i8* %69 to i16*
  %71 = and i64 %1, -2
  %72 = getelementptr i8, i8* %0, i64 %71
  %73 = add i64 %71, 64
  %74 = getelementptr i8, i8* %0, i64 %73
  %75 = getelementptr i8, i8* %3, i64 3
  %76 = icmp ult i8* %72, %75
  %77 = icmp ult i8* %69, %74
  %78 = and i1 %76, %77
  br i1 %78, label %162, label %79

79:                                               ; preds = %67
  %80 = insertelement <8 x i32> undef, i32 %11, i32 0
  %81 = shufflevector <8 x i32> %80, <8 x i32> undef, <8 x i32> zeroinitializer
  %82 = load i16, i16* %70, align 2, !alias.scope !683
  %83 = insertelement <8 x i16> undef, i16 %82, i32 0
  %84 = shufflevector <8 x i16> %83, <8 x i16> undef, <8 x i32> zeroinitializer
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %85, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %87 = mul nuw nsw <8 x i32> %81, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %88 = add nuw nsw <8 x i32> %87, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %89 = add nuw nsw <8 x i32> %88, %86
  %90 = lshr <8 x i32> %89, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %91 = trunc <8 x i32> %90 to <8 x i16>
  %92 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %92, align 2, !alias.scope !686, !noalias !683
  %93 = load i16, i16* %70, align 2, !alias.scope !683
  %94 = insertelement <8 x i16> undef, i16 %93, i32 0
  %95 = shufflevector <8 x i16> %94, <8 x i16> undef, <8 x i32> zeroinitializer
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %96, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %98 = mul nuw nsw <8 x i32> %81, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %99 = add nuw nsw <8 x i32> %98, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %100 = add nuw nsw <8 x i32> %99, %97
  %101 = lshr <8 x i32> %100, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %102 = trunc <8 x i32> %101 to <8 x i16>
  %103 = getelementptr inbounds i16, i16* %68, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %104, align 2, !alias.scope !686, !noalias !683
  %105 = load i16, i16* %70, align 2, !alias.scope !683
  %106 = insertelement <8 x i16> undef, i16 %105, i32 0
  %107 = shufflevector <8 x i16> %106, <8 x i16> undef, <8 x i32> zeroinitializer
  %108 = zext <8 x i16> %107 to <8 x i32>
  %109 = mul nuw nsw <8 x i32> %108, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %110 = mul nuw nsw <8 x i32> %81, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %111 = add nuw nsw <8 x i32> %110, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %112 = add nuw nsw <8 x i32> %111, %109
  %113 = lshr <8 x i32> %112, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %114 = trunc <8 x i32> %113 to <8 x i16>
  %115 = getelementptr inbounds i16, i16* %68, i64 16
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %116, align 2, !alias.scope !686, !noalias !683
  %117 = load i16, i16* %70, align 2, !alias.scope !683
  %118 = insertelement <8 x i16> undef, i16 %117, i32 0
  %119 = shufflevector <8 x i16> %118, <8 x i16> undef, <8 x i32> zeroinitializer
  %120 = zext <8 x i16> %119 to <8 x i32>
  %121 = mul nuw nsw <8 x i32> %120, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %122 = mul nuw nsw <8 x i32> %81, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %123 = add nuw nsw <8 x i32> %122, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %124 = add nuw nsw <8 x i32> %123, %121
  %125 = lshr <8 x i32> %124, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %126 = trunc <8 x i32> %125 to <8 x i16>
  %127 = getelementptr inbounds i16, i16* %68, i64 24
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %128, align 2, !alias.scope !686, !noalias !683
  br label %195

129:                                              ; preds = %4, %129
  %130 = phi i64 [ %160, %129 ], [ 0, %4 ]
  %131 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %130
  %132 = load i8, i8* %131, align 2
  %133 = zext i8 %132 to i32
  %134 = load i16, i16* %5, align 2
  %135 = zext i16 %134 to i32
  %136 = mul nuw nsw i32 %135, %133
  %137 = sub i8 0, %132
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %138, %11
  %140 = add nuw nsw i32 %139, 128
  %141 = add nuw nsw i32 %140, %136
  %142 = lshr i32 %141, 8
  %143 = trunc i32 %142 to i16
  %144 = getelementptr inbounds i16, i16* %9, i64 %130
  store i16 %143, i16* %144, align 2
  %145 = or i64 %130, 1
  %146 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = load i16, i16* %5, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %150, %148
  %152 = sub i8 0, %147
  %153 = zext i8 %152 to i32
  %154 = mul nuw nsw i32 %153, %11
  %155 = add nuw nsw i32 %154, 128
  %156 = add nuw nsw i32 %155, %151
  %157 = lshr i32 %156, 8
  %158 = trunc i32 %157 to i16
  %159 = getelementptr inbounds i16, i16* %9, i64 %145
  store i16 %158, i16* %159, align 2
  %160 = add nuw nsw i64 %130, 2
  %161 = icmp eq i64 %160, 32
  br i1 %161, label %67, label %129, !llvm.loop !688

162:                                              ; preds = %67, %162
  %163 = phi i64 [ %193, %162 ], [ 0, %67 ]
  %164 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %163
  %165 = load i8, i8* %164, align 2
  %166 = zext i8 %165 to i32
  %167 = load i16, i16* %70, align 2
  %168 = zext i16 %167 to i32
  %169 = mul nuw nsw i32 %168, %166
  %170 = sub i8 0, %165
  %171 = zext i8 %170 to i32
  %172 = mul nuw nsw i32 %171, %11
  %173 = add nuw nsw i32 %172, 128
  %174 = add nuw nsw i32 %173, %169
  %175 = lshr i32 %174, 8
  %176 = trunc i32 %175 to i16
  %177 = getelementptr inbounds i16, i16* %68, i64 %163
  store i16 %176, i16* %177, align 2
  %178 = or i64 %163, 1
  %179 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = load i16, i16* %70, align 2
  %183 = zext i16 %182 to i32
  %184 = mul nuw nsw i32 %183, %181
  %185 = sub i8 0, %180
  %186 = zext i8 %185 to i32
  %187 = mul nuw nsw i32 %186, %11
  %188 = add nuw nsw i32 %187, 128
  %189 = add nuw nsw i32 %188, %184
  %190 = lshr i32 %189, 8
  %191 = trunc i32 %190 to i16
  %192 = getelementptr inbounds i16, i16* %68, i64 %178
  store i16 %191, i16* %192, align 2
  %193 = add nuw nsw i64 %163, 2
  %194 = icmp eq i64 %193, 32
  br i1 %194, label %195, label %162, !llvm.loop !689

195:                                              ; preds = %162, %79
  %196 = getelementptr inbounds i16, i16* %68, i64 %10
  %197 = getelementptr inbounds i8, i8* %3, i64 4
  %198 = bitcast i8* %197 to i16*
  %199 = shl i64 %10, 2
  %200 = getelementptr i8, i8* %0, i64 %199
  %201 = add i64 %199, 64
  %202 = getelementptr i8, i8* %0, i64 %201
  %203 = getelementptr i8, i8* %3, i64 5
  %204 = icmp ult i8* %200, %203
  %205 = icmp ult i8* %197, %202
  %206 = and i1 %204, %205
  br i1 %206, label %257, label %207

207:                                              ; preds = %195
  %208 = insertelement <8 x i32> undef, i32 %11, i32 0
  %209 = shufflevector <8 x i32> %208, <8 x i32> undef, <8 x i32> zeroinitializer
  %210 = load i16, i16* %198, align 2, !alias.scope !690
  %211 = insertelement <8 x i16> undef, i16 %210, i32 0
  %212 = shufflevector <8 x i16> %211, <8 x i16> undef, <8 x i32> zeroinitializer
  %213 = zext <8 x i16> %212 to <8 x i32>
  %214 = mul nuw nsw <8 x i32> %213, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %215 = mul nuw nsw <8 x i32> %209, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %216 = add nuw nsw <8 x i32> %215, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %217 = add nuw nsw <8 x i32> %216, %214
  %218 = lshr <8 x i32> %217, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %219 = trunc <8 x i32> %218 to <8 x i16>
  %220 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %219, <8 x i16>* %220, align 2, !alias.scope !693, !noalias !690
  %221 = load i16, i16* %198, align 2, !alias.scope !690
  %222 = insertelement <8 x i16> undef, i16 %221, i32 0
  %223 = shufflevector <8 x i16> %222, <8 x i16> undef, <8 x i32> zeroinitializer
  %224 = zext <8 x i16> %223 to <8 x i32>
  %225 = mul nuw nsw <8 x i32> %224, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %226 = mul nuw nsw <8 x i32> %209, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %227 = add nuw nsw <8 x i32> %226, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %228 = add nuw nsw <8 x i32> %227, %225
  %229 = lshr <8 x i32> %228, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %196, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !693, !noalias !690
  %233 = load i16, i16* %198, align 2, !alias.scope !690
  %234 = insertelement <8 x i16> undef, i16 %233, i32 0
  %235 = shufflevector <8 x i16> %234, <8 x i16> undef, <8 x i32> zeroinitializer
  %236 = zext <8 x i16> %235 to <8 x i32>
  %237 = mul nuw nsw <8 x i32> %236, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %238 = mul nuw nsw <8 x i32> %209, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %239 = add nuw nsw <8 x i32> %238, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %240 = add nuw nsw <8 x i32> %239, %237
  %241 = lshr <8 x i32> %240, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %242 = trunc <8 x i32> %241 to <8 x i16>
  %243 = getelementptr inbounds i16, i16* %196, i64 16
  %244 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %244, align 2, !alias.scope !693, !noalias !690
  %245 = load i16, i16* %198, align 2, !alias.scope !690
  %246 = insertelement <8 x i16> undef, i16 %245, i32 0
  %247 = shufflevector <8 x i16> %246, <8 x i16> undef, <8 x i32> zeroinitializer
  %248 = zext <8 x i16> %247 to <8 x i32>
  %249 = mul nuw nsw <8 x i32> %248, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %250 = mul nuw nsw <8 x i32> %209, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %251 = add nuw nsw <8 x i32> %250, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %252 = add nuw nsw <8 x i32> %251, %249
  %253 = lshr <8 x i32> %252, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %254 = trunc <8 x i32> %253 to <8 x i16>
  %255 = getelementptr inbounds i16, i16* %196, i64 24
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %256, align 2, !alias.scope !693, !noalias !690
  br label %290

257:                                              ; preds = %195, %257
  %258 = phi i64 [ %288, %257 ], [ 0, %195 ]
  %259 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %258
  %260 = load i8, i8* %259, align 2
  %261 = zext i8 %260 to i32
  %262 = load i16, i16* %198, align 2
  %263 = zext i16 %262 to i32
  %264 = mul nuw nsw i32 %263, %261
  %265 = sub i8 0, %260
  %266 = zext i8 %265 to i32
  %267 = mul nuw nsw i32 %266, %11
  %268 = add nuw nsw i32 %267, 128
  %269 = add nuw nsw i32 %268, %264
  %270 = lshr i32 %269, 8
  %271 = trunc i32 %270 to i16
  %272 = getelementptr inbounds i16, i16* %196, i64 %258
  store i16 %271, i16* %272, align 2
  %273 = or i64 %258, 1
  %274 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = load i16, i16* %198, align 2
  %278 = zext i16 %277 to i32
  %279 = mul nuw nsw i32 %278, %276
  %280 = sub i8 0, %275
  %281 = zext i8 %280 to i32
  %282 = mul nuw nsw i32 %281, %11
  %283 = add nuw nsw i32 %282, 128
  %284 = add nuw nsw i32 %283, %279
  %285 = lshr i32 %284, 8
  %286 = trunc i32 %285 to i16
  %287 = getelementptr inbounds i16, i16* %196, i64 %273
  store i16 %286, i16* %287, align 2
  %288 = add nuw nsw i64 %258, 2
  %289 = icmp eq i64 %288, 32
  br i1 %289, label %290, label %257, !llvm.loop !695

290:                                              ; preds = %257, %207
  %291 = getelementptr inbounds i16, i16* %196, i64 %10
  %292 = getelementptr inbounds i8, i8* %3, i64 6
  %293 = bitcast i8* %292 to i16*
  %294 = mul i64 %10, 6
  %295 = getelementptr i8, i8* %0, i64 %294
  %296 = add i64 %294, 64
  %297 = getelementptr i8, i8* %0, i64 %296
  %298 = getelementptr i8, i8* %3, i64 7
  %299 = icmp ult i8* %295, %298
  %300 = icmp ult i8* %292, %297
  %301 = and i1 %299, %300
  br i1 %301, label %352, label %302

302:                                              ; preds = %290
  %303 = insertelement <8 x i32> undef, i32 %11, i32 0
  %304 = shufflevector <8 x i32> %303, <8 x i32> undef, <8 x i32> zeroinitializer
  %305 = load i16, i16* %293, align 2, !alias.scope !696
  %306 = insertelement <8 x i16> undef, i16 %305, i32 0
  %307 = shufflevector <8 x i16> %306, <8 x i16> undef, <8 x i32> zeroinitializer
  %308 = zext <8 x i16> %307 to <8 x i32>
  %309 = mul nuw nsw <8 x i32> %308, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %310 = mul nuw nsw <8 x i32> %304, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %311 = add nuw nsw <8 x i32> %310, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %312 = add nuw nsw <8 x i32> %311, %309
  %313 = lshr <8 x i32> %312, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %314 = trunc <8 x i32> %313 to <8 x i16>
  %315 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %314, <8 x i16>* %315, align 2, !alias.scope !699, !noalias !696
  %316 = load i16, i16* %293, align 2, !alias.scope !696
  %317 = insertelement <8 x i16> undef, i16 %316, i32 0
  %318 = shufflevector <8 x i16> %317, <8 x i16> undef, <8 x i32> zeroinitializer
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %319, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %321 = mul nuw nsw <8 x i32> %304, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %322 = add nuw nsw <8 x i32> %321, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %323 = add nuw nsw <8 x i32> %322, %320
  %324 = lshr <8 x i32> %323, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %325 = trunc <8 x i32> %324 to <8 x i16>
  %326 = getelementptr inbounds i16, i16* %291, i64 8
  %327 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %327, align 2, !alias.scope !699, !noalias !696
  %328 = load i16, i16* %293, align 2, !alias.scope !696
  %329 = insertelement <8 x i16> undef, i16 %328, i32 0
  %330 = shufflevector <8 x i16> %329, <8 x i16> undef, <8 x i32> zeroinitializer
  %331 = zext <8 x i16> %330 to <8 x i32>
  %332 = mul nuw nsw <8 x i32> %331, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %333 = mul nuw nsw <8 x i32> %304, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %334 = add nuw nsw <8 x i32> %333, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %335 = add nuw nsw <8 x i32> %334, %332
  %336 = lshr <8 x i32> %335, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %291, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !699, !noalias !696
  %340 = load i16, i16* %293, align 2, !alias.scope !696
  %341 = insertelement <8 x i16> undef, i16 %340, i32 0
  %342 = shufflevector <8 x i16> %341, <8 x i16> undef, <8 x i32> zeroinitializer
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = mul nuw nsw <8 x i32> %343, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %345 = mul nuw nsw <8 x i32> %304, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %346 = add nuw nsw <8 x i32> %345, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %347 = add nuw nsw <8 x i32> %346, %344
  %348 = lshr <8 x i32> %347, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %349 = trunc <8 x i32> %348 to <8 x i16>
  %350 = getelementptr inbounds i16, i16* %291, i64 24
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %349, <8 x i16>* %351, align 2, !alias.scope !699, !noalias !696
  br label %385

352:                                              ; preds = %290, %352
  %353 = phi i64 [ %383, %352 ], [ 0, %290 ]
  %354 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %353
  %355 = load i8, i8* %354, align 2
  %356 = zext i8 %355 to i32
  %357 = load i16, i16* %293, align 2
  %358 = zext i16 %357 to i32
  %359 = mul nuw nsw i32 %358, %356
  %360 = sub i8 0, %355
  %361 = zext i8 %360 to i32
  %362 = mul nuw nsw i32 %361, %11
  %363 = add nuw nsw i32 %362, 128
  %364 = add nuw nsw i32 %363, %359
  %365 = lshr i32 %364, 8
  %366 = trunc i32 %365 to i16
  %367 = getelementptr inbounds i16, i16* %291, i64 %353
  store i16 %366, i16* %367, align 2
  %368 = or i64 %353, 1
  %369 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %368
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i32
  %372 = load i16, i16* %293, align 2
  %373 = zext i16 %372 to i32
  %374 = mul nuw nsw i32 %373, %371
  %375 = sub i8 0, %370
  %376 = zext i8 %375 to i32
  %377 = mul nuw nsw i32 %376, %11
  %378 = add nuw nsw i32 %377, 128
  %379 = add nuw nsw i32 %378, %374
  %380 = lshr i32 %379, 8
  %381 = trunc i32 %380 to i16
  %382 = getelementptr inbounds i16, i16* %291, i64 %368
  store i16 %381, i16* %382, align 2
  %383 = add nuw nsw i64 %353, 2
  %384 = icmp eq i64 %383, 32
  br i1 %384, label %385, label %352, !llvm.loop !701

385:                                              ; preds = %352, %302
  %386 = getelementptr inbounds i16, i16* %291, i64 %10
  %387 = getelementptr inbounds i8, i8* %3, i64 8
  %388 = bitcast i8* %387 to i16*
  %389 = shl i64 %10, 3
  %390 = getelementptr i8, i8* %0, i64 %389
  %391 = add i64 %389, 64
  %392 = getelementptr i8, i8* %0, i64 %391
  %393 = getelementptr i8, i8* %3, i64 9
  %394 = icmp ult i8* %390, %393
  %395 = icmp ult i8* %387, %392
  %396 = and i1 %394, %395
  br i1 %396, label %447, label %397

397:                                              ; preds = %385
  %398 = insertelement <8 x i32> undef, i32 %11, i32 0
  %399 = shufflevector <8 x i32> %398, <8 x i32> undef, <8 x i32> zeroinitializer
  %400 = load i16, i16* %388, align 2, !alias.scope !702
  %401 = insertelement <8 x i16> undef, i16 %400, i32 0
  %402 = shufflevector <8 x i16> %401, <8 x i16> undef, <8 x i32> zeroinitializer
  %403 = zext <8 x i16> %402 to <8 x i32>
  %404 = mul nuw nsw <8 x i32> %403, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %405 = mul nuw nsw <8 x i32> %399, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %406 = add nuw nsw <8 x i32> %405, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %407 = add nuw nsw <8 x i32> %406, %404
  %408 = lshr <8 x i32> %407, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %409 = trunc <8 x i32> %408 to <8 x i16>
  %410 = bitcast i16* %386 to <8 x i16>*
  store <8 x i16> %409, <8 x i16>* %410, align 2, !alias.scope !705, !noalias !702
  %411 = load i16, i16* %388, align 2, !alias.scope !702
  %412 = insertelement <8 x i16> undef, i16 %411, i32 0
  %413 = shufflevector <8 x i16> %412, <8 x i16> undef, <8 x i32> zeroinitializer
  %414 = zext <8 x i16> %413 to <8 x i32>
  %415 = mul nuw nsw <8 x i32> %414, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %416 = mul nuw nsw <8 x i32> %399, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %417 = add nuw nsw <8 x i32> %416, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %418 = add nuw nsw <8 x i32> %417, %415
  %419 = lshr <8 x i32> %418, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %420 = trunc <8 x i32> %419 to <8 x i16>
  %421 = getelementptr inbounds i16, i16* %386, i64 8
  %422 = bitcast i16* %421 to <8 x i16>*
  store <8 x i16> %420, <8 x i16>* %422, align 2, !alias.scope !705, !noalias !702
  %423 = load i16, i16* %388, align 2, !alias.scope !702
  %424 = insertelement <8 x i16> undef, i16 %423, i32 0
  %425 = shufflevector <8 x i16> %424, <8 x i16> undef, <8 x i32> zeroinitializer
  %426 = zext <8 x i16> %425 to <8 x i32>
  %427 = mul nuw nsw <8 x i32> %426, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %428 = mul nuw nsw <8 x i32> %399, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %429 = add nuw nsw <8 x i32> %428, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %430 = add nuw nsw <8 x i32> %429, %427
  %431 = lshr <8 x i32> %430, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %432 = trunc <8 x i32> %431 to <8 x i16>
  %433 = getelementptr inbounds i16, i16* %386, i64 16
  %434 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %432, <8 x i16>* %434, align 2, !alias.scope !705, !noalias !702
  %435 = load i16, i16* %388, align 2, !alias.scope !702
  %436 = insertelement <8 x i16> undef, i16 %435, i32 0
  %437 = shufflevector <8 x i16> %436, <8 x i16> undef, <8 x i32> zeroinitializer
  %438 = zext <8 x i16> %437 to <8 x i32>
  %439 = mul nuw nsw <8 x i32> %438, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %440 = mul nuw nsw <8 x i32> %399, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %441 = add nuw nsw <8 x i32> %440, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %442 = add nuw nsw <8 x i32> %441, %439
  %443 = lshr <8 x i32> %442, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %444 = trunc <8 x i32> %443 to <8 x i16>
  %445 = getelementptr inbounds i16, i16* %386, i64 24
  %446 = bitcast i16* %445 to <8 x i16>*
  store <8 x i16> %444, <8 x i16>* %446, align 2, !alias.scope !705, !noalias !702
  br label %480

447:                                              ; preds = %385, %447
  %448 = phi i64 [ %478, %447 ], [ 0, %385 ]
  %449 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %448
  %450 = load i8, i8* %449, align 2
  %451 = zext i8 %450 to i32
  %452 = load i16, i16* %388, align 2
  %453 = zext i16 %452 to i32
  %454 = mul nuw nsw i32 %453, %451
  %455 = sub i8 0, %450
  %456 = zext i8 %455 to i32
  %457 = mul nuw nsw i32 %456, %11
  %458 = add nuw nsw i32 %457, 128
  %459 = add nuw nsw i32 %458, %454
  %460 = lshr i32 %459, 8
  %461 = trunc i32 %460 to i16
  %462 = getelementptr inbounds i16, i16* %386, i64 %448
  store i16 %461, i16* %462, align 2
  %463 = or i64 %448, 1
  %464 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %463
  %465 = load i8, i8* %464, align 1
  %466 = zext i8 %465 to i32
  %467 = load i16, i16* %388, align 2
  %468 = zext i16 %467 to i32
  %469 = mul nuw nsw i32 %468, %466
  %470 = sub i8 0, %465
  %471 = zext i8 %470 to i32
  %472 = mul nuw nsw i32 %471, %11
  %473 = add nuw nsw i32 %472, 128
  %474 = add nuw nsw i32 %473, %469
  %475 = lshr i32 %474, 8
  %476 = trunc i32 %475 to i16
  %477 = getelementptr inbounds i16, i16* %386, i64 %463
  store i16 %476, i16* %477, align 2
  %478 = add nuw nsw i64 %448, 2
  %479 = icmp eq i64 %478, 32
  br i1 %479, label %480, label %447, !llvm.loop !707

480:                                              ; preds = %447, %397
  %481 = getelementptr inbounds i16, i16* %386, i64 %10
  %482 = getelementptr inbounds i8, i8* %3, i64 10
  %483 = bitcast i8* %482 to i16*
  %484 = mul i64 %10, 10
  %485 = getelementptr i8, i8* %0, i64 %484
  %486 = add i64 %484, 64
  %487 = getelementptr i8, i8* %0, i64 %486
  %488 = getelementptr i8, i8* %3, i64 11
  %489 = icmp ult i8* %485, %488
  %490 = icmp ult i8* %482, %487
  %491 = and i1 %489, %490
  br i1 %491, label %542, label %492

492:                                              ; preds = %480
  %493 = insertelement <8 x i32> undef, i32 %11, i32 0
  %494 = shufflevector <8 x i32> %493, <8 x i32> undef, <8 x i32> zeroinitializer
  %495 = load i16, i16* %483, align 2, !alias.scope !708
  %496 = insertelement <8 x i16> undef, i16 %495, i32 0
  %497 = shufflevector <8 x i16> %496, <8 x i16> undef, <8 x i32> zeroinitializer
  %498 = zext <8 x i16> %497 to <8 x i32>
  %499 = mul nuw nsw <8 x i32> %498, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %500 = mul nuw nsw <8 x i32> %494, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %501 = add nuw nsw <8 x i32> %500, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %502 = add nuw nsw <8 x i32> %501, %499
  %503 = lshr <8 x i32> %502, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %504 = trunc <8 x i32> %503 to <8 x i16>
  %505 = bitcast i16* %481 to <8 x i16>*
  store <8 x i16> %504, <8 x i16>* %505, align 2, !alias.scope !711, !noalias !708
  %506 = load i16, i16* %483, align 2, !alias.scope !708
  %507 = insertelement <8 x i16> undef, i16 %506, i32 0
  %508 = shufflevector <8 x i16> %507, <8 x i16> undef, <8 x i32> zeroinitializer
  %509 = zext <8 x i16> %508 to <8 x i32>
  %510 = mul nuw nsw <8 x i32> %509, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %511 = mul nuw nsw <8 x i32> %494, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %512 = add nuw nsw <8 x i32> %511, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %513 = add nuw nsw <8 x i32> %512, %510
  %514 = lshr <8 x i32> %513, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %515 = trunc <8 x i32> %514 to <8 x i16>
  %516 = getelementptr inbounds i16, i16* %481, i64 8
  %517 = bitcast i16* %516 to <8 x i16>*
  store <8 x i16> %515, <8 x i16>* %517, align 2, !alias.scope !711, !noalias !708
  %518 = load i16, i16* %483, align 2, !alias.scope !708
  %519 = insertelement <8 x i16> undef, i16 %518, i32 0
  %520 = shufflevector <8 x i16> %519, <8 x i16> undef, <8 x i32> zeroinitializer
  %521 = zext <8 x i16> %520 to <8 x i32>
  %522 = mul nuw nsw <8 x i32> %521, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %523 = mul nuw nsw <8 x i32> %494, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %524 = add nuw nsw <8 x i32> %523, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %525 = add nuw nsw <8 x i32> %524, %522
  %526 = lshr <8 x i32> %525, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %527 = trunc <8 x i32> %526 to <8 x i16>
  %528 = getelementptr inbounds i16, i16* %481, i64 16
  %529 = bitcast i16* %528 to <8 x i16>*
  store <8 x i16> %527, <8 x i16>* %529, align 2, !alias.scope !711, !noalias !708
  %530 = load i16, i16* %483, align 2, !alias.scope !708
  %531 = insertelement <8 x i16> undef, i16 %530, i32 0
  %532 = shufflevector <8 x i16> %531, <8 x i16> undef, <8 x i32> zeroinitializer
  %533 = zext <8 x i16> %532 to <8 x i32>
  %534 = mul nuw nsw <8 x i32> %533, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %535 = mul nuw nsw <8 x i32> %494, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %536 = add nuw nsw <8 x i32> %535, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %537 = add nuw nsw <8 x i32> %536, %534
  %538 = lshr <8 x i32> %537, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %539 = trunc <8 x i32> %538 to <8 x i16>
  %540 = getelementptr inbounds i16, i16* %481, i64 24
  %541 = bitcast i16* %540 to <8 x i16>*
  store <8 x i16> %539, <8 x i16>* %541, align 2, !alias.scope !711, !noalias !708
  br label %575

542:                                              ; preds = %480, %542
  %543 = phi i64 [ %573, %542 ], [ 0, %480 ]
  %544 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %543
  %545 = load i8, i8* %544, align 2
  %546 = zext i8 %545 to i32
  %547 = load i16, i16* %483, align 2
  %548 = zext i16 %547 to i32
  %549 = mul nuw nsw i32 %548, %546
  %550 = sub i8 0, %545
  %551 = zext i8 %550 to i32
  %552 = mul nuw nsw i32 %551, %11
  %553 = add nuw nsw i32 %552, 128
  %554 = add nuw nsw i32 %553, %549
  %555 = lshr i32 %554, 8
  %556 = trunc i32 %555 to i16
  %557 = getelementptr inbounds i16, i16* %481, i64 %543
  store i16 %556, i16* %557, align 2
  %558 = or i64 %543, 1
  %559 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %558
  %560 = load i8, i8* %559, align 1
  %561 = zext i8 %560 to i32
  %562 = load i16, i16* %483, align 2
  %563 = zext i16 %562 to i32
  %564 = mul nuw nsw i32 %563, %561
  %565 = sub i8 0, %560
  %566 = zext i8 %565 to i32
  %567 = mul nuw nsw i32 %566, %11
  %568 = add nuw nsw i32 %567, 128
  %569 = add nuw nsw i32 %568, %564
  %570 = lshr i32 %569, 8
  %571 = trunc i32 %570 to i16
  %572 = getelementptr inbounds i16, i16* %481, i64 %558
  store i16 %571, i16* %572, align 2
  %573 = add nuw nsw i64 %543, 2
  %574 = icmp eq i64 %573, 32
  br i1 %574, label %575, label %542, !llvm.loop !713

575:                                              ; preds = %542, %492
  %576 = getelementptr inbounds i16, i16* %481, i64 %10
  %577 = getelementptr inbounds i8, i8* %3, i64 12
  %578 = bitcast i8* %577 to i16*
  %579 = mul i64 %10, 12
  %580 = getelementptr i8, i8* %0, i64 %579
  %581 = add i64 %579, 64
  %582 = getelementptr i8, i8* %0, i64 %581
  %583 = getelementptr i8, i8* %3, i64 13
  %584 = icmp ult i8* %580, %583
  %585 = icmp ult i8* %577, %582
  %586 = and i1 %584, %585
  br i1 %586, label %637, label %587

587:                                              ; preds = %575
  %588 = insertelement <8 x i32> undef, i32 %11, i32 0
  %589 = shufflevector <8 x i32> %588, <8 x i32> undef, <8 x i32> zeroinitializer
  %590 = load i16, i16* %578, align 2, !alias.scope !714
  %591 = insertelement <8 x i16> undef, i16 %590, i32 0
  %592 = shufflevector <8 x i16> %591, <8 x i16> undef, <8 x i32> zeroinitializer
  %593 = zext <8 x i16> %592 to <8 x i32>
  %594 = mul nuw nsw <8 x i32> %593, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %595 = mul nuw nsw <8 x i32> %589, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %596 = add nuw nsw <8 x i32> %595, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %597 = add nuw nsw <8 x i32> %596, %594
  %598 = lshr <8 x i32> %597, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %599 = trunc <8 x i32> %598 to <8 x i16>
  %600 = bitcast i16* %576 to <8 x i16>*
  store <8 x i16> %599, <8 x i16>* %600, align 2, !alias.scope !717, !noalias !714
  %601 = load i16, i16* %578, align 2, !alias.scope !714
  %602 = insertelement <8 x i16> undef, i16 %601, i32 0
  %603 = shufflevector <8 x i16> %602, <8 x i16> undef, <8 x i32> zeroinitializer
  %604 = zext <8 x i16> %603 to <8 x i32>
  %605 = mul nuw nsw <8 x i32> %604, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %606 = mul nuw nsw <8 x i32> %589, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %607 = add nuw nsw <8 x i32> %606, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %608 = add nuw nsw <8 x i32> %607, %605
  %609 = lshr <8 x i32> %608, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %610 = trunc <8 x i32> %609 to <8 x i16>
  %611 = getelementptr inbounds i16, i16* %576, i64 8
  %612 = bitcast i16* %611 to <8 x i16>*
  store <8 x i16> %610, <8 x i16>* %612, align 2, !alias.scope !717, !noalias !714
  %613 = load i16, i16* %578, align 2, !alias.scope !714
  %614 = insertelement <8 x i16> undef, i16 %613, i32 0
  %615 = shufflevector <8 x i16> %614, <8 x i16> undef, <8 x i32> zeroinitializer
  %616 = zext <8 x i16> %615 to <8 x i32>
  %617 = mul nuw nsw <8 x i32> %616, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %618 = mul nuw nsw <8 x i32> %589, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %619 = add nuw nsw <8 x i32> %618, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %620 = add nuw nsw <8 x i32> %619, %617
  %621 = lshr <8 x i32> %620, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %622 = trunc <8 x i32> %621 to <8 x i16>
  %623 = getelementptr inbounds i16, i16* %576, i64 16
  %624 = bitcast i16* %623 to <8 x i16>*
  store <8 x i16> %622, <8 x i16>* %624, align 2, !alias.scope !717, !noalias !714
  %625 = load i16, i16* %578, align 2, !alias.scope !714
  %626 = insertelement <8 x i16> undef, i16 %625, i32 0
  %627 = shufflevector <8 x i16> %626, <8 x i16> undef, <8 x i32> zeroinitializer
  %628 = zext <8 x i16> %627 to <8 x i32>
  %629 = mul nuw nsw <8 x i32> %628, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %630 = mul nuw nsw <8 x i32> %589, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %631 = add nuw nsw <8 x i32> %630, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %632 = add nuw nsw <8 x i32> %631, %629
  %633 = lshr <8 x i32> %632, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %634 = trunc <8 x i32> %633 to <8 x i16>
  %635 = getelementptr inbounds i16, i16* %576, i64 24
  %636 = bitcast i16* %635 to <8 x i16>*
  store <8 x i16> %634, <8 x i16>* %636, align 2, !alias.scope !717, !noalias !714
  br label %670

637:                                              ; preds = %575, %637
  %638 = phi i64 [ %668, %637 ], [ 0, %575 ]
  %639 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %638
  %640 = load i8, i8* %639, align 2
  %641 = zext i8 %640 to i32
  %642 = load i16, i16* %578, align 2
  %643 = zext i16 %642 to i32
  %644 = mul nuw nsw i32 %643, %641
  %645 = sub i8 0, %640
  %646 = zext i8 %645 to i32
  %647 = mul nuw nsw i32 %646, %11
  %648 = add nuw nsw i32 %647, 128
  %649 = add nuw nsw i32 %648, %644
  %650 = lshr i32 %649, 8
  %651 = trunc i32 %650 to i16
  %652 = getelementptr inbounds i16, i16* %576, i64 %638
  store i16 %651, i16* %652, align 2
  %653 = or i64 %638, 1
  %654 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %653
  %655 = load i8, i8* %654, align 1
  %656 = zext i8 %655 to i32
  %657 = load i16, i16* %578, align 2
  %658 = zext i16 %657 to i32
  %659 = mul nuw nsw i32 %658, %656
  %660 = sub i8 0, %655
  %661 = zext i8 %660 to i32
  %662 = mul nuw nsw i32 %661, %11
  %663 = add nuw nsw i32 %662, 128
  %664 = add nuw nsw i32 %663, %659
  %665 = lshr i32 %664, 8
  %666 = trunc i32 %665 to i16
  %667 = getelementptr inbounds i16, i16* %576, i64 %653
  store i16 %666, i16* %667, align 2
  %668 = add nuw nsw i64 %638, 2
  %669 = icmp eq i64 %668, 32
  br i1 %669, label %670, label %637, !llvm.loop !719

670:                                              ; preds = %637, %587
  %671 = getelementptr inbounds i16, i16* %576, i64 %10
  %672 = getelementptr inbounds i8, i8* %3, i64 14
  %673 = bitcast i8* %672 to i16*
  %674 = mul i64 %10, 14
  %675 = getelementptr i8, i8* %0, i64 %674
  %676 = add i64 %674, 64
  %677 = getelementptr i8, i8* %0, i64 %676
  %678 = getelementptr i8, i8* %3, i64 15
  %679 = icmp ult i8* %675, %678
  %680 = icmp ult i8* %672, %677
  %681 = and i1 %679, %680
  br i1 %681, label %732, label %682

682:                                              ; preds = %670
  %683 = insertelement <8 x i32> undef, i32 %11, i32 0
  %684 = shufflevector <8 x i32> %683, <8 x i32> undef, <8 x i32> zeroinitializer
  %685 = load i16, i16* %673, align 2, !alias.scope !720
  %686 = insertelement <8 x i16> undef, i16 %685, i32 0
  %687 = shufflevector <8 x i16> %686, <8 x i16> undef, <8 x i32> zeroinitializer
  %688 = zext <8 x i16> %687 to <8 x i32>
  %689 = mul nuw nsw <8 x i32> %688, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %690 = mul nuw nsw <8 x i32> %684, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %691 = add nuw nsw <8 x i32> %690, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %692 = add nuw nsw <8 x i32> %691, %689
  %693 = lshr <8 x i32> %692, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %694 = trunc <8 x i32> %693 to <8 x i16>
  %695 = bitcast i16* %671 to <8 x i16>*
  store <8 x i16> %694, <8 x i16>* %695, align 2, !alias.scope !723, !noalias !720
  %696 = load i16, i16* %673, align 2, !alias.scope !720
  %697 = insertelement <8 x i16> undef, i16 %696, i32 0
  %698 = shufflevector <8 x i16> %697, <8 x i16> undef, <8 x i32> zeroinitializer
  %699 = zext <8 x i16> %698 to <8 x i32>
  %700 = mul nuw nsw <8 x i32> %699, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %701 = mul nuw nsw <8 x i32> %684, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %702 = add nuw nsw <8 x i32> %701, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %703 = add nuw nsw <8 x i32> %702, %700
  %704 = lshr <8 x i32> %703, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %705 = trunc <8 x i32> %704 to <8 x i16>
  %706 = getelementptr inbounds i16, i16* %671, i64 8
  %707 = bitcast i16* %706 to <8 x i16>*
  store <8 x i16> %705, <8 x i16>* %707, align 2, !alias.scope !723, !noalias !720
  %708 = load i16, i16* %673, align 2, !alias.scope !720
  %709 = insertelement <8 x i16> undef, i16 %708, i32 0
  %710 = shufflevector <8 x i16> %709, <8 x i16> undef, <8 x i32> zeroinitializer
  %711 = zext <8 x i16> %710 to <8 x i32>
  %712 = mul nuw nsw <8 x i32> %711, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %713 = mul nuw nsw <8 x i32> %684, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %714 = add nuw nsw <8 x i32> %713, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %715 = add nuw nsw <8 x i32> %714, %712
  %716 = lshr <8 x i32> %715, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %717 = trunc <8 x i32> %716 to <8 x i16>
  %718 = getelementptr inbounds i16, i16* %671, i64 16
  %719 = bitcast i16* %718 to <8 x i16>*
  store <8 x i16> %717, <8 x i16>* %719, align 2, !alias.scope !723, !noalias !720
  %720 = load i16, i16* %673, align 2, !alias.scope !720
  %721 = insertelement <8 x i16> undef, i16 %720, i32 0
  %722 = shufflevector <8 x i16> %721, <8 x i16> undef, <8 x i32> zeroinitializer
  %723 = zext <8 x i16> %722 to <8 x i32>
  %724 = mul nuw nsw <8 x i32> %723, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %725 = mul nuw nsw <8 x i32> %684, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %726 = add nuw nsw <8 x i32> %725, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %727 = add nuw nsw <8 x i32> %726, %724
  %728 = lshr <8 x i32> %727, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %729 = trunc <8 x i32> %728 to <8 x i16>
  %730 = getelementptr inbounds i16, i16* %671, i64 24
  %731 = bitcast i16* %730 to <8 x i16>*
  store <8 x i16> %729, <8 x i16>* %731, align 2, !alias.scope !723, !noalias !720
  br label %765

732:                                              ; preds = %670, %732
  %733 = phi i64 [ %763, %732 ], [ 0, %670 ]
  %734 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %733
  %735 = load i8, i8* %734, align 2
  %736 = zext i8 %735 to i32
  %737 = load i16, i16* %673, align 2
  %738 = zext i16 %737 to i32
  %739 = mul nuw nsw i32 %738, %736
  %740 = sub i8 0, %735
  %741 = zext i8 %740 to i32
  %742 = mul nuw nsw i32 %741, %11
  %743 = add nuw nsw i32 %742, 128
  %744 = add nuw nsw i32 %743, %739
  %745 = lshr i32 %744, 8
  %746 = trunc i32 %745 to i16
  %747 = getelementptr inbounds i16, i16* %671, i64 %733
  store i16 %746, i16* %747, align 2
  %748 = or i64 %733, 1
  %749 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %748
  %750 = load i8, i8* %749, align 1
  %751 = zext i8 %750 to i32
  %752 = load i16, i16* %673, align 2
  %753 = zext i16 %752 to i32
  %754 = mul nuw nsw i32 %753, %751
  %755 = sub i8 0, %750
  %756 = zext i8 %755 to i32
  %757 = mul nuw nsw i32 %756, %11
  %758 = add nuw nsw i32 %757, 128
  %759 = add nuw nsw i32 %758, %754
  %760 = lshr i32 %759, 8
  %761 = trunc i32 %760 to i16
  %762 = getelementptr inbounds i16, i16* %671, i64 %748
  store i16 %761, i16* %762, align 2
  %763 = add nuw nsw i64 %733, 2
  %764 = icmp eq i64 %763, 32
  br i1 %764, label %765, label %732, !llvm.loop !725

765:                                              ; preds = %732, %682
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi16ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i8, i8* %0, i64 32
  %11 = bitcast i8* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 48
  %13 = bitcast i8* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i16, i16* %6, i64 %5
  %15 = bitcast i16* %14 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i16, i16* %14, i64 8
  %17 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %14, i64 16
  %19 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i16, i16* %14, i64 24
  %21 = bitcast i16* %20 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds i16, i16* %14, i64 %5
  %23 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds i16, i16* %22, i64 8
  %25 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 16
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds i16, i16* %22, i64 24
  %29 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %22, i64 %5
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %30, i64 8
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds i16, i16* %30, i64 16
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds i16, i16* %30, i64 24
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %30, i64 %5
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 8
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 16
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %38, i64 24
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %38, i64 %5
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i16, i16* %46, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds i16, i16* %46, i64 16
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds i16, i16* %46, i64 24
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds i16, i16* %46, i64 %5
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds i16, i16* %54, i64 16
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds i16, i16* %54, i64 24
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds i16, i16* %54, i64 %5
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds i16, i16* %62, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %62, i64 24
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %69, align 2
  %70 = getelementptr inbounds i16, i16* %62, i64 %5
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %71, align 2
  %72 = getelementptr inbounds i16, i16* %70, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %73, align 2
  %74 = getelementptr inbounds i16, i16* %70, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %75, align 2
  %76 = getelementptr inbounds i16, i16* %70, i64 24
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %77, align 2
  %78 = getelementptr inbounds i16, i16* %70, i64 %5
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %79, align 2
  %80 = getelementptr inbounds i16, i16* %78, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %81, align 2
  %82 = getelementptr inbounds i16, i16* %78, i64 16
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %83, align 2
  %84 = getelementptr inbounds i16, i16* %78, i64 24
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %85, align 2
  %86 = getelementptr inbounds i16, i16* %78, i64 %5
  %87 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %87, align 2
  %88 = getelementptr inbounds i16, i16* %86, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %89, align 2
  %90 = getelementptr inbounds i16, i16* %86, i64 16
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds i16, i16* %86, i64 24
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %93, align 2
  %94 = getelementptr inbounds i16, i16* %86, i64 %5
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds i16, i16* %94, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds i16, i16* %94, i64 16
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %99, align 2
  %100 = getelementptr inbounds i16, i16* %94, i64 24
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %94, i64 %5
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i16, i16* %102, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i16, i16* %102, i64 16
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %102, i64 24
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %102, i64 %5
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %110, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %110, i64 16
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %110, i64 24
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %110, i64 %5
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %118, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %118, i64 16
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %118, i64 24
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %118, i64 %5
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %126, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i16, i16* %126, i64 16
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %126, i64 24
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %133, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 16
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %2, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %2, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %2, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %2, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %2, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %2, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %2, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %2, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %2, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %2, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %2, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %2, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %2, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %2, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %2, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = lshr i32 %163, 5
  %165 = lshr i64 %1, 1
  %166 = trunc i32 %164 to i16
  %167 = insertelement <8 x i16> undef, i16 %166, i32 0
  %168 = shufflevector <8 x i16> %167, <8 x i16> undef, <8 x i32> zeroinitializer
  %169 = insertelement <8 x i16> undef, i16 %166, i32 0
  %170 = shufflevector <8 x i16> %169, <8 x i16> undef, <8 x i32> zeroinitializer
  %171 = insertelement <8 x i16> undef, i16 %166, i32 0
  %172 = shufflevector <8 x i16> %171, <8 x i16> undef, <8 x i32> zeroinitializer
  %173 = insertelement <8 x i16> undef, i16 %166, i32 0
  %174 = shufflevector <8 x i16> %173, <8 x i16> undef, <8 x i32> zeroinitializer
  %175 = bitcast i8* %0 to i16*
  %176 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i8, i8* %0, i64 16
  %178 = bitcast i8* %177 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds i8, i8* %0, i64 32
  %180 = bitcast i8* %179 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i8, i8* %0, i64 48
  %182 = bitcast i8* %181 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %175, i64 %165
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %183, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %183, i64 16
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %183, i64 24
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %183, i64 %165
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %191, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %191, i64 16
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %191, i64 24
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %191, i64 %165
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %199, i64 8
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %199, i64 16
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %199, i64 24
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %199, i64 %165
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %207, i64 8
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %207, i64 16
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %207, i64 24
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds i16, i16* %207, i64 %165
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %216, align 2
  %217 = getelementptr inbounds i16, i16* %215, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %218, align 2
  %219 = getelementptr inbounds i16, i16* %215, i64 16
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %220, align 2
  %221 = getelementptr inbounds i16, i16* %215, i64 24
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %222, align 2
  %223 = getelementptr inbounds i16, i16* %215, i64 %165
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %224, align 2
  %225 = getelementptr inbounds i16, i16* %223, i64 8
  %226 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %226, align 2
  %227 = getelementptr inbounds i16, i16* %223, i64 16
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %228, align 2
  %229 = getelementptr inbounds i16, i16* %223, i64 24
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %230, align 2
  %231 = getelementptr inbounds i16, i16* %223, i64 %165
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %232, align 2
  %233 = getelementptr inbounds i16, i16* %231, i64 8
  %234 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %234, align 2
  %235 = getelementptr inbounds i16, i16* %231, i64 16
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %236, align 2
  %237 = getelementptr inbounds i16, i16* %231, i64 24
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %238, align 2
  %239 = getelementptr inbounds i16, i16* %231, i64 %165
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %240, align 2
  %241 = getelementptr inbounds i16, i16* %239, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %242, align 2
  %243 = getelementptr inbounds i16, i16* %239, i64 16
  %244 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %244, align 2
  %245 = getelementptr inbounds i16, i16* %239, i64 24
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %246, align 2
  %247 = getelementptr inbounds i16, i16* %239, i64 %165
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %248, align 2
  %249 = getelementptr inbounds i16, i16* %247, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %250, align 2
  %251 = getelementptr inbounds i16, i16* %247, i64 16
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %252, align 2
  %253 = getelementptr inbounds i16, i16* %247, i64 24
  %254 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %254, align 2
  %255 = getelementptr inbounds i16, i16* %247, i64 %165
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %256, align 2
  %257 = getelementptr inbounds i16, i16* %255, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %258, align 2
  %259 = getelementptr inbounds i16, i16* %255, i64 16
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %260, align 2
  %261 = getelementptr inbounds i16, i16* %255, i64 24
  %262 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %262, align 2
  %263 = getelementptr inbounds i16, i16* %255, i64 %165
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %264, align 2
  %265 = getelementptr inbounds i16, i16* %263, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %266, align 2
  %267 = getelementptr inbounds i16, i16* %263, i64 16
  %268 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %268, align 2
  %269 = getelementptr inbounds i16, i16* %263, i64 24
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %270, align 2
  %271 = getelementptr inbounds i16, i16* %263, i64 %165
  %272 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %272, align 2
  %273 = getelementptr inbounds i16, i16* %271, i64 8
  %274 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %274, align 2
  %275 = getelementptr inbounds i16, i16* %271, i64 16
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %276, align 2
  %277 = getelementptr inbounds i16, i16* %271, i64 24
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %278, align 2
  %279 = getelementptr inbounds i16, i16* %271, i64 %165
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %280, align 2
  %281 = getelementptr inbounds i16, i16* %279, i64 8
  %282 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %282, align 2
  %283 = getelementptr inbounds i16, i16* %279, i64 16
  %284 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %284, align 2
  %285 = getelementptr inbounds i16, i16* %279, i64 24
  %286 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %286, align 2
  %287 = getelementptr inbounds i16, i16* %279, i64 %165
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %288, align 2
  %289 = getelementptr inbounds i16, i16* %287, i64 8
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %290, align 2
  %291 = getelementptr inbounds i16, i16* %287, i64 16
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %292, align 2
  %293 = getelementptr inbounds i16, i16* %287, i64 24
  %294 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %294, align 2
  %295 = getelementptr inbounds i16, i16* %287, i64 %165
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %296, align 2
  %297 = getelementptr inbounds i16, i16* %295, i64 8
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %298, align 2
  %299 = getelementptr inbounds i16, i16* %295, i64 16
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %300, align 2
  %301 = getelementptr inbounds i16, i16* %295, i64 24
  %302 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %302, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = lshr i64 %1, 1
  %86 = trunc i32 %84 to i16
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = insertelement <8 x i16> undef, i16 %86, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = insertelement <8 x i16> undef, i16 %86, i32 0
  %92 = shufflevector <8 x i16> %91, <8 x i16> undef, <8 x i32> zeroinitializer
  %93 = insertelement <8 x i16> undef, i16 %86, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = bitcast i8* %0 to i16*
  %96 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i8, i8* %0, i64 16
  %98 = bitcast i8* %97 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i8, i8* %0, i64 32
  %100 = bitcast i8* %99 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i8, i8* %0, i64 48
  %102 = bitcast i8* %101 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %95, i64 %85
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %103, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %103, i64 16
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %103, i64 24
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %103, i64 %85
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %111, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds i16, i16* %111, i64 16
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %111, i64 24
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds i16, i16* %111, i64 %85
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds i16, i16* %119, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds i16, i16* %119, i64 16
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %124, align 2
  %125 = getelementptr inbounds i16, i16* %119, i64 24
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds i16, i16* %119, i64 %85
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds i16, i16* %127, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds i16, i16* %127, i64 16
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds i16, i16* %127, i64 24
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %134, align 2
  %135 = getelementptr inbounds i16, i16* %127, i64 %85
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %136, align 2
  %137 = getelementptr inbounds i16, i16* %135, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds i16, i16* %135, i64 16
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %140, align 2
  %141 = getelementptr inbounds i16, i16* %135, i64 24
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %142, align 2
  %143 = getelementptr inbounds i16, i16* %135, i64 %85
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %144, align 2
  %145 = getelementptr inbounds i16, i16* %143, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %146, align 2
  %147 = getelementptr inbounds i16, i16* %143, i64 16
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds i16, i16* %143, i64 24
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds i16, i16* %143, i64 %85
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds i16, i16* %151, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %154, align 2
  %155 = getelementptr inbounds i16, i16* %151, i64 16
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %156, align 2
  %157 = getelementptr inbounds i16, i16* %151, i64 24
  %158 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds i16, i16* %151, i64 %85
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %160, align 2
  %161 = getelementptr inbounds i16, i16* %159, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds i16, i16* %159, i64 16
  %164 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %164, align 2
  %165 = getelementptr inbounds i16, i16* %159, i64 24
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %166, align 2
  %167 = getelementptr inbounds i16, i16* %159, i64 %85
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %168, align 2
  %169 = getelementptr inbounds i16, i16* %167, i64 8
  %170 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %170, align 2
  %171 = getelementptr inbounds i16, i16* %167, i64 16
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds i16, i16* %167, i64 24
  %174 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds i16, i16* %167, i64 %85
  %176 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i16, i16* %175, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds i16, i16* %175, i64 16
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %175, i64 24
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %175, i64 %85
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %183, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %183, i64 16
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %183, i64 24
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %183, i64 %85
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %191, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %191, i64 16
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %191, i64 24
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %191, i64 %85
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %199, i64 8
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %199, i64 16
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %199, i64 24
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %199, i64 %85
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %207, i64 8
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %207, i64 16
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %207, i64 24
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds i16, i16* %207, i64 %85
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %216, align 2
  %217 = getelementptr inbounds i16, i16* %215, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %218, align 2
  %219 = getelementptr inbounds i16, i16* %215, i64 16
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %220, align 2
  %221 = getelementptr inbounds i16, i16* %215, i64 24
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %222, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 24
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %2, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %2, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %2, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %2, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %2, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %2, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %2, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %2, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %2, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %2, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %2, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %2, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %2, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %2, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %2, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = bitcast i8* %3 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = add nuw nsw i32 %163, %166
  %168 = getelementptr inbounds i8, i8* %3, i64 2
  %169 = bitcast i8* %168 to i16*
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nuw nsw i32 %167, %171
  %173 = getelementptr inbounds i8, i8* %3, i64 4
  %174 = bitcast i8* %173 to i16*
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = add nuw nsw i32 %172, %176
  %178 = getelementptr inbounds i8, i8* %3, i64 6
  %179 = bitcast i8* %178 to i16*
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = add nuw nsw i32 %177, %181
  %183 = getelementptr inbounds i8, i8* %3, i64 8
  %184 = bitcast i8* %183 to i16*
  %185 = load i16, i16* %184, align 2
  %186 = zext i16 %185 to i32
  %187 = add nuw nsw i32 %182, %186
  %188 = getelementptr inbounds i8, i8* %3, i64 10
  %189 = bitcast i8* %188 to i16*
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add nuw nsw i32 %187, %191
  %193 = getelementptr inbounds i8, i8* %3, i64 12
  %194 = bitcast i8* %193 to i16*
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %192, %196
  %198 = getelementptr inbounds i8, i8* %3, i64 14
  %199 = bitcast i8* %198 to i16*
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = add nuw nsw i32 %197, %201
  %203 = getelementptr inbounds i8, i8* %3, i64 16
  %204 = bitcast i8* %203 to i16*
  %205 = load i16, i16* %204, align 2
  %206 = zext i16 %205 to i32
  %207 = add nuw nsw i32 %202, %206
  %208 = getelementptr inbounds i8, i8* %3, i64 18
  %209 = bitcast i8* %208 to i16*
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i32
  %212 = add nuw nsw i32 %207, %211
  %213 = getelementptr inbounds i8, i8* %3, i64 20
  %214 = bitcast i8* %213 to i16*
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = add nuw nsw i32 %212, %216
  %218 = getelementptr inbounds i8, i8* %3, i64 22
  %219 = bitcast i8* %218 to i16*
  %220 = load i16, i16* %219, align 2
  %221 = zext i16 %220 to i32
  %222 = add nuw nsw i32 %217, %221
  %223 = getelementptr inbounds i8, i8* %3, i64 24
  %224 = bitcast i8* %223 to i16*
  %225 = load i16, i16* %224, align 2
  %226 = zext i16 %225 to i32
  %227 = add nuw nsw i32 %222, %226
  %228 = getelementptr inbounds i8, i8* %3, i64 26
  %229 = bitcast i8* %228 to i16*
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = add nuw nsw i32 %227, %231
  %233 = getelementptr inbounds i8, i8* %3, i64 28
  %234 = bitcast i8* %233 to i16*
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = add nuw nsw i32 %232, %236
  %238 = getelementptr inbounds i8, i8* %3, i64 30
  %239 = bitcast i8* %238 to i16*
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = add nuw nsw i32 %237, %241
  %243 = udiv i32 %242, 48
  %244 = lshr i64 %1, 1
  %245 = trunc i32 %243 to i16
  %246 = insertelement <8 x i16> undef, i16 %245, i32 0
  %247 = shufflevector <8 x i16> %246, <8 x i16> undef, <8 x i32> zeroinitializer
  %248 = insertelement <8 x i16> undef, i16 %245, i32 0
  %249 = shufflevector <8 x i16> %248, <8 x i16> undef, <8 x i32> zeroinitializer
  %250 = insertelement <8 x i16> undef, i16 %245, i32 0
  %251 = shufflevector <8 x i16> %250, <8 x i16> undef, <8 x i32> zeroinitializer
  %252 = insertelement <8 x i16> undef, i16 %245, i32 0
  %253 = shufflevector <8 x i16> %252, <8 x i16> undef, <8 x i32> zeroinitializer
  %254 = bitcast i8* %0 to i16*
  %255 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %255, align 2
  %256 = getelementptr inbounds i8, i8* %0, i64 16
  %257 = bitcast i8* %256 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %257, align 2
  %258 = getelementptr inbounds i8, i8* %0, i64 32
  %259 = bitcast i8* %258 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %259, align 2
  %260 = getelementptr inbounds i8, i8* %0, i64 48
  %261 = bitcast i8* %260 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %261, align 2
  %262 = getelementptr inbounds i16, i16* %254, i64 %244
  %263 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %263, align 2
  %264 = getelementptr inbounds i16, i16* %262, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %265, align 2
  %266 = getelementptr inbounds i16, i16* %262, i64 16
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %267, align 2
  %268 = getelementptr inbounds i16, i16* %262, i64 24
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds i16, i16* %262, i64 %244
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %271, align 2
  %272 = getelementptr inbounds i16, i16* %270, i64 8
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %273, align 2
  %274 = getelementptr inbounds i16, i16* %270, i64 16
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %275, align 2
  %276 = getelementptr inbounds i16, i16* %270, i64 24
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %277, align 2
  %278 = getelementptr inbounds i16, i16* %270, i64 %244
  %279 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %279, align 2
  %280 = getelementptr inbounds i16, i16* %278, i64 8
  %281 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %281, align 2
  %282 = getelementptr inbounds i16, i16* %278, i64 16
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %283, align 2
  %284 = getelementptr inbounds i16, i16* %278, i64 24
  %285 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %285, align 2
  %286 = getelementptr inbounds i16, i16* %278, i64 %244
  %287 = bitcast i16* %286 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %287, align 2
  %288 = getelementptr inbounds i16, i16* %286, i64 8
  %289 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %289, align 2
  %290 = getelementptr inbounds i16, i16* %286, i64 16
  %291 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %291, align 2
  %292 = getelementptr inbounds i16, i16* %286, i64 24
  %293 = bitcast i16* %292 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %293, align 2
  %294 = getelementptr inbounds i16, i16* %286, i64 %244
  %295 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %295, align 2
  %296 = getelementptr inbounds i16, i16* %294, i64 8
  %297 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %297, align 2
  %298 = getelementptr inbounds i16, i16* %294, i64 16
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %299, align 2
  %300 = getelementptr inbounds i16, i16* %294, i64 24
  %301 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %301, align 2
  %302 = getelementptr inbounds i16, i16* %294, i64 %244
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %303, align 2
  %304 = getelementptr inbounds i16, i16* %302, i64 8
  %305 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %305, align 2
  %306 = getelementptr inbounds i16, i16* %302, i64 16
  %307 = bitcast i16* %306 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %307, align 2
  %308 = getelementptr inbounds i16, i16* %302, i64 24
  %309 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %309, align 2
  %310 = getelementptr inbounds i16, i16* %302, i64 %244
  %311 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %311, align 2
  %312 = getelementptr inbounds i16, i16* %310, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %313, align 2
  %314 = getelementptr inbounds i16, i16* %310, i64 16
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %315, align 2
  %316 = getelementptr inbounds i16, i16* %310, i64 24
  %317 = bitcast i16* %316 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %317, align 2
  %318 = getelementptr inbounds i16, i16* %310, i64 %244
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %319, align 2
  %320 = getelementptr inbounds i16, i16* %318, i64 8
  %321 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %321, align 2
  %322 = getelementptr inbounds i16, i16* %318, i64 16
  %323 = bitcast i16* %322 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %323, align 2
  %324 = getelementptr inbounds i16, i16* %318, i64 24
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %325, align 2
  %326 = getelementptr inbounds i16, i16* %318, i64 %244
  %327 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %327, align 2
  %328 = getelementptr inbounds i16, i16* %326, i64 8
  %329 = bitcast i16* %328 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %329, align 2
  %330 = getelementptr inbounds i16, i16* %326, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %331, align 2
  %332 = getelementptr inbounds i16, i16* %326, i64 24
  %333 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %333, align 2
  %334 = getelementptr inbounds i16, i16* %326, i64 %244
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %335, align 2
  %336 = getelementptr inbounds i16, i16* %334, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %337, align 2
  %338 = getelementptr inbounds i16, i16* %334, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %339, align 2
  %340 = getelementptr inbounds i16, i16* %334, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %341, align 2
  %342 = getelementptr inbounds i16, i16* %334, i64 %244
  %343 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %343, align 2
  %344 = getelementptr inbounds i16, i16* %342, i64 8
  %345 = bitcast i16* %344 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %345, align 2
  %346 = getelementptr inbounds i16, i16* %342, i64 16
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %347, align 2
  %348 = getelementptr inbounds i16, i16* %342, i64 24
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %349, align 2
  %350 = getelementptr inbounds i16, i16* %342, i64 %244
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %351, align 2
  %352 = getelementptr inbounds i16, i16* %350, i64 8
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %353, align 2
  %354 = getelementptr inbounds i16, i16* %350, i64 16
  %355 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %355, align 2
  %356 = getelementptr inbounds i16, i16* %350, i64 24
  %357 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %357, align 2
  %358 = getelementptr inbounds i16, i16* %350, i64 %244
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %359, align 2
  %360 = getelementptr inbounds i16, i16* %358, i64 8
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %361, align 2
  %362 = getelementptr inbounds i16, i16* %358, i64 16
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %363, align 2
  %364 = getelementptr inbounds i16, i16* %358, i64 24
  %365 = bitcast i16* %364 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %365, align 2
  %366 = getelementptr inbounds i16, i16* %358, i64 %244
  %367 = bitcast i16* %366 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %367, align 2
  %368 = getelementptr inbounds i16, i16* %366, i64 8
  %369 = bitcast i16* %368 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %369, align 2
  %370 = getelementptr inbounds i16, i16* %366, i64 16
  %371 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %371, align 2
  %372 = getelementptr inbounds i16, i16* %366, i64 24
  %373 = bitcast i16* %372 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %373, align 2
  %374 = getelementptr inbounds i16, i16* %366, i64 %244
  %375 = bitcast i16* %374 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %375, align 2
  %376 = getelementptr inbounds i16, i16* %374, i64 8
  %377 = bitcast i16* %376 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %377, align 2
  %378 = getelementptr inbounds i16, i16* %374, i64 16
  %379 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %379, align 2
  %380 = getelementptr inbounds i16, i16* %374, i64 24
  %381 = bitcast i16* %380 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %381, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 64, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 64, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 64, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 64, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 64, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 64, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 64, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 64, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %2, i64 64, i1 false)
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %2, i64 64, i1 false)
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %2, i64 64, i1 false)
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %2, i64 64, i1 false)
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %2, i64 64, i1 false)
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %2, i64 64, i1 false)
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %2, i64 64, i1 false)
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %2, i64 64, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %3 to i16*
  %7 = bitcast i8* %0 to i16*
  %8 = load i16, i16* %6, align 2
  %9 = insertelement <8 x i16> undef, i16 %8, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i8, i8* %0, i64 32
  %15 = bitcast i8* %14 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i8, i8* %0, i64 48
  %17 = bitcast i8* %16 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i16, i16* %7, i64 %5
  %19 = getelementptr inbounds i8, i8* %3, i64 2
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = insertelement <8 x i16> undef, i16 %21, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  %24 = bitcast i16* %18 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds i16, i16* %18, i64 8
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds i16, i16* %18, i64 16
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds i16, i16* %18, i64 24
  %30 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %18, i64 %5
  %32 = getelementptr inbounds i8, i8* %3, i64 4
  %33 = bitcast i8* %32 to i16*
  %34 = load i16, i16* %33, align 2
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %31, i64 8
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %31, i64 16
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %31, i64 24
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %31, i64 %5
  %45 = getelementptr inbounds i8, i8* %3, i64 6
  %46 = bitcast i8* %45 to i16*
  %47 = load i16, i16* %46, align 2
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 2
  %51 = getelementptr inbounds i16, i16* %44, i64 8
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds i16, i16* %44, i64 16
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds i16, i16* %44, i64 24
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds i16, i16* %44, i64 %5
  %58 = getelementptr inbounds i8, i8* %3, i64 8
  %59 = bitcast i8* %58 to i16*
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <8 x i16> undef, i16 %60, i32 0
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> zeroinitializer
  %63 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds i16, i16* %57, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %57, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %57, i64 24
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %69, align 2
  %70 = getelementptr inbounds i16, i16* %57, i64 %5
  %71 = getelementptr inbounds i8, i8* %3, i64 10
  %72 = bitcast i8* %71 to i16*
  %73 = load i16, i16* %72, align 2
  %74 = insertelement <8 x i16> undef, i16 %73, i32 0
  %75 = shufflevector <8 x i16> %74, <8 x i16> undef, <8 x i32> zeroinitializer
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds i16, i16* %70, i64 16
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds i16, i16* %70, i64 24
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds i16, i16* %70, i64 %5
  %84 = getelementptr inbounds i8, i8* %3, i64 12
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %89, align 2
  %90 = getelementptr inbounds i16, i16* %83, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds i16, i16* %83, i64 16
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %93, align 2
  %94 = getelementptr inbounds i16, i16* %83, i64 24
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds i16, i16* %83, i64 %5
  %97 = getelementptr inbounds i8, i8* %3, i64 14
  %98 = bitcast i8* %97 to i16*
  %99 = load i16, i16* %98, align 2
  %100 = insertelement <8 x i16> undef, i16 %99, i32 0
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> zeroinitializer
  %102 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i16, i16* %96, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %96, i64 16
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %96, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %96, i64 %5
  %110 = getelementptr inbounds i8, i8* %3, i64 16
  %111 = bitcast i8* %110 to i16*
  %112 = load i16, i16* %111, align 2
  %113 = insertelement <8 x i16> undef, i16 %112, i32 0
  %114 = shufflevector <8 x i16> %113, <8 x i16> undef, <8 x i32> zeroinitializer
  %115 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %109, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %109, i64 16
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %109, i64 24
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %109, i64 %5
  %123 = getelementptr inbounds i8, i8* %3, i64 18
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = insertelement <8 x i16> undef, i16 %125, i32 0
  %127 = shufflevector <8 x i16> %126, <8 x i16> undef, <8 x i32> zeroinitializer
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds i16, i16* %122, i64 16
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds i16, i16* %122, i64 24
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %134, align 2
  %135 = getelementptr inbounds i16, i16* %122, i64 %5
  %136 = getelementptr inbounds i8, i8* %3, i64 20
  %137 = bitcast i8* %136 to i16*
  %138 = load i16, i16* %137, align 2
  %139 = insertelement <8 x i16> undef, i16 %138, i32 0
  %140 = shufflevector <8 x i16> %139, <8 x i16> undef, <8 x i32> zeroinitializer
  %141 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %141, align 2
  %142 = getelementptr inbounds i16, i16* %135, i64 8
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds i16, i16* %135, i64 16
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %145, align 2
  %146 = getelementptr inbounds i16, i16* %135, i64 24
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds i16, i16* %135, i64 %5
  %149 = getelementptr inbounds i8, i8* %3, i64 22
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = insertelement <8 x i16> undef, i16 %151, i32 0
  %153 = shufflevector <8 x i16> %152, <8 x i16> undef, <8 x i32> zeroinitializer
  %154 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %154, align 2
  %155 = getelementptr inbounds i16, i16* %148, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %156, align 2
  %157 = getelementptr inbounds i16, i16* %148, i64 16
  %158 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds i16, i16* %148, i64 24
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %160, align 2
  %161 = getelementptr inbounds i16, i16* %148, i64 %5
  %162 = getelementptr inbounds i8, i8* %3, i64 24
  %163 = bitcast i8* %162 to i16*
  %164 = load i16, i16* %163, align 2
  %165 = insertelement <8 x i16> undef, i16 %164, i32 0
  %166 = shufflevector <8 x i16> %165, <8 x i16> undef, <8 x i32> zeroinitializer
  %167 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds i16, i16* %161, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %169, align 2
  %170 = getelementptr inbounds i16, i16* %161, i64 16
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %171, align 2
  %172 = getelementptr inbounds i16, i16* %161, i64 24
  %173 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %173, align 2
  %174 = getelementptr inbounds i16, i16* %161, i64 %5
  %175 = getelementptr inbounds i8, i8* %3, i64 26
  %176 = bitcast i8* %175 to i16*
  %177 = load i16, i16* %176, align 2
  %178 = insertelement <8 x i16> undef, i16 %177, i32 0
  %179 = shufflevector <8 x i16> %178, <8 x i16> undef, <8 x i32> zeroinitializer
  %180 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %174, i64 8
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %174, i64 16
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %174, i64 24
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %174, i64 %5
  %188 = getelementptr inbounds i8, i8* %3, i64 28
  %189 = bitcast i8* %188 to i16*
  %190 = load i16, i16* %189, align 2
  %191 = insertelement <8 x i16> undef, i16 %190, i32 0
  %192 = shufflevector <8 x i16> %191, <8 x i16> undef, <8 x i32> zeroinitializer
  %193 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds i16, i16* %187, i64 8
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %195, align 2
  %196 = getelementptr inbounds i16, i16* %187, i64 16
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %197, align 2
  %198 = getelementptr inbounds i16, i16* %187, i64 24
  %199 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %199, align 2
  %200 = getelementptr inbounds i16, i16* %187, i64 %5
  %201 = getelementptr inbounds i8, i8* %3, i64 30
  %202 = bitcast i8* %201 to i16*
  %203 = load i16, i16* %202, align 2
  %204 = insertelement <8 x i16> undef, i16 %203, i32 0
  %205 = shufflevector <8 x i16> %204, <8 x i16> undef, <8 x i32> zeroinitializer
  %206 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %205, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %200, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %205, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %200, i64 16
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %205, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %200, i64 24
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %205, <8 x i16>* %212, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 16
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 32
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 62
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 30
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 64
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %26 = getelementptr inbounds i8, i8* %2, i64 32
  %27 = bitcast i8* %26 to <8 x i16>*
  %28 = mul nuw nsw <8 x i32> %20, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %29 = getelementptr inbounds i8, i8* %2, i64 48
  %30 = bitcast i8* %29 to <8 x i16>*
  %31 = mul nuw nsw <8 x i32> %20, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  br label %32

32:                                               ; preds = %123, %4
  %33 = phi i64 [ 0, %4 ], [ %125, %123 ]
  %34 = phi i16* [ %13, %4 ], [ %124, %123 ]
  %35 = mul i64 %17, %33
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = add i64 %35, 64
  %38 = getelementptr i8, i8* %0, i64 %37
  %39 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %33
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds i16, i16* %6, i64 %33
  %43 = sub i8 0, %40
  %44 = zext i8 %43 to i32
  %45 = mul nuw nsw i32 %44, %15
  %46 = add nuw nsw i32 %45, 256
  %47 = shl nuw nsw i64 %33, 1
  %48 = or i64 %47, 1
  %49 = getelementptr i8, i8* %3, i64 %48
  %50 = icmp ult i8* %36, %18
  %51 = icmp ugt i8* %38, %2
  %52 = and i1 %50, %51
  %53 = bitcast i16* %42 to i8*
  %54 = icmp ult i8* %36, %49
  %55 = icmp ugt i8* %38, %53
  %56 = and i1 %54, %55
  %57 = or i1 %52, %56
  br i1 %57, label %127, label %58

58:                                               ; preds = %32
  %59 = insertelement <8 x i32> undef, i32 %41, i32 0
  %60 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> zeroinitializer
  %61 = insertelement <8 x i32> undef, i32 %46, i32 0
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> zeroinitializer
  %63 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !726
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %60, %64
  %66 = load i16, i16* %42, align 2, !alias.scope !729
  %67 = insertelement <8 x i16> undef, i16 %66, i32 0
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> zeroinitializer
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %69, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %71 = add nuw nsw <8 x i32> %62, %65
  %72 = add nuw nsw <8 x i32> %71, %22
  %73 = add nuw nsw <8 x i32> %72, %70
  %74 = lshr <8 x i32> %73, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %75 = trunc <8 x i32> %74 to <8 x i16>
  %76 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2, !alias.scope !731, !noalias !733
  %77 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !726
  %78 = zext <8 x i16> %77 to <8 x i32>
  %79 = mul nuw nsw <8 x i32> %60, %78
  %80 = load i16, i16* %42, align 2, !alias.scope !729
  %81 = insertelement <8 x i16> undef, i16 %80, i32 0
  %82 = shufflevector <8 x i16> %81, <8 x i16> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i16> %82 to <8 x i32>
  %84 = mul nuw nsw <8 x i32> %83, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %85 = add nuw nsw <8 x i32> %62, %79
  %86 = add nuw nsw <8 x i32> %85, %25
  %87 = add nuw nsw <8 x i32> %86, %84
  %88 = lshr <8 x i32> %87, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %34, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !731, !noalias !733
  %92 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !726
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %60, %93
  %95 = load i16, i16* %42, align 2, !alias.scope !729
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %98, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %100 = add nuw nsw <8 x i32> %62, %94
  %101 = add nuw nsw <8 x i32> %100, %28
  %102 = add nuw nsw <8 x i32> %101, %99
  %103 = lshr <8 x i32> %102, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %104 = trunc <8 x i32> %103 to <8 x i16>
  %105 = getelementptr inbounds i16, i16* %34, i64 16
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %106, align 2, !alias.scope !731, !noalias !733
  %107 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !726
  %108 = zext <8 x i16> %107 to <8 x i32>
  %109 = mul nuw nsw <8 x i32> %60, %108
  %110 = load i16, i16* %42, align 2, !alias.scope !729
  %111 = insertelement <8 x i16> undef, i16 %110, i32 0
  %112 = shufflevector <8 x i16> %111, <8 x i16> undef, <8 x i32> zeroinitializer
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = mul nuw nsw <8 x i32> %113, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %115 = add nuw nsw <8 x i32> %62, %109
  %116 = add nuw nsw <8 x i32> %115, %31
  %117 = add nuw nsw <8 x i32> %116, %114
  %118 = lshr <8 x i32> %117, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %34, i64 24
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !731, !noalias !733
  br label %123

122:                                              ; preds = %123
  ret void

123:                                              ; preds = %127, %58
  %124 = getelementptr inbounds i16, i16* %34, i64 %14
  %125 = add nuw nsw i64 %33, 1
  %126 = icmp eq i64 %125, 16
  br i1 %126, label %122, label %32

127:                                              ; preds = %32, %127
  %128 = phi i64 [ %148, %127 ], [ 0, %32 ]
  %129 = getelementptr inbounds i16, i16* %5, i64 %128
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = mul nuw nsw i32 %131, %41
  %133 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %128
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = load i16, i16* %42, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %137, %135
  %139 = sub i8 0, %134
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %140, %16
  %142 = add nuw nsw i32 %46, %132
  %143 = add nuw nsw i32 %142, %141
  %144 = add nuw nsw i32 %143, %138
  %145 = lshr i32 %144, 9
  %146 = trunc i32 %145 to i16
  %147 = getelementptr inbounds i16, i16* %34, i64 %128
  store i16 %146, i16* %147, align 2
  %148 = add nuw nsw i64 %128, 1
  %149 = icmp eq i64 %148, 32
  br i1 %149, label %123, label %127, !llvm.loop !734
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = getelementptr i8, i8* %2, i64 64
  %14 = bitcast i8* %2 to <8 x i16>*
  %15 = getelementptr inbounds i8, i8* %2, i64 16
  %16 = bitcast i8* %15 to <8 x i16>*
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to <8 x i16>*
  %19 = getelementptr inbounds i8, i8* %2, i64 48
  %20 = bitcast i8* %19 to <8 x i16>*
  br label %21

21:                                               ; preds = %75, %4
  %22 = phi i64 [ 0, %4 ], [ %77, %75 ]
  %23 = phi i16* [ %9, %4 ], [ %76, %75 ]
  %24 = mul i64 %12, %22
  %25 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %22
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub i8 0, %26
  %29 = zext i8 %28 to i32
  %30 = mul nuw nsw i32 %29, %11
  %31 = add nuw nsw i32 %30, 128
  %32 = add i64 %24, 64
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = getelementptr i8, i8* %0, i64 %24
  %35 = icmp ult i8* %34, %13
  %36 = icmp ugt i8* %33, %2
  %37 = and i1 %35, %36
  br i1 %37, label %79, label %38

38:                                               ; preds = %21
  %39 = insertelement <8 x i32> undef, i32 %27, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  %41 = insertelement <8 x i32> undef, i32 %31, i32 0
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> zeroinitializer
  %43 = load <8 x i16>, <8 x i16>* %14, align 2, !alias.scope !735
  %44 = zext <8 x i16> %43 to <8 x i32>
  %45 = mul nuw nsw <8 x i32> %40, %44
  %46 = add nuw nsw <8 x i32> %42, %45
  %47 = lshr <8 x i32> %46, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %48 = trunc <8 x i32> %47 to <8 x i16>
  %49 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %49, align 2, !alias.scope !738, !noalias !735
  %50 = load <8 x i16>, <8 x i16>* %16, align 2, !alias.scope !735
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %40, %51
  %53 = add nuw nsw <8 x i32> %42, %52
  %54 = lshr <8 x i32> %53, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = getelementptr inbounds i16, i16* %23, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %57, align 2, !alias.scope !738, !noalias !735
  %58 = load <8 x i16>, <8 x i16>* %18, align 2, !alias.scope !735
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %40, %59
  %61 = add nuw nsw <8 x i32> %42, %60
  %62 = lshr <8 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %23, i64 16
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !738, !noalias !735
  %66 = load <8 x i16>, <8 x i16>* %20, align 2, !alias.scope !735
  %67 = zext <8 x i16> %66 to <8 x i32>
  %68 = mul nuw nsw <8 x i32> %40, %67
  %69 = add nuw nsw <8 x i32> %42, %68
  %70 = lshr <8 x i32> %69, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %23, i64 24
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !738, !noalias !735
  br label %75

74:                                               ; preds = %75
  ret void

75:                                               ; preds = %79, %38
  %76 = getelementptr inbounds i16, i16* %23, i64 %10
  %77 = add nuw nsw i64 %22, 1
  %78 = icmp eq i64 %77, 16
  br i1 %78, label %74, label %21

79:                                               ; preds = %21, %79
  %80 = phi i64 [ %98, %79 ], [ 0, %21 ]
  %81 = getelementptr inbounds i16, i16* %5, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = mul nuw nsw i32 %83, %27
  %85 = add nuw nsw i32 %31, %84
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %23, i64 %80
  store i16 %87, i16* %88, align 2
  %89 = or i64 %80, 1
  %90 = getelementptr inbounds i16, i16* %5, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %92, %27
  %94 = add nuw nsw i32 %31, %93
  %95 = lshr i32 %94, 8
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds i16, i16* %23, i64 %89
  store i16 %96, i16* %97, align 2
  %98 = add nuw nsw i64 %80, 2
  %99 = icmp eq i64 %98, 32
  br i1 %99, label %75, label %79, !llvm.loop !740
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi16EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 62
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = insertelement <8 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> zeroinitializer
  %15 = mul nuw nsw <8 x i32> %14, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %16 = add nuw nsw <8 x i32> %15, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %17 = mul nuw nsw <8 x i32> %14, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %18 = add nuw nsw <8 x i32> %17, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %19 = mul nuw nsw <8 x i32> %14, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %20 = add nuw nsw <8 x i32> %19, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %21 = mul nuw nsw <8 x i32> %14, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %22 = add nuw nsw <8 x i32> %21, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %23

23:                                               ; preds = %79, %4
  %24 = phi i64 [ 0, %4 ], [ %81, %79 ]
  %25 = phi i16* [ %9, %4 ], [ %80, %79 ]
  %26 = mul i64 %12, %24
  %27 = getelementptr inbounds i16, i16* %5, i64 %24
  %28 = shl nuw nsw i64 %24, 1
  %29 = or i64 %28, 1
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = add i64 %26, 64
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = getelementptr i8, i8* %0, i64 %26
  %34 = bitcast i16* %27 to i8*
  %35 = icmp ult i8* %33, %30
  %36 = icmp ugt i8* %32, %34
  %37 = and i1 %35, %36
  br i1 %37, label %83, label %38

38:                                               ; preds = %23
  %39 = load i16, i16* %27, align 2, !alias.scope !741
  %40 = insertelement <8 x i16> undef, i16 %39, i32 0
  %41 = shufflevector <8 x i16> %40, <8 x i16> undef, <8 x i32> zeroinitializer
  %42 = zext <8 x i16> %41 to <8 x i32>
  %43 = mul nuw nsw <8 x i32> %42, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %44 = add nuw nsw <8 x i32> %16, %43
  %45 = lshr <8 x i32> %44, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %46 = trunc <8 x i32> %45 to <8 x i16>
  %47 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2, !alias.scope !744, !noalias !741
  %48 = load i16, i16* %27, align 2, !alias.scope !741
  %49 = insertelement <8 x i16> undef, i16 %48, i32 0
  %50 = shufflevector <8 x i16> %49, <8 x i16> undef, <8 x i32> zeroinitializer
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %51, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %53 = add nuw nsw <8 x i32> %18, %52
  %54 = lshr <8 x i32> %53, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = getelementptr inbounds i16, i16* %25, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %57, align 2, !alias.scope !744, !noalias !741
  %58 = load i16, i16* %27, align 2, !alias.scope !741
  %59 = insertelement <8 x i16> undef, i16 %58, i32 0
  %60 = shufflevector <8 x i16> %59, <8 x i16> undef, <8 x i32> zeroinitializer
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %61, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %63 = add nuw nsw <8 x i32> %20, %62
  %64 = lshr <8 x i32> %63, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %65 = trunc <8 x i32> %64 to <8 x i16>
  %66 = getelementptr inbounds i16, i16* %25, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %67, align 2, !alias.scope !744, !noalias !741
  %68 = load i16, i16* %27, align 2, !alias.scope !741
  %69 = insertelement <8 x i16> undef, i16 %68, i32 0
  %70 = shufflevector <8 x i16> %69, <8 x i16> undef, <8 x i32> zeroinitializer
  %71 = zext <8 x i16> %70 to <8 x i32>
  %72 = mul nuw nsw <8 x i32> %71, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %73 = add nuw nsw <8 x i32> %22, %72
  %74 = lshr <8 x i32> %73, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %75 = trunc <8 x i32> %74 to <8 x i16>
  %76 = getelementptr inbounds i16, i16* %25, i64 24
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %77, align 2, !alias.scope !744, !noalias !741
  br label %79

78:                                               ; preds = %79
  ret void

79:                                               ; preds = %83, %38
  %80 = getelementptr inbounds i16, i16* %25, i64 %10
  %81 = add nuw nsw i64 %24, 1
  %82 = icmp eq i64 %81, 16
  br i1 %82, label %78, label %23

83:                                               ; preds = %23, %83
  %84 = phi i64 [ %114, %83 ], [ 0, %23 ]
  %85 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %84
  %86 = load i8, i8* %85, align 2
  %87 = zext i8 %86 to i32
  %88 = load i16, i16* %27, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %89, %87
  %91 = sub i8 0, %86
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, %11
  %94 = add nuw nsw i32 %93, 128
  %95 = add nuw nsw i32 %94, %90
  %96 = lshr i32 %95, 8
  %97 = trunc i32 %96 to i16
  %98 = getelementptr inbounds i16, i16* %25, i64 %84
  store i16 %97, i16* %98, align 2
  %99 = or i64 %84, 1
  %100 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = load i16, i16* %27, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %104, %102
  %106 = sub i8 0, %101
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, %11
  %109 = add nuw nsw i32 %108, 128
  %110 = add nuw nsw i32 %109, %105
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds i16, i16* %25, i64 %99
  store i16 %112, i16* %113, align 2
  %114 = add nuw nsw i64 %84, 2
  %115 = icmp eq i64 %114, 32
  br i1 %115, label %79, label %83, !llvm.loop !746
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi32ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i32 [ 0, %4 ], [ %42, %7 ]
  %9 = phi i16* [ %6, %4 ], [ %41, %7 ]
  %10 = bitcast i16* %9 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %10, align 2
  %11 = getelementptr inbounds i16, i16* %9, i64 8
  %12 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %12, align 2
  %13 = getelementptr inbounds i16, i16* %9, i64 16
  %14 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %14, align 2
  %15 = getelementptr inbounds i16, i16* %9, i64 24
  %16 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %9, i64 %5
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %17, i64 8
  %20 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %17, i64 16
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %17, i64 24
  %24 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds i16, i16* %17, i64 %5
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds i16, i16* %25, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds i16, i16* %25, i64 16
  %30 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %25, i64 24
  %32 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %25, i64 %5
  %34 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %33, i64 8
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds i16, i16* %33, i64 16
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %33, i64 24
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds i16, i16* %33, i64 %5
  %42 = add nuw nsw i32 %8, 4
  %43 = icmp eq i32 %42, 32
  br i1 %43, label %44, label %7

44:                                               ; preds = %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 16
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %2, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %2, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %2, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %2, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %2, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %2, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %2, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %2, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %2, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %2, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %2, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %2, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %2, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %2, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %2, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = lshr i32 %163, 5
  %165 = bitcast i8* %0 to i16*
  %166 = lshr i64 %1, 1
  %167 = trunc i32 %164 to i16
  %168 = insertelement <8 x i16> undef, i16 %167, i32 0
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> zeroinitializer
  %170 = insertelement <8 x i16> undef, i16 %167, i32 0
  %171 = shufflevector <8 x i16> %170, <8 x i16> undef, <8 x i32> zeroinitializer
  %172 = insertelement <8 x i16> undef, i16 %167, i32 0
  %173 = shufflevector <8 x i16> %172, <8 x i16> undef, <8 x i32> zeroinitializer
  %174 = insertelement <8 x i16> undef, i16 %167, i32 0
  %175 = shufflevector <8 x i16> %174, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %177

176:                                              ; preds = %177
  ret void

177:                                              ; preds = %177, %4
  %178 = phi i32 [ 0, %4 ], [ %212, %177 ]
  %179 = phi i16* [ %165, %4 ], [ %211, %177 ]
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %179, i64 8
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %179, i64 16
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %179, i64 24
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %179, i64 %166
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %187, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %187, i64 16
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %187, i64 24
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %187, i64 %166
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %195, i64 8
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %195, i64 16
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %195, i64 24
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %195, i64 %166
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %203, i64 8
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %203, i64 16
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %203, i64 24
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %203, i64 %166
  %212 = add nuw nsw i32 %178, 4
  %213 = icmp eq i32 %212, 32
  br i1 %213, label %176, label %177
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 16
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %3, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %3, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %3, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %3, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %3, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %3, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %3, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %3, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %3, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %3, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %3, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %3, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %3, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %3, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %3, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %3, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = lshr i32 %163, 5
  %165 = bitcast i8* %0 to i16*
  %166 = lshr i64 %1, 1
  %167 = trunc i32 %164 to i16
  %168 = insertelement <8 x i16> undef, i16 %167, i32 0
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> zeroinitializer
  %170 = insertelement <8 x i16> undef, i16 %167, i32 0
  %171 = shufflevector <8 x i16> %170, <8 x i16> undef, <8 x i32> zeroinitializer
  %172 = insertelement <8 x i16> undef, i16 %167, i32 0
  %173 = shufflevector <8 x i16> %172, <8 x i16> undef, <8 x i32> zeroinitializer
  %174 = insertelement <8 x i16> undef, i16 %167, i32 0
  %175 = shufflevector <8 x i16> %174, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %177

176:                                              ; preds = %177
  ret void

177:                                              ; preds = %177, %4
  %178 = phi i32 [ 0, %4 ], [ %212, %177 ]
  %179 = phi i16* [ %165, %4 ], [ %211, %177 ]
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %179, i64 8
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %179, i64 16
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %179, i64 24
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %179, i64 %166
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %187, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %187, i64 16
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %187, i64 24
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %187, i64 %166
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %195, i64 8
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %195, i64 16
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %195, i64 24
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %195, i64 %166
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %203, i64 8
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %203, i64 16
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %203, i64 24
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %203, i64 %166
  %212 = add nuw nsw i32 %178, 4
  %213 = icmp eq i32 %212, 32
  br i1 %213, label %176, label %177
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 32
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %2, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %2, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %2, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %2, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %2, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %2, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %2, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %2, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %2, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %2, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %2, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %2, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %2, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %2, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %2, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = bitcast i8* %3 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = add nuw nsw i32 %163, %166
  %168 = getelementptr inbounds i8, i8* %3, i64 2
  %169 = bitcast i8* %168 to i16*
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nuw nsw i32 %167, %171
  %173 = getelementptr inbounds i8, i8* %3, i64 4
  %174 = bitcast i8* %173 to i16*
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = add nuw nsw i32 %172, %176
  %178 = getelementptr inbounds i8, i8* %3, i64 6
  %179 = bitcast i8* %178 to i16*
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = add nuw nsw i32 %177, %181
  %183 = getelementptr inbounds i8, i8* %3, i64 8
  %184 = bitcast i8* %183 to i16*
  %185 = load i16, i16* %184, align 2
  %186 = zext i16 %185 to i32
  %187 = add nuw nsw i32 %182, %186
  %188 = getelementptr inbounds i8, i8* %3, i64 10
  %189 = bitcast i8* %188 to i16*
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add nuw nsw i32 %187, %191
  %193 = getelementptr inbounds i8, i8* %3, i64 12
  %194 = bitcast i8* %193 to i16*
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %192, %196
  %198 = getelementptr inbounds i8, i8* %3, i64 14
  %199 = bitcast i8* %198 to i16*
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = add nuw nsw i32 %197, %201
  %203 = getelementptr inbounds i8, i8* %3, i64 16
  %204 = bitcast i8* %203 to i16*
  %205 = load i16, i16* %204, align 2
  %206 = zext i16 %205 to i32
  %207 = add nuw nsw i32 %202, %206
  %208 = getelementptr inbounds i8, i8* %3, i64 18
  %209 = bitcast i8* %208 to i16*
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i32
  %212 = add nuw nsw i32 %207, %211
  %213 = getelementptr inbounds i8, i8* %3, i64 20
  %214 = bitcast i8* %213 to i16*
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = add nuw nsw i32 %212, %216
  %218 = getelementptr inbounds i8, i8* %3, i64 22
  %219 = bitcast i8* %218 to i16*
  %220 = load i16, i16* %219, align 2
  %221 = zext i16 %220 to i32
  %222 = add nuw nsw i32 %217, %221
  %223 = getelementptr inbounds i8, i8* %3, i64 24
  %224 = bitcast i8* %223 to i16*
  %225 = load i16, i16* %224, align 2
  %226 = zext i16 %225 to i32
  %227 = add nuw nsw i32 %222, %226
  %228 = getelementptr inbounds i8, i8* %3, i64 26
  %229 = bitcast i8* %228 to i16*
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = add nuw nsw i32 %227, %231
  %233 = getelementptr inbounds i8, i8* %3, i64 28
  %234 = bitcast i8* %233 to i16*
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = add nuw nsw i32 %232, %236
  %238 = getelementptr inbounds i8, i8* %3, i64 30
  %239 = bitcast i8* %238 to i16*
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = add nuw nsw i32 %237, %241
  %243 = getelementptr inbounds i8, i8* %3, i64 32
  %244 = bitcast i8* %243 to i16*
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = add nuw nsw i32 %242, %246
  %248 = getelementptr inbounds i8, i8* %3, i64 34
  %249 = bitcast i8* %248 to i16*
  %250 = load i16, i16* %249, align 2
  %251 = zext i16 %250 to i32
  %252 = add nuw nsw i32 %247, %251
  %253 = getelementptr inbounds i8, i8* %3, i64 36
  %254 = bitcast i8* %253 to i16*
  %255 = load i16, i16* %254, align 2
  %256 = zext i16 %255 to i32
  %257 = add nuw nsw i32 %252, %256
  %258 = getelementptr inbounds i8, i8* %3, i64 38
  %259 = bitcast i8* %258 to i16*
  %260 = load i16, i16* %259, align 2
  %261 = zext i16 %260 to i32
  %262 = add nuw nsw i32 %257, %261
  %263 = getelementptr inbounds i8, i8* %3, i64 40
  %264 = bitcast i8* %263 to i16*
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %262, %266
  %268 = getelementptr inbounds i8, i8* %3, i64 42
  %269 = bitcast i8* %268 to i16*
  %270 = load i16, i16* %269, align 2
  %271 = zext i16 %270 to i32
  %272 = add nuw nsw i32 %267, %271
  %273 = getelementptr inbounds i8, i8* %3, i64 44
  %274 = bitcast i8* %273 to i16*
  %275 = load i16, i16* %274, align 2
  %276 = zext i16 %275 to i32
  %277 = add nuw nsw i32 %272, %276
  %278 = getelementptr inbounds i8, i8* %3, i64 46
  %279 = bitcast i8* %278 to i16*
  %280 = load i16, i16* %279, align 2
  %281 = zext i16 %280 to i32
  %282 = add nuw nsw i32 %277, %281
  %283 = getelementptr inbounds i8, i8* %3, i64 48
  %284 = bitcast i8* %283 to i16*
  %285 = load i16, i16* %284, align 2
  %286 = zext i16 %285 to i32
  %287 = add nuw nsw i32 %282, %286
  %288 = getelementptr inbounds i8, i8* %3, i64 50
  %289 = bitcast i8* %288 to i16*
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = add nuw nsw i32 %287, %291
  %293 = getelementptr inbounds i8, i8* %3, i64 52
  %294 = bitcast i8* %293 to i16*
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = add nuw nsw i32 %292, %296
  %298 = getelementptr inbounds i8, i8* %3, i64 54
  %299 = bitcast i8* %298 to i16*
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = add nuw nsw i32 %297, %301
  %303 = getelementptr inbounds i8, i8* %3, i64 56
  %304 = bitcast i8* %303 to i16*
  %305 = load i16, i16* %304, align 2
  %306 = zext i16 %305 to i32
  %307 = add nuw nsw i32 %302, %306
  %308 = getelementptr inbounds i8, i8* %3, i64 58
  %309 = bitcast i8* %308 to i16*
  %310 = load i16, i16* %309, align 2
  %311 = zext i16 %310 to i32
  %312 = add nuw nsw i32 %307, %311
  %313 = getelementptr inbounds i8, i8* %3, i64 60
  %314 = bitcast i8* %313 to i16*
  %315 = load i16, i16* %314, align 2
  %316 = zext i16 %315 to i32
  %317 = add nuw nsw i32 %312, %316
  %318 = getelementptr inbounds i8, i8* %3, i64 62
  %319 = bitcast i8* %318 to i16*
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %317, %321
  %323 = lshr i32 %322, 6
  %324 = bitcast i8* %0 to i16*
  %325 = lshr i64 %1, 1
  %326 = trunc i32 %323 to i16
  %327 = insertelement <8 x i16> undef, i16 %326, i32 0
  %328 = shufflevector <8 x i16> %327, <8 x i16> undef, <8 x i32> zeroinitializer
  %329 = insertelement <8 x i16> undef, i16 %326, i32 0
  %330 = shufflevector <8 x i16> %329, <8 x i16> undef, <8 x i32> zeroinitializer
  %331 = insertelement <8 x i16> undef, i16 %326, i32 0
  %332 = shufflevector <8 x i16> %331, <8 x i16> undef, <8 x i32> zeroinitializer
  %333 = insertelement <8 x i16> undef, i16 %326, i32 0
  %334 = shufflevector <8 x i16> %333, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %336

335:                                              ; preds = %336
  ret void

336:                                              ; preds = %336, %4
  %337 = phi i32 [ 0, %4 ], [ %371, %336 ]
  %338 = phi i16* [ %324, %4 ], [ %370, %336 ]
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %339, align 2
  %340 = getelementptr inbounds i16, i16* %338, i64 8
  %341 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %330, <8 x i16>* %341, align 2
  %342 = getelementptr inbounds i16, i16* %338, i64 16
  %343 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %343, align 2
  %344 = getelementptr inbounds i16, i16* %338, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %345, align 2
  %346 = getelementptr inbounds i16, i16* %338, i64 %325
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %347, align 2
  %348 = getelementptr inbounds i16, i16* %346, i64 8
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %330, <8 x i16>* %349, align 2
  %350 = getelementptr inbounds i16, i16* %346, i64 16
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %351, align 2
  %352 = getelementptr inbounds i16, i16* %346, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %353, align 2
  %354 = getelementptr inbounds i16, i16* %346, i64 %325
  %355 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %355, align 2
  %356 = getelementptr inbounds i16, i16* %354, i64 8
  %357 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %330, <8 x i16>* %357, align 2
  %358 = getelementptr inbounds i16, i16* %354, i64 16
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %359, align 2
  %360 = getelementptr inbounds i16, i16* %354, i64 24
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %361, align 2
  %362 = getelementptr inbounds i16, i16* %354, i64 %325
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %363, align 2
  %364 = getelementptr inbounds i16, i16* %362, i64 8
  %365 = bitcast i16* %364 to <8 x i16>*
  store <8 x i16> %330, <8 x i16>* %365, align 2
  %366 = getelementptr inbounds i16, i16* %362, i64 16
  %367 = bitcast i16* %366 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %367, align 2
  %368 = getelementptr inbounds i16, i16* %362, i64 24
  %369 = bitcast i16* %368 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %369, align 2
  %370 = getelementptr inbounds i16, i16* %362, i64 %325
  %371 = add nuw nsw i32 %337, 4
  %372 = icmp eq i32 %371, 32
  br i1 %372, label %335, label %336
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 64, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 64, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 64, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 64, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 32
  br i1 %14, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  br label %9

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %37, %9 ]
  %11 = phi i16* [ %6, %4 ], [ %36, %9 ]
  %12 = getelementptr inbounds i16, i16* %5, i64 %10
  %13 = load i16, i16* %12, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %11, i64 16
  %20 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %11, i64 24
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %11, i64 %7
  %24 = or i64 %10, 1
  %25 = getelementptr inbounds i16, i16* %5, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = insertelement <8 x i16> undef, i16 %26, i32 0
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <8 x i32> zeroinitializer
  %29 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %23, i64 8
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %23, i64 16
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds i16, i16* %23, i64 24
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds i16, i16* %23, i64 %7
  %37 = add nuw nsw i64 %10, 2
  %38 = icmp eq i64 %37, 32
  br i1 %38, label %8, label %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 32
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 32
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 62
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 62
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 64
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %26 = getelementptr inbounds i8, i8* %2, i64 32
  %27 = bitcast i8* %26 to <8 x i16>*
  %28 = mul nuw nsw <8 x i32> %20, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %29 = getelementptr inbounds i8, i8* %2, i64 48
  %30 = bitcast i8* %29 to <8 x i16>*
  %31 = mul nuw nsw <8 x i32> %20, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  br label %32

32:                                               ; preds = %123, %4
  %33 = phi i64 [ 0, %4 ], [ %125, %123 ]
  %34 = phi i16* [ %13, %4 ], [ %124, %123 ]
  %35 = mul i64 %17, %33
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = add i64 %35, 64
  %38 = getelementptr i8, i8* %0, i64 %37
  %39 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %33
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds i16, i16* %6, i64 %33
  %43 = sub i8 0, %40
  %44 = zext i8 %43 to i32
  %45 = mul nuw nsw i32 %44, %15
  %46 = add nuw nsw i32 %45, 256
  %47 = shl nuw nsw i64 %33, 1
  %48 = or i64 %47, 1
  %49 = getelementptr i8, i8* %3, i64 %48
  %50 = icmp ult i8* %36, %18
  %51 = icmp ugt i8* %38, %2
  %52 = and i1 %50, %51
  %53 = bitcast i16* %42 to i8*
  %54 = icmp ult i8* %36, %49
  %55 = icmp ugt i8* %38, %53
  %56 = and i1 %54, %55
  %57 = or i1 %52, %56
  br i1 %57, label %127, label %58

58:                                               ; preds = %32
  %59 = insertelement <8 x i32> undef, i32 %41, i32 0
  %60 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> zeroinitializer
  %61 = insertelement <8 x i32> undef, i32 %46, i32 0
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> zeroinitializer
  %63 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !747
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %60, %64
  %66 = load i16, i16* %42, align 2, !alias.scope !750
  %67 = insertelement <8 x i16> undef, i16 %66, i32 0
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> zeroinitializer
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %69, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %71 = add nuw nsw <8 x i32> %62, %65
  %72 = add nuw nsw <8 x i32> %71, %22
  %73 = add nuw nsw <8 x i32> %72, %70
  %74 = lshr <8 x i32> %73, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %75 = trunc <8 x i32> %74 to <8 x i16>
  %76 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2, !alias.scope !752, !noalias !754
  %77 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !747
  %78 = zext <8 x i16> %77 to <8 x i32>
  %79 = mul nuw nsw <8 x i32> %60, %78
  %80 = load i16, i16* %42, align 2, !alias.scope !750
  %81 = insertelement <8 x i16> undef, i16 %80, i32 0
  %82 = shufflevector <8 x i16> %81, <8 x i16> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i16> %82 to <8 x i32>
  %84 = mul nuw nsw <8 x i32> %83, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %85 = add nuw nsw <8 x i32> %62, %79
  %86 = add nuw nsw <8 x i32> %85, %25
  %87 = add nuw nsw <8 x i32> %86, %84
  %88 = lshr <8 x i32> %87, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %34, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !752, !noalias !754
  %92 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !747
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %60, %93
  %95 = load i16, i16* %42, align 2, !alias.scope !750
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %98, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %100 = add nuw nsw <8 x i32> %62, %94
  %101 = add nuw nsw <8 x i32> %100, %28
  %102 = add nuw nsw <8 x i32> %101, %99
  %103 = lshr <8 x i32> %102, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %104 = trunc <8 x i32> %103 to <8 x i16>
  %105 = getelementptr inbounds i16, i16* %34, i64 16
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %106, align 2, !alias.scope !752, !noalias !754
  %107 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !747
  %108 = zext <8 x i16> %107 to <8 x i32>
  %109 = mul nuw nsw <8 x i32> %60, %108
  %110 = load i16, i16* %42, align 2, !alias.scope !750
  %111 = insertelement <8 x i16> undef, i16 %110, i32 0
  %112 = shufflevector <8 x i16> %111, <8 x i16> undef, <8 x i32> zeroinitializer
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = mul nuw nsw <8 x i32> %113, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %115 = add nuw nsw <8 x i32> %62, %109
  %116 = add nuw nsw <8 x i32> %115, %31
  %117 = add nuw nsw <8 x i32> %116, %114
  %118 = lshr <8 x i32> %117, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %34, i64 24
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !752, !noalias !754
  br label %123

122:                                              ; preds = %123
  ret void

123:                                              ; preds = %127, %58
  %124 = getelementptr inbounds i16, i16* %34, i64 %14
  %125 = add nuw nsw i64 %33, 1
  %126 = icmp eq i64 %125, 32
  br i1 %126, label %122, label %32

127:                                              ; preds = %32, %127
  %128 = phi i64 [ %148, %127 ], [ 0, %32 ]
  %129 = getelementptr inbounds i16, i16* %5, i64 %128
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = mul nuw nsw i32 %131, %41
  %133 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %128
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = load i16, i16* %42, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %137, %135
  %139 = sub i8 0, %134
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %140, %16
  %142 = add nuw nsw i32 %46, %132
  %143 = add nuw nsw i32 %142, %141
  %144 = add nuw nsw i32 %143, %138
  %145 = lshr i32 %144, 9
  %146 = trunc i32 %145 to i16
  %147 = getelementptr inbounds i16, i16* %34, i64 %128
  store i16 %146, i16* %147, align 2
  %148 = add nuw nsw i64 %128, 1
  %149 = icmp eq i64 %148, 32
  br i1 %149, label %123, label %127, !llvm.loop !755
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 62
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = getelementptr i8, i8* %2, i64 64
  %14 = bitcast i8* %2 to <8 x i16>*
  %15 = getelementptr inbounds i8, i8* %2, i64 16
  %16 = bitcast i8* %15 to <8 x i16>*
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to <8 x i16>*
  %19 = getelementptr inbounds i8, i8* %2, i64 48
  %20 = bitcast i8* %19 to <8 x i16>*
  br label %21

21:                                               ; preds = %75, %4
  %22 = phi i64 [ 0, %4 ], [ %77, %75 ]
  %23 = phi i16* [ %9, %4 ], [ %76, %75 ]
  %24 = mul i64 %12, %22
  %25 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %22
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub i8 0, %26
  %29 = zext i8 %28 to i32
  %30 = mul nuw nsw i32 %29, %11
  %31 = add nuw nsw i32 %30, 128
  %32 = add i64 %24, 64
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = getelementptr i8, i8* %0, i64 %24
  %35 = icmp ult i8* %34, %13
  %36 = icmp ugt i8* %33, %2
  %37 = and i1 %35, %36
  br i1 %37, label %79, label %38

38:                                               ; preds = %21
  %39 = insertelement <8 x i32> undef, i32 %27, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  %41 = insertelement <8 x i32> undef, i32 %31, i32 0
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> zeroinitializer
  %43 = load <8 x i16>, <8 x i16>* %14, align 2, !alias.scope !756
  %44 = zext <8 x i16> %43 to <8 x i32>
  %45 = mul nuw nsw <8 x i32> %40, %44
  %46 = add nuw nsw <8 x i32> %42, %45
  %47 = lshr <8 x i32> %46, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %48 = trunc <8 x i32> %47 to <8 x i16>
  %49 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %49, align 2, !alias.scope !759, !noalias !756
  %50 = load <8 x i16>, <8 x i16>* %16, align 2, !alias.scope !756
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %40, %51
  %53 = add nuw nsw <8 x i32> %42, %52
  %54 = lshr <8 x i32> %53, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = getelementptr inbounds i16, i16* %23, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %57, align 2, !alias.scope !759, !noalias !756
  %58 = load <8 x i16>, <8 x i16>* %18, align 2, !alias.scope !756
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %40, %59
  %61 = add nuw nsw <8 x i32> %42, %60
  %62 = lshr <8 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %23, i64 16
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !759, !noalias !756
  %66 = load <8 x i16>, <8 x i16>* %20, align 2, !alias.scope !756
  %67 = zext <8 x i16> %66 to <8 x i32>
  %68 = mul nuw nsw <8 x i32> %40, %67
  %69 = add nuw nsw <8 x i32> %42, %68
  %70 = lshr <8 x i32> %69, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %23, i64 24
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !759, !noalias !756
  br label %75

74:                                               ; preds = %75
  ret void

75:                                               ; preds = %79, %38
  %76 = getelementptr inbounds i16, i16* %23, i64 %10
  %77 = add nuw nsw i64 %22, 1
  %78 = icmp eq i64 %77, 32
  br i1 %78, label %74, label %21

79:                                               ; preds = %21, %79
  %80 = phi i64 [ %98, %79 ], [ 0, %21 ]
  %81 = getelementptr inbounds i16, i16* %5, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = mul nuw nsw i32 %83, %27
  %85 = add nuw nsw i32 %31, %84
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %23, i64 %80
  store i16 %87, i16* %88, align 2
  %89 = or i64 %80, 1
  %90 = getelementptr inbounds i16, i16* %5, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %92, %27
  %94 = add nuw nsw i32 %31, %93
  %95 = lshr i32 %94, 8
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds i16, i16* %23, i64 %89
  store i16 %96, i16* %97, align 2
  %98 = add nuw nsw i64 %80, 2
  %99 = icmp eq i64 %98, 32
  br i1 %99, label %75, label %79, !llvm.loop !761
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi32EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 62
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = insertelement <8 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> zeroinitializer
  %15 = mul nuw nsw <8 x i32> %14, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %16 = add nuw nsw <8 x i32> %15, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %17 = mul nuw nsw <8 x i32> %14, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %18 = add nuw nsw <8 x i32> %17, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %19 = mul nuw nsw <8 x i32> %14, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %20 = add nuw nsw <8 x i32> %19, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %21 = mul nuw nsw <8 x i32> %14, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %22 = add nuw nsw <8 x i32> %21, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %23

23:                                               ; preds = %79, %4
  %24 = phi i64 [ 0, %4 ], [ %81, %79 ]
  %25 = phi i16* [ %9, %4 ], [ %80, %79 ]
  %26 = mul i64 %12, %24
  %27 = getelementptr inbounds i16, i16* %5, i64 %24
  %28 = shl nuw nsw i64 %24, 1
  %29 = or i64 %28, 1
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = add i64 %26, 64
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = getelementptr i8, i8* %0, i64 %26
  %34 = bitcast i16* %27 to i8*
  %35 = icmp ult i8* %33, %30
  %36 = icmp ugt i8* %32, %34
  %37 = and i1 %35, %36
  br i1 %37, label %83, label %38

38:                                               ; preds = %23
  %39 = load i16, i16* %27, align 2, !alias.scope !762
  %40 = insertelement <8 x i16> undef, i16 %39, i32 0
  %41 = shufflevector <8 x i16> %40, <8 x i16> undef, <8 x i32> zeroinitializer
  %42 = zext <8 x i16> %41 to <8 x i32>
  %43 = mul nuw nsw <8 x i32> %42, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %44 = add nuw nsw <8 x i32> %16, %43
  %45 = lshr <8 x i32> %44, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %46 = trunc <8 x i32> %45 to <8 x i16>
  %47 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2, !alias.scope !765, !noalias !762
  %48 = load i16, i16* %27, align 2, !alias.scope !762
  %49 = insertelement <8 x i16> undef, i16 %48, i32 0
  %50 = shufflevector <8 x i16> %49, <8 x i16> undef, <8 x i32> zeroinitializer
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %51, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %53 = add nuw nsw <8 x i32> %18, %52
  %54 = lshr <8 x i32> %53, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = getelementptr inbounds i16, i16* %25, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %57, align 2, !alias.scope !765, !noalias !762
  %58 = load i16, i16* %27, align 2, !alias.scope !762
  %59 = insertelement <8 x i16> undef, i16 %58, i32 0
  %60 = shufflevector <8 x i16> %59, <8 x i16> undef, <8 x i32> zeroinitializer
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %61, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %63 = add nuw nsw <8 x i32> %20, %62
  %64 = lshr <8 x i32> %63, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %65 = trunc <8 x i32> %64 to <8 x i16>
  %66 = getelementptr inbounds i16, i16* %25, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %67, align 2, !alias.scope !765, !noalias !762
  %68 = load i16, i16* %27, align 2, !alias.scope !762
  %69 = insertelement <8 x i16> undef, i16 %68, i32 0
  %70 = shufflevector <8 x i16> %69, <8 x i16> undef, <8 x i32> zeroinitializer
  %71 = zext <8 x i16> %70 to <8 x i32>
  %72 = mul nuw nsw <8 x i32> %71, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %73 = add nuw nsw <8 x i32> %22, %72
  %74 = lshr <8 x i32> %73, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %75 = trunc <8 x i32> %74 to <8 x i16>
  %76 = getelementptr inbounds i16, i16* %25, i64 24
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %77, align 2, !alias.scope !765, !noalias !762
  br label %79

78:                                               ; preds = %79
  ret void

79:                                               ; preds = %83, %38
  %80 = getelementptr inbounds i16, i16* %25, i64 %10
  %81 = add nuw nsw i64 %24, 1
  %82 = icmp eq i64 %81, 32
  br i1 %82, label %78, label %23

83:                                               ; preds = %23, %83
  %84 = phi i64 [ %114, %83 ], [ 0, %23 ]
  %85 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %84
  %86 = load i8, i8* %85, align 2
  %87 = zext i8 %86 to i32
  %88 = load i16, i16* %27, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %89, %87
  %91 = sub i8 0, %86
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, %11
  %94 = add nuw nsw i32 %93, 128
  %95 = add nuw nsw i32 %94, %90
  %96 = lshr i32 %95, 8
  %97 = trunc i32 %96 to i16
  %98 = getelementptr inbounds i16, i16* %25, i64 %84
  store i16 %97, i16* %98, align 2
  %99 = or i64 %84, 1
  %100 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = load i16, i16* %27, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %104, %102
  %106 = sub i8 0, %101
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, %11
  %109 = add nuw nsw i32 %108, 128
  %110 = add nuw nsw i32 %109, %105
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds i16, i16* %25, i64 %99
  store i16 %112, i16* %113, align 2
  %114 = add nuw nsw i64 %84, 2
  %115 = icmp eq i64 %114, 32
  br i1 %115, label %79, label %83, !llvm.loop !767
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi32ELi64ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i32 [ 0, %4 ], [ %42, %7 ]
  %9 = phi i16* [ %6, %4 ], [ %41, %7 ]
  %10 = bitcast i16* %9 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %10, align 2
  %11 = getelementptr inbounds i16, i16* %9, i64 8
  %12 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %12, align 2
  %13 = getelementptr inbounds i16, i16* %9, i64 16
  %14 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %14, align 2
  %15 = getelementptr inbounds i16, i16* %9, i64 24
  %16 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %9, i64 %5
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %17, i64 8
  %20 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %17, i64 16
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %17, i64 24
  %24 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds i16, i16* %17, i64 %5
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds i16, i16* %25, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds i16, i16* %25, i64 16
  %30 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %25, i64 24
  %32 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %25, i64 %5
  %34 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %33, i64 8
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds i16, i16* %33, i64 16
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %33, i64 24
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds i16, i16* %33, i64 %5
  %42 = add nuw nsw i32 %8, 4
  %43 = icmp eq i32 %42, 64
  br i1 %43, label %44, label %7

44:                                               ; preds = %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 16
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %2, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %2, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %2, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %2, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %2, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %2, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %2, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %2, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %2, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %2, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %2, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %2, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %2, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %2, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %2, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = lshr i32 %163, 5
  %165 = bitcast i8* %0 to i16*
  %166 = lshr i64 %1, 1
  %167 = trunc i32 %164 to i16
  %168 = insertelement <8 x i16> undef, i16 %167, i32 0
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> zeroinitializer
  %170 = insertelement <8 x i16> undef, i16 %167, i32 0
  %171 = shufflevector <8 x i16> %170, <8 x i16> undef, <8 x i32> zeroinitializer
  %172 = insertelement <8 x i16> undef, i16 %167, i32 0
  %173 = shufflevector <8 x i16> %172, <8 x i16> undef, <8 x i32> zeroinitializer
  %174 = insertelement <8 x i16> undef, i16 %167, i32 0
  %175 = shufflevector <8 x i16> %174, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %177

176:                                              ; preds = %177
  ret void

177:                                              ; preds = %177, %4
  %178 = phi i32 [ 0, %4 ], [ %212, %177 ]
  %179 = phi i16* [ %165, %4 ], [ %211, %177 ]
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %179, i64 8
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %179, i64 16
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %179, i64 24
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %179, i64 %166
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %187, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %187, i64 16
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %187, i64 24
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %187, i64 %166
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %195, i64 8
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %195, i64 16
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %195, i64 24
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %195, i64 %166
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %203, i64 8
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %203, i64 16
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %203, i64 24
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %203, i64 %166
  %212 = add nuw nsw i32 %178, 4
  %213 = icmp eq i32 %212, 64
  br i1 %213, label %176, label %177
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to <4 x i16>*
  %6 = load <4 x i16>, <4 x i16>* %5, align 2
  %7 = zext <4 x i16> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = zext <4 x i16> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 16
  %15 = bitcast i8* %14 to <4 x i16>*
  %16 = load <4 x i16>, <4 x i16>* %15, align 2
  %17 = zext <4 x i16> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 24
  %20 = bitcast i8* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 32
  %25 = bitcast i8* %24 to <4 x i16>*
  %26 = load <4 x i16>, <4 x i16>* %25, align 2
  %27 = zext <4 x i16> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 40
  %30 = bitcast i8* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 48
  %35 = bitcast i8* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 56
  %40 = bitcast i8* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 64
  %45 = bitcast i8* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 72
  %50 = bitcast i8* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 80
  %55 = bitcast i8* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 88
  %60 = bitcast i8* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 96
  %65 = bitcast i8* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 104
  %70 = bitcast i8* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 112
  %75 = bitcast i8* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = zext <4 x i16> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 120
  %80 = bitcast i8* %79 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = bitcast i8* %0 to i16*
  %91 = lshr i64 %1, 1
  %92 = trunc i32 %89 to i16
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = insertelement <8 x i16> undef, i16 %92, i32 0
  %96 = shufflevector <8 x i16> %95, <8 x i16> undef, <8 x i32> zeroinitializer
  %97 = insertelement <8 x i16> undef, i16 %92, i32 0
  %98 = shufflevector <8 x i16> %97, <8 x i16> undef, <8 x i32> zeroinitializer
  %99 = insertelement <8 x i16> undef, i16 %92, i32 0
  %100 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %102

101:                                              ; preds = %102
  ret void

102:                                              ; preds = %102, %4
  %103 = phi i32 [ 0, %4 ], [ %137, %102 ]
  %104 = phi i16* [ %90, %4 ], [ %136, %102 ]
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i16, i16* %104, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %104, i64 16
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %104, i64 24
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %104, i64 %91
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %112, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %112, i64 16
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %112, i64 24
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %112, i64 %91
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %120, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %120, i64 16
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %120, i64 24
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %120, i64 %91
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i16, i16* %128, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %128, i64 16
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds i16, i16* %128, i64 24
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %135, align 2
  %136 = getelementptr inbounds i16, i16* %128, i64 %91
  %137 = add nuw nsw i32 %103, 4
  %138 = icmp eq i32 %137, 64
  br i1 %138, label %101, label %102
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 48
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %2, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %2, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %2, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %2, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %2, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %2, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %2, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %2, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %2, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %2, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %2, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %2, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %2, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %2, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %2, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %2, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %163, i32 0
  %165 = bitcast i8* %3 to <4 x i16>*
  %166 = load <4 x i16>, <4 x i16>* %165, align 2
  %167 = zext <4 x i16> %166 to <4 x i32>
  %168 = add nuw nsw <4 x i32> %164, %167
  %169 = getelementptr inbounds i8, i8* %3, i64 8
  %170 = bitcast i8* %169 to <4 x i16>*
  %171 = load <4 x i16>, <4 x i16>* %170, align 2
  %172 = zext <4 x i16> %171 to <4 x i32>
  %173 = add nuw nsw <4 x i32> %168, %172
  %174 = getelementptr inbounds i8, i8* %3, i64 16
  %175 = bitcast i8* %174 to <4 x i16>*
  %176 = load <4 x i16>, <4 x i16>* %175, align 2
  %177 = zext <4 x i16> %176 to <4 x i32>
  %178 = add nuw nsw <4 x i32> %173, %177
  %179 = getelementptr inbounds i8, i8* %3, i64 24
  %180 = bitcast i8* %179 to <4 x i16>*
  %181 = load <4 x i16>, <4 x i16>* %180, align 2
  %182 = zext <4 x i16> %181 to <4 x i32>
  %183 = add nuw nsw <4 x i32> %178, %182
  %184 = getelementptr inbounds i8, i8* %3, i64 32
  %185 = bitcast i8* %184 to <4 x i16>*
  %186 = load <4 x i16>, <4 x i16>* %185, align 2
  %187 = zext <4 x i16> %186 to <4 x i32>
  %188 = add nuw nsw <4 x i32> %183, %187
  %189 = getelementptr inbounds i8, i8* %3, i64 40
  %190 = bitcast i8* %189 to <4 x i16>*
  %191 = load <4 x i16>, <4 x i16>* %190, align 2
  %192 = zext <4 x i16> %191 to <4 x i32>
  %193 = add nuw nsw <4 x i32> %188, %192
  %194 = getelementptr inbounds i8, i8* %3, i64 48
  %195 = bitcast i8* %194 to <4 x i16>*
  %196 = load <4 x i16>, <4 x i16>* %195, align 2
  %197 = zext <4 x i16> %196 to <4 x i32>
  %198 = add nuw nsw <4 x i32> %193, %197
  %199 = getelementptr inbounds i8, i8* %3, i64 56
  %200 = bitcast i8* %199 to <4 x i16>*
  %201 = load <4 x i16>, <4 x i16>* %200, align 2
  %202 = zext <4 x i16> %201 to <4 x i32>
  %203 = add nuw nsw <4 x i32> %198, %202
  %204 = getelementptr inbounds i8, i8* %3, i64 64
  %205 = bitcast i8* %204 to <4 x i16>*
  %206 = load <4 x i16>, <4 x i16>* %205, align 2
  %207 = zext <4 x i16> %206 to <4 x i32>
  %208 = add nuw nsw <4 x i32> %203, %207
  %209 = getelementptr inbounds i8, i8* %3, i64 72
  %210 = bitcast i8* %209 to <4 x i16>*
  %211 = load <4 x i16>, <4 x i16>* %210, align 2
  %212 = zext <4 x i16> %211 to <4 x i32>
  %213 = add nuw nsw <4 x i32> %208, %212
  %214 = getelementptr inbounds i8, i8* %3, i64 80
  %215 = bitcast i8* %214 to <4 x i16>*
  %216 = load <4 x i16>, <4 x i16>* %215, align 2
  %217 = zext <4 x i16> %216 to <4 x i32>
  %218 = add nuw nsw <4 x i32> %213, %217
  %219 = getelementptr inbounds i8, i8* %3, i64 88
  %220 = bitcast i8* %219 to <4 x i16>*
  %221 = load <4 x i16>, <4 x i16>* %220, align 2
  %222 = zext <4 x i16> %221 to <4 x i32>
  %223 = add nuw nsw <4 x i32> %218, %222
  %224 = getelementptr inbounds i8, i8* %3, i64 96
  %225 = bitcast i8* %224 to <4 x i16>*
  %226 = load <4 x i16>, <4 x i16>* %225, align 2
  %227 = zext <4 x i16> %226 to <4 x i32>
  %228 = add nuw nsw <4 x i32> %223, %227
  %229 = getelementptr inbounds i8, i8* %3, i64 104
  %230 = bitcast i8* %229 to <4 x i16>*
  %231 = load <4 x i16>, <4 x i16>* %230, align 2
  %232 = zext <4 x i16> %231 to <4 x i32>
  %233 = add nuw nsw <4 x i32> %228, %232
  %234 = getelementptr inbounds i8, i8* %3, i64 112
  %235 = bitcast i8* %234 to <4 x i16>*
  %236 = load <4 x i16>, <4 x i16>* %235, align 2
  %237 = zext <4 x i16> %236 to <4 x i32>
  %238 = add nuw nsw <4 x i32> %233, %237
  %239 = getelementptr inbounds i8, i8* %3, i64 120
  %240 = bitcast i8* %239 to <4 x i16>*
  %241 = load <4 x i16>, <4 x i16>* %240, align 2
  %242 = zext <4 x i16> %241 to <4 x i32>
  %243 = add nuw nsw <4 x i32> %238, %242
  %244 = shufflevector <4 x i32> %243, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %245 = add <4 x i32> %243, %244
  %246 = shufflevector <4 x i32> %245, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %247 = add <4 x i32> %245, %246
  %248 = extractelement <4 x i32> %247, i32 0
  %249 = udiv i32 %248, 96
  %250 = bitcast i8* %0 to i16*
  %251 = lshr i64 %1, 1
  %252 = trunc i32 %249 to i16
  %253 = insertelement <8 x i16> undef, i16 %252, i32 0
  %254 = shufflevector <8 x i16> %253, <8 x i16> undef, <8 x i32> zeroinitializer
  %255 = insertelement <8 x i16> undef, i16 %252, i32 0
  %256 = shufflevector <8 x i16> %255, <8 x i16> undef, <8 x i32> zeroinitializer
  %257 = insertelement <8 x i16> undef, i16 %252, i32 0
  %258 = shufflevector <8 x i16> %257, <8 x i16> undef, <8 x i32> zeroinitializer
  %259 = insertelement <8 x i16> undef, i16 %252, i32 0
  %260 = shufflevector <8 x i16> %259, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %262

261:                                              ; preds = %262
  ret void

262:                                              ; preds = %262, %4
  %263 = phi i32 [ 0, %4 ], [ %297, %262 ]
  %264 = phi i16* [ %250, %4 ], [ %296, %262 ]
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %265, align 2
  %266 = getelementptr inbounds i16, i16* %264, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %267, align 2
  %268 = getelementptr inbounds i16, i16* %264, i64 16
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds i16, i16* %264, i64 24
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %271, align 2
  %272 = getelementptr inbounds i16, i16* %264, i64 %251
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %273, align 2
  %274 = getelementptr inbounds i16, i16* %272, i64 8
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %275, align 2
  %276 = getelementptr inbounds i16, i16* %272, i64 16
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %277, align 2
  %278 = getelementptr inbounds i16, i16* %272, i64 24
  %279 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %279, align 2
  %280 = getelementptr inbounds i16, i16* %272, i64 %251
  %281 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %281, align 2
  %282 = getelementptr inbounds i16, i16* %280, i64 8
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %283, align 2
  %284 = getelementptr inbounds i16, i16* %280, i64 16
  %285 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %285, align 2
  %286 = getelementptr inbounds i16, i16* %280, i64 24
  %287 = bitcast i16* %286 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %287, align 2
  %288 = getelementptr inbounds i16, i16* %280, i64 %251
  %289 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %289, align 2
  %290 = getelementptr inbounds i16, i16* %288, i64 8
  %291 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %291, align 2
  %292 = getelementptr inbounds i16, i16* %288, i64 16
  %293 = bitcast i16* %292 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %293, align 2
  %294 = getelementptr inbounds i16, i16* %288, i64 24
  %295 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %295, align 2
  %296 = getelementptr inbounds i16, i16* %288, i64 %251
  %297 = add nuw nsw i32 %263, 4
  %298 = icmp eq i32 %297, 64
  br i1 %298, label %261, label %262
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 64, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 64, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 64, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 64, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 64
  br i1 %14, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  br label %9

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %37, %9 ]
  %11 = phi i16* [ %6, %4 ], [ %36, %9 ]
  %12 = getelementptr inbounds i16, i16* %5, i64 %10
  %13 = load i16, i16* %12, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %11, i64 16
  %20 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %11, i64 24
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %11, i64 %7
  %24 = or i64 %10, 1
  %25 = getelementptr inbounds i16, i16* %5, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = insertelement <8 x i16> undef, i16 %26, i32 0
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <8 x i32> zeroinitializer
  %29 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %23, i64 8
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %23, i64 16
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds i16, i16* %23, i64 24
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %28, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds i16, i16* %23, i64 %7
  %37 = add nuw nsw i64 %10, 2
  %38 = icmp eq i64 %37, 64
  br i1 %38, label %8, label %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 64
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 32
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 62
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 126
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 64
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %26 = getelementptr inbounds i8, i8* %2, i64 32
  %27 = bitcast i8* %26 to <8 x i16>*
  %28 = mul nuw nsw <8 x i32> %20, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %29 = getelementptr inbounds i8, i8* %2, i64 48
  %30 = bitcast i8* %29 to <8 x i16>*
  %31 = mul nuw nsw <8 x i32> %20, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  br label %32

32:                                               ; preds = %123, %4
  %33 = phi i64 [ 0, %4 ], [ %125, %123 ]
  %34 = phi i16* [ %13, %4 ], [ %124, %123 ]
  %35 = mul i64 %17, %33
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = add i64 %35, 64
  %38 = getelementptr i8, i8* %0, i64 %37
  %39 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %33
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds i16, i16* %6, i64 %33
  %43 = sub i8 0, %40
  %44 = zext i8 %43 to i32
  %45 = mul nuw nsw i32 %44, %15
  %46 = add nuw nsw i32 %45, 256
  %47 = shl nuw nsw i64 %33, 1
  %48 = or i64 %47, 1
  %49 = getelementptr i8, i8* %3, i64 %48
  %50 = icmp ult i8* %36, %18
  %51 = icmp ugt i8* %38, %2
  %52 = and i1 %50, %51
  %53 = bitcast i16* %42 to i8*
  %54 = icmp ult i8* %36, %49
  %55 = icmp ugt i8* %38, %53
  %56 = and i1 %54, %55
  %57 = or i1 %52, %56
  br i1 %57, label %127, label %58

58:                                               ; preds = %32
  %59 = insertelement <8 x i32> undef, i32 %41, i32 0
  %60 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> zeroinitializer
  %61 = insertelement <8 x i32> undef, i32 %46, i32 0
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> zeroinitializer
  %63 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !768
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %60, %64
  %66 = load i16, i16* %42, align 2, !alias.scope !771
  %67 = insertelement <8 x i16> undef, i16 %66, i32 0
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> zeroinitializer
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %69, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %71 = add nuw nsw <8 x i32> %62, %65
  %72 = add nuw nsw <8 x i32> %71, %22
  %73 = add nuw nsw <8 x i32> %72, %70
  %74 = lshr <8 x i32> %73, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %75 = trunc <8 x i32> %74 to <8 x i16>
  %76 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 2, !alias.scope !773, !noalias !775
  %77 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !768
  %78 = zext <8 x i16> %77 to <8 x i32>
  %79 = mul nuw nsw <8 x i32> %60, %78
  %80 = load i16, i16* %42, align 2, !alias.scope !771
  %81 = insertelement <8 x i16> undef, i16 %80, i32 0
  %82 = shufflevector <8 x i16> %81, <8 x i16> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i16> %82 to <8 x i32>
  %84 = mul nuw nsw <8 x i32> %83, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %85 = add nuw nsw <8 x i32> %62, %79
  %86 = add nuw nsw <8 x i32> %85, %25
  %87 = add nuw nsw <8 x i32> %86, %84
  %88 = lshr <8 x i32> %87, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %34, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !773, !noalias !775
  %92 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !768
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %60, %93
  %95 = load i16, i16* %42, align 2, !alias.scope !771
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %98, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %100 = add nuw nsw <8 x i32> %62, %94
  %101 = add nuw nsw <8 x i32> %100, %28
  %102 = add nuw nsw <8 x i32> %101, %99
  %103 = lshr <8 x i32> %102, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %104 = trunc <8 x i32> %103 to <8 x i16>
  %105 = getelementptr inbounds i16, i16* %34, i64 16
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %106, align 2, !alias.scope !773, !noalias !775
  %107 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !768
  %108 = zext <8 x i16> %107 to <8 x i32>
  %109 = mul nuw nsw <8 x i32> %60, %108
  %110 = load i16, i16* %42, align 2, !alias.scope !771
  %111 = insertelement <8 x i16> undef, i16 %110, i32 0
  %112 = shufflevector <8 x i16> %111, <8 x i16> undef, <8 x i32> zeroinitializer
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = mul nuw nsw <8 x i32> %113, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %115 = add nuw nsw <8 x i32> %62, %109
  %116 = add nuw nsw <8 x i32> %115, %31
  %117 = add nuw nsw <8 x i32> %116, %114
  %118 = lshr <8 x i32> %117, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %34, i64 24
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !773, !noalias !775
  br label %123

122:                                              ; preds = %123
  ret void

123:                                              ; preds = %127, %58
  %124 = getelementptr inbounds i16, i16* %34, i64 %14
  %125 = add nuw nsw i64 %33, 1
  %126 = icmp eq i64 %125, 64
  br i1 %126, label %122, label %32

127:                                              ; preds = %32, %127
  %128 = phi i64 [ %148, %127 ], [ 0, %32 ]
  %129 = getelementptr inbounds i16, i16* %5, i64 %128
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = mul nuw nsw i32 %131, %41
  %133 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %128
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = load i16, i16* %42, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %137, %135
  %139 = sub i8 0, %134
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %140, %16
  %142 = add nuw nsw i32 %46, %132
  %143 = add nuw nsw i32 %142, %141
  %144 = add nuw nsw i32 %143, %138
  %145 = lshr i32 %144, 9
  %146 = trunc i32 %145 to i16
  %147 = getelementptr inbounds i16, i16* %34, i64 %128
  store i16 %146, i16* %147, align 2
  %148 = add nuw nsw i64 %128, 1
  %149 = icmp eq i64 %148, 32
  br i1 %149, label %123, label %127, !llvm.loop !776
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 126
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = getelementptr i8, i8* %2, i64 64
  %14 = bitcast i8* %2 to <8 x i16>*
  %15 = getelementptr inbounds i8, i8* %2, i64 16
  %16 = bitcast i8* %15 to <8 x i16>*
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to <8 x i16>*
  %19 = getelementptr inbounds i8, i8* %2, i64 48
  %20 = bitcast i8* %19 to <8 x i16>*
  br label %21

21:                                               ; preds = %75, %4
  %22 = phi i64 [ 0, %4 ], [ %77, %75 ]
  %23 = phi i16* [ %9, %4 ], [ %76, %75 ]
  %24 = mul i64 %12, %22
  %25 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %22
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub i8 0, %26
  %29 = zext i8 %28 to i32
  %30 = mul nuw nsw i32 %29, %11
  %31 = add nuw nsw i32 %30, 128
  %32 = add i64 %24, 64
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = getelementptr i8, i8* %0, i64 %24
  %35 = icmp ult i8* %34, %13
  %36 = icmp ugt i8* %33, %2
  %37 = and i1 %35, %36
  br i1 %37, label %79, label %38

38:                                               ; preds = %21
  %39 = insertelement <8 x i32> undef, i32 %27, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  %41 = insertelement <8 x i32> undef, i32 %31, i32 0
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> zeroinitializer
  %43 = load <8 x i16>, <8 x i16>* %14, align 2, !alias.scope !777
  %44 = zext <8 x i16> %43 to <8 x i32>
  %45 = mul nuw nsw <8 x i32> %40, %44
  %46 = add nuw nsw <8 x i32> %42, %45
  %47 = lshr <8 x i32> %46, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %48 = trunc <8 x i32> %47 to <8 x i16>
  %49 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %49, align 2, !alias.scope !780, !noalias !777
  %50 = load <8 x i16>, <8 x i16>* %16, align 2, !alias.scope !777
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %40, %51
  %53 = add nuw nsw <8 x i32> %42, %52
  %54 = lshr <8 x i32> %53, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = getelementptr inbounds i16, i16* %23, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %57, align 2, !alias.scope !780, !noalias !777
  %58 = load <8 x i16>, <8 x i16>* %18, align 2, !alias.scope !777
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %40, %59
  %61 = add nuw nsw <8 x i32> %42, %60
  %62 = lshr <8 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %23, i64 16
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !780, !noalias !777
  %66 = load <8 x i16>, <8 x i16>* %20, align 2, !alias.scope !777
  %67 = zext <8 x i16> %66 to <8 x i32>
  %68 = mul nuw nsw <8 x i32> %40, %67
  %69 = add nuw nsw <8 x i32> %42, %68
  %70 = lshr <8 x i32> %69, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %23, i64 24
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !780, !noalias !777
  br label %75

74:                                               ; preds = %75
  ret void

75:                                               ; preds = %79, %38
  %76 = getelementptr inbounds i16, i16* %23, i64 %10
  %77 = add nuw nsw i64 %22, 1
  %78 = icmp eq i64 %77, 64
  br i1 %78, label %74, label %21

79:                                               ; preds = %21, %79
  %80 = phi i64 [ %98, %79 ], [ 0, %21 ]
  %81 = getelementptr inbounds i16, i16* %5, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = mul nuw nsw i32 %83, %27
  %85 = add nuw nsw i32 %31, %84
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %23, i64 %80
  store i16 %87, i16* %88, align 2
  %89 = or i64 %80, 1
  %90 = getelementptr inbounds i16, i16* %5, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %92, %27
  %94 = add nuw nsw i32 %31, %93
  %95 = lshr i32 %94, 8
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds i16, i16* %23, i64 %89
  store i16 %96, i16* %97, align 2
  %98 = add nuw nsw i64 %80, 2
  %99 = icmp eq i64 %98, 32
  br i1 %99, label %75, label %79, !llvm.loop !782
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi32ELi64EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 62
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = insertelement <8 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> zeroinitializer
  %15 = mul nuw nsw <8 x i32> %14, <i32 1, i32 16, i32 31, i32 46, i32 60, i32 74, i32 87, i32 99>
  %16 = add nuw nsw <8 x i32> %15, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %17 = mul nuw nsw <8 x i32> %14, <i32 111, i32 123, i32 134, i32 145, i32 155, i32 164, i32 173, i32 182>
  %18 = add nuw nsw <8 x i32> %17, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %19 = mul nuw nsw <8 x i32> %14, <i32 190, i32 197, i32 204, i32 211, i32 217, i32 222, i32 227, i32 231>
  %20 = add nuw nsw <8 x i32> %19, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %21 = mul nuw nsw <8 x i32> %14, <i32 235, i32 239, i32 242, i32 244, i32 246, i32 247, i32 248, i32 248>
  %22 = add nuw nsw <8 x i32> %21, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %23

23:                                               ; preds = %79, %4
  %24 = phi i64 [ 0, %4 ], [ %81, %79 ]
  %25 = phi i16* [ %9, %4 ], [ %80, %79 ]
  %26 = mul i64 %12, %24
  %27 = getelementptr inbounds i16, i16* %5, i64 %24
  %28 = shl nuw nsw i64 %24, 1
  %29 = or i64 %28, 1
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = add i64 %26, 64
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = getelementptr i8, i8* %0, i64 %26
  %34 = bitcast i16* %27 to i8*
  %35 = icmp ult i8* %33, %30
  %36 = icmp ugt i8* %32, %34
  %37 = and i1 %35, %36
  br i1 %37, label %83, label %38

38:                                               ; preds = %23
  %39 = load i16, i16* %27, align 2, !alias.scope !783
  %40 = insertelement <8 x i16> undef, i16 %39, i32 0
  %41 = shufflevector <8 x i16> %40, <8 x i16> undef, <8 x i32> zeroinitializer
  %42 = zext <8 x i16> %41 to <8 x i32>
  %43 = mul nuw nsw <8 x i32> %42, <i32 255, i32 240, i32 225, i32 210, i32 196, i32 182, i32 169, i32 157>
  %44 = add nuw nsw <8 x i32> %16, %43
  %45 = lshr <8 x i32> %44, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %46 = trunc <8 x i32> %45 to <8 x i16>
  %47 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2, !alias.scope !786, !noalias !783
  %48 = load i16, i16* %27, align 2, !alias.scope !783
  %49 = insertelement <8 x i16> undef, i16 %48, i32 0
  %50 = shufflevector <8 x i16> %49, <8 x i16> undef, <8 x i32> zeroinitializer
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %51, <i32 145, i32 133, i32 122, i32 111, i32 101, i32 92, i32 83, i32 74>
  %53 = add nuw nsw <8 x i32> %18, %52
  %54 = lshr <8 x i32> %53, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = getelementptr inbounds i16, i16* %25, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %57, align 2, !alias.scope !786, !noalias !783
  %58 = load i16, i16* %27, align 2, !alias.scope !783
  %59 = insertelement <8 x i16> undef, i16 %58, i32 0
  %60 = shufflevector <8 x i16> %59, <8 x i16> undef, <8 x i32> zeroinitializer
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %61, <i32 66, i32 59, i32 52, i32 45, i32 39, i32 34, i32 29, i32 25>
  %63 = add nuw nsw <8 x i32> %20, %62
  %64 = lshr <8 x i32> %63, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %65 = trunc <8 x i32> %64 to <8 x i16>
  %66 = getelementptr inbounds i16, i16* %25, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %67, align 2, !alias.scope !786, !noalias !783
  %68 = load i16, i16* %27, align 2, !alias.scope !783
  %69 = insertelement <8 x i16> undef, i16 %68, i32 0
  %70 = shufflevector <8 x i16> %69, <8 x i16> undef, <8 x i32> zeroinitializer
  %71 = zext <8 x i16> %70 to <8 x i32>
  %72 = mul nuw nsw <8 x i32> %71, <i32 21, i32 17, i32 14, i32 12, i32 10, i32 9, i32 8, i32 8>
  %73 = add nuw nsw <8 x i32> %22, %72
  %74 = lshr <8 x i32> %73, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %75 = trunc <8 x i32> %74 to <8 x i16>
  %76 = getelementptr inbounds i16, i16* %25, i64 24
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %77, align 2, !alias.scope !786, !noalias !783
  br label %79

78:                                               ; preds = %79
  ret void

79:                                               ; preds = %83, %38
  %80 = getelementptr inbounds i16, i16* %25, i64 %10
  %81 = add nuw nsw i64 %24, 1
  %82 = icmp eq i64 %81, 64
  br i1 %82, label %78, label %23

83:                                               ; preds = %23, %83
  %84 = phi i64 [ %114, %83 ], [ 0, %23 ]
  %85 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %84
  %86 = load i8, i8* %85, align 2
  %87 = zext i8 %86 to i32
  %88 = load i16, i16* %27, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %89, %87
  %91 = sub i8 0, %86
  %92 = zext i8 %91 to i32
  %93 = mul nuw nsw i32 %92, %11
  %94 = add nuw nsw i32 %93, 128
  %95 = add nuw nsw i32 %94, %90
  %96 = lshr i32 %95, 8
  %97 = trunc i32 %96 to i16
  %98 = getelementptr inbounds i16, i16* %25, i64 %84
  store i16 %97, i16* %98, align 2
  %99 = or i64 %84, 1
  %100 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = load i16, i16* %27, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %104, %102
  %106 = sub i8 0, %101
  %107 = zext i8 %106 to i32
  %108 = mul nuw nsw i32 %107, %11
  %109 = add nuw nsw i32 %108, 128
  %110 = add nuw nsw i32 %109, %105
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds i16, i16* %25, i64 %99
  store i16 %112, i16* %113, align 2
  %114 = add nuw nsw i64 %84, 2
  %115 = icmp eq i64 %114, 32
  br i1 %115, label %79, label %83, !llvm.loop !788
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi16ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %7, align 2
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %9, align 2
  %10 = getelementptr inbounds i8, i8* %0, i64 32
  %11 = bitcast i8* %10 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 48
  %13 = bitcast i8* %12 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i8, i8* %0, i64 64
  %15 = bitcast i8* %14 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i8, i8* %0, i64 80
  %17 = bitcast i8* %16 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i8, i8* %0, i64 96
  %19 = bitcast i8* %18 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i8, i8* %0, i64 112
  %21 = bitcast i8* %20 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds i16, i16* %6, i64 %5
  %23 = bitcast i16* %22 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds i16, i16* %22, i64 8
  %25 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %22, i64 16
  %27 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds i16, i16* %22, i64 24
  %29 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %29, align 2
  %30 = getelementptr inbounds i16, i16* %22, i64 32
  %31 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds i16, i16* %22, i64 40
  %33 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds i16, i16* %22, i64 48
  %35 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds i16, i16* %22, i64 56
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %22, i64 %5
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %38, i64 8
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 16
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %38, i64 24
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %38, i64 32
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i16, i16* %38, i64 40
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds i16, i16* %38, i64 48
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds i16, i16* %38, i64 56
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds i16, i16* %38, i64 %5
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds i16, i16* %54, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds i16, i16* %54, i64 16
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds i16, i16* %54, i64 24
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds i16, i16* %54, i64 32
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds i16, i16* %54, i64 40
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %54, i64 48
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %54, i64 56
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %69, align 2
  %70 = getelementptr inbounds i16, i16* %54, i64 %5
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %71, align 2
  %72 = getelementptr inbounds i16, i16* %70, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %73, align 2
  %74 = getelementptr inbounds i16, i16* %70, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %75, align 2
  %76 = getelementptr inbounds i16, i16* %70, i64 24
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %77, align 2
  %78 = getelementptr inbounds i16, i16* %70, i64 32
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %79, align 2
  %80 = getelementptr inbounds i16, i16* %70, i64 40
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %81, align 2
  %82 = getelementptr inbounds i16, i16* %70, i64 48
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %83, align 2
  %84 = getelementptr inbounds i16, i16* %70, i64 56
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %85, align 2
  %86 = getelementptr inbounds i16, i16* %70, i64 %5
  %87 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %87, align 2
  %88 = getelementptr inbounds i16, i16* %86, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %89, align 2
  %90 = getelementptr inbounds i16, i16* %86, i64 16
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds i16, i16* %86, i64 24
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %93, align 2
  %94 = getelementptr inbounds i16, i16* %86, i64 32
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds i16, i16* %86, i64 40
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds i16, i16* %86, i64 48
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %99, align 2
  %100 = getelementptr inbounds i16, i16* %86, i64 56
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %86, i64 %5
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i16, i16* %102, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i16, i16* %102, i64 16
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %102, i64 24
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %102, i64 32
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %102, i64 40
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %102, i64 48
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %102, i64 56
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %102, i64 %5
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %118, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %118, i64 16
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %118, i64 24
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %118, i64 32
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %118, i64 40
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i16, i16* %118, i64 48
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %118, i64 56
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds i16, i16* %118, i64 %5
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %135, align 2
  %136 = getelementptr inbounds i16, i16* %134, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds i16, i16* %134, i64 16
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %139, align 2
  %140 = getelementptr inbounds i16, i16* %134, i64 24
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %141, align 2
  %142 = getelementptr inbounds i16, i16* %134, i64 32
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds i16, i16* %134, i64 40
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %145, align 2
  %146 = getelementptr inbounds i16, i16* %134, i64 48
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds i16, i16* %134, i64 56
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %149, align 2
  %150 = getelementptr inbounds i16, i16* %134, i64 %5
  %151 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %151, align 2
  %152 = getelementptr inbounds i16, i16* %150, i64 8
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %153, align 2
  %154 = getelementptr inbounds i16, i16* %150, i64 16
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %155, align 2
  %156 = getelementptr inbounds i16, i16* %150, i64 24
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds i16, i16* %150, i64 32
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %159, align 2
  %160 = getelementptr inbounds i16, i16* %150, i64 40
  %161 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %161, align 2
  %162 = getelementptr inbounds i16, i16* %150, i64 48
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %163, align 2
  %164 = getelementptr inbounds i16, i16* %150, i64 56
  %165 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %165, align 2
  %166 = getelementptr inbounds i16, i16* %150, i64 %5
  %167 = bitcast i16* %166 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds i16, i16* %166, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %169, align 2
  %170 = getelementptr inbounds i16, i16* %166, i64 16
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %171, align 2
  %172 = getelementptr inbounds i16, i16* %166, i64 24
  %173 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %173, align 2
  %174 = getelementptr inbounds i16, i16* %166, i64 32
  %175 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %175, align 2
  %176 = getelementptr inbounds i16, i16* %166, i64 40
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds i16, i16* %166, i64 48
  %179 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %179, align 2
  %180 = getelementptr inbounds i16, i16* %166, i64 56
  %181 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %181, align 2
  %182 = getelementptr inbounds i16, i16* %166, i64 %5
  %183 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %183, align 2
  %184 = getelementptr inbounds i16, i16* %182, i64 8
  %185 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %185, align 2
  %186 = getelementptr inbounds i16, i16* %182, i64 16
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %187, align 2
  %188 = getelementptr inbounds i16, i16* %182, i64 24
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %189, align 2
  %190 = getelementptr inbounds i16, i16* %182, i64 32
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %191, align 2
  %192 = getelementptr inbounds i16, i16* %182, i64 40
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds i16, i16* %182, i64 48
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %195, align 2
  %196 = getelementptr inbounds i16, i16* %182, i64 56
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %197, align 2
  %198 = getelementptr inbounds i16, i16* %182, i64 %5
  %199 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %199, align 2
  %200 = getelementptr inbounds i16, i16* %198, i64 8
  %201 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %201, align 2
  %202 = getelementptr inbounds i16, i16* %198, i64 16
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %203, align 2
  %204 = getelementptr inbounds i16, i16* %198, i64 24
  %205 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %205, align 2
  %206 = getelementptr inbounds i16, i16* %198, i64 32
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %207, align 2
  %208 = getelementptr inbounds i16, i16* %198, i64 40
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %209, align 2
  %210 = getelementptr inbounds i16, i16* %198, i64 48
  %211 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %211, align 2
  %212 = getelementptr inbounds i16, i16* %198, i64 56
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %213, align 2
  %214 = getelementptr inbounds i16, i16* %198, i64 %5
  %215 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %215, align 2
  %216 = getelementptr inbounds i16, i16* %214, i64 8
  %217 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %217, align 2
  %218 = getelementptr inbounds i16, i16* %214, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %219, align 2
  %220 = getelementptr inbounds i16, i16* %214, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %221, align 2
  %222 = getelementptr inbounds i16, i16* %214, i64 32
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %223, align 2
  %224 = getelementptr inbounds i16, i16* %214, i64 40
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %225, align 2
  %226 = getelementptr inbounds i16, i16* %214, i64 48
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %227, align 2
  %228 = getelementptr inbounds i16, i16* %214, i64 56
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds i16, i16* %214, i64 %5
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %231, align 2
  %232 = getelementptr inbounds i16, i16* %230, i64 8
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %233, align 2
  %234 = getelementptr inbounds i16, i16* %230, i64 16
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %235, align 2
  %236 = getelementptr inbounds i16, i16* %230, i64 24
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %237, align 2
  %238 = getelementptr inbounds i16, i16* %230, i64 32
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %239, align 2
  %240 = getelementptr inbounds i16, i16* %230, i64 40
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %241, align 2
  %242 = getelementptr inbounds i16, i16* %230, i64 48
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %243, align 2
  %244 = getelementptr inbounds i16, i16* %230, i64 56
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %245, align 2
  %246 = getelementptr inbounds i16, i16* %230, i64 %5
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %247, align 2
  %248 = getelementptr inbounds i16, i16* %246, i64 8
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %249, align 2
  %250 = getelementptr inbounds i16, i16* %246, i64 16
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %251, align 2
  %252 = getelementptr inbounds i16, i16* %246, i64 24
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %253, align 2
  %254 = getelementptr inbounds i16, i16* %246, i64 32
  %255 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %255, align 2
  %256 = getelementptr inbounds i16, i16* %246, i64 40
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %257, align 2
  %258 = getelementptr inbounds i16, i16* %246, i64 48
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %259, align 2
  %260 = getelementptr inbounds i16, i16* %246, i64 56
  %261 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %261, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to <4 x i16>*
  %6 = load <4 x i16>, <4 x i16>* %5, align 2
  %7 = zext <4 x i16> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = zext <4 x i16> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 16
  %15 = bitcast i8* %14 to <4 x i16>*
  %16 = load <4 x i16>, <4 x i16>* %15, align 2
  %17 = zext <4 x i16> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 24
  %20 = bitcast i8* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 32
  %25 = bitcast i8* %24 to <4 x i16>*
  %26 = load <4 x i16>, <4 x i16>* %25, align 2
  %27 = zext <4 x i16> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 40
  %30 = bitcast i8* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 48
  %35 = bitcast i8* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 56
  %40 = bitcast i8* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 64
  %45 = bitcast i8* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 72
  %50 = bitcast i8* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 80
  %55 = bitcast i8* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 88
  %60 = bitcast i8* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 96
  %65 = bitcast i8* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 104
  %70 = bitcast i8* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 112
  %75 = bitcast i8* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = zext <4 x i16> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 120
  %80 = bitcast i8* %79 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = lshr i64 %1, 1
  %91 = trunc i32 %89 to i16
  %92 = insertelement <8 x i16> undef, i16 %91, i32 0
  %93 = shufflevector <8 x i16> %92, <8 x i16> undef, <8 x i32> zeroinitializer
  %94 = bitcast i8* %0 to i16*
  %95 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds i8, i8* %0, i64 16
  %97 = bitcast i8* %96 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds i8, i8* %0, i64 32
  %99 = bitcast i8* %98 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %99, align 2
  %100 = getelementptr inbounds i8, i8* %0, i64 48
  %101 = bitcast i8* %100 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i8, i8* %0, i64 64
  %103 = bitcast i8* %102 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i8, i8* %0, i64 80
  %105 = bitcast i8* %104 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i8, i8* %0, i64 96
  %107 = bitcast i8* %106 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i8, i8* %0, i64 112
  %109 = bitcast i8* %108 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %94, i64 %90
  %111 = insertelement <8 x i16> undef, i16 %91, i32 0
  %112 = shufflevector <8 x i16> %111, <8 x i16> undef, <8 x i32> zeroinitializer
  %113 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %110, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %110, i64 16
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %110, i64 24
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %110, i64 32
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %110, i64 40
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %110, i64 48
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %110, i64 56
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %110, i64 %90
  %129 = insertelement <8 x i16> undef, i16 %91, i32 0
  %130 = shufflevector <8 x i16> %129, <8 x i16> undef, <8 x i32> zeroinitializer
  %131 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %128, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds i16, i16* %128, i64 16
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %135, align 2
  %136 = getelementptr inbounds i16, i16* %128, i64 24
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds i16, i16* %128, i64 32
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %139, align 2
  %140 = getelementptr inbounds i16, i16* %128, i64 40
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %141, align 2
  %142 = getelementptr inbounds i16, i16* %128, i64 48
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds i16, i16* %128, i64 56
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %145, align 2
  %146 = getelementptr inbounds i16, i16* %128, i64 %90
  %147 = insertelement <8 x i16> undef, i16 %91, i32 0
  %148 = shufflevector <8 x i16> %147, <8 x i16> undef, <8 x i32> zeroinitializer
  %149 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %149, align 2
  %150 = getelementptr inbounds i16, i16* %146, i64 8
  %151 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %151, align 2
  %152 = getelementptr inbounds i16, i16* %146, i64 16
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %153, align 2
  %154 = getelementptr inbounds i16, i16* %146, i64 24
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %155, align 2
  %156 = getelementptr inbounds i16, i16* %146, i64 32
  %157 = bitcast i16* %156 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds i16, i16* %146, i64 40
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %159, align 2
  %160 = getelementptr inbounds i16, i16* %146, i64 48
  %161 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %161, align 2
  %162 = getelementptr inbounds i16, i16* %146, i64 56
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %163, align 2
  %164 = getelementptr inbounds i16, i16* %146, i64 %90
  %165 = insertelement <8 x i16> undef, i16 %91, i32 0
  %166 = shufflevector <8 x i16> %165, <8 x i16> undef, <8 x i32> zeroinitializer
  %167 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds i16, i16* %164, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %169, align 2
  %170 = getelementptr inbounds i16, i16* %164, i64 16
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %171, align 2
  %172 = getelementptr inbounds i16, i16* %164, i64 24
  %173 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %173, align 2
  %174 = getelementptr inbounds i16, i16* %164, i64 32
  %175 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %175, align 2
  %176 = getelementptr inbounds i16, i16* %164, i64 40
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds i16, i16* %164, i64 48
  %179 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %179, align 2
  %180 = getelementptr inbounds i16, i16* %164, i64 56
  %181 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %181, align 2
  %182 = getelementptr inbounds i16, i16* %164, i64 %90
  %183 = insertelement <8 x i16> undef, i16 %91, i32 0
  %184 = shufflevector <8 x i16> %183, <8 x i16> undef, <8 x i32> zeroinitializer
  %185 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 2
  %186 = getelementptr inbounds i16, i16* %182, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %187, align 2
  %188 = getelementptr inbounds i16, i16* %182, i64 16
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %189, align 2
  %190 = getelementptr inbounds i16, i16* %182, i64 24
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %191, align 2
  %192 = getelementptr inbounds i16, i16* %182, i64 32
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds i16, i16* %182, i64 40
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %195, align 2
  %196 = getelementptr inbounds i16, i16* %182, i64 48
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %197, align 2
  %198 = getelementptr inbounds i16, i16* %182, i64 56
  %199 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %199, align 2
  %200 = getelementptr inbounds i16, i16* %182, i64 %90
  %201 = insertelement <8 x i16> undef, i16 %91, i32 0
  %202 = shufflevector <8 x i16> %201, <8 x i16> undef, <8 x i32> zeroinitializer
  %203 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %203, align 2
  %204 = getelementptr inbounds i16, i16* %200, i64 8
  %205 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %205, align 2
  %206 = getelementptr inbounds i16, i16* %200, i64 16
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %207, align 2
  %208 = getelementptr inbounds i16, i16* %200, i64 24
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %209, align 2
  %210 = getelementptr inbounds i16, i16* %200, i64 32
  %211 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %211, align 2
  %212 = getelementptr inbounds i16, i16* %200, i64 40
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %213, align 2
  %214 = getelementptr inbounds i16, i16* %200, i64 48
  %215 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %215, align 2
  %216 = getelementptr inbounds i16, i16* %200, i64 56
  %217 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %217, align 2
  %218 = getelementptr inbounds i16, i16* %200, i64 %90
  %219 = insertelement <8 x i16> undef, i16 %91, i32 0
  %220 = shufflevector <8 x i16> %219, <8 x i16> undef, <8 x i32> zeroinitializer
  %221 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %221, align 2
  %222 = getelementptr inbounds i16, i16* %218, i64 8
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %223, align 2
  %224 = getelementptr inbounds i16, i16* %218, i64 16
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %225, align 2
  %226 = getelementptr inbounds i16, i16* %218, i64 24
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %227, align 2
  %228 = getelementptr inbounds i16, i16* %218, i64 32
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds i16, i16* %218, i64 40
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %231, align 2
  %232 = getelementptr inbounds i16, i16* %218, i64 48
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %233, align 2
  %234 = getelementptr inbounds i16, i16* %218, i64 56
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %235, align 2
  %236 = getelementptr inbounds i16, i16* %218, i64 %90
  %237 = insertelement <8 x i16> undef, i16 %91, i32 0
  %238 = shufflevector <8 x i16> %237, <8 x i16> undef, <8 x i32> zeroinitializer
  %239 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %239, align 2
  %240 = getelementptr inbounds i16, i16* %236, i64 8
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %241, align 2
  %242 = getelementptr inbounds i16, i16* %236, i64 16
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %243, align 2
  %244 = getelementptr inbounds i16, i16* %236, i64 24
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %245, align 2
  %246 = getelementptr inbounds i16, i16* %236, i64 32
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %247, align 2
  %248 = getelementptr inbounds i16, i16* %236, i64 40
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %249, align 2
  %250 = getelementptr inbounds i16, i16* %236, i64 48
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %251, align 2
  %252 = getelementptr inbounds i16, i16* %236, i64 56
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %253, align 2
  %254 = getelementptr inbounds i16, i16* %236, i64 %90
  %255 = insertelement <8 x i16> undef, i16 %91, i32 0
  %256 = shufflevector <8 x i16> %255, <8 x i16> undef, <8 x i32> zeroinitializer
  %257 = bitcast i16* %254 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %257, align 2
  %258 = getelementptr inbounds i16, i16* %254, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %259, align 2
  %260 = getelementptr inbounds i16, i16* %254, i64 16
  %261 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %261, align 2
  %262 = getelementptr inbounds i16, i16* %254, i64 24
  %263 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %263, align 2
  %264 = getelementptr inbounds i16, i16* %254, i64 32
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %265, align 2
  %266 = getelementptr inbounds i16, i16* %254, i64 40
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %267, align 2
  %268 = getelementptr inbounds i16, i16* %254, i64 48
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds i16, i16* %254, i64 56
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %271, align 2
  %272 = getelementptr inbounds i16, i16* %254, i64 %90
  %273 = insertelement <8 x i16> undef, i16 %91, i32 0
  %274 = shufflevector <8 x i16> %273, <8 x i16> undef, <8 x i32> zeroinitializer
  %275 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %275, align 2
  %276 = getelementptr inbounds i16, i16* %272, i64 8
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %277, align 2
  %278 = getelementptr inbounds i16, i16* %272, i64 16
  %279 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %279, align 2
  %280 = getelementptr inbounds i16, i16* %272, i64 24
  %281 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %281, align 2
  %282 = getelementptr inbounds i16, i16* %272, i64 32
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %283, align 2
  %284 = getelementptr inbounds i16, i16* %272, i64 40
  %285 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %285, align 2
  %286 = getelementptr inbounds i16, i16* %272, i64 48
  %287 = bitcast i16* %286 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %287, align 2
  %288 = getelementptr inbounds i16, i16* %272, i64 56
  %289 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %289, align 2
  %290 = getelementptr inbounds i16, i16* %272, i64 %90
  %291 = insertelement <8 x i16> undef, i16 %91, i32 0
  %292 = shufflevector <8 x i16> %291, <8 x i16> undef, <8 x i32> zeroinitializer
  %293 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %293, align 2
  %294 = getelementptr inbounds i16, i16* %290, i64 8
  %295 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %295, align 2
  %296 = getelementptr inbounds i16, i16* %290, i64 16
  %297 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %297, align 2
  %298 = getelementptr inbounds i16, i16* %290, i64 24
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %299, align 2
  %300 = getelementptr inbounds i16, i16* %290, i64 32
  %301 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %301, align 2
  %302 = getelementptr inbounds i16, i16* %290, i64 40
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %303, align 2
  %304 = getelementptr inbounds i16, i16* %290, i64 48
  %305 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %305, align 2
  %306 = getelementptr inbounds i16, i16* %290, i64 56
  %307 = bitcast i16* %306 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %307, align 2
  %308 = getelementptr inbounds i16, i16* %290, i64 %90
  %309 = insertelement <8 x i16> undef, i16 %91, i32 0
  %310 = shufflevector <8 x i16> %309, <8 x i16> undef, <8 x i32> zeroinitializer
  %311 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2
  %312 = getelementptr inbounds i16, i16* %308, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %313, align 2
  %314 = getelementptr inbounds i16, i16* %308, i64 16
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %315, align 2
  %316 = getelementptr inbounds i16, i16* %308, i64 24
  %317 = bitcast i16* %316 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %317, align 2
  %318 = getelementptr inbounds i16, i16* %308, i64 32
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %319, align 2
  %320 = getelementptr inbounds i16, i16* %308, i64 40
  %321 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %321, align 2
  %322 = getelementptr inbounds i16, i16* %308, i64 48
  %323 = bitcast i16* %322 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %323, align 2
  %324 = getelementptr inbounds i16, i16* %308, i64 56
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %325, align 2
  %326 = getelementptr inbounds i16, i16* %308, i64 %90
  %327 = insertelement <8 x i16> undef, i16 %91, i32 0
  %328 = shufflevector <8 x i16> %327, <8 x i16> undef, <8 x i32> zeroinitializer
  %329 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %329, align 2
  %330 = getelementptr inbounds i16, i16* %326, i64 8
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %331, align 2
  %332 = getelementptr inbounds i16, i16* %326, i64 16
  %333 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %333, align 2
  %334 = getelementptr inbounds i16, i16* %326, i64 24
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %335, align 2
  %336 = getelementptr inbounds i16, i16* %326, i64 32
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %337, align 2
  %338 = getelementptr inbounds i16, i16* %326, i64 40
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %339, align 2
  %340 = getelementptr inbounds i16, i16* %326, i64 48
  %341 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %341, align 2
  %342 = getelementptr inbounds i16, i16* %326, i64 56
  %343 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %343, align 2
  %344 = getelementptr inbounds i16, i16* %326, i64 %90
  %345 = insertelement <8 x i16> undef, i16 %91, i32 0
  %346 = shufflevector <8 x i16> %345, <8 x i16> undef, <8 x i32> zeroinitializer
  %347 = bitcast i16* %344 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %347, align 2
  %348 = getelementptr inbounds i16, i16* %344, i64 8
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %349, align 2
  %350 = getelementptr inbounds i16, i16* %344, i64 16
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %351, align 2
  %352 = getelementptr inbounds i16, i16* %344, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %353, align 2
  %354 = getelementptr inbounds i16, i16* %344, i64 32
  %355 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %355, align 2
  %356 = getelementptr inbounds i16, i16* %344, i64 40
  %357 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %357, align 2
  %358 = getelementptr inbounds i16, i16* %344, i64 48
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %359, align 2
  %360 = getelementptr inbounds i16, i16* %344, i64 56
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %361, align 2
  %362 = getelementptr inbounds i16, i16* %344, i64 %90
  %363 = insertelement <8 x i16> undef, i16 %91, i32 0
  %364 = shufflevector <8 x i16> %363, <8 x i16> undef, <8 x i32> zeroinitializer
  %365 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %365, align 2
  %366 = getelementptr inbounds i16, i16* %362, i64 8
  %367 = bitcast i16* %366 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %367, align 2
  %368 = getelementptr inbounds i16, i16* %362, i64 16
  %369 = bitcast i16* %368 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %369, align 2
  %370 = getelementptr inbounds i16, i16* %362, i64 24
  %371 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %371, align 2
  %372 = getelementptr inbounds i16, i16* %362, i64 32
  %373 = bitcast i16* %372 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %373, align 2
  %374 = getelementptr inbounds i16, i16* %362, i64 40
  %375 = bitcast i16* %374 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %375, align 2
  %376 = getelementptr inbounds i16, i16* %362, i64 48
  %377 = bitcast i16* %376 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %377, align 2
  %378 = getelementptr inbounds i16, i16* %362, i64 56
  %379 = bitcast i16* %378 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %379, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 8
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = lshr i32 %83, 4
  %85 = lshr i64 %1, 1
  %86 = trunc i32 %84 to i16
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = bitcast i8* %0 to i16*
  %90 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds i8, i8* %0, i64 16
  %92 = bitcast i8* %91 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds i8, i8* %0, i64 32
  %94 = bitcast i8* %93 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds i8, i8* %0, i64 48
  %96 = bitcast i8* %95 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i8, i8* %0, i64 64
  %98 = bitcast i8* %97 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds i8, i8* %0, i64 80
  %100 = bitcast i8* %99 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds i8, i8* %0, i64 96
  %102 = bitcast i8* %101 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds i8, i8* %0, i64 112
  %104 = bitcast i8* %103 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds i16, i16* %89, i64 %85
  %106 = insertelement <8 x i16> undef, i16 %86, i32 0
  %107 = shufflevector <8 x i16> %106, <8 x i16> undef, <8 x i32> zeroinitializer
  %108 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds i16, i16* %105, i64 16
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds i16, i16* %105, i64 24
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds i16, i16* %105, i64 32
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %105, i64 40
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds i16, i16* %105, i64 48
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds i16, i16* %105, i64 56
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds i16, i16* %105, i64 %85
  %124 = insertelement <8 x i16> undef, i16 %86, i32 0
  %125 = shufflevector <8 x i16> %124, <8 x i16> undef, <8 x i32> zeroinitializer
  %126 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds i16, i16* %123, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds i16, i16* %123, i64 16
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds i16, i16* %123, i64 24
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds i16, i16* %123, i64 32
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %134, align 2
  %135 = getelementptr inbounds i16, i16* %123, i64 40
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %136, align 2
  %137 = getelementptr inbounds i16, i16* %123, i64 48
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds i16, i16* %123, i64 56
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %140, align 2
  %141 = getelementptr inbounds i16, i16* %123, i64 %85
  %142 = insertelement <8 x i16> undef, i16 %86, i32 0
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> zeroinitializer
  %144 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %144, align 2
  %145 = getelementptr inbounds i16, i16* %141, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %146, align 2
  %147 = getelementptr inbounds i16, i16* %141, i64 16
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds i16, i16* %141, i64 24
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds i16, i16* %141, i64 32
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds i16, i16* %141, i64 40
  %154 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %154, align 2
  %155 = getelementptr inbounds i16, i16* %141, i64 48
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %156, align 2
  %157 = getelementptr inbounds i16, i16* %141, i64 56
  %158 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds i16, i16* %141, i64 %85
  %160 = insertelement <8 x i16> undef, i16 %86, i32 0
  %161 = shufflevector <8 x i16> %160, <8 x i16> undef, <8 x i32> zeroinitializer
  %162 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds i16, i16* %159, i64 8
  %164 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %164, align 2
  %165 = getelementptr inbounds i16, i16* %159, i64 16
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %166, align 2
  %167 = getelementptr inbounds i16, i16* %159, i64 24
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %168, align 2
  %169 = getelementptr inbounds i16, i16* %159, i64 32
  %170 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %170, align 2
  %171 = getelementptr inbounds i16, i16* %159, i64 40
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds i16, i16* %159, i64 48
  %174 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds i16, i16* %159, i64 56
  %176 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i16, i16* %159, i64 %85
  %178 = insertelement <8 x i16> undef, i16 %86, i32 0
  %179 = shufflevector <8 x i16> %178, <8 x i16> undef, <8 x i32> zeroinitializer
  %180 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %177, i64 8
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %177, i64 16
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %177, i64 24
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %177, i64 32
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %177, i64 40
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %177, i64 48
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %177, i64 56
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %177, i64 %85
  %196 = insertelement <8 x i16> undef, i16 %86, i32 0
  %197 = shufflevector <8 x i16> %196, <8 x i16> undef, <8 x i32> zeroinitializer
  %198 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %195, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %195, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %195, i64 24
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %195, i64 32
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %195, i64 40
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %195, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %195, i64 56
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %195, i64 %85
  %214 = insertelement <8 x i16> undef, i16 %86, i32 0
  %215 = shufflevector <8 x i16> %214, <8 x i16> undef, <8 x i32> zeroinitializer
  %216 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %216, align 2
  %217 = getelementptr inbounds i16, i16* %213, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = getelementptr inbounds i16, i16* %213, i64 16
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %220, align 2
  %221 = getelementptr inbounds i16, i16* %213, i64 24
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %222, align 2
  %223 = getelementptr inbounds i16, i16* %213, i64 32
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %224, align 2
  %225 = getelementptr inbounds i16, i16* %213, i64 40
  %226 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %226, align 2
  %227 = getelementptr inbounds i16, i16* %213, i64 48
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %228, align 2
  %229 = getelementptr inbounds i16, i16* %213, i64 56
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %230, align 2
  %231 = getelementptr inbounds i16, i16* %213, i64 %85
  %232 = insertelement <8 x i16> undef, i16 %86, i32 0
  %233 = shufflevector <8 x i16> %232, <8 x i16> undef, <8 x i32> zeroinitializer
  %234 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %234, align 2
  %235 = getelementptr inbounds i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %236, align 2
  %237 = getelementptr inbounds i16, i16* %231, i64 16
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %238, align 2
  %239 = getelementptr inbounds i16, i16* %231, i64 24
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %240, align 2
  %241 = getelementptr inbounds i16, i16* %231, i64 32
  %242 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %242, align 2
  %243 = getelementptr inbounds i16, i16* %231, i64 40
  %244 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %244, align 2
  %245 = getelementptr inbounds i16, i16* %231, i64 48
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %246, align 2
  %247 = getelementptr inbounds i16, i16* %231, i64 56
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %248, align 2
  %249 = getelementptr inbounds i16, i16* %231, i64 %85
  %250 = insertelement <8 x i16> undef, i16 %86, i32 0
  %251 = shufflevector <8 x i16> %250, <8 x i16> undef, <8 x i32> zeroinitializer
  %252 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %252, align 2
  %253 = getelementptr inbounds i16, i16* %249, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %254, align 2
  %255 = getelementptr inbounds i16, i16* %249, i64 16
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %256, align 2
  %257 = getelementptr inbounds i16, i16* %249, i64 24
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %258, align 2
  %259 = getelementptr inbounds i16, i16* %249, i64 32
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %260, align 2
  %261 = getelementptr inbounds i16, i16* %249, i64 40
  %262 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %262, align 2
  %263 = getelementptr inbounds i16, i16* %249, i64 48
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %264, align 2
  %265 = getelementptr inbounds i16, i16* %249, i64 56
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %266, align 2
  %267 = getelementptr inbounds i16, i16* %249, i64 %85
  %268 = insertelement <8 x i16> undef, i16 %86, i32 0
  %269 = shufflevector <8 x i16> %268, <8 x i16> undef, <8 x i32> zeroinitializer
  %270 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %270, align 2
  %271 = getelementptr inbounds i16, i16* %267, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %272, align 2
  %273 = getelementptr inbounds i16, i16* %267, i64 16
  %274 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %274, align 2
  %275 = getelementptr inbounds i16, i16* %267, i64 24
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %276, align 2
  %277 = getelementptr inbounds i16, i16* %267, i64 32
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %278, align 2
  %279 = getelementptr inbounds i16, i16* %267, i64 40
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %280, align 2
  %281 = getelementptr inbounds i16, i16* %267, i64 48
  %282 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %282, align 2
  %283 = getelementptr inbounds i16, i16* %267, i64 56
  %284 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %284, align 2
  %285 = getelementptr inbounds i16, i16* %267, i64 %85
  %286 = insertelement <8 x i16> undef, i16 %86, i32 0
  %287 = shufflevector <8 x i16> %286, <8 x i16> undef, <8 x i32> zeroinitializer
  %288 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %288, align 2
  %289 = getelementptr inbounds i16, i16* %285, i64 8
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %290, align 2
  %291 = getelementptr inbounds i16, i16* %285, i64 16
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %292, align 2
  %293 = getelementptr inbounds i16, i16* %285, i64 24
  %294 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %294, align 2
  %295 = getelementptr inbounds i16, i16* %285, i64 32
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %296, align 2
  %297 = getelementptr inbounds i16, i16* %285, i64 40
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %298, align 2
  %299 = getelementptr inbounds i16, i16* %285, i64 48
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %300, align 2
  %301 = getelementptr inbounds i16, i16* %285, i64 56
  %302 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %302, align 2
  %303 = getelementptr inbounds i16, i16* %285, i64 %85
  %304 = insertelement <8 x i16> undef, i16 %86, i32 0
  %305 = shufflevector <8 x i16> %304, <8 x i16> undef, <8 x i32> zeroinitializer
  %306 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %306, align 2
  %307 = getelementptr inbounds i16, i16* %303, i64 8
  %308 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %308, align 2
  %309 = getelementptr inbounds i16, i16* %303, i64 16
  %310 = bitcast i16* %309 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %310, align 2
  %311 = getelementptr inbounds i16, i16* %303, i64 24
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %312, align 2
  %313 = getelementptr inbounds i16, i16* %303, i64 32
  %314 = bitcast i16* %313 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %314, align 2
  %315 = getelementptr inbounds i16, i16* %303, i64 40
  %316 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %316, align 2
  %317 = getelementptr inbounds i16, i16* %303, i64 48
  %318 = bitcast i16* %317 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %318, align 2
  %319 = getelementptr inbounds i16, i16* %303, i64 56
  %320 = bitcast i16* %319 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %320, align 2
  %321 = getelementptr inbounds i16, i16* %303, i64 %85
  %322 = insertelement <8 x i16> undef, i16 %86, i32 0
  %323 = shufflevector <8 x i16> %322, <8 x i16> undef, <8 x i32> zeroinitializer
  %324 = bitcast i16* %321 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %324, align 2
  %325 = getelementptr inbounds i16, i16* %321, i64 8
  %326 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %326, align 2
  %327 = getelementptr inbounds i16, i16* %321, i64 16
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %328, align 2
  %329 = getelementptr inbounds i16, i16* %321, i64 24
  %330 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %330, align 2
  %331 = getelementptr inbounds i16, i16* %321, i64 32
  %332 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %332, align 2
  %333 = getelementptr inbounds i16, i16* %321, i64 40
  %334 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %334, align 2
  %335 = getelementptr inbounds i16, i16* %321, i64 48
  %336 = bitcast i16* %335 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %336, align 2
  %337 = getelementptr inbounds i16, i16* %321, i64 56
  %338 = bitcast i16* %337 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %338, align 2
  %339 = getelementptr inbounds i16, i16* %321, i64 %85
  %340 = insertelement <8 x i16> undef, i16 %86, i32 0
  %341 = shufflevector <8 x i16> %340, <8 x i16> undef, <8 x i32> zeroinitializer
  %342 = bitcast i16* %339 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %342, align 2
  %343 = getelementptr inbounds i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %344, align 2
  %345 = getelementptr inbounds i16, i16* %339, i64 16
  %346 = bitcast i16* %345 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %346, align 2
  %347 = getelementptr inbounds i16, i16* %339, i64 24
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %348, align 2
  %349 = getelementptr inbounds i16, i16* %339, i64 32
  %350 = bitcast i16* %349 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %350, align 2
  %351 = getelementptr inbounds i16, i16* %339, i64 40
  %352 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %352, align 2
  %353 = getelementptr inbounds i16, i16* %339, i64 48
  %354 = bitcast i16* %353 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %354, align 2
  %355 = getelementptr inbounds i16, i16* %339, i64 56
  %356 = bitcast i16* %355 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %356, align 2
  %357 = getelementptr inbounds i16, i16* %339, i64 %85
  %358 = insertelement <8 x i16> undef, i16 %86, i32 0
  %359 = shufflevector <8 x i16> %358, <8 x i16> undef, <8 x i32> zeroinitializer
  %360 = bitcast i16* %357 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %360, align 2
  %361 = getelementptr inbounds i16, i16* %357, i64 8
  %362 = bitcast i16* %361 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %362, align 2
  %363 = getelementptr inbounds i16, i16* %357, i64 16
  %364 = bitcast i16* %363 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %364, align 2
  %365 = getelementptr inbounds i16, i16* %357, i64 24
  %366 = bitcast i16* %365 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %366, align 2
  %367 = getelementptr inbounds i16, i16* %357, i64 32
  %368 = bitcast i16* %367 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %368, align 2
  %369 = getelementptr inbounds i16, i16* %357, i64 40
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %370, align 2
  %371 = getelementptr inbounds i16, i16* %357, i64 48
  %372 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %372, align 2
  %373 = getelementptr inbounds i16, i16* %357, i64 56
  %374 = bitcast i16* %373 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %374, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to <4 x i16>*
  %6 = load <4 x i16>, <4 x i16>* %5, align 2
  %7 = zext <4 x i16> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 40, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = zext <4 x i16> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 16
  %15 = bitcast i8* %14 to <4 x i16>*
  %16 = load <4 x i16>, <4 x i16>* %15, align 2
  %17 = zext <4 x i16> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 24
  %20 = bitcast i8* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 32
  %25 = bitcast i8* %24 to <4 x i16>*
  %26 = load <4 x i16>, <4 x i16>* %25, align 2
  %27 = zext <4 x i16> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 40
  %30 = bitcast i8* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 48
  %35 = bitcast i8* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 56
  %40 = bitcast i8* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 64
  %45 = bitcast i8* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 72
  %50 = bitcast i8* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 80
  %55 = bitcast i8* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 88
  %60 = bitcast i8* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 96
  %65 = bitcast i8* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 104
  %70 = bitcast i8* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 112
  %75 = bitcast i8* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = zext <4 x i16> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 120
  %80 = bitcast i8* %79 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = bitcast i8* %3 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %88, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 2
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 4
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nuw nsw i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 6
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = add nuw nsw i32 %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 8
  %109 = bitcast i8* %108 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = add nuw nsw i32 %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 10
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = add nuw nsw i32 %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 12
  %119 = bitcast i8* %118 to i16*
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = add nuw nsw i32 %117, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 14
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add nuw nsw i32 %122, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 16
  %129 = bitcast i8* %128 to i16*
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = add nuw nsw i32 %127, %131
  %133 = getelementptr inbounds i8, i8* %3, i64 18
  %134 = bitcast i8* %133 to i16*
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = add nuw nsw i32 %132, %136
  %138 = getelementptr inbounds i8, i8* %3, i64 20
  %139 = bitcast i8* %138 to i16*
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = add nuw nsw i32 %137, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 22
  %144 = bitcast i8* %143 to i16*
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = add nuw nsw i32 %142, %146
  %148 = getelementptr inbounds i8, i8* %3, i64 24
  %149 = bitcast i8* %148 to i16*
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = add nuw nsw i32 %147, %151
  %153 = getelementptr inbounds i8, i8* %3, i64 26
  %154 = bitcast i8* %153 to i16*
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = add nuw nsw i32 %152, %156
  %158 = getelementptr inbounds i8, i8* %3, i64 28
  %159 = bitcast i8* %158 to i16*
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = add nuw nsw i32 %157, %161
  %163 = getelementptr inbounds i8, i8* %3, i64 30
  %164 = bitcast i8* %163 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = add nuw nsw i32 %162, %166
  %168 = udiv i32 %167, 80
  %169 = lshr i64 %1, 1
  %170 = trunc i32 %168 to i16
  %171 = insertelement <8 x i16> undef, i16 %170, i32 0
  %172 = shufflevector <8 x i16> %171, <8 x i16> undef, <8 x i32> zeroinitializer
  %173 = bitcast i8* %0 to i16*
  %174 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds i8, i8* %0, i64 16
  %176 = bitcast i8* %175 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i8, i8* %0, i64 32
  %178 = bitcast i8* %177 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds i8, i8* %0, i64 48
  %180 = bitcast i8* %179 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i8, i8* %0, i64 64
  %182 = bitcast i8* %181 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i8, i8* %0, i64 80
  %184 = bitcast i8* %183 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i8, i8* %0, i64 96
  %186 = bitcast i8* %185 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i8, i8* %0, i64 112
  %188 = bitcast i8* %187 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %173, i64 %169
  %190 = insertelement <8 x i16> undef, i16 %170, i32 0
  %191 = shufflevector <8 x i16> %190, <8 x i16> undef, <8 x i32> zeroinitializer
  %192 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %189, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %189, i64 16
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %189, i64 24
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %189, i64 32
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %189, i64 40
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %189, i64 48
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %189, i64 56
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %189, i64 %169
  %208 = insertelement <8 x i16> undef, i16 %170, i32 0
  %209 = shufflevector <8 x i16> %208, <8 x i16> undef, <8 x i32> zeroinitializer
  %210 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %207, i64 8
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %207, i64 16
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds i16, i16* %207, i64 24
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %216, align 2
  %217 = getelementptr inbounds i16, i16* %207, i64 32
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %218, align 2
  %219 = getelementptr inbounds i16, i16* %207, i64 40
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %220, align 2
  %221 = getelementptr inbounds i16, i16* %207, i64 48
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %222, align 2
  %223 = getelementptr inbounds i16, i16* %207, i64 56
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %209, <8 x i16>* %224, align 2
  %225 = getelementptr inbounds i16, i16* %207, i64 %169
  %226 = insertelement <8 x i16> undef, i16 %170, i32 0
  %227 = shufflevector <8 x i16> %226, <8 x i16> undef, <8 x i32> zeroinitializer
  %228 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %228, align 2
  %229 = getelementptr inbounds i16, i16* %225, i64 8
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %230, align 2
  %231 = getelementptr inbounds i16, i16* %225, i64 16
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %232, align 2
  %233 = getelementptr inbounds i16, i16* %225, i64 24
  %234 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %234, align 2
  %235 = getelementptr inbounds i16, i16* %225, i64 32
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %236, align 2
  %237 = getelementptr inbounds i16, i16* %225, i64 40
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %238, align 2
  %239 = getelementptr inbounds i16, i16* %225, i64 48
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %240, align 2
  %241 = getelementptr inbounds i16, i16* %225, i64 56
  %242 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %242, align 2
  %243 = getelementptr inbounds i16, i16* %225, i64 %169
  %244 = insertelement <8 x i16> undef, i16 %170, i32 0
  %245 = shufflevector <8 x i16> %244, <8 x i16> undef, <8 x i32> zeroinitializer
  %246 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %246, align 2
  %247 = getelementptr inbounds i16, i16* %243, i64 8
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %248, align 2
  %249 = getelementptr inbounds i16, i16* %243, i64 16
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %250, align 2
  %251 = getelementptr inbounds i16, i16* %243, i64 24
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %252, align 2
  %253 = getelementptr inbounds i16, i16* %243, i64 32
  %254 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %254, align 2
  %255 = getelementptr inbounds i16, i16* %243, i64 40
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %256, align 2
  %257 = getelementptr inbounds i16, i16* %243, i64 48
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %258, align 2
  %259 = getelementptr inbounds i16, i16* %243, i64 56
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %260, align 2
  %261 = getelementptr inbounds i16, i16* %243, i64 %169
  %262 = insertelement <8 x i16> undef, i16 %170, i32 0
  %263 = shufflevector <8 x i16> %262, <8 x i16> undef, <8 x i32> zeroinitializer
  %264 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %264, align 2
  %265 = getelementptr inbounds i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %266, align 2
  %267 = getelementptr inbounds i16, i16* %261, i64 16
  %268 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %268, align 2
  %269 = getelementptr inbounds i16, i16* %261, i64 24
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %270, align 2
  %271 = getelementptr inbounds i16, i16* %261, i64 32
  %272 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %272, align 2
  %273 = getelementptr inbounds i16, i16* %261, i64 40
  %274 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %274, align 2
  %275 = getelementptr inbounds i16, i16* %261, i64 48
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %276, align 2
  %277 = getelementptr inbounds i16, i16* %261, i64 56
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %278, align 2
  %279 = getelementptr inbounds i16, i16* %261, i64 %169
  %280 = insertelement <8 x i16> undef, i16 %170, i32 0
  %281 = shufflevector <8 x i16> %280, <8 x i16> undef, <8 x i32> zeroinitializer
  %282 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %282, align 2
  %283 = getelementptr inbounds i16, i16* %279, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %284, align 2
  %285 = getelementptr inbounds i16, i16* %279, i64 16
  %286 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %286, align 2
  %287 = getelementptr inbounds i16, i16* %279, i64 24
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %288, align 2
  %289 = getelementptr inbounds i16, i16* %279, i64 32
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %290, align 2
  %291 = getelementptr inbounds i16, i16* %279, i64 40
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %292, align 2
  %293 = getelementptr inbounds i16, i16* %279, i64 48
  %294 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %294, align 2
  %295 = getelementptr inbounds i16, i16* %279, i64 56
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %296, align 2
  %297 = getelementptr inbounds i16, i16* %279, i64 %169
  %298 = insertelement <8 x i16> undef, i16 %170, i32 0
  %299 = shufflevector <8 x i16> %298, <8 x i16> undef, <8 x i32> zeroinitializer
  %300 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %300, align 2
  %301 = getelementptr inbounds i16, i16* %297, i64 8
  %302 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %302, align 2
  %303 = getelementptr inbounds i16, i16* %297, i64 16
  %304 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %304, align 2
  %305 = getelementptr inbounds i16, i16* %297, i64 24
  %306 = bitcast i16* %305 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %306, align 2
  %307 = getelementptr inbounds i16, i16* %297, i64 32
  %308 = bitcast i16* %307 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %308, align 2
  %309 = getelementptr inbounds i16, i16* %297, i64 40
  %310 = bitcast i16* %309 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %310, align 2
  %311 = getelementptr inbounds i16, i16* %297, i64 48
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %312, align 2
  %313 = getelementptr inbounds i16, i16* %297, i64 56
  %314 = bitcast i16* %313 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %314, align 2
  %315 = getelementptr inbounds i16, i16* %297, i64 %169
  %316 = insertelement <8 x i16> undef, i16 %170, i32 0
  %317 = shufflevector <8 x i16> %316, <8 x i16> undef, <8 x i32> zeroinitializer
  %318 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %318, align 2
  %319 = getelementptr inbounds i16, i16* %315, i64 8
  %320 = bitcast i16* %319 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %320, align 2
  %321 = getelementptr inbounds i16, i16* %315, i64 16
  %322 = bitcast i16* %321 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %322, align 2
  %323 = getelementptr inbounds i16, i16* %315, i64 24
  %324 = bitcast i16* %323 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %324, align 2
  %325 = getelementptr inbounds i16, i16* %315, i64 32
  %326 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %326, align 2
  %327 = getelementptr inbounds i16, i16* %315, i64 40
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %328, align 2
  %329 = getelementptr inbounds i16, i16* %315, i64 48
  %330 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %330, align 2
  %331 = getelementptr inbounds i16, i16* %315, i64 56
  %332 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %332, align 2
  %333 = getelementptr inbounds i16, i16* %315, i64 %169
  %334 = insertelement <8 x i16> undef, i16 %170, i32 0
  %335 = shufflevector <8 x i16> %334, <8 x i16> undef, <8 x i32> zeroinitializer
  %336 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %336, align 2
  %337 = getelementptr inbounds i16, i16* %333, i64 8
  %338 = bitcast i16* %337 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %338, align 2
  %339 = getelementptr inbounds i16, i16* %333, i64 16
  %340 = bitcast i16* %339 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %340, align 2
  %341 = getelementptr inbounds i16, i16* %333, i64 24
  %342 = bitcast i16* %341 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %342, align 2
  %343 = getelementptr inbounds i16, i16* %333, i64 32
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %344, align 2
  %345 = getelementptr inbounds i16, i16* %333, i64 40
  %346 = bitcast i16* %345 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %346, align 2
  %347 = getelementptr inbounds i16, i16* %333, i64 48
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %348, align 2
  %349 = getelementptr inbounds i16, i16* %333, i64 56
  %350 = bitcast i16* %349 to <8 x i16>*
  store <8 x i16> %335, <8 x i16>* %350, align 2
  %351 = getelementptr inbounds i16, i16* %333, i64 %169
  %352 = insertelement <8 x i16> undef, i16 %170, i32 0
  %353 = shufflevector <8 x i16> %352, <8 x i16> undef, <8 x i32> zeroinitializer
  %354 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %354, align 2
  %355 = getelementptr inbounds i16, i16* %351, i64 8
  %356 = bitcast i16* %355 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %356, align 2
  %357 = getelementptr inbounds i16, i16* %351, i64 16
  %358 = bitcast i16* %357 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %358, align 2
  %359 = getelementptr inbounds i16, i16* %351, i64 24
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %360, align 2
  %361 = getelementptr inbounds i16, i16* %351, i64 32
  %362 = bitcast i16* %361 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %362, align 2
  %363 = getelementptr inbounds i16, i16* %351, i64 40
  %364 = bitcast i16* %363 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %364, align 2
  %365 = getelementptr inbounds i16, i16* %351, i64 48
  %366 = bitcast i16* %365 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %366, align 2
  %367 = getelementptr inbounds i16, i16* %351, i64 56
  %368 = bitcast i16* %367 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %368, align 2
  %369 = getelementptr inbounds i16, i16* %351, i64 %169
  %370 = insertelement <8 x i16> undef, i16 %170, i32 0
  %371 = shufflevector <8 x i16> %370, <8 x i16> undef, <8 x i32> zeroinitializer
  %372 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %372, align 2
  %373 = getelementptr inbounds i16, i16* %369, i64 8
  %374 = bitcast i16* %373 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %374, align 2
  %375 = getelementptr inbounds i16, i16* %369, i64 16
  %376 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %376, align 2
  %377 = getelementptr inbounds i16, i16* %369, i64 24
  %378 = bitcast i16* %377 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %378, align 2
  %379 = getelementptr inbounds i16, i16* %369, i64 32
  %380 = bitcast i16* %379 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %380, align 2
  %381 = getelementptr inbounds i16, i16* %369, i64 40
  %382 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %382, align 2
  %383 = getelementptr inbounds i16, i16* %369, i64 48
  %384 = bitcast i16* %383 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %384, align 2
  %385 = getelementptr inbounds i16, i16* %369, i64 56
  %386 = bitcast i16* %385 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %386, align 2
  %387 = getelementptr inbounds i16, i16* %369, i64 %169
  %388 = insertelement <8 x i16> undef, i16 %170, i32 0
  %389 = shufflevector <8 x i16> %388, <8 x i16> undef, <8 x i32> zeroinitializer
  %390 = bitcast i16* %387 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %390, align 2
  %391 = getelementptr inbounds i16, i16* %387, i64 8
  %392 = bitcast i16* %391 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %392, align 2
  %393 = getelementptr inbounds i16, i16* %387, i64 16
  %394 = bitcast i16* %393 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %394, align 2
  %395 = getelementptr inbounds i16, i16* %387, i64 24
  %396 = bitcast i16* %395 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %396, align 2
  %397 = getelementptr inbounds i16, i16* %387, i64 32
  %398 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %398, align 2
  %399 = getelementptr inbounds i16, i16* %387, i64 40
  %400 = bitcast i16* %399 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %400, align 2
  %401 = getelementptr inbounds i16, i16* %387, i64 48
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %402, align 2
  %403 = getelementptr inbounds i16, i16* %387, i64 56
  %404 = bitcast i16* %403 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %404, align 2
  %405 = getelementptr inbounds i16, i16* %387, i64 %169
  %406 = insertelement <8 x i16> undef, i16 %170, i32 0
  %407 = shufflevector <8 x i16> %406, <8 x i16> undef, <8 x i32> zeroinitializer
  %408 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %408, align 2
  %409 = getelementptr inbounds i16, i16* %405, i64 8
  %410 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %410, align 2
  %411 = getelementptr inbounds i16, i16* %405, i64 16
  %412 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %412, align 2
  %413 = getelementptr inbounds i16, i16* %405, i64 24
  %414 = bitcast i16* %413 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %414, align 2
  %415 = getelementptr inbounds i16, i16* %405, i64 32
  %416 = bitcast i16* %415 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %416, align 2
  %417 = getelementptr inbounds i16, i16* %405, i64 40
  %418 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %418, align 2
  %419 = getelementptr inbounds i16, i16* %405, i64 48
  %420 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %420, align 2
  %421 = getelementptr inbounds i16, i16* %405, i64 56
  %422 = bitcast i16* %421 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %422, align 2
  %423 = getelementptr inbounds i16, i16* %405, i64 %169
  %424 = insertelement <8 x i16> undef, i16 %170, i32 0
  %425 = shufflevector <8 x i16> %424, <8 x i16> undef, <8 x i32> zeroinitializer
  %426 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %426, align 2
  %427 = getelementptr inbounds i16, i16* %423, i64 8
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %428, align 2
  %429 = getelementptr inbounds i16, i16* %423, i64 16
  %430 = bitcast i16* %429 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %430, align 2
  %431 = getelementptr inbounds i16, i16* %423, i64 24
  %432 = bitcast i16* %431 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %432, align 2
  %433 = getelementptr inbounds i16, i16* %423, i64 32
  %434 = bitcast i16* %433 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %434, align 2
  %435 = getelementptr inbounds i16, i16* %423, i64 40
  %436 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %436, align 2
  %437 = getelementptr inbounds i16, i16* %423, i64 48
  %438 = bitcast i16* %437 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %438, align 2
  %439 = getelementptr inbounds i16, i16* %423, i64 56
  %440 = bitcast i16* %439 to <8 x i16>*
  store <8 x i16> %425, <8 x i16>* %440, align 2
  %441 = getelementptr inbounds i16, i16* %423, i64 %169
  %442 = insertelement <8 x i16> undef, i16 %170, i32 0
  %443 = shufflevector <8 x i16> %442, <8 x i16> undef, <8 x i32> zeroinitializer
  %444 = bitcast i16* %441 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %444, align 2
  %445 = getelementptr inbounds i16, i16* %441, i64 8
  %446 = bitcast i16* %445 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %446, align 2
  %447 = getelementptr inbounds i16, i16* %441, i64 16
  %448 = bitcast i16* %447 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %448, align 2
  %449 = getelementptr inbounds i16, i16* %441, i64 24
  %450 = bitcast i16* %449 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %450, align 2
  %451 = getelementptr inbounds i16, i16* %441, i64 32
  %452 = bitcast i16* %451 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %452, align 2
  %453 = getelementptr inbounds i16, i16* %441, i64 40
  %454 = bitcast i16* %453 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %454, align 2
  %455 = getelementptr inbounds i16, i16* %441, i64 48
  %456 = bitcast i16* %455 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %456, align 2
  %457 = getelementptr inbounds i16, i16* %441, i64 56
  %458 = bitcast i16* %457 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %458, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 128, i1 false)
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %2, i64 128, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %2, i64 128, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %2, i64 128, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 128, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 128, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 128, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 128, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %2, i64 128, i1 false)
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %2, i64 128, i1 false)
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %2, i64 128, i1 false)
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %2, i64 128, i1 false)
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %2, i64 128, i1 false)
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %2, i64 128, i1 false)
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %2, i64 128, i1 false)
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %2, i64 128, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %3 to i16*
  %7 = load i16, i16* %6, align 2
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> undef, <8 x i32> zeroinitializer
  %10 = bitcast i8* %0 to i16*
  %11 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %9, <8 x i16>* %11, align 2
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to <8 x i16>*
  store <8 x i16> %9, <8 x i16>* %13, align 2
  %14 = getelementptr inbounds i8, i8* %0, i64 32
  %15 = bitcast i8* %14 to <8 x i16>*
  store <8 x i16> %9, <8 x i16>* %15, align 2
  %16 = getelementptr inbounds i8, i8* %0, i64 48
  %17 = bitcast i8* %16 to <8 x i16>*
  store <8 x i16> %9, <8 x i16>* %17, align 2
  %18 = getelementptr inbounds i8, i8* %0, i64 64
  %19 = bitcast i8* %18 to <8 x i16>*
  store <8 x i16> %9, <8 x i16>* %19, align 2
  %20 = getelementptr inbounds i8, i8* %0, i64 80
  %21 = bitcast i8* %20 to <8 x i16>*
  store <8 x i16> %9, <8 x i16>* %21, align 2
  %22 = getelementptr inbounds i8, i8* %0, i64 96
  %23 = bitcast i8* %22 to <8 x i16>*
  store <8 x i16> %9, <8 x i16>* %23, align 2
  %24 = getelementptr inbounds i8, i8* %0, i64 112
  %25 = bitcast i8* %24 to <8 x i16>*
  store <8 x i16> %9, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds i16, i16* %10, i64 %5
  %27 = getelementptr inbounds i8, i8* %3, i64 2
  %28 = bitcast i8* %27 to i16*
  %29 = load i16, i16* %28, align 2
  %30 = insertelement <8 x i16> undef, i16 %29, i32 0
  %31 = shufflevector <8 x i16> %30, <8 x i16> undef, <8 x i32> zeroinitializer
  %32 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %26, i64 8
  %34 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %26, i64 16
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds i16, i16* %26, i64 24
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %26, i64 32
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds i16, i16* %26, i64 40
  %42 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %42, align 2
  %43 = getelementptr inbounds i16, i16* %26, i64 48
  %44 = bitcast i16* %43 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %44, align 2
  %45 = getelementptr inbounds i16, i16* %26, i64 56
  %46 = bitcast i16* %45 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %46, align 2
  %47 = getelementptr inbounds i16, i16* %26, i64 %5
  %48 = getelementptr inbounds i8, i8* %3, i64 4
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <8 x i16> undef, i16 %50, i32 0
  %52 = shufflevector <8 x i16> %51, <8 x i16> undef, <8 x i32> zeroinitializer
  %53 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds i16, i16* %47, i64 8
  %55 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %55, align 2
  %56 = getelementptr inbounds i16, i16* %47, i64 16
  %57 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds i16, i16* %47, i64 24
  %59 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds i16, i16* %47, i64 32
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %61, align 2
  %62 = getelementptr inbounds i16, i16* %47, i64 40
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds i16, i16* %47, i64 48
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds i16, i16* %47, i64 56
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds i16, i16* %47, i64 %5
  %69 = getelementptr inbounds i8, i8* %3, i64 6
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <8 x i16> undef, i16 %71, i32 0
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <8 x i32> zeroinitializer
  %74 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds i16, i16* %68, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds i16, i16* %68, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds i16, i16* %68, i64 24
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds i16, i16* %68, i64 32
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds i16, i16* %68, i64 40
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %84, align 2
  %85 = getelementptr inbounds i16, i16* %68, i64 48
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %86, align 2
  %87 = getelementptr inbounds i16, i16* %68, i64 56
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %88, align 2
  %89 = getelementptr inbounds i16, i16* %68, i64 %5
  %90 = getelementptr inbounds i8, i8* %3, i64 8
  %91 = bitcast i8* %90 to i16*
  %92 = load i16, i16* %91, align 2
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %95, align 2
  %96 = getelementptr inbounds i16, i16* %89, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds i16, i16* %89, i64 16
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %99, align 2
  %100 = getelementptr inbounds i16, i16* %89, i64 24
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %89, i64 32
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i16, i16* %89, i64 40
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i16, i16* %89, i64 48
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %89, i64 56
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %89, i64 %5
  %111 = getelementptr inbounds i8, i8* %3, i64 10
  %112 = bitcast i8* %111 to i16*
  %113 = load i16, i16* %112, align 2
  %114 = insertelement <8 x i16> undef, i16 %113, i32 0
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <8 x i32> zeroinitializer
  %116 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %110, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds i16, i16* %110, i64 16
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds i16, i16* %110, i64 24
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds i16, i16* %110, i64 32
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %124, align 2
  %125 = getelementptr inbounds i16, i16* %110, i64 40
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds i16, i16* %110, i64 48
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds i16, i16* %110, i64 56
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %130, align 2
  %131 = getelementptr inbounds i16, i16* %110, i64 %5
  %132 = getelementptr inbounds i8, i8* %3, i64 12
  %133 = bitcast i8* %132 to i16*
  %134 = load i16, i16* %133, align 2
  %135 = insertelement <8 x i16> undef, i16 %134, i32 0
  %136 = shufflevector <8 x i16> %135, <8 x i16> undef, <8 x i32> zeroinitializer
  %137 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds i16, i16* %131, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %139, align 2
  %140 = getelementptr inbounds i16, i16* %131, i64 16
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %141, align 2
  %142 = getelementptr inbounds i16, i16* %131, i64 24
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds i16, i16* %131, i64 32
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %145, align 2
  %146 = getelementptr inbounds i16, i16* %131, i64 40
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds i16, i16* %131, i64 48
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %149, align 2
  %150 = getelementptr inbounds i16, i16* %131, i64 56
  %151 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %151, align 2
  %152 = getelementptr inbounds i16, i16* %131, i64 %5
  %153 = getelementptr inbounds i8, i8* %3, i64 14
  %154 = bitcast i8* %153 to i16*
  %155 = load i16, i16* %154, align 2
  %156 = insertelement <8 x i16> undef, i16 %155, i32 0
  %157 = shufflevector <8 x i16> %156, <8 x i16> undef, <8 x i32> zeroinitializer
  %158 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds i16, i16* %152, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %160, align 2
  %161 = getelementptr inbounds i16, i16* %152, i64 16
  %162 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds i16, i16* %152, i64 24
  %164 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %164, align 2
  %165 = getelementptr inbounds i16, i16* %152, i64 32
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %166, align 2
  %167 = getelementptr inbounds i16, i16* %152, i64 40
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %168, align 2
  %169 = getelementptr inbounds i16, i16* %152, i64 48
  %170 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %170, align 2
  %171 = getelementptr inbounds i16, i16* %152, i64 56
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds i16, i16* %152, i64 %5
  %174 = getelementptr inbounds i8, i8* %3, i64 16
  %175 = bitcast i8* %174 to i16*
  %176 = load i16, i16* %175, align 2
  %177 = insertelement <8 x i16> undef, i16 %176, i32 0
  %178 = shufflevector <8 x i16> %177, <8 x i16> undef, <8 x i32> zeroinitializer
  %179 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %179, align 2
  %180 = getelementptr inbounds i16, i16* %173, i64 8
  %181 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %181, align 2
  %182 = getelementptr inbounds i16, i16* %173, i64 16
  %183 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %183, align 2
  %184 = getelementptr inbounds i16, i16* %173, i64 24
  %185 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %185, align 2
  %186 = getelementptr inbounds i16, i16* %173, i64 32
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %187, align 2
  %188 = getelementptr inbounds i16, i16* %173, i64 40
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %189, align 2
  %190 = getelementptr inbounds i16, i16* %173, i64 48
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %191, align 2
  %192 = getelementptr inbounds i16, i16* %173, i64 56
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds i16, i16* %173, i64 %5
  %195 = getelementptr inbounds i8, i8* %3, i64 18
  %196 = bitcast i8* %195 to i16*
  %197 = load i16, i16* %196, align 2
  %198 = insertelement <8 x i16> undef, i16 %197, i32 0
  %199 = shufflevector <8 x i16> %198, <8 x i16> undef, <8 x i32> zeroinitializer
  %200 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %194, i64 8
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %194, i64 16
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %194, i64 24
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %194, i64 32
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %194, i64 40
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %210, align 2
  %211 = getelementptr inbounds i16, i16* %194, i64 48
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %194, i64 56
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds i16, i16* %194, i64 %5
  %216 = getelementptr inbounds i8, i8* %3, i64 20
  %217 = bitcast i8* %216 to i16*
  %218 = load i16, i16* %217, align 2
  %219 = insertelement <8 x i16> undef, i16 %218, i32 0
  %220 = shufflevector <8 x i16> %219, <8 x i16> undef, <8 x i32> zeroinitializer
  %221 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %221, align 2
  %222 = getelementptr inbounds i16, i16* %215, i64 8
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %223, align 2
  %224 = getelementptr inbounds i16, i16* %215, i64 16
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %225, align 2
  %226 = getelementptr inbounds i16, i16* %215, i64 24
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %227, align 2
  %228 = getelementptr inbounds i16, i16* %215, i64 32
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds i16, i16* %215, i64 40
  %231 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %231, align 2
  %232 = getelementptr inbounds i16, i16* %215, i64 48
  %233 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %233, align 2
  %234 = getelementptr inbounds i16, i16* %215, i64 56
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %235, align 2
  %236 = getelementptr inbounds i16, i16* %215, i64 %5
  %237 = getelementptr inbounds i8, i8* %3, i64 22
  %238 = bitcast i8* %237 to i16*
  %239 = load i16, i16* %238, align 2
  %240 = insertelement <8 x i16> undef, i16 %239, i32 0
  %241 = shufflevector <8 x i16> %240, <8 x i16> undef, <8 x i32> zeroinitializer
  %242 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %242, align 2
  %243 = getelementptr inbounds i16, i16* %236, i64 8
  %244 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %244, align 2
  %245 = getelementptr inbounds i16, i16* %236, i64 16
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %246, align 2
  %247 = getelementptr inbounds i16, i16* %236, i64 24
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %248, align 2
  %249 = getelementptr inbounds i16, i16* %236, i64 32
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %250, align 2
  %251 = getelementptr inbounds i16, i16* %236, i64 40
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %252, align 2
  %253 = getelementptr inbounds i16, i16* %236, i64 48
  %254 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %254, align 2
  %255 = getelementptr inbounds i16, i16* %236, i64 56
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %256, align 2
  %257 = getelementptr inbounds i16, i16* %236, i64 %5
  %258 = getelementptr inbounds i8, i8* %3, i64 24
  %259 = bitcast i8* %258 to i16*
  %260 = load i16, i16* %259, align 2
  %261 = insertelement <8 x i16> undef, i16 %260, i32 0
  %262 = shufflevector <8 x i16> %261, <8 x i16> undef, <8 x i32> zeroinitializer
  %263 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %263, align 2
  %264 = getelementptr inbounds i16, i16* %257, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %265, align 2
  %266 = getelementptr inbounds i16, i16* %257, i64 16
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %267, align 2
  %268 = getelementptr inbounds i16, i16* %257, i64 24
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds i16, i16* %257, i64 32
  %271 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %271, align 2
  %272 = getelementptr inbounds i16, i16* %257, i64 40
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %273, align 2
  %274 = getelementptr inbounds i16, i16* %257, i64 48
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %275, align 2
  %276 = getelementptr inbounds i16, i16* %257, i64 56
  %277 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %277, align 2
  %278 = getelementptr inbounds i16, i16* %257, i64 %5
  %279 = getelementptr inbounds i8, i8* %3, i64 26
  %280 = bitcast i8* %279 to i16*
  %281 = load i16, i16* %280, align 2
  %282 = insertelement <8 x i16> undef, i16 %281, i32 0
  %283 = shufflevector <8 x i16> %282, <8 x i16> undef, <8 x i32> zeroinitializer
  %284 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %284, align 2
  %285 = getelementptr inbounds i16, i16* %278, i64 8
  %286 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %286, align 2
  %287 = getelementptr inbounds i16, i16* %278, i64 16
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %288, align 2
  %289 = getelementptr inbounds i16, i16* %278, i64 24
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %290, align 2
  %291 = getelementptr inbounds i16, i16* %278, i64 32
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %292, align 2
  %293 = getelementptr inbounds i16, i16* %278, i64 40
  %294 = bitcast i16* %293 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %294, align 2
  %295 = getelementptr inbounds i16, i16* %278, i64 48
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %296, align 2
  %297 = getelementptr inbounds i16, i16* %278, i64 56
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %283, <8 x i16>* %298, align 2
  %299 = getelementptr inbounds i16, i16* %278, i64 %5
  %300 = getelementptr inbounds i8, i8* %3, i64 28
  %301 = bitcast i8* %300 to i16*
  %302 = load i16, i16* %301, align 2
  %303 = insertelement <8 x i16> undef, i16 %302, i32 0
  %304 = shufflevector <8 x i16> %303, <8 x i16> undef, <8 x i32> zeroinitializer
  %305 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %305, align 2
  %306 = getelementptr inbounds i16, i16* %299, i64 8
  %307 = bitcast i16* %306 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %307, align 2
  %308 = getelementptr inbounds i16, i16* %299, i64 16
  %309 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %309, align 2
  %310 = getelementptr inbounds i16, i16* %299, i64 24
  %311 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %311, align 2
  %312 = getelementptr inbounds i16, i16* %299, i64 32
  %313 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %313, align 2
  %314 = getelementptr inbounds i16, i16* %299, i64 40
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %315, align 2
  %316 = getelementptr inbounds i16, i16* %299, i64 48
  %317 = bitcast i16* %316 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %317, align 2
  %318 = getelementptr inbounds i16, i16* %299, i64 56
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %319, align 2
  %320 = getelementptr inbounds i16, i16* %299, i64 %5
  %321 = getelementptr inbounds i8, i8* %3, i64 30
  %322 = bitcast i8* %321 to i16*
  %323 = load i16, i16* %322, align 2
  %324 = insertelement <8 x i16> undef, i16 %323, i32 0
  %325 = shufflevector <8 x i16> %324, <8 x i16> undef, <8 x i32> zeroinitializer
  %326 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %326, align 2
  %327 = getelementptr inbounds i16, i16* %320, i64 8
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %328, align 2
  %329 = getelementptr inbounds i16, i16* %320, i64 16
  %330 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %330, align 2
  %331 = getelementptr inbounds i16, i16* %320, i64 24
  %332 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %332, align 2
  %333 = getelementptr inbounds i16, i16* %320, i64 32
  %334 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %334, align 2
  %335 = getelementptr inbounds i16, i16* %320, i64 40
  %336 = bitcast i16* %335 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %336, align 2
  %337 = getelementptr inbounds i16, i16* %320, i64 48
  %338 = bitcast i16* %337 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %338, align 2
  %339 = getelementptr inbounds i16, i16* %320, i64 56
  %340 = bitcast i16* %339 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %340, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 16
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 64
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 126
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 30
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 128
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %26 = getelementptr inbounds i8, i8* %2, i64 32
  %27 = bitcast i8* %26 to <8 x i16>*
  %28 = mul nuw nsw <8 x i32> %20, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150>
  %29 = getelementptr inbounds i8, i8* %2, i64 48
  %30 = bitcast i8* %29 to <8 x i16>*
  %31 = mul nuw nsw <8 x i32> %20, <i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %32 = getelementptr inbounds i8, i8* %2, i64 64
  %33 = bitcast i8* %32 to <8 x i16>*
  %34 = mul nuw nsw <8 x i32> %20, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215>
  %35 = getelementptr inbounds i8, i8* %2, i64 80
  %36 = bitcast i8* %35 to <8 x i16>*
  %37 = mul nuw nsw <8 x i32> %20, <i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %38 = getelementptr inbounds i8, i8* %2, i64 96
  %39 = bitcast i8* %38 to <8 x i16>*
  %40 = mul nuw nsw <8 x i32> %20, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248>
  %41 = getelementptr inbounds i8, i8* %2, i64 112
  %42 = bitcast i8* %41 to <8 x i16>*
  %43 = mul nuw nsw <8 x i32> %20, <i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  br label %44

44:                                               ; preds = %195, %4
  %45 = phi i64 [ 0, %4 ], [ %197, %195 ]
  %46 = phi i16* [ %13, %4 ], [ %196, %195 ]
  %47 = mul i64 %17, %45
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = add i64 %47, 128
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %45
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds i16, i16* %6, i64 %45
  %55 = sub i8 0, %52
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %56, %15
  %58 = add nuw nsw i32 %57, 256
  %59 = shl nuw nsw i64 %45, 1
  %60 = or i64 %59, 1
  %61 = getelementptr i8, i8* %3, i64 %60
  %62 = icmp ult i8* %48, %18
  %63 = icmp ugt i8* %50, %2
  %64 = and i1 %62, %63
  %65 = bitcast i16* %54 to i8*
  %66 = icmp ult i8* %48, %61
  %67 = icmp ugt i8* %50, %65
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  br i1 %69, label %199, label %70

70:                                               ; preds = %44
  %71 = insertelement <8 x i32> undef, i32 %53, i32 0
  %72 = shufflevector <8 x i32> %71, <8 x i32> undef, <8 x i32> zeroinitializer
  %73 = insertelement <8 x i32> undef, i32 %58, i32 0
  %74 = shufflevector <8 x i32> %73, <8 x i32> undef, <8 x i32> zeroinitializer
  %75 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !789
  %76 = zext <8 x i16> %75 to <8 x i32>
  %77 = mul nuw nsw <8 x i32> %72, %76
  %78 = load i16, i16* %54, align 2, !alias.scope !792
  %79 = insertelement <8 x i16> undef, i16 %78, i32 0
  %80 = shufflevector <8 x i16> %79, <8 x i16> undef, <8 x i32> zeroinitializer
  %81 = zext <8 x i16> %80 to <8 x i32>
  %82 = mul nuw nsw <8 x i32> %81, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203>
  %83 = add nuw nsw <8 x i32> %74, %77
  %84 = add nuw nsw <8 x i32> %83, %22
  %85 = add nuw nsw <8 x i32> %84, %82
  %86 = lshr <8 x i32> %85, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %88, align 2, !alias.scope !794, !noalias !796
  %89 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !789
  %90 = zext <8 x i16> %89 to <8 x i32>
  %91 = mul nuw nsw <8 x i32> %72, %90
  %92 = load i16, i16* %54, align 2, !alias.scope !792
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = zext <8 x i16> %94 to <8 x i32>
  %96 = mul nuw nsw <8 x i32> %95, <i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %97 = add nuw nsw <8 x i32> %74, %91
  %98 = add nuw nsw <8 x i32> %97, %25
  %99 = add nuw nsw <8 x i32> %98, %96
  %100 = lshr <8 x i32> %99, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %101 = trunc <8 x i32> %100 to <8 x i16>
  %102 = getelementptr inbounds i16, i16* %46, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %103, align 2, !alias.scope !794, !noalias !796
  %104 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !789
  %105 = zext <8 x i16> %104 to <8 x i32>
  %106 = mul nuw nsw <8 x i32> %72, %105
  %107 = load i16, i16* %54, align 2, !alias.scope !792
  %108 = insertelement <8 x i16> undef, i16 %107, i32 0
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> zeroinitializer
  %110 = zext <8 x i16> %109 to <8 x i32>
  %111 = mul nuw nsw <8 x i32> %110, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106>
  %112 = add nuw nsw <8 x i32> %74, %106
  %113 = add nuw nsw <8 x i32> %112, %28
  %114 = add nuw nsw <8 x i32> %113, %111
  %115 = lshr <8 x i32> %114, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %116 = trunc <8 x i32> %115 to <8 x i16>
  %117 = getelementptr inbounds i16, i16* %46, i64 16
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %118, align 2, !alias.scope !794, !noalias !796
  %119 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !789
  %120 = zext <8 x i16> %119 to <8 x i32>
  %121 = mul nuw nsw <8 x i32> %72, %120
  %122 = load i16, i16* %54, align 2, !alias.scope !792
  %123 = insertelement <8 x i16> undef, i16 %122, i32 0
  %124 = shufflevector <8 x i16> %123, <8 x i16> undef, <8 x i32> zeroinitializer
  %125 = zext <8 x i16> %124 to <8 x i32>
  %126 = mul nuw nsw <8 x i32> %125, <i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %127 = add nuw nsw <8 x i32> %74, %121
  %128 = add nuw nsw <8 x i32> %127, %31
  %129 = add nuw nsw <8 x i32> %128, %126
  %130 = lshr <8 x i32> %129, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %131 = trunc <8 x i32> %130 to <8 x i16>
  %132 = getelementptr inbounds i16, i16* %46, i64 24
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %133, align 2, !alias.scope !794, !noalias !796
  %134 = load <8 x i16>, <8 x i16>* %33, align 2, !alias.scope !789
  %135 = zext <8 x i16> %134 to <8 x i32>
  %136 = mul nuw nsw <8 x i32> %72, %135
  %137 = load i16, i16* %54, align 2, !alias.scope !792
  %138 = insertelement <8 x i16> undef, i16 %137, i32 0
  %139 = shufflevector <8 x i16> %138, <8 x i16> undef, <8 x i32> zeroinitializer
  %140 = zext <8 x i16> %139 to <8 x i32>
  %141 = mul nuw nsw <8 x i32> %140, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41>
  %142 = add nuw nsw <8 x i32> %74, %136
  %143 = add nuw nsw <8 x i32> %142, %34
  %144 = add nuw nsw <8 x i32> %143, %141
  %145 = lshr <8 x i32> %144, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %146 = trunc <8 x i32> %145 to <8 x i16>
  %147 = getelementptr inbounds i16, i16* %46, i64 32
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %148, align 2, !alias.scope !794, !noalias !796
  %149 = load <8 x i16>, <8 x i16>* %36, align 2, !alias.scope !789
  %150 = zext <8 x i16> %149 to <8 x i32>
  %151 = mul nuw nsw <8 x i32> %72, %150
  %152 = load i16, i16* %54, align 2, !alias.scope !792
  %153 = insertelement <8 x i16> undef, i16 %152, i32 0
  %154 = shufflevector <8 x i16> %153, <8 x i16> undef, <8 x i32> zeroinitializer
  %155 = zext <8 x i16> %154 to <8 x i32>
  %156 = mul nuw nsw <8 x i32> %155, <i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %157 = add nuw nsw <8 x i32> %74, %151
  %158 = add nuw nsw <8 x i32> %157, %37
  %159 = add nuw nsw <8 x i32> %158, %156
  %160 = lshr <8 x i32> %159, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %161 = trunc <8 x i32> %160 to <8 x i16>
  %162 = getelementptr inbounds i16, i16* %46, i64 40
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %163, align 2, !alias.scope !794, !noalias !796
  %164 = load <8 x i16>, <8 x i16>* %39, align 2, !alias.scope !789
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %72, %165
  %167 = load i16, i16* %54, align 2, !alias.scope !792
  %168 = insertelement <8 x i16> undef, i16 %167, i32 0
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> zeroinitializer
  %170 = zext <8 x i16> %169 to <8 x i32>
  %171 = mul nuw nsw <8 x i32> %170, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8>
  %172 = add nuw nsw <8 x i32> %74, %166
  %173 = add nuw nsw <8 x i32> %172, %40
  %174 = add nuw nsw <8 x i32> %173, %171
  %175 = lshr <8 x i32> %174, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %176 = trunc <8 x i32> %175 to <8 x i16>
  %177 = getelementptr inbounds i16, i16* %46, i64 48
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %178, align 2, !alias.scope !794, !noalias !796
  %179 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !789
  %180 = zext <8 x i16> %179 to <8 x i32>
  %181 = mul nuw nsw <8 x i32> %72, %180
  %182 = load i16, i16* %54, align 2, !alias.scope !792
  %183 = insertelement <8 x i16> undef, i16 %182, i32 0
  %184 = shufflevector <8 x i16> %183, <8 x i16> undef, <8 x i32> zeroinitializer
  %185 = zext <8 x i16> %184 to <8 x i32>
  %186 = mul nuw nsw <8 x i32> %185, <i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %187 = add nuw nsw <8 x i32> %74, %181
  %188 = add nuw nsw <8 x i32> %187, %43
  %189 = add nuw nsw <8 x i32> %188, %186
  %190 = lshr <8 x i32> %189, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %191 = trunc <8 x i32> %190 to <8 x i16>
  %192 = getelementptr inbounds i16, i16* %46, i64 56
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %193, align 2, !alias.scope !794, !noalias !796
  br label %195

194:                                              ; preds = %195
  ret void

195:                                              ; preds = %199, %70
  %196 = getelementptr inbounds i16, i16* %46, i64 %14
  %197 = add nuw nsw i64 %45, 1
  %198 = icmp eq i64 %197, 16
  br i1 %198, label %194, label %44

199:                                              ; preds = %44, %199
  %200 = phi i64 [ %220, %199 ], [ 0, %44 ]
  %201 = getelementptr inbounds i16, i16* %5, i64 %200
  %202 = load i16, i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = mul nuw nsw i32 %203, %53
  %205 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %200
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = load i16, i16* %54, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nuw nsw i32 %209, %207
  %211 = sub i8 0, %206
  %212 = zext i8 %211 to i32
  %213 = mul nuw nsw i32 %212, %16
  %214 = add nuw nsw i32 %58, %204
  %215 = add nuw nsw i32 %214, %213
  %216 = add nuw nsw i32 %215, %210
  %217 = lshr i32 %216, 9
  %218 = trunc i32 %217 to i16
  %219 = getelementptr inbounds i16, i16* %46, i64 %200
  store i16 %218, i16* %219, align 2
  %220 = add nuw nsw i64 %200, 1
  %221 = icmp eq i64 %220, 64
  br i1 %221, label %195, label %199, !llvm.loop !797
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 30
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = getelementptr i8, i8* %2, i64 128
  %14 = bitcast i8* %2 to <8 x i16>*
  %15 = getelementptr inbounds i8, i8* %2, i64 16
  %16 = bitcast i8* %15 to <8 x i16>*
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to <8 x i16>*
  %19 = getelementptr inbounds i8, i8* %2, i64 48
  %20 = bitcast i8* %19 to <8 x i16>*
  %21 = getelementptr inbounds i8, i8* %2, i64 64
  %22 = bitcast i8* %21 to <8 x i16>*
  %23 = getelementptr inbounds i8, i8* %2, i64 80
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = getelementptr inbounds i8, i8* %2, i64 96
  %26 = bitcast i8* %25 to <8 x i16>*
  %27 = getelementptr inbounds i8, i8* %2, i64 112
  %28 = bitcast i8* %27 to <8 x i16>*
  br label %29

29:                                               ; preds = %115, %4
  %30 = phi i64 [ 0, %4 ], [ %117, %115 ]
  %31 = phi i16* [ %9, %4 ], [ %116, %115 ]
  %32 = mul i64 %12, %30
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 12), i64 %30
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = sub i8 0, %34
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %37, %11
  %39 = add nuw nsw i32 %38, 128
  %40 = add i64 %32, 128
  %41 = getelementptr i8, i8* %0, i64 %40
  %42 = getelementptr i8, i8* %0, i64 %32
  %43 = icmp ult i8* %42, %13
  %44 = icmp ugt i8* %41, %2
  %45 = and i1 %43, %44
  br i1 %45, label %119, label %46

46:                                               ; preds = %29
  %47 = insertelement <8 x i32> undef, i32 %35, i32 0
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> zeroinitializer
  %49 = insertelement <8 x i32> undef, i32 %39, i32 0
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <8 x i32> zeroinitializer
  %51 = load <8 x i16>, <8 x i16>* %14, align 2, !alias.scope !798
  %52 = zext <8 x i16> %51 to <8 x i32>
  %53 = mul nuw nsw <8 x i32> %48, %52
  %54 = add nuw nsw <8 x i32> %50, %53
  %55 = lshr <8 x i32> %54, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !801, !noalias !798
  %58 = load <8 x i16>, <8 x i16>* %16, align 2, !alias.scope !798
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %48, %59
  %61 = add nuw nsw <8 x i32> %50, %60
  %62 = lshr <8 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %31, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !801, !noalias !798
  %66 = load <8 x i16>, <8 x i16>* %18, align 2, !alias.scope !798
  %67 = zext <8 x i16> %66 to <8 x i32>
  %68 = mul nuw nsw <8 x i32> %48, %67
  %69 = add nuw nsw <8 x i32> %50, %68
  %70 = lshr <8 x i32> %69, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %31, i64 16
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !801, !noalias !798
  %74 = load <8 x i16>, <8 x i16>* %20, align 2, !alias.scope !798
  %75 = zext <8 x i16> %74 to <8 x i32>
  %76 = mul nuw nsw <8 x i32> %48, %75
  %77 = add nuw nsw <8 x i32> %50, %76
  %78 = lshr <8 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %79 = trunc <8 x i32> %78 to <8 x i16>
  %80 = getelementptr inbounds i16, i16* %31, i64 24
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %81, align 2, !alias.scope !801, !noalias !798
  %82 = load <8 x i16>, <8 x i16>* %22, align 2, !alias.scope !798
  %83 = zext <8 x i16> %82 to <8 x i32>
  %84 = mul nuw nsw <8 x i32> %48, %83
  %85 = add nuw nsw <8 x i32> %50, %84
  %86 = lshr <8 x i32> %85, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %31, i64 32
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !801, !noalias !798
  %90 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !798
  %91 = zext <8 x i16> %90 to <8 x i32>
  %92 = mul nuw nsw <8 x i32> %48, %91
  %93 = add nuw nsw <8 x i32> %50, %92
  %94 = lshr <8 x i32> %93, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %95 = trunc <8 x i32> %94 to <8 x i16>
  %96 = getelementptr inbounds i16, i16* %31, i64 40
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %97, align 2, !alias.scope !801, !noalias !798
  %98 = load <8 x i16>, <8 x i16>* %26, align 2, !alias.scope !798
  %99 = zext <8 x i16> %98 to <8 x i32>
  %100 = mul nuw nsw <8 x i32> %48, %99
  %101 = add nuw nsw <8 x i32> %50, %100
  %102 = lshr <8 x i32> %101, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %31, i64 48
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !801, !noalias !798
  %106 = load <8 x i16>, <8 x i16>* %28, align 2, !alias.scope !798
  %107 = zext <8 x i16> %106 to <8 x i32>
  %108 = mul nuw nsw <8 x i32> %48, %107
  %109 = add nuw nsw <8 x i32> %50, %108
  %110 = lshr <8 x i32> %109, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %111 = trunc <8 x i32> %110 to <8 x i16>
  %112 = getelementptr inbounds i16, i16* %31, i64 56
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %113, align 2, !alias.scope !801, !noalias !798
  br label %115

114:                                              ; preds = %115
  ret void

115:                                              ; preds = %119, %46
  %116 = getelementptr inbounds i16, i16* %31, i64 %10
  %117 = add nuw nsw i64 %30, 1
  %118 = icmp eq i64 %117, 16
  br i1 %118, label %114, label %29

119:                                              ; preds = %29, %119
  %120 = phi i64 [ %138, %119 ], [ 0, %29 ]
  %121 = getelementptr inbounds i16, i16* %5, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %123, %35
  %125 = add nuw nsw i32 %39, %124
  %126 = lshr i32 %125, 8
  %127 = trunc i32 %126 to i16
  %128 = getelementptr inbounds i16, i16* %31, i64 %120
  store i16 %127, i16* %128, align 2
  %129 = or i64 %120, 1
  %130 = getelementptr inbounds i16, i16* %5, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = mul nuw nsw i32 %132, %35
  %134 = add nuw nsw i32 %39, %133
  %135 = lshr i32 %134, 8
  %136 = trunc i32 %135 to i16
  %137 = getelementptr inbounds i16, i16* %31, i64 %129
  store i16 %136, i16* %137, align 2
  %138 = add nuw nsw i64 %120, 2
  %139 = icmp eq i64 %138, 64
  br i1 %139, label %115, label %119, !llvm.loop !803
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi16EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 126
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = insertelement <8 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> zeroinitializer
  %15 = mul nuw nsw <8 x i32> %14, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53>
  %16 = add nuw nsw <8 x i32> %15, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %17 = mul nuw nsw <8 x i32> %14, <i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %18 = add nuw nsw <8 x i32> %17, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %19 = mul nuw nsw <8 x i32> %14, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150>
  %20 = add nuw nsw <8 x i32> %19, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %21 = mul nuw nsw <8 x i32> %14, <i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %22 = add nuw nsw <8 x i32> %21, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %23 = mul nuw nsw <8 x i32> %14, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215>
  %24 = add nuw nsw <8 x i32> %23, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %25 = mul nuw nsw <8 x i32> %14, <i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %26 = add nuw nsw <8 x i32> %25, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %27 = mul nuw nsw <8 x i32> %14, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248>
  %28 = add nuw nsw <8 x i32> %27, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %29 = mul nuw nsw <8 x i32> %14, <i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  %30 = add nuw nsw <8 x i32> %29, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %31

31:                                               ; preds = %127, %4
  %32 = phi i64 [ 0, %4 ], [ %129, %127 ]
  %33 = phi i16* [ %9, %4 ], [ %128, %127 ]
  %34 = mul i64 %12, %32
  %35 = getelementptr inbounds i16, i16* %5, i64 %32
  %36 = shl nuw nsw i64 %32, 1
  %37 = or i64 %36, 1
  %38 = getelementptr i8, i8* %3, i64 %37
  %39 = add i64 %34, 128
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = getelementptr i8, i8* %0, i64 %34
  %42 = bitcast i16* %35 to i8*
  %43 = icmp ult i8* %41, %38
  %44 = icmp ugt i8* %40, %42
  %45 = and i1 %43, %44
  br i1 %45, label %131, label %46

46:                                               ; preds = %31
  %47 = load i16, i16* %35, align 2, !alias.scope !804
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = zext <8 x i16> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %50, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203>
  %52 = add nuw nsw <8 x i32> %16, %51
  %53 = lshr <8 x i32> %52, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %54 = trunc <8 x i32> %53 to <8 x i16>
  %55 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 2, !alias.scope !807, !noalias !804
  %56 = load i16, i16* %35, align 2, !alias.scope !804
  %57 = insertelement <8 x i16> undef, i16 %56, i32 0
  %58 = shufflevector <8 x i16> %57, <8 x i16> undef, <8 x i32> zeroinitializer
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %59, <i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %61 = add nuw nsw <8 x i32> %18, %60
  %62 = lshr <8 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %33, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !807, !noalias !804
  %66 = load i16, i16* %35, align 2, !alias.scope !804
  %67 = insertelement <8 x i16> undef, i16 %66, i32 0
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> zeroinitializer
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %69, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106>
  %71 = add nuw nsw <8 x i32> %20, %70
  %72 = lshr <8 x i32> %71, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !807, !noalias !804
  %76 = load i16, i16* %35, align 2, !alias.scope !804
  %77 = insertelement <8 x i16> undef, i16 %76, i32 0
  %78 = shufflevector <8 x i16> %77, <8 x i16> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i16> %78 to <8 x i32>
  %80 = mul nuw nsw <8 x i32> %79, <i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %81 = add nuw nsw <8 x i32> %22, %80
  %82 = lshr <8 x i32> %81, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %83 = trunc <8 x i32> %82 to <8 x i16>
  %84 = getelementptr inbounds i16, i16* %33, i64 24
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %85, align 2, !alias.scope !807, !noalias !804
  %86 = load i16, i16* %35, align 2, !alias.scope !804
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = zext <8 x i16> %88 to <8 x i32>
  %90 = mul nuw nsw <8 x i32> %89, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41>
  %91 = add nuw nsw <8 x i32> %24, %90
  %92 = lshr <8 x i32> %91, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %93 = trunc <8 x i32> %92 to <8 x i16>
  %94 = getelementptr inbounds i16, i16* %33, i64 32
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %95, align 2, !alias.scope !807, !noalias !804
  %96 = load i16, i16* %35, align 2, !alias.scope !804
  %97 = insertelement <8 x i16> undef, i16 %96, i32 0
  %98 = shufflevector <8 x i16> %97, <8 x i16> undef, <8 x i32> zeroinitializer
  %99 = zext <8 x i16> %98 to <8 x i32>
  %100 = mul nuw nsw <8 x i32> %99, <i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %101 = add nuw nsw <8 x i32> %26, %100
  %102 = lshr <8 x i32> %101, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 40
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !807, !noalias !804
  %106 = load i16, i16* %35, align 2, !alias.scope !804
  %107 = insertelement <8 x i16> undef, i16 %106, i32 0
  %108 = shufflevector <8 x i16> %107, <8 x i16> undef, <8 x i32> zeroinitializer
  %109 = zext <8 x i16> %108 to <8 x i32>
  %110 = mul nuw nsw <8 x i32> %109, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8>
  %111 = add nuw nsw <8 x i32> %28, %110
  %112 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %113 = trunc <8 x i32> %112 to <8 x i16>
  %114 = getelementptr inbounds i16, i16* %33, i64 48
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %115, align 2, !alias.scope !807, !noalias !804
  %116 = load i16, i16* %35, align 2, !alias.scope !804
  %117 = insertelement <8 x i16> undef, i16 %116, i32 0
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <8 x i32> zeroinitializer
  %119 = zext <8 x i16> %118 to <8 x i32>
  %120 = mul nuw nsw <8 x i32> %119, <i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %121 = add nuw nsw <8 x i32> %30, %120
  %122 = lshr <8 x i32> %121, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %123 = trunc <8 x i32> %122 to <8 x i16>
  %124 = getelementptr inbounds i16, i16* %33, i64 56
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %125, align 2, !alias.scope !807, !noalias !804
  br label %127

126:                                              ; preds = %127
  ret void

127:                                              ; preds = %131, %46
  %128 = getelementptr inbounds i16, i16* %33, i64 %10
  %129 = add nuw nsw i64 %32, 1
  %130 = icmp eq i64 %129, 16
  br i1 %130, label %126, label %31

131:                                              ; preds = %31, %131
  %132 = phi i64 [ %162, %131 ], [ 0, %31 ]
  %133 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %132
  %134 = load i8, i8* %133, align 2
  %135 = zext i8 %134 to i32
  %136 = load i16, i16* %35, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %137, %135
  %139 = sub i8 0, %134
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %140, %11
  %142 = add nuw nsw i32 %141, 128
  %143 = add nuw nsw i32 %142, %138
  %144 = lshr i32 %143, 8
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds i16, i16* %33, i64 %132
  store i16 %145, i16* %146, align 2
  %147 = or i64 %132, 1
  %148 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = load i16, i16* %35, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %152, %150
  %154 = sub i8 0, %149
  %155 = zext i8 %154 to i32
  %156 = mul nuw nsw i32 %155, %11
  %157 = add nuw nsw i32 %156, 128
  %158 = add nuw nsw i32 %157, %153
  %159 = lshr i32 %158, 8
  %160 = trunc i32 %159 to i16
  %161 = getelementptr inbounds i16, i16* %33, i64 %147
  store i16 %160, i16* %161, align 2
  %162 = add nuw nsw i64 %132, 2
  %163 = icmp eq i64 %162, 64
  br i1 %163, label %127, label %131, !llvm.loop !809
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi32ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i32 [ 0, %4 ], [ %42, %7 ]
  %9 = phi i16* [ %6, %4 ], [ %41, %7 ]
  %10 = bitcast i16* %9 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %10, align 2
  %11 = getelementptr inbounds i16, i16* %9, i64 8
  %12 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %12, align 2
  %13 = getelementptr inbounds i16, i16* %9, i64 16
  %14 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %14, align 2
  %15 = getelementptr inbounds i16, i16* %9, i64 24
  %16 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %9, i64 32
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %9, i64 40
  %20 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %9, i64 48
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %9, i64 56
  %24 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds i16, i16* %9, i64 %5
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds i16, i16* %25, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds i16, i16* %25, i64 16
  %30 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %25, i64 24
  %32 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %25, i64 32
  %34 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %25, i64 40
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds i16, i16* %25, i64 48
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %25, i64 56
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds i16, i16* %25, i64 %5
  %42 = add nuw nsw i32 %8, 2
  %43 = icmp eq i32 %42, 32
  br i1 %43, label %44, label %7

44:                                               ; preds = %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to <4 x i16>*
  %6 = load <4 x i16>, <4 x i16>* %5, align 2
  %7 = zext <4 x i16> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = zext <4 x i16> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 16
  %15 = bitcast i8* %14 to <4 x i16>*
  %16 = load <4 x i16>, <4 x i16>* %15, align 2
  %17 = zext <4 x i16> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 24
  %20 = bitcast i8* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 32
  %25 = bitcast i8* %24 to <4 x i16>*
  %26 = load <4 x i16>, <4 x i16>* %25, align 2
  %27 = zext <4 x i16> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 40
  %30 = bitcast i8* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 48
  %35 = bitcast i8* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 56
  %40 = bitcast i8* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 64
  %45 = bitcast i8* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 72
  %50 = bitcast i8* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 80
  %55 = bitcast i8* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 88
  %60 = bitcast i8* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 96
  %65 = bitcast i8* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 104
  %70 = bitcast i8* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 112
  %75 = bitcast i8* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = zext <4 x i16> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 120
  %80 = bitcast i8* %79 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = bitcast i8* %0 to i16*
  %91 = lshr i64 %1, 1
  %92 = trunc i32 %89 to i16
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = insertelement <8 x i16> undef, i16 %92, i32 0
  %96 = shufflevector <8 x i16> %95, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %98

97:                                               ; preds = %98
  ret void

98:                                               ; preds = %98, %4
  %99 = phi i32 [ 0, %4 ], [ %133, %98 ]
  %100 = phi i16* [ %90, %4 ], [ %132, %98 ]
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %100, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i16, i16* %100, i64 16
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i16, i16* %100, i64 24
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %100, i64 32
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %100, i64 40
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %100, i64 48
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %100, i64 56
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %100, i64 %91
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %116, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %116, i64 16
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %116, i64 24
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %116, i64 32
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %116, i64 40
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %116, i64 48
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i16, i16* %116, i64 56
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %116, i64 %91
  %133 = add nuw nsw i32 %99, 2
  %134 = icmp eq i32 %133, 32
  br i1 %134, label %97, label %98
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = add nuw nsw i32 %7, 16
  %9 = getelementptr inbounds i8, i8* %3, i64 2
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = add nuw nsw i32 %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 6
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 10
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nuw nsw i32 %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 12
  %35 = bitcast i8* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = add nuw nsw i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 14
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 16
  %45 = bitcast i8* %44 to i16*
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 18
  %50 = bitcast i8* %49 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 20
  %55 = bitcast i8* %54 to i16*
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = add nuw nsw i32 %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 22
  %60 = bitcast i8* %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 26
  %70 = bitcast i8* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 28
  %75 = bitcast i8* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nuw nsw i32 %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 30
  %80 = bitcast i8* %79 to i16*
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %3, i64 32
  %85 = bitcast i8* %84 to i16*
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %83, %87
  %89 = getelementptr inbounds i8, i8* %3, i64 34
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %3, i64 36
  %95 = bitcast i8* %94 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %93, %97
  %99 = getelementptr inbounds i8, i8* %3, i64 38
  %100 = bitcast i8* %99 to i16*
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, %102
  %104 = getelementptr inbounds i8, i8* %3, i64 40
  %105 = bitcast i8* %104 to i16*
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %103, %107
  %109 = getelementptr inbounds i8, i8* %3, i64 42
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = add nuw nsw i32 %108, %112
  %114 = getelementptr inbounds i8, i8* %3, i64 44
  %115 = bitcast i8* %114 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = add nuw nsw i32 %113, %117
  %119 = getelementptr inbounds i8, i8* %3, i64 46
  %120 = bitcast i8* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add nuw nsw i32 %118, %122
  %124 = getelementptr inbounds i8, i8* %3, i64 48
  %125 = bitcast i8* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %3, i64 50
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %3, i64 52
  %135 = bitcast i8* %134 to i16*
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = add nuw nsw i32 %133, %137
  %139 = getelementptr inbounds i8, i8* %3, i64 54
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nuw nsw i32 %138, %142
  %144 = getelementptr inbounds i8, i8* %3, i64 56
  %145 = bitcast i8* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %3, i64 58
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = add nuw nsw i32 %148, %152
  %154 = getelementptr inbounds i8, i8* %3, i64 60
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %3, i64 62
  %160 = bitcast i8* %159 to i16*
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %158, %162
  %164 = lshr i32 %163, 5
  %165 = bitcast i8* %0 to i16*
  %166 = lshr i64 %1, 1
  %167 = trunc i32 %164 to i16
  %168 = insertelement <8 x i16> undef, i16 %167, i32 0
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> zeroinitializer
  %170 = insertelement <8 x i16> undef, i16 %167, i32 0
  %171 = shufflevector <8 x i16> %170, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %173

172:                                              ; preds = %173
  ret void

173:                                              ; preds = %173, %4
  %174 = phi i32 [ 0, %4 ], [ %208, %173 ]
  %175 = phi i16* [ %165, %4 ], [ %207, %173 ]
  %176 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i16, i16* %175, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds i16, i16* %175, i64 16
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds i16, i16* %175, i64 24
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %182, align 2
  %183 = getelementptr inbounds i16, i16* %175, i64 32
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i16, i16* %175, i64 40
  %186 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %186, align 2
  %187 = getelementptr inbounds i16, i16* %175, i64 48
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds i16, i16* %175, i64 56
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds i16, i16* %175, i64 %166
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %191, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %194, align 2
  %195 = getelementptr inbounds i16, i16* %191, i64 16
  %196 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %196, align 2
  %197 = getelementptr inbounds i16, i16* %191, i64 24
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %191, i64 32
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %200, align 2
  %201 = getelementptr inbounds i16, i16* %191, i64 40
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %191, i64 48
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds i16, i16* %191, i64 56
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %206, align 2
  %207 = getelementptr inbounds i16, i16* %191, i64 %166
  %208 = add nuw nsw i32 %174, 2
  %209 = icmp eq i32 %208, 32
  br i1 %209, label %172, label %173
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to <4 x i16>*
  %6 = load <4 x i16>, <4 x i16>* %5, align 2
  %7 = zext <4 x i16> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 48, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = zext <4 x i16> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 16
  %15 = bitcast i8* %14 to <4 x i16>*
  %16 = load <4 x i16>, <4 x i16>* %15, align 2
  %17 = zext <4 x i16> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 24
  %20 = bitcast i8* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 32
  %25 = bitcast i8* %24 to <4 x i16>*
  %26 = load <4 x i16>, <4 x i16>* %25, align 2
  %27 = zext <4 x i16> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 40
  %30 = bitcast i8* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 48
  %35 = bitcast i8* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 56
  %40 = bitcast i8* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 64
  %45 = bitcast i8* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 72
  %50 = bitcast i8* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 80
  %55 = bitcast i8* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 88
  %60 = bitcast i8* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 96
  %65 = bitcast i8* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 104
  %70 = bitcast i8* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 112
  %75 = bitcast i8* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = zext <4 x i16> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 120
  %80 = bitcast i8* %79 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = bitcast i8* %3 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %88, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 2
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = add nuw nsw i32 %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 4
  %99 = bitcast i8* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nuw nsw i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 6
  %104 = bitcast i8* %103 to i16*
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = add nuw nsw i32 %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 8
  %109 = bitcast i8* %108 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = add nuw nsw i32 %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 10
  %114 = bitcast i8* %113 to i16*
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = add nuw nsw i32 %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 12
  %119 = bitcast i8* %118 to i16*
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = add nuw nsw i32 %117, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 14
  %124 = bitcast i8* %123 to i16*
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add nuw nsw i32 %122, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 16
  %129 = bitcast i8* %128 to i16*
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = add nuw nsw i32 %127, %131
  %133 = getelementptr inbounds i8, i8* %3, i64 18
  %134 = bitcast i8* %133 to i16*
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = add nuw nsw i32 %132, %136
  %138 = getelementptr inbounds i8, i8* %3, i64 20
  %139 = bitcast i8* %138 to i16*
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = add nuw nsw i32 %137, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 22
  %144 = bitcast i8* %143 to i16*
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = add nuw nsw i32 %142, %146
  %148 = getelementptr inbounds i8, i8* %3, i64 24
  %149 = bitcast i8* %148 to i16*
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = add nuw nsw i32 %147, %151
  %153 = getelementptr inbounds i8, i8* %3, i64 26
  %154 = bitcast i8* %153 to i16*
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = add nuw nsw i32 %152, %156
  %158 = getelementptr inbounds i8, i8* %3, i64 28
  %159 = bitcast i8* %158 to i16*
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = add nuw nsw i32 %157, %161
  %163 = getelementptr inbounds i8, i8* %3, i64 30
  %164 = bitcast i8* %163 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = add nuw nsw i32 %162, %166
  %168 = getelementptr inbounds i8, i8* %3, i64 32
  %169 = bitcast i8* %168 to i16*
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nuw nsw i32 %167, %171
  %173 = getelementptr inbounds i8, i8* %3, i64 34
  %174 = bitcast i8* %173 to i16*
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = add nuw nsw i32 %172, %176
  %178 = getelementptr inbounds i8, i8* %3, i64 36
  %179 = bitcast i8* %178 to i16*
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = add nuw nsw i32 %177, %181
  %183 = getelementptr inbounds i8, i8* %3, i64 38
  %184 = bitcast i8* %183 to i16*
  %185 = load i16, i16* %184, align 2
  %186 = zext i16 %185 to i32
  %187 = add nuw nsw i32 %182, %186
  %188 = getelementptr inbounds i8, i8* %3, i64 40
  %189 = bitcast i8* %188 to i16*
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add nuw nsw i32 %187, %191
  %193 = getelementptr inbounds i8, i8* %3, i64 42
  %194 = bitcast i8* %193 to i16*
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %192, %196
  %198 = getelementptr inbounds i8, i8* %3, i64 44
  %199 = bitcast i8* %198 to i16*
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = add nuw nsw i32 %197, %201
  %203 = getelementptr inbounds i8, i8* %3, i64 46
  %204 = bitcast i8* %203 to i16*
  %205 = load i16, i16* %204, align 2
  %206 = zext i16 %205 to i32
  %207 = add nuw nsw i32 %202, %206
  %208 = getelementptr inbounds i8, i8* %3, i64 48
  %209 = bitcast i8* %208 to i16*
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i32
  %212 = add nuw nsw i32 %207, %211
  %213 = getelementptr inbounds i8, i8* %3, i64 50
  %214 = bitcast i8* %213 to i16*
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = add nuw nsw i32 %212, %216
  %218 = getelementptr inbounds i8, i8* %3, i64 52
  %219 = bitcast i8* %218 to i16*
  %220 = load i16, i16* %219, align 2
  %221 = zext i16 %220 to i32
  %222 = add nuw nsw i32 %217, %221
  %223 = getelementptr inbounds i8, i8* %3, i64 54
  %224 = bitcast i8* %223 to i16*
  %225 = load i16, i16* %224, align 2
  %226 = zext i16 %225 to i32
  %227 = add nuw nsw i32 %222, %226
  %228 = getelementptr inbounds i8, i8* %3, i64 56
  %229 = bitcast i8* %228 to i16*
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = add nuw nsw i32 %227, %231
  %233 = getelementptr inbounds i8, i8* %3, i64 58
  %234 = bitcast i8* %233 to i16*
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = add nuw nsw i32 %232, %236
  %238 = getelementptr inbounds i8, i8* %3, i64 60
  %239 = bitcast i8* %238 to i16*
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = add nuw nsw i32 %237, %241
  %243 = getelementptr inbounds i8, i8* %3, i64 62
  %244 = bitcast i8* %243 to i16*
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = add nuw nsw i32 %242, %246
  %248 = udiv i32 %247, 96
  %249 = bitcast i8* %0 to i16*
  %250 = lshr i64 %1, 1
  %251 = trunc i32 %248 to i16
  %252 = insertelement <8 x i16> undef, i16 %251, i32 0
  %253 = shufflevector <8 x i16> %252, <8 x i16> undef, <8 x i32> zeroinitializer
  %254 = insertelement <8 x i16> undef, i16 %251, i32 0
  %255 = shufflevector <8 x i16> %254, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %257

256:                                              ; preds = %257
  ret void

257:                                              ; preds = %257, %4
  %258 = phi i32 [ 0, %4 ], [ %292, %257 ]
  %259 = phi i16* [ %249, %4 ], [ %291, %257 ]
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %260, align 2
  %261 = getelementptr inbounds i16, i16* %259, i64 8
  %262 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %262, align 2
  %263 = getelementptr inbounds i16, i16* %259, i64 16
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %264, align 2
  %265 = getelementptr inbounds i16, i16* %259, i64 24
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %266, align 2
  %267 = getelementptr inbounds i16, i16* %259, i64 32
  %268 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %268, align 2
  %269 = getelementptr inbounds i16, i16* %259, i64 40
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %270, align 2
  %271 = getelementptr inbounds i16, i16* %259, i64 48
  %272 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %272, align 2
  %273 = getelementptr inbounds i16, i16* %259, i64 56
  %274 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %274, align 2
  %275 = getelementptr inbounds i16, i16* %259, i64 %250
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %276, align 2
  %277 = getelementptr inbounds i16, i16* %275, i64 8
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %278, align 2
  %279 = getelementptr inbounds i16, i16* %275, i64 16
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %280, align 2
  %281 = getelementptr inbounds i16, i16* %275, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %282, align 2
  %283 = getelementptr inbounds i16, i16* %275, i64 32
  %284 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %284, align 2
  %285 = getelementptr inbounds i16, i16* %275, i64 40
  %286 = bitcast i16* %285 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %286, align 2
  %287 = getelementptr inbounds i16, i16* %275, i64 48
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %288, align 2
  %289 = getelementptr inbounds i16, i16* %275, i64 56
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %290, align 2
  %291 = getelementptr inbounds i16, i16* %275, i64 %250
  %292 = add nuw nsw i32 %258, 2
  %293 = icmp eq i32 %292, 32
  br i1 %293, label %256, label %257
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 128, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 128, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 128, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 128, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 32
  br i1 %14, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  br label %9

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %53, %9 ]
  %11 = phi i16* [ %6, %4 ], [ %52, %9 ]
  %12 = getelementptr inbounds i16, i16* %5, i64 %10
  %13 = load i16, i16* %12, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %11, i64 16
  %20 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %11, i64 24
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %11, i64 32
  %24 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds i16, i16* %11, i64 40
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds i16, i16* %11, i64 48
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds i16, i16* %11, i64 56
  %30 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %11, i64 %7
  %32 = or i64 %10, 1
  %33 = getelementptr inbounds i16, i16* %5, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %31, i64 8
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %31, i64 16
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %31, i64 24
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %31, i64 32
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %31, i64 40
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i16, i16* %31, i64 48
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds i16, i16* %31, i64 56
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds i16, i16* %31, i64 %7
  %53 = add nuw nsw i64 %10, 2
  %54 = icmp eq i64 %53, 32
  br i1 %54, label %8, label %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 32
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 64
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 126
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 62
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 128
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %26 = getelementptr inbounds i8, i8* %2, i64 32
  %27 = bitcast i8* %26 to <8 x i16>*
  %28 = mul nuw nsw <8 x i32> %20, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150>
  %29 = getelementptr inbounds i8, i8* %2, i64 48
  %30 = bitcast i8* %29 to <8 x i16>*
  %31 = mul nuw nsw <8 x i32> %20, <i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %32 = getelementptr inbounds i8, i8* %2, i64 64
  %33 = bitcast i8* %32 to <8 x i16>*
  %34 = mul nuw nsw <8 x i32> %20, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215>
  %35 = getelementptr inbounds i8, i8* %2, i64 80
  %36 = bitcast i8* %35 to <8 x i16>*
  %37 = mul nuw nsw <8 x i32> %20, <i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %38 = getelementptr inbounds i8, i8* %2, i64 96
  %39 = bitcast i8* %38 to <8 x i16>*
  %40 = mul nuw nsw <8 x i32> %20, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248>
  %41 = getelementptr inbounds i8, i8* %2, i64 112
  %42 = bitcast i8* %41 to <8 x i16>*
  %43 = mul nuw nsw <8 x i32> %20, <i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  br label %44

44:                                               ; preds = %195, %4
  %45 = phi i64 [ 0, %4 ], [ %197, %195 ]
  %46 = phi i16* [ %13, %4 ], [ %196, %195 ]
  %47 = mul i64 %17, %45
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = add i64 %47, 128
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %45
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds i16, i16* %6, i64 %45
  %55 = sub i8 0, %52
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %56, %15
  %58 = add nuw nsw i32 %57, 256
  %59 = shl nuw nsw i64 %45, 1
  %60 = or i64 %59, 1
  %61 = getelementptr i8, i8* %3, i64 %60
  %62 = icmp ult i8* %48, %18
  %63 = icmp ugt i8* %50, %2
  %64 = and i1 %62, %63
  %65 = bitcast i16* %54 to i8*
  %66 = icmp ult i8* %48, %61
  %67 = icmp ugt i8* %50, %65
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  br i1 %69, label %199, label %70

70:                                               ; preds = %44
  %71 = insertelement <8 x i32> undef, i32 %53, i32 0
  %72 = shufflevector <8 x i32> %71, <8 x i32> undef, <8 x i32> zeroinitializer
  %73 = insertelement <8 x i32> undef, i32 %58, i32 0
  %74 = shufflevector <8 x i32> %73, <8 x i32> undef, <8 x i32> zeroinitializer
  %75 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !810
  %76 = zext <8 x i16> %75 to <8 x i32>
  %77 = mul nuw nsw <8 x i32> %72, %76
  %78 = load i16, i16* %54, align 2, !alias.scope !813
  %79 = insertelement <8 x i16> undef, i16 %78, i32 0
  %80 = shufflevector <8 x i16> %79, <8 x i16> undef, <8 x i32> zeroinitializer
  %81 = zext <8 x i16> %80 to <8 x i32>
  %82 = mul nuw nsw <8 x i32> %81, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203>
  %83 = add nuw nsw <8 x i32> %74, %77
  %84 = add nuw nsw <8 x i32> %83, %22
  %85 = add nuw nsw <8 x i32> %84, %82
  %86 = lshr <8 x i32> %85, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %88, align 2, !alias.scope !815, !noalias !817
  %89 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !810
  %90 = zext <8 x i16> %89 to <8 x i32>
  %91 = mul nuw nsw <8 x i32> %72, %90
  %92 = load i16, i16* %54, align 2, !alias.scope !813
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = zext <8 x i16> %94 to <8 x i32>
  %96 = mul nuw nsw <8 x i32> %95, <i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %97 = add nuw nsw <8 x i32> %74, %91
  %98 = add nuw nsw <8 x i32> %97, %25
  %99 = add nuw nsw <8 x i32> %98, %96
  %100 = lshr <8 x i32> %99, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %101 = trunc <8 x i32> %100 to <8 x i16>
  %102 = getelementptr inbounds i16, i16* %46, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %103, align 2, !alias.scope !815, !noalias !817
  %104 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !810
  %105 = zext <8 x i16> %104 to <8 x i32>
  %106 = mul nuw nsw <8 x i32> %72, %105
  %107 = load i16, i16* %54, align 2, !alias.scope !813
  %108 = insertelement <8 x i16> undef, i16 %107, i32 0
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> zeroinitializer
  %110 = zext <8 x i16> %109 to <8 x i32>
  %111 = mul nuw nsw <8 x i32> %110, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106>
  %112 = add nuw nsw <8 x i32> %74, %106
  %113 = add nuw nsw <8 x i32> %112, %28
  %114 = add nuw nsw <8 x i32> %113, %111
  %115 = lshr <8 x i32> %114, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %116 = trunc <8 x i32> %115 to <8 x i16>
  %117 = getelementptr inbounds i16, i16* %46, i64 16
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %118, align 2, !alias.scope !815, !noalias !817
  %119 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !810
  %120 = zext <8 x i16> %119 to <8 x i32>
  %121 = mul nuw nsw <8 x i32> %72, %120
  %122 = load i16, i16* %54, align 2, !alias.scope !813
  %123 = insertelement <8 x i16> undef, i16 %122, i32 0
  %124 = shufflevector <8 x i16> %123, <8 x i16> undef, <8 x i32> zeroinitializer
  %125 = zext <8 x i16> %124 to <8 x i32>
  %126 = mul nuw nsw <8 x i32> %125, <i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %127 = add nuw nsw <8 x i32> %74, %121
  %128 = add nuw nsw <8 x i32> %127, %31
  %129 = add nuw nsw <8 x i32> %128, %126
  %130 = lshr <8 x i32> %129, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %131 = trunc <8 x i32> %130 to <8 x i16>
  %132 = getelementptr inbounds i16, i16* %46, i64 24
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %133, align 2, !alias.scope !815, !noalias !817
  %134 = load <8 x i16>, <8 x i16>* %33, align 2, !alias.scope !810
  %135 = zext <8 x i16> %134 to <8 x i32>
  %136 = mul nuw nsw <8 x i32> %72, %135
  %137 = load i16, i16* %54, align 2, !alias.scope !813
  %138 = insertelement <8 x i16> undef, i16 %137, i32 0
  %139 = shufflevector <8 x i16> %138, <8 x i16> undef, <8 x i32> zeroinitializer
  %140 = zext <8 x i16> %139 to <8 x i32>
  %141 = mul nuw nsw <8 x i32> %140, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41>
  %142 = add nuw nsw <8 x i32> %74, %136
  %143 = add nuw nsw <8 x i32> %142, %34
  %144 = add nuw nsw <8 x i32> %143, %141
  %145 = lshr <8 x i32> %144, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %146 = trunc <8 x i32> %145 to <8 x i16>
  %147 = getelementptr inbounds i16, i16* %46, i64 32
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %148, align 2, !alias.scope !815, !noalias !817
  %149 = load <8 x i16>, <8 x i16>* %36, align 2, !alias.scope !810
  %150 = zext <8 x i16> %149 to <8 x i32>
  %151 = mul nuw nsw <8 x i32> %72, %150
  %152 = load i16, i16* %54, align 2, !alias.scope !813
  %153 = insertelement <8 x i16> undef, i16 %152, i32 0
  %154 = shufflevector <8 x i16> %153, <8 x i16> undef, <8 x i32> zeroinitializer
  %155 = zext <8 x i16> %154 to <8 x i32>
  %156 = mul nuw nsw <8 x i32> %155, <i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %157 = add nuw nsw <8 x i32> %74, %151
  %158 = add nuw nsw <8 x i32> %157, %37
  %159 = add nuw nsw <8 x i32> %158, %156
  %160 = lshr <8 x i32> %159, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %161 = trunc <8 x i32> %160 to <8 x i16>
  %162 = getelementptr inbounds i16, i16* %46, i64 40
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %163, align 2, !alias.scope !815, !noalias !817
  %164 = load <8 x i16>, <8 x i16>* %39, align 2, !alias.scope !810
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %72, %165
  %167 = load i16, i16* %54, align 2, !alias.scope !813
  %168 = insertelement <8 x i16> undef, i16 %167, i32 0
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> zeroinitializer
  %170 = zext <8 x i16> %169 to <8 x i32>
  %171 = mul nuw nsw <8 x i32> %170, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8>
  %172 = add nuw nsw <8 x i32> %74, %166
  %173 = add nuw nsw <8 x i32> %172, %40
  %174 = add nuw nsw <8 x i32> %173, %171
  %175 = lshr <8 x i32> %174, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %176 = trunc <8 x i32> %175 to <8 x i16>
  %177 = getelementptr inbounds i16, i16* %46, i64 48
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %178, align 2, !alias.scope !815, !noalias !817
  %179 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !810
  %180 = zext <8 x i16> %179 to <8 x i32>
  %181 = mul nuw nsw <8 x i32> %72, %180
  %182 = load i16, i16* %54, align 2, !alias.scope !813
  %183 = insertelement <8 x i16> undef, i16 %182, i32 0
  %184 = shufflevector <8 x i16> %183, <8 x i16> undef, <8 x i32> zeroinitializer
  %185 = zext <8 x i16> %184 to <8 x i32>
  %186 = mul nuw nsw <8 x i32> %185, <i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %187 = add nuw nsw <8 x i32> %74, %181
  %188 = add nuw nsw <8 x i32> %187, %43
  %189 = add nuw nsw <8 x i32> %188, %186
  %190 = lshr <8 x i32> %189, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %191 = trunc <8 x i32> %190 to <8 x i16>
  %192 = getelementptr inbounds i16, i16* %46, i64 56
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %193, align 2, !alias.scope !815, !noalias !817
  br label %195

194:                                              ; preds = %195
  ret void

195:                                              ; preds = %199, %70
  %196 = getelementptr inbounds i16, i16* %46, i64 %14
  %197 = add nuw nsw i64 %45, 1
  %198 = icmp eq i64 %197, 32
  br i1 %198, label %194, label %44

199:                                              ; preds = %44, %199
  %200 = phi i64 [ %220, %199 ], [ 0, %44 ]
  %201 = getelementptr inbounds i16, i16* %5, i64 %200
  %202 = load i16, i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = mul nuw nsw i32 %203, %53
  %205 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %200
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = load i16, i16* %54, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nuw nsw i32 %209, %207
  %211 = sub i8 0, %206
  %212 = zext i8 %211 to i32
  %213 = mul nuw nsw i32 %212, %16
  %214 = add nuw nsw i32 %58, %204
  %215 = add nuw nsw i32 %214, %213
  %216 = add nuw nsw i32 %215, %210
  %217 = lshr i32 %216, 9
  %218 = trunc i32 %217 to i16
  %219 = getelementptr inbounds i16, i16* %46, i64 %200
  store i16 %218, i16* %219, align 2
  %220 = add nuw nsw i64 %200, 1
  %221 = icmp eq i64 %220, 64
  br i1 %221, label %195, label %199, !llvm.loop !818
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 62
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = getelementptr i8, i8* %2, i64 128
  %14 = bitcast i8* %2 to <8 x i16>*
  %15 = getelementptr inbounds i8, i8* %2, i64 16
  %16 = bitcast i8* %15 to <8 x i16>*
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to <8 x i16>*
  %19 = getelementptr inbounds i8, i8* %2, i64 48
  %20 = bitcast i8* %19 to <8 x i16>*
  %21 = getelementptr inbounds i8, i8* %2, i64 64
  %22 = bitcast i8* %21 to <8 x i16>*
  %23 = getelementptr inbounds i8, i8* %2, i64 80
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = getelementptr inbounds i8, i8* %2, i64 96
  %26 = bitcast i8* %25 to <8 x i16>*
  %27 = getelementptr inbounds i8, i8* %2, i64 112
  %28 = bitcast i8* %27 to <8 x i16>*
  br label %29

29:                                               ; preds = %115, %4
  %30 = phi i64 [ 0, %4 ], [ %117, %115 ]
  %31 = phi i16* [ %9, %4 ], [ %116, %115 ]
  %32 = mul i64 %12, %30
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 28), i64 %30
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = sub i8 0, %34
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %37, %11
  %39 = add nuw nsw i32 %38, 128
  %40 = add i64 %32, 128
  %41 = getelementptr i8, i8* %0, i64 %40
  %42 = getelementptr i8, i8* %0, i64 %32
  %43 = icmp ult i8* %42, %13
  %44 = icmp ugt i8* %41, %2
  %45 = and i1 %43, %44
  br i1 %45, label %119, label %46

46:                                               ; preds = %29
  %47 = insertelement <8 x i32> undef, i32 %35, i32 0
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> zeroinitializer
  %49 = insertelement <8 x i32> undef, i32 %39, i32 0
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <8 x i32> zeroinitializer
  %51 = load <8 x i16>, <8 x i16>* %14, align 2, !alias.scope !819
  %52 = zext <8 x i16> %51 to <8 x i32>
  %53 = mul nuw nsw <8 x i32> %48, %52
  %54 = add nuw nsw <8 x i32> %50, %53
  %55 = lshr <8 x i32> %54, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !822, !noalias !819
  %58 = load <8 x i16>, <8 x i16>* %16, align 2, !alias.scope !819
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %48, %59
  %61 = add nuw nsw <8 x i32> %50, %60
  %62 = lshr <8 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %31, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !822, !noalias !819
  %66 = load <8 x i16>, <8 x i16>* %18, align 2, !alias.scope !819
  %67 = zext <8 x i16> %66 to <8 x i32>
  %68 = mul nuw nsw <8 x i32> %48, %67
  %69 = add nuw nsw <8 x i32> %50, %68
  %70 = lshr <8 x i32> %69, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %31, i64 16
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !822, !noalias !819
  %74 = load <8 x i16>, <8 x i16>* %20, align 2, !alias.scope !819
  %75 = zext <8 x i16> %74 to <8 x i32>
  %76 = mul nuw nsw <8 x i32> %48, %75
  %77 = add nuw nsw <8 x i32> %50, %76
  %78 = lshr <8 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %79 = trunc <8 x i32> %78 to <8 x i16>
  %80 = getelementptr inbounds i16, i16* %31, i64 24
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %81, align 2, !alias.scope !822, !noalias !819
  %82 = load <8 x i16>, <8 x i16>* %22, align 2, !alias.scope !819
  %83 = zext <8 x i16> %82 to <8 x i32>
  %84 = mul nuw nsw <8 x i32> %48, %83
  %85 = add nuw nsw <8 x i32> %50, %84
  %86 = lshr <8 x i32> %85, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %31, i64 32
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !822, !noalias !819
  %90 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !819
  %91 = zext <8 x i16> %90 to <8 x i32>
  %92 = mul nuw nsw <8 x i32> %48, %91
  %93 = add nuw nsw <8 x i32> %50, %92
  %94 = lshr <8 x i32> %93, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %95 = trunc <8 x i32> %94 to <8 x i16>
  %96 = getelementptr inbounds i16, i16* %31, i64 40
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %97, align 2, !alias.scope !822, !noalias !819
  %98 = load <8 x i16>, <8 x i16>* %26, align 2, !alias.scope !819
  %99 = zext <8 x i16> %98 to <8 x i32>
  %100 = mul nuw nsw <8 x i32> %48, %99
  %101 = add nuw nsw <8 x i32> %50, %100
  %102 = lshr <8 x i32> %101, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %31, i64 48
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !822, !noalias !819
  %106 = load <8 x i16>, <8 x i16>* %28, align 2, !alias.scope !819
  %107 = zext <8 x i16> %106 to <8 x i32>
  %108 = mul nuw nsw <8 x i32> %48, %107
  %109 = add nuw nsw <8 x i32> %50, %108
  %110 = lshr <8 x i32> %109, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %111 = trunc <8 x i32> %110 to <8 x i16>
  %112 = getelementptr inbounds i16, i16* %31, i64 56
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %113, align 2, !alias.scope !822, !noalias !819
  br label %115

114:                                              ; preds = %115
  ret void

115:                                              ; preds = %119, %46
  %116 = getelementptr inbounds i16, i16* %31, i64 %10
  %117 = add nuw nsw i64 %30, 1
  %118 = icmp eq i64 %117, 32
  br i1 %118, label %114, label %29

119:                                              ; preds = %29, %119
  %120 = phi i64 [ %138, %119 ], [ 0, %29 ]
  %121 = getelementptr inbounds i16, i16* %5, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %123, %35
  %125 = add nuw nsw i32 %39, %124
  %126 = lshr i32 %125, 8
  %127 = trunc i32 %126 to i16
  %128 = getelementptr inbounds i16, i16* %31, i64 %120
  store i16 %127, i16* %128, align 2
  %129 = or i64 %120, 1
  %130 = getelementptr inbounds i16, i16* %5, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = mul nuw nsw i32 %132, %35
  %134 = add nuw nsw i32 %39, %133
  %135 = lshr i32 %134, 8
  %136 = trunc i32 %135 to i16
  %137 = getelementptr inbounds i16, i16* %31, i64 %129
  store i16 %136, i16* %137, align 2
  %138 = add nuw nsw i64 %120, 2
  %139 = icmp eq i64 %138, 64
  br i1 %139, label %115, label %119, !llvm.loop !824
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi32EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 126
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = insertelement <8 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> zeroinitializer
  %15 = mul nuw nsw <8 x i32> %14, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53>
  %16 = add nuw nsw <8 x i32> %15, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %17 = mul nuw nsw <8 x i32> %14, <i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %18 = add nuw nsw <8 x i32> %17, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %19 = mul nuw nsw <8 x i32> %14, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150>
  %20 = add nuw nsw <8 x i32> %19, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %21 = mul nuw nsw <8 x i32> %14, <i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %22 = add nuw nsw <8 x i32> %21, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %23 = mul nuw nsw <8 x i32> %14, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215>
  %24 = add nuw nsw <8 x i32> %23, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %25 = mul nuw nsw <8 x i32> %14, <i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %26 = add nuw nsw <8 x i32> %25, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %27 = mul nuw nsw <8 x i32> %14, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248>
  %28 = add nuw nsw <8 x i32> %27, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %29 = mul nuw nsw <8 x i32> %14, <i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  %30 = add nuw nsw <8 x i32> %29, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %31

31:                                               ; preds = %127, %4
  %32 = phi i64 [ 0, %4 ], [ %129, %127 ]
  %33 = phi i16* [ %9, %4 ], [ %128, %127 ]
  %34 = mul i64 %12, %32
  %35 = getelementptr inbounds i16, i16* %5, i64 %32
  %36 = shl nuw nsw i64 %32, 1
  %37 = or i64 %36, 1
  %38 = getelementptr i8, i8* %3, i64 %37
  %39 = add i64 %34, 128
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = getelementptr i8, i8* %0, i64 %34
  %42 = bitcast i16* %35 to i8*
  %43 = icmp ult i8* %41, %38
  %44 = icmp ugt i8* %40, %42
  %45 = and i1 %43, %44
  br i1 %45, label %131, label %46

46:                                               ; preds = %31
  %47 = load i16, i16* %35, align 2, !alias.scope !825
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = zext <8 x i16> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %50, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203>
  %52 = add nuw nsw <8 x i32> %16, %51
  %53 = lshr <8 x i32> %52, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %54 = trunc <8 x i32> %53 to <8 x i16>
  %55 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 2, !alias.scope !828, !noalias !825
  %56 = load i16, i16* %35, align 2, !alias.scope !825
  %57 = insertelement <8 x i16> undef, i16 %56, i32 0
  %58 = shufflevector <8 x i16> %57, <8 x i16> undef, <8 x i32> zeroinitializer
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %59, <i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %61 = add nuw nsw <8 x i32> %18, %60
  %62 = lshr <8 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %33, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !828, !noalias !825
  %66 = load i16, i16* %35, align 2, !alias.scope !825
  %67 = insertelement <8 x i16> undef, i16 %66, i32 0
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> zeroinitializer
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %69, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106>
  %71 = add nuw nsw <8 x i32> %20, %70
  %72 = lshr <8 x i32> %71, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !828, !noalias !825
  %76 = load i16, i16* %35, align 2, !alias.scope !825
  %77 = insertelement <8 x i16> undef, i16 %76, i32 0
  %78 = shufflevector <8 x i16> %77, <8 x i16> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i16> %78 to <8 x i32>
  %80 = mul nuw nsw <8 x i32> %79, <i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %81 = add nuw nsw <8 x i32> %22, %80
  %82 = lshr <8 x i32> %81, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %83 = trunc <8 x i32> %82 to <8 x i16>
  %84 = getelementptr inbounds i16, i16* %33, i64 24
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %85, align 2, !alias.scope !828, !noalias !825
  %86 = load i16, i16* %35, align 2, !alias.scope !825
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = zext <8 x i16> %88 to <8 x i32>
  %90 = mul nuw nsw <8 x i32> %89, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41>
  %91 = add nuw nsw <8 x i32> %24, %90
  %92 = lshr <8 x i32> %91, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %93 = trunc <8 x i32> %92 to <8 x i16>
  %94 = getelementptr inbounds i16, i16* %33, i64 32
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %95, align 2, !alias.scope !828, !noalias !825
  %96 = load i16, i16* %35, align 2, !alias.scope !825
  %97 = insertelement <8 x i16> undef, i16 %96, i32 0
  %98 = shufflevector <8 x i16> %97, <8 x i16> undef, <8 x i32> zeroinitializer
  %99 = zext <8 x i16> %98 to <8 x i32>
  %100 = mul nuw nsw <8 x i32> %99, <i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %101 = add nuw nsw <8 x i32> %26, %100
  %102 = lshr <8 x i32> %101, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 40
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !828, !noalias !825
  %106 = load i16, i16* %35, align 2, !alias.scope !825
  %107 = insertelement <8 x i16> undef, i16 %106, i32 0
  %108 = shufflevector <8 x i16> %107, <8 x i16> undef, <8 x i32> zeroinitializer
  %109 = zext <8 x i16> %108 to <8 x i32>
  %110 = mul nuw nsw <8 x i32> %109, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8>
  %111 = add nuw nsw <8 x i32> %28, %110
  %112 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %113 = trunc <8 x i32> %112 to <8 x i16>
  %114 = getelementptr inbounds i16, i16* %33, i64 48
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %115, align 2, !alias.scope !828, !noalias !825
  %116 = load i16, i16* %35, align 2, !alias.scope !825
  %117 = insertelement <8 x i16> undef, i16 %116, i32 0
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <8 x i32> zeroinitializer
  %119 = zext <8 x i16> %118 to <8 x i32>
  %120 = mul nuw nsw <8 x i32> %119, <i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %121 = add nuw nsw <8 x i32> %30, %120
  %122 = lshr <8 x i32> %121, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %123 = trunc <8 x i32> %122 to <8 x i16>
  %124 = getelementptr inbounds i16, i16* %33, i64 56
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %125, align 2, !alias.scope !828, !noalias !825
  br label %127

126:                                              ; preds = %127
  ret void

127:                                              ; preds = %131, %46
  %128 = getelementptr inbounds i16, i16* %33, i64 %10
  %129 = add nuw nsw i64 %32, 1
  %130 = icmp eq i64 %129, 32
  br i1 %130, label %126, label %31

131:                                              ; preds = %31, %131
  %132 = phi i64 [ %162, %131 ], [ 0, %31 ]
  %133 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %132
  %134 = load i8, i8* %133, align 2
  %135 = zext i8 %134 to i32
  %136 = load i16, i16* %35, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %137, %135
  %139 = sub i8 0, %134
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %140, %11
  %142 = add nuw nsw i32 %141, 128
  %143 = add nuw nsw i32 %142, %138
  %144 = lshr i32 %143, 8
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds i16, i16* %33, i64 %132
  store i16 %145, i16* %146, align 2
  %147 = or i64 %132, 1
  %148 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = load i16, i16* %35, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %152, %150
  %154 = sub i8 0, %149
  %155 = zext i8 %154 to i32
  %156 = mul nuw nsw i32 %155, %11
  %157 = add nuw nsw i32 %156, 128
  %158 = add nuw nsw i32 %157, %153
  %159 = lshr i32 %158, 8
  %160 = trunc i32 %159 to i16
  %161 = getelementptr inbounds i16, i16* %33, i64 %147
  store i16 %160, i16* %161, align 2
  %162 = add nuw nsw i64 %132, 2
  %163 = icmp eq i64 %162, 64
  br i1 %163, label %127, label %131, !llvm.loop !830
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119IntraPredBppFuncs_CILi64ELi64ELi10EtE6DcFillEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) #4 align 2 {
  %5 = lshr i64 %1, 1
  %6 = bitcast i8* %0 to i16*
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i32 [ 0, %4 ], [ %42, %7 ]
  %9 = phi i16* [ %6, %4 ], [ %41, %7 ]
  %10 = bitcast i16* %9 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %10, align 2
  %11 = getelementptr inbounds i16, i16* %9, i64 8
  %12 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %12, align 2
  %13 = getelementptr inbounds i16, i16* %9, i64 16
  %14 = bitcast i16* %13 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %14, align 2
  %15 = getelementptr inbounds i16, i16* %9, i64 24
  %16 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %9, i64 32
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %9, i64 40
  %20 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %9, i64 48
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %9, i64 56
  %24 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds i16, i16* %9, i64 %5
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds i16, i16* %25, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds i16, i16* %25, i64 16
  %30 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %25, i64 24
  %32 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds i16, i16* %25, i64 32
  %34 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %34, align 2
  %35 = getelementptr inbounds i16, i16* %25, i64 40
  %36 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds i16, i16* %25, i64 48
  %38 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds i16, i16* %25, i64 56
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, <8 x i16>* %40, align 2
  %41 = getelementptr inbounds i16, i16* %25, i64 %5
  %42 = add nuw nsw i32 %8, 2
  %43 = icmp eq i32 %42, 64
  br i1 %43, label %44, label %7

44:                                               ; preds = %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE5DcTopEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #3 align 2 {
  %5 = bitcast i8* %2 to <4 x i16>*
  %6 = load <4 x i16>, <4 x i16>* %5, align 2
  %7 = zext <4 x i16> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = zext <4 x i16> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 16
  %15 = bitcast i8* %14 to <4 x i16>*
  %16 = load <4 x i16>, <4 x i16>* %15, align 2
  %17 = zext <4 x i16> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 24
  %20 = bitcast i8* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 32
  %25 = bitcast i8* %24 to <4 x i16>*
  %26 = load <4 x i16>, <4 x i16>* %25, align 2
  %27 = zext <4 x i16> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 40
  %30 = bitcast i8* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 48
  %35 = bitcast i8* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 56
  %40 = bitcast i8* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 64
  %45 = bitcast i8* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 72
  %50 = bitcast i8* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 80
  %55 = bitcast i8* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 88
  %60 = bitcast i8* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 96
  %65 = bitcast i8* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 104
  %70 = bitcast i8* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 112
  %75 = bitcast i8* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = zext <4 x i16> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 120
  %80 = bitcast i8* %79 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = bitcast i8* %0 to i16*
  %91 = lshr i64 %1, 1
  %92 = trunc i32 %89 to i16
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = insertelement <8 x i16> undef, i16 %92, i32 0
  %96 = shufflevector <8 x i16> %95, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %98

97:                                               ; preds = %98
  ret void

98:                                               ; preds = %98, %4
  %99 = phi i32 [ 0, %4 ], [ %133, %98 ]
  %100 = phi i16* [ %90, %4 ], [ %132, %98 ]
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %100, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i16, i16* %100, i64 16
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i16, i16* %100, i64 24
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %100, i64 32
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %100, i64 40
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %100, i64 48
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %100, i64 56
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %100, i64 %91
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %116, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %116, i64 16
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %116, i64 24
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %116, i64 32
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %116, i64 40
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %116, i64 48
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i16, i16* %116, i64 56
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %116, i64 %91
  %133 = add nuw nsw i32 %99, 2
  %134 = icmp eq i32 %133, 64
  br i1 %134, label %97, label %98
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE6DcLeftEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to <4 x i16>*
  %6 = load <4 x i16>, <4 x i16>* %5, align 2
  %7 = zext <4 x i16> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 32, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = zext <4 x i16> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %3, i64 16
  %15 = bitcast i8* %14 to <4 x i16>*
  %16 = load <4 x i16>, <4 x i16>* %15, align 2
  %17 = zext <4 x i16> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %3, i64 24
  %20 = bitcast i8* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %3, i64 32
  %25 = bitcast i8* %24 to <4 x i16>*
  %26 = load <4 x i16>, <4 x i16>* %25, align 2
  %27 = zext <4 x i16> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %3, i64 40
  %30 = bitcast i8* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %3, i64 48
  %35 = bitcast i8* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %3, i64 56
  %40 = bitcast i8* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %3, i64 64
  %45 = bitcast i8* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %3, i64 72
  %50 = bitcast i8* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %3, i64 80
  %55 = bitcast i8* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %3, i64 88
  %60 = bitcast i8* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %3, i64 96
  %65 = bitcast i8* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %3, i64 104
  %70 = bitcast i8* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %3, i64 112
  %75 = bitcast i8* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = zext <4 x i16> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %3, i64 120
  %80 = bitcast i8* %79 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = lshr i32 %88, 6
  %90 = bitcast i8* %0 to i16*
  %91 = lshr i64 %1, 1
  %92 = trunc i32 %89 to i16
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = insertelement <8 x i16> undef, i16 %92, i32 0
  %96 = shufflevector <8 x i16> %95, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %98

97:                                               ; preds = %98
  ret void

98:                                               ; preds = %98, %4
  %99 = phi i32 [ 0, %4 ], [ %133, %98 ]
  %100 = phi i16* [ %90, %4 ], [ %132, %98 ]
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %100, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds i16, i16* %100, i64 16
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %105, align 2
  %106 = getelementptr inbounds i16, i16* %100, i64 24
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds i16, i16* %100, i64 32
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %100, i64 40
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %100, i64 48
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i16, i16* %100, i64 56
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i16, i16* %100, i64 %91
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %116, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds i16, i16* %116, i64 16
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %116, i64 24
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %116, i64 32
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %116, i64 40
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds i16, i16* %116, i64 48
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds i16, i16* %116, i64 56
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds i16, i16* %116, i64 %91
  %133 = add nuw nsw i32 %99, 2
  %134 = icmp eq i32 %133, 64
  br i1 %134, label %97, label %98
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE2DcEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to <4 x i16>*
  %6 = load <4 x i16>, <4 x i16>* %5, align 2
  %7 = zext <4 x i16> %6 to <4 x i32>
  %8 = add nuw nsw <4 x i32> %7, <i32 64, i32 0, i32 0, i32 0>
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = zext <4 x i16> %11 to <4 x i32>
  %13 = add nuw nsw <4 x i32> %8, %12
  %14 = getelementptr inbounds i8, i8* %2, i64 16
  %15 = bitcast i8* %14 to <4 x i16>*
  %16 = load <4 x i16>, <4 x i16>* %15, align 2
  %17 = zext <4 x i16> %16 to <4 x i32>
  %18 = add nuw nsw <4 x i32> %13, %17
  %19 = getelementptr inbounds i8, i8* %2, i64 24
  %20 = bitcast i8* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = add nuw nsw <4 x i32> %18, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 32
  %25 = bitcast i8* %24 to <4 x i16>*
  %26 = load <4 x i16>, <4 x i16>* %25, align 2
  %27 = zext <4 x i16> %26 to <4 x i32>
  %28 = add nuw nsw <4 x i32> %23, %27
  %29 = getelementptr inbounds i8, i8* %2, i64 40
  %30 = bitcast i8* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = add nuw nsw <4 x i32> %28, %32
  %34 = getelementptr inbounds i8, i8* %2, i64 48
  %35 = bitcast i8* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = add nuw nsw <4 x i32> %33, %37
  %39 = getelementptr inbounds i8, i8* %2, i64 56
  %40 = bitcast i8* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = add nuw nsw <4 x i32> %38, %42
  %44 = getelementptr inbounds i8, i8* %2, i64 64
  %45 = bitcast i8* %44 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = add nuw nsw <4 x i32> %43, %47
  %49 = getelementptr inbounds i8, i8* %2, i64 72
  %50 = bitcast i8* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = add nuw nsw <4 x i32> %48, %52
  %54 = getelementptr inbounds i8, i8* %2, i64 80
  %55 = bitcast i8* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = add nuw nsw <4 x i32> %53, %57
  %59 = getelementptr inbounds i8, i8* %2, i64 88
  %60 = bitcast i8* %59 to <4 x i16>*
  %61 = load <4 x i16>, <4 x i16>* %60, align 2
  %62 = zext <4 x i16> %61 to <4 x i32>
  %63 = add nuw nsw <4 x i32> %58, %62
  %64 = getelementptr inbounds i8, i8* %2, i64 96
  %65 = bitcast i8* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = add nuw nsw <4 x i32> %63, %67
  %69 = getelementptr inbounds i8, i8* %2, i64 104
  %70 = bitcast i8* %69 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %68, %72
  %74 = getelementptr inbounds i8, i8* %2, i64 112
  %75 = bitcast i8* %74 to <4 x i16>*
  %76 = load <4 x i16>, <4 x i16>* %75, align 2
  %77 = zext <4 x i16> %76 to <4 x i32>
  %78 = add nuw nsw <4 x i32> %73, %77
  %79 = getelementptr inbounds i8, i8* %2, i64 120
  %80 = bitcast i8* %79 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %78, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = shufflevector <4 x i32> %87, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %89 = bitcast i8* %3 to <4 x i16>*
  %90 = load <4 x i16>, <4 x i16>* %89, align 2
  %91 = zext <4 x i16> %90 to <4 x i32>
  %92 = add nuw nsw <4 x i32> %88, %91
  %93 = getelementptr inbounds i8, i8* %3, i64 8
  %94 = bitcast i8* %93 to <4 x i16>*
  %95 = load <4 x i16>, <4 x i16>* %94, align 2
  %96 = zext <4 x i16> %95 to <4 x i32>
  %97 = add nuw nsw <4 x i32> %92, %96
  %98 = getelementptr inbounds i8, i8* %3, i64 16
  %99 = bitcast i8* %98 to <4 x i16>*
  %100 = load <4 x i16>, <4 x i16>* %99, align 2
  %101 = zext <4 x i16> %100 to <4 x i32>
  %102 = add nuw nsw <4 x i32> %97, %101
  %103 = getelementptr inbounds i8, i8* %3, i64 24
  %104 = bitcast i8* %103 to <4 x i16>*
  %105 = load <4 x i16>, <4 x i16>* %104, align 2
  %106 = zext <4 x i16> %105 to <4 x i32>
  %107 = add nuw nsw <4 x i32> %102, %106
  %108 = getelementptr inbounds i8, i8* %3, i64 32
  %109 = bitcast i8* %108 to <4 x i16>*
  %110 = load <4 x i16>, <4 x i16>* %109, align 2
  %111 = zext <4 x i16> %110 to <4 x i32>
  %112 = add nuw nsw <4 x i32> %107, %111
  %113 = getelementptr inbounds i8, i8* %3, i64 40
  %114 = bitcast i8* %113 to <4 x i16>*
  %115 = load <4 x i16>, <4 x i16>* %114, align 2
  %116 = zext <4 x i16> %115 to <4 x i32>
  %117 = add nuw nsw <4 x i32> %112, %116
  %118 = getelementptr inbounds i8, i8* %3, i64 48
  %119 = bitcast i8* %118 to <4 x i16>*
  %120 = load <4 x i16>, <4 x i16>* %119, align 2
  %121 = zext <4 x i16> %120 to <4 x i32>
  %122 = add nuw nsw <4 x i32> %117, %121
  %123 = getelementptr inbounds i8, i8* %3, i64 56
  %124 = bitcast i8* %123 to <4 x i16>*
  %125 = load <4 x i16>, <4 x i16>* %124, align 2
  %126 = zext <4 x i16> %125 to <4 x i32>
  %127 = add nuw nsw <4 x i32> %122, %126
  %128 = getelementptr inbounds i8, i8* %3, i64 64
  %129 = bitcast i8* %128 to <4 x i16>*
  %130 = load <4 x i16>, <4 x i16>* %129, align 2
  %131 = zext <4 x i16> %130 to <4 x i32>
  %132 = add nuw nsw <4 x i32> %127, %131
  %133 = getelementptr inbounds i8, i8* %3, i64 72
  %134 = bitcast i8* %133 to <4 x i16>*
  %135 = load <4 x i16>, <4 x i16>* %134, align 2
  %136 = zext <4 x i16> %135 to <4 x i32>
  %137 = add nuw nsw <4 x i32> %132, %136
  %138 = getelementptr inbounds i8, i8* %3, i64 80
  %139 = bitcast i8* %138 to <4 x i16>*
  %140 = load <4 x i16>, <4 x i16>* %139, align 2
  %141 = zext <4 x i16> %140 to <4 x i32>
  %142 = add nuw nsw <4 x i32> %137, %141
  %143 = getelementptr inbounds i8, i8* %3, i64 88
  %144 = bitcast i8* %143 to <4 x i16>*
  %145 = load <4 x i16>, <4 x i16>* %144, align 2
  %146 = zext <4 x i16> %145 to <4 x i32>
  %147 = add nuw nsw <4 x i32> %142, %146
  %148 = getelementptr inbounds i8, i8* %3, i64 96
  %149 = bitcast i8* %148 to <4 x i16>*
  %150 = load <4 x i16>, <4 x i16>* %149, align 2
  %151 = zext <4 x i16> %150 to <4 x i32>
  %152 = add nuw nsw <4 x i32> %147, %151
  %153 = getelementptr inbounds i8, i8* %3, i64 104
  %154 = bitcast i8* %153 to <4 x i16>*
  %155 = load <4 x i16>, <4 x i16>* %154, align 2
  %156 = zext <4 x i16> %155 to <4 x i32>
  %157 = add nuw nsw <4 x i32> %152, %156
  %158 = getelementptr inbounds i8, i8* %3, i64 112
  %159 = bitcast i8* %158 to <4 x i16>*
  %160 = load <4 x i16>, <4 x i16>* %159, align 2
  %161 = zext <4 x i16> %160 to <4 x i32>
  %162 = add nuw nsw <4 x i32> %157, %161
  %163 = getelementptr inbounds i8, i8* %3, i64 120
  %164 = bitcast i8* %163 to <4 x i16>*
  %165 = load <4 x i16>, <4 x i16>* %164, align 2
  %166 = zext <4 x i16> %165 to <4 x i32>
  %167 = add nuw nsw <4 x i32> %162, %166
  %168 = shufflevector <4 x i32> %167, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %169 = add <4 x i32> %167, %168
  %170 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %171 = add <4 x i32> %169, %170
  %172 = extractelement <4 x i32> %171, i32 0
  %173 = lshr i32 %172, 7
  %174 = bitcast i8* %0 to i16*
  %175 = lshr i64 %1, 1
  %176 = trunc i32 %173 to i16
  %177 = insertelement <8 x i16> undef, i16 %176, i32 0
  %178 = shufflevector <8 x i16> %177, <8 x i16> undef, <8 x i32> zeroinitializer
  %179 = insertelement <8 x i16> undef, i16 %176, i32 0
  %180 = shufflevector <8 x i16> %179, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %182

181:                                              ; preds = %182
  ret void

182:                                              ; preds = %182, %4
  %183 = phi i32 [ 0, %4 ], [ %217, %182 ]
  %184 = phi i16* [ %174, %4 ], [ %216, %182 ]
  %185 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %185, align 2
  %186 = getelementptr inbounds i16, i16* %184, i64 8
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %187, align 2
  %188 = getelementptr inbounds i16, i16* %184, i64 16
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %189, align 2
  %190 = getelementptr inbounds i16, i16* %184, i64 24
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %191, align 2
  %192 = getelementptr inbounds i16, i16* %184, i64 32
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds i16, i16* %184, i64 40
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %195, align 2
  %196 = getelementptr inbounds i16, i16* %184, i64 48
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %197, align 2
  %198 = getelementptr inbounds i16, i16* %184, i64 56
  %199 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %199, align 2
  %200 = getelementptr inbounds i16, i16* %184, i64 %175
  %201 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %201, align 2
  %202 = getelementptr inbounds i16, i16* %200, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %203, align 2
  %204 = getelementptr inbounds i16, i16* %200, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %205, align 2
  %206 = getelementptr inbounds i16, i16* %200, i64 24
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %207, align 2
  %208 = getelementptr inbounds i16, i16* %200, i64 32
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %209, align 2
  %210 = getelementptr inbounds i16, i16* %200, i64 40
  %211 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %211, align 2
  %212 = getelementptr inbounds i16, i16* %200, i64 48
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %213, align 2
  %214 = getelementptr inbounds i16, i16* %200, i64 56
  %215 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %215, align 2
  %216 = getelementptr inbounds i16, i16* %200, i64 %175
  %217 = add nuw nsw i32 %183, 2
  %218 = icmp eq i32 %217, 64
  br i1 %218, label %181, label %182
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE8VerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) #0 align 2 {
  br label %6

5:                                                ; preds = %6
  ret void

6:                                                ; preds = %6, %4
  %7 = phi i32 [ 0, %4 ], [ %13, %6 ]
  %8 = phi i8* [ %0, %4 ], [ %12, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 128, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 128, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %2, i64 128, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %2, i64 128, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  %13 = add nuw nsw i32 %7, 4
  %14 = icmp eq i32 %13, 64
  br i1 %14, label %5, label %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE10HorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = lshr i64 %1, 1
  br label %9

8:                                                ; preds = %9
  ret void

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %53, %9 ]
  %11 = phi i16* [ %6, %4 ], [ %52, %9 ]
  %12 = getelementptr inbounds i16, i16* %5, i64 %10
  %13 = load i16, i16* %12, align 2
  %14 = insertelement <8 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> zeroinitializer
  %16 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i16, i16* %11, i64 8
  %18 = bitcast i16* %17 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i16, i16* %11, i64 16
  %20 = bitcast i16* %19 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i16, i16* %11, i64 24
  %22 = bitcast i16* %21 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %22, align 2
  %23 = getelementptr inbounds i16, i16* %11, i64 32
  %24 = bitcast i16* %23 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %24, align 2
  %25 = getelementptr inbounds i16, i16* %11, i64 40
  %26 = bitcast i16* %25 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds i16, i16* %11, i64 48
  %28 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds i16, i16* %11, i64 56
  %30 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> %15, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds i16, i16* %11, i64 %7
  %32 = or i64 %10, 1
  %33 = getelementptr inbounds i16, i16* %5, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds i16, i16* %31, i64 8
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %39, align 2
  %40 = getelementptr inbounds i16, i16* %31, i64 16
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %41, align 2
  %42 = getelementptr inbounds i16, i16* %31, i64 24
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds i16, i16* %31, i64 32
  %45 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %45, align 2
  %46 = getelementptr inbounds i16, i16* %31, i64 40
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i16, i16* %31, i64 48
  %49 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %49, align 2
  %50 = getelementptr inbounds i16, i16* %31, i64 56
  %51 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %51, align 2
  %52 = getelementptr inbounds i16, i16* %31, i64 %7
  %53 = add nuw nsw i64 %10, 2
  %54 = icmp eq i64 %53, 64
  br i1 %54, label %8, label %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE5PaethEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 -2
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = bitcast i8* %0 to i16*
  %13 = lshr i64 %1, 1
  br label %15

14:                                               ; preds = %26
  ret void

15:                                               ; preds = %26, %4
  %16 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %17 = phi i16* [ %12, %4 ], [ %27, %26 ]
  %18 = getelementptr inbounds i16, i16* %6, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 %20, %10
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = sub nsw i32 %20, %11
  br label %30

26:                                               ; preds = %53
  %27 = getelementptr inbounds i16, i16* %17, i64 %13
  %28 = add nuw nsw i64 %16, 1
  %29 = icmp eq i64 %28, 64
  br i1 %29, label %14, label %15

30:                                               ; preds = %53, %15
  %31 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %32 = getelementptr inbounds i16, i16* %5, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %34, %10
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = add nsw i32 %25, %34
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %38, %24
  %44 = icmp sgt i32 %38, %42
  %45 = or i1 %43, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %30
  %47 = getelementptr inbounds i16, i16* %17, i64 %31
  store i16 %19, i16* %47, align 2
  br label %53

48:                                               ; preds = %30
  %49 = icmp sgt i32 %24, %42
  %50 = getelementptr inbounds i16, i16* %17, i64 %31
  br i1 %49, label %52, label %51

51:                                               ; preds = %48
  store i16 %33, i16* %50, align 2
  br label %53

52:                                               ; preds = %48
  store i16 %9, i16* %50, align 2
  br label %53

53:                                               ; preds = %51, %52, %46
  %54 = add nuw nsw i64 %31, 1
  %55 = icmp eq i64 %54, 64
  br i1 %55, label %26, label %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE6SmoothEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = bitcast i8* %3 to i16*
  %7 = getelementptr inbounds i8, i8* %2, i64 126
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds i8, i8* %3, i64 126
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i16 %12 to i32
  %16 = zext i16 %9 to i32
  %17 = and i64 %1, -2
  %18 = getelementptr i8, i8* %2, i64 128
  %19 = insertelement <8 x i32> undef, i32 %16, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast i8* %2 to <8 x i16>*
  %22 = mul nuw nsw <8 x i32> %20, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53>
  %23 = getelementptr inbounds i8, i8* %2, i64 16
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = mul nuw nsw <8 x i32> %20, <i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %26 = getelementptr inbounds i8, i8* %2, i64 32
  %27 = bitcast i8* %26 to <8 x i16>*
  %28 = mul nuw nsw <8 x i32> %20, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150>
  %29 = getelementptr inbounds i8, i8* %2, i64 48
  %30 = bitcast i8* %29 to <8 x i16>*
  %31 = mul nuw nsw <8 x i32> %20, <i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %32 = getelementptr inbounds i8, i8* %2, i64 64
  %33 = bitcast i8* %32 to <8 x i16>*
  %34 = mul nuw nsw <8 x i32> %20, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215>
  %35 = getelementptr inbounds i8, i8* %2, i64 80
  %36 = bitcast i8* %35 to <8 x i16>*
  %37 = mul nuw nsw <8 x i32> %20, <i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %38 = getelementptr inbounds i8, i8* %2, i64 96
  %39 = bitcast i8* %38 to <8 x i16>*
  %40 = mul nuw nsw <8 x i32> %20, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248>
  %41 = getelementptr inbounds i8, i8* %2, i64 112
  %42 = bitcast i8* %41 to <8 x i16>*
  %43 = mul nuw nsw <8 x i32> %20, <i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  br label %44

44:                                               ; preds = %195, %4
  %45 = phi i64 [ 0, %4 ], [ %197, %195 ]
  %46 = phi i16* [ %13, %4 ], [ %196, %195 ]
  %47 = mul i64 %17, %45
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = add i64 %47, 128
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %45
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds i16, i16* %6, i64 %45
  %55 = sub i8 0, %52
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %56, %15
  %58 = add nuw nsw i32 %57, 256
  %59 = shl nuw nsw i64 %45, 1
  %60 = or i64 %59, 1
  %61 = getelementptr i8, i8* %3, i64 %60
  %62 = icmp ult i8* %48, %18
  %63 = icmp ugt i8* %50, %2
  %64 = and i1 %62, %63
  %65 = bitcast i16* %54 to i8*
  %66 = icmp ult i8* %48, %61
  %67 = icmp ugt i8* %50, %65
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  br i1 %69, label %199, label %70

70:                                               ; preds = %44
  %71 = insertelement <8 x i32> undef, i32 %53, i32 0
  %72 = shufflevector <8 x i32> %71, <8 x i32> undef, <8 x i32> zeroinitializer
  %73 = insertelement <8 x i32> undef, i32 %58, i32 0
  %74 = shufflevector <8 x i32> %73, <8 x i32> undef, <8 x i32> zeroinitializer
  %75 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !831
  %76 = zext <8 x i16> %75 to <8 x i32>
  %77 = mul nuw nsw <8 x i32> %72, %76
  %78 = load i16, i16* %54, align 2, !alias.scope !834
  %79 = insertelement <8 x i16> undef, i16 %78, i32 0
  %80 = shufflevector <8 x i16> %79, <8 x i16> undef, <8 x i32> zeroinitializer
  %81 = zext <8 x i16> %80 to <8 x i32>
  %82 = mul nuw nsw <8 x i32> %81, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203>
  %83 = add nuw nsw <8 x i32> %74, %77
  %84 = add nuw nsw <8 x i32> %83, %22
  %85 = add nuw nsw <8 x i32> %84, %82
  %86 = lshr <8 x i32> %85, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %88, align 2, !alias.scope !836, !noalias !838
  %89 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !831
  %90 = zext <8 x i16> %89 to <8 x i32>
  %91 = mul nuw nsw <8 x i32> %72, %90
  %92 = load i16, i16* %54, align 2, !alias.scope !834
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = zext <8 x i16> %94 to <8 x i32>
  %96 = mul nuw nsw <8 x i32> %95, <i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %97 = add nuw nsw <8 x i32> %74, %91
  %98 = add nuw nsw <8 x i32> %97, %25
  %99 = add nuw nsw <8 x i32> %98, %96
  %100 = lshr <8 x i32> %99, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %101 = trunc <8 x i32> %100 to <8 x i16>
  %102 = getelementptr inbounds i16, i16* %46, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %103, align 2, !alias.scope !836, !noalias !838
  %104 = load <8 x i16>, <8 x i16>* %27, align 2, !alias.scope !831
  %105 = zext <8 x i16> %104 to <8 x i32>
  %106 = mul nuw nsw <8 x i32> %72, %105
  %107 = load i16, i16* %54, align 2, !alias.scope !834
  %108 = insertelement <8 x i16> undef, i16 %107, i32 0
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> zeroinitializer
  %110 = zext <8 x i16> %109 to <8 x i32>
  %111 = mul nuw nsw <8 x i32> %110, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106>
  %112 = add nuw nsw <8 x i32> %74, %106
  %113 = add nuw nsw <8 x i32> %112, %28
  %114 = add nuw nsw <8 x i32> %113, %111
  %115 = lshr <8 x i32> %114, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %116 = trunc <8 x i32> %115 to <8 x i16>
  %117 = getelementptr inbounds i16, i16* %46, i64 16
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %118, align 2, !alias.scope !836, !noalias !838
  %119 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !831
  %120 = zext <8 x i16> %119 to <8 x i32>
  %121 = mul nuw nsw <8 x i32> %72, %120
  %122 = load i16, i16* %54, align 2, !alias.scope !834
  %123 = insertelement <8 x i16> undef, i16 %122, i32 0
  %124 = shufflevector <8 x i16> %123, <8 x i16> undef, <8 x i32> zeroinitializer
  %125 = zext <8 x i16> %124 to <8 x i32>
  %126 = mul nuw nsw <8 x i32> %125, <i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %127 = add nuw nsw <8 x i32> %74, %121
  %128 = add nuw nsw <8 x i32> %127, %31
  %129 = add nuw nsw <8 x i32> %128, %126
  %130 = lshr <8 x i32> %129, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %131 = trunc <8 x i32> %130 to <8 x i16>
  %132 = getelementptr inbounds i16, i16* %46, i64 24
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %133, align 2, !alias.scope !836, !noalias !838
  %134 = load <8 x i16>, <8 x i16>* %33, align 2, !alias.scope !831
  %135 = zext <8 x i16> %134 to <8 x i32>
  %136 = mul nuw nsw <8 x i32> %72, %135
  %137 = load i16, i16* %54, align 2, !alias.scope !834
  %138 = insertelement <8 x i16> undef, i16 %137, i32 0
  %139 = shufflevector <8 x i16> %138, <8 x i16> undef, <8 x i32> zeroinitializer
  %140 = zext <8 x i16> %139 to <8 x i32>
  %141 = mul nuw nsw <8 x i32> %140, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41>
  %142 = add nuw nsw <8 x i32> %74, %136
  %143 = add nuw nsw <8 x i32> %142, %34
  %144 = add nuw nsw <8 x i32> %143, %141
  %145 = lshr <8 x i32> %144, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %146 = trunc <8 x i32> %145 to <8 x i16>
  %147 = getelementptr inbounds i16, i16* %46, i64 32
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %148, align 2, !alias.scope !836, !noalias !838
  %149 = load <8 x i16>, <8 x i16>* %36, align 2, !alias.scope !831
  %150 = zext <8 x i16> %149 to <8 x i32>
  %151 = mul nuw nsw <8 x i32> %72, %150
  %152 = load i16, i16* %54, align 2, !alias.scope !834
  %153 = insertelement <8 x i16> undef, i16 %152, i32 0
  %154 = shufflevector <8 x i16> %153, <8 x i16> undef, <8 x i32> zeroinitializer
  %155 = zext <8 x i16> %154 to <8 x i32>
  %156 = mul nuw nsw <8 x i32> %155, <i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %157 = add nuw nsw <8 x i32> %74, %151
  %158 = add nuw nsw <8 x i32> %157, %37
  %159 = add nuw nsw <8 x i32> %158, %156
  %160 = lshr <8 x i32> %159, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %161 = trunc <8 x i32> %160 to <8 x i16>
  %162 = getelementptr inbounds i16, i16* %46, i64 40
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %163, align 2, !alias.scope !836, !noalias !838
  %164 = load <8 x i16>, <8 x i16>* %39, align 2, !alias.scope !831
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %72, %165
  %167 = load i16, i16* %54, align 2, !alias.scope !834
  %168 = insertelement <8 x i16> undef, i16 %167, i32 0
  %169 = shufflevector <8 x i16> %168, <8 x i16> undef, <8 x i32> zeroinitializer
  %170 = zext <8 x i16> %169 to <8 x i32>
  %171 = mul nuw nsw <8 x i32> %170, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8>
  %172 = add nuw nsw <8 x i32> %74, %166
  %173 = add nuw nsw <8 x i32> %172, %40
  %174 = add nuw nsw <8 x i32> %173, %171
  %175 = lshr <8 x i32> %174, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %176 = trunc <8 x i32> %175 to <8 x i16>
  %177 = getelementptr inbounds i16, i16* %46, i64 48
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %178, align 2, !alias.scope !836, !noalias !838
  %179 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !831
  %180 = zext <8 x i16> %179 to <8 x i32>
  %181 = mul nuw nsw <8 x i32> %72, %180
  %182 = load i16, i16* %54, align 2, !alias.scope !834
  %183 = insertelement <8 x i16> undef, i16 %182, i32 0
  %184 = shufflevector <8 x i16> %183, <8 x i16> undef, <8 x i32> zeroinitializer
  %185 = zext <8 x i16> %184 to <8 x i32>
  %186 = mul nuw nsw <8 x i32> %185, <i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %187 = add nuw nsw <8 x i32> %74, %181
  %188 = add nuw nsw <8 x i32> %187, %43
  %189 = add nuw nsw <8 x i32> %188, %186
  %190 = lshr <8 x i32> %189, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %191 = trunc <8 x i32> %190 to <8 x i16>
  %192 = getelementptr inbounds i16, i16* %46, i64 56
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %193, align 2, !alias.scope !836, !noalias !838
  br label %195

194:                                              ; preds = %195
  ret void

195:                                              ; preds = %199, %70
  %196 = getelementptr inbounds i16, i16* %46, i64 %14
  %197 = add nuw nsw i64 %45, 1
  %198 = icmp eq i64 %197, 64
  br i1 %198, label %194, label %44

199:                                              ; preds = %44, %199
  %200 = phi i64 [ %220, %199 ], [ 0, %44 ]
  %201 = getelementptr inbounds i16, i16* %5, i64 %200
  %202 = load i16, i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = mul nuw nsw i32 %203, %53
  %205 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %200
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = load i16, i16* %54, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nuw nsw i32 %209, %207
  %211 = sub i8 0, %206
  %212 = zext i8 %211 to i32
  %213 = mul nuw nsw i32 %212, %16
  %214 = add nuw nsw i32 %58, %204
  %215 = add nuw nsw i32 %214, %213
  %216 = add nuw nsw i32 %215, %210
  %217 = lshr i32 %216, 9
  %218 = trunc i32 %217 to i16
  %219 = getelementptr inbounds i16, i16* %46, i64 %200
  store i16 %218, i16* %219, align 2
  %220 = add nuw nsw i64 %200, 1
  %221 = icmp eq i64 %220, 64
  br i1 %221, label %195, label %199, !llvm.loop !839
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE14SmoothVerticalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %2 to i16*
  %6 = getelementptr inbounds i8, i8* %3, i64 126
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = getelementptr i8, i8* %2, i64 128
  %14 = bitcast i8* %2 to <8 x i16>*
  %15 = getelementptr inbounds i8, i8* %2, i64 16
  %16 = bitcast i8* %15 to <8 x i16>*
  %17 = getelementptr inbounds i8, i8* %2, i64 32
  %18 = bitcast i8* %17 to <8 x i16>*
  %19 = getelementptr inbounds i8, i8* %2, i64 48
  %20 = bitcast i8* %19 to <8 x i16>*
  %21 = getelementptr inbounds i8, i8* %2, i64 64
  %22 = bitcast i8* %21 to <8 x i16>*
  %23 = getelementptr inbounds i8, i8* %2, i64 80
  %24 = bitcast i8* %23 to <8 x i16>*
  %25 = getelementptr inbounds i8, i8* %2, i64 96
  %26 = bitcast i8* %25 to <8 x i16>*
  %27 = getelementptr inbounds i8, i8* %2, i64 112
  %28 = bitcast i8* %27 to <8 x i16>*
  br label %29

29:                                               ; preds = %115, %4
  %30 = phi i64 [ 0, %4 ], [ %117, %115 ]
  %31 = phi i16* [ %9, %4 ], [ %116, %115 ]
  %32 = mul i64 %12, %30
  %33 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %30
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = sub i8 0, %34
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %37, %11
  %39 = add nuw nsw i32 %38, 128
  %40 = add i64 %32, 128
  %41 = getelementptr i8, i8* %0, i64 %40
  %42 = getelementptr i8, i8* %0, i64 %32
  %43 = icmp ult i8* %42, %13
  %44 = icmp ugt i8* %41, %2
  %45 = and i1 %43, %44
  br i1 %45, label %119, label %46

46:                                               ; preds = %29
  %47 = insertelement <8 x i32> undef, i32 %35, i32 0
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> zeroinitializer
  %49 = insertelement <8 x i32> undef, i32 %39, i32 0
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <8 x i32> zeroinitializer
  %51 = load <8 x i16>, <8 x i16>* %14, align 2, !alias.scope !840
  %52 = zext <8 x i16> %51 to <8 x i32>
  %53 = mul nuw nsw <8 x i32> %48, %52
  %54 = add nuw nsw <8 x i32> %50, %53
  %55 = lshr <8 x i32> %54, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !843, !noalias !840
  %58 = load <8 x i16>, <8 x i16>* %16, align 2, !alias.scope !840
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %48, %59
  %61 = add nuw nsw <8 x i32> %50, %60
  %62 = lshr <8 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %31, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !843, !noalias !840
  %66 = load <8 x i16>, <8 x i16>* %18, align 2, !alias.scope !840
  %67 = zext <8 x i16> %66 to <8 x i32>
  %68 = mul nuw nsw <8 x i32> %48, %67
  %69 = add nuw nsw <8 x i32> %50, %68
  %70 = lshr <8 x i32> %69, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %31, i64 16
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !843, !noalias !840
  %74 = load <8 x i16>, <8 x i16>* %20, align 2, !alias.scope !840
  %75 = zext <8 x i16> %74 to <8 x i32>
  %76 = mul nuw nsw <8 x i32> %48, %75
  %77 = add nuw nsw <8 x i32> %50, %76
  %78 = lshr <8 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %79 = trunc <8 x i32> %78 to <8 x i16>
  %80 = getelementptr inbounds i16, i16* %31, i64 24
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %81, align 2, !alias.scope !843, !noalias !840
  %82 = load <8 x i16>, <8 x i16>* %22, align 2, !alias.scope !840
  %83 = zext <8 x i16> %82 to <8 x i32>
  %84 = mul nuw nsw <8 x i32> %48, %83
  %85 = add nuw nsw <8 x i32> %50, %84
  %86 = lshr <8 x i32> %85, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %31, i64 32
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !843, !noalias !840
  %90 = load <8 x i16>, <8 x i16>* %24, align 2, !alias.scope !840
  %91 = zext <8 x i16> %90 to <8 x i32>
  %92 = mul nuw nsw <8 x i32> %48, %91
  %93 = add nuw nsw <8 x i32> %50, %92
  %94 = lshr <8 x i32> %93, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %95 = trunc <8 x i32> %94 to <8 x i16>
  %96 = getelementptr inbounds i16, i16* %31, i64 40
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %97, align 2, !alias.scope !843, !noalias !840
  %98 = load <8 x i16>, <8 x i16>* %26, align 2, !alias.scope !840
  %99 = zext <8 x i16> %98 to <8 x i32>
  %100 = mul nuw nsw <8 x i32> %48, %99
  %101 = add nuw nsw <8 x i32> %50, %100
  %102 = lshr <8 x i32> %101, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %31, i64 48
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !843, !noalias !840
  %106 = load <8 x i16>, <8 x i16>* %28, align 2, !alias.scope !840
  %107 = zext <8 x i16> %106 to <8 x i32>
  %108 = mul nuw nsw <8 x i32> %48, %107
  %109 = add nuw nsw <8 x i32> %50, %108
  %110 = lshr <8 x i32> %109, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %111 = trunc <8 x i32> %110 to <8 x i16>
  %112 = getelementptr inbounds i16, i16* %31, i64 56
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %113, align 2, !alias.scope !843, !noalias !840
  br label %115

114:                                              ; preds = %115
  ret void

115:                                              ; preds = %119, %46
  %116 = getelementptr inbounds i16, i16* %31, i64 %10
  %117 = add nuw nsw i64 %30, 1
  %118 = icmp eq i64 %117, 64
  br i1 %118, label %114, label %29

119:                                              ; preds = %29, %119
  %120 = phi i64 [ %138, %119 ], [ 0, %29 ]
  %121 = getelementptr inbounds i16, i16* %5, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %123, %35
  %125 = add nuw nsw i32 %39, %124
  %126 = lshr i32 %125, 8
  %127 = trunc i32 %126 to i16
  %128 = getelementptr inbounds i16, i16* %31, i64 %120
  store i16 %127, i16* %128, align 2
  %129 = or i64 %120, 1
  %130 = getelementptr inbounds i16, i16* %5, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = mul nuw nsw i32 %132, %35
  %134 = add nuw nsw i32 %39, %133
  %135 = lshr i32 %134, 8
  %136 = trunc i32 %135 to i16
  %137 = getelementptr inbounds i16, i16* %31, i64 %129
  store i16 %136, i16* %137, align 2
  %138 = add nuw nsw i64 %120, 2
  %139 = icmp eq i64 %138, 64
  br i1 %139, label %115, label %119, !llvm.loop !845
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_116IntraPredFuncs_CILi64ELi64EtE16SmoothHorizontalEPvlPKvS6_(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) #3 align 2 {
  %5 = bitcast i8* %3 to i16*
  %6 = getelementptr inbounds i8, i8* %2, i64 126
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = zext i16 %8 to i32
  %12 = and i64 %1, -2
  %13 = insertelement <8 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> zeroinitializer
  %15 = mul nuw nsw <8 x i32> %14, <i32 1, i32 8, i32 16, i32 23, i32 31, i32 38, i32 46, i32 53>
  %16 = add nuw nsw <8 x i32> %15, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %17 = mul nuw nsw <8 x i32> %14, <i32 60, i32 67, i32 74, i32 80, i32 87, i32 93, i32 100, i32 106>
  %18 = add nuw nsw <8 x i32> %17, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %19 = mul nuw nsw <8 x i32> %14, <i32 112, i32 118, i32 123, i32 129, i32 135, i32 140, i32 145, i32 150>
  %20 = add nuw nsw <8 x i32> %19, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %21 = mul nuw nsw <8 x i32> %14, <i32 155, i32 160, i32 165, i32 170, i32 174, i32 179, i32 183, i32 187>
  %22 = add nuw nsw <8 x i32> %21, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %23 = mul nuw nsw <8 x i32> %14, <i32 191, i32 195, i32 199, i32 202, i32 206, i32 209, i32 212, i32 215>
  %24 = add nuw nsw <8 x i32> %23, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %25 = mul nuw nsw <8 x i32> %14, <i32 218, i32 221, i32 224, i32 227, i32 229, i32 231, i32 234, i32 236>
  %26 = add nuw nsw <8 x i32> %25, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %27 = mul nuw nsw <8 x i32> %14, <i32 238, i32 240, i32 241, i32 243, i32 244, i32 246, i32 247, i32 248>
  %28 = add nuw nsw <8 x i32> %27, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %29 = mul nuw nsw <8 x i32> %14, <i32 249, i32 250, i32 250, i32 251, i32 251, i32 252, i32 252, i32 252>
  %30 = add nuw nsw <8 x i32> %29, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  br label %31

31:                                               ; preds = %127, %4
  %32 = phi i64 [ 0, %4 ], [ %129, %127 ]
  %33 = phi i16* [ %9, %4 ], [ %128, %127 ]
  %34 = mul i64 %12, %32
  %35 = getelementptr inbounds i16, i16* %5, i64 %32
  %36 = shl nuw nsw i64 %32, 1
  %37 = or i64 %36, 1
  %38 = getelementptr i8, i8* %3, i64 %37
  %39 = add i64 %34, 128
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = getelementptr i8, i8* %0, i64 %34
  %42 = bitcast i16* %35 to i8*
  %43 = icmp ult i8* %41, %38
  %44 = icmp ugt i8* %40, %42
  %45 = and i1 %43, %44
  br i1 %45, label %131, label %46

46:                                               ; preds = %31
  %47 = load i16, i16* %35, align 2, !alias.scope !846
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = zext <8 x i16> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %50, <i32 255, i32 248, i32 240, i32 233, i32 225, i32 218, i32 210, i32 203>
  %52 = add nuw nsw <8 x i32> %16, %51
  %53 = lshr <8 x i32> %52, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %54 = trunc <8 x i32> %53 to <8 x i16>
  %55 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 2, !alias.scope !849, !noalias !846
  %56 = load i16, i16* %35, align 2, !alias.scope !846
  %57 = insertelement <8 x i16> undef, i16 %56, i32 0
  %58 = shufflevector <8 x i16> %57, <8 x i16> undef, <8 x i32> zeroinitializer
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %59, <i32 196, i32 189, i32 182, i32 176, i32 169, i32 163, i32 156, i32 150>
  %61 = add nuw nsw <8 x i32> %18, %60
  %62 = lshr <8 x i32> %61, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %63 = trunc <8 x i32> %62 to <8 x i16>
  %64 = getelementptr inbounds i16, i16* %33, i64 8
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 2, !alias.scope !849, !noalias !846
  %66 = load i16, i16* %35, align 2, !alias.scope !846
  %67 = insertelement <8 x i16> undef, i16 %66, i32 0
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> zeroinitializer
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %69, <i32 144, i32 138, i32 133, i32 127, i32 121, i32 116, i32 111, i32 106>
  %71 = add nuw nsw <8 x i32> %20, %70
  %72 = lshr <8 x i32> %71, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !849, !noalias !846
  %76 = load i16, i16* %35, align 2, !alias.scope !846
  %77 = insertelement <8 x i16> undef, i16 %76, i32 0
  %78 = shufflevector <8 x i16> %77, <8 x i16> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i16> %78 to <8 x i32>
  %80 = mul nuw nsw <8 x i32> %79, <i32 101, i32 96, i32 91, i32 86, i32 82, i32 77, i32 73, i32 69>
  %81 = add nuw nsw <8 x i32> %22, %80
  %82 = lshr <8 x i32> %81, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %83 = trunc <8 x i32> %82 to <8 x i16>
  %84 = getelementptr inbounds i16, i16* %33, i64 24
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %85, align 2, !alias.scope !849, !noalias !846
  %86 = load i16, i16* %35, align 2, !alias.scope !846
  %87 = insertelement <8 x i16> undef, i16 %86, i32 0
  %88 = shufflevector <8 x i16> %87, <8 x i16> undef, <8 x i32> zeroinitializer
  %89 = zext <8 x i16> %88 to <8 x i32>
  %90 = mul nuw nsw <8 x i32> %89, <i32 65, i32 61, i32 57, i32 54, i32 50, i32 47, i32 44, i32 41>
  %91 = add nuw nsw <8 x i32> %24, %90
  %92 = lshr <8 x i32> %91, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %93 = trunc <8 x i32> %92 to <8 x i16>
  %94 = getelementptr inbounds i16, i16* %33, i64 32
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %95, align 2, !alias.scope !849, !noalias !846
  %96 = load i16, i16* %35, align 2, !alias.scope !846
  %97 = insertelement <8 x i16> undef, i16 %96, i32 0
  %98 = shufflevector <8 x i16> %97, <8 x i16> undef, <8 x i32> zeroinitializer
  %99 = zext <8 x i16> %98 to <8 x i32>
  %100 = mul nuw nsw <8 x i32> %99, <i32 38, i32 35, i32 32, i32 29, i32 27, i32 25, i32 22, i32 20>
  %101 = add nuw nsw <8 x i32> %26, %100
  %102 = lshr <8 x i32> %101, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 40
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !849, !noalias !846
  %106 = load i16, i16* %35, align 2, !alias.scope !846
  %107 = insertelement <8 x i16> undef, i16 %106, i32 0
  %108 = shufflevector <8 x i16> %107, <8 x i16> undef, <8 x i32> zeroinitializer
  %109 = zext <8 x i16> %108 to <8 x i32>
  %110 = mul nuw nsw <8 x i32> %109, <i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 8>
  %111 = add nuw nsw <8 x i32> %28, %110
  %112 = lshr <8 x i32> %111, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %113 = trunc <8 x i32> %112 to <8 x i16>
  %114 = getelementptr inbounds i16, i16* %33, i64 48
  %115 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %115, align 2, !alias.scope !849, !noalias !846
  %116 = load i16, i16* %35, align 2, !alias.scope !846
  %117 = insertelement <8 x i16> undef, i16 %116, i32 0
  %118 = shufflevector <8 x i16> %117, <8 x i16> undef, <8 x i32> zeroinitializer
  %119 = zext <8 x i16> %118 to <8 x i32>
  %120 = mul nuw nsw <8 x i32> %119, <i32 7, i32 6, i32 6, i32 5, i32 5, i32 4, i32 4, i32 4>
  %121 = add nuw nsw <8 x i32> %30, %120
  %122 = lshr <8 x i32> %121, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %123 = trunc <8 x i32> %122 to <8 x i16>
  %124 = getelementptr inbounds i16, i16* %33, i64 56
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %125, align 2, !alias.scope !849, !noalias !846
  br label %127

126:                                              ; preds = %127
  ret void

127:                                              ; preds = %131, %46
  %128 = getelementptr inbounds i16, i16* %33, i64 %10
  %129 = add nuw nsw i64 %32, 1
  %130 = icmp eq i64 %129, 64
  br i1 %130, label %126, label %31

131:                                              ; preds = %31, %131
  %132 = phi i64 [ %162, %131 ], [ 0, %31 ]
  %133 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %132
  %134 = load i8, i8* %133, align 2
  %135 = zext i8 %134 to i32
  %136 = load i16, i16* %35, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %137, %135
  %139 = sub i8 0, %134
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %140, %11
  %142 = add nuw nsw i32 %141, 128
  %143 = add nuw nsw i32 %142, %138
  %144 = lshr i32 %143, 8
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds i16, i16* %33, i64 %132
  store i16 %145, i16* %146, align 2
  %147 = or i64 %132, 1
  %148 = getelementptr inbounds i8, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_114kSmoothWeightsE, i64 0, i64 60), i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = load i16, i16* %35, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %152, %150
  %154 = sub i8 0, %149
  %155 = zext i8 %154 to i32
  %156 = mul nuw nsw i32 %155, %11
  %157 = add nuw nsw i32 %156, 128
  %158 = add nuw nsw i32 %157, %153
  %159 = lshr i32 %158, 8
  %160 = trunc i32 %159 to i16
  %161 = getelementptr inbounds i16, i16* %33, i64 %147
  store i16 %160, i16* %161, align 2
  %162 = add nuw nsw i64 %132, 2
  %163 = icmp eq i64 %162, 64
  br i1 %163, label %127, label %131, !llvm.loop !851
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone1_CItEEvPvlPKviiib(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i1 zeroext) #0 {
  %8 = bitcast i8* %2 to i16*
  %9 = bitcast i8* %0 to i16*
  %10 = lshr i64 %1, 1
  %11 = icmp eq i32 %5, 64
  br i1 %11, label %12, label %46

12:                                               ; preds = %7
  %13 = icmp sgt i32 %4, 0
  br i1 %13, label %14, label %293

14:                                               ; preds = %12
  %15 = getelementptr inbounds i8, i8* %2, i64 2
  %16 = bitcast i8* %15 to i16*
  %17 = sext i32 %3 to i64
  %18 = shl nsw i64 %17, 1
  %19 = add i32 %4, -1
  %20 = and i32 %4, 3
  %21 = icmp ult i32 %19, 3
  br i1 %21, label %279, label %22

22:                                               ; preds = %14
  %23 = sub i32 %4, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i16* [ %16, %22 ], [ %43, %24 ]
  %26 = phi i16* [ %9, %22 ], [ %42, %24 ]
  %27 = phi i32 [ %23, %22 ], [ %44, %24 ]
  %28 = bitcast i16* %26 to i8*
  %29 = bitcast i16* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %28, i8* align 2 %29, i64 %18, i1 false)
  %30 = getelementptr inbounds i16, i16* %26, i64 %10
  %31 = getelementptr inbounds i16, i16* %25, i64 1
  %32 = bitcast i16* %30 to i8*
  %33 = bitcast i16* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %32, i8* align 2 %33, i64 %18, i1 false)
  %34 = getelementptr inbounds i16, i16* %30, i64 %10
  %35 = getelementptr inbounds i16, i16* %25, i64 2
  %36 = bitcast i16* %34 to i8*
  %37 = bitcast i16* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %36, i8* align 2 %37, i64 %18, i1 false)
  %38 = getelementptr inbounds i16, i16* %34, i64 %10
  %39 = getelementptr inbounds i16, i16* %25, i64 3
  %40 = bitcast i16* %38 to i8*
  %41 = bitcast i16* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %40, i8* align 2 %41, i64 %18, i1 false)
  %42 = getelementptr inbounds i16, i16* %38, i64 %10
  %43 = getelementptr inbounds i16, i16* %25, i64 4
  %44 = add i32 %27, -4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %279, label %24

46:                                               ; preds = %7
  %47 = zext i1 %6 to i32
  %48 = add i32 %3, -1
  %49 = add i32 %48, %4
  %50 = shl i32 %49, %47
  %51 = select i1 %6, i32 5, i32 6
  %52 = shl i32 1, %47
  %53 = sext i32 %50 to i64
  %54 = getelementptr inbounds i16, i16* %8, i64 %53
  %55 = zext i32 %52 to i64
  %56 = sext i32 %3 to i64
  br label %57

57:                                               ; preds = %274, %46
  %58 = phi i16* [ %9, %46 ], [ %275, %274 ]
  %59 = phi i32 [ %5, %46 ], [ %276, %274 ]
  %60 = phi i32 [ 0, %46 ], [ %277, %274 ]
  %61 = ashr i32 %59, %51
  %62 = icmp slt i32 %61, %50
  br i1 %62, label %156, label %63

63:                                               ; preds = %57
  %64 = icmp slt i32 %60, %4
  br i1 %64, label %65, label %293

65:                                               ; preds = %63
  %66 = icmp eq i32 %3, 0
  %67 = add nsw i64 %56, -16
  %68 = lshr i64 %67, 4
  %69 = add nuw nsw i64 %68, 1
  %70 = icmp ult i32 %3, 16
  %71 = and i64 %56, -16
  %72 = and i64 %69, 7
  %73 = icmp ult i64 %67, 112
  %74 = sub nsw i64 %69, %72
  %75 = icmp eq i64 %72, 0
  %76 = icmp eq i64 %71, %56
  br label %77

77:                                               ; preds = %152, %65
  %78 = phi i32 [ %60, %65 ], [ %154, %152 ]
  %79 = phi i16* [ %58, %65 ], [ %153, %152 ]
  %80 = load i16, i16* %54, align 2
  br i1 %66, label %152, label %81

81:                                               ; preds = %77
  br i1 %70, label %145, label %82

82:                                               ; preds = %81
  %83 = insertelement <8 x i16> undef, i16 %80, i32 0
  %84 = shufflevector <8 x i16> %83, <8 x i16> undef, <8 x i32> zeroinitializer
  %85 = insertelement <8 x i16> undef, i16 %80, i32 0
  %86 = shufflevector <8 x i16> %85, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %73, label %132, label %87

87:                                               ; preds = %82, %87
  %88 = phi i64 [ %129, %87 ], [ 0, %82 ]
  %89 = phi i64 [ %130, %87 ], [ %74, %82 ]
  %90 = getelementptr inbounds i16, i16* %79, i64 %88
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds i16, i16* %90, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %93, align 2
  %94 = or i64 %88, 16
  %95 = getelementptr inbounds i16, i16* %79, i64 %94
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds i16, i16* %95, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %98, align 2
  %99 = or i64 %88, 32
  %100 = getelementptr inbounds i16, i16* %79, i64 %99
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds i16, i16* %100, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %103, align 2
  %104 = or i64 %88, 48
  %105 = getelementptr inbounds i16, i16* %79, i64 %104
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds i16, i16* %105, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %108, align 2
  %109 = or i64 %88, 64
  %110 = getelementptr inbounds i16, i16* %79, i64 %109
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i16, i16* %110, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %113, align 2
  %114 = or i64 %88, 80
  %115 = getelementptr inbounds i16, i16* %79, i64 %114
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds i16, i16* %115, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %118, align 2
  %119 = or i64 %88, 96
  %120 = getelementptr inbounds i16, i16* %79, i64 %119
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds i16, i16* %120, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %123, align 2
  %124 = or i64 %88, 112
  %125 = getelementptr inbounds i16, i16* %79, i64 %124
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds i16, i16* %125, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %128, align 2
  %129 = add i64 %88, 128
  %130 = add i64 %89, -8
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %87, !llvm.loop !852

132:                                              ; preds = %87, %82
  %133 = phi i64 [ 0, %82 ], [ %129, %87 ]
  br i1 %75, label %144, label %134

134:                                              ; preds = %132, %134
  %135 = phi i64 [ %141, %134 ], [ %133, %132 ]
  %136 = phi i64 [ %142, %134 ], [ %72, %132 ]
  %137 = getelementptr inbounds i16, i16* %79, i64 %135
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds i16, i16* %137, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %140, align 2
  %141 = add i64 %135, 16
  %142 = add i64 %136, -1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %134, !llvm.loop !853

144:                                              ; preds = %134, %132
  br i1 %76, label %152, label %145

145:                                              ; preds = %144, %81
  %146 = phi i64 [ 0, %81 ], [ %71, %144 ]
  br label %147

147:                                              ; preds = %145, %147
  %148 = phi i64 [ %150, %147 ], [ %146, %145 ]
  %149 = getelementptr inbounds i16, i16* %79, i64 %148
  store i16 %80, i16* %149, align 2
  %150 = add nuw i64 %148, 1
  %151 = icmp eq i64 %150, %56
  br i1 %151, label %152, label %147, !llvm.loop !854

152:                                              ; preds = %147, %144, %77
  %153 = getelementptr inbounds i16, i16* %79, i64 %10
  %154 = add nuw nsw i32 %78, 1
  %155 = icmp eq i32 %154, %4
  br i1 %155, label %293, label %77

156:                                              ; preds = %57
  %157 = shl i32 %59, %47
  %158 = lshr i32 %157, 1
  %159 = and i32 %158, 31
  %160 = sub nuw nsw i32 32, %159
  %161 = sext i32 %61 to i64
  br label %162

162:                                              ; preds = %256, %156
  %163 = phi i64 [ %272, %256 ], [ 0, %156 ]
  %164 = phi i64 [ %271, %256 ], [ %161, %156 ]
  %165 = icmp slt i64 %164, %53
  br i1 %165, label %256, label %166

166:                                              ; preds = %162
  %167 = trunc i64 %163 to i32
  %168 = and i64 %163, 4294967295
  %169 = getelementptr inbounds i16, i16* %58, i64 %168
  %170 = load i16, i16* %54, align 2
  %171 = sub nsw i32 %3, %167
  %172 = sext i32 %171 to i64
  %173 = icmp eq i32 %171, 0
  br i1 %173, label %274, label %174

174:                                              ; preds = %166
  %175 = icmp ult i32 %171, 16
  br i1 %175, label %249, label %176

176:                                              ; preds = %174
  %177 = and i64 %172, -16
  %178 = insertelement <8 x i16> undef, i16 %170, i32 0
  %179 = shufflevector <8 x i16> %178, <8 x i16> undef, <8 x i32> zeroinitializer
  %180 = insertelement <8 x i16> undef, i16 %170, i32 0
  %181 = shufflevector <8 x i16> %180, <8 x i16> undef, <8 x i32> zeroinitializer
  %182 = add nsw i64 %177, -16
  %183 = lshr exact i64 %182, 4
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 7
  %186 = icmp ult i64 %182, 112
  br i1 %186, label %234, label %187

187:                                              ; preds = %176
  %188 = sub nsw i64 %184, %185
  br label %189

189:                                              ; preds = %189, %187
  %190 = phi i64 [ 0, %187 ], [ %231, %189 ]
  %191 = phi i64 [ %188, %187 ], [ %232, %189 ]
  %192 = getelementptr inbounds i16, i16* %169, i64 %190
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds i16, i16* %192, i64 8
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %195, align 2
  %196 = or i64 %190, 16
  %197 = getelementptr inbounds i16, i16* %169, i64 %196
  %198 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds i16, i16* %197, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %200, align 2
  %201 = or i64 %190, 32
  %202 = getelementptr inbounds i16, i16* %169, i64 %201
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %203, align 2
  %204 = getelementptr inbounds i16, i16* %202, i64 8
  %205 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %205, align 2
  %206 = or i64 %190, 48
  %207 = getelementptr inbounds i16, i16* %169, i64 %206
  %208 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %208, align 2
  %209 = getelementptr inbounds i16, i16* %207, i64 8
  %210 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %210, align 2
  %211 = or i64 %190, 64
  %212 = getelementptr inbounds i16, i16* %169, i64 %211
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %213, align 2
  %214 = getelementptr inbounds i16, i16* %212, i64 8
  %215 = bitcast i16* %214 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %215, align 2
  %216 = or i64 %190, 80
  %217 = getelementptr inbounds i16, i16* %169, i64 %216
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %218, align 2
  %219 = getelementptr inbounds i16, i16* %217, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %220, align 2
  %221 = or i64 %190, 96
  %222 = getelementptr inbounds i16, i16* %169, i64 %221
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %223, align 2
  %224 = getelementptr inbounds i16, i16* %222, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %225, align 2
  %226 = or i64 %190, 112
  %227 = getelementptr inbounds i16, i16* %169, i64 %226
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %228, align 2
  %229 = getelementptr inbounds i16, i16* %227, i64 8
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %230, align 2
  %231 = add i64 %190, 128
  %232 = add i64 %191, -8
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %189, !llvm.loop !856

234:                                              ; preds = %189, %176
  %235 = phi i64 [ 0, %176 ], [ %231, %189 ]
  %236 = icmp eq i64 %185, 0
  br i1 %236, label %247, label %237

237:                                              ; preds = %234, %237
  %238 = phi i64 [ %244, %237 ], [ %235, %234 ]
  %239 = phi i64 [ %245, %237 ], [ %185, %234 ]
  %240 = getelementptr inbounds i16, i16* %169, i64 %238
  %241 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %241, align 2
  %242 = getelementptr inbounds i16, i16* %240, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %243, align 2
  %244 = add i64 %238, 16
  %245 = add i64 %239, -1
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %247, label %237, !llvm.loop !857

247:                                              ; preds = %237, %234
  %248 = icmp eq i64 %177, %172
  br i1 %248, label %274, label %249

249:                                              ; preds = %247, %174
  %250 = phi i64 [ 0, %174 ], [ %177, %247 ]
  br label %251

251:                                              ; preds = %249, %251
  %252 = phi i64 [ %254, %251 ], [ %250, %249 ]
  %253 = getelementptr inbounds i16, i16* %169, i64 %252
  store i16 %170, i16* %253, align 2
  %254 = add nuw i64 %252, 1
  %255 = icmp eq i64 %254, %172
  br i1 %255, label %274, label %251, !llvm.loop !858

256:                                              ; preds = %162
  %257 = getelementptr inbounds i16, i16* %8, i64 %164
  %258 = load i16, i16* %257, align 2
  %259 = zext i16 %258 to i32
  %260 = mul nuw nsw i32 %160, %259
  %261 = add nsw i64 %164, 1
  %262 = getelementptr inbounds i16, i16* %8, i64 %261
  %263 = load i16, i16* %262, align 2
  %264 = zext i16 %263 to i32
  %265 = mul nuw nsw i32 %159, %264
  %266 = add nuw nsw i32 %260, 16
  %267 = add nuw nsw i32 %266, %265
  %268 = lshr i32 %267, 5
  %269 = trunc i32 %268 to i16
  %270 = getelementptr inbounds i16, i16* %58, i64 %163
  store i16 %269, i16* %270, align 2
  %271 = add i64 %164, %55
  %272 = add nuw nsw i64 %163, 1
  %273 = icmp slt i64 %272, %56
  br i1 %273, label %162, label %274

274:                                              ; preds = %256, %251, %247, %166
  %275 = getelementptr inbounds i16, i16* %58, i64 %10
  %276 = add nsw i32 %59, %5
  %277 = add nuw nsw i32 %60, 1
  %278 = icmp slt i32 %277, %4
  br i1 %278, label %57, label %293

279:                                              ; preds = %24, %14
  %280 = phi i16* [ %16, %14 ], [ %43, %24 ]
  %281 = phi i16* [ %9, %14 ], [ %42, %24 ]
  %282 = icmp eq i32 %20, 0
  br i1 %282, label %293, label %283

283:                                              ; preds = %279, %283
  %284 = phi i16* [ %290, %283 ], [ %280, %279 ]
  %285 = phi i16* [ %289, %283 ], [ %281, %279 ]
  %286 = phi i32 [ %291, %283 ], [ %20, %279 ]
  %287 = bitcast i16* %285 to i8*
  %288 = bitcast i16* %284 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %287, i8* align 2 %288, i64 %18, i1 false)
  %289 = getelementptr inbounds i16, i16* %285, i64 %10
  %290 = getelementptr inbounds i16, i16* %284, i64 1
  %291 = add i32 %286, -1
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %283, !llvm.loop !859

293:                                              ; preds = %274, %152, %279, %283, %63, %12
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone2_CItEEvPvlPKvS5_iiiibb(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i32, i1 zeroext, i1 zeroext) #3 {
  %11 = bitcast i8* %2 to i16*
  %12 = bitcast i8* %3 to i16*
  %13 = bitcast i8* %0 to i16*
  %14 = lshr i64 %1, 1
  %15 = zext i1 %8 to i32
  %16 = zext i1 %9 to i32
  %17 = select i1 %8, i32 5, i32 6
  %18 = select i1 %9, i32 5, i32 6
  %19 = shl i32 1, %15
  %20 = sub nsw i32 0, %19
  %21 = zext i32 %19 to i64
  %22 = sext i32 %20 to i64
  %23 = sext i32 %4 to i64
  br label %24

24:                                               ; preds = %78, %10
  %25 = phi i16* [ %13, %10 ], [ %79, %78 ]
  %26 = phi i32 [ 0, %10 ], [ %80, %78 ]
  %27 = phi i32 [ 0, %10 ], [ %28, %78 ]
  %28 = sub nsw i32 %27, %6
  %29 = ashr i32 %28, %17
  %30 = shl i32 %26, 6
  %31 = shl i32 %28, %15
  %32 = lshr i32 %31, 1
  %33 = and i32 %32, 31
  %34 = sub nuw nsw i32 32, %33
  %35 = sext i32 %29 to i64
  br label %36

36:                                               ; preds = %63, %24
  %37 = phi i64 [ %76, %63 ], [ 0, %24 ]
  %38 = phi i64 [ %75, %63 ], [ %35, %24 ]
  %39 = phi i32 [ %40, %63 ], [ %30, %24 ]
  %40 = sub nsw i32 %39, %7
  %41 = icmp slt i64 %38, %22
  br i1 %41, label %49, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds i16, i16* %11, i64 %38
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %34, %45
  %47 = add nsw i64 %38, 1
  %48 = getelementptr inbounds i16, i16* %11, i64 %47
  br label %63

49:                                               ; preds = %36
  %50 = ashr i32 %40, %18
  %51 = shl i32 %40, %16
  %52 = lshr i32 %51, 1
  %53 = and i32 %52, 31
  %54 = sext i32 %50 to i64
  %55 = getelementptr inbounds i16, i16* %12, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = sub nuw nsw i32 32, %53
  %59 = mul nuw nsw i32 %58, %57
  %60 = add nsw i32 %50, 1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i16, i16* %12, i64 %61
  br label %63

63:                                               ; preds = %49, %42
  %64 = phi i16* [ %62, %49 ], [ %48, %42 ]
  %65 = phi i32 [ %53, %49 ], [ %33, %42 ]
  %66 = phi i32 [ %59, %49 ], [ %46, %42 ]
  %67 = load i16, i16* %64, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %65, %68
  %70 = add nuw nsw i32 %69, %66
  %71 = add nuw nsw i32 %70, 16
  %72 = lshr i32 %71, 5
  %73 = trunc i32 %72 to i16
  %74 = getelementptr inbounds i16, i16* %25, i64 %37
  store i16 %73, i16* %74, align 2
  %75 = add i64 %38, %21
  %76 = add nuw nsw i64 %37, 1
  %77 = icmp slt i64 %76, %23
  br i1 %77, label %36, label %78

78:                                               ; preds = %63
  %79 = getelementptr inbounds i16, i16* %25, i64 %14
  %80 = add nuw nsw i32 %26, 1
  %81 = icmp slt i32 %80, %5
  br i1 %81, label %24, label %82

82:                                               ; preds = %78
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_132DirectionalIntraPredictorZone3_CItEEvPvlPKviiib(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i1 zeroext) #3 {
  %8 = bitcast i8* %2 to i16*
  %9 = lshr i64 %1, 1
  %10 = zext i1 %6 to i32
  %11 = select i1 %6, i32 5, i32 6
  %12 = shl i32 1, %10
  %13 = bitcast i8* %0 to i16*
  %14 = zext i32 %12 to i64
  %15 = sext i32 %3 to i64
  br label %16

16:                                               ; preds = %47, %7
  %17 = phi i64 [ %49, %47 ], [ 0, %7 ]
  %18 = phi i32 [ %48, %47 ], [ %5, %7 ]
  %19 = ashr i32 %18, %11
  %20 = shl i32 %18, %10
  %21 = lshr i32 %20, 1
  %22 = and i32 %21, 31
  %23 = sub nuw nsw i32 32, %22
  %24 = sext i32 %19 to i64
  br label %25

25:                                               ; preds = %25, %16
  %26 = phi i64 [ %44, %25 ], [ %24, %16 ]
  %27 = phi i16* [ %43, %25 ], [ %13, %16 ]
  %28 = phi i32 [ %45, %25 ], [ 0, %16 ]
  %29 = getelementptr inbounds i16, i16* %8, i64 %26
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = mul nuw nsw i32 %23, %31
  %33 = add nsw i64 %26, 1
  %34 = getelementptr inbounds i16, i16* %8, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = mul nuw nsw i32 %22, %36
  %38 = add nuw nsw i32 %32, 16
  %39 = add nuw nsw i32 %38, %37
  %40 = lshr i32 %39, 5
  %41 = trunc i32 %40 to i16
  %42 = getelementptr inbounds i16, i16* %27, i64 %17
  store i16 %41, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %27, i64 %9
  %44 = add i64 %26, %14
  %45 = add nuw nsw i32 %28, 1
  %46 = icmp slt i32 %45, %4
  br i1 %46, label %25, label %47

47:                                               ; preds = %25
  %48 = add nsw i32 %18, %5
  %49 = add nuw nsw i64 %17, 1
  %50 = icmp slt i64 %49, %15
  br i1 %50, label %16, label %51

51:                                               ; preds = %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_122FilterIntraPredictor_CILi10EtEEvPvlPKvS5_NS_20FilterIntraPredictorEii(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly, i8 zeroext, i32, i32) #0 {
  %8 = alloca [3 x [33 x i16]], align 16
  %9 = bitcast i8* %3 to i16*
  %10 = bitcast [3 x [33 x i16]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 198, i8* nonnull %10) #5
  %11 = getelementptr inbounds i8, i8* %2, i64 -2
  %12 = add nsw i32 %5, 1
  %13 = sext i32 %12 to i64
  %14 = shl nsw i64 %13, 1
  %15 = icmp ugt i64 %14, 197
  %16 = sub nsw i64 198, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = getelementptr i8, i8* %10, i64 %14
  call void @llvm.memset.p0i8.i64(i8* align 2 %18, i8 -86, i64 %17, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* align 2 %11, i64 %14, i1 false)
  %19 = bitcast i8* %0 to i16*
  %20 = lshr i64 %1, 1
  %21 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 1, i64 0
  %22 = zext i8 %4 to i64
  %23 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 1, i64 1
  %24 = bitcast i16* %23 to i8*
  %25 = sext i32 %5 to i64
  %26 = shl nsw i64 %25, 1
  %27 = sext i32 %6 to i64
  br label %28

28:                                               ; preds = %128, %7
  %29 = phi i64 [ %138, %128 ], [ 0, %7 ]
  %30 = phi i32 [ %135, %128 ], [ 0, %7 ]
  %31 = phi i32 [ %136, %128 ], [ 2, %7 ]
  %32 = phi i32 [ %137, %128 ], [ 1, %7 ]
  %33 = phi i16* [ %134, %128 ], [ %19, %7 ]
  %34 = getelementptr inbounds i16, i16* %9, i64 %29
  %35 = load i16, i16* %34, align 2
  store i16 %35, i16* %21, align 2
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds i16, i16* %9, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = sext i32 %31 to i64
  %40 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 %39, i64 0
  store i16 %38, i16* %40, align 2
  %41 = sext i32 %30 to i64
  br label %42

42:                                               ; preds = %71, %28
  %43 = phi i16 [ %73, %71 ], [ %38, %28 ]
  %44 = phi i64 [ %69, %71 ], [ 1, %28 ]
  %45 = add nsw i64 %44, -1
  %46 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 %41, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 %41, i64 %44
  %49 = load i16, i16* %48, align 2
  %50 = add nuw nsw i64 %44, 1
  %51 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 %41, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = add nuw nsw i64 %44, 2
  %54 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 %41, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = add nuw nsw i64 %44, 3
  %57 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 %41, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 1, i64 %45
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %47 to i32
  %62 = zext i16 %49 to i32
  %63 = zext i16 %52 to i32
  %64 = zext i16 %55 to i32
  %65 = zext i16 %58 to i32
  %66 = zext i16 %60 to i32
  %67 = zext i16 %43 to i32
  br label %74

68:                                               ; preds = %74
  %69 = add nuw nsw i64 %44, 4
  %70 = icmp slt i64 %69, %25
  br i1 %70, label %71, label %128

71:                                               ; preds = %68
  %72 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 %39, i64 %56
  %73 = load i16, i16* %72, align 2
  br label %42

74:                                               ; preds = %74, %42
  %75 = phi i64 [ 0, %42 ], [ %126, %74 ]
  %76 = trunc i64 %75 to i32
  %77 = and i64 %75, 3
  %78 = lshr i32 %76, 2
  %79 = mul nsw i32 %78, %32
  %80 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %22, i64 %75, i64 0
  %81 = load i8, i8* %80, align 8
  %82 = sext i8 %81 to i32
  %83 = mul nsw i32 %82, %61
  %84 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %22, i64 %75, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = mul nsw i32 %86, %62
  %88 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %22, i64 %75, i64 2
  %89 = load i8, i8* %88, align 2
  %90 = sext i8 %89 to i32
  %91 = mul nsw i32 %90, %63
  %92 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %22, i64 %75, i64 3
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = mul nsw i32 %94, %64
  %96 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %22, i64 %75, i64 4
  %97 = load i8, i8* %96, align 4
  %98 = sext i8 %97 to i32
  %99 = mul nsw i32 %98, %65
  %100 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %22, i64 %75, i64 5
  %101 = load i8, i8* %100, align 1
  %102 = sext i8 %101 to i32
  %103 = mul nsw i32 %102, %66
  %104 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @_ZN7libgav116kFilterIntraTapsE, i64 0, i64 %22, i64 %75, i64 6
  %105 = load i8, i8* %104, align 2
  %106 = sext i8 %105 to i32
  %107 = mul nsw i32 %106, %67
  %108 = add nsw i32 %83, 8
  %109 = add nsw i32 %108, %87
  %110 = add nsw i32 %109, %91
  %111 = add nsw i32 %110, %95
  %112 = add nsw i32 %111, %99
  %113 = add i32 %112, %103
  %114 = add i32 %113, %107
  %115 = ashr i32 %114, 4
  %116 = icmp slt i32 %115, 1023
  %117 = select i1 %116, i32 %115, i32 1023
  %118 = icmp sgt i32 %117, 0
  %119 = select i1 %118, i32 %117, i32 0
  %120 = trunc i32 %119 to i16
  %121 = add nsw i32 %79, 1
  %122 = sext i32 %121 to i64
  %123 = add nuw i64 %77, %44
  %124 = and i64 %123, 4294967295
  %125 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 %122, i64 %124
  store i16 %120, i16* %125, align 2
  %126 = add nuw nsw i64 %75, 1
  %127 = icmp eq i64 %126, 8
  br i1 %127, label %68, label %74

128:                                              ; preds = %68
  %129 = bitcast i16* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %129, i8* align 2 %24, i64 %26, i1 false)
  %130 = getelementptr inbounds i16, i16* %33, i64 %20
  %131 = bitcast i16* %130 to i8*
  %132 = getelementptr inbounds [3 x [33 x i16]], [3 x [33 x i16]]* %8, i64 0, i64 %39, i64 1
  %133 = bitcast i16* %132 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %131, i8* align 2 %133, i64 %26, i1 false)
  %134 = getelementptr inbounds i16, i16* %130, i64 %20
  %135 = xor i32 %30, 2
  %136 = xor i32 %31, 2
  %137 = sub nsw i32 0, %32
  %138 = add nuw nsw i64 %29, 2
  %139 = icmp slt i64 %138, %27
  br i1 %139, label %28, label %140

140:                                              ; preds = %128
  call void @llvm.lifetime.end.p0i8(i64 198, i8* nonnull %10) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi4ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %72, %9 ]
  %11 = phi i16* [ %5, %4 ], [ %71, %9 ]
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 0
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = mul nsw i32 %14, %3
  %16 = ashr i32 %15, 31
  %17 = add i32 %15, 32
  %18 = add i32 %17, %16
  %19 = ashr i32 %18, 6
  %20 = add nsw i32 %19, %7
  %21 = icmp slt i32 %20, 1023
  %22 = select i1 %21, i32 %20, i32 1023
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 %22, i32 0
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %11, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 1
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %3
  %30 = ashr i32 %29, 31
  %31 = add i32 %29, 32
  %32 = add i32 %31, %30
  %33 = ashr i32 %32, 6
  %34 = add nsw i32 %33, %7
  %35 = icmp slt i32 %34, 1023
  %36 = select i1 %35, i32 %34, i32 1023
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds i16, i16* %11, i64 1
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 2
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %43, %3
  %45 = ashr i32 %44, 31
  %46 = add i32 %44, 32
  %47 = add i32 %46, %45
  %48 = ashr i32 %47, 6
  %49 = add nsw i32 %48, %7
  %50 = icmp slt i32 %49, 1023
  %51 = select i1 %50, i32 %49, i32 1023
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %11, i64 2
  store i16 %54, i16* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %58, %3
  %60 = ashr i32 %59, 31
  %61 = add i32 %59, 32
  %62 = add i32 %61, %60
  %63 = ashr i32 %62, 6
  %64 = add nsw i32 %63, %7
  %65 = icmp slt i32 %64, 1023
  %66 = select i1 %65, i32 %64, i32 1023
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %11, i64 3
  store i16 %69, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %11, i64 %8
  %72 = add nuw nsw i64 %10, 1
  %73 = icmp eq i64 %72, 4
  br i1 %73, label %74, label %9

74:                                               ; preds = %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i16, i16* %6, i64 %12
  %14 = load i16, i16* %13, align 2
  %15 = shl i16 %14, 3
  %16 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  store i16 %15, i16* %16, align 2
  %17 = sext i16 %15 to i32
  %18 = icmp slt i32 %8, 1
  %19 = select i1 %18, i32 %8, i32 1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i16, i16* %6, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = shl i16 %22, 3
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  store i16 %23, i16* %24, align 2
  %25 = sext i16 %23 to i32
  %26 = add nsw i32 %17, %25
  %27 = icmp slt i32 %8, 2
  %28 = select i1 %27, i32 %8, i32 2
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i16, i16* %6, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = shl i16 %31, 3
  %33 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  store i16 %32, i16* %33, align 2
  %34 = sext i16 %32 to i32
  %35 = add nsw i32 %26, %34
  %36 = icmp slt i32 %8, 3
  %37 = select i1 %36, i32 %8, i32 3
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %6, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = shl i16 %40, 3
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  store i16 %41, i16* %42, align 2
  %43 = sext i16 %41 to i32
  %44 = add nsw i32 %35, %43
  %45 = icmp sgt i32 %9, 0
  %46 = getelementptr inbounds i16, i16* %6, i64 %7
  %47 = select i1 %45, i16* %46, i16* %6
  %48 = getelementptr inbounds i16, i16* %47, i64 %12
  %49 = load i16, i16* %48, align 2
  %50 = shl i16 %49, 3
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  store i16 %50, i16* %51, align 2
  %52 = sext i16 %50 to i32
  %53 = add nsw i32 %44, %52
  %54 = getelementptr inbounds i16, i16* %47, i64 %20
  %55 = load i16, i16* %54, align 2
  %56 = shl i16 %55, 3
  %57 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  store i16 %56, i16* %57, align 2
  %58 = sext i16 %56 to i32
  %59 = add nsw i32 %53, %58
  %60 = getelementptr inbounds i16, i16* %47, i64 %29
  %61 = load i16, i16* %60, align 2
  %62 = shl i16 %61, 3
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  store i16 %62, i16* %63, align 2
  %64 = sext i16 %62 to i32
  %65 = add nsw i32 %59, %64
  %66 = getelementptr inbounds i16, i16* %47, i64 %38
  %67 = load i16, i16* %66, align 2
  %68 = shl i16 %67, 3
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  store i16 %68, i16* %69, align 2
  %70 = sext i16 %68 to i32
  %71 = add nsw i32 %65, %70
  %72 = icmp sgt i32 %9, 1
  %73 = getelementptr inbounds i16, i16* %47, i64 %7
  %74 = select i1 %72, i16* %73, i16* %47
  %75 = getelementptr inbounds i16, i16* %74, i64 %12
  %76 = load i16, i16* %75, align 2
  %77 = shl i16 %76, 3
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  store i16 %77, i16* %78, align 2
  %79 = sext i16 %77 to i32
  %80 = add nsw i32 %71, %79
  %81 = getelementptr inbounds i16, i16* %74, i64 %20
  %82 = load i16, i16* %81, align 2
  %83 = shl i16 %82, 3
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  store i16 %83, i16* %84, align 2
  %85 = sext i16 %83 to i32
  %86 = add nsw i32 %80, %85
  %87 = getelementptr inbounds i16, i16* %74, i64 %29
  %88 = load i16, i16* %87, align 2
  %89 = shl i16 %88, 3
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  store i16 %89, i16* %90, align 2
  %91 = sext i16 %89 to i32
  %92 = add nsw i32 %86, %91
  %93 = getelementptr inbounds i16, i16* %74, i64 %38
  %94 = load i16, i16* %93, align 2
  %95 = shl i16 %94, 3
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  store i16 %95, i16* %96, align 2
  %97 = sext i16 %95 to i32
  %98 = add nsw i32 %92, %97
  %99 = icmp sgt i32 %9, 2
  %100 = getelementptr inbounds i16, i16* %74, i64 %7
  %101 = select i1 %99, i16* %100, i16* %74
  %102 = getelementptr inbounds i16, i16* %101, i64 %12
  %103 = load i16, i16* %102, align 2
  %104 = shl i16 %103, 3
  %105 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  store i16 %104, i16* %105, align 2
  %106 = sext i16 %104 to i32
  %107 = add nsw i32 %98, %106
  %108 = getelementptr inbounds i16, i16* %101, i64 %20
  %109 = load i16, i16* %108, align 2
  %110 = shl i16 %109, 3
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  store i16 %110, i16* %111, align 2
  %112 = sext i16 %110 to i32
  %113 = add nsw i32 %107, %112
  %114 = getelementptr inbounds i16, i16* %101, i64 %29
  %115 = load i16, i16* %114, align 2
  %116 = shl i16 %115, 3
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  store i16 %116, i16* %117, align 2
  %118 = sext i16 %116 to i32
  %119 = add nsw i32 %113, %118
  %120 = getelementptr inbounds i16, i16* %101, i64 %38
  %121 = load i16, i16* %120, align 2
  %122 = shl i16 %121, 3
  %123 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %124 = sext i16 %122 to i32
  %125 = add nsw i32 %119, %124
  %126 = add nsw i32 %125, 8
  %127 = lshr i32 %126, 4
  %128 = trunc i32 %127 to i16
  %129 = load i16, i16* %16, align 2
  %130 = sub i16 %129, %128
  store i16 %130, i16* %16, align 2
  %131 = load i16, i16* %24, align 2
  %132 = sub i16 %131, %128
  store i16 %132, i16* %24, align 2
  %133 = load i16, i16* %33, align 2
  %134 = sub i16 %133, %128
  store i16 %134, i16* %33, align 2
  %135 = load i16, i16* %42, align 2
  %136 = sub i16 %135, %128
  store i16 %136, i16* %42, align 2
  %137 = load i16, i16* %51, align 2
  %138 = sub i16 %137, %128
  store i16 %138, i16* %51, align 2
  %139 = sub i16 %56, %128
  store i16 %139, i16* %57, align 2
  %140 = sub i16 %62, %128
  store i16 %140, i16* %63, align 2
  %141 = sub i16 %68, %128
  store i16 %141, i16* %69, align 2
  %142 = sub i16 %77, %128
  store i16 %142, i16* %78, align 2
  %143 = sub i16 %83, %128
  store i16 %143, i16* %84, align 2
  %144 = sub i16 %89, %128
  store i16 %144, i16* %90, align 2
  %145 = sub i16 %95, %128
  store i16 %145, i16* %96, align 2
  %146 = sub i16 %104, %128
  store i16 %146, i16* %105, align 2
  %147 = sub i16 %110, %128
  store i16 %147, i16* %111, align 2
  %148 = sub i16 %116, %128
  store i16 %148, i16* %117, align 2
  %149 = sub i16 %122, %128
  store i16 %149, i16* %123, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = add nsw i64 %12, 1
  %14 = icmp slt i32 %8, 2
  %15 = select i1 %14, i32 %8, i32 2
  %16 = sext i32 %15 to i64
  %17 = add nsw i64 %16, 1
  %18 = icmp slt i32 %8, 4
  %19 = select i1 %18, i32 %8, i32 4
  %20 = sext i32 %19 to i64
  %21 = add nsw i64 %20, 1
  %22 = icmp slt i32 %8, 6
  %23 = select i1 %22, i32 %8, i32 6
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, 1
  %26 = getelementptr inbounds i16, i16* %6, i64 %12
  %27 = load i16, i16* %26, align 2
  %28 = getelementptr inbounds i16, i16* %6, i64 %13
  %29 = load i16, i16* %28, align 2
  %30 = add i16 %29, %27
  %31 = shl i16 %30, 2
  %32 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  store i16 %31, i16* %32, align 2
  %33 = sext i16 %31 to i32
  %34 = getelementptr inbounds i16, i16* %6, i64 %16
  %35 = load i16, i16* %34, align 2
  %36 = getelementptr inbounds i16, i16* %6, i64 %17
  %37 = load i16, i16* %36, align 2
  %38 = add i16 %37, %35
  %39 = shl i16 %38, 2
  %40 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  store i16 %39, i16* %40, align 2
  %41 = sext i16 %39 to i32
  %42 = add nsw i32 %33, %41
  %43 = getelementptr inbounds i16, i16* %6, i64 %20
  %44 = load i16, i16* %43, align 2
  %45 = getelementptr inbounds i16, i16* %6, i64 %21
  %46 = load i16, i16* %45, align 2
  %47 = add i16 %46, %44
  %48 = shl i16 %47, 2
  %49 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  store i16 %48, i16* %49, align 2
  %50 = sext i16 %48 to i32
  %51 = add nsw i32 %42, %50
  %52 = getelementptr inbounds i16, i16* %6, i64 %24
  %53 = load i16, i16* %52, align 2
  %54 = getelementptr inbounds i16, i16* %6, i64 %25
  %55 = load i16, i16* %54, align 2
  %56 = add i16 %55, %53
  %57 = shl i16 %56, 2
  %58 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  store i16 %57, i16* %58, align 2
  %59 = sext i16 %57 to i32
  %60 = add nsw i32 %51, %59
  %61 = icmp sgt i32 %9, 0
  %62 = getelementptr inbounds i16, i16* %6, i64 %7
  %63 = select i1 %61, i16* %62, i16* %6
  %64 = getelementptr inbounds i16, i16* %63, i64 %12
  %65 = load i16, i16* %64, align 2
  %66 = getelementptr inbounds i16, i16* %63, i64 %13
  %67 = load i16, i16* %66, align 2
  %68 = add i16 %67, %65
  %69 = shl i16 %68, 2
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  store i16 %69, i16* %70, align 2
  %71 = sext i16 %69 to i32
  %72 = add nsw i32 %60, %71
  %73 = getelementptr inbounds i16, i16* %63, i64 %16
  %74 = load i16, i16* %73, align 2
  %75 = getelementptr inbounds i16, i16* %63, i64 %17
  %76 = load i16, i16* %75, align 2
  %77 = add i16 %76, %74
  %78 = shl i16 %77, 2
  %79 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  store i16 %78, i16* %79, align 2
  %80 = sext i16 %78 to i32
  %81 = add nsw i32 %72, %80
  %82 = getelementptr inbounds i16, i16* %63, i64 %20
  %83 = load i16, i16* %82, align 2
  %84 = getelementptr inbounds i16, i16* %63, i64 %21
  %85 = load i16, i16* %84, align 2
  %86 = add i16 %85, %83
  %87 = shl i16 %86, 2
  %88 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  store i16 %87, i16* %88, align 2
  %89 = sext i16 %87 to i32
  %90 = add nsw i32 %81, %89
  %91 = getelementptr inbounds i16, i16* %63, i64 %24
  %92 = load i16, i16* %91, align 2
  %93 = getelementptr inbounds i16, i16* %63, i64 %25
  %94 = load i16, i16* %93, align 2
  %95 = add i16 %94, %92
  %96 = shl i16 %95, 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  store i16 %96, i16* %97, align 2
  %98 = sext i16 %96 to i32
  %99 = add nsw i32 %90, %98
  %100 = icmp sgt i32 %9, 1
  %101 = getelementptr inbounds i16, i16* %63, i64 %7
  %102 = select i1 %100, i16* %101, i16* %63
  %103 = getelementptr inbounds i16, i16* %102, i64 %12
  %104 = load i16, i16* %103, align 2
  %105 = getelementptr inbounds i16, i16* %102, i64 %13
  %106 = load i16, i16* %105, align 2
  %107 = add i16 %106, %104
  %108 = shl i16 %107, 2
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  store i16 %108, i16* %109, align 2
  %110 = sext i16 %108 to i32
  %111 = add nsw i32 %99, %110
  %112 = getelementptr inbounds i16, i16* %102, i64 %16
  %113 = load i16, i16* %112, align 2
  %114 = getelementptr inbounds i16, i16* %102, i64 %17
  %115 = load i16, i16* %114, align 2
  %116 = add i16 %115, %113
  %117 = shl i16 %116, 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  store i16 %117, i16* %118, align 2
  %119 = sext i16 %117 to i32
  %120 = add nsw i32 %111, %119
  %121 = getelementptr inbounds i16, i16* %102, i64 %20
  %122 = load i16, i16* %121, align 2
  %123 = getelementptr inbounds i16, i16* %102, i64 %21
  %124 = load i16, i16* %123, align 2
  %125 = add i16 %124, %122
  %126 = shl i16 %125, 2
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  store i16 %126, i16* %127, align 2
  %128 = sext i16 %126 to i32
  %129 = add nsw i32 %120, %128
  %130 = getelementptr inbounds i16, i16* %102, i64 %24
  %131 = load i16, i16* %130, align 2
  %132 = getelementptr inbounds i16, i16* %102, i64 %25
  %133 = load i16, i16* %132, align 2
  %134 = add i16 %133, %131
  %135 = shl i16 %134, 2
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  store i16 %135, i16* %136, align 2
  %137 = sext i16 %135 to i32
  %138 = add nsw i32 %129, %137
  %139 = icmp sgt i32 %9, 2
  %140 = getelementptr inbounds i16, i16* %102, i64 %7
  %141 = select i1 %139, i16* %140, i16* %102
  %142 = getelementptr inbounds i16, i16* %141, i64 %12
  %143 = load i16, i16* %142, align 2
  %144 = getelementptr inbounds i16, i16* %141, i64 %13
  %145 = load i16, i16* %144, align 2
  %146 = add i16 %145, %143
  %147 = shl i16 %146, 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  store i16 %147, i16* %148, align 2
  %149 = sext i16 %147 to i32
  %150 = add nsw i32 %138, %149
  %151 = getelementptr inbounds i16, i16* %141, i64 %16
  %152 = load i16, i16* %151, align 2
  %153 = getelementptr inbounds i16, i16* %141, i64 %17
  %154 = load i16, i16* %153, align 2
  %155 = add i16 %154, %152
  %156 = shl i16 %155, 2
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  store i16 %156, i16* %157, align 2
  %158 = sext i16 %156 to i32
  %159 = add nsw i32 %150, %158
  %160 = getelementptr inbounds i16, i16* %141, i64 %20
  %161 = load i16, i16* %160, align 2
  %162 = getelementptr inbounds i16, i16* %141, i64 %21
  %163 = load i16, i16* %162, align 2
  %164 = add i16 %163, %161
  %165 = shl i16 %164, 2
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  store i16 %165, i16* %166, align 2
  %167 = sext i16 %165 to i32
  %168 = add nsw i32 %159, %167
  %169 = getelementptr inbounds i16, i16* %141, i64 %24
  %170 = load i16, i16* %169, align 2
  %171 = getelementptr inbounds i16, i16* %141, i64 %25
  %172 = load i16, i16* %171, align 2
  %173 = add i16 %172, %170
  %174 = shl i16 %173, 2
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  store i16 %174, i16* %175, align 2
  %176 = sext i16 %174 to i32
  %177 = add nsw i32 %168, %176
  %178 = add nsw i32 %177, 8
  %179 = lshr i32 %178, 4
  %180 = trunc i32 %179 to i16
  %181 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %182 = load i16, i16* %181, align 2
  %183 = sub i16 %182, %180
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %185 = load i16, i16* %184, align 2
  %186 = sub i16 %185, %180
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %188 = load i16, i16* %187, align 2
  %189 = sub i16 %188, %180
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %191 = load i16, i16* %190, align 2
  %192 = sub i16 %191, %180
  store i16 %192, i16* %190, align 2
  %193 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %194 = load i16, i16* %193, align 2
  %195 = sub i16 %194, %180
  store i16 %195, i16* %193, align 2
  %196 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %197 = load i16, i16* %196, align 2
  %198 = sub i16 %197, %180
  store i16 %198, i16* %196, align 2
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %200 = load i16, i16* %199, align 2
  %201 = sub i16 %200, %180
  store i16 %201, i16* %199, align 2
  %202 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %203 = load i16, i16* %202, align 2
  %204 = sub i16 %203, %180
  store i16 %204, i16* %202, align 2
  %205 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %206 = load i16, i16* %205, align 2
  %207 = sub i16 %206, %180
  store i16 %207, i16* %205, align 2
  %208 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %209 = load i16, i16* %208, align 2
  %210 = sub i16 %209, %180
  store i16 %210, i16* %208, align 2
  %211 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %212 = load i16, i16* %211, align 2
  %213 = sub i16 %212, %180
  store i16 %213, i16* %211, align 2
  %214 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %215 = load i16, i16* %214, align 2
  %216 = sub i16 %215, %180
  store i16 %216, i16* %214, align 2
  %217 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %218 = load i16, i16* %217, align 2
  %219 = sub i16 %218, %180
  store i16 %219, i16* %217, align 2
  %220 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %221 = load i16, i16* %220, align 2
  %222 = sub i16 %221, %180
  store i16 %222, i16* %220, align 2
  %223 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %224 = load i16, i16* %223, align 2
  %225 = sub i16 %224, %180
  store i16 %225, i16* %223, align 2
  %226 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %227 = load i16, i16* %226, align 2
  %228 = sub i16 %227, %180
  store i16 %228, i16* %226, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi4ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = icmp slt i32 %8, 0
  %12 = select i1 %11, i32 %8, i32 0
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %7, %13
  %15 = sext i32 %9 to i64
  %16 = add nsw i64 %13, 1
  %17 = add nsw i64 %14, 1
  %18 = icmp slt i32 %8, 2
  %19 = select i1 %18, i32 %8, i32 2
  %20 = sext i32 %19 to i64
  %21 = add nsw i64 %7, %20
  %22 = add nsw i64 %20, 1
  %23 = add nsw i64 %21, 1
  %24 = icmp slt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %7, %26
  %28 = add nsw i64 %26, 1
  %29 = add nsw i64 %27, 1
  %30 = icmp slt i32 %8, 6
  %31 = select i1 %30, i32 %8, i32 6
  %32 = sext i32 %31 to i64
  %33 = add nsw i64 %7, %32
  %34 = add nsw i64 %32, 1
  %35 = add nsw i64 %33, 1
  br label %36

36:                                               ; preds = %36, %5
  %37 = phi i64 [ 0, %5 ], [ %104, %36 ]
  %38 = phi i16* [ %6, %5 ], [ %103, %36 ]
  %39 = phi i32 [ 0, %5 ], [ %99, %36 ]
  %40 = getelementptr inbounds i16, i16* %38, i64 %13
  %41 = load i16, i16* %40, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 %16
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds i16, i16* %38, i64 %14
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds i16, i16* %38, i64 %17
  %47 = load i16, i16* %46, align 2
  %48 = add i16 %43, %41
  %49 = add i16 %48, %45
  %50 = add i16 %49, %47
  %51 = shl i16 %50, 1
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 0
  store i16 %51, i16* %52, align 2
  %53 = sext i16 %51 to i32
  %54 = add nsw i32 %39, %53
  %55 = getelementptr inbounds i16, i16* %38, i64 %20
  %56 = load i16, i16* %55, align 2
  %57 = getelementptr inbounds i16, i16* %38, i64 %22
  %58 = load i16, i16* %57, align 2
  %59 = getelementptr inbounds i16, i16* %38, i64 %21
  %60 = load i16, i16* %59, align 2
  %61 = getelementptr inbounds i16, i16* %38, i64 %23
  %62 = load i16, i16* %61, align 2
  %63 = add i16 %58, %56
  %64 = add i16 %63, %60
  %65 = add i16 %64, %62
  %66 = shl i16 %65, 1
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 1
  store i16 %66, i16* %67, align 2
  %68 = sext i16 %66 to i32
  %69 = add nsw i32 %54, %68
  %70 = getelementptr inbounds i16, i16* %38, i64 %26
  %71 = load i16, i16* %70, align 2
  %72 = getelementptr inbounds i16, i16* %38, i64 %28
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds i16, i16* %38, i64 %27
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds i16, i16* %38, i64 %29
  %77 = load i16, i16* %76, align 2
  %78 = add i16 %73, %71
  %79 = add i16 %78, %75
  %80 = add i16 %79, %77
  %81 = shl i16 %80, 1
  %82 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 2
  store i16 %81, i16* %82, align 2
  %83 = sext i16 %81 to i32
  %84 = add nsw i32 %69, %83
  %85 = getelementptr inbounds i16, i16* %38, i64 %32
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds i16, i16* %38, i64 %34
  %88 = load i16, i16* %87, align 2
  %89 = getelementptr inbounds i16, i16* %38, i64 %33
  %90 = load i16, i16* %89, align 2
  %91 = getelementptr inbounds i16, i16* %38, i64 %35
  %92 = load i16, i16* %91, align 2
  %93 = add i16 %88, %86
  %94 = add i16 %93, %90
  %95 = add i16 %94, %92
  %96 = shl i16 %95, 1
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 3
  store i16 %96, i16* %97, align 2
  %98 = sext i16 %96 to i32
  %99 = add nsw i32 %84, %98
  %100 = shl nuw i64 %37, 1
  %101 = icmp slt i64 %100, %15
  %102 = getelementptr inbounds i16, i16* %38, i64 %10
  %103 = select i1 %101, i16* %102, i16* %38
  %104 = add nuw nsw i64 %37, 1
  %105 = icmp eq i64 %104, 4
  br i1 %105, label %106, label %36

106:                                              ; preds = %36
  %107 = add nsw i32 %99, 8
  %108 = lshr i32 %107, 4
  %109 = trunc i32 %108 to i16
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %111 = load i16, i16* %110, align 2
  %112 = sub i16 %111, %109
  store i16 %112, i16* %110, align 2
  %113 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %114 = load i16, i16* %113, align 2
  %115 = sub i16 %114, %109
  store i16 %115, i16* %113, align 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %117 = load i16, i16* %116, align 2
  %118 = sub i16 %117, %109
  store i16 %118, i16* %116, align 2
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %120 = load i16, i16* %119, align 2
  %121 = sub i16 %120, %109
  store i16 %121, i16* %119, align 2
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %123 = load i16, i16* %122, align 2
  %124 = sub i16 %123, %109
  store i16 %124, i16* %122, align 2
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %126 = load i16, i16* %125, align 2
  %127 = sub i16 %126, %109
  store i16 %127, i16* %125, align 2
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = sub i16 %129, %109
  store i16 %130, i16* %128, align 2
  %131 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %132 = load i16, i16* %131, align 2
  %133 = sub i16 %132, %109
  store i16 %133, i16* %131, align 2
  %134 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %135 = load i16, i16* %134, align 2
  %136 = sub i16 %135, %109
  store i16 %136, i16* %134, align 2
  %137 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %138 = load i16, i16* %137, align 2
  %139 = sub i16 %138, %109
  store i16 %139, i16* %137, align 2
  %140 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %141 = load i16, i16* %140, align 2
  %142 = sub i16 %141, %109
  store i16 %142, i16* %140, align 2
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %144 = load i16, i16* %143, align 2
  %145 = sub i16 %144, %109
  store i16 %145, i16* %143, align 2
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %147 = load i16, i16* %146, align 2
  %148 = sub i16 %147, %109
  store i16 %148, i16* %146, align 2
  %149 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %150 = load i16, i16* %149, align 2
  %151 = sub i16 %150, %109
  store i16 %151, i16* %149, align 2
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %153 = load i16, i16* %152, align 2
  %154 = sub i16 %153, %109
  store i16 %154, i16* %152, align 2
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %156 = load i16, i16* %155, align 2
  %157 = sub i16 %156, %109
  store i16 %157, i16* %155, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi8ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %72, %9 ]
  %11 = phi i16* [ %5, %4 ], [ %71, %9 ]
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 0
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = mul nsw i32 %14, %3
  %16 = ashr i32 %15, 31
  %17 = add i32 %15, 32
  %18 = add i32 %17, %16
  %19 = ashr i32 %18, 6
  %20 = add nsw i32 %19, %7
  %21 = icmp slt i32 %20, 1023
  %22 = select i1 %21, i32 %20, i32 1023
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 %22, i32 0
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %11, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 1
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %3
  %30 = ashr i32 %29, 31
  %31 = add i32 %29, 32
  %32 = add i32 %31, %30
  %33 = ashr i32 %32, 6
  %34 = add nsw i32 %33, %7
  %35 = icmp slt i32 %34, 1023
  %36 = select i1 %35, i32 %34, i32 1023
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds i16, i16* %11, i64 1
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 2
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %43, %3
  %45 = ashr i32 %44, 31
  %46 = add i32 %44, 32
  %47 = add i32 %46, %45
  %48 = ashr i32 %47, 6
  %49 = add nsw i32 %48, %7
  %50 = icmp slt i32 %49, 1023
  %51 = select i1 %50, i32 %49, i32 1023
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %11, i64 2
  store i16 %54, i16* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %58, %3
  %60 = ashr i32 %59, 31
  %61 = add i32 %59, 32
  %62 = add i32 %61, %60
  %63 = ashr i32 %62, 6
  %64 = add nsw i32 %63, %7
  %65 = icmp slt i32 %64, 1023
  %66 = select i1 %65, i32 %64, i32 1023
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %11, i64 3
  store i16 %69, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %11, i64 %8
  %72 = add nuw nsw i64 %10, 1
  %73 = icmp eq i64 %72, 8
  br i1 %73, label %74, label %9

74:                                               ; preds = %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = icmp slt i32 %8, 1
  %15 = select i1 %14, i32 %8, i32 1
  %16 = sext i32 %15 to i64
  %17 = icmp slt i32 %8, 2
  %18 = select i1 %17, i32 %8, i32 2
  %19 = sext i32 %18 to i64
  %20 = icmp slt i32 %8, 3
  %21 = select i1 %20, i32 %8, i32 3
  %22 = sext i32 %21 to i64
  br label %23

23:                                               ; preds = %23, %5
  %24 = phi i64 [ 0, %5 ], [ %54, %23 ]
  %25 = phi i16* [ %6, %5 ], [ %53, %23 ]
  %26 = phi i32 [ 0, %5 ], [ %50, %23 ]
  %27 = getelementptr inbounds i16, i16* %25, i64 %12
  %28 = load i16, i16* %27, align 2
  %29 = shl i16 %28, 3
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %24, i64 0
  store i16 %29, i16* %30, align 2
  %31 = sext i16 %29 to i32
  %32 = add nsw i32 %26, %31
  %33 = getelementptr inbounds i16, i16* %25, i64 %16
  %34 = load i16, i16* %33, align 2
  %35 = shl i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %24, i64 1
  store i16 %35, i16* %36, align 2
  %37 = sext i16 %35 to i32
  %38 = add nsw i32 %32, %37
  %39 = getelementptr inbounds i16, i16* %25, i64 %19
  %40 = load i16, i16* %39, align 2
  %41 = shl i16 %40, 3
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %24, i64 2
  store i16 %41, i16* %42, align 2
  %43 = sext i16 %41 to i32
  %44 = add nsw i32 %38, %43
  %45 = getelementptr inbounds i16, i16* %25, i64 %22
  %46 = load i16, i16* %45, align 2
  %47 = shl i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %24, i64 3
  store i16 %47, i16* %48, align 2
  %49 = sext i16 %47 to i32
  %50 = add nsw i32 %44, %49
  %51 = icmp slt i64 %24, %13
  %52 = getelementptr inbounds i16, i16* %25, i64 %7
  %53 = select i1 %51, i16* %52, i16* %25
  %54 = add nuw nsw i64 %24, 1
  %55 = icmp eq i64 %54, 8
  br i1 %55, label %56, label %23

56:                                               ; preds = %23
  %57 = add nsw i32 %50, 16
  %58 = lshr i32 %57, 5
  %59 = trunc i32 %58 to i16
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %61 = load i16, i16* %60, align 2
  %62 = sub i16 %61, %59
  store i16 %62, i16* %60, align 2
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %64 = load i16, i16* %63, align 2
  %65 = sub i16 %64, %59
  store i16 %65, i16* %63, align 2
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %67 = load i16, i16* %66, align 2
  %68 = sub i16 %67, %59
  store i16 %68, i16* %66, align 2
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %70 = load i16, i16* %69, align 2
  %71 = sub i16 %70, %59
  store i16 %71, i16* %69, align 2
  %72 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %73 = load i16, i16* %72, align 2
  %74 = sub i16 %73, %59
  store i16 %74, i16* %72, align 2
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %76 = load i16, i16* %75, align 2
  %77 = sub i16 %76, %59
  store i16 %77, i16* %75, align 2
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %79 = load i16, i16* %78, align 2
  %80 = sub i16 %79, %59
  store i16 %80, i16* %78, align 2
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %82 = load i16, i16* %81, align 2
  %83 = sub i16 %82, %59
  store i16 %83, i16* %81, align 2
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %85 = load i16, i16* %84, align 2
  %86 = sub i16 %85, %59
  store i16 %86, i16* %84, align 2
  %87 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %88 = load i16, i16* %87, align 2
  %89 = sub i16 %88, %59
  store i16 %89, i16* %87, align 2
  %90 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = sub i16 %91, %59
  store i16 %92, i16* %90, align 2
  %93 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %94 = load i16, i16* %93, align 2
  %95 = sub i16 %94, %59
  store i16 %95, i16* %93, align 2
  %96 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %97 = load i16, i16* %96, align 2
  %98 = sub i16 %97, %59
  store i16 %98, i16* %96, align 2
  %99 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %100 = load i16, i16* %99, align 2
  %101 = sub i16 %100, %59
  store i16 %101, i16* %99, align 2
  %102 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %103 = load i16, i16* %102, align 2
  %104 = sub i16 %103, %59
  store i16 %104, i16* %102, align 2
  %105 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %106 = load i16, i16* %105, align 2
  %107 = sub i16 %106, %59
  store i16 %107, i16* %105, align 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %109 = load i16, i16* %108, align 2
  %110 = sub i16 %109, %59
  store i16 %110, i16* %108, align 2
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 1
  %112 = load i16, i16* %111, align 2
  %113 = sub i16 %112, %59
  store i16 %113, i16* %111, align 2
  %114 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 2
  %115 = load i16, i16* %114, align 2
  %116 = sub i16 %115, %59
  store i16 %116, i16* %114, align 2
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 3
  %118 = load i16, i16* %117, align 2
  %119 = sub i16 %118, %59
  store i16 %119, i16* %117, align 2
  %120 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %121 = load i16, i16* %120, align 2
  %122 = sub i16 %121, %59
  store i16 %122, i16* %120, align 2
  %123 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 1
  %124 = load i16, i16* %123, align 2
  %125 = sub i16 %124, %59
  store i16 %125, i16* %123, align 2
  %126 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 2
  %127 = load i16, i16* %126, align 2
  %128 = sub i16 %127, %59
  store i16 %128, i16* %126, align 2
  %129 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 3
  %130 = load i16, i16* %129, align 2
  %131 = sub i16 %130, %59
  store i16 %131, i16* %129, align 2
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %133 = load i16, i16* %132, align 2
  %134 = sub i16 %133, %59
  store i16 %134, i16* %132, align 2
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 1
  %136 = load i16, i16* %135, align 2
  %137 = sub i16 %136, %59
  store i16 %137, i16* %135, align 2
  %138 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 2
  %139 = load i16, i16* %138, align 2
  %140 = sub i16 %139, %59
  store i16 %140, i16* %138, align 2
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 3
  %142 = load i16, i16* %141, align 2
  %143 = sub i16 %142, %59
  store i16 %143, i16* %141, align 2
  %144 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %145 = load i16, i16* %144, align 2
  %146 = sub i16 %145, %59
  store i16 %146, i16* %144, align 2
  %147 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 1
  %148 = load i16, i16* %147, align 2
  %149 = sub i16 %148, %59
  store i16 %149, i16* %147, align 2
  %150 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 2
  %151 = load i16, i16* %150, align 2
  %152 = sub i16 %151, %59
  store i16 %152, i16* %150, align 2
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 3
  %154 = load i16, i16* %153, align 2
  %155 = sub i16 %154, %59
  store i16 %155, i16* %153, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = add nsw i64 %12, 1
  %15 = icmp slt i32 %8, 2
  %16 = select i1 %15, i32 %8, i32 2
  %17 = sext i32 %16 to i64
  %18 = add nsw i64 %17, 1
  %19 = icmp slt i32 %8, 4
  %20 = select i1 %19, i32 %8, i32 4
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, 1
  %23 = icmp slt i32 %8, 6
  %24 = select i1 %23, i32 %8, i32 6
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, 1
  br label %27

27:                                               ; preds = %27, %5
  %28 = phi i64 [ 0, %5 ], [ %70, %27 ]
  %29 = phi i16* [ %6, %5 ], [ %69, %27 ]
  %30 = phi i32 [ 0, %5 ], [ %66, %27 ]
  %31 = getelementptr inbounds i16, i16* %29, i64 %12
  %32 = load i16, i16* %31, align 2
  %33 = getelementptr inbounds i16, i16* %29, i64 %14
  %34 = load i16, i16* %33, align 2
  %35 = add i16 %34, %32
  %36 = shl i16 %35, 2
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %28, i64 0
  store i16 %36, i16* %37, align 2
  %38 = sext i16 %36 to i32
  %39 = add nsw i32 %30, %38
  %40 = getelementptr inbounds i16, i16* %29, i64 %17
  %41 = load i16, i16* %40, align 2
  %42 = getelementptr inbounds i16, i16* %29, i64 %18
  %43 = load i16, i16* %42, align 2
  %44 = add i16 %43, %41
  %45 = shl i16 %44, 2
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %28, i64 1
  store i16 %45, i16* %46, align 2
  %47 = sext i16 %45 to i32
  %48 = add nsw i32 %39, %47
  %49 = getelementptr inbounds i16, i16* %29, i64 %21
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds i16, i16* %29, i64 %22
  %52 = load i16, i16* %51, align 2
  %53 = add i16 %52, %50
  %54 = shl i16 %53, 2
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %28, i64 2
  store i16 %54, i16* %55, align 2
  %56 = sext i16 %54 to i32
  %57 = add nsw i32 %48, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 %25
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds i16, i16* %29, i64 %26
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, %59
  %63 = shl i16 %62, 2
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %28, i64 3
  store i16 %63, i16* %64, align 2
  %65 = sext i16 %63 to i32
  %66 = add nsw i32 %57, %65
  %67 = icmp slt i64 %28, %13
  %68 = getelementptr inbounds i16, i16* %29, i64 %7
  %69 = select i1 %67, i16* %68, i16* %29
  %70 = add nuw nsw i64 %28, 1
  %71 = icmp eq i64 %70, 8
  br i1 %71, label %72, label %27

72:                                               ; preds = %27
  %73 = add nsw i32 %66, 16
  %74 = lshr i32 %73, 5
  %75 = trunc i32 %74 to i16
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %77 = load i16, i16* %76, align 2
  %78 = sub i16 %77, %75
  store i16 %78, i16* %76, align 2
  %79 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %80 = load i16, i16* %79, align 2
  %81 = sub i16 %80, %75
  store i16 %81, i16* %79, align 2
  %82 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %83 = load i16, i16* %82, align 2
  %84 = sub i16 %83, %75
  store i16 %84, i16* %82, align 2
  %85 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %86 = load i16, i16* %85, align 2
  %87 = sub i16 %86, %75
  store i16 %87, i16* %85, align 2
  %88 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %89 = load i16, i16* %88, align 2
  %90 = sub i16 %89, %75
  store i16 %90, i16* %88, align 2
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %92 = load i16, i16* %91, align 2
  %93 = sub i16 %92, %75
  store i16 %93, i16* %91, align 2
  %94 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %95 = load i16, i16* %94, align 2
  %96 = sub i16 %95, %75
  store i16 %96, i16* %94, align 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %98 = load i16, i16* %97, align 2
  %99 = sub i16 %98, %75
  store i16 %99, i16* %97, align 2
  %100 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %101 = load i16, i16* %100, align 2
  %102 = sub i16 %101, %75
  store i16 %102, i16* %100, align 2
  %103 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %104 = load i16, i16* %103, align 2
  %105 = sub i16 %104, %75
  store i16 %105, i16* %103, align 2
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %107 = load i16, i16* %106, align 2
  %108 = sub i16 %107, %75
  store i16 %108, i16* %106, align 2
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %110 = load i16, i16* %109, align 2
  %111 = sub i16 %110, %75
  store i16 %111, i16* %109, align 2
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %113 = load i16, i16* %112, align 2
  %114 = sub i16 %113, %75
  store i16 %114, i16* %112, align 2
  %115 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = sub i16 %116, %75
  store i16 %117, i16* %115, align 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %119 = load i16, i16* %118, align 2
  %120 = sub i16 %119, %75
  store i16 %120, i16* %118, align 2
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %122 = load i16, i16* %121, align 2
  %123 = sub i16 %122, %75
  store i16 %123, i16* %121, align 2
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %125 = load i16, i16* %124, align 2
  %126 = sub i16 %125, %75
  store i16 %126, i16* %124, align 2
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 1
  %128 = load i16, i16* %127, align 2
  %129 = sub i16 %128, %75
  store i16 %129, i16* %127, align 2
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 2
  %131 = load i16, i16* %130, align 2
  %132 = sub i16 %131, %75
  store i16 %132, i16* %130, align 2
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 3
  %134 = load i16, i16* %133, align 2
  %135 = sub i16 %134, %75
  store i16 %135, i16* %133, align 2
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %137 = load i16, i16* %136, align 2
  %138 = sub i16 %137, %75
  store i16 %138, i16* %136, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 1
  %140 = load i16, i16* %139, align 2
  %141 = sub i16 %140, %75
  store i16 %141, i16* %139, align 2
  %142 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 2
  %143 = load i16, i16* %142, align 2
  %144 = sub i16 %143, %75
  store i16 %144, i16* %142, align 2
  %145 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 3
  %146 = load i16, i16* %145, align 2
  %147 = sub i16 %146, %75
  store i16 %147, i16* %145, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %149 = load i16, i16* %148, align 2
  %150 = sub i16 %149, %75
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 1
  %152 = load i16, i16* %151, align 2
  %153 = sub i16 %152, %75
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 2
  %155 = load i16, i16* %154, align 2
  %156 = sub i16 %155, %75
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 3
  %158 = load i16, i16* %157, align 2
  %159 = sub i16 %158, %75
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %161 = load i16, i16* %160, align 2
  %162 = sub i16 %161, %75
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 1
  %164 = load i16, i16* %163, align 2
  %165 = sub i16 %164, %75
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 2
  %167 = load i16, i16* %166, align 2
  %168 = sub i16 %167, %75
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 3
  %170 = load i16, i16* %169, align 2
  %171 = sub i16 %170, %75
  store i16 %171, i16* %169, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi8ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = icmp slt i32 %8, 0
  %12 = select i1 %11, i32 %8, i32 0
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %7, %13
  %15 = sext i32 %9 to i64
  %16 = add nsw i64 %13, 1
  %17 = add nsw i64 %14, 1
  %18 = icmp slt i32 %8, 2
  %19 = select i1 %18, i32 %8, i32 2
  %20 = sext i32 %19 to i64
  %21 = add nsw i64 %7, %20
  %22 = add nsw i64 %20, 1
  %23 = add nsw i64 %21, 1
  %24 = icmp slt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %7, %26
  %28 = add nsw i64 %26, 1
  %29 = add nsw i64 %27, 1
  %30 = icmp slt i32 %8, 6
  %31 = select i1 %30, i32 %8, i32 6
  %32 = sext i32 %31 to i64
  %33 = add nsw i64 %7, %32
  %34 = add nsw i64 %32, 1
  %35 = add nsw i64 %33, 1
  br label %36

36:                                               ; preds = %36, %5
  %37 = phi i64 [ 0, %5 ], [ %104, %36 ]
  %38 = phi i16* [ %6, %5 ], [ %103, %36 ]
  %39 = phi i32 [ 0, %5 ], [ %99, %36 ]
  %40 = getelementptr inbounds i16, i16* %38, i64 %13
  %41 = load i16, i16* %40, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 %16
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds i16, i16* %38, i64 %14
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds i16, i16* %38, i64 %17
  %47 = load i16, i16* %46, align 2
  %48 = add i16 %43, %41
  %49 = add i16 %48, %45
  %50 = add i16 %49, %47
  %51 = shl i16 %50, 1
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 0
  store i16 %51, i16* %52, align 2
  %53 = sext i16 %51 to i32
  %54 = add nsw i32 %39, %53
  %55 = getelementptr inbounds i16, i16* %38, i64 %20
  %56 = load i16, i16* %55, align 2
  %57 = getelementptr inbounds i16, i16* %38, i64 %22
  %58 = load i16, i16* %57, align 2
  %59 = getelementptr inbounds i16, i16* %38, i64 %21
  %60 = load i16, i16* %59, align 2
  %61 = getelementptr inbounds i16, i16* %38, i64 %23
  %62 = load i16, i16* %61, align 2
  %63 = add i16 %58, %56
  %64 = add i16 %63, %60
  %65 = add i16 %64, %62
  %66 = shl i16 %65, 1
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 1
  store i16 %66, i16* %67, align 2
  %68 = sext i16 %66 to i32
  %69 = add nsw i32 %54, %68
  %70 = getelementptr inbounds i16, i16* %38, i64 %26
  %71 = load i16, i16* %70, align 2
  %72 = getelementptr inbounds i16, i16* %38, i64 %28
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds i16, i16* %38, i64 %27
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds i16, i16* %38, i64 %29
  %77 = load i16, i16* %76, align 2
  %78 = add i16 %73, %71
  %79 = add i16 %78, %75
  %80 = add i16 %79, %77
  %81 = shl i16 %80, 1
  %82 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 2
  store i16 %81, i16* %82, align 2
  %83 = sext i16 %81 to i32
  %84 = add nsw i32 %69, %83
  %85 = getelementptr inbounds i16, i16* %38, i64 %32
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds i16, i16* %38, i64 %34
  %88 = load i16, i16* %87, align 2
  %89 = getelementptr inbounds i16, i16* %38, i64 %33
  %90 = load i16, i16* %89, align 2
  %91 = getelementptr inbounds i16, i16* %38, i64 %35
  %92 = load i16, i16* %91, align 2
  %93 = add i16 %88, %86
  %94 = add i16 %93, %90
  %95 = add i16 %94, %92
  %96 = shl i16 %95, 1
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 3
  store i16 %96, i16* %97, align 2
  %98 = sext i16 %96 to i32
  %99 = add nsw i32 %84, %98
  %100 = shl nuw i64 %37, 1
  %101 = icmp slt i64 %100, %15
  %102 = getelementptr inbounds i16, i16* %38, i64 %10
  %103 = select i1 %101, i16* %102, i16* %38
  %104 = add nuw nsw i64 %37, 1
  %105 = icmp eq i64 %104, 8
  br i1 %105, label %106, label %36

106:                                              ; preds = %36
  %107 = add nsw i32 %99, 16
  %108 = lshr i32 %107, 5
  %109 = trunc i32 %108 to i16
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 0
  %111 = load i16, i16* %110, align 2
  %112 = sub i16 %111, %109
  store i16 %112, i16* %110, align 2
  %113 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 1
  %114 = load i16, i16* %113, align 2
  %115 = sub i16 %114, %109
  store i16 %115, i16* %113, align 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 2
  %117 = load i16, i16* %116, align 2
  %118 = sub i16 %117, %109
  store i16 %118, i16* %116, align 2
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 3
  %120 = load i16, i16* %119, align 2
  %121 = sub i16 %120, %109
  store i16 %121, i16* %119, align 2
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %123 = load i16, i16* %122, align 2
  %124 = sub i16 %123, %109
  store i16 %124, i16* %122, align 2
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 1
  %126 = load i16, i16* %125, align 2
  %127 = sub i16 %126, %109
  store i16 %127, i16* %125, align 2
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = sub i16 %129, %109
  store i16 %130, i16* %128, align 2
  %131 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 3
  %132 = load i16, i16* %131, align 2
  %133 = sub i16 %132, %109
  store i16 %133, i16* %131, align 2
  %134 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %135 = load i16, i16* %134, align 2
  %136 = sub i16 %135, %109
  store i16 %136, i16* %134, align 2
  %137 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 1
  %138 = load i16, i16* %137, align 2
  %139 = sub i16 %138, %109
  store i16 %139, i16* %137, align 2
  %140 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 2
  %141 = load i16, i16* %140, align 2
  %142 = sub i16 %141, %109
  store i16 %142, i16* %140, align 2
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 3
  %144 = load i16, i16* %143, align 2
  %145 = sub i16 %144, %109
  store i16 %145, i16* %143, align 2
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %147 = load i16, i16* %146, align 2
  %148 = sub i16 %147, %109
  store i16 %148, i16* %146, align 2
  %149 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 1
  %150 = load i16, i16* %149, align 2
  %151 = sub i16 %150, %109
  store i16 %151, i16* %149, align 2
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 2
  %153 = load i16, i16* %152, align 2
  %154 = sub i16 %153, %109
  store i16 %154, i16* %152, align 2
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 3
  %156 = load i16, i16* %155, align 2
  %157 = sub i16 %156, %109
  store i16 %157, i16* %155, align 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %159 = load i16, i16* %158, align 2
  %160 = sub i16 %159, %109
  store i16 %160, i16* %158, align 2
  %161 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 1
  %162 = load i16, i16* %161, align 2
  %163 = sub i16 %162, %109
  store i16 %163, i16* %161, align 2
  %164 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 2
  %165 = load i16, i16* %164, align 2
  %166 = sub i16 %165, %109
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 3
  %168 = load i16, i16* %167, align 2
  %169 = sub i16 %168, %109
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %171 = load i16, i16* %170, align 2
  %172 = sub i16 %171, %109
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 1
  %174 = load i16, i16* %173, align 2
  %175 = sub i16 %174, %109
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 2
  %177 = load i16, i16* %176, align 2
  %178 = sub i16 %177, %109
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 3
  %180 = load i16, i16* %179, align 2
  %181 = sub i16 %180, %109
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %183 = load i16, i16* %182, align 2
  %184 = sub i16 %183, %109
  store i16 %184, i16* %182, align 2
  %185 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 1
  %186 = load i16, i16* %185, align 2
  %187 = sub i16 %186, %109
  store i16 %187, i16* %185, align 2
  %188 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 2
  %189 = load i16, i16* %188, align 2
  %190 = sub i16 %189, %109
  store i16 %190, i16* %188, align 2
  %191 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 3
  %192 = load i16, i16* %191, align 2
  %193 = sub i16 %192, %109
  store i16 %193, i16* %191, align 2
  %194 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %195 = load i16, i16* %194, align 2
  %196 = sub i16 %195, %109
  store i16 %196, i16* %194, align 2
  %197 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 1
  %198 = load i16, i16* %197, align 2
  %199 = sub i16 %198, %109
  store i16 %199, i16* %197, align 2
  %200 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 2
  %201 = load i16, i16* %200, align 2
  %202 = sub i16 %201, %109
  store i16 %202, i16* %200, align 2
  %203 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 3
  %204 = load i16, i16* %203, align 2
  %205 = sub i16 %204, %109
  store i16 %205, i16* %203, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi4ELi16ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %72, %9 ]
  %11 = phi i16* [ %5, %4 ], [ %71, %9 ]
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 0
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = mul nsw i32 %14, %3
  %16 = ashr i32 %15, 31
  %17 = add i32 %15, 32
  %18 = add i32 %17, %16
  %19 = ashr i32 %18, 6
  %20 = add nsw i32 %19, %7
  %21 = icmp slt i32 %20, 1023
  %22 = select i1 %21, i32 %20, i32 1023
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 %22, i32 0
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %11, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 1
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %3
  %30 = ashr i32 %29, 31
  %31 = add i32 %29, 32
  %32 = add i32 %31, %30
  %33 = ashr i32 %32, 6
  %34 = add nsw i32 %33, %7
  %35 = icmp slt i32 %34, 1023
  %36 = select i1 %35, i32 %34, i32 1023
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds i16, i16* %11, i64 1
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 2
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %43, %3
  %45 = ashr i32 %44, 31
  %46 = add i32 %44, 32
  %47 = add i32 %46, %45
  %48 = ashr i32 %47, 6
  %49 = add nsw i32 %48, %7
  %50 = icmp slt i32 %49, 1023
  %51 = select i1 %50, i32 %49, i32 1023
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %11, i64 2
  store i16 %54, i16* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %58, %3
  %60 = ashr i32 %59, 31
  %61 = add i32 %59, 32
  %62 = add i32 %61, %60
  %63 = ashr i32 %62, 6
  %64 = add nsw i32 %63, %7
  %65 = icmp slt i32 %64, 1023
  %66 = select i1 %65, i32 %64, i32 1023
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %11, i64 3
  store i16 %69, i16* %70, align 2
  %71 = getelementptr inbounds i16, i16* %11, i64 %8
  %72 = add nuw nsw i64 %10, 1
  %73 = icmp eq i64 %72, 16
  br i1 %73, label %74, label %9

74:                                               ; preds = %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = icmp slt i32 %8, 1
  %15 = select i1 %14, i32 %8, i32 1
  %16 = sext i32 %15 to i64
  %17 = icmp slt i32 %8, 2
  %18 = select i1 %17, i32 %8, i32 2
  %19 = sext i32 %18 to i64
  %20 = icmp slt i32 %8, 3
  %21 = select i1 %20, i32 %8, i32 3
  %22 = sext i32 %21 to i64
  br label %23

23:                                               ; preds = %23, %5
  %24 = phi i64 [ 0, %5 ], [ %54, %23 ]
  %25 = phi i16* [ %6, %5 ], [ %53, %23 ]
  %26 = phi i32 [ 0, %5 ], [ %50, %23 ]
  %27 = getelementptr inbounds i16, i16* %25, i64 %12
  %28 = load i16, i16* %27, align 2
  %29 = shl i16 %28, 3
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %24, i64 0
  store i16 %29, i16* %30, align 2
  %31 = sext i16 %29 to i32
  %32 = add nsw i32 %26, %31
  %33 = getelementptr inbounds i16, i16* %25, i64 %16
  %34 = load i16, i16* %33, align 2
  %35 = shl i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %24, i64 1
  store i16 %35, i16* %36, align 2
  %37 = sext i16 %35 to i32
  %38 = add nsw i32 %32, %37
  %39 = getelementptr inbounds i16, i16* %25, i64 %19
  %40 = load i16, i16* %39, align 2
  %41 = shl i16 %40, 3
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %24, i64 2
  store i16 %41, i16* %42, align 2
  %43 = sext i16 %41 to i32
  %44 = add nsw i32 %38, %43
  %45 = getelementptr inbounds i16, i16* %25, i64 %22
  %46 = load i16, i16* %45, align 2
  %47 = shl i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %24, i64 3
  store i16 %47, i16* %48, align 2
  %49 = sext i16 %47 to i32
  %50 = add nsw i32 %44, %49
  %51 = icmp slt i64 %24, %13
  %52 = getelementptr inbounds i16, i16* %25, i64 %7
  %53 = select i1 %51, i16* %52, i16* %25
  %54 = add nuw nsw i64 %24, 1
  %55 = icmp eq i64 %54, 16
  br i1 %55, label %56, label %23

56:                                               ; preds = %23
  %57 = add nsw i32 %50, 32
  %58 = lshr i32 %57, 6
  %59 = trunc i32 %58 to i16
  br label %60

60:                                               ; preds = %60, %56
  %61 = phi i64 [ 0, %56 ], [ %74, %60 ]
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 0
  %63 = load i16, i16* %62, align 2
  %64 = sub i16 %63, %59
  store i16 %64, i16* %62, align 2
  %65 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 1
  %66 = load i16, i16* %65, align 2
  %67 = sub i16 %66, %59
  store i16 %67, i16* %65, align 2
  %68 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 2
  %69 = load i16, i16* %68, align 2
  %70 = sub i16 %69, %59
  store i16 %70, i16* %68, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 3
  %72 = load i16, i16* %71, align 2
  %73 = sub i16 %72, %59
  store i16 %73, i16* %71, align 2
  %74 = add nuw nsw i64 %61, 1
  %75 = icmp eq i64 %74, 16
  br i1 %75, label %76, label %60

76:                                               ; preds = %60
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = add nsw i64 %12, 1
  %15 = icmp slt i32 %8, 2
  %16 = select i1 %15, i32 %8, i32 2
  %17 = sext i32 %16 to i64
  %18 = add nsw i64 %17, 1
  %19 = icmp slt i32 %8, 4
  %20 = select i1 %19, i32 %8, i32 4
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, 1
  %23 = icmp slt i32 %8, 6
  %24 = select i1 %23, i32 %8, i32 6
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, 1
  br label %27

27:                                               ; preds = %27, %5
  %28 = phi i64 [ 0, %5 ], [ %70, %27 ]
  %29 = phi i16* [ %6, %5 ], [ %69, %27 ]
  %30 = phi i32 [ 0, %5 ], [ %66, %27 ]
  %31 = getelementptr inbounds i16, i16* %29, i64 %12
  %32 = load i16, i16* %31, align 2
  %33 = getelementptr inbounds i16, i16* %29, i64 %14
  %34 = load i16, i16* %33, align 2
  %35 = add i16 %34, %32
  %36 = shl i16 %35, 2
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %28, i64 0
  store i16 %36, i16* %37, align 2
  %38 = sext i16 %36 to i32
  %39 = add nsw i32 %30, %38
  %40 = getelementptr inbounds i16, i16* %29, i64 %17
  %41 = load i16, i16* %40, align 2
  %42 = getelementptr inbounds i16, i16* %29, i64 %18
  %43 = load i16, i16* %42, align 2
  %44 = add i16 %43, %41
  %45 = shl i16 %44, 2
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %28, i64 1
  store i16 %45, i16* %46, align 2
  %47 = sext i16 %45 to i32
  %48 = add nsw i32 %39, %47
  %49 = getelementptr inbounds i16, i16* %29, i64 %21
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds i16, i16* %29, i64 %22
  %52 = load i16, i16* %51, align 2
  %53 = add i16 %52, %50
  %54 = shl i16 %53, 2
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %28, i64 2
  store i16 %54, i16* %55, align 2
  %56 = sext i16 %54 to i32
  %57 = add nsw i32 %48, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 %25
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds i16, i16* %29, i64 %26
  %61 = load i16, i16* %60, align 2
  %62 = add i16 %61, %59
  %63 = shl i16 %62, 2
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %28, i64 3
  store i16 %63, i16* %64, align 2
  %65 = sext i16 %63 to i32
  %66 = add nsw i32 %57, %65
  %67 = icmp slt i64 %28, %13
  %68 = getelementptr inbounds i16, i16* %29, i64 %7
  %69 = select i1 %67, i16* %68, i16* %29
  %70 = add nuw nsw i64 %28, 1
  %71 = icmp eq i64 %70, 16
  br i1 %71, label %72, label %27

72:                                               ; preds = %27
  %73 = add nsw i32 %66, 32
  %74 = lshr i32 %73, 6
  %75 = trunc i32 %74 to i16
  br label %76

76:                                               ; preds = %76, %72
  %77 = phi i64 [ 0, %72 ], [ %90, %76 ]
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %77, i64 0
  %79 = load i16, i16* %78, align 2
  %80 = sub i16 %79, %75
  store i16 %80, i16* %78, align 2
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %77, i64 1
  %82 = load i16, i16* %81, align 2
  %83 = sub i16 %82, %75
  store i16 %83, i16* %81, align 2
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %77, i64 2
  %85 = load i16, i16* %84, align 2
  %86 = sub i16 %85, %75
  store i16 %86, i16* %84, align 2
  %87 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %77, i64 3
  %88 = load i16, i16* %87, align 2
  %89 = sub i16 %88, %75
  store i16 %89, i16* %87, align 2
  %90 = add nuw nsw i64 %77, 1
  %91 = icmp eq i64 %90, 16
  br i1 %91, label %92, label %76

92:                                               ; preds = %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi4ELi16ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = icmp slt i32 %8, 0
  %12 = select i1 %11, i32 %8, i32 0
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %7, %13
  %15 = sext i32 %9 to i64
  %16 = add nsw i64 %13, 1
  %17 = add nsw i64 %14, 1
  %18 = icmp slt i32 %8, 2
  %19 = select i1 %18, i32 %8, i32 2
  %20 = sext i32 %19 to i64
  %21 = add nsw i64 %7, %20
  %22 = add nsw i64 %20, 1
  %23 = add nsw i64 %21, 1
  %24 = icmp slt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %7, %26
  %28 = add nsw i64 %26, 1
  %29 = add nsw i64 %27, 1
  %30 = icmp slt i32 %8, 6
  %31 = select i1 %30, i32 %8, i32 6
  %32 = sext i32 %31 to i64
  %33 = add nsw i64 %7, %32
  %34 = add nsw i64 %32, 1
  %35 = add nsw i64 %33, 1
  br label %36

36:                                               ; preds = %36, %5
  %37 = phi i64 [ 0, %5 ], [ %104, %36 ]
  %38 = phi i16* [ %6, %5 ], [ %103, %36 ]
  %39 = phi i32 [ 0, %5 ], [ %99, %36 ]
  %40 = getelementptr inbounds i16, i16* %38, i64 %13
  %41 = load i16, i16* %40, align 2
  %42 = getelementptr inbounds i16, i16* %38, i64 %16
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds i16, i16* %38, i64 %14
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds i16, i16* %38, i64 %17
  %47 = load i16, i16* %46, align 2
  %48 = add i16 %43, %41
  %49 = add i16 %48, %45
  %50 = add i16 %49, %47
  %51 = shl i16 %50, 1
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 0
  store i16 %51, i16* %52, align 2
  %53 = sext i16 %51 to i32
  %54 = add nsw i32 %39, %53
  %55 = getelementptr inbounds i16, i16* %38, i64 %20
  %56 = load i16, i16* %55, align 2
  %57 = getelementptr inbounds i16, i16* %38, i64 %22
  %58 = load i16, i16* %57, align 2
  %59 = getelementptr inbounds i16, i16* %38, i64 %21
  %60 = load i16, i16* %59, align 2
  %61 = getelementptr inbounds i16, i16* %38, i64 %23
  %62 = load i16, i16* %61, align 2
  %63 = add i16 %58, %56
  %64 = add i16 %63, %60
  %65 = add i16 %64, %62
  %66 = shl i16 %65, 1
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 1
  store i16 %66, i16* %67, align 2
  %68 = sext i16 %66 to i32
  %69 = add nsw i32 %54, %68
  %70 = getelementptr inbounds i16, i16* %38, i64 %26
  %71 = load i16, i16* %70, align 2
  %72 = getelementptr inbounds i16, i16* %38, i64 %28
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds i16, i16* %38, i64 %27
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds i16, i16* %38, i64 %29
  %77 = load i16, i16* %76, align 2
  %78 = add i16 %73, %71
  %79 = add i16 %78, %75
  %80 = add i16 %79, %77
  %81 = shl i16 %80, 1
  %82 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 2
  store i16 %81, i16* %82, align 2
  %83 = sext i16 %81 to i32
  %84 = add nsw i32 %69, %83
  %85 = getelementptr inbounds i16, i16* %38, i64 %32
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds i16, i16* %38, i64 %34
  %88 = load i16, i16* %87, align 2
  %89 = getelementptr inbounds i16, i16* %38, i64 %33
  %90 = load i16, i16* %89, align 2
  %91 = getelementptr inbounds i16, i16* %38, i64 %35
  %92 = load i16, i16* %91, align 2
  %93 = add i16 %88, %86
  %94 = add i16 %93, %90
  %95 = add i16 %94, %92
  %96 = shl i16 %95, 1
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %37, i64 3
  store i16 %96, i16* %97, align 2
  %98 = sext i16 %96 to i32
  %99 = add nsw i32 %84, %98
  %100 = shl nuw i64 %37, 1
  %101 = icmp slt i64 %100, %15
  %102 = getelementptr inbounds i16, i16* %38, i64 %10
  %103 = select i1 %101, i16* %102, i16* %38
  %104 = add nuw nsw i64 %37, 1
  %105 = icmp eq i64 %104, 16
  br i1 %105, label %106, label %36

106:                                              ; preds = %36
  %107 = add nsw i32 %99, 32
  %108 = lshr i32 %107, 6
  %109 = trunc i32 %108 to i16
  br label %110

110:                                              ; preds = %110, %106
  %111 = phi i64 [ 0, %106 ], [ %124, %110 ]
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %111, i64 0
  %113 = load i16, i16* %112, align 2
  %114 = sub i16 %113, %109
  store i16 %114, i16* %112, align 2
  %115 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = sub i16 %116, %109
  store i16 %117, i16* %115, align 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %111, i64 2
  %119 = load i16, i16* %118, align 2
  %120 = sub i16 %119, %109
  store i16 %120, i16* %118, align 2
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %111, i64 3
  %122 = load i16, i16* %121, align 2
  %123 = sub i16 %122, %109
  store i16 %123, i16* %121, align 2
  %124 = add nuw nsw i64 %111, 1
  %125 = icmp eq i64 %124, 16
  br i1 %125, label %126, label %110

126:                                              ; preds = %110
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi4ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %132, %9 ]
  %11 = phi i16* [ %5, %4 ], [ %131, %9 ]
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 0
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = mul nsw i32 %14, %3
  %16 = ashr i32 %15, 31
  %17 = add i32 %15, 32
  %18 = add i32 %17, %16
  %19 = ashr i32 %18, 6
  %20 = add nsw i32 %19, %7
  %21 = icmp slt i32 %20, 1023
  %22 = select i1 %21, i32 %20, i32 1023
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 %22, i32 0
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %11, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 1
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %3
  %30 = ashr i32 %29, 31
  %31 = add i32 %29, 32
  %32 = add i32 %31, %30
  %33 = ashr i32 %32, 6
  %34 = add nsw i32 %33, %7
  %35 = icmp slt i32 %34, 1023
  %36 = select i1 %35, i32 %34, i32 1023
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds i16, i16* %11, i64 1
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 2
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %43, %3
  %45 = ashr i32 %44, 31
  %46 = add i32 %44, 32
  %47 = add i32 %46, %45
  %48 = ashr i32 %47, 6
  %49 = add nsw i32 %48, %7
  %50 = icmp slt i32 %49, 1023
  %51 = select i1 %50, i32 %49, i32 1023
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %11, i64 2
  store i16 %54, i16* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %58, %3
  %60 = ashr i32 %59, 31
  %61 = add i32 %59, 32
  %62 = add i32 %61, %60
  %63 = ashr i32 %62, 6
  %64 = add nsw i32 %63, %7
  %65 = icmp slt i32 %64, 1023
  %66 = select i1 %65, i32 %64, i32 1023
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %11, i64 3
  store i16 %69, i16* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 4
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = mul nsw i32 %73, %3
  %75 = ashr i32 %74, 31
  %76 = add i32 %74, 32
  %77 = add i32 %76, %75
  %78 = ashr i32 %77, 6
  %79 = add nsw i32 %78, %7
  %80 = icmp slt i32 %79, 1023
  %81 = select i1 %80, i32 %79, i32 1023
  %82 = icmp sgt i32 %81, 0
  %83 = select i1 %82, i32 %81, i32 0
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %11, i64 4
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 5
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = mul nsw i32 %88, %3
  %90 = ashr i32 %89, 31
  %91 = add i32 %89, 32
  %92 = add i32 %91, %90
  %93 = ashr i32 %92, 6
  %94 = add nsw i32 %93, %7
  %95 = icmp slt i32 %94, 1023
  %96 = select i1 %95, i32 %94, i32 1023
  %97 = icmp sgt i32 %96, 0
  %98 = select i1 %97, i32 %96, i32 0
  %99 = trunc i32 %98 to i16
  %100 = getelementptr inbounds i16, i16* %11, i64 5
  store i16 %99, i16* %100, align 2
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 6
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = mul nsw i32 %103, %3
  %105 = ashr i32 %104, 31
  %106 = add i32 %104, 32
  %107 = add i32 %106, %105
  %108 = ashr i32 %107, 6
  %109 = add nsw i32 %108, %7
  %110 = icmp slt i32 %109, 1023
  %111 = select i1 %110, i32 %109, i32 1023
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i16
  %115 = getelementptr inbounds i16, i16* %11, i64 6
  store i16 %114, i16* %115, align 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 7
  %117 = load i16, i16* %116, align 2
  %118 = sext i16 %117 to i32
  %119 = mul nsw i32 %118, %3
  %120 = ashr i32 %119, 31
  %121 = add i32 %119, 32
  %122 = add i32 %121, %120
  %123 = ashr i32 %122, 6
  %124 = add nsw i32 %123, %7
  %125 = icmp slt i32 %124, 1023
  %126 = select i1 %125, i32 %124, i32 1023
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %11, i64 7
  store i16 %129, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %11, i64 %8
  %132 = add nuw nsw i64 %10, 1
  %133 = icmp eq i64 %132, 4
  br i1 %133, label %134, label %9

134:                                              ; preds = %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = icmp slt i32 %8, 1
  %15 = select i1 %14, i32 %8, i32 1
  %16 = sext i32 %15 to i64
  %17 = icmp slt i32 %8, 2
  %18 = select i1 %17, i32 %8, i32 2
  %19 = sext i32 %18 to i64
  %20 = icmp slt i32 %8, 3
  %21 = select i1 %20, i32 %8, i32 3
  %22 = sext i32 %21 to i64
  %23 = icmp slt i32 %8, 4
  %24 = select i1 %23, i32 %8, i32 4
  %25 = sext i32 %24 to i64
  %26 = icmp slt i32 %8, 5
  %27 = select i1 %26, i32 %8, i32 5
  %28 = sext i32 %27 to i64
  %29 = icmp slt i32 %8, 6
  %30 = select i1 %29, i32 %8, i32 6
  %31 = sext i32 %30 to i64
  %32 = icmp slt i32 %8, 7
  %33 = select i1 %32, i32 %8, i32 7
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %35, %5
  %36 = phi i64 [ 0, %5 ], [ %90, %35 ]
  %37 = phi i16* [ %6, %5 ], [ %89, %35 ]
  %38 = phi i32 [ 0, %5 ], [ %86, %35 ]
  %39 = getelementptr inbounds i16, i16* %37, i64 %12
  %40 = load i16, i16* %39, align 2
  %41 = shl i16 %40, 3
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 0
  store i16 %41, i16* %42, align 2
  %43 = sext i16 %41 to i32
  %44 = add nsw i32 %38, %43
  %45 = getelementptr inbounds i16, i16* %37, i64 %16
  %46 = load i16, i16* %45, align 2
  %47 = shl i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 1
  store i16 %47, i16* %48, align 2
  %49 = sext i16 %47 to i32
  %50 = add nsw i32 %44, %49
  %51 = getelementptr inbounds i16, i16* %37, i64 %19
  %52 = load i16, i16* %51, align 2
  %53 = shl i16 %52, 3
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 2
  store i16 %53, i16* %54, align 2
  %55 = sext i16 %53 to i32
  %56 = add nsw i32 %50, %55
  %57 = getelementptr inbounds i16, i16* %37, i64 %22
  %58 = load i16, i16* %57, align 2
  %59 = shl i16 %58, 3
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 3
  store i16 %59, i16* %60, align 2
  %61 = sext i16 %59 to i32
  %62 = add nsw i32 %56, %61
  %63 = getelementptr inbounds i16, i16* %37, i64 %25
  %64 = load i16, i16* %63, align 2
  %65 = shl i16 %64, 3
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 4
  store i16 %65, i16* %66, align 2
  %67 = sext i16 %65 to i32
  %68 = add nsw i32 %62, %67
  %69 = getelementptr inbounds i16, i16* %37, i64 %28
  %70 = load i16, i16* %69, align 2
  %71 = shl i16 %70, 3
  %72 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 5
  store i16 %71, i16* %72, align 2
  %73 = sext i16 %71 to i32
  %74 = add nsw i32 %68, %73
  %75 = getelementptr inbounds i16, i16* %37, i64 %31
  %76 = load i16, i16* %75, align 2
  %77 = shl i16 %76, 3
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 6
  store i16 %77, i16* %78, align 2
  %79 = sext i16 %77 to i32
  %80 = add nsw i32 %74, %79
  %81 = getelementptr inbounds i16, i16* %37, i64 %34
  %82 = load i16, i16* %81, align 2
  %83 = shl i16 %82, 3
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 7
  store i16 %83, i16* %84, align 2
  %85 = sext i16 %83 to i32
  %86 = add nsw i32 %80, %85
  %87 = icmp slt i64 %36, %13
  %88 = getelementptr inbounds i16, i16* %37, i64 %7
  %89 = select i1 %87, i16* %88, i16* %37
  %90 = add nuw nsw i64 %36, 1
  %91 = icmp eq i64 %90, 4
  br i1 %91, label %92, label %35

92:                                               ; preds = %35
  %93 = add nsw i32 %86, 16
  %94 = lshr i32 %93, 5
  %95 = trunc i32 %94 to i16
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = bitcast [32 x i16]* %0 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2
  %100 = sub <8 x i16> %99, %97
  %101 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = sub <8 x i16> %104, %97
  %106 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2
  %110 = sub <8 x i16> %109, %97
  %111 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = sub <8 x i16> %114, %97
  %116 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = add nsw i64 %12, 1
  %15 = icmp slt i32 %8, 2
  %16 = select i1 %15, i32 %8, i32 2
  %17 = sext i32 %16 to i64
  %18 = add nsw i64 %17, 1
  %19 = icmp slt i32 %8, 4
  %20 = select i1 %19, i32 %8, i32 4
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, 1
  %23 = icmp slt i32 %8, 6
  %24 = select i1 %23, i32 %8, i32 6
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, 1
  %27 = icmp slt i32 %8, 8
  %28 = select i1 %27, i32 %8, i32 8
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %29, 1
  %31 = icmp slt i32 %8, 10
  %32 = select i1 %31, i32 %8, i32 10
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, 1
  %35 = icmp slt i32 %8, 12
  %36 = select i1 %35, i32 %8, i32 12
  %37 = sext i32 %36 to i64
  %38 = add nsw i64 %37, 1
  %39 = icmp slt i32 %8, 14
  %40 = select i1 %39, i32 %8, i32 14
  %41 = sext i32 %40 to i64
  %42 = add nsw i64 %41, 1
  br label %43

43:                                               ; preds = %43, %5
  %44 = phi i64 [ 0, %5 ], [ %122, %43 ]
  %45 = phi i16* [ %6, %5 ], [ %121, %43 ]
  %46 = phi i32 [ 0, %5 ], [ %118, %43 ]
  %47 = getelementptr inbounds i16, i16* %45, i64 %12
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds i16, i16* %45, i64 %14
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %50, %48
  %52 = shl i16 %51, 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 0
  store i16 %52, i16* %53, align 2
  %54 = sext i16 %52 to i32
  %55 = add nsw i32 %46, %54
  %56 = getelementptr inbounds i16, i16* %45, i64 %17
  %57 = load i16, i16* %56, align 2
  %58 = getelementptr inbounds i16, i16* %45, i64 %18
  %59 = load i16, i16* %58, align 2
  %60 = add i16 %59, %57
  %61 = shl i16 %60, 2
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 1
  store i16 %61, i16* %62, align 2
  %63 = sext i16 %61 to i32
  %64 = add nsw i32 %55, %63
  %65 = getelementptr inbounds i16, i16* %45, i64 %21
  %66 = load i16, i16* %65, align 2
  %67 = getelementptr inbounds i16, i16* %45, i64 %22
  %68 = load i16, i16* %67, align 2
  %69 = add i16 %68, %66
  %70 = shl i16 %69, 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 2
  store i16 %70, i16* %71, align 2
  %72 = sext i16 %70 to i32
  %73 = add nsw i32 %64, %72
  %74 = getelementptr inbounds i16, i16* %45, i64 %25
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds i16, i16* %45, i64 %26
  %77 = load i16, i16* %76, align 2
  %78 = add i16 %77, %75
  %79 = shl i16 %78, 2
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 3
  store i16 %79, i16* %80, align 2
  %81 = sext i16 %79 to i32
  %82 = add nsw i32 %73, %81
  %83 = getelementptr inbounds i16, i16* %45, i64 %29
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %45, i64 %30
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %86, %84
  %88 = shl i16 %87, 2
  %89 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 4
  store i16 %88, i16* %89, align 2
  %90 = sext i16 %88 to i32
  %91 = add nsw i32 %82, %90
  %92 = getelementptr inbounds i16, i16* %45, i64 %33
  %93 = load i16, i16* %92, align 2
  %94 = getelementptr inbounds i16, i16* %45, i64 %34
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, %93
  %97 = shl i16 %96, 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 5
  store i16 %97, i16* %98, align 2
  %99 = sext i16 %97 to i32
  %100 = add nsw i32 %91, %99
  %101 = getelementptr inbounds i16, i16* %45, i64 %37
  %102 = load i16, i16* %101, align 2
  %103 = getelementptr inbounds i16, i16* %45, i64 %38
  %104 = load i16, i16* %103, align 2
  %105 = add i16 %104, %102
  %106 = shl i16 %105, 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 6
  store i16 %106, i16* %107, align 2
  %108 = sext i16 %106 to i32
  %109 = add nsw i32 %100, %108
  %110 = getelementptr inbounds i16, i16* %45, i64 %41
  %111 = load i16, i16* %110, align 2
  %112 = getelementptr inbounds i16, i16* %45, i64 %42
  %113 = load i16, i16* %112, align 2
  %114 = add i16 %113, %111
  %115 = shl i16 %114, 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 7
  store i16 %115, i16* %116, align 2
  %117 = sext i16 %115 to i32
  %118 = add nsw i32 %109, %117
  %119 = icmp slt i64 %44, %13
  %120 = getelementptr inbounds i16, i16* %45, i64 %7
  %121 = select i1 %119, i16* %120, i16* %45
  %122 = add nuw nsw i64 %44, 1
  %123 = icmp eq i64 %122, 4
  br i1 %123, label %124, label %43

124:                                              ; preds = %43
  %125 = add nsw i32 %118, 16
  %126 = lshr i32 %125, 5
  %127 = trunc i32 %126 to i16
  %128 = insertelement <8 x i16> undef, i16 %127, i32 0
  %129 = shufflevector <8 x i16> %128, <8 x i16> undef, <8 x i32> zeroinitializer
  %130 = bitcast [32 x i16]* %0 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2
  %132 = sub <8 x i16> %131, %129
  %133 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2
  %137 = sub <8 x i16> %136, %129
  %138 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2
  %142 = sub <8 x i16> %141, %129
  %143 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2
  %147 = sub <8 x i16> %146, %129
  %148 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi4ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = icmp slt i32 %8, 0
  %12 = select i1 %11, i32 %8, i32 0
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %7, %13
  %15 = sext i32 %9 to i64
  %16 = add nsw i64 %13, 1
  %17 = add nsw i64 %14, 1
  %18 = icmp slt i32 %8, 2
  %19 = select i1 %18, i32 %8, i32 2
  %20 = sext i32 %19 to i64
  %21 = add nsw i64 %7, %20
  %22 = add nsw i64 %20, 1
  %23 = add nsw i64 %21, 1
  %24 = icmp slt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %7, %26
  %28 = add nsw i64 %26, 1
  %29 = add nsw i64 %27, 1
  %30 = icmp slt i32 %8, 6
  %31 = select i1 %30, i32 %8, i32 6
  %32 = sext i32 %31 to i64
  %33 = add nsw i64 %7, %32
  %34 = add nsw i64 %32, 1
  %35 = add nsw i64 %33, 1
  %36 = icmp slt i32 %8, 8
  %37 = select i1 %36, i32 %8, i32 8
  %38 = sext i32 %37 to i64
  %39 = add nsw i64 %7, %38
  %40 = add nsw i64 %38, 1
  %41 = add nsw i64 %39, 1
  %42 = icmp slt i32 %8, 10
  %43 = select i1 %42, i32 %8, i32 10
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %7, %44
  %46 = add nsw i64 %44, 1
  %47 = add nsw i64 %45, 1
  %48 = icmp slt i32 %8, 12
  %49 = select i1 %48, i32 %8, i32 12
  %50 = sext i32 %49 to i64
  %51 = add nsw i64 %7, %50
  %52 = add nsw i64 %50, 1
  %53 = add nsw i64 %51, 1
  %54 = icmp slt i32 %8, 14
  %55 = select i1 %54, i32 %8, i32 14
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %7, %56
  %58 = add nsw i64 %56, 1
  %59 = add nsw i64 %57, 1
  br label %60

60:                                               ; preds = %60, %5
  %61 = phi i64 [ 0, %5 ], [ %188, %60 ]
  %62 = phi i16* [ %6, %5 ], [ %187, %60 ]
  %63 = phi i32 [ 0, %5 ], [ %183, %60 ]
  %64 = getelementptr inbounds i16, i16* %62, i64 %13
  %65 = load i16, i16* %64, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 %16
  %67 = load i16, i16* %66, align 2
  %68 = getelementptr inbounds i16, i16* %62, i64 %14
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds i16, i16* %62, i64 %17
  %71 = load i16, i16* %70, align 2
  %72 = add i16 %67, %65
  %73 = add i16 %72, %69
  %74 = add i16 %73, %71
  %75 = shl i16 %74, 1
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 0
  store i16 %75, i16* %76, align 2
  %77 = sext i16 %75 to i32
  %78 = add nsw i32 %63, %77
  %79 = getelementptr inbounds i16, i16* %62, i64 %20
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds i16, i16* %62, i64 %22
  %82 = load i16, i16* %81, align 2
  %83 = getelementptr inbounds i16, i16* %62, i64 %21
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %62, i64 %23
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %82, %80
  %88 = add i16 %87, %84
  %89 = add i16 %88, %86
  %90 = shl i16 %89, 1
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 1
  store i16 %90, i16* %91, align 2
  %92 = sext i16 %90 to i32
  %93 = add nsw i32 %78, %92
  %94 = getelementptr inbounds i16, i16* %62, i64 %26
  %95 = load i16, i16* %94, align 2
  %96 = getelementptr inbounds i16, i16* %62, i64 %28
  %97 = load i16, i16* %96, align 2
  %98 = getelementptr inbounds i16, i16* %62, i64 %27
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds i16, i16* %62, i64 %29
  %101 = load i16, i16* %100, align 2
  %102 = add i16 %97, %95
  %103 = add i16 %102, %99
  %104 = add i16 %103, %101
  %105 = shl i16 %104, 1
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 2
  store i16 %105, i16* %106, align 2
  %107 = sext i16 %105 to i32
  %108 = add nsw i32 %93, %107
  %109 = getelementptr inbounds i16, i16* %62, i64 %32
  %110 = load i16, i16* %109, align 2
  %111 = getelementptr inbounds i16, i16* %62, i64 %34
  %112 = load i16, i16* %111, align 2
  %113 = getelementptr inbounds i16, i16* %62, i64 %33
  %114 = load i16, i16* %113, align 2
  %115 = getelementptr inbounds i16, i16* %62, i64 %35
  %116 = load i16, i16* %115, align 2
  %117 = add i16 %112, %110
  %118 = add i16 %117, %114
  %119 = add i16 %118, %116
  %120 = shl i16 %119, 1
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 3
  store i16 %120, i16* %121, align 2
  %122 = sext i16 %120 to i32
  %123 = add nsw i32 %108, %122
  %124 = getelementptr inbounds i16, i16* %62, i64 %38
  %125 = load i16, i16* %124, align 2
  %126 = getelementptr inbounds i16, i16* %62, i64 %40
  %127 = load i16, i16* %126, align 2
  %128 = getelementptr inbounds i16, i16* %62, i64 %39
  %129 = load i16, i16* %128, align 2
  %130 = getelementptr inbounds i16, i16* %62, i64 %41
  %131 = load i16, i16* %130, align 2
  %132 = add i16 %127, %125
  %133 = add i16 %132, %129
  %134 = add i16 %133, %131
  %135 = shl i16 %134, 1
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 4
  store i16 %135, i16* %136, align 2
  %137 = sext i16 %135 to i32
  %138 = add nsw i32 %123, %137
  %139 = getelementptr inbounds i16, i16* %62, i64 %44
  %140 = load i16, i16* %139, align 2
  %141 = getelementptr inbounds i16, i16* %62, i64 %46
  %142 = load i16, i16* %141, align 2
  %143 = getelementptr inbounds i16, i16* %62, i64 %45
  %144 = load i16, i16* %143, align 2
  %145 = getelementptr inbounds i16, i16* %62, i64 %47
  %146 = load i16, i16* %145, align 2
  %147 = add i16 %142, %140
  %148 = add i16 %147, %144
  %149 = add i16 %148, %146
  %150 = shl i16 %149, 1
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 5
  store i16 %150, i16* %151, align 2
  %152 = sext i16 %150 to i32
  %153 = add nsw i32 %138, %152
  %154 = getelementptr inbounds i16, i16* %62, i64 %50
  %155 = load i16, i16* %154, align 2
  %156 = getelementptr inbounds i16, i16* %62, i64 %52
  %157 = load i16, i16* %156, align 2
  %158 = getelementptr inbounds i16, i16* %62, i64 %51
  %159 = load i16, i16* %158, align 2
  %160 = getelementptr inbounds i16, i16* %62, i64 %53
  %161 = load i16, i16* %160, align 2
  %162 = add i16 %157, %155
  %163 = add i16 %162, %159
  %164 = add i16 %163, %161
  %165 = shl i16 %164, 1
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 6
  store i16 %165, i16* %166, align 2
  %167 = sext i16 %165 to i32
  %168 = add nsw i32 %153, %167
  %169 = getelementptr inbounds i16, i16* %62, i64 %56
  %170 = load i16, i16* %169, align 2
  %171 = getelementptr inbounds i16, i16* %62, i64 %58
  %172 = load i16, i16* %171, align 2
  %173 = getelementptr inbounds i16, i16* %62, i64 %57
  %174 = load i16, i16* %173, align 2
  %175 = getelementptr inbounds i16, i16* %62, i64 %59
  %176 = load i16, i16* %175, align 2
  %177 = add i16 %172, %170
  %178 = add i16 %177, %174
  %179 = add i16 %178, %176
  %180 = shl i16 %179, 1
  %181 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 7
  store i16 %180, i16* %181, align 2
  %182 = sext i16 %180 to i32
  %183 = add nsw i32 %168, %182
  %184 = shl nuw i64 %61, 1
  %185 = icmp slt i64 %184, %15
  %186 = getelementptr inbounds i16, i16* %62, i64 %10
  %187 = select i1 %185, i16* %186, i16* %62
  %188 = add nuw nsw i64 %61, 1
  %189 = icmp eq i64 %188, 4
  br i1 %189, label %190, label %60

190:                                              ; preds = %60
  %191 = add nsw i32 %183, 16
  %192 = lshr i32 %191, 5
  %193 = trunc i32 %192 to i16
  %194 = insertelement <8 x i16> undef, i16 %193, i32 0
  %195 = shufflevector <8 x i16> %194, <8 x i16> undef, <8 x i32> zeroinitializer
  %196 = bitcast [32 x i16]* %0 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2
  %198 = sub <8 x i16> %197, %195
  %199 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %199, align 2
  %200 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 2
  %203 = sub <8 x i16> %202, %195
  %204 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 2
  %208 = sub <8 x i16> %207, %195
  %209 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %208, <8 x i16>* %209, align 2
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = sub <8 x i16> %212, %195
  %214 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %214, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi8ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %132, %9 ]
  %11 = phi i16* [ %5, %4 ], [ %131, %9 ]
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 0
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = mul nsw i32 %14, %3
  %16 = ashr i32 %15, 31
  %17 = add i32 %15, 32
  %18 = add i32 %17, %16
  %19 = ashr i32 %18, 6
  %20 = add nsw i32 %19, %7
  %21 = icmp slt i32 %20, 1023
  %22 = select i1 %21, i32 %20, i32 1023
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 %22, i32 0
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %11, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 1
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %3
  %30 = ashr i32 %29, 31
  %31 = add i32 %29, 32
  %32 = add i32 %31, %30
  %33 = ashr i32 %32, 6
  %34 = add nsw i32 %33, %7
  %35 = icmp slt i32 %34, 1023
  %36 = select i1 %35, i32 %34, i32 1023
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds i16, i16* %11, i64 1
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 2
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %43, %3
  %45 = ashr i32 %44, 31
  %46 = add i32 %44, 32
  %47 = add i32 %46, %45
  %48 = ashr i32 %47, 6
  %49 = add nsw i32 %48, %7
  %50 = icmp slt i32 %49, 1023
  %51 = select i1 %50, i32 %49, i32 1023
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %11, i64 2
  store i16 %54, i16* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %58, %3
  %60 = ashr i32 %59, 31
  %61 = add i32 %59, 32
  %62 = add i32 %61, %60
  %63 = ashr i32 %62, 6
  %64 = add nsw i32 %63, %7
  %65 = icmp slt i32 %64, 1023
  %66 = select i1 %65, i32 %64, i32 1023
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %11, i64 3
  store i16 %69, i16* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 4
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = mul nsw i32 %73, %3
  %75 = ashr i32 %74, 31
  %76 = add i32 %74, 32
  %77 = add i32 %76, %75
  %78 = ashr i32 %77, 6
  %79 = add nsw i32 %78, %7
  %80 = icmp slt i32 %79, 1023
  %81 = select i1 %80, i32 %79, i32 1023
  %82 = icmp sgt i32 %81, 0
  %83 = select i1 %82, i32 %81, i32 0
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %11, i64 4
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 5
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = mul nsw i32 %88, %3
  %90 = ashr i32 %89, 31
  %91 = add i32 %89, 32
  %92 = add i32 %91, %90
  %93 = ashr i32 %92, 6
  %94 = add nsw i32 %93, %7
  %95 = icmp slt i32 %94, 1023
  %96 = select i1 %95, i32 %94, i32 1023
  %97 = icmp sgt i32 %96, 0
  %98 = select i1 %97, i32 %96, i32 0
  %99 = trunc i32 %98 to i16
  %100 = getelementptr inbounds i16, i16* %11, i64 5
  store i16 %99, i16* %100, align 2
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 6
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = mul nsw i32 %103, %3
  %105 = ashr i32 %104, 31
  %106 = add i32 %104, 32
  %107 = add i32 %106, %105
  %108 = ashr i32 %107, 6
  %109 = add nsw i32 %108, %7
  %110 = icmp slt i32 %109, 1023
  %111 = select i1 %110, i32 %109, i32 1023
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i16
  %115 = getelementptr inbounds i16, i16* %11, i64 6
  store i16 %114, i16* %115, align 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 7
  %117 = load i16, i16* %116, align 2
  %118 = sext i16 %117 to i32
  %119 = mul nsw i32 %118, %3
  %120 = ashr i32 %119, 31
  %121 = add i32 %119, 32
  %122 = add i32 %121, %120
  %123 = ashr i32 %122, 6
  %124 = add nsw i32 %123, %7
  %125 = icmp slt i32 %124, 1023
  %126 = select i1 %125, i32 %124, i32 1023
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %11, i64 7
  store i16 %129, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %11, i64 %8
  %132 = add nuw nsw i64 %10, 1
  %133 = icmp eq i64 %132, 8
  br i1 %133, label %134, label %9

134:                                              ; preds = %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = icmp slt i32 %8, 1
  %15 = select i1 %14, i32 %8, i32 1
  %16 = sext i32 %15 to i64
  %17 = icmp slt i32 %8, 2
  %18 = select i1 %17, i32 %8, i32 2
  %19 = sext i32 %18 to i64
  %20 = icmp slt i32 %8, 3
  %21 = select i1 %20, i32 %8, i32 3
  %22 = sext i32 %21 to i64
  %23 = icmp slt i32 %8, 4
  %24 = select i1 %23, i32 %8, i32 4
  %25 = sext i32 %24 to i64
  %26 = icmp slt i32 %8, 5
  %27 = select i1 %26, i32 %8, i32 5
  %28 = sext i32 %27 to i64
  %29 = icmp slt i32 %8, 6
  %30 = select i1 %29, i32 %8, i32 6
  %31 = sext i32 %30 to i64
  %32 = icmp slt i32 %8, 7
  %33 = select i1 %32, i32 %8, i32 7
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %35, %5
  %36 = phi i64 [ 0, %5 ], [ %90, %35 ]
  %37 = phi i16* [ %6, %5 ], [ %89, %35 ]
  %38 = phi i32 [ 0, %5 ], [ %86, %35 ]
  %39 = getelementptr inbounds i16, i16* %37, i64 %12
  %40 = load i16, i16* %39, align 2
  %41 = shl i16 %40, 3
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 0
  store i16 %41, i16* %42, align 2
  %43 = sext i16 %41 to i32
  %44 = add nsw i32 %38, %43
  %45 = getelementptr inbounds i16, i16* %37, i64 %16
  %46 = load i16, i16* %45, align 2
  %47 = shl i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 1
  store i16 %47, i16* %48, align 2
  %49 = sext i16 %47 to i32
  %50 = add nsw i32 %44, %49
  %51 = getelementptr inbounds i16, i16* %37, i64 %19
  %52 = load i16, i16* %51, align 2
  %53 = shl i16 %52, 3
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 2
  store i16 %53, i16* %54, align 2
  %55 = sext i16 %53 to i32
  %56 = add nsw i32 %50, %55
  %57 = getelementptr inbounds i16, i16* %37, i64 %22
  %58 = load i16, i16* %57, align 2
  %59 = shl i16 %58, 3
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 3
  store i16 %59, i16* %60, align 2
  %61 = sext i16 %59 to i32
  %62 = add nsw i32 %56, %61
  %63 = getelementptr inbounds i16, i16* %37, i64 %25
  %64 = load i16, i16* %63, align 2
  %65 = shl i16 %64, 3
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 4
  store i16 %65, i16* %66, align 2
  %67 = sext i16 %65 to i32
  %68 = add nsw i32 %62, %67
  %69 = getelementptr inbounds i16, i16* %37, i64 %28
  %70 = load i16, i16* %69, align 2
  %71 = shl i16 %70, 3
  %72 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 5
  store i16 %71, i16* %72, align 2
  %73 = sext i16 %71 to i32
  %74 = add nsw i32 %68, %73
  %75 = getelementptr inbounds i16, i16* %37, i64 %31
  %76 = load i16, i16* %75, align 2
  %77 = shl i16 %76, 3
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 6
  store i16 %77, i16* %78, align 2
  %79 = sext i16 %77 to i32
  %80 = add nsw i32 %74, %79
  %81 = getelementptr inbounds i16, i16* %37, i64 %34
  %82 = load i16, i16* %81, align 2
  %83 = shl i16 %82, 3
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 7
  store i16 %83, i16* %84, align 2
  %85 = sext i16 %83 to i32
  %86 = add nsw i32 %80, %85
  %87 = icmp slt i64 %36, %13
  %88 = getelementptr inbounds i16, i16* %37, i64 %7
  %89 = select i1 %87, i16* %88, i16* %37
  %90 = add nuw nsw i64 %36, 1
  %91 = icmp eq i64 %90, 8
  br i1 %91, label %92, label %35

92:                                               ; preds = %35
  %93 = add nsw i32 %86, 32
  %94 = lshr i32 %93, 6
  %95 = trunc i32 %94 to i16
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = bitcast [32 x i16]* %0 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2
  %100 = sub <8 x i16> %99, %97
  %101 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = sub <8 x i16> %104, %97
  %106 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2
  %110 = sub <8 x i16> %109, %97
  %111 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = sub <8 x i16> %114, %97
  %116 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2
  %120 = sub <8 x i16> %119, %97
  %121 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2
  %125 = sub <8 x i16> %124, %97
  %126 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2
  %130 = sub <8 x i16> %129, %97
  %131 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2
  %135 = sub <8 x i16> %134, %97
  %136 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %136, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = add nsw i64 %12, 1
  %15 = icmp slt i32 %8, 2
  %16 = select i1 %15, i32 %8, i32 2
  %17 = sext i32 %16 to i64
  %18 = add nsw i64 %17, 1
  %19 = icmp slt i32 %8, 4
  %20 = select i1 %19, i32 %8, i32 4
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, 1
  %23 = icmp slt i32 %8, 6
  %24 = select i1 %23, i32 %8, i32 6
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, 1
  %27 = icmp slt i32 %8, 8
  %28 = select i1 %27, i32 %8, i32 8
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %29, 1
  %31 = icmp slt i32 %8, 10
  %32 = select i1 %31, i32 %8, i32 10
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, 1
  %35 = icmp slt i32 %8, 12
  %36 = select i1 %35, i32 %8, i32 12
  %37 = sext i32 %36 to i64
  %38 = add nsw i64 %37, 1
  %39 = icmp slt i32 %8, 14
  %40 = select i1 %39, i32 %8, i32 14
  %41 = sext i32 %40 to i64
  %42 = add nsw i64 %41, 1
  br label %43

43:                                               ; preds = %43, %5
  %44 = phi i64 [ 0, %5 ], [ %122, %43 ]
  %45 = phi i16* [ %6, %5 ], [ %121, %43 ]
  %46 = phi i32 [ 0, %5 ], [ %118, %43 ]
  %47 = getelementptr inbounds i16, i16* %45, i64 %12
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds i16, i16* %45, i64 %14
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %50, %48
  %52 = shl i16 %51, 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 0
  store i16 %52, i16* %53, align 2
  %54 = sext i16 %52 to i32
  %55 = add nsw i32 %46, %54
  %56 = getelementptr inbounds i16, i16* %45, i64 %17
  %57 = load i16, i16* %56, align 2
  %58 = getelementptr inbounds i16, i16* %45, i64 %18
  %59 = load i16, i16* %58, align 2
  %60 = add i16 %59, %57
  %61 = shl i16 %60, 2
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 1
  store i16 %61, i16* %62, align 2
  %63 = sext i16 %61 to i32
  %64 = add nsw i32 %55, %63
  %65 = getelementptr inbounds i16, i16* %45, i64 %21
  %66 = load i16, i16* %65, align 2
  %67 = getelementptr inbounds i16, i16* %45, i64 %22
  %68 = load i16, i16* %67, align 2
  %69 = add i16 %68, %66
  %70 = shl i16 %69, 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 2
  store i16 %70, i16* %71, align 2
  %72 = sext i16 %70 to i32
  %73 = add nsw i32 %64, %72
  %74 = getelementptr inbounds i16, i16* %45, i64 %25
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds i16, i16* %45, i64 %26
  %77 = load i16, i16* %76, align 2
  %78 = add i16 %77, %75
  %79 = shl i16 %78, 2
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 3
  store i16 %79, i16* %80, align 2
  %81 = sext i16 %79 to i32
  %82 = add nsw i32 %73, %81
  %83 = getelementptr inbounds i16, i16* %45, i64 %29
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %45, i64 %30
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %86, %84
  %88 = shl i16 %87, 2
  %89 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 4
  store i16 %88, i16* %89, align 2
  %90 = sext i16 %88 to i32
  %91 = add nsw i32 %82, %90
  %92 = getelementptr inbounds i16, i16* %45, i64 %33
  %93 = load i16, i16* %92, align 2
  %94 = getelementptr inbounds i16, i16* %45, i64 %34
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, %93
  %97 = shl i16 %96, 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 5
  store i16 %97, i16* %98, align 2
  %99 = sext i16 %97 to i32
  %100 = add nsw i32 %91, %99
  %101 = getelementptr inbounds i16, i16* %45, i64 %37
  %102 = load i16, i16* %101, align 2
  %103 = getelementptr inbounds i16, i16* %45, i64 %38
  %104 = load i16, i16* %103, align 2
  %105 = add i16 %104, %102
  %106 = shl i16 %105, 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 6
  store i16 %106, i16* %107, align 2
  %108 = sext i16 %106 to i32
  %109 = add nsw i32 %100, %108
  %110 = getelementptr inbounds i16, i16* %45, i64 %41
  %111 = load i16, i16* %110, align 2
  %112 = getelementptr inbounds i16, i16* %45, i64 %42
  %113 = load i16, i16* %112, align 2
  %114 = add i16 %113, %111
  %115 = shl i16 %114, 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 7
  store i16 %115, i16* %116, align 2
  %117 = sext i16 %115 to i32
  %118 = add nsw i32 %109, %117
  %119 = icmp slt i64 %44, %13
  %120 = getelementptr inbounds i16, i16* %45, i64 %7
  %121 = select i1 %119, i16* %120, i16* %45
  %122 = add nuw nsw i64 %44, 1
  %123 = icmp eq i64 %122, 8
  br i1 %123, label %124, label %43

124:                                              ; preds = %43
  %125 = add nsw i32 %118, 32
  %126 = lshr i32 %125, 6
  %127 = trunc i32 %126 to i16
  %128 = insertelement <8 x i16> undef, i16 %127, i32 0
  %129 = shufflevector <8 x i16> %128, <8 x i16> undef, <8 x i32> zeroinitializer
  %130 = bitcast [32 x i16]* %0 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2
  %132 = sub <8 x i16> %131, %129
  %133 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2
  %137 = sub <8 x i16> %136, %129
  %138 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2
  %142 = sub <8 x i16> %141, %129
  %143 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2
  %147 = sub <8 x i16> %146, %129
  %148 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %150 = bitcast i16* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = sub <8 x i16> %151, %129
  %153 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 2
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2
  %157 = sub <8 x i16> %156, %129
  %158 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2
  %162 = sub <8 x i16> %161, %129
  %163 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %163, align 2
  %164 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = sub <8 x i16> %166, %129
  %168 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %168, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi8ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = icmp slt i32 %8, 0
  %12 = select i1 %11, i32 %8, i32 0
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %7, %13
  %15 = sext i32 %9 to i64
  %16 = add nsw i64 %13, 1
  %17 = add nsw i64 %14, 1
  %18 = icmp slt i32 %8, 2
  %19 = select i1 %18, i32 %8, i32 2
  %20 = sext i32 %19 to i64
  %21 = add nsw i64 %7, %20
  %22 = add nsw i64 %20, 1
  %23 = add nsw i64 %21, 1
  %24 = icmp slt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %7, %26
  %28 = add nsw i64 %26, 1
  %29 = add nsw i64 %27, 1
  %30 = icmp slt i32 %8, 6
  %31 = select i1 %30, i32 %8, i32 6
  %32 = sext i32 %31 to i64
  %33 = add nsw i64 %7, %32
  %34 = add nsw i64 %32, 1
  %35 = add nsw i64 %33, 1
  %36 = icmp slt i32 %8, 8
  %37 = select i1 %36, i32 %8, i32 8
  %38 = sext i32 %37 to i64
  %39 = add nsw i64 %7, %38
  %40 = add nsw i64 %38, 1
  %41 = add nsw i64 %39, 1
  %42 = icmp slt i32 %8, 10
  %43 = select i1 %42, i32 %8, i32 10
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %7, %44
  %46 = add nsw i64 %44, 1
  %47 = add nsw i64 %45, 1
  %48 = icmp slt i32 %8, 12
  %49 = select i1 %48, i32 %8, i32 12
  %50 = sext i32 %49 to i64
  %51 = add nsw i64 %7, %50
  %52 = add nsw i64 %50, 1
  %53 = add nsw i64 %51, 1
  %54 = icmp slt i32 %8, 14
  %55 = select i1 %54, i32 %8, i32 14
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %7, %56
  %58 = add nsw i64 %56, 1
  %59 = add nsw i64 %57, 1
  br label %60

60:                                               ; preds = %60, %5
  %61 = phi i64 [ 0, %5 ], [ %188, %60 ]
  %62 = phi i16* [ %6, %5 ], [ %187, %60 ]
  %63 = phi i32 [ 0, %5 ], [ %183, %60 ]
  %64 = getelementptr inbounds i16, i16* %62, i64 %13
  %65 = load i16, i16* %64, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 %16
  %67 = load i16, i16* %66, align 2
  %68 = getelementptr inbounds i16, i16* %62, i64 %14
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds i16, i16* %62, i64 %17
  %71 = load i16, i16* %70, align 2
  %72 = add i16 %67, %65
  %73 = add i16 %72, %69
  %74 = add i16 %73, %71
  %75 = shl i16 %74, 1
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 0
  store i16 %75, i16* %76, align 2
  %77 = sext i16 %75 to i32
  %78 = add nsw i32 %63, %77
  %79 = getelementptr inbounds i16, i16* %62, i64 %20
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds i16, i16* %62, i64 %22
  %82 = load i16, i16* %81, align 2
  %83 = getelementptr inbounds i16, i16* %62, i64 %21
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %62, i64 %23
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %82, %80
  %88 = add i16 %87, %84
  %89 = add i16 %88, %86
  %90 = shl i16 %89, 1
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 1
  store i16 %90, i16* %91, align 2
  %92 = sext i16 %90 to i32
  %93 = add nsw i32 %78, %92
  %94 = getelementptr inbounds i16, i16* %62, i64 %26
  %95 = load i16, i16* %94, align 2
  %96 = getelementptr inbounds i16, i16* %62, i64 %28
  %97 = load i16, i16* %96, align 2
  %98 = getelementptr inbounds i16, i16* %62, i64 %27
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds i16, i16* %62, i64 %29
  %101 = load i16, i16* %100, align 2
  %102 = add i16 %97, %95
  %103 = add i16 %102, %99
  %104 = add i16 %103, %101
  %105 = shl i16 %104, 1
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 2
  store i16 %105, i16* %106, align 2
  %107 = sext i16 %105 to i32
  %108 = add nsw i32 %93, %107
  %109 = getelementptr inbounds i16, i16* %62, i64 %32
  %110 = load i16, i16* %109, align 2
  %111 = getelementptr inbounds i16, i16* %62, i64 %34
  %112 = load i16, i16* %111, align 2
  %113 = getelementptr inbounds i16, i16* %62, i64 %33
  %114 = load i16, i16* %113, align 2
  %115 = getelementptr inbounds i16, i16* %62, i64 %35
  %116 = load i16, i16* %115, align 2
  %117 = add i16 %112, %110
  %118 = add i16 %117, %114
  %119 = add i16 %118, %116
  %120 = shl i16 %119, 1
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 3
  store i16 %120, i16* %121, align 2
  %122 = sext i16 %120 to i32
  %123 = add nsw i32 %108, %122
  %124 = getelementptr inbounds i16, i16* %62, i64 %38
  %125 = load i16, i16* %124, align 2
  %126 = getelementptr inbounds i16, i16* %62, i64 %40
  %127 = load i16, i16* %126, align 2
  %128 = getelementptr inbounds i16, i16* %62, i64 %39
  %129 = load i16, i16* %128, align 2
  %130 = getelementptr inbounds i16, i16* %62, i64 %41
  %131 = load i16, i16* %130, align 2
  %132 = add i16 %127, %125
  %133 = add i16 %132, %129
  %134 = add i16 %133, %131
  %135 = shl i16 %134, 1
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 4
  store i16 %135, i16* %136, align 2
  %137 = sext i16 %135 to i32
  %138 = add nsw i32 %123, %137
  %139 = getelementptr inbounds i16, i16* %62, i64 %44
  %140 = load i16, i16* %139, align 2
  %141 = getelementptr inbounds i16, i16* %62, i64 %46
  %142 = load i16, i16* %141, align 2
  %143 = getelementptr inbounds i16, i16* %62, i64 %45
  %144 = load i16, i16* %143, align 2
  %145 = getelementptr inbounds i16, i16* %62, i64 %47
  %146 = load i16, i16* %145, align 2
  %147 = add i16 %142, %140
  %148 = add i16 %147, %144
  %149 = add i16 %148, %146
  %150 = shl i16 %149, 1
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 5
  store i16 %150, i16* %151, align 2
  %152 = sext i16 %150 to i32
  %153 = add nsw i32 %138, %152
  %154 = getelementptr inbounds i16, i16* %62, i64 %50
  %155 = load i16, i16* %154, align 2
  %156 = getelementptr inbounds i16, i16* %62, i64 %52
  %157 = load i16, i16* %156, align 2
  %158 = getelementptr inbounds i16, i16* %62, i64 %51
  %159 = load i16, i16* %158, align 2
  %160 = getelementptr inbounds i16, i16* %62, i64 %53
  %161 = load i16, i16* %160, align 2
  %162 = add i16 %157, %155
  %163 = add i16 %162, %159
  %164 = add i16 %163, %161
  %165 = shl i16 %164, 1
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 6
  store i16 %165, i16* %166, align 2
  %167 = sext i16 %165 to i32
  %168 = add nsw i32 %153, %167
  %169 = getelementptr inbounds i16, i16* %62, i64 %56
  %170 = load i16, i16* %169, align 2
  %171 = getelementptr inbounds i16, i16* %62, i64 %58
  %172 = load i16, i16* %171, align 2
  %173 = getelementptr inbounds i16, i16* %62, i64 %57
  %174 = load i16, i16* %173, align 2
  %175 = getelementptr inbounds i16, i16* %62, i64 %59
  %176 = load i16, i16* %175, align 2
  %177 = add i16 %172, %170
  %178 = add i16 %177, %174
  %179 = add i16 %178, %176
  %180 = shl i16 %179, 1
  %181 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 7
  store i16 %180, i16* %181, align 2
  %182 = sext i16 %180 to i32
  %183 = add nsw i32 %168, %182
  %184 = shl nuw i64 %61, 1
  %185 = icmp slt i64 %184, %15
  %186 = getelementptr inbounds i16, i16* %62, i64 %10
  %187 = select i1 %185, i16* %186, i16* %62
  %188 = add nuw nsw i64 %61, 1
  %189 = icmp eq i64 %188, 8
  br i1 %189, label %190, label %60

190:                                              ; preds = %60
  %191 = add nsw i32 %183, 32
  %192 = lshr i32 %191, 6
  %193 = trunc i32 %192 to i16
  %194 = insertelement <8 x i16> undef, i16 %193, i32 0
  %195 = shufflevector <8 x i16> %194, <8 x i16> undef, <8 x i32> zeroinitializer
  %196 = bitcast [32 x i16]* %0 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2
  %198 = sub <8 x i16> %197, %195
  %199 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %199, align 2
  %200 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 2
  %203 = sub <8 x i16> %202, %195
  %204 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 2
  %208 = sub <8 x i16> %207, %195
  %209 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %208, <8 x i16>* %209, align 2
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = sub <8 x i16> %212, %195
  %214 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2
  %218 = sub <8 x i16> %217, %195
  %219 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %219, align 2
  %220 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2
  %223 = sub <8 x i16> %222, %195
  %224 = bitcast i16* %220 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %224, align 2
  %225 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2
  %228 = sub <8 x i16> %227, %195
  %229 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %228, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2
  %233 = sub <8 x i16> %232, %195
  %234 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %234, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi16ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %132, %9 ]
  %11 = phi i16* [ %5, %4 ], [ %131, %9 ]
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 0
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = mul nsw i32 %14, %3
  %16 = ashr i32 %15, 31
  %17 = add i32 %15, 32
  %18 = add i32 %17, %16
  %19 = ashr i32 %18, 6
  %20 = add nsw i32 %19, %7
  %21 = icmp slt i32 %20, 1023
  %22 = select i1 %21, i32 %20, i32 1023
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 %22, i32 0
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %11, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 1
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %3
  %30 = ashr i32 %29, 31
  %31 = add i32 %29, 32
  %32 = add i32 %31, %30
  %33 = ashr i32 %32, 6
  %34 = add nsw i32 %33, %7
  %35 = icmp slt i32 %34, 1023
  %36 = select i1 %35, i32 %34, i32 1023
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds i16, i16* %11, i64 1
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 2
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %43, %3
  %45 = ashr i32 %44, 31
  %46 = add i32 %44, 32
  %47 = add i32 %46, %45
  %48 = ashr i32 %47, 6
  %49 = add nsw i32 %48, %7
  %50 = icmp slt i32 %49, 1023
  %51 = select i1 %50, i32 %49, i32 1023
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %11, i64 2
  store i16 %54, i16* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %58, %3
  %60 = ashr i32 %59, 31
  %61 = add i32 %59, 32
  %62 = add i32 %61, %60
  %63 = ashr i32 %62, 6
  %64 = add nsw i32 %63, %7
  %65 = icmp slt i32 %64, 1023
  %66 = select i1 %65, i32 %64, i32 1023
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %11, i64 3
  store i16 %69, i16* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 4
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = mul nsw i32 %73, %3
  %75 = ashr i32 %74, 31
  %76 = add i32 %74, 32
  %77 = add i32 %76, %75
  %78 = ashr i32 %77, 6
  %79 = add nsw i32 %78, %7
  %80 = icmp slt i32 %79, 1023
  %81 = select i1 %80, i32 %79, i32 1023
  %82 = icmp sgt i32 %81, 0
  %83 = select i1 %82, i32 %81, i32 0
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %11, i64 4
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 5
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = mul nsw i32 %88, %3
  %90 = ashr i32 %89, 31
  %91 = add i32 %89, 32
  %92 = add i32 %91, %90
  %93 = ashr i32 %92, 6
  %94 = add nsw i32 %93, %7
  %95 = icmp slt i32 %94, 1023
  %96 = select i1 %95, i32 %94, i32 1023
  %97 = icmp sgt i32 %96, 0
  %98 = select i1 %97, i32 %96, i32 0
  %99 = trunc i32 %98 to i16
  %100 = getelementptr inbounds i16, i16* %11, i64 5
  store i16 %99, i16* %100, align 2
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 6
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = mul nsw i32 %103, %3
  %105 = ashr i32 %104, 31
  %106 = add i32 %104, 32
  %107 = add i32 %106, %105
  %108 = ashr i32 %107, 6
  %109 = add nsw i32 %108, %7
  %110 = icmp slt i32 %109, 1023
  %111 = select i1 %110, i32 %109, i32 1023
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i16
  %115 = getelementptr inbounds i16, i16* %11, i64 6
  store i16 %114, i16* %115, align 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 7
  %117 = load i16, i16* %116, align 2
  %118 = sext i16 %117 to i32
  %119 = mul nsw i32 %118, %3
  %120 = ashr i32 %119, 31
  %121 = add i32 %119, 32
  %122 = add i32 %121, %120
  %123 = ashr i32 %122, 6
  %124 = add nsw i32 %123, %7
  %125 = icmp slt i32 %124, 1023
  %126 = select i1 %125, i32 %124, i32 1023
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %11, i64 7
  store i16 %129, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %11, i64 %8
  %132 = add nuw nsw i64 %10, 1
  %133 = icmp eq i64 %132, 16
  br i1 %133, label %134, label %9

134:                                              ; preds = %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = icmp slt i32 %8, 1
  %15 = select i1 %14, i32 %8, i32 1
  %16 = sext i32 %15 to i64
  %17 = icmp slt i32 %8, 2
  %18 = select i1 %17, i32 %8, i32 2
  %19 = sext i32 %18 to i64
  %20 = icmp slt i32 %8, 3
  %21 = select i1 %20, i32 %8, i32 3
  %22 = sext i32 %21 to i64
  %23 = icmp slt i32 %8, 4
  %24 = select i1 %23, i32 %8, i32 4
  %25 = sext i32 %24 to i64
  %26 = icmp slt i32 %8, 5
  %27 = select i1 %26, i32 %8, i32 5
  %28 = sext i32 %27 to i64
  %29 = icmp slt i32 %8, 6
  %30 = select i1 %29, i32 %8, i32 6
  %31 = sext i32 %30 to i64
  %32 = icmp slt i32 %8, 7
  %33 = select i1 %32, i32 %8, i32 7
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %35, %5
  %36 = phi i64 [ 0, %5 ], [ %90, %35 ]
  %37 = phi i16* [ %6, %5 ], [ %89, %35 ]
  %38 = phi i32 [ 0, %5 ], [ %86, %35 ]
  %39 = getelementptr inbounds i16, i16* %37, i64 %12
  %40 = load i16, i16* %39, align 2
  %41 = shl i16 %40, 3
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 0
  store i16 %41, i16* %42, align 2
  %43 = sext i16 %41 to i32
  %44 = add nsw i32 %38, %43
  %45 = getelementptr inbounds i16, i16* %37, i64 %16
  %46 = load i16, i16* %45, align 2
  %47 = shl i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 1
  store i16 %47, i16* %48, align 2
  %49 = sext i16 %47 to i32
  %50 = add nsw i32 %44, %49
  %51 = getelementptr inbounds i16, i16* %37, i64 %19
  %52 = load i16, i16* %51, align 2
  %53 = shl i16 %52, 3
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 2
  store i16 %53, i16* %54, align 2
  %55 = sext i16 %53 to i32
  %56 = add nsw i32 %50, %55
  %57 = getelementptr inbounds i16, i16* %37, i64 %22
  %58 = load i16, i16* %57, align 2
  %59 = shl i16 %58, 3
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 3
  store i16 %59, i16* %60, align 2
  %61 = sext i16 %59 to i32
  %62 = add nsw i32 %56, %61
  %63 = getelementptr inbounds i16, i16* %37, i64 %25
  %64 = load i16, i16* %63, align 2
  %65 = shl i16 %64, 3
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 4
  store i16 %65, i16* %66, align 2
  %67 = sext i16 %65 to i32
  %68 = add nsw i32 %62, %67
  %69 = getelementptr inbounds i16, i16* %37, i64 %28
  %70 = load i16, i16* %69, align 2
  %71 = shl i16 %70, 3
  %72 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 5
  store i16 %71, i16* %72, align 2
  %73 = sext i16 %71 to i32
  %74 = add nsw i32 %68, %73
  %75 = getelementptr inbounds i16, i16* %37, i64 %31
  %76 = load i16, i16* %75, align 2
  %77 = shl i16 %76, 3
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 6
  store i16 %77, i16* %78, align 2
  %79 = sext i16 %77 to i32
  %80 = add nsw i32 %74, %79
  %81 = getelementptr inbounds i16, i16* %37, i64 %34
  %82 = load i16, i16* %81, align 2
  %83 = shl i16 %82, 3
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 7
  store i16 %83, i16* %84, align 2
  %85 = sext i16 %83 to i32
  %86 = add nsw i32 %80, %85
  %87 = icmp slt i64 %36, %13
  %88 = getelementptr inbounds i16, i16* %37, i64 %7
  %89 = select i1 %87, i16* %88, i16* %37
  %90 = add nuw nsw i64 %36, 1
  %91 = icmp eq i64 %90, 16
  br i1 %91, label %92, label %35

92:                                               ; preds = %35
  %93 = add nsw i32 %86, 64
  %94 = lshr i32 %93, 7
  %95 = trunc i32 %94 to i16
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = bitcast [32 x i16]* %0 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2
  %100 = sub <8 x i16> %99, %97
  %101 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = sub <8 x i16> %104, %97
  %106 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2
  %110 = sub <8 x i16> %109, %97
  %111 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = sub <8 x i16> %114, %97
  %116 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2
  %120 = sub <8 x i16> %119, %97
  %121 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %121, align 2
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2
  %125 = sub <8 x i16> %124, %97
  %126 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 2
  %127 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2
  %130 = sub <8 x i16> %129, %97
  %131 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2
  %135 = sub <8 x i16> %134, %97
  %136 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %136, align 2
  %137 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2
  %140 = sub <8 x i16> %139, %97
  %141 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %141, align 2
  %142 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %143 = bitcast i16* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2
  %145 = sub <8 x i16> %144, %97
  %146 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %146, align 2
  %147 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2
  %150 = sub <8 x i16> %149, %97
  %151 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %151, align 2
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %153 = bitcast i16* %152 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2
  %155 = sub <8 x i16> %154, %97
  %156 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %155, <8 x i16>* %156, align 2
  %157 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2
  %160 = sub <8 x i16> %159, %97
  %161 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %161, align 2
  %162 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2
  %165 = sub <8 x i16> %164, %97
  %166 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %166, align 2
  %167 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 2
  %170 = sub <8 x i16> %169, %97
  %171 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %171, align 2
  %172 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %173 = bitcast i16* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 2
  %175 = sub <8 x i16> %174, %97
  %176 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %176, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = add nsw i64 %12, 1
  %15 = icmp slt i32 %8, 2
  %16 = select i1 %15, i32 %8, i32 2
  %17 = sext i32 %16 to i64
  %18 = add nsw i64 %17, 1
  %19 = icmp slt i32 %8, 4
  %20 = select i1 %19, i32 %8, i32 4
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, 1
  %23 = icmp slt i32 %8, 6
  %24 = select i1 %23, i32 %8, i32 6
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, 1
  %27 = icmp slt i32 %8, 8
  %28 = select i1 %27, i32 %8, i32 8
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %29, 1
  %31 = icmp slt i32 %8, 10
  %32 = select i1 %31, i32 %8, i32 10
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, 1
  %35 = icmp slt i32 %8, 12
  %36 = select i1 %35, i32 %8, i32 12
  %37 = sext i32 %36 to i64
  %38 = add nsw i64 %37, 1
  %39 = icmp slt i32 %8, 14
  %40 = select i1 %39, i32 %8, i32 14
  %41 = sext i32 %40 to i64
  %42 = add nsw i64 %41, 1
  br label %43

43:                                               ; preds = %43, %5
  %44 = phi i64 [ 0, %5 ], [ %122, %43 ]
  %45 = phi i16* [ %6, %5 ], [ %121, %43 ]
  %46 = phi i32 [ 0, %5 ], [ %118, %43 ]
  %47 = getelementptr inbounds i16, i16* %45, i64 %12
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds i16, i16* %45, i64 %14
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %50, %48
  %52 = shl i16 %51, 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 0
  store i16 %52, i16* %53, align 2
  %54 = sext i16 %52 to i32
  %55 = add nsw i32 %46, %54
  %56 = getelementptr inbounds i16, i16* %45, i64 %17
  %57 = load i16, i16* %56, align 2
  %58 = getelementptr inbounds i16, i16* %45, i64 %18
  %59 = load i16, i16* %58, align 2
  %60 = add i16 %59, %57
  %61 = shl i16 %60, 2
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 1
  store i16 %61, i16* %62, align 2
  %63 = sext i16 %61 to i32
  %64 = add nsw i32 %55, %63
  %65 = getelementptr inbounds i16, i16* %45, i64 %21
  %66 = load i16, i16* %65, align 2
  %67 = getelementptr inbounds i16, i16* %45, i64 %22
  %68 = load i16, i16* %67, align 2
  %69 = add i16 %68, %66
  %70 = shl i16 %69, 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 2
  store i16 %70, i16* %71, align 2
  %72 = sext i16 %70 to i32
  %73 = add nsw i32 %64, %72
  %74 = getelementptr inbounds i16, i16* %45, i64 %25
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds i16, i16* %45, i64 %26
  %77 = load i16, i16* %76, align 2
  %78 = add i16 %77, %75
  %79 = shl i16 %78, 2
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 3
  store i16 %79, i16* %80, align 2
  %81 = sext i16 %79 to i32
  %82 = add nsw i32 %73, %81
  %83 = getelementptr inbounds i16, i16* %45, i64 %29
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %45, i64 %30
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %86, %84
  %88 = shl i16 %87, 2
  %89 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 4
  store i16 %88, i16* %89, align 2
  %90 = sext i16 %88 to i32
  %91 = add nsw i32 %82, %90
  %92 = getelementptr inbounds i16, i16* %45, i64 %33
  %93 = load i16, i16* %92, align 2
  %94 = getelementptr inbounds i16, i16* %45, i64 %34
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, %93
  %97 = shl i16 %96, 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 5
  store i16 %97, i16* %98, align 2
  %99 = sext i16 %97 to i32
  %100 = add nsw i32 %91, %99
  %101 = getelementptr inbounds i16, i16* %45, i64 %37
  %102 = load i16, i16* %101, align 2
  %103 = getelementptr inbounds i16, i16* %45, i64 %38
  %104 = load i16, i16* %103, align 2
  %105 = add i16 %104, %102
  %106 = shl i16 %105, 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 6
  store i16 %106, i16* %107, align 2
  %108 = sext i16 %106 to i32
  %109 = add nsw i32 %100, %108
  %110 = getelementptr inbounds i16, i16* %45, i64 %41
  %111 = load i16, i16* %110, align 2
  %112 = getelementptr inbounds i16, i16* %45, i64 %42
  %113 = load i16, i16* %112, align 2
  %114 = add i16 %113, %111
  %115 = shl i16 %114, 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 7
  store i16 %115, i16* %116, align 2
  %117 = sext i16 %115 to i32
  %118 = add nsw i32 %109, %117
  %119 = icmp slt i64 %44, %13
  %120 = getelementptr inbounds i16, i16* %45, i64 %7
  %121 = select i1 %119, i16* %120, i16* %45
  %122 = add nuw nsw i64 %44, 1
  %123 = icmp eq i64 %122, 16
  br i1 %123, label %124, label %43

124:                                              ; preds = %43
  %125 = add nsw i32 %118, 64
  %126 = lshr i32 %125, 7
  %127 = trunc i32 %126 to i16
  %128 = insertelement <8 x i16> undef, i16 %127, i32 0
  %129 = shufflevector <8 x i16> %128, <8 x i16> undef, <8 x i32> zeroinitializer
  %130 = bitcast [32 x i16]* %0 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2
  %132 = sub <8 x i16> %131, %129
  %133 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2
  %137 = sub <8 x i16> %136, %129
  %138 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2
  %142 = sub <8 x i16> %141, %129
  %143 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2
  %147 = sub <8 x i16> %146, %129
  %148 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %150 = bitcast i16* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = sub <8 x i16> %151, %129
  %153 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 2
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2
  %157 = sub <8 x i16> %156, %129
  %158 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2
  %162 = sub <8 x i16> %161, %129
  %163 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %163, align 2
  %164 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = sub <8 x i16> %166, %129
  %168 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %168, align 2
  %169 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %170 = bitcast i16* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 2
  %172 = sub <8 x i16> %171, %129
  %173 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 2
  %174 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 2
  %177 = sub <8 x i16> %176, %129
  %178 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2
  %182 = sub <8 x i16> %181, %129
  %183 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %183, align 2
  %184 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 2
  %187 = sub <8 x i16> %186, %129
  %188 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %187, <8 x i16>* %188, align 2
  %189 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %190 = bitcast i16* %189 to <8 x i16>*
  %191 = load <8 x i16>, <8 x i16>* %190, align 2
  %192 = sub <8 x i16> %191, %129
  %193 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %193, align 2
  %194 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 2
  %197 = sub <8 x i16> %196, %129
  %198 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %198, align 2
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 2
  %202 = sub <8 x i16> %201, %129
  %203 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %203, align 2
  %204 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2
  %207 = sub <8 x i16> %206, %129
  %208 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %208, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi16ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = icmp slt i32 %8, 0
  %12 = select i1 %11, i32 %8, i32 0
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %7, %13
  %15 = sext i32 %9 to i64
  %16 = add nsw i64 %13, 1
  %17 = add nsw i64 %14, 1
  %18 = icmp slt i32 %8, 2
  %19 = select i1 %18, i32 %8, i32 2
  %20 = sext i32 %19 to i64
  %21 = add nsw i64 %7, %20
  %22 = add nsw i64 %20, 1
  %23 = add nsw i64 %21, 1
  %24 = icmp slt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %7, %26
  %28 = add nsw i64 %26, 1
  %29 = add nsw i64 %27, 1
  %30 = icmp slt i32 %8, 6
  %31 = select i1 %30, i32 %8, i32 6
  %32 = sext i32 %31 to i64
  %33 = add nsw i64 %7, %32
  %34 = add nsw i64 %32, 1
  %35 = add nsw i64 %33, 1
  %36 = icmp slt i32 %8, 8
  %37 = select i1 %36, i32 %8, i32 8
  %38 = sext i32 %37 to i64
  %39 = add nsw i64 %7, %38
  %40 = add nsw i64 %38, 1
  %41 = add nsw i64 %39, 1
  %42 = icmp slt i32 %8, 10
  %43 = select i1 %42, i32 %8, i32 10
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %7, %44
  %46 = add nsw i64 %44, 1
  %47 = add nsw i64 %45, 1
  %48 = icmp slt i32 %8, 12
  %49 = select i1 %48, i32 %8, i32 12
  %50 = sext i32 %49 to i64
  %51 = add nsw i64 %7, %50
  %52 = add nsw i64 %50, 1
  %53 = add nsw i64 %51, 1
  %54 = icmp slt i32 %8, 14
  %55 = select i1 %54, i32 %8, i32 14
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %7, %56
  %58 = add nsw i64 %56, 1
  %59 = add nsw i64 %57, 1
  br label %60

60:                                               ; preds = %60, %5
  %61 = phi i64 [ 0, %5 ], [ %188, %60 ]
  %62 = phi i16* [ %6, %5 ], [ %187, %60 ]
  %63 = phi i32 [ 0, %5 ], [ %183, %60 ]
  %64 = getelementptr inbounds i16, i16* %62, i64 %13
  %65 = load i16, i16* %64, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 %16
  %67 = load i16, i16* %66, align 2
  %68 = getelementptr inbounds i16, i16* %62, i64 %14
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds i16, i16* %62, i64 %17
  %71 = load i16, i16* %70, align 2
  %72 = add i16 %67, %65
  %73 = add i16 %72, %69
  %74 = add i16 %73, %71
  %75 = shl i16 %74, 1
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 0
  store i16 %75, i16* %76, align 2
  %77 = sext i16 %75 to i32
  %78 = add nsw i32 %63, %77
  %79 = getelementptr inbounds i16, i16* %62, i64 %20
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds i16, i16* %62, i64 %22
  %82 = load i16, i16* %81, align 2
  %83 = getelementptr inbounds i16, i16* %62, i64 %21
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %62, i64 %23
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %82, %80
  %88 = add i16 %87, %84
  %89 = add i16 %88, %86
  %90 = shl i16 %89, 1
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 1
  store i16 %90, i16* %91, align 2
  %92 = sext i16 %90 to i32
  %93 = add nsw i32 %78, %92
  %94 = getelementptr inbounds i16, i16* %62, i64 %26
  %95 = load i16, i16* %94, align 2
  %96 = getelementptr inbounds i16, i16* %62, i64 %28
  %97 = load i16, i16* %96, align 2
  %98 = getelementptr inbounds i16, i16* %62, i64 %27
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds i16, i16* %62, i64 %29
  %101 = load i16, i16* %100, align 2
  %102 = add i16 %97, %95
  %103 = add i16 %102, %99
  %104 = add i16 %103, %101
  %105 = shl i16 %104, 1
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 2
  store i16 %105, i16* %106, align 2
  %107 = sext i16 %105 to i32
  %108 = add nsw i32 %93, %107
  %109 = getelementptr inbounds i16, i16* %62, i64 %32
  %110 = load i16, i16* %109, align 2
  %111 = getelementptr inbounds i16, i16* %62, i64 %34
  %112 = load i16, i16* %111, align 2
  %113 = getelementptr inbounds i16, i16* %62, i64 %33
  %114 = load i16, i16* %113, align 2
  %115 = getelementptr inbounds i16, i16* %62, i64 %35
  %116 = load i16, i16* %115, align 2
  %117 = add i16 %112, %110
  %118 = add i16 %117, %114
  %119 = add i16 %118, %116
  %120 = shl i16 %119, 1
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 3
  store i16 %120, i16* %121, align 2
  %122 = sext i16 %120 to i32
  %123 = add nsw i32 %108, %122
  %124 = getelementptr inbounds i16, i16* %62, i64 %38
  %125 = load i16, i16* %124, align 2
  %126 = getelementptr inbounds i16, i16* %62, i64 %40
  %127 = load i16, i16* %126, align 2
  %128 = getelementptr inbounds i16, i16* %62, i64 %39
  %129 = load i16, i16* %128, align 2
  %130 = getelementptr inbounds i16, i16* %62, i64 %41
  %131 = load i16, i16* %130, align 2
  %132 = add i16 %127, %125
  %133 = add i16 %132, %129
  %134 = add i16 %133, %131
  %135 = shl i16 %134, 1
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 4
  store i16 %135, i16* %136, align 2
  %137 = sext i16 %135 to i32
  %138 = add nsw i32 %123, %137
  %139 = getelementptr inbounds i16, i16* %62, i64 %44
  %140 = load i16, i16* %139, align 2
  %141 = getelementptr inbounds i16, i16* %62, i64 %46
  %142 = load i16, i16* %141, align 2
  %143 = getelementptr inbounds i16, i16* %62, i64 %45
  %144 = load i16, i16* %143, align 2
  %145 = getelementptr inbounds i16, i16* %62, i64 %47
  %146 = load i16, i16* %145, align 2
  %147 = add i16 %142, %140
  %148 = add i16 %147, %144
  %149 = add i16 %148, %146
  %150 = shl i16 %149, 1
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 5
  store i16 %150, i16* %151, align 2
  %152 = sext i16 %150 to i32
  %153 = add nsw i32 %138, %152
  %154 = getelementptr inbounds i16, i16* %62, i64 %50
  %155 = load i16, i16* %154, align 2
  %156 = getelementptr inbounds i16, i16* %62, i64 %52
  %157 = load i16, i16* %156, align 2
  %158 = getelementptr inbounds i16, i16* %62, i64 %51
  %159 = load i16, i16* %158, align 2
  %160 = getelementptr inbounds i16, i16* %62, i64 %53
  %161 = load i16, i16* %160, align 2
  %162 = add i16 %157, %155
  %163 = add i16 %162, %159
  %164 = add i16 %163, %161
  %165 = shl i16 %164, 1
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 6
  store i16 %165, i16* %166, align 2
  %167 = sext i16 %165 to i32
  %168 = add nsw i32 %153, %167
  %169 = getelementptr inbounds i16, i16* %62, i64 %56
  %170 = load i16, i16* %169, align 2
  %171 = getelementptr inbounds i16, i16* %62, i64 %58
  %172 = load i16, i16* %171, align 2
  %173 = getelementptr inbounds i16, i16* %62, i64 %57
  %174 = load i16, i16* %173, align 2
  %175 = getelementptr inbounds i16, i16* %62, i64 %59
  %176 = load i16, i16* %175, align 2
  %177 = add i16 %172, %170
  %178 = add i16 %177, %174
  %179 = add i16 %178, %176
  %180 = shl i16 %179, 1
  %181 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 7
  store i16 %180, i16* %181, align 2
  %182 = sext i16 %180 to i32
  %183 = add nsw i32 %168, %182
  %184 = shl nuw i64 %61, 1
  %185 = icmp slt i64 %184, %15
  %186 = getelementptr inbounds i16, i16* %62, i64 %10
  %187 = select i1 %185, i16* %186, i16* %62
  %188 = add nuw nsw i64 %61, 1
  %189 = icmp eq i64 %188, 16
  br i1 %189, label %190, label %60

190:                                              ; preds = %60
  %191 = add nsw i32 %183, 64
  %192 = lshr i32 %191, 7
  %193 = trunc i32 %192 to i16
  %194 = insertelement <8 x i16> undef, i16 %193, i32 0
  %195 = shufflevector <8 x i16> %194, <8 x i16> undef, <8 x i32> zeroinitializer
  %196 = bitcast [32 x i16]* %0 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2
  %198 = sub <8 x i16> %197, %195
  %199 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %199, align 2
  %200 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 2
  %203 = sub <8 x i16> %202, %195
  %204 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %204, align 2
  %205 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 2
  %208 = sub <8 x i16> %207, %195
  %209 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %208, <8 x i16>* %209, align 2
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = sub <8 x i16> %212, %195
  %214 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %214, align 2
  %215 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2
  %218 = sub <8 x i16> %217, %195
  %219 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %219, align 2
  %220 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2
  %223 = sub <8 x i16> %222, %195
  %224 = bitcast i16* %220 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %224, align 2
  %225 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2
  %228 = sub <8 x i16> %227, %195
  %229 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %228, <8 x i16>* %229, align 2
  %230 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2
  %233 = sub <8 x i16> %232, %195
  %234 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %234, align 2
  %235 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = sub <8 x i16> %237, %195
  %239 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %239, align 2
  %240 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 2
  %243 = sub <8 x i16> %242, %195
  %244 = bitcast i16* %240 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %244, align 2
  %245 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %246 = bitcast i16* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 2
  %248 = sub <8 x i16> %247, %195
  %249 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %249, align 2
  %250 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %251 = bitcast i16* %250 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2
  %253 = sub <8 x i16> %252, %195
  %254 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %254, align 2
  %255 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 2
  %258 = sub <8 x i16> %257, %195
  %259 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %259, align 2
  %260 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %261 = bitcast i16* %260 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 2
  %263 = sub <8 x i16> %262, %195
  %264 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %264, align 2
  %265 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = sub <8 x i16> %267, %195
  %269 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %269, align 2
  %270 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2
  %273 = sub <8 x i16> %272, %195
  %274 = bitcast i16* %270 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %274, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi8ELi32ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %132, %9 ]
  %11 = phi i16* [ %5, %4 ], [ %131, %9 ]
  %12 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 0
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = mul nsw i32 %14, %3
  %16 = ashr i32 %15, 31
  %17 = add i32 %15, 32
  %18 = add i32 %17, %16
  %19 = ashr i32 %18, 6
  %20 = add nsw i32 %19, %7
  %21 = icmp slt i32 %20, 1023
  %22 = select i1 %21, i32 %20, i32 1023
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 %22, i32 0
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %11, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 1
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %3
  %30 = ashr i32 %29, 31
  %31 = add i32 %29, 32
  %32 = add i32 %31, %30
  %33 = ashr i32 %32, 6
  %34 = add nsw i32 %33, %7
  %35 = icmp slt i32 %34, 1023
  %36 = select i1 %35, i32 %34, i32 1023
  %37 = icmp sgt i32 %36, 0
  %38 = select i1 %37, i32 %36, i32 0
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds i16, i16* %11, i64 1
  store i16 %39, i16* %40, align 2
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 2
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %43, %3
  %45 = ashr i32 %44, 31
  %46 = add i32 %44, 32
  %47 = add i32 %46, %45
  %48 = ashr i32 %47, 6
  %49 = add nsw i32 %48, %7
  %50 = icmp slt i32 %49, 1023
  %51 = select i1 %50, i32 %49, i32 1023
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = trunc i32 %53 to i16
  %55 = getelementptr inbounds i16, i16* %11, i64 2
  store i16 %54, i16* %55, align 2
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = sext i16 %57 to i32
  %59 = mul nsw i32 %58, %3
  %60 = ashr i32 %59, 31
  %61 = add i32 %59, 32
  %62 = add i32 %61, %60
  %63 = ashr i32 %62, 6
  %64 = add nsw i32 %63, %7
  %65 = icmp slt i32 %64, 1023
  %66 = select i1 %65, i32 %64, i32 1023
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %11, i64 3
  store i16 %69, i16* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 4
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = mul nsw i32 %73, %3
  %75 = ashr i32 %74, 31
  %76 = add i32 %74, 32
  %77 = add i32 %76, %75
  %78 = ashr i32 %77, 6
  %79 = add nsw i32 %78, %7
  %80 = icmp slt i32 %79, 1023
  %81 = select i1 %80, i32 %79, i32 1023
  %82 = icmp sgt i32 %81, 0
  %83 = select i1 %82, i32 %81, i32 0
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %11, i64 4
  store i16 %84, i16* %85, align 2
  %86 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 5
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = mul nsw i32 %88, %3
  %90 = ashr i32 %89, 31
  %91 = add i32 %89, 32
  %92 = add i32 %91, %90
  %93 = ashr i32 %92, 6
  %94 = add nsw i32 %93, %7
  %95 = icmp slt i32 %94, 1023
  %96 = select i1 %95, i32 %94, i32 1023
  %97 = icmp sgt i32 %96, 0
  %98 = select i1 %97, i32 %96, i32 0
  %99 = trunc i32 %98 to i16
  %100 = getelementptr inbounds i16, i16* %11, i64 5
  store i16 %99, i16* %100, align 2
  %101 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 6
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = mul nsw i32 %103, %3
  %105 = ashr i32 %104, 31
  %106 = add i32 %104, 32
  %107 = add i32 %106, %105
  %108 = ashr i32 %107, 6
  %109 = add nsw i32 %108, %7
  %110 = icmp slt i32 %109, 1023
  %111 = select i1 %110, i32 %109, i32 1023
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i16
  %115 = getelementptr inbounds i16, i16* %11, i64 6
  store i16 %114, i16* %115, align 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %10, i64 7
  %117 = load i16, i16* %116, align 2
  %118 = sext i16 %117 to i32
  %119 = mul nsw i32 %118, %3
  %120 = ashr i32 %119, 31
  %121 = add i32 %119, 32
  %122 = add i32 %121, %120
  %123 = ashr i32 %122, 6
  %124 = add nsw i32 %123, %7
  %125 = icmp slt i32 %124, 1023
  %126 = select i1 %125, i32 %124, i32 1023
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %11, i64 7
  store i16 %129, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %11, i64 %8
  %132 = add nuw nsw i64 %10, 1
  %133 = icmp eq i64 %132, 32
  br i1 %133, label %134, label %9

134:                                              ; preds = %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = icmp slt i32 %8, 1
  %15 = select i1 %14, i32 %8, i32 1
  %16 = sext i32 %15 to i64
  %17 = icmp slt i32 %8, 2
  %18 = select i1 %17, i32 %8, i32 2
  %19 = sext i32 %18 to i64
  %20 = icmp slt i32 %8, 3
  %21 = select i1 %20, i32 %8, i32 3
  %22 = sext i32 %21 to i64
  %23 = icmp slt i32 %8, 4
  %24 = select i1 %23, i32 %8, i32 4
  %25 = sext i32 %24 to i64
  %26 = icmp slt i32 %8, 5
  %27 = select i1 %26, i32 %8, i32 5
  %28 = sext i32 %27 to i64
  %29 = icmp slt i32 %8, 6
  %30 = select i1 %29, i32 %8, i32 6
  %31 = sext i32 %30 to i64
  %32 = icmp slt i32 %8, 7
  %33 = select i1 %32, i32 %8, i32 7
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %35, %5
  %36 = phi i64 [ 0, %5 ], [ %90, %35 ]
  %37 = phi i16* [ %6, %5 ], [ %89, %35 ]
  %38 = phi i32 [ 0, %5 ], [ %86, %35 ]
  %39 = getelementptr inbounds i16, i16* %37, i64 %12
  %40 = load i16, i16* %39, align 2
  %41 = shl i16 %40, 3
  %42 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 0
  store i16 %41, i16* %42, align 2
  %43 = sext i16 %41 to i32
  %44 = add nsw i32 %38, %43
  %45 = getelementptr inbounds i16, i16* %37, i64 %16
  %46 = load i16, i16* %45, align 2
  %47 = shl i16 %46, 3
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 1
  store i16 %47, i16* %48, align 2
  %49 = sext i16 %47 to i32
  %50 = add nsw i32 %44, %49
  %51 = getelementptr inbounds i16, i16* %37, i64 %19
  %52 = load i16, i16* %51, align 2
  %53 = shl i16 %52, 3
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 2
  store i16 %53, i16* %54, align 2
  %55 = sext i16 %53 to i32
  %56 = add nsw i32 %50, %55
  %57 = getelementptr inbounds i16, i16* %37, i64 %22
  %58 = load i16, i16* %57, align 2
  %59 = shl i16 %58, 3
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 3
  store i16 %59, i16* %60, align 2
  %61 = sext i16 %59 to i32
  %62 = add nsw i32 %56, %61
  %63 = getelementptr inbounds i16, i16* %37, i64 %25
  %64 = load i16, i16* %63, align 2
  %65 = shl i16 %64, 3
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 4
  store i16 %65, i16* %66, align 2
  %67 = sext i16 %65 to i32
  %68 = add nsw i32 %62, %67
  %69 = getelementptr inbounds i16, i16* %37, i64 %28
  %70 = load i16, i16* %69, align 2
  %71 = shl i16 %70, 3
  %72 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 5
  store i16 %71, i16* %72, align 2
  %73 = sext i16 %71 to i32
  %74 = add nsw i32 %68, %73
  %75 = getelementptr inbounds i16, i16* %37, i64 %31
  %76 = load i16, i16* %75, align 2
  %77 = shl i16 %76, 3
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 6
  store i16 %77, i16* %78, align 2
  %79 = sext i16 %77 to i32
  %80 = add nsw i32 %74, %79
  %81 = getelementptr inbounds i16, i16* %37, i64 %34
  %82 = load i16, i16* %81, align 2
  %83 = shl i16 %82, 3
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %36, i64 7
  store i16 %83, i16* %84, align 2
  %85 = sext i16 %83 to i32
  %86 = add nsw i32 %80, %85
  %87 = icmp slt i64 %36, %13
  %88 = getelementptr inbounds i16, i16* %37, i64 %7
  %89 = select i1 %87, i16* %88, i16* %37
  %90 = add nuw nsw i64 %36, 1
  %91 = icmp eq i64 %90, 32
  br i1 %91, label %92, label %35

92:                                               ; preds = %35
  %93 = add nsw i32 %86, 128
  %94 = lshr i32 %93, 8
  %95 = trunc i32 %94 to i16
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %98

98:                                               ; preds = %98, %92
  %99 = phi i64 [ 0, %92 ], [ %123, %98 ]
  %100 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %99, i64 0
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2
  %103 = sub <8 x i16> %102, %97
  %104 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %104, align 2
  %105 = or i64 %99, 1
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %105, i64 0
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2
  %109 = sub <8 x i16> %108, %97
  %110 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %110, align 2
  %111 = or i64 %99, 2
  %112 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %111, i64 0
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = sub <8 x i16> %114, %97
  %116 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 2
  %117 = or i64 %99, 3
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %117, i64 0
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2
  %121 = sub <8 x i16> %120, %97
  %122 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  %123 = add nuw nsw i64 %99, 4
  %124 = icmp eq i64 %123, 32
  br i1 %124, label %125, label %98

125:                                              ; preds = %98
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = sext i32 %11 to i64
  %13 = sext i32 %9 to i64
  %14 = add nsw i64 %12, 1
  %15 = icmp slt i32 %8, 2
  %16 = select i1 %15, i32 %8, i32 2
  %17 = sext i32 %16 to i64
  %18 = add nsw i64 %17, 1
  %19 = icmp slt i32 %8, 4
  %20 = select i1 %19, i32 %8, i32 4
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, 1
  %23 = icmp slt i32 %8, 6
  %24 = select i1 %23, i32 %8, i32 6
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, 1
  %27 = icmp slt i32 %8, 8
  %28 = select i1 %27, i32 %8, i32 8
  %29 = sext i32 %28 to i64
  %30 = add nsw i64 %29, 1
  %31 = icmp slt i32 %8, 10
  %32 = select i1 %31, i32 %8, i32 10
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, 1
  %35 = icmp slt i32 %8, 12
  %36 = select i1 %35, i32 %8, i32 12
  %37 = sext i32 %36 to i64
  %38 = add nsw i64 %37, 1
  %39 = icmp slt i32 %8, 14
  %40 = select i1 %39, i32 %8, i32 14
  %41 = sext i32 %40 to i64
  %42 = add nsw i64 %41, 1
  br label %43

43:                                               ; preds = %43, %5
  %44 = phi i64 [ 0, %5 ], [ %122, %43 ]
  %45 = phi i16* [ %6, %5 ], [ %121, %43 ]
  %46 = phi i32 [ 0, %5 ], [ %118, %43 ]
  %47 = getelementptr inbounds i16, i16* %45, i64 %12
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds i16, i16* %45, i64 %14
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %50, %48
  %52 = shl i16 %51, 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 0
  store i16 %52, i16* %53, align 2
  %54 = sext i16 %52 to i32
  %55 = add nsw i32 %46, %54
  %56 = getelementptr inbounds i16, i16* %45, i64 %17
  %57 = load i16, i16* %56, align 2
  %58 = getelementptr inbounds i16, i16* %45, i64 %18
  %59 = load i16, i16* %58, align 2
  %60 = add i16 %59, %57
  %61 = shl i16 %60, 2
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 1
  store i16 %61, i16* %62, align 2
  %63 = sext i16 %61 to i32
  %64 = add nsw i32 %55, %63
  %65 = getelementptr inbounds i16, i16* %45, i64 %21
  %66 = load i16, i16* %65, align 2
  %67 = getelementptr inbounds i16, i16* %45, i64 %22
  %68 = load i16, i16* %67, align 2
  %69 = add i16 %68, %66
  %70 = shl i16 %69, 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 2
  store i16 %70, i16* %71, align 2
  %72 = sext i16 %70 to i32
  %73 = add nsw i32 %64, %72
  %74 = getelementptr inbounds i16, i16* %45, i64 %25
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds i16, i16* %45, i64 %26
  %77 = load i16, i16* %76, align 2
  %78 = add i16 %77, %75
  %79 = shl i16 %78, 2
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 3
  store i16 %79, i16* %80, align 2
  %81 = sext i16 %79 to i32
  %82 = add nsw i32 %73, %81
  %83 = getelementptr inbounds i16, i16* %45, i64 %29
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %45, i64 %30
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %86, %84
  %88 = shl i16 %87, 2
  %89 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 4
  store i16 %88, i16* %89, align 2
  %90 = sext i16 %88 to i32
  %91 = add nsw i32 %82, %90
  %92 = getelementptr inbounds i16, i16* %45, i64 %33
  %93 = load i16, i16* %92, align 2
  %94 = getelementptr inbounds i16, i16* %45, i64 %34
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, %93
  %97 = shl i16 %96, 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 5
  store i16 %97, i16* %98, align 2
  %99 = sext i16 %97 to i32
  %100 = add nsw i32 %91, %99
  %101 = getelementptr inbounds i16, i16* %45, i64 %37
  %102 = load i16, i16* %101, align 2
  %103 = getelementptr inbounds i16, i16* %45, i64 %38
  %104 = load i16, i16* %103, align 2
  %105 = add i16 %104, %102
  %106 = shl i16 %105, 2
  %107 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 6
  store i16 %106, i16* %107, align 2
  %108 = sext i16 %106 to i32
  %109 = add nsw i32 %100, %108
  %110 = getelementptr inbounds i16, i16* %45, i64 %41
  %111 = load i16, i16* %110, align 2
  %112 = getelementptr inbounds i16, i16* %45, i64 %42
  %113 = load i16, i16* %112, align 2
  %114 = add i16 %113, %111
  %115 = shl i16 %114, 2
  %116 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %44, i64 7
  store i16 %115, i16* %116, align 2
  %117 = sext i16 %115 to i32
  %118 = add nsw i32 %109, %117
  %119 = icmp slt i64 %44, %13
  %120 = getelementptr inbounds i16, i16* %45, i64 %7
  %121 = select i1 %119, i16* %120, i16* %45
  %122 = add nuw nsw i64 %44, 1
  %123 = icmp eq i64 %122, 32
  br i1 %123, label %124, label %43

124:                                              ; preds = %43
  %125 = add nsw i32 %118, 128
  %126 = lshr i32 %125, 8
  %127 = trunc i32 %126 to i16
  %128 = insertelement <8 x i16> undef, i16 %127, i32 0
  %129 = shufflevector <8 x i16> %128, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %130

130:                                              ; preds = %130, %124
  %131 = phi i64 [ 0, %124 ], [ %155, %130 ]
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %131, i64 0
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2
  %135 = sub <8 x i16> %134, %129
  %136 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %136, align 2
  %137 = or i64 %131, 1
  %138 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %137, i64 0
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2
  %141 = sub <8 x i16> %140, %129
  %142 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %142, align 2
  %143 = or i64 %131, 2
  %144 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %143, i64 0
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2
  %147 = sub <8 x i16> %146, %129
  %148 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 2
  %149 = or i64 %131, 3
  %150 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %149, i64 0
  %151 = bitcast i16* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 2
  %153 = sub <8 x i16> %152, %129
  %154 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %154, align 2
  %155 = add nuw nsw i64 %131, 4
  %156 = icmp eq i64 %155, 32
  br i1 %156, label %157, label %130

157:                                              ; preds = %130
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi8ELi32ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = icmp slt i32 %8, 0
  %12 = select i1 %11, i32 %8, i32 0
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %7, %13
  %15 = sext i32 %9 to i64
  %16 = add nsw i64 %13, 1
  %17 = add nsw i64 %14, 1
  %18 = icmp slt i32 %8, 2
  %19 = select i1 %18, i32 %8, i32 2
  %20 = sext i32 %19 to i64
  %21 = add nsw i64 %7, %20
  %22 = add nsw i64 %20, 1
  %23 = add nsw i64 %21, 1
  %24 = icmp slt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %7, %26
  %28 = add nsw i64 %26, 1
  %29 = add nsw i64 %27, 1
  %30 = icmp slt i32 %8, 6
  %31 = select i1 %30, i32 %8, i32 6
  %32 = sext i32 %31 to i64
  %33 = add nsw i64 %7, %32
  %34 = add nsw i64 %32, 1
  %35 = add nsw i64 %33, 1
  %36 = icmp slt i32 %8, 8
  %37 = select i1 %36, i32 %8, i32 8
  %38 = sext i32 %37 to i64
  %39 = add nsw i64 %7, %38
  %40 = add nsw i64 %38, 1
  %41 = add nsw i64 %39, 1
  %42 = icmp slt i32 %8, 10
  %43 = select i1 %42, i32 %8, i32 10
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %7, %44
  %46 = add nsw i64 %44, 1
  %47 = add nsw i64 %45, 1
  %48 = icmp slt i32 %8, 12
  %49 = select i1 %48, i32 %8, i32 12
  %50 = sext i32 %49 to i64
  %51 = add nsw i64 %7, %50
  %52 = add nsw i64 %50, 1
  %53 = add nsw i64 %51, 1
  %54 = icmp slt i32 %8, 14
  %55 = select i1 %54, i32 %8, i32 14
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %7, %56
  %58 = add nsw i64 %56, 1
  %59 = add nsw i64 %57, 1
  br label %60

60:                                               ; preds = %60, %5
  %61 = phi i64 [ 0, %5 ], [ %188, %60 ]
  %62 = phi i16* [ %6, %5 ], [ %187, %60 ]
  %63 = phi i32 [ 0, %5 ], [ %183, %60 ]
  %64 = getelementptr inbounds i16, i16* %62, i64 %13
  %65 = load i16, i16* %64, align 2
  %66 = getelementptr inbounds i16, i16* %62, i64 %16
  %67 = load i16, i16* %66, align 2
  %68 = getelementptr inbounds i16, i16* %62, i64 %14
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds i16, i16* %62, i64 %17
  %71 = load i16, i16* %70, align 2
  %72 = add i16 %67, %65
  %73 = add i16 %72, %69
  %74 = add i16 %73, %71
  %75 = shl i16 %74, 1
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 0
  store i16 %75, i16* %76, align 2
  %77 = sext i16 %75 to i32
  %78 = add nsw i32 %63, %77
  %79 = getelementptr inbounds i16, i16* %62, i64 %20
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds i16, i16* %62, i64 %22
  %82 = load i16, i16* %81, align 2
  %83 = getelementptr inbounds i16, i16* %62, i64 %21
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds i16, i16* %62, i64 %23
  %86 = load i16, i16* %85, align 2
  %87 = add i16 %82, %80
  %88 = add i16 %87, %84
  %89 = add i16 %88, %86
  %90 = shl i16 %89, 1
  %91 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 1
  store i16 %90, i16* %91, align 2
  %92 = sext i16 %90 to i32
  %93 = add nsw i32 %78, %92
  %94 = getelementptr inbounds i16, i16* %62, i64 %26
  %95 = load i16, i16* %94, align 2
  %96 = getelementptr inbounds i16, i16* %62, i64 %28
  %97 = load i16, i16* %96, align 2
  %98 = getelementptr inbounds i16, i16* %62, i64 %27
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds i16, i16* %62, i64 %29
  %101 = load i16, i16* %100, align 2
  %102 = add i16 %97, %95
  %103 = add i16 %102, %99
  %104 = add i16 %103, %101
  %105 = shl i16 %104, 1
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 2
  store i16 %105, i16* %106, align 2
  %107 = sext i16 %105 to i32
  %108 = add nsw i32 %93, %107
  %109 = getelementptr inbounds i16, i16* %62, i64 %32
  %110 = load i16, i16* %109, align 2
  %111 = getelementptr inbounds i16, i16* %62, i64 %34
  %112 = load i16, i16* %111, align 2
  %113 = getelementptr inbounds i16, i16* %62, i64 %33
  %114 = load i16, i16* %113, align 2
  %115 = getelementptr inbounds i16, i16* %62, i64 %35
  %116 = load i16, i16* %115, align 2
  %117 = add i16 %112, %110
  %118 = add i16 %117, %114
  %119 = add i16 %118, %116
  %120 = shl i16 %119, 1
  %121 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 3
  store i16 %120, i16* %121, align 2
  %122 = sext i16 %120 to i32
  %123 = add nsw i32 %108, %122
  %124 = getelementptr inbounds i16, i16* %62, i64 %38
  %125 = load i16, i16* %124, align 2
  %126 = getelementptr inbounds i16, i16* %62, i64 %40
  %127 = load i16, i16* %126, align 2
  %128 = getelementptr inbounds i16, i16* %62, i64 %39
  %129 = load i16, i16* %128, align 2
  %130 = getelementptr inbounds i16, i16* %62, i64 %41
  %131 = load i16, i16* %130, align 2
  %132 = add i16 %127, %125
  %133 = add i16 %132, %129
  %134 = add i16 %133, %131
  %135 = shl i16 %134, 1
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 4
  store i16 %135, i16* %136, align 2
  %137 = sext i16 %135 to i32
  %138 = add nsw i32 %123, %137
  %139 = getelementptr inbounds i16, i16* %62, i64 %44
  %140 = load i16, i16* %139, align 2
  %141 = getelementptr inbounds i16, i16* %62, i64 %46
  %142 = load i16, i16* %141, align 2
  %143 = getelementptr inbounds i16, i16* %62, i64 %45
  %144 = load i16, i16* %143, align 2
  %145 = getelementptr inbounds i16, i16* %62, i64 %47
  %146 = load i16, i16* %145, align 2
  %147 = add i16 %142, %140
  %148 = add i16 %147, %144
  %149 = add i16 %148, %146
  %150 = shl i16 %149, 1
  %151 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 5
  store i16 %150, i16* %151, align 2
  %152 = sext i16 %150 to i32
  %153 = add nsw i32 %138, %152
  %154 = getelementptr inbounds i16, i16* %62, i64 %50
  %155 = load i16, i16* %154, align 2
  %156 = getelementptr inbounds i16, i16* %62, i64 %52
  %157 = load i16, i16* %156, align 2
  %158 = getelementptr inbounds i16, i16* %62, i64 %51
  %159 = load i16, i16* %158, align 2
  %160 = getelementptr inbounds i16, i16* %62, i64 %53
  %161 = load i16, i16* %160, align 2
  %162 = add i16 %157, %155
  %163 = add i16 %162, %159
  %164 = add i16 %163, %161
  %165 = shl i16 %164, 1
  %166 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 6
  store i16 %165, i16* %166, align 2
  %167 = sext i16 %165 to i32
  %168 = add nsw i32 %153, %167
  %169 = getelementptr inbounds i16, i16* %62, i64 %56
  %170 = load i16, i16* %169, align 2
  %171 = getelementptr inbounds i16, i16* %62, i64 %58
  %172 = load i16, i16* %171, align 2
  %173 = getelementptr inbounds i16, i16* %62, i64 %57
  %174 = load i16, i16* %173, align 2
  %175 = getelementptr inbounds i16, i16* %62, i64 %59
  %176 = load i16, i16* %175, align 2
  %177 = add i16 %172, %170
  %178 = add i16 %177, %174
  %179 = add i16 %178, %176
  %180 = shl i16 %179, 1
  %181 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 7
  store i16 %180, i16* %181, align 2
  %182 = sext i16 %180 to i32
  %183 = add nsw i32 %168, %182
  %184 = shl nuw i64 %61, 1
  %185 = icmp slt i64 %184, %15
  %186 = getelementptr inbounds i16, i16* %62, i64 %10
  %187 = select i1 %185, i16* %186, i16* %62
  %188 = add nuw nsw i64 %61, 1
  %189 = icmp eq i64 %188, 32
  br i1 %189, label %190, label %60

190:                                              ; preds = %60
  %191 = add nsw i32 %183, 128
  %192 = lshr i32 %191, 8
  %193 = trunc i32 %192 to i16
  %194 = insertelement <8 x i16> undef, i16 %193, i32 0
  %195 = shufflevector <8 x i16> %194, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %196

196:                                              ; preds = %196, %190
  %197 = phi i64 [ 0, %190 ], [ %221, %196 ]
  %198 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %197, i64 0
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 2
  %201 = sub <8 x i16> %200, %195
  %202 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %202, align 2
  %203 = or i64 %197, 1
  %204 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %203, i64 0
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2
  %207 = sub <8 x i16> %206, %195
  %208 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %208, align 2
  %209 = or i64 %197, 2
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %209, i64 0
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = sub <8 x i16> %212, %195
  %214 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %214, align 2
  %215 = or i64 %197, 3
  %216 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %215, i64 0
  %217 = bitcast i16* %216 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2
  %219 = sub <8 x i16> %218, %195
  %220 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %219, <8 x i16>* %220, align 2
  %221 = add nuw nsw i64 %197, 4
  %222 = icmp eq i64 %221, 32
  br i1 %222, label %223, label %196

223:                                              ; preds = %196
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi4ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  %9 = bitcast [32 x i16]* %2 to i8*
  %10 = getelementptr i8, i8* %0, i64 32
  %11 = getelementptr [32 x i16], [32 x i16]* %2, i64 0, i64 16
  %12 = bitcast i16* %11 to i8*
  %13 = icmp ugt i8* %12, %0
  %14 = icmp ugt i8* %10, %9
  %15 = and i1 %13, %14
  br i1 %15, label %104, label %16

16:                                               ; preds = %4
  %17 = insertelement <8 x i32> undef, i32 %3, i32 0
  %18 = shufflevector <8 x i32> %17, <8 x i32> undef, <8 x i32> zeroinitializer
  %19 = insertelement <8 x i32> undef, i32 %7, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = bitcast [32 x i16]* %2 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 2, !alias.scope !860
  %23 = sext <8 x i16> %22 to <8 x i32>
  %24 = mul nsw <8 x i32> %18, %23
  %25 = ashr <8 x i32> %24, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %26 = add <8 x i32> %24, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %27 = add <8 x i32> %26, %25
  %28 = ashr <8 x i32> %27, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %29 = add nsw <8 x i32> %28, %20
  %30 = icmp slt <8 x i32> %29, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %31 = select <8 x i1> %30, <8 x i32> %29, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = icmp sgt <8 x i32> %31, zeroinitializer
  %33 = select <8 x i1> %32, <8 x i32> %31, <8 x i32> zeroinitializer
  %34 = trunc <8 x i32> %33 to <8 x i16>
  %35 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %34, <8 x i16>* %35, align 2, !alias.scope !863, !noalias !860
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 8
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2, !alias.scope !860
  %39 = sext <8 x i16> %38 to <8 x i32>
  %40 = mul nsw <8 x i32> %18, %39
  %41 = ashr <8 x i32> %40, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %42 = add <8 x i32> %40, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %43 = add <8 x i32> %42, %41
  %44 = ashr <8 x i32> %43, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %45 = add nsw <8 x i32> %44, %20
  %46 = icmp slt <8 x i32> %45, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %47 = select <8 x i1> %46, <8 x i32> %45, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %48 = icmp sgt <8 x i32> %47, zeroinitializer
  %49 = select <8 x i1> %48, <8 x i32> %47, <8 x i32> zeroinitializer
  %50 = trunc <8 x i32> %49 to <8 x i16>
  %51 = getelementptr inbounds i8, i8* %0, i64 16
  %52 = bitcast i8* %51 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %52, align 2, !alias.scope !863, !noalias !860
  br label %53

53:                                               ; preds = %104, %16
  %54 = getelementptr inbounds i16, i16* %5, i64 %8
  %55 = and i64 %1, -2
  %56 = getelementptr i8, i8* %0, i64 %55
  %57 = add i64 %55, 32
  %58 = getelementptr i8, i8* %0, i64 %57
  %59 = getelementptr [32 x i16], [32 x i16]* %2, i64 1, i64 0
  %60 = bitcast i16* %59 to i8*
  %61 = getelementptr [32 x i16], [32 x i16]* %2, i64 1, i64 16
  %62 = bitcast i16* %61 to i8*
  %63 = icmp ult i8* %56, %62
  %64 = icmp ugt i8* %58, %60
  %65 = and i1 %63, %64
  br i1 %65, label %123, label %66

66:                                               ; preds = %53
  %67 = insertelement <8 x i32> undef, i32 %3, i32 0
  %68 = shufflevector <8 x i32> %67, <8 x i32> undef, <8 x i32> zeroinitializer
  %69 = insertelement <8 x i32> undef, i32 %7, i32 0
  %70 = shufflevector <8 x i32> %69, <8 x i32> undef, <8 x i32> zeroinitializer
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1, i64 0
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !865
  %74 = sext <8 x i16> %73 to <8 x i32>
  %75 = mul nsw <8 x i32> %68, %74
  %76 = ashr <8 x i32> %75, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %77 = add <8 x i32> %75, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %78 = add <8 x i32> %77, %76
  %79 = ashr <8 x i32> %78, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %80 = add nsw <8 x i32> %79, %70
  %81 = icmp slt <8 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = select <8 x i1> %81, <8 x i32> %80, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %83 = icmp sgt <8 x i32> %82, zeroinitializer
  %84 = select <8 x i1> %83, <8 x i32> %82, <8 x i32> zeroinitializer
  %85 = trunc <8 x i32> %84 to <8 x i16>
  %86 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %86, align 2, !alias.scope !868, !noalias !865
  %87 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !865
  %90 = sext <8 x i16> %89 to <8 x i32>
  %91 = mul nsw <8 x i32> %68, %90
  %92 = ashr <8 x i32> %91, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %93 = add <8 x i32> %91, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %94 = add <8 x i32> %93, %92
  %95 = ashr <8 x i32> %94, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %96 = add nsw <8 x i32> %95, %70
  %97 = icmp slt <8 x i32> %96, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %98 = select <8 x i1> %97, <8 x i32> %96, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %99 = icmp sgt <8 x i32> %98, zeroinitializer
  %100 = select <8 x i1> %99, <8 x i32> %98, <8 x i32> zeroinitializer
  %101 = trunc <8 x i32> %100 to <8 x i16>
  %102 = getelementptr inbounds i16, i16* %54, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %103, align 2, !alias.scope !868, !noalias !865
  br label %142

104:                                              ; preds = %4, %104
  %105 = phi i64 [ %121, %104 ], [ 0, %4 ]
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = sext i16 %107 to i32
  %109 = mul nsw i32 %108, %3
  %110 = ashr i32 %109, 31
  %111 = add i32 %109, 32
  %112 = add i32 %111, %110
  %113 = ashr i32 %112, 6
  %114 = add nsw i32 %113, %7
  %115 = icmp slt i32 %114, 1023
  %116 = select i1 %115, i32 %114, i32 1023
  %117 = icmp sgt i32 %116, 0
  %118 = select i1 %117, i32 %116, i32 0
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %5, i64 %105
  store i16 %119, i16* %120, align 2
  %121 = add nuw nsw i64 %105, 1
  %122 = icmp eq i64 %121, 16
  br i1 %122, label %53, label %104, !llvm.loop !870

123:                                              ; preds = %53, %123
  %124 = phi i64 [ %140, %123 ], [ 0, %53 ]
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 1, i64 %124
  %126 = load i16, i16* %125, align 2
  %127 = sext i16 %126 to i32
  %128 = mul nsw i32 %127, %3
  %129 = ashr i32 %128, 31
  %130 = add i32 %128, 32
  %131 = add i32 %130, %129
  %132 = ashr i32 %131, 6
  %133 = add nsw i32 %132, %7
  %134 = icmp slt i32 %133, 1023
  %135 = select i1 %134, i32 %133, i32 1023
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %135, i32 0
  %138 = trunc i32 %137 to i16
  %139 = getelementptr inbounds i16, i16* %54, i64 %124
  store i16 %138, i16* %139, align 2
  %140 = add nuw nsw i64 %124, 1
  %141 = icmp eq i64 %140, 16
  br i1 %141, label %142, label %123, !llvm.loop !871

142:                                              ; preds = %123, %66
  %143 = getelementptr inbounds i16, i16* %54, i64 %8
  %144 = shl i64 %8, 2
  %145 = getelementptr i8, i8* %0, i64 %144
  %146 = add i64 %144, 32
  %147 = getelementptr i8, i8* %0, i64 %146
  %148 = getelementptr [32 x i16], [32 x i16]* %2, i64 2, i64 0
  %149 = bitcast i16* %148 to i8*
  %150 = getelementptr [32 x i16], [32 x i16]* %2, i64 2, i64 16
  %151 = bitcast i16* %150 to i8*
  %152 = icmp ult i8* %145, %151
  %153 = icmp ugt i8* %147, %149
  %154 = and i1 %152, %153
  br i1 %154, label %193, label %155

155:                                              ; preds = %142
  %156 = insertelement <8 x i32> undef, i32 %3, i32 0
  %157 = shufflevector <8 x i32> %156, <8 x i32> undef, <8 x i32> zeroinitializer
  %158 = insertelement <8 x i32> undef, i32 %7, i32 0
  %159 = shufflevector <8 x i32> %158, <8 x i32> undef, <8 x i32> zeroinitializer
  %160 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2, i64 0
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2, !alias.scope !872
  %163 = sext <8 x i16> %162 to <8 x i32>
  %164 = mul nsw <8 x i32> %157, %163
  %165 = ashr <8 x i32> %164, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %166 = add <8 x i32> %164, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %167 = add <8 x i32> %166, %165
  %168 = ashr <8 x i32> %167, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %169 = add nsw <8 x i32> %168, %159
  %170 = icmp slt <8 x i32> %169, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %171 = select <8 x i1> %170, <8 x i32> %169, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %172 = icmp sgt <8 x i32> %171, zeroinitializer
  %173 = select <8 x i1> %172, <8 x i32> %171, <8 x i32> zeroinitializer
  %174 = trunc <8 x i32> %173 to <8 x i16>
  %175 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %175, align 2, !alias.scope !875, !noalias !872
  %176 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2, i64 8
  %177 = bitcast i16* %176 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 2, !alias.scope !872
  %179 = sext <8 x i16> %178 to <8 x i32>
  %180 = mul nsw <8 x i32> %157, %179
  %181 = ashr <8 x i32> %180, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %182 = add <8 x i32> %180, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %183 = add <8 x i32> %182, %181
  %184 = ashr <8 x i32> %183, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %185 = add nsw <8 x i32> %184, %159
  %186 = icmp slt <8 x i32> %185, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %187 = select <8 x i1> %186, <8 x i32> %185, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %188 = icmp sgt <8 x i32> %187, zeroinitializer
  %189 = select <8 x i1> %188, <8 x i32> %187, <8 x i32> zeroinitializer
  %190 = trunc <8 x i32> %189 to <8 x i16>
  %191 = getelementptr inbounds i16, i16* %143, i64 8
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %190, <8 x i16>* %192, align 2, !alias.scope !875, !noalias !872
  br label %212

193:                                              ; preds = %142, %193
  %194 = phi i64 [ %210, %193 ], [ 0, %142 ]
  %195 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 2, i64 %194
  %196 = load i16, i16* %195, align 2
  %197 = sext i16 %196 to i32
  %198 = mul nsw i32 %197, %3
  %199 = ashr i32 %198, 31
  %200 = add i32 %198, 32
  %201 = add i32 %200, %199
  %202 = ashr i32 %201, 6
  %203 = add nsw i32 %202, %7
  %204 = icmp slt i32 %203, 1023
  %205 = select i1 %204, i32 %203, i32 1023
  %206 = icmp sgt i32 %205, 0
  %207 = select i1 %206, i32 %205, i32 0
  %208 = trunc i32 %207 to i16
  %209 = getelementptr inbounds i16, i16* %143, i64 %194
  store i16 %208, i16* %209, align 2
  %210 = add nuw nsw i64 %194, 1
  %211 = icmp eq i64 %210, 16
  br i1 %211, label %212, label %193, !llvm.loop !877

212:                                              ; preds = %193, %155
  %213 = getelementptr inbounds i16, i16* %143, i64 %8
  %214 = mul i64 %8, 6
  %215 = getelementptr i8, i8* %0, i64 %214
  %216 = add i64 %214, 32
  %217 = getelementptr i8, i8* %0, i64 %216
  %218 = getelementptr [32 x i16], [32 x i16]* %2, i64 3, i64 0
  %219 = bitcast i16* %218 to i8*
  %220 = getelementptr [32 x i16], [32 x i16]* %2, i64 3, i64 16
  %221 = bitcast i16* %220 to i8*
  %222 = icmp ult i8* %215, %221
  %223 = icmp ugt i8* %217, %219
  %224 = and i1 %222, %223
  br i1 %224, label %263, label %225

225:                                              ; preds = %212
  %226 = insertelement <8 x i32> undef, i32 %3, i32 0
  %227 = shufflevector <8 x i32> %226, <8 x i32> undef, <8 x i32> zeroinitializer
  %228 = insertelement <8 x i32> undef, i32 %7, i32 0
  %229 = shufflevector <8 x i32> %228, <8 x i32> undef, <8 x i32> zeroinitializer
  %230 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3, i64 0
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !878
  %233 = sext <8 x i16> %232 to <8 x i32>
  %234 = mul nsw <8 x i32> %227, %233
  %235 = ashr <8 x i32> %234, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %236 = add <8 x i32> %234, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %237 = add <8 x i32> %236, %235
  %238 = ashr <8 x i32> %237, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %239 = add nsw <8 x i32> %238, %229
  %240 = icmp slt <8 x i32> %239, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %241 = select <8 x i1> %240, <8 x i32> %239, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %242 = icmp sgt <8 x i32> %241, zeroinitializer
  %243 = select <8 x i1> %242, <8 x i32> %241, <8 x i32> zeroinitializer
  %244 = trunc <8 x i32> %243 to <8 x i16>
  %245 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %245, align 2, !alias.scope !881, !noalias !878
  %246 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2, !alias.scope !878
  %249 = sext <8 x i16> %248 to <8 x i32>
  %250 = mul nsw <8 x i32> %227, %249
  %251 = ashr <8 x i32> %250, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %252 = add <8 x i32> %250, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %253 = add <8 x i32> %252, %251
  %254 = ashr <8 x i32> %253, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %255 = add nsw <8 x i32> %254, %229
  %256 = icmp slt <8 x i32> %255, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %257 = select <8 x i1> %256, <8 x i32> %255, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %258 = icmp sgt <8 x i32> %257, zeroinitializer
  %259 = select <8 x i1> %258, <8 x i32> %257, <8 x i32> zeroinitializer
  %260 = trunc <8 x i32> %259 to <8 x i16>
  %261 = getelementptr inbounds i16, i16* %213, i64 8
  %262 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %262, align 2, !alias.scope !881, !noalias !878
  br label %282

263:                                              ; preds = %212, %263
  %264 = phi i64 [ %280, %263 ], [ 0, %212 ]
  %265 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 3, i64 %264
  %266 = load i16, i16* %265, align 2
  %267 = sext i16 %266 to i32
  %268 = mul nsw i32 %267, %3
  %269 = ashr i32 %268, 31
  %270 = add i32 %268, 32
  %271 = add i32 %270, %269
  %272 = ashr i32 %271, 6
  %273 = add nsw i32 %272, %7
  %274 = icmp slt i32 %273, 1023
  %275 = select i1 %274, i32 %273, i32 1023
  %276 = icmp sgt i32 %275, 0
  %277 = select i1 %276, i32 %275, i32 0
  %278 = trunc i32 %277 to i16
  %279 = getelementptr inbounds i16, i16* %213, i64 %264
  store i16 %278, i16* %279, align 2
  %280 = add nuw nsw i64 %264, 1
  %281 = icmp eq i64 %280, 16
  br i1 %281, label %282, label %263, !llvm.loop !883

282:                                              ; preds = %263, %225
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  br label %15

11:                                               ; preds = %15
  %12 = icmp sgt i32 %9, 0
  %13 = getelementptr inbounds i16, i16* %6, i64 %7
  %14 = select i1 %12, i16* %13, i16* %6
  br label %41

15:                                               ; preds = %15, %5
  %16 = phi i64 [ 0, %5 ], [ %39, %15 ]
  %17 = phi i32 [ 0, %5 ], [ %38, %15 ]
  %18 = icmp sgt i64 %16, %10
  %19 = trunc i64 %16 to i32
  %20 = select i1 %18, i32 %8, i32 %19
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16, i16* %6, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = shl i16 %23, 3
  %25 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %16
  store i16 %24, i16* %25, align 2
  %26 = sext i16 %24 to i32
  %27 = add nsw i32 %17, %26
  %28 = or i64 %16, 1
  %29 = icmp slt i64 %16, %10
  %30 = trunc i64 %28 to i32
  %31 = select i1 %29, i32 %30, i32 %8
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %6, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = shl i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %28
  store i16 %35, i16* %36, align 2
  %37 = sext i16 %35 to i32
  %38 = add nsw i32 %27, %37
  %39 = add nuw nsw i64 %16, 2
  %40 = icmp eq i64 %39, 16
  br i1 %40, label %11, label %15

41:                                               ; preds = %41, %11
  %42 = phi i64 [ 0, %11 ], [ %65, %41 ]
  %43 = phi i32 [ %38, %11 ], [ %64, %41 ]
  %44 = icmp sgt i64 %42, %10
  %45 = trunc i64 %42 to i32
  %46 = select i1 %44, i32 %8, i32 %45
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %14, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = shl i16 %49, 3
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %42
  store i16 %50, i16* %51, align 2
  %52 = sext i16 %50 to i32
  %53 = add nsw i32 %43, %52
  %54 = or i64 %42, 1
  %55 = icmp slt i64 %42, %10
  %56 = trunc i64 %54 to i32
  %57 = select i1 %55, i32 %56, i32 %8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %14, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = shl i16 %60, 3
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %54
  store i16 %61, i16* %62, align 2
  %63 = sext i16 %61 to i32
  %64 = add nsw i32 %53, %63
  %65 = add nuw nsw i64 %42, 2
  %66 = icmp eq i64 %65, 16
  br i1 %66, label %67, label %41

67:                                               ; preds = %41
  %68 = icmp sgt i32 %9, 1
  %69 = getelementptr inbounds i16, i16* %14, i64 %7
  %70 = select i1 %68, i16* %69, i16* %14
  br label %71

71:                                               ; preds = %71, %67
  %72 = phi i64 [ 0, %67 ], [ %95, %71 ]
  %73 = phi i32 [ %64, %67 ], [ %94, %71 ]
  %74 = icmp sgt i64 %72, %10
  %75 = trunc i64 %72 to i32
  %76 = select i1 %74, i32 %8, i32 %75
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i16, i16* %70, i64 %77
  %79 = load i16, i16* %78, align 2
  %80 = shl i16 %79, 3
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %72
  store i16 %80, i16* %81, align 2
  %82 = sext i16 %80 to i32
  %83 = add nsw i32 %73, %82
  %84 = or i64 %72, 1
  %85 = icmp slt i64 %72, %10
  %86 = trunc i64 %84 to i32
  %87 = select i1 %85, i32 %86, i32 %8
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i16, i16* %70, i64 %88
  %90 = load i16, i16* %89, align 2
  %91 = shl i16 %90, 3
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %84
  store i16 %91, i16* %92, align 2
  %93 = sext i16 %91 to i32
  %94 = add nsw i32 %83, %93
  %95 = add nuw nsw i64 %72, 2
  %96 = icmp eq i64 %95, 16
  br i1 %96, label %97, label %71

97:                                               ; preds = %71
  %98 = icmp sgt i32 %9, 2
  %99 = getelementptr inbounds i16, i16* %70, i64 %7
  %100 = select i1 %98, i16* %99, i16* %70
  br label %101

101:                                              ; preds = %101, %97
  %102 = phi i64 [ 0, %97 ], [ %125, %101 ]
  %103 = phi i32 [ %94, %97 ], [ %124, %101 ]
  %104 = icmp sgt i64 %102, %10
  %105 = trunc i64 %102 to i32
  %106 = select i1 %104, i32 %8, i32 %105
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i16, i16* %100, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = shl i16 %109, 3
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %102
  store i16 %110, i16* %111, align 2
  %112 = sext i16 %110 to i32
  %113 = add nsw i32 %103, %112
  %114 = or i64 %102, 1
  %115 = icmp slt i64 %102, %10
  %116 = trunc i64 %114 to i32
  %117 = select i1 %115, i32 %116, i32 %8
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i16, i16* %100, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = shl i16 %120, 3
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %114
  store i16 %121, i16* %122, align 2
  %123 = sext i16 %121 to i32
  %124 = add nsw i32 %113, %123
  %125 = add nuw nsw i64 %102, 2
  %126 = icmp eq i64 %125, 16
  br i1 %126, label %127, label %101

127:                                              ; preds = %101
  %128 = add nsw i32 %124, 32
  %129 = lshr i32 %128, 6
  %130 = trunc i32 %129 to i16
  %131 = insertelement <8 x i16> undef, i16 %130, i32 0
  %132 = shufflevector <8 x i16> %131, <8 x i16> undef, <8 x i32> zeroinitializer
  %133 = insertelement <8 x i16> undef, i16 %130, i32 0
  %134 = shufflevector <8 x i16> %133, <8 x i16> undef, <8 x i32> zeroinitializer
  %135 = bitcast [32 x i16]* %0 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2
  %137 = sub <8 x i16> %136, %132
  %138 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2
  %142 = sub <8 x i16> %141, %134
  %143 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2
  %147 = sub <8 x i16> %146, %132
  %148 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %150 = bitcast i16* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = sub <8 x i16> %151, %134
  %153 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 2
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2
  %157 = sub <8 x i16> %156, %132
  %158 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2
  %162 = sub <8 x i16> %161, %134
  %163 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %163, align 2
  %164 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = sub <8 x i16> %166, %132
  %168 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %168, align 2
  %169 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %170 = bitcast i16* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 2
  %172 = sub <8 x i16> %171, %134
  %173 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  br label %15

11:                                               ; preds = %15
  %12 = icmp sgt i32 %9, 0
  %13 = getelementptr inbounds i16, i16* %6, i64 %7
  %14 = select i1 %12, i16* %13, i16* %6
  br label %35

15:                                               ; preds = %15, %5
  %16 = phi i64 [ 0, %5 ], [ %33, %15 ]
  %17 = phi i32 [ 0, %5 ], [ %32, %15 ]
  %18 = shl nuw i64 %16, 1
  %19 = icmp sgt i64 %18, %10
  %20 = trunc i64 %18 to i32
  %21 = select i1 %19, i32 %8, i32 %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %6, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = add nsw i64 %22, 1
  %26 = getelementptr inbounds i16, i16* %6, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = add i16 %27, %24
  %29 = shl i16 %28, 2
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %16
  store i16 %29, i16* %30, align 2
  %31 = sext i16 %29 to i32
  %32 = add nsw i32 %17, %31
  %33 = add nuw nsw i64 %16, 1
  %34 = icmp eq i64 %33, 16
  br i1 %34, label %11, label %15

35:                                               ; preds = %35, %11
  %36 = phi i64 [ 0, %11 ], [ %53, %35 ]
  %37 = phi i32 [ %32, %11 ], [ %52, %35 ]
  %38 = shl nuw i64 %36, 1
  %39 = icmp sgt i64 %38, %10
  %40 = trunc i64 %38 to i32
  %41 = select i1 %39, i32 %8, i32 %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i16, i16* %14, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = add nsw i64 %42, 1
  %46 = getelementptr inbounds i16, i16* %14, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = add i16 %47, %44
  %49 = shl i16 %48, 2
  %50 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %36
  store i16 %49, i16* %50, align 2
  %51 = sext i16 %49 to i32
  %52 = add nsw i32 %37, %51
  %53 = add nuw nsw i64 %36, 1
  %54 = icmp eq i64 %53, 16
  br i1 %54, label %55, label %35

55:                                               ; preds = %35
  %56 = icmp sgt i32 %9, 1
  %57 = getelementptr inbounds i16, i16* %14, i64 %7
  %58 = select i1 %56, i16* %57, i16* %14
  br label %59

59:                                               ; preds = %59, %55
  %60 = phi i64 [ 0, %55 ], [ %77, %59 ]
  %61 = phi i32 [ %52, %55 ], [ %76, %59 ]
  %62 = shl nuw i64 %60, 1
  %63 = icmp sgt i64 %62, %10
  %64 = trunc i64 %62 to i32
  %65 = select i1 %63, i32 %8, i32 %64
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i16, i16* %58, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = add nsw i64 %66, 1
  %70 = getelementptr inbounds i16, i16* %58, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = add i16 %71, %68
  %73 = shl i16 %72, 2
  %74 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %60
  store i16 %73, i16* %74, align 2
  %75 = sext i16 %73 to i32
  %76 = add nsw i32 %61, %75
  %77 = add nuw nsw i64 %60, 1
  %78 = icmp eq i64 %77, 16
  br i1 %78, label %79, label %59

79:                                               ; preds = %59
  %80 = icmp sgt i32 %9, 2
  %81 = getelementptr inbounds i16, i16* %58, i64 %7
  %82 = select i1 %80, i16* %81, i16* %58
  br label %83

83:                                               ; preds = %83, %79
  %84 = phi i64 [ 0, %79 ], [ %101, %83 ]
  %85 = phi i32 [ %76, %79 ], [ %100, %83 ]
  %86 = shl nuw i64 %84, 1
  %87 = icmp sgt i64 %86, %10
  %88 = trunc i64 %86 to i32
  %89 = select i1 %87, i32 %8, i32 %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i16, i16* %82, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = add nsw i64 %90, 1
  %94 = getelementptr inbounds i16, i16* %82, i64 %93
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, %92
  %97 = shl i16 %96, 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %84
  store i16 %97, i16* %98, align 2
  %99 = sext i16 %97 to i32
  %100 = add nsw i32 %85, %99
  %101 = add nuw nsw i64 %84, 1
  %102 = icmp eq i64 %101, 16
  br i1 %102, label %103, label %83

103:                                              ; preds = %83
  %104 = add nsw i32 %100, 32
  %105 = lshr i32 %104, 6
  %106 = trunc i32 %105 to i16
  %107 = insertelement <8 x i16> undef, i16 %106, i32 0
  %108 = shufflevector <8 x i16> %107, <8 x i16> undef, <8 x i32> zeroinitializer
  %109 = insertelement <8 x i16> undef, i16 %106, i32 0
  %110 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> zeroinitializer
  %111 = bitcast [32 x i16]* %0 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2
  %113 = sub <8 x i16> %112, %108
  %114 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2
  %118 = sub <8 x i16> %117, %110
  %119 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2
  %123 = sub <8 x i16> %122, %108
  %124 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %124, align 2
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2
  %128 = sub <8 x i16> %127, %110
  %129 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 2
  %130 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2
  %133 = sub <8 x i16> %132, %108
  %134 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %134, align 2
  %135 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2
  %138 = sub <8 x i16> %137, %110
  %139 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %139, align 2
  %140 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2
  %143 = sub <8 x i16> %142, %108
  %144 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %144, align 2
  %145 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = sub <8 x i16> %147, %110
  %149 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %148, <8 x i16>* %149, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi4ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = sext i32 %8 to i64
  br label %16

12:                                               ; preds = %16
  %13 = icmp sgt i32 %9, 0
  %14 = getelementptr inbounds i16, i16* %6, i64 %10
  %15 = select i1 %13, i16* %14, i16* %6
  br label %44

16:                                               ; preds = %16, %5
  %17 = phi i64 [ 0, %5 ], [ %42, %16 ]
  %18 = phi i32 [ 0, %5 ], [ %41, %16 ]
  %19 = shl nuw i64 %17, 1
  %20 = icmp sgt i64 %19, %11
  %21 = trunc i64 %19 to i32
  %22 = select i1 %20, i32 %8, i32 %21
  %23 = sext i32 %22 to i64
  %24 = add nsw i64 %7, %23
  %25 = getelementptr inbounds i16, i16* %6, i64 %23
  %26 = load i16, i16* %25, align 2
  %27 = add nsw i64 %23, 1
  %28 = getelementptr inbounds i16, i16* %6, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = getelementptr inbounds i16, i16* %6, i64 %24
  %31 = load i16, i16* %30, align 2
  %32 = add nsw i64 %24, 1
  %33 = getelementptr inbounds i16, i16* %6, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = add i16 %29, %26
  %36 = add i16 %35, %31
  %37 = add i16 %36, %34
  %38 = shl i16 %37, 1
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %17
  store i16 %38, i16* %39, align 2
  %40 = sext i16 %38 to i32
  %41 = add nsw i32 %18, %40
  %42 = add nuw nsw i64 %17, 1
  %43 = icmp eq i64 %42, 16
  br i1 %43, label %12, label %16

44:                                               ; preds = %44, %12
  %45 = phi i64 [ 0, %12 ], [ %70, %44 ]
  %46 = phi i32 [ %41, %12 ], [ %69, %44 ]
  %47 = shl nuw i64 %45, 1
  %48 = icmp sgt i64 %47, %11
  %49 = trunc i64 %47 to i32
  %50 = select i1 %48, i32 %8, i32 %49
  %51 = sext i32 %50 to i64
  %52 = add nsw i64 %7, %51
  %53 = getelementptr inbounds i16, i16* %15, i64 %51
  %54 = load i16, i16* %53, align 2
  %55 = add nsw i64 %51, 1
  %56 = getelementptr inbounds i16, i16* %15, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = getelementptr inbounds i16, i16* %15, i64 %52
  %59 = load i16, i16* %58, align 2
  %60 = add nsw i64 %52, 1
  %61 = getelementptr inbounds i16, i16* %15, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = add i16 %57, %54
  %64 = add i16 %63, %59
  %65 = add i16 %64, %62
  %66 = shl i16 %65, 1
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %45
  store i16 %66, i16* %67, align 2
  %68 = sext i16 %66 to i32
  %69 = add nsw i32 %46, %68
  %70 = add nuw nsw i64 %45, 1
  %71 = icmp eq i64 %70, 16
  br i1 %71, label %72, label %44

72:                                               ; preds = %44
  %73 = icmp sgt i32 %9, 2
  %74 = getelementptr inbounds i16, i16* %15, i64 %10
  %75 = select i1 %73, i16* %74, i16* %15
  br label %76

76:                                               ; preds = %76, %72
  %77 = phi i64 [ 0, %72 ], [ %102, %76 ]
  %78 = phi i32 [ %69, %72 ], [ %101, %76 ]
  %79 = shl nuw i64 %77, 1
  %80 = icmp sgt i64 %79, %11
  %81 = trunc i64 %79 to i32
  %82 = select i1 %80, i32 %8, i32 %81
  %83 = sext i32 %82 to i64
  %84 = add nsw i64 %7, %83
  %85 = getelementptr inbounds i16, i16* %75, i64 %83
  %86 = load i16, i16* %85, align 2
  %87 = add nsw i64 %83, 1
  %88 = getelementptr inbounds i16, i16* %75, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = getelementptr inbounds i16, i16* %75, i64 %84
  %91 = load i16, i16* %90, align 2
  %92 = add nsw i64 %84, 1
  %93 = getelementptr inbounds i16, i16* %75, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = add i16 %89, %86
  %96 = add i16 %95, %91
  %97 = add i16 %96, %94
  %98 = shl i16 %97, 1
  %99 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %77
  store i16 %98, i16* %99, align 2
  %100 = sext i16 %98 to i32
  %101 = add nsw i32 %78, %100
  %102 = add nuw nsw i64 %77, 1
  %103 = icmp eq i64 %102, 16
  br i1 %103, label %104, label %76

104:                                              ; preds = %76
  %105 = icmp sgt i32 %9, 4
  %106 = getelementptr inbounds i16, i16* %75, i64 %10
  %107 = select i1 %105, i16* %106, i16* %75
  br label %108

108:                                              ; preds = %108, %104
  %109 = phi i64 [ 0, %104 ], [ %134, %108 ]
  %110 = phi i32 [ %101, %104 ], [ %133, %108 ]
  %111 = shl nuw i64 %109, 1
  %112 = icmp sgt i64 %111, %11
  %113 = trunc i64 %111 to i32
  %114 = select i1 %112, i32 %8, i32 %113
  %115 = sext i32 %114 to i64
  %116 = add nsw i64 %7, %115
  %117 = getelementptr inbounds i16, i16* %107, i64 %115
  %118 = load i16, i16* %117, align 2
  %119 = add nsw i64 %115, 1
  %120 = getelementptr inbounds i16, i16* %107, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = getelementptr inbounds i16, i16* %107, i64 %116
  %123 = load i16, i16* %122, align 2
  %124 = add nsw i64 %116, 1
  %125 = getelementptr inbounds i16, i16* %107, i64 %124
  %126 = load i16, i16* %125, align 2
  %127 = add i16 %121, %118
  %128 = add i16 %127, %123
  %129 = add i16 %128, %126
  %130 = shl i16 %129, 1
  %131 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %109
  store i16 %130, i16* %131, align 2
  %132 = sext i16 %130 to i32
  %133 = add nsw i32 %110, %132
  %134 = add nuw nsw i64 %109, 1
  %135 = icmp eq i64 %134, 16
  br i1 %135, label %136, label %108

136:                                              ; preds = %108
  %137 = add nsw i32 %133, 32
  %138 = lshr i32 %137, 6
  %139 = trunc i32 %138 to i16
  %140 = insertelement <8 x i16> undef, i16 %139, i32 0
  %141 = shufflevector <8 x i16> %140, <8 x i16> undef, <8 x i32> zeroinitializer
  %142 = insertelement <8 x i16> undef, i16 %139, i32 0
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> zeroinitializer
  %144 = bitcast [32 x i16]* %0 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2
  %146 = sub <8 x i16> %145, %141
  %147 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = sub <8 x i16> %150, %143
  %152 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2
  %156 = sub <8 x i16> %155, %141
  %157 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2
  %161 = sub <8 x i16> %160, %143
  %162 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = sub <8 x i16> %165, %141
  %167 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = sub <8 x i16> %170, %143
  %172 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2
  %176 = sub <8 x i16> %175, %141
  %177 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2
  %181 = sub <8 x i16> %180, %143
  %182 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %182, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi8ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  %9 = and i64 %1, -2
  %10 = insertelement <8 x i32> undef, i32 %3, i32 0
  %11 = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> zeroinitializer
  %12 = insertelement <8 x i32> undef, i32 %7, i32 0
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %14

14:                                               ; preds = %63, %4
  %15 = phi i64 [ 0, %4 ], [ %65, %63 ]
  %16 = phi i16* [ %5, %4 ], [ %64, %63 ]
  %17 = mul i64 %9, %15
  %18 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 16
  %19 = bitcast i16* %18 to i8*
  %20 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %21 = bitcast i16* %20 to i8*
  %22 = add i64 %17, 32
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = getelementptr i8, i8* %0, i64 %17
  %25 = icmp ult i8* %24, %19
  %26 = icmp ugt i8* %23, %21
  %27 = and i1 %25, %26
  br i1 %27, label %67, label %28

28:                                               ; preds = %14
  %29 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !884
  %32 = sext <8 x i16> %31 to <8 x i32>
  %33 = mul nsw <8 x i32> %11, %32
  %34 = ashr <8 x i32> %33, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %35 = add <8 x i32> %33, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %36 = add <8 x i32> %35, %34
  %37 = ashr <8 x i32> %36, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %38 = add nsw <8 x i32> %37, %13
  %39 = icmp slt <8 x i32> %38, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %40 = select <8 x i1> %39, <8 x i32> %38, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %41 = icmp sgt <8 x i32> %40, zeroinitializer
  %42 = select <8 x i1> %41, <8 x i32> %40, <8 x i32> zeroinitializer
  %43 = trunc <8 x i32> %42 to <8 x i16>
  %44 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %44, align 2, !alias.scope !887, !noalias !884
  %45 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 8
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2, !alias.scope !884
  %48 = sext <8 x i16> %47 to <8 x i32>
  %49 = mul nsw <8 x i32> %11, %48
  %50 = ashr <8 x i32> %49, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %51 = add <8 x i32> %49, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %52 = add <8 x i32> %51, %50
  %53 = ashr <8 x i32> %52, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %54 = add nsw <8 x i32> %53, %13
  %55 = icmp slt <8 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = select <8 x i1> %55, <8 x i32> %54, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %57 = icmp sgt <8 x i32> %56, zeroinitializer
  %58 = select <8 x i1> %57, <8 x i32> %56, <8 x i32> zeroinitializer
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = getelementptr inbounds i16, i16* %16, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %61, align 2, !alias.scope !887, !noalias !884
  br label %63

62:                                               ; preds = %63
  ret void

63:                                               ; preds = %67, %28
  %64 = getelementptr inbounds i16, i16* %16, i64 %8
  %65 = add nuw nsw i64 %15, 1
  %66 = icmp eq i64 %65, 8
  br i1 %66, label %62, label %14

67:                                               ; preds = %14, %67
  %68 = phi i64 [ %84, %67 ], [ 0, %14 ]
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %3
  %73 = ashr i32 %72, 31
  %74 = add i32 %72, 32
  %75 = add i32 %74, %73
  %76 = ashr i32 %75, 6
  %77 = add nsw i32 %76, %7
  %78 = icmp slt i32 %77, 1023
  %79 = select i1 %78, i32 %77, i32 1023
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %16, i64 %68
  store i16 %82, i16* %83, align 2
  %84 = add nuw nsw i64 %68, 1
  %85 = icmp eq i64 %84, 16
  br i1 %85, label %63, label %67, !llvm.loop !889
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  br label %15

11:                                               ; preds = %15
  %12 = icmp sgt i32 %9, 0
  %13 = getelementptr inbounds i16, i16* %6, i64 %7
  %14 = select i1 %12, i16* %13, i16* %6
  br label %41

15:                                               ; preds = %15, %5
  %16 = phi i64 [ 0, %5 ], [ %39, %15 ]
  %17 = phi i32 [ 0, %5 ], [ %38, %15 ]
  %18 = icmp sgt i64 %16, %10
  %19 = trunc i64 %16 to i32
  %20 = select i1 %18, i32 %8, i32 %19
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16, i16* %6, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = shl i16 %23, 3
  %25 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %16
  store i16 %24, i16* %25, align 2
  %26 = sext i16 %24 to i32
  %27 = add nsw i32 %17, %26
  %28 = or i64 %16, 1
  %29 = icmp slt i64 %16, %10
  %30 = trunc i64 %28 to i32
  %31 = select i1 %29, i32 %30, i32 %8
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %6, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = shl i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %28
  store i16 %35, i16* %36, align 2
  %37 = sext i16 %35 to i32
  %38 = add nsw i32 %27, %37
  %39 = add nuw nsw i64 %16, 2
  %40 = icmp eq i64 %39, 16
  br i1 %40, label %11, label %15

41:                                               ; preds = %41, %11
  %42 = phi i64 [ 0, %11 ], [ %65, %41 ]
  %43 = phi i32 [ %38, %11 ], [ %64, %41 ]
  %44 = icmp sgt i64 %42, %10
  %45 = trunc i64 %42 to i32
  %46 = select i1 %44, i32 %8, i32 %45
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %14, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = shl i16 %49, 3
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %42
  store i16 %50, i16* %51, align 2
  %52 = sext i16 %50 to i32
  %53 = add nsw i32 %43, %52
  %54 = or i64 %42, 1
  %55 = icmp slt i64 %42, %10
  %56 = trunc i64 %54 to i32
  %57 = select i1 %55, i32 %56, i32 %8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %14, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = shl i16 %60, 3
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %54
  store i16 %61, i16* %62, align 2
  %63 = sext i16 %61 to i32
  %64 = add nsw i32 %53, %63
  %65 = add nuw nsw i64 %42, 2
  %66 = icmp eq i64 %65, 16
  br i1 %66, label %67, label %41

67:                                               ; preds = %41
  %68 = icmp sgt i32 %9, 1
  %69 = getelementptr inbounds i16, i16* %14, i64 %7
  %70 = select i1 %68, i16* %69, i16* %14
  br label %71

71:                                               ; preds = %71, %67
  %72 = phi i64 [ 0, %67 ], [ %95, %71 ]
  %73 = phi i32 [ %64, %67 ], [ %94, %71 ]
  %74 = icmp sgt i64 %72, %10
  %75 = trunc i64 %72 to i32
  %76 = select i1 %74, i32 %8, i32 %75
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i16, i16* %70, i64 %77
  %79 = load i16, i16* %78, align 2
  %80 = shl i16 %79, 3
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %72
  store i16 %80, i16* %81, align 2
  %82 = sext i16 %80 to i32
  %83 = add nsw i32 %73, %82
  %84 = or i64 %72, 1
  %85 = icmp slt i64 %72, %10
  %86 = trunc i64 %84 to i32
  %87 = select i1 %85, i32 %86, i32 %8
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i16, i16* %70, i64 %88
  %90 = load i16, i16* %89, align 2
  %91 = shl i16 %90, 3
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %84
  store i16 %91, i16* %92, align 2
  %93 = sext i16 %91 to i32
  %94 = add nsw i32 %83, %93
  %95 = add nuw nsw i64 %72, 2
  %96 = icmp eq i64 %95, 16
  br i1 %96, label %97, label %71

97:                                               ; preds = %71
  %98 = icmp sgt i32 %9, 2
  %99 = getelementptr inbounds i16, i16* %70, i64 %7
  %100 = select i1 %98, i16* %99, i16* %70
  br label %101

101:                                              ; preds = %101, %97
  %102 = phi i64 [ 0, %97 ], [ %125, %101 ]
  %103 = phi i32 [ %94, %97 ], [ %124, %101 ]
  %104 = icmp sgt i64 %102, %10
  %105 = trunc i64 %102 to i32
  %106 = select i1 %104, i32 %8, i32 %105
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i16, i16* %100, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = shl i16 %109, 3
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %102
  store i16 %110, i16* %111, align 2
  %112 = sext i16 %110 to i32
  %113 = add nsw i32 %103, %112
  %114 = or i64 %102, 1
  %115 = icmp slt i64 %102, %10
  %116 = trunc i64 %114 to i32
  %117 = select i1 %115, i32 %116, i32 %8
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i16, i16* %100, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = shl i16 %120, 3
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %114
  store i16 %121, i16* %122, align 2
  %123 = sext i16 %121 to i32
  %124 = add nsw i32 %113, %123
  %125 = add nuw nsw i64 %102, 2
  %126 = icmp eq i64 %125, 16
  br i1 %126, label %127, label %101

127:                                              ; preds = %101
  %128 = icmp sgt i32 %9, 3
  %129 = getelementptr inbounds i16, i16* %100, i64 %7
  %130 = select i1 %128, i16* %129, i16* %100
  br label %131

131:                                              ; preds = %131, %127
  %132 = phi i64 [ 0, %127 ], [ %155, %131 ]
  %133 = phi i32 [ %124, %127 ], [ %154, %131 ]
  %134 = icmp sgt i64 %132, %10
  %135 = trunc i64 %132 to i32
  %136 = select i1 %134, i32 %8, i32 %135
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i16, i16* %130, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = shl i16 %139, 3
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 %132
  store i16 %140, i16* %141, align 2
  %142 = sext i16 %140 to i32
  %143 = add nsw i32 %133, %142
  %144 = or i64 %132, 1
  %145 = icmp slt i64 %132, %10
  %146 = trunc i64 %144 to i32
  %147 = select i1 %145, i32 %146, i32 %8
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i16, i16* %130, i64 %148
  %150 = load i16, i16* %149, align 2
  %151 = shl i16 %150, 3
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 %144
  store i16 %151, i16* %152, align 2
  %153 = sext i16 %151 to i32
  %154 = add nsw i32 %143, %153
  %155 = add nuw nsw i64 %132, 2
  %156 = icmp eq i64 %155, 16
  br i1 %156, label %157, label %131

157:                                              ; preds = %131
  %158 = icmp sgt i32 %9, 4
  %159 = getelementptr inbounds i16, i16* %130, i64 %7
  %160 = select i1 %158, i16* %159, i16* %130
  br label %161

161:                                              ; preds = %161, %157
  %162 = phi i64 [ 0, %157 ], [ %185, %161 ]
  %163 = phi i32 [ %154, %157 ], [ %184, %161 ]
  %164 = icmp sgt i64 %162, %10
  %165 = trunc i64 %162 to i32
  %166 = select i1 %164, i32 %8, i32 %165
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i16, i16* %160, i64 %167
  %169 = load i16, i16* %168, align 2
  %170 = shl i16 %169, 3
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 %162
  store i16 %170, i16* %171, align 2
  %172 = sext i16 %170 to i32
  %173 = add nsw i32 %163, %172
  %174 = or i64 %162, 1
  %175 = icmp slt i64 %162, %10
  %176 = trunc i64 %174 to i32
  %177 = select i1 %175, i32 %176, i32 %8
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i16, i16* %160, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = shl i16 %180, 3
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 %174
  store i16 %181, i16* %182, align 2
  %183 = sext i16 %181 to i32
  %184 = add nsw i32 %173, %183
  %185 = add nuw nsw i64 %162, 2
  %186 = icmp eq i64 %185, 16
  br i1 %186, label %187, label %161

187:                                              ; preds = %161
  %188 = icmp sgt i32 %9, 5
  %189 = getelementptr inbounds i16, i16* %160, i64 %7
  %190 = select i1 %188, i16* %189, i16* %160
  br label %191

191:                                              ; preds = %191, %187
  %192 = phi i64 [ 0, %187 ], [ %215, %191 ]
  %193 = phi i32 [ %184, %187 ], [ %214, %191 ]
  %194 = icmp sgt i64 %192, %10
  %195 = trunc i64 %192 to i32
  %196 = select i1 %194, i32 %8, i32 %195
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i16, i16* %190, i64 %197
  %199 = load i16, i16* %198, align 2
  %200 = shl i16 %199, 3
  %201 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 %192
  store i16 %200, i16* %201, align 2
  %202 = sext i16 %200 to i32
  %203 = add nsw i32 %193, %202
  %204 = or i64 %192, 1
  %205 = icmp slt i64 %192, %10
  %206 = trunc i64 %204 to i32
  %207 = select i1 %205, i32 %206, i32 %8
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i16, i16* %190, i64 %208
  %210 = load i16, i16* %209, align 2
  %211 = shl i16 %210, 3
  %212 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 %204
  store i16 %211, i16* %212, align 2
  %213 = sext i16 %211 to i32
  %214 = add nsw i32 %203, %213
  %215 = add nuw nsw i64 %192, 2
  %216 = icmp eq i64 %215, 16
  br i1 %216, label %217, label %191

217:                                              ; preds = %191
  %218 = icmp sgt i32 %9, 6
  %219 = getelementptr inbounds i16, i16* %190, i64 %7
  %220 = select i1 %218, i16* %219, i16* %190
  br label %221

221:                                              ; preds = %221, %217
  %222 = phi i64 [ 0, %217 ], [ %245, %221 ]
  %223 = phi i32 [ %214, %217 ], [ %244, %221 ]
  %224 = icmp sgt i64 %222, %10
  %225 = trunc i64 %222 to i32
  %226 = select i1 %224, i32 %8, i32 %225
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds i16, i16* %220, i64 %227
  %229 = load i16, i16* %228, align 2
  %230 = shl i16 %229, 3
  %231 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 %222
  store i16 %230, i16* %231, align 2
  %232 = sext i16 %230 to i32
  %233 = add nsw i32 %223, %232
  %234 = or i64 %222, 1
  %235 = icmp slt i64 %222, %10
  %236 = trunc i64 %234 to i32
  %237 = select i1 %235, i32 %236, i32 %8
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i16, i16* %220, i64 %238
  %240 = load i16, i16* %239, align 2
  %241 = shl i16 %240, 3
  %242 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 %234
  store i16 %241, i16* %242, align 2
  %243 = sext i16 %241 to i32
  %244 = add nsw i32 %233, %243
  %245 = add nuw nsw i64 %222, 2
  %246 = icmp eq i64 %245, 16
  br i1 %246, label %247, label %221

247:                                              ; preds = %221
  %248 = add nsw i32 %244, 64
  %249 = lshr i32 %248, 7
  %250 = trunc i32 %249 to i16
  %251 = insertelement <8 x i16> undef, i16 %250, i32 0
  %252 = shufflevector <8 x i16> %251, <8 x i16> undef, <8 x i32> zeroinitializer
  %253 = insertelement <8 x i16> undef, i16 %250, i32 0
  %254 = shufflevector <8 x i16> %253, <8 x i16> undef, <8 x i32> zeroinitializer
  %255 = bitcast [32 x i16]* %0 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2
  %257 = sub <8 x i16> %256, %252
  %258 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %257, <8 x i16>* %258, align 2
  %259 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %260 = bitcast i16* %259 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 2
  %262 = sub <8 x i16> %261, %254
  %263 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %263, align 2
  %264 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2
  %267 = sub <8 x i16> %266, %252
  %268 = bitcast i16* %264 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %268, align 2
  %269 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2
  %272 = sub <8 x i16> %271, %254
  %273 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %272, <8 x i16>* %273, align 2
  %274 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2
  %277 = sub <8 x i16> %276, %252
  %278 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %277, <8 x i16>* %278, align 2
  %279 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 2
  %282 = sub <8 x i16> %281, %254
  %283 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 2
  %284 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2
  %287 = sub <8 x i16> %286, %252
  %288 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %288, align 2
  %289 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2
  %292 = sub <8 x i16> %291, %254
  %293 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %293, align 2
  %294 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %295 = bitcast i16* %294 to <8 x i16>*
  %296 = load <8 x i16>, <8 x i16>* %295, align 2
  %297 = sub <8 x i16> %296, %252
  %298 = bitcast i16* %294 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %298, align 2
  %299 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %300 = bitcast i16* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 2
  %302 = sub <8 x i16> %301, %254
  %303 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %302, <8 x i16>* %303, align 2
  %304 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %305 = bitcast i16* %304 to <8 x i16>*
  %306 = load <8 x i16>, <8 x i16>* %305, align 2
  %307 = sub <8 x i16> %306, %252
  %308 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> %307, <8 x i16>* %308, align 2
  %309 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %310 = bitcast i16* %309 to <8 x i16>*
  %311 = load <8 x i16>, <8 x i16>* %310, align 2
  %312 = sub <8 x i16> %311, %254
  %313 = bitcast i16* %309 to <8 x i16>*
  store <8 x i16> %312, <8 x i16>* %313, align 2
  %314 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %315 = bitcast i16* %314 to <8 x i16>*
  %316 = load <8 x i16>, <8 x i16>* %315, align 2
  %317 = sub <8 x i16> %316, %252
  %318 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %318, align 2
  %319 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %320 = bitcast i16* %319 to <8 x i16>*
  %321 = load <8 x i16>, <8 x i16>* %320, align 2
  %322 = sub <8 x i16> %321, %254
  %323 = bitcast i16* %319 to <8 x i16>*
  store <8 x i16> %322, <8 x i16>* %323, align 2
  %324 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %325 = bitcast i16* %324 to <8 x i16>*
  %326 = load <8 x i16>, <8 x i16>* %325, align 2
  %327 = sub <8 x i16> %326, %252
  %328 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %328, align 2
  %329 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2
  %332 = sub <8 x i16> %331, %254
  %333 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %333, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %103, %5
  %13 = phi i64 [ 0, %5 ], [ %107, %103 ]
  %14 = phi i16* [ %6, %5 ], [ %106, %103 ]
  %15 = phi i32 [ 0, %5 ], [ %126, %103 ]
  br label %109

16:                                               ; preds = %103
  %17 = add nsw i32 %126, 64
  %18 = lshr i32 %17, 7
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i16> undef, i16 %19, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  %24 = bitcast [32 x i16]* %0 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 2
  %26 = sub <8 x i16> %25, %21
  %27 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %26, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %29 = bitcast i16* %28 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 2
  %31 = sub <8 x i16> %30, %23
  %32 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 2
  %36 = sub <8 x i16> %35, %21
  %37 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %39 = bitcast i16* %38 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 2
  %41 = sub <8 x i16> %40, %23
  %42 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> %41, <8 x i16>* %42, align 2
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2
  %46 = sub <8 x i16> %45, %21
  %47 = bitcast i16* %43 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2
  %51 = sub <8 x i16> %50, %23
  %52 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2
  %56 = sub <8 x i16> %55, %21
  %57 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2
  %61 = sub <8 x i16> %60, %23
  %62 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = sub <8 x i16> %65, %21
  %67 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2
  %71 = sub <8 x i16> %70, %23
  %72 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %72, align 2
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2
  %76 = sub <8 x i16> %75, %21
  %77 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 2
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2
  %81 = sub <8 x i16> %80, %23
  %82 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2
  %86 = sub <8 x i16> %85, %21
  %87 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %87, align 2
  %88 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = sub <8 x i16> %90, %23
  %92 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2
  %96 = sub <8 x i16> %95, %21
  %97 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2
  %101 = sub <8 x i16> %100, %23
  %102 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %102, align 2
  ret void

103:                                              ; preds = %109
  %104 = icmp slt i64 %13, %11
  %105 = getelementptr inbounds i16, i16* %14, i64 %7
  %106 = select i1 %104, i16* %105, i16* %14
  %107 = add nuw nsw i64 %13, 1
  %108 = icmp eq i64 %107, 8
  br i1 %108, label %16, label %12

109:                                              ; preds = %109, %12
  %110 = phi i64 [ 0, %12 ], [ %127, %109 ]
  %111 = phi i32 [ %15, %12 ], [ %126, %109 ]
  %112 = shl nuw i64 %110, 1
  %113 = icmp sgt i64 %112, %10
  %114 = trunc i64 %112 to i32
  %115 = select i1 %113, i32 %8, i32 %114
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i16, i16* %14, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = add nsw i64 %116, 1
  %120 = getelementptr inbounds i16, i16* %14, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = add i16 %121, %118
  %123 = shl i16 %122, 2
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %110
  store i16 %123, i16* %124, align 2
  %125 = sext i16 %123 to i32
  %126 = add nsw i32 %111, %125
  %127 = add nuw nsw i64 %110, 1
  %128 = icmp eq i64 %127, 16
  br i1 %128, label %103, label %109
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi8ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = sext i32 %8 to i64
  %12 = sext i32 %9 to i64
  br label %13

13:                                               ; preds = %104, %5
  %14 = phi i64 [ 0, %5 ], [ %109, %104 ]
  %15 = phi i16* [ %6, %5 ], [ %108, %104 ]
  %16 = phi i32 [ 0, %5 ], [ %136, %104 ]
  br label %111

17:                                               ; preds = %104
  %18 = add nsw i32 %136, 64
  %19 = lshr i32 %18, 7
  %20 = trunc i32 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = insertelement <8 x i16> undef, i16 %20, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  %25 = bitcast [32 x i16]* %0 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 2
  %27 = sub <8 x i16> %26, %22
  %28 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %27, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2
  %32 = sub <8 x i16> %31, %24
  %33 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> %32, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 2
  %37 = sub <8 x i16> %36, %22
  %38 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 2
  %42 = sub <8 x i16> %41, %24
  %43 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %45 = bitcast i16* %44 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 2
  %47 = sub <8 x i16> %46, %22
  %48 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %48, align 2
  %49 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2
  %52 = sub <8 x i16> %51, %24
  %53 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %55 = bitcast i16* %54 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2
  %57 = sub <8 x i16> %56, %22
  %58 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %58, align 2
  %59 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  %62 = sub <8 x i16> %61, %24
  %63 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = sub <8 x i16> %66, %22
  %68 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 2
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = sub <8 x i16> %71, %24
  %73 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %73, align 2
  %74 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2
  %77 = sub <8 x i16> %76, %22
  %78 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2
  %82 = sub <8 x i16> %81, %24
  %83 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %83, align 2
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2
  %87 = sub <8 x i16> %86, %22
  %88 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %88, align 2
  %89 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2
  %92 = sub <8 x i16> %91, %24
  %93 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %93, align 2
  %94 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2
  %97 = sub <8 x i16> %96, %22
  %98 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2
  %102 = sub <8 x i16> %101, %24
  %103 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %103, align 2
  ret void

104:                                              ; preds = %111
  %105 = shl nuw i64 %14, 1
  %106 = icmp slt i64 %105, %12
  %107 = getelementptr inbounds i16, i16* %15, i64 %10
  %108 = select i1 %106, i16* %107, i16* %15
  %109 = add nuw nsw i64 %14, 1
  %110 = icmp eq i64 %109, 8
  br i1 %110, label %17, label %13

111:                                              ; preds = %111, %13
  %112 = phi i64 [ 0, %13 ], [ %137, %111 ]
  %113 = phi i32 [ %16, %13 ], [ %136, %111 ]
  %114 = shl nuw i64 %112, 1
  %115 = icmp sgt i64 %114, %11
  %116 = trunc i64 %114 to i32
  %117 = select i1 %115, i32 %8, i32 %116
  %118 = sext i32 %117 to i64
  %119 = add nsw i64 %7, %118
  %120 = getelementptr inbounds i16, i16* %15, i64 %118
  %121 = load i16, i16* %120, align 2
  %122 = add nsw i64 %118, 1
  %123 = getelementptr inbounds i16, i16* %15, i64 %122
  %124 = load i16, i16* %123, align 2
  %125 = getelementptr inbounds i16, i16* %15, i64 %119
  %126 = load i16, i16* %125, align 2
  %127 = add nsw i64 %119, 1
  %128 = getelementptr inbounds i16, i16* %15, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = add i16 %124, %121
  %131 = add i16 %130, %126
  %132 = add i16 %131, %129
  %133 = shl i16 %132, 1
  %134 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %14, i64 %112
  store i16 %133, i16* %134, align 2
  %135 = sext i16 %133 to i32
  %136 = add nsw i32 %113, %135
  %137 = add nuw nsw i64 %112, 1
  %138 = icmp eq i64 %137, 16
  br i1 %138, label %104, label %111
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi16ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  %9 = and i64 %1, -2
  %10 = insertelement <8 x i32> undef, i32 %3, i32 0
  %11 = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> zeroinitializer
  %12 = insertelement <8 x i32> undef, i32 %7, i32 0
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %14

14:                                               ; preds = %63, %4
  %15 = phi i64 [ 0, %4 ], [ %65, %63 ]
  %16 = phi i16* [ %5, %4 ], [ %64, %63 ]
  %17 = mul i64 %9, %15
  %18 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 16
  %19 = bitcast i16* %18 to i8*
  %20 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %21 = bitcast i16* %20 to i8*
  %22 = add i64 %17, 32
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = getelementptr i8, i8* %0, i64 %17
  %25 = icmp ult i8* %24, %19
  %26 = icmp ugt i8* %23, %21
  %27 = and i1 %25, %26
  br i1 %27, label %67, label %28

28:                                               ; preds = %14
  %29 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !890
  %32 = sext <8 x i16> %31 to <8 x i32>
  %33 = mul nsw <8 x i32> %11, %32
  %34 = ashr <8 x i32> %33, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %35 = add <8 x i32> %33, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %36 = add <8 x i32> %35, %34
  %37 = ashr <8 x i32> %36, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %38 = add nsw <8 x i32> %37, %13
  %39 = icmp slt <8 x i32> %38, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %40 = select <8 x i1> %39, <8 x i32> %38, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %41 = icmp sgt <8 x i32> %40, zeroinitializer
  %42 = select <8 x i1> %41, <8 x i32> %40, <8 x i32> zeroinitializer
  %43 = trunc <8 x i32> %42 to <8 x i16>
  %44 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %44, align 2, !alias.scope !893, !noalias !890
  %45 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 8
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2, !alias.scope !890
  %48 = sext <8 x i16> %47 to <8 x i32>
  %49 = mul nsw <8 x i32> %11, %48
  %50 = ashr <8 x i32> %49, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %51 = add <8 x i32> %49, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %52 = add <8 x i32> %51, %50
  %53 = ashr <8 x i32> %52, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %54 = add nsw <8 x i32> %53, %13
  %55 = icmp slt <8 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = select <8 x i1> %55, <8 x i32> %54, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %57 = icmp sgt <8 x i32> %56, zeroinitializer
  %58 = select <8 x i1> %57, <8 x i32> %56, <8 x i32> zeroinitializer
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = getelementptr inbounds i16, i16* %16, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %61, align 2, !alias.scope !893, !noalias !890
  br label %63

62:                                               ; preds = %63
  ret void

63:                                               ; preds = %67, %28
  %64 = getelementptr inbounds i16, i16* %16, i64 %8
  %65 = add nuw nsw i64 %15, 1
  %66 = icmp eq i64 %65, 16
  br i1 %66, label %62, label %14

67:                                               ; preds = %14, %67
  %68 = phi i64 [ %84, %67 ], [ 0, %14 ]
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %3
  %73 = ashr i32 %72, 31
  %74 = add i32 %72, 32
  %75 = add i32 %74, %73
  %76 = ashr i32 %75, 6
  %77 = add nsw i32 %76, %7
  %78 = icmp slt i32 %77, 1023
  %79 = select i1 %78, i32 %77, i32 1023
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %16, i64 %68
  store i16 %82, i16* %83, align 2
  %84 = add nuw nsw i64 %68, 1
  %85 = icmp eq i64 %84, 16
  br i1 %85, label %63, label %67, !llvm.loop !895
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %183, %5
  %13 = phi i64 [ 0, %5 ], [ %187, %183 ]
  %14 = phi i16* [ %6, %5 ], [ %186, %183 ]
  %15 = phi i32 [ 0, %5 ], [ %212, %183 ]
  br label %189

16:                                               ; preds = %183
  %17 = add nsw i32 %212, 128
  %18 = lshr i32 %17, 8
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i16> undef, i16 %19, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  %24 = bitcast [32 x i16]* %0 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 2
  %26 = sub <8 x i16> %25, %21
  %27 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %26, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %29 = bitcast i16* %28 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 2
  %31 = sub <8 x i16> %30, %23
  %32 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 2
  %36 = sub <8 x i16> %35, %21
  %37 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %39 = bitcast i16* %38 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 2
  %41 = sub <8 x i16> %40, %23
  %42 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> %41, <8 x i16>* %42, align 2
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2
  %46 = sub <8 x i16> %45, %21
  %47 = bitcast i16* %43 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2
  %51 = sub <8 x i16> %50, %23
  %52 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2
  %56 = sub <8 x i16> %55, %21
  %57 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2
  %61 = sub <8 x i16> %60, %23
  %62 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = sub <8 x i16> %65, %21
  %67 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2
  %71 = sub <8 x i16> %70, %23
  %72 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %72, align 2
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2
  %76 = sub <8 x i16> %75, %21
  %77 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 2
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2
  %81 = sub <8 x i16> %80, %23
  %82 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2
  %86 = sub <8 x i16> %85, %21
  %87 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %87, align 2
  %88 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = sub <8 x i16> %90, %23
  %92 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2
  %96 = sub <8 x i16> %95, %21
  %97 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2
  %101 = sub <8 x i16> %100, %23
  %102 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2
  %106 = sub <8 x i16> %105, %21
  %107 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2
  %111 = sub <8 x i16> %110, %23
  %112 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2
  %116 = sub <8 x i16> %115, %21
  %117 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2
  %121 = sub <8 x i16> %120, %23
  %122 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2
  %126 = sub <8 x i16> %125, %21
  %127 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2
  %131 = sub <8 x i16> %130, %23
  %132 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2
  %136 = sub <8 x i16> %135, %21
  %137 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2
  %141 = sub <8 x i16> %140, %23
  %142 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %142, align 2
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2
  %146 = sub <8 x i16> %145, %21
  %147 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = sub <8 x i16> %150, %23
  %152 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2
  %156 = sub <8 x i16> %155, %21
  %157 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2
  %161 = sub <8 x i16> %160, %23
  %162 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = sub <8 x i16> %165, %21
  %167 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = sub <8 x i16> %170, %23
  %172 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2
  %176 = sub <8 x i16> %175, %21
  %177 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2
  %181 = sub <8 x i16> %180, %23
  %182 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %182, align 2
  ret void

183:                                              ; preds = %189
  %184 = icmp slt i64 %13, %11
  %185 = getelementptr inbounds i16, i16* %14, i64 %7
  %186 = select i1 %184, i16* %185, i16* %14
  %187 = add nuw nsw i64 %13, 1
  %188 = icmp eq i64 %187, 16
  br i1 %188, label %16, label %12

189:                                              ; preds = %189, %12
  %190 = phi i64 [ 0, %12 ], [ %213, %189 ]
  %191 = phi i32 [ %15, %12 ], [ %212, %189 ]
  %192 = icmp sgt i64 %190, %10
  %193 = trunc i64 %190 to i32
  %194 = select i1 %192, i32 %8, i32 %193
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i16, i16* %14, i64 %195
  %197 = load i16, i16* %196, align 2
  %198 = shl i16 %197, 3
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %190
  store i16 %198, i16* %199, align 2
  %200 = sext i16 %198 to i32
  %201 = add nsw i32 %191, %200
  %202 = or i64 %190, 1
  %203 = icmp slt i64 %190, %10
  %204 = trunc i64 %202 to i32
  %205 = select i1 %203, i32 %204, i32 %8
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i16, i16* %14, i64 %206
  %208 = load i16, i16* %207, align 2
  %209 = shl i16 %208, 3
  %210 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %202
  store i16 %209, i16* %210, align 2
  %211 = sext i16 %209 to i32
  %212 = add nsw i32 %201, %211
  %213 = add nuw nsw i64 %190, 2
  %214 = icmp eq i64 %213, 16
  br i1 %214, label %183, label %189
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %183, %5
  %13 = phi i64 [ 0, %5 ], [ %187, %183 ]
  %14 = phi i16* [ %6, %5 ], [ %186, %183 ]
  %15 = phi i32 [ 0, %5 ], [ %206, %183 ]
  br label %189

16:                                               ; preds = %183
  %17 = add nsw i32 %206, 128
  %18 = lshr i32 %17, 8
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i16> undef, i16 %19, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  %24 = bitcast [32 x i16]* %0 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 2
  %26 = sub <8 x i16> %25, %21
  %27 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %26, <8 x i16>* %27, align 2
  %28 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %29 = bitcast i16* %28 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 2
  %31 = sub <8 x i16> %30, %23
  %32 = bitcast i16* %28 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %32, align 2
  %33 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 2
  %36 = sub <8 x i16> %35, %21
  %37 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %37, align 2
  %38 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %39 = bitcast i16* %38 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 2
  %41 = sub <8 x i16> %40, %23
  %42 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> %41, <8 x i16>* %42, align 2
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2
  %46 = sub <8 x i16> %45, %21
  %47 = bitcast i16* %43 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2
  %51 = sub <8 x i16> %50, %23
  %52 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2
  %56 = sub <8 x i16> %55, %21
  %57 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2
  %61 = sub <8 x i16> %60, %23
  %62 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = sub <8 x i16> %65, %21
  %67 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2
  %71 = sub <8 x i16> %70, %23
  %72 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %72, align 2
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2
  %76 = sub <8 x i16> %75, %21
  %77 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 2
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2
  %81 = sub <8 x i16> %80, %23
  %82 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2
  %86 = sub <8 x i16> %85, %21
  %87 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %87, align 2
  %88 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = sub <8 x i16> %90, %23
  %92 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2
  %96 = sub <8 x i16> %95, %21
  %97 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2
  %101 = sub <8 x i16> %100, %23
  %102 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2
  %106 = sub <8 x i16> %105, %21
  %107 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2
  %111 = sub <8 x i16> %110, %23
  %112 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2
  %116 = sub <8 x i16> %115, %21
  %117 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2
  %121 = sub <8 x i16> %120, %23
  %122 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  %123 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2
  %126 = sub <8 x i16> %125, %21
  %127 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %127, align 2
  %128 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2
  %131 = sub <8 x i16> %130, %23
  %132 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %132, align 2
  %133 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2
  %136 = sub <8 x i16> %135, %21
  %137 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %137, align 2
  %138 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 8
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2
  %141 = sub <8 x i16> %140, %23
  %142 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %142, align 2
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2
  %146 = sub <8 x i16> %145, %21
  %147 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %147, align 2
  %148 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = sub <8 x i16> %150, %23
  %152 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2
  %156 = sub <8 x i16> %155, %21
  %157 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2
  %161 = sub <8 x i16> %160, %23
  %162 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = sub <8 x i16> %165, %21
  %167 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 8
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = sub <8 x i16> %170, %23
  %172 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2
  %176 = sub <8 x i16> %175, %21
  %177 = bitcast i16* %173 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2
  %181 = sub <8 x i16> %180, %23
  %182 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %182, align 2
  ret void

183:                                              ; preds = %189
  %184 = icmp slt i64 %13, %11
  %185 = getelementptr inbounds i16, i16* %14, i64 %7
  %186 = select i1 %184, i16* %185, i16* %14
  %187 = add nuw nsw i64 %13, 1
  %188 = icmp eq i64 %187, 16
  br i1 %188, label %16, label %12

189:                                              ; preds = %189, %12
  %190 = phi i64 [ 0, %12 ], [ %207, %189 ]
  %191 = phi i32 [ %15, %12 ], [ %206, %189 ]
  %192 = shl nuw i64 %190, 1
  %193 = icmp sgt i64 %192, %10
  %194 = trunc i64 %192 to i32
  %195 = select i1 %193, i32 %8, i32 %194
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i16, i16* %14, i64 %196
  %198 = load i16, i16* %197, align 2
  %199 = add nsw i64 %196, 1
  %200 = getelementptr inbounds i16, i16* %14, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = add i16 %201, %198
  %203 = shl i16 %202, 2
  %204 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %190
  store i16 %203, i16* %204, align 2
  %205 = sext i16 %203 to i32
  %206 = add nsw i32 %191, %205
  %207 = add nuw nsw i64 %190, 1
  %208 = icmp eq i64 %207, 16
  br i1 %208, label %183, label %189
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi16ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = sext i32 %8 to i64
  %12 = sext i32 %9 to i64
  br label %13

13:                                               ; preds = %184, %5
  %14 = phi i64 [ 0, %5 ], [ %189, %184 ]
  %15 = phi i16* [ %6, %5 ], [ %188, %184 ]
  %16 = phi i32 [ 0, %5 ], [ %216, %184 ]
  br label %191

17:                                               ; preds = %184
  %18 = add nsw i32 %216, 128
  %19 = lshr i32 %18, 8
  %20 = trunc i32 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = insertelement <8 x i16> undef, i16 %20, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  %25 = bitcast [32 x i16]* %0 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 2
  %27 = sub <8 x i16> %26, %22
  %28 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %27, <8 x i16>* %28, align 2
  %29 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2
  %32 = sub <8 x i16> %31, %24
  %33 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> %32, <8 x i16>* %33, align 2
  %34 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 2
  %37 = sub <8 x i16> %36, %22
  %38 = bitcast i16* %34 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 2
  %39 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 2
  %42 = sub <8 x i16> %41, %24
  %43 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 2
  %44 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %45 = bitcast i16* %44 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 2
  %47 = sub <8 x i16> %46, %22
  %48 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %48, align 2
  %49 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2
  %52 = sub <8 x i16> %51, %24
  %53 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %55 = bitcast i16* %54 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2
  %57 = sub <8 x i16> %56, %22
  %58 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %58, align 2
  %59 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  %62 = sub <8 x i16> %61, %24
  %63 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 2
  %64 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = sub <8 x i16> %66, %22
  %68 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 2
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = sub <8 x i16> %71, %24
  %73 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %73, align 2
  %74 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2
  %77 = sub <8 x i16> %76, %22
  %78 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2
  %82 = sub <8 x i16> %81, %24
  %83 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %83, align 2
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2
  %87 = sub <8 x i16> %86, %22
  %88 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %88, align 2
  %89 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2
  %92 = sub <8 x i16> %91, %24
  %93 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %93, align 2
  %94 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2
  %97 = sub <8 x i16> %96, %22
  %98 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2
  %102 = sub <8 x i16> %101, %24
  %103 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %103, align 2
  %104 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 0
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2
  %107 = sub <8 x i16> %106, %22
  %108 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 8, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2
  %112 = sub <8 x i16> %111, %24
  %113 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 0
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2
  %117 = sub <8 x i16> %116, %22
  %118 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 9, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 2
  %122 = sub <8 x i16> %121, %24
  %123 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 0
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2
  %127 = sub <8 x i16> %126, %22
  %128 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 10, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2
  %132 = sub <8 x i16> %131, %24
  %133 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 0
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 2
  %137 = sub <8 x i16> %136, %22
  %138 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 11, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2
  %142 = sub <8 x i16> %141, %24
  %143 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 0
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2
  %147 = sub <8 x i16> %146, %22
  %148 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 12, i64 8
  %150 = bitcast i16* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = sub <8 x i16> %151, %24
  %153 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 2
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 0
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2
  %157 = sub <8 x i16> %156, %22
  %158 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 13, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2
  %162 = sub <8 x i16> %161, %24
  %163 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %163, align 2
  %164 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 0
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = sub <8 x i16> %166, %22
  %168 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %168, align 2
  %169 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 14, i64 8
  %170 = bitcast i16* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 2
  %172 = sub <8 x i16> %171, %24
  %173 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 2
  %174 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 0
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 2
  %177 = sub <8 x i16> %176, %22
  %178 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %178, align 2
  %179 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 15, i64 8
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2
  %182 = sub <8 x i16> %181, %24
  %183 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %183, align 2
  ret void

184:                                              ; preds = %191
  %185 = shl nuw i64 %14, 1
  %186 = icmp slt i64 %185, %12
  %187 = getelementptr inbounds i16, i16* %15, i64 %10
  %188 = select i1 %186, i16* %187, i16* %15
  %189 = add nuw nsw i64 %14, 1
  %190 = icmp eq i64 %189, 16
  br i1 %190, label %17, label %13

191:                                              ; preds = %191, %13
  %192 = phi i64 [ 0, %13 ], [ %217, %191 ]
  %193 = phi i32 [ %16, %13 ], [ %216, %191 ]
  %194 = shl nuw i64 %192, 1
  %195 = icmp sgt i64 %194, %11
  %196 = trunc i64 %194 to i32
  %197 = select i1 %195, i32 %8, i32 %196
  %198 = sext i32 %197 to i64
  %199 = add nsw i64 %7, %198
  %200 = getelementptr inbounds i16, i16* %15, i64 %198
  %201 = load i16, i16* %200, align 2
  %202 = add nsw i64 %198, 1
  %203 = getelementptr inbounds i16, i16* %15, i64 %202
  %204 = load i16, i16* %203, align 2
  %205 = getelementptr inbounds i16, i16* %15, i64 %199
  %206 = load i16, i16* %205, align 2
  %207 = add nsw i64 %199, 1
  %208 = getelementptr inbounds i16, i16* %15, i64 %207
  %209 = load i16, i16* %208, align 2
  %210 = add i16 %204, %201
  %211 = add i16 %210, %206
  %212 = add i16 %211, %209
  %213 = shl i16 %212, 1
  %214 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %14, i64 %192
  store i16 %213, i16* %214, align 2
  %215 = sext i16 %213 to i32
  %216 = add nsw i32 %193, %215
  %217 = add nuw nsw i64 %192, 1
  %218 = icmp eq i64 %217, 16
  br i1 %218, label %184, label %191
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi16ELi32ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  %9 = and i64 %1, -2
  %10 = insertelement <8 x i32> undef, i32 %3, i32 0
  %11 = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> zeroinitializer
  %12 = insertelement <8 x i32> undef, i32 %7, i32 0
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %14

14:                                               ; preds = %63, %4
  %15 = phi i64 [ 0, %4 ], [ %65, %63 ]
  %16 = phi i16* [ %5, %4 ], [ %64, %63 ]
  %17 = mul i64 %9, %15
  %18 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 16
  %19 = bitcast i16* %18 to i8*
  %20 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %21 = bitcast i16* %20 to i8*
  %22 = add i64 %17, 32
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = getelementptr i8, i8* %0, i64 %17
  %25 = icmp ult i8* %24, %19
  %26 = icmp ugt i8* %23, %21
  %27 = and i1 %25, %26
  br i1 %27, label %67, label %28

28:                                               ; preds = %14
  %29 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !896
  %32 = sext <8 x i16> %31 to <8 x i32>
  %33 = mul nsw <8 x i32> %11, %32
  %34 = ashr <8 x i32> %33, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %35 = add <8 x i32> %33, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %36 = add <8 x i32> %35, %34
  %37 = ashr <8 x i32> %36, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %38 = add nsw <8 x i32> %37, %13
  %39 = icmp slt <8 x i32> %38, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %40 = select <8 x i1> %39, <8 x i32> %38, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %41 = icmp sgt <8 x i32> %40, zeroinitializer
  %42 = select <8 x i1> %41, <8 x i32> %40, <8 x i32> zeroinitializer
  %43 = trunc <8 x i32> %42 to <8 x i16>
  %44 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %44, align 2, !alias.scope !899, !noalias !896
  %45 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 8
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2, !alias.scope !896
  %48 = sext <8 x i16> %47 to <8 x i32>
  %49 = mul nsw <8 x i32> %11, %48
  %50 = ashr <8 x i32> %49, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %51 = add <8 x i32> %49, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %52 = add <8 x i32> %51, %50
  %53 = ashr <8 x i32> %52, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %54 = add nsw <8 x i32> %53, %13
  %55 = icmp slt <8 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = select <8 x i1> %55, <8 x i32> %54, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %57 = icmp sgt <8 x i32> %56, zeroinitializer
  %58 = select <8 x i1> %57, <8 x i32> %56, <8 x i32> zeroinitializer
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = getelementptr inbounds i16, i16* %16, i64 8
  %61 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %61, align 2, !alias.scope !899, !noalias !896
  br label %63

62:                                               ; preds = %63
  ret void

63:                                               ; preds = %67, %28
  %64 = getelementptr inbounds i16, i16* %16, i64 %8
  %65 = add nuw nsw i64 %15, 1
  %66 = icmp eq i64 %65, 32
  br i1 %66, label %62, label %14

67:                                               ; preds = %14, %67
  %68 = phi i64 [ %84, %67 ], [ 0, %14 ]
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %3
  %73 = ashr i32 %72, 31
  %74 = add i32 %72, 32
  %75 = add i32 %74, %73
  %76 = ashr i32 %75, 6
  %77 = add nsw i32 %76, %7
  %78 = icmp slt i32 %77, 1023
  %79 = select i1 %78, i32 %77, i32 1023
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %16, i64 %68
  store i16 %82, i16* %83, align 2
  %84 = add nuw nsw i64 %68, 1
  %85 = icmp eq i64 %84, 16
  br i1 %85, label %63, label %67, !llvm.loop !901
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %24, %5
  %13 = phi i64 [ 0, %5 ], [ %28, %24 ]
  %14 = phi i16* [ %6, %5 ], [ %27, %24 ]
  %15 = phi i32 [ 0, %5 ], [ %53, %24 ]
  br label %30

16:                                               ; preds = %24
  %17 = add nsw i32 %53, 256
  %18 = lshr i32 %17, 9
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i16> undef, i16 %19, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %56

24:                                               ; preds = %30
  %25 = icmp slt i64 %13, %11
  %26 = getelementptr inbounds i16, i16* %14, i64 %7
  %27 = select i1 %25, i16* %26, i16* %14
  %28 = add nuw nsw i64 %13, 1
  %29 = icmp eq i64 %28, 32
  br i1 %29, label %16, label %12

30:                                               ; preds = %30, %12
  %31 = phi i64 [ 0, %12 ], [ %54, %30 ]
  %32 = phi i32 [ %15, %12 ], [ %53, %30 ]
  %33 = icmp sgt i64 %31, %10
  %34 = trunc i64 %31 to i32
  %35 = select i1 %33, i32 %8, i32 %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %14, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = shl i16 %38, 3
  %40 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %31
  store i16 %39, i16* %40, align 2
  %41 = sext i16 %39 to i32
  %42 = add nsw i32 %32, %41
  %43 = or i64 %31, 1
  %44 = icmp slt i64 %31, %10
  %45 = trunc i64 %43 to i32
  %46 = select i1 %44, i32 %45, i32 %8
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %14, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = shl i16 %49, 3
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %43
  store i16 %50, i16* %51, align 2
  %52 = sext i16 %50 to i32
  %53 = add nsw i32 %42, %52
  %54 = add nuw nsw i64 %31, 2
  %55 = icmp eq i64 %54, 16
  br i1 %55, label %24, label %30

56:                                               ; preds = %56, %16
  %57 = phi i64 [ 0, %16 ], [ %79, %56 ]
  %58 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %57, i64 0
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2
  %61 = sub <8 x i16> %60, %21
  %62 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %57, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = sub <8 x i16> %65, %23
  %67 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %67, align 2
  %68 = or i64 %57, 1
  %69 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %68, i64 0
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = sub <8 x i16> %71, %21
  %73 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %73, align 2
  %74 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %68, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2
  %77 = sub <8 x i16> %76, %23
  %78 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %78, align 2
  %79 = add nuw nsw i64 %57, 2
  %80 = icmp eq i64 %79, 32
  br i1 %80, label %81, label %56

81:                                               ; preds = %56
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %24, %5
  %13 = phi i64 [ 0, %5 ], [ %28, %24 ]
  %14 = phi i16* [ %6, %5 ], [ %27, %24 ]
  %15 = phi i32 [ 0, %5 ], [ %47, %24 ]
  br label %30

16:                                               ; preds = %24
  %17 = add nsw i32 %47, 256
  %18 = lshr i32 %17, 9
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = insertelement <8 x i16> undef, i16 %19, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %50

24:                                               ; preds = %30
  %25 = icmp slt i64 %13, %11
  %26 = getelementptr inbounds i16, i16* %14, i64 %7
  %27 = select i1 %25, i16* %26, i16* %14
  %28 = add nuw nsw i64 %13, 1
  %29 = icmp eq i64 %28, 32
  br i1 %29, label %16, label %12

30:                                               ; preds = %30, %12
  %31 = phi i64 [ 0, %12 ], [ %48, %30 ]
  %32 = phi i32 [ %15, %12 ], [ %47, %30 ]
  %33 = shl nuw i64 %31, 1
  %34 = icmp sgt i64 %33, %10
  %35 = trunc i64 %33 to i32
  %36 = select i1 %34, i32 %8, i32 %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i16, i16* %14, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = add nsw i64 %37, 1
  %41 = getelementptr inbounds i16, i16* %14, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = add i16 %42, %39
  %44 = shl i16 %43, 2
  %45 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %31
  store i16 %44, i16* %45, align 2
  %46 = sext i16 %44 to i32
  %47 = add nsw i32 %32, %46
  %48 = add nuw nsw i64 %31, 1
  %49 = icmp eq i64 %48, 16
  br i1 %49, label %24, label %30

50:                                               ; preds = %50, %16
  %51 = phi i64 [ 0, %16 ], [ %73, %50 ]
  %52 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %51, i64 0
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2
  %55 = sub <8 x i16> %54, %21
  %56 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2
  %57 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %51, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2
  %60 = sub <8 x i16> %59, %23
  %61 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %61, align 2
  %62 = or i64 %51, 1
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %62, i64 0
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = sub <8 x i16> %65, %21
  %67 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %67, align 2
  %68 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %62, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2
  %71 = sub <8 x i16> %70, %23
  %72 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %72, align 2
  %73 = add nuw nsw i64 %51, 2
  %74 = icmp eq i64 %73, 32
  br i1 %74, label %75, label %50

75:                                               ; preds = %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi16ELi32ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = sext i32 %8 to i64
  %12 = sext i32 %9 to i64
  br label %13

13:                                               ; preds = %25, %5
  %14 = phi i64 [ 0, %5 ], [ %30, %25 ]
  %15 = phi i16* [ %6, %5 ], [ %29, %25 ]
  %16 = phi i32 [ 0, %5 ], [ %57, %25 ]
  br label %32

17:                                               ; preds = %25
  %18 = add nsw i32 %57, 256
  %19 = lshr i32 %18, 9
  %20 = trunc i32 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = insertelement <8 x i16> undef, i16 %20, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %60

25:                                               ; preds = %32
  %26 = shl nuw i64 %14, 1
  %27 = icmp slt i64 %26, %12
  %28 = getelementptr inbounds i16, i16* %15, i64 %10
  %29 = select i1 %27, i16* %28, i16* %15
  %30 = add nuw nsw i64 %14, 1
  %31 = icmp eq i64 %30, 32
  br i1 %31, label %17, label %13

32:                                               ; preds = %32, %13
  %33 = phi i64 [ 0, %13 ], [ %58, %32 ]
  %34 = phi i32 [ %16, %13 ], [ %57, %32 ]
  %35 = shl nuw i64 %33, 1
  %36 = icmp sgt i64 %35, %11
  %37 = trunc i64 %35 to i32
  %38 = select i1 %36, i32 %8, i32 %37
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %7, %39
  %41 = getelementptr inbounds i16, i16* %15, i64 %39
  %42 = load i16, i16* %41, align 2
  %43 = add nsw i64 %39, 1
  %44 = getelementptr inbounds i16, i16* %15, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds i16, i16* %15, i64 %40
  %47 = load i16, i16* %46, align 2
  %48 = add nsw i64 %40, 1
  %49 = getelementptr inbounds i16, i16* %15, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %45, %42
  %52 = add i16 %51, %47
  %53 = add i16 %52, %50
  %54 = shl i16 %53, 1
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %14, i64 %33
  store i16 %54, i16* %55, align 2
  %56 = sext i16 %54 to i32
  %57 = add nsw i32 %34, %56
  %58 = add nuw nsw i64 %33, 1
  %59 = icmp eq i64 %58, 16
  br i1 %59, label %25, label %32

60:                                               ; preds = %60, %17
  %61 = phi i64 [ 0, %17 ], [ %83, %60 ]
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 0
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2
  %65 = sub <8 x i16> %64, %22
  %66 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %66, align 2
  %67 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %61, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2
  %70 = sub <8 x i16> %69, %24
  %71 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %71, align 2
  %72 = or i64 %61, 1
  %73 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %72, i64 0
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2
  %76 = sub <8 x i16> %75, %22
  %77 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 2
  %78 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %72, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2
  %81 = sub <8 x i16> %80, %24
  %82 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %82, align 2
  %83 = add nuw nsw i64 %61, 2
  %84 = icmp eq i64 %83, 32
  br i1 %84, label %85, label %60

85:                                               ; preds = %60
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi8ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  %9 = and i64 %1, -2
  %10 = insertelement <8 x i32> undef, i32 %3, i32 0
  %11 = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> zeroinitializer
  %12 = insertelement <8 x i32> undef, i32 %7, i32 0
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %14

14:                                               ; preds = %98, %4
  %15 = phi i64 [ 0, %4 ], [ %100, %98 ]
  %16 = phi i16* [ %5, %4 ], [ %99, %98 ]
  %17 = mul i64 %9, %15
  %18 = add nuw i64 %15, 1
  %19 = getelementptr [32 x i16], [32 x i16]* %2, i64 %18, i64 0
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %22 = bitcast i16* %21 to i8*
  %23 = add i64 %17, 64
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = getelementptr i8, i8* %0, i64 %17
  %26 = icmp ult i8* %25, %20
  %27 = icmp ugt i8* %24, %22
  %28 = and i1 %26, %27
  br i1 %28, label %102, label %29

29:                                               ; preds = %14
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 2, !alias.scope !902
  %33 = sext <8 x i16> %32 to <8 x i32>
  %34 = mul nsw <8 x i32> %11, %33
  %35 = ashr <8 x i32> %34, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %36 = add <8 x i32> %34, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %37 = add <8 x i32> %36, %35
  %38 = ashr <8 x i32> %37, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %39 = add nsw <8 x i32> %38, %13
  %40 = icmp slt <8 x i32> %39, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %41 = select <8 x i1> %40, <8 x i32> %39, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = icmp sgt <8 x i32> %41, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i32> %41, <8 x i32> zeroinitializer
  %44 = trunc <8 x i32> %43 to <8 x i16>
  %45 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %45, align 2, !alias.scope !905, !noalias !902
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !902
  %49 = sext <8 x i16> %48 to <8 x i32>
  %50 = mul nsw <8 x i32> %11, %49
  %51 = ashr <8 x i32> %50, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %52 = add <8 x i32> %50, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %53 = add <8 x i32> %52, %51
  %54 = ashr <8 x i32> %53, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %55 = add nsw <8 x i32> %54, %13
  %56 = icmp slt <8 x i32> %55, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %57 = select <8 x i1> %56, <8 x i32> %55, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %58 = icmp sgt <8 x i32> %57, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i32> %57, <8 x i32> zeroinitializer
  %60 = trunc <8 x i32> %59 to <8 x i16>
  %61 = getelementptr inbounds i16, i16* %16, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %62, align 2, !alias.scope !905, !noalias !902
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 16
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !902
  %66 = sext <8 x i16> %65 to <8 x i32>
  %67 = mul nsw <8 x i32> %11, %66
  %68 = ashr <8 x i32> %67, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %69 = add <8 x i32> %67, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %70 = add <8 x i32> %69, %68
  %71 = ashr <8 x i32> %70, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %72 = add nsw <8 x i32> %71, %13
  %73 = icmp slt <8 x i32> %72, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %74 = select <8 x i1> %73, <8 x i32> %72, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %75 = icmp sgt <8 x i32> %74, zeroinitializer
  %76 = select <8 x i1> %75, <8 x i32> %74, <8 x i32> zeroinitializer
  %77 = trunc <8 x i32> %76 to <8 x i16>
  %78 = getelementptr inbounds i16, i16* %16, i64 16
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %79, align 2, !alias.scope !905, !noalias !902
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 24
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !902
  %83 = sext <8 x i16> %82 to <8 x i32>
  %84 = mul nsw <8 x i32> %11, %83
  %85 = ashr <8 x i32> %84, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %86 = add <8 x i32> %84, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %87 = add <8 x i32> %86, %85
  %88 = ashr <8 x i32> %87, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %89 = add nsw <8 x i32> %88, %13
  %90 = icmp slt <8 x i32> %89, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %91 = select <8 x i1> %90, <8 x i32> %89, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %92 = icmp sgt <8 x i32> %91, zeroinitializer
  %93 = select <8 x i1> %92, <8 x i32> %91, <8 x i32> zeroinitializer
  %94 = trunc <8 x i32> %93 to <8 x i16>
  %95 = getelementptr inbounds i16, i16* %16, i64 24
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %96, align 2, !alias.scope !905, !noalias !902
  br label %98

97:                                               ; preds = %98
  ret void

98:                                               ; preds = %102, %29
  %99 = getelementptr inbounds i16, i16* %16, i64 %8
  %100 = add nuw nsw i64 %15, 1
  %101 = icmp eq i64 %100, 8
  br i1 %101, label %97, label %14

102:                                              ; preds = %14, %102
  %103 = phi i64 [ %119, %102 ], [ 0, %14 ]
  %104 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = sext i16 %105 to i32
  %107 = mul nsw i32 %106, %3
  %108 = ashr i32 %107, 31
  %109 = add i32 %107, 32
  %110 = add i32 %109, %108
  %111 = ashr i32 %110, 6
  %112 = add nsw i32 %111, %7
  %113 = icmp slt i32 %112, 1023
  %114 = select i1 %113, i32 %112, i32 1023
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = trunc i32 %116 to i16
  %118 = getelementptr inbounds i16, i16* %16, i64 %103
  store i16 %117, i16* %118, align 2
  %119 = add nuw nsw i64 %103, 1
  %120 = icmp eq i64 %119, 32
  br i1 %120, label %98, label %102, !llvm.loop !907
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  br label %15

11:                                               ; preds = %15
  %12 = icmp sgt i32 %9, 0
  %13 = getelementptr inbounds i16, i16* %6, i64 %7
  %14 = select i1 %12, i16* %13, i16* %6
  br label %41

15:                                               ; preds = %15, %5
  %16 = phi i64 [ 0, %5 ], [ %39, %15 ]
  %17 = phi i32 [ 0, %5 ], [ %38, %15 ]
  %18 = icmp sgt i64 %16, %10
  %19 = trunc i64 %16 to i32
  %20 = select i1 %18, i32 %8, i32 %19
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16, i16* %6, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = shl i16 %23, 3
  %25 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %16
  store i16 %24, i16* %25, align 2
  %26 = sext i16 %24 to i32
  %27 = add nsw i32 %17, %26
  %28 = or i64 %16, 1
  %29 = icmp slt i64 %16, %10
  %30 = trunc i64 %28 to i32
  %31 = select i1 %29, i32 %30, i32 %8
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %6, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = shl i16 %34, 3
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 %28
  store i16 %35, i16* %36, align 2
  %37 = sext i16 %35 to i32
  %38 = add nsw i32 %27, %37
  %39 = add nuw nsw i64 %16, 2
  %40 = icmp eq i64 %39, 32
  br i1 %40, label %11, label %15

41:                                               ; preds = %41, %11
  %42 = phi i64 [ 0, %11 ], [ %65, %41 ]
  %43 = phi i32 [ %38, %11 ], [ %64, %41 ]
  %44 = icmp sgt i64 %42, %10
  %45 = trunc i64 %42 to i32
  %46 = select i1 %44, i32 %8, i32 %45
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %14, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = shl i16 %49, 3
  %51 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %42
  store i16 %50, i16* %51, align 2
  %52 = sext i16 %50 to i32
  %53 = add nsw i32 %43, %52
  %54 = or i64 %42, 1
  %55 = icmp slt i64 %42, %10
  %56 = trunc i64 %54 to i32
  %57 = select i1 %55, i32 %56, i32 %8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %14, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = shl i16 %60, 3
  %62 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 %54
  store i16 %61, i16* %62, align 2
  %63 = sext i16 %61 to i32
  %64 = add nsw i32 %53, %63
  %65 = add nuw nsw i64 %42, 2
  %66 = icmp eq i64 %65, 32
  br i1 %66, label %67, label %41

67:                                               ; preds = %41
  %68 = icmp sgt i32 %9, 1
  %69 = getelementptr inbounds i16, i16* %14, i64 %7
  %70 = select i1 %68, i16* %69, i16* %14
  br label %71

71:                                               ; preds = %71, %67
  %72 = phi i64 [ 0, %67 ], [ %95, %71 ]
  %73 = phi i32 [ %64, %67 ], [ %94, %71 ]
  %74 = icmp sgt i64 %72, %10
  %75 = trunc i64 %72 to i32
  %76 = select i1 %74, i32 %8, i32 %75
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i16, i16* %70, i64 %77
  %79 = load i16, i16* %78, align 2
  %80 = shl i16 %79, 3
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %72
  store i16 %80, i16* %81, align 2
  %82 = sext i16 %80 to i32
  %83 = add nsw i32 %73, %82
  %84 = or i64 %72, 1
  %85 = icmp slt i64 %72, %10
  %86 = trunc i64 %84 to i32
  %87 = select i1 %85, i32 %86, i32 %8
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i16, i16* %70, i64 %88
  %90 = load i16, i16* %89, align 2
  %91 = shl i16 %90, 3
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 %84
  store i16 %91, i16* %92, align 2
  %93 = sext i16 %91 to i32
  %94 = add nsw i32 %83, %93
  %95 = add nuw nsw i64 %72, 2
  %96 = icmp eq i64 %95, 32
  br i1 %96, label %97, label %71

97:                                               ; preds = %71
  %98 = icmp sgt i32 %9, 2
  %99 = getelementptr inbounds i16, i16* %70, i64 %7
  %100 = select i1 %98, i16* %99, i16* %70
  br label %101

101:                                              ; preds = %101, %97
  %102 = phi i64 [ 0, %97 ], [ %125, %101 ]
  %103 = phi i32 [ %94, %97 ], [ %124, %101 ]
  %104 = icmp sgt i64 %102, %10
  %105 = trunc i64 %102 to i32
  %106 = select i1 %104, i32 %8, i32 %105
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i16, i16* %100, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = shl i16 %109, 3
  %111 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %102
  store i16 %110, i16* %111, align 2
  %112 = sext i16 %110 to i32
  %113 = add nsw i32 %103, %112
  %114 = or i64 %102, 1
  %115 = icmp slt i64 %102, %10
  %116 = trunc i64 %114 to i32
  %117 = select i1 %115, i32 %116, i32 %8
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i16, i16* %100, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = shl i16 %120, 3
  %122 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 %114
  store i16 %121, i16* %122, align 2
  %123 = sext i16 %121 to i32
  %124 = add nsw i32 %113, %123
  %125 = add nuw nsw i64 %102, 2
  %126 = icmp eq i64 %125, 32
  br i1 %126, label %127, label %101

127:                                              ; preds = %101
  %128 = icmp sgt i32 %9, 3
  %129 = getelementptr inbounds i16, i16* %100, i64 %7
  %130 = select i1 %128, i16* %129, i16* %100
  br label %131

131:                                              ; preds = %131, %127
  %132 = phi i64 [ 0, %127 ], [ %155, %131 ]
  %133 = phi i32 [ %124, %127 ], [ %154, %131 ]
  %134 = icmp sgt i64 %132, %10
  %135 = trunc i64 %132 to i32
  %136 = select i1 %134, i32 %8, i32 %135
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i16, i16* %130, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = shl i16 %139, 3
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 %132
  store i16 %140, i16* %141, align 2
  %142 = sext i16 %140 to i32
  %143 = add nsw i32 %133, %142
  %144 = or i64 %132, 1
  %145 = icmp slt i64 %132, %10
  %146 = trunc i64 %144 to i32
  %147 = select i1 %145, i32 %146, i32 %8
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i16, i16* %130, i64 %148
  %150 = load i16, i16* %149, align 2
  %151 = shl i16 %150, 3
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 %144
  store i16 %151, i16* %152, align 2
  %153 = sext i16 %151 to i32
  %154 = add nsw i32 %143, %153
  %155 = add nuw nsw i64 %132, 2
  %156 = icmp eq i64 %155, 32
  br i1 %156, label %157, label %131

157:                                              ; preds = %131
  %158 = icmp sgt i32 %9, 4
  %159 = getelementptr inbounds i16, i16* %130, i64 %7
  %160 = select i1 %158, i16* %159, i16* %130
  br label %161

161:                                              ; preds = %161, %157
  %162 = phi i64 [ 0, %157 ], [ %185, %161 ]
  %163 = phi i32 [ %154, %157 ], [ %184, %161 ]
  %164 = icmp sgt i64 %162, %10
  %165 = trunc i64 %162 to i32
  %166 = select i1 %164, i32 %8, i32 %165
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i16, i16* %160, i64 %167
  %169 = load i16, i16* %168, align 2
  %170 = shl i16 %169, 3
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 %162
  store i16 %170, i16* %171, align 2
  %172 = sext i16 %170 to i32
  %173 = add nsw i32 %163, %172
  %174 = or i64 %162, 1
  %175 = icmp slt i64 %162, %10
  %176 = trunc i64 %174 to i32
  %177 = select i1 %175, i32 %176, i32 %8
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i16, i16* %160, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = shl i16 %180, 3
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 %174
  store i16 %181, i16* %182, align 2
  %183 = sext i16 %181 to i32
  %184 = add nsw i32 %173, %183
  %185 = add nuw nsw i64 %162, 2
  %186 = icmp eq i64 %185, 32
  br i1 %186, label %187, label %161

187:                                              ; preds = %161
  %188 = icmp sgt i32 %9, 5
  %189 = getelementptr inbounds i16, i16* %160, i64 %7
  %190 = select i1 %188, i16* %189, i16* %160
  br label %191

191:                                              ; preds = %191, %187
  %192 = phi i64 [ 0, %187 ], [ %215, %191 ]
  %193 = phi i32 [ %184, %187 ], [ %214, %191 ]
  %194 = icmp sgt i64 %192, %10
  %195 = trunc i64 %192 to i32
  %196 = select i1 %194, i32 %8, i32 %195
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i16, i16* %190, i64 %197
  %199 = load i16, i16* %198, align 2
  %200 = shl i16 %199, 3
  %201 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 %192
  store i16 %200, i16* %201, align 2
  %202 = sext i16 %200 to i32
  %203 = add nsw i32 %193, %202
  %204 = or i64 %192, 1
  %205 = icmp slt i64 %192, %10
  %206 = trunc i64 %204 to i32
  %207 = select i1 %205, i32 %206, i32 %8
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i16, i16* %190, i64 %208
  %210 = load i16, i16* %209, align 2
  %211 = shl i16 %210, 3
  %212 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 %204
  store i16 %211, i16* %212, align 2
  %213 = sext i16 %211 to i32
  %214 = add nsw i32 %203, %213
  %215 = add nuw nsw i64 %192, 2
  %216 = icmp eq i64 %215, 32
  br i1 %216, label %217, label %191

217:                                              ; preds = %191
  %218 = icmp sgt i32 %9, 6
  %219 = getelementptr inbounds i16, i16* %190, i64 %7
  %220 = select i1 %218, i16* %219, i16* %190
  br label %221

221:                                              ; preds = %221, %217
  %222 = phi i64 [ 0, %217 ], [ %245, %221 ]
  %223 = phi i32 [ %214, %217 ], [ %244, %221 ]
  %224 = icmp sgt i64 %222, %10
  %225 = trunc i64 %222 to i32
  %226 = select i1 %224, i32 %8, i32 %225
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds i16, i16* %220, i64 %227
  %229 = load i16, i16* %228, align 2
  %230 = shl i16 %229, 3
  %231 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 %222
  store i16 %230, i16* %231, align 2
  %232 = sext i16 %230 to i32
  %233 = add nsw i32 %223, %232
  %234 = or i64 %222, 1
  %235 = icmp slt i64 %222, %10
  %236 = trunc i64 %234 to i32
  %237 = select i1 %235, i32 %236, i32 %8
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i16, i16* %220, i64 %238
  %240 = load i16, i16* %239, align 2
  %241 = shl i16 %240, 3
  %242 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 %234
  store i16 %241, i16* %242, align 2
  %243 = sext i16 %241 to i32
  %244 = add nsw i32 %233, %243
  %245 = add nuw nsw i64 %222, 2
  %246 = icmp eq i64 %245, 32
  br i1 %246, label %247, label %221

247:                                              ; preds = %221
  %248 = add nsw i32 %244, 128
  %249 = lshr i32 %248, 8
  %250 = trunc i32 %249 to i16
  %251 = insertelement <8 x i16> undef, i16 %250, i32 0
  %252 = shufflevector <8 x i16> %251, <8 x i16> undef, <8 x i32> zeroinitializer
  %253 = bitcast [32 x i16]* %0 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2
  %255 = sub <8 x i16> %254, %252
  %256 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %256, align 2
  %257 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2
  %260 = sub <8 x i16> %259, %252
  %261 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %261, align 2
  %262 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %263 = bitcast i16* %262 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = sub <8 x i16> %264, %252
  %266 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %266, align 2
  %267 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 2
  %270 = sub <8 x i16> %269, %252
  %271 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %271, align 2
  %272 = insertelement <8 x i16> undef, i16 %250, i32 0
  %273 = shufflevector <8 x i16> %272, <8 x i16> undef, <8 x i32> zeroinitializer
  %274 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2
  %277 = sub <8 x i16> %276, %273
  %278 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %277, <8 x i16>* %278, align 2
  %279 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 2
  %282 = sub <8 x i16> %281, %273
  %283 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 2
  %284 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 16
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2
  %287 = sub <8 x i16> %286, %273
  %288 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %287, <8 x i16>* %288, align 2
  %289 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 24
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2
  %292 = sub <8 x i16> %291, %273
  %293 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %293, align 2
  %294 = insertelement <8 x i16> undef, i16 %250, i32 0
  %295 = shufflevector <8 x i16> %294, <8 x i16> undef, <8 x i32> zeroinitializer
  %296 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %297 = bitcast i16* %296 to <8 x i16>*
  %298 = load <8 x i16>, <8 x i16>* %297, align 2
  %299 = sub <8 x i16> %298, %295
  %300 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %299, <8 x i16>* %300, align 2
  %301 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 2
  %304 = sub <8 x i16> %303, %295
  %305 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %305, align 2
  %306 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 16
  %307 = bitcast i16* %306 to <8 x i16>*
  %308 = load <8 x i16>, <8 x i16>* %307, align 2
  %309 = sub <8 x i16> %308, %295
  %310 = bitcast i16* %306 to <8 x i16>*
  store <8 x i16> %309, <8 x i16>* %310, align 2
  %311 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 24
  %312 = bitcast i16* %311 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 2
  %314 = sub <8 x i16> %313, %295
  %315 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %314, <8 x i16>* %315, align 2
  %316 = insertelement <8 x i16> undef, i16 %250, i32 0
  %317 = shufflevector <8 x i16> %316, <8 x i16> undef, <8 x i32> zeroinitializer
  %318 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2
  %321 = sub <8 x i16> %320, %317
  %322 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %321, <8 x i16>* %322, align 2
  %323 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %324 = bitcast i16* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 2
  %326 = sub <8 x i16> %325, %317
  %327 = bitcast i16* %323 to <8 x i16>*
  store <8 x i16> %326, <8 x i16>* %327, align 2
  %328 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 16
  %329 = bitcast i16* %328 to <8 x i16>*
  %330 = load <8 x i16>, <8 x i16>* %329, align 2
  %331 = sub <8 x i16> %330, %317
  %332 = bitcast i16* %328 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %332, align 2
  %333 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 24
  %334 = bitcast i16* %333 to <8 x i16>*
  %335 = load <8 x i16>, <8 x i16>* %334, align 2
  %336 = sub <8 x i16> %335, %317
  %337 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %336, <8 x i16>* %337, align 2
  %338 = insertelement <8 x i16> undef, i16 %250, i32 0
  %339 = shufflevector <8 x i16> %338, <8 x i16> undef, <8 x i32> zeroinitializer
  %340 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2
  %343 = sub <8 x i16> %342, %339
  %344 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %343, <8 x i16>* %344, align 2
  %345 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2
  %348 = sub <8 x i16> %347, %339
  %349 = bitcast i16* %345 to <8 x i16>*
  store <8 x i16> %348, <8 x i16>* %349, align 2
  %350 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 16
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2
  %353 = sub <8 x i16> %352, %339
  %354 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %354, align 2
  %355 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 24
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2
  %358 = sub <8 x i16> %357, %339
  %359 = bitcast i16* %355 to <8 x i16>*
  store <8 x i16> %358, <8 x i16>* %359, align 2
  %360 = insertelement <8 x i16> undef, i16 %250, i32 0
  %361 = shufflevector <8 x i16> %360, <8 x i16> undef, <8 x i32> zeroinitializer
  %362 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %363 = bitcast i16* %362 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2
  %365 = sub <8 x i16> %364, %361
  %366 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %366, align 2
  %367 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %368 = bitcast i16* %367 to <8 x i16>*
  %369 = load <8 x i16>, <8 x i16>* %368, align 2
  %370 = sub <8 x i16> %369, %361
  %371 = bitcast i16* %367 to <8 x i16>*
  store <8 x i16> %370, <8 x i16>* %371, align 2
  %372 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 16
  %373 = bitcast i16* %372 to <8 x i16>*
  %374 = load <8 x i16>, <8 x i16>* %373, align 2
  %375 = sub <8 x i16> %374, %361
  %376 = bitcast i16* %372 to <8 x i16>*
  store <8 x i16> %375, <8 x i16>* %376, align 2
  %377 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 24
  %378 = bitcast i16* %377 to <8 x i16>*
  %379 = load <8 x i16>, <8 x i16>* %378, align 2
  %380 = sub <8 x i16> %379, %361
  %381 = bitcast i16* %377 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %381, align 2
  %382 = insertelement <8 x i16> undef, i16 %250, i32 0
  %383 = shufflevector <8 x i16> %382, <8 x i16> undef, <8 x i32> zeroinitializer
  %384 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2
  %387 = sub <8 x i16> %386, %383
  %388 = bitcast i16* %384 to <8 x i16>*
  store <8 x i16> %387, <8 x i16>* %388, align 2
  %389 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %390 = bitcast i16* %389 to <8 x i16>*
  %391 = load <8 x i16>, <8 x i16>* %390, align 2
  %392 = sub <8 x i16> %391, %383
  %393 = bitcast i16* %389 to <8 x i16>*
  store <8 x i16> %392, <8 x i16>* %393, align 2
  %394 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 16
  %395 = bitcast i16* %394 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2
  %397 = sub <8 x i16> %396, %383
  %398 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %397, <8 x i16>* %398, align 2
  %399 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 24
  %400 = bitcast i16* %399 to <8 x i16>*
  %401 = load <8 x i16>, <8 x i16>* %400, align 2
  %402 = sub <8 x i16> %401, %383
  %403 = bitcast i16* %399 to <8 x i16>*
  store <8 x i16> %402, <8 x i16>* %403, align 2
  %404 = insertelement <8 x i16> undef, i16 %250, i32 0
  %405 = shufflevector <8 x i16> %404, <8 x i16> undef, <8 x i32> zeroinitializer
  %406 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %407 = bitcast i16* %406 to <8 x i16>*
  %408 = load <8 x i16>, <8 x i16>* %407, align 2
  %409 = sub <8 x i16> %408, %405
  %410 = bitcast i16* %406 to <8 x i16>*
  store <8 x i16> %409, <8 x i16>* %410, align 2
  %411 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %412 = bitcast i16* %411 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 2
  %414 = sub <8 x i16> %413, %405
  %415 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %414, <8 x i16>* %415, align 2
  %416 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 16
  %417 = bitcast i16* %416 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2
  %419 = sub <8 x i16> %418, %405
  %420 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %419, <8 x i16>* %420, align 2
  %421 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 24
  %422 = bitcast i16* %421 to <8 x i16>*
  %423 = load <8 x i16>, <8 x i16>* %422, align 2
  %424 = sub <8 x i16> %423, %405
  %425 = bitcast i16* %421 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %425, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %195, %5
  %13 = phi i64 [ 0, %5 ], [ %199, %195 ]
  %14 = phi i16* [ %6, %5 ], [ %198, %195 ]
  %15 = phi i32 [ 0, %5 ], [ %218, %195 ]
  br label %201

16:                                               ; preds = %195
  %17 = add nsw i32 %218, 128
  %18 = lshr i32 %17, 8
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = bitcast [32 x i16]* %0 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 2
  %24 = sub <8 x i16> %23, %21
  %25 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %25, align 2
  %26 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  %29 = sub <8 x i16> %28, %21
  %30 = bitcast i16* %26 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 2
  %31 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 2
  %34 = sub <8 x i16> %33, %21
  %35 = bitcast i16* %31 to <8 x i16>*
  store <8 x i16> %34, <8 x i16>* %35, align 2
  %36 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2
  %39 = sub <8 x i16> %38, %21
  %40 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 2
  %41 = insertelement <8 x i16> undef, i16 %19, i32 0
  %42 = shufflevector <8 x i16> %41, <8 x i16> undef, <8 x i32> zeroinitializer
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2
  %46 = sub <8 x i16> %45, %42
  %47 = bitcast i16* %43 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2
  %51 = sub <8 x i16> %50, %42
  %52 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 2
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 16
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2
  %56 = sub <8 x i16> %55, %42
  %57 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2
  %58 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 24
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2
  %61 = sub <8 x i16> %60, %42
  %62 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %62, align 2
  %63 = insertelement <8 x i16> undef, i16 %19, i32 0
  %64 = shufflevector <8 x i16> %63, <8 x i16> undef, <8 x i32> zeroinitializer
  %65 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = sub <8 x i16> %67, %64
  %69 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2
  %73 = sub <8 x i16> %72, %64
  %74 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 16
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2
  %78 = sub <8 x i16> %77, %64
  %79 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %79, align 2
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 24
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2
  %83 = sub <8 x i16> %82, %64
  %84 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %84, align 2
  %85 = insertelement <8 x i16> undef, i16 %19, i32 0
  %86 = shufflevector <8 x i16> %85, <8 x i16> undef, <8 x i32> zeroinitializer
  %87 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2
  %90 = sub <8 x i16> %89, %86
  %91 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 2
  %92 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2
  %95 = sub <8 x i16> %94, %86
  %96 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 16
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2
  %100 = sub <8 x i16> %99, %86
  %101 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 2
  %102 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 24
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = sub <8 x i16> %104, %86
  %106 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %106, align 2
  %107 = insertelement <8 x i16> undef, i16 %19, i32 0
  %108 = shufflevector <8 x i16> %107, <8 x i16> undef, <8 x i32> zeroinitializer
  %109 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2
  %112 = sub <8 x i16> %111, %108
  %113 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2
  %117 = sub <8 x i16> %116, %108
  %118 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 16
  %120 = bitcast i16* %119 to <8 x i16>*
  %121 = load <8 x i16>, <8 x i16>* %120, align 2
  %122 = sub <8 x i16> %121, %108
  %123 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 24
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2
  %127 = sub <8 x i16> %126, %108
  %128 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %128, align 2
  %129 = insertelement <8 x i16> undef, i16 %19, i32 0
  %130 = shufflevector <8 x i16> %129, <8 x i16> undef, <8 x i32> zeroinitializer
  %131 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2
  %134 = sub <8 x i16> %133, %130
  %135 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %135, align 2
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2
  %139 = sub <8 x i16> %138, %130
  %140 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %140, align 2
  %141 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 16
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2
  %144 = sub <8 x i16> %143, %130
  %145 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %145, align 2
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 24
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2
  %149 = sub <8 x i16> %148, %130
  %150 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 2
  %151 = insertelement <8 x i16> undef, i16 %19, i32 0
  %152 = shufflevector <8 x i16> %151, <8 x i16> undef, <8 x i32> zeroinitializer
  %153 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2
  %156 = sub <8 x i16> %155, %152
  %157 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 2
  %158 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2
  %161 = sub <8 x i16> %160, %152
  %162 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 2
  %163 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 16
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = sub <8 x i16> %165, %152
  %167 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %167, align 2
  %168 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 24
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = sub <8 x i16> %170, %152
  %172 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2
  %173 = insertelement <8 x i16> undef, i16 %19, i32 0
  %174 = shufflevector <8 x i16> %173, <8 x i16> undef, <8 x i32> zeroinitializer
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2
  %178 = sub <8 x i16> %177, %174
  %179 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %179, align 2
  %180 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %181 = bitcast i16* %180 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 2
  %183 = sub <8 x i16> %182, %174
  %184 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 16
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2
  %188 = sub <8 x i16> %187, %174
  %189 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %189, align 2
  %190 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 24
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2
  %193 = sub <8 x i16> %192, %174
  %194 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %193, <8 x i16>* %194, align 2
  ret void

195:                                              ; preds = %201
  %196 = icmp slt i64 %13, %11
  %197 = getelementptr inbounds i16, i16* %14, i64 %7
  %198 = select i1 %196, i16* %197, i16* %14
  %199 = add nuw nsw i64 %13, 1
  %200 = icmp eq i64 %199, 8
  br i1 %200, label %16, label %12

201:                                              ; preds = %201, %12
  %202 = phi i64 [ 0, %12 ], [ %219, %201 ]
  %203 = phi i32 [ %15, %12 ], [ %218, %201 ]
  %204 = shl nuw i64 %202, 1
  %205 = icmp sgt i64 %204, %10
  %206 = trunc i64 %204 to i32
  %207 = select i1 %205, i32 %8, i32 %206
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i16, i16* %14, i64 %208
  %210 = load i16, i16* %209, align 2
  %211 = add nsw i64 %208, 1
  %212 = getelementptr inbounds i16, i16* %14, i64 %211
  %213 = load i16, i16* %212, align 2
  %214 = add i16 %213, %210
  %215 = shl i16 %214, 2
  %216 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %202
  store i16 %215, i16* %216, align 2
  %217 = sext i16 %215 to i32
  %218 = add nsw i32 %203, %217
  %219 = add nuw nsw i64 %202, 1
  %220 = icmp eq i64 %219, 32
  br i1 %220, label %195, label %201
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi8ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = sext i32 %8 to i64
  %12 = sext i32 %9 to i64
  br label %13

13:                                               ; preds = %196, %5
  %14 = phi i64 [ 0, %5 ], [ %201, %196 ]
  %15 = phi i16* [ %6, %5 ], [ %200, %196 ]
  %16 = phi i32 [ 0, %5 ], [ %228, %196 ]
  br label %203

17:                                               ; preds = %196
  %18 = add nsw i32 %228, 128
  %19 = lshr i32 %18, 8
  %20 = trunc i32 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast [32 x i16]* %0 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = sub <8 x i16> %24, %22
  %26 = bitcast [32 x i16]* %0 to <8 x i16>*
  store <8 x i16> %25, <8 x i16>* %26, align 2
  %27 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 8
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 2
  %30 = sub <8 x i16> %29, %22
  %31 = bitcast i16* %27 to <8 x i16>*
  store <8 x i16> %30, <8 x i16>* %31, align 2
  %32 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 16
  %33 = bitcast i16* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 2
  %35 = sub <8 x i16> %34, %22
  %36 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %36, align 2
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 0, i64 24
  %38 = bitcast i16* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 2
  %40 = sub <8 x i16> %39, %22
  %41 = bitcast i16* %37 to <8 x i16>*
  store <8 x i16> %40, <8 x i16>* %41, align 2
  %42 = insertelement <8 x i16> undef, i16 %20, i32 0
  %43 = shufflevector <8 x i16> %42, <8 x i16> undef, <8 x i32> zeroinitializer
  %44 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 0
  %45 = bitcast i16* %44 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 2
  %47 = sub <8 x i16> %46, %43
  %48 = bitcast i16* %44 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %48, align 2
  %49 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 8
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 2
  %52 = sub <8 x i16> %51, %43
  %53 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %53, align 2
  %54 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 16
  %55 = bitcast i16* %54 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2
  %57 = sub <8 x i16> %56, %43
  %58 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %58, align 2
  %59 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 1, i64 24
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  %62 = sub <8 x i16> %61, %43
  %63 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 2
  %64 = insertelement <8 x i16> undef, i16 %20, i32 0
  %65 = shufflevector <8 x i16> %64, <8 x i16> undef, <8 x i32> zeroinitializer
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 0
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = sub <8 x i16> %68, %65
  %70 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = sub <8 x i16> %73, %65
  %75 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 2
  %76 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 16
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2
  %79 = sub <8 x i16> %78, %65
  %80 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 2, i64 24
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2
  %84 = sub <8 x i16> %83, %65
  %85 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %85, align 2
  %86 = insertelement <8 x i16> undef, i16 %20, i32 0
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> zeroinitializer
  %88 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 0
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = sub <8 x i16> %90, %87
  %92 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2
  %96 = sub <8 x i16> %95, %87
  %97 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %97, align 2
  %98 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 16
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2
  %101 = sub <8 x i16> %100, %87
  %102 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 3, i64 24
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2
  %106 = sub <8 x i16> %105, %87
  %107 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = insertelement <8 x i16> undef, i16 %20, i32 0
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> zeroinitializer
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 0
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2
  %113 = sub <8 x i16> %112, %109
  %114 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2
  %118 = sub <8 x i16> %117, %109
  %119 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %119, align 2
  %120 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 16
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2
  %123 = sub <8 x i16> %122, %109
  %124 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %124, align 2
  %125 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 4, i64 24
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2
  %128 = sub <8 x i16> %127, %109
  %129 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 2
  %130 = insertelement <8 x i16> undef, i16 %20, i32 0
  %131 = shufflevector <8 x i16> %130, <8 x i16> undef, <8 x i32> zeroinitializer
  %132 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 0
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2
  %135 = sub <8 x i16> %134, %131
  %136 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %136, align 2
  %137 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2
  %140 = sub <8 x i16> %139, %131
  %141 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %141, align 2
  %142 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 16
  %143 = bitcast i16* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2
  %145 = sub <8 x i16> %144, %131
  %146 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %146, align 2
  %147 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 5, i64 24
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2
  %150 = sub <8 x i16> %149, %131
  %151 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %151, align 2
  %152 = insertelement <8 x i16> undef, i16 %20, i32 0
  %153 = shufflevector <8 x i16> %152, <8 x i16> undef, <8 x i32> zeroinitializer
  %154 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 0
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2
  %157 = sub <8 x i16> %156, %153
  %158 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2
  %162 = sub <8 x i16> %161, %153
  %163 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %163, align 2
  %164 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 16
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = sub <8 x i16> %166, %153
  %168 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %168, align 2
  %169 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 6, i64 24
  %170 = bitcast i16* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 2
  %172 = sub <8 x i16> %171, %153
  %173 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 2
  %174 = insertelement <8 x i16> undef, i16 %20, i32 0
  %175 = shufflevector <8 x i16> %174, <8 x i16> undef, <8 x i32> zeroinitializer
  %176 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 0
  %177 = bitcast i16* %176 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 2
  %179 = sub <8 x i16> %178, %175
  %180 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %180, align 2
  %181 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 8
  %182 = bitcast i16* %181 to <8 x i16>*
  %183 = load <8 x i16>, <8 x i16>* %182, align 2
  %184 = sub <8 x i16> %183, %175
  %185 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 2
  %186 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 16
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 2
  %189 = sub <8 x i16> %188, %175
  %190 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %189, <8 x i16>* %190, align 2
  %191 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 7, i64 24
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 2
  %194 = sub <8 x i16> %193, %175
  %195 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %195, align 2
  ret void

196:                                              ; preds = %203
  %197 = shl nuw i64 %14, 1
  %198 = icmp slt i64 %197, %12
  %199 = getelementptr inbounds i16, i16* %15, i64 %10
  %200 = select i1 %198, i16* %199, i16* %15
  %201 = add nuw nsw i64 %14, 1
  %202 = icmp eq i64 %201, 8
  br i1 %202, label %17, label %13

203:                                              ; preds = %203, %13
  %204 = phi i64 [ 0, %13 ], [ %229, %203 ]
  %205 = phi i32 [ %16, %13 ], [ %228, %203 ]
  %206 = shl nuw i64 %204, 1
  %207 = icmp sgt i64 %206, %11
  %208 = trunc i64 %206 to i32
  %209 = select i1 %207, i32 %8, i32 %208
  %210 = sext i32 %209 to i64
  %211 = add nsw i64 %7, %210
  %212 = getelementptr inbounds i16, i16* %15, i64 %210
  %213 = load i16, i16* %212, align 2
  %214 = add nsw i64 %210, 1
  %215 = getelementptr inbounds i16, i16* %15, i64 %214
  %216 = load i16, i16* %215, align 2
  %217 = getelementptr inbounds i16, i16* %15, i64 %211
  %218 = load i16, i16* %217, align 2
  %219 = add nsw i64 %211, 1
  %220 = getelementptr inbounds i16, i16* %15, i64 %219
  %221 = load i16, i16* %220, align 2
  %222 = add i16 %216, %213
  %223 = add i16 %222, %218
  %224 = add i16 %223, %221
  %225 = shl i16 %224, 1
  %226 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %14, i64 %204
  store i16 %225, i16* %226, align 2
  %227 = sext i16 %225 to i32
  %228 = add nsw i32 %205, %227
  %229 = add nuw nsw i64 %204, 1
  %230 = icmp eq i64 %229, 32
  br i1 %230, label %196, label %203
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi16ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  %9 = and i64 %1, -2
  %10 = insertelement <8 x i32> undef, i32 %3, i32 0
  %11 = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> zeroinitializer
  %12 = insertelement <8 x i32> undef, i32 %7, i32 0
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %14

14:                                               ; preds = %98, %4
  %15 = phi i64 [ 0, %4 ], [ %100, %98 ]
  %16 = phi i16* [ %5, %4 ], [ %99, %98 ]
  %17 = mul i64 %9, %15
  %18 = add nuw i64 %15, 1
  %19 = getelementptr [32 x i16], [32 x i16]* %2, i64 %18, i64 0
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %22 = bitcast i16* %21 to i8*
  %23 = add i64 %17, 64
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = getelementptr i8, i8* %0, i64 %17
  %26 = icmp ult i8* %25, %20
  %27 = icmp ugt i8* %24, %22
  %28 = and i1 %26, %27
  br i1 %28, label %102, label %29

29:                                               ; preds = %14
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 2, !alias.scope !908
  %33 = sext <8 x i16> %32 to <8 x i32>
  %34 = mul nsw <8 x i32> %11, %33
  %35 = ashr <8 x i32> %34, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %36 = add <8 x i32> %34, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %37 = add <8 x i32> %36, %35
  %38 = ashr <8 x i32> %37, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %39 = add nsw <8 x i32> %38, %13
  %40 = icmp slt <8 x i32> %39, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %41 = select <8 x i1> %40, <8 x i32> %39, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = icmp sgt <8 x i32> %41, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i32> %41, <8 x i32> zeroinitializer
  %44 = trunc <8 x i32> %43 to <8 x i16>
  %45 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %45, align 2, !alias.scope !911, !noalias !908
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !908
  %49 = sext <8 x i16> %48 to <8 x i32>
  %50 = mul nsw <8 x i32> %11, %49
  %51 = ashr <8 x i32> %50, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %52 = add <8 x i32> %50, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %53 = add <8 x i32> %52, %51
  %54 = ashr <8 x i32> %53, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %55 = add nsw <8 x i32> %54, %13
  %56 = icmp slt <8 x i32> %55, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %57 = select <8 x i1> %56, <8 x i32> %55, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %58 = icmp sgt <8 x i32> %57, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i32> %57, <8 x i32> zeroinitializer
  %60 = trunc <8 x i32> %59 to <8 x i16>
  %61 = getelementptr inbounds i16, i16* %16, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %62, align 2, !alias.scope !911, !noalias !908
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 16
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !908
  %66 = sext <8 x i16> %65 to <8 x i32>
  %67 = mul nsw <8 x i32> %11, %66
  %68 = ashr <8 x i32> %67, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %69 = add <8 x i32> %67, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %70 = add <8 x i32> %69, %68
  %71 = ashr <8 x i32> %70, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %72 = add nsw <8 x i32> %71, %13
  %73 = icmp slt <8 x i32> %72, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %74 = select <8 x i1> %73, <8 x i32> %72, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %75 = icmp sgt <8 x i32> %74, zeroinitializer
  %76 = select <8 x i1> %75, <8 x i32> %74, <8 x i32> zeroinitializer
  %77 = trunc <8 x i32> %76 to <8 x i16>
  %78 = getelementptr inbounds i16, i16* %16, i64 16
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %79, align 2, !alias.scope !911, !noalias !908
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 24
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !908
  %83 = sext <8 x i16> %82 to <8 x i32>
  %84 = mul nsw <8 x i32> %11, %83
  %85 = ashr <8 x i32> %84, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %86 = add <8 x i32> %84, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %87 = add <8 x i32> %86, %85
  %88 = ashr <8 x i32> %87, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %89 = add nsw <8 x i32> %88, %13
  %90 = icmp slt <8 x i32> %89, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %91 = select <8 x i1> %90, <8 x i32> %89, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %92 = icmp sgt <8 x i32> %91, zeroinitializer
  %93 = select <8 x i1> %92, <8 x i32> %91, <8 x i32> zeroinitializer
  %94 = trunc <8 x i32> %93 to <8 x i16>
  %95 = getelementptr inbounds i16, i16* %16, i64 24
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %96, align 2, !alias.scope !911, !noalias !908
  br label %98

97:                                               ; preds = %98
  ret void

98:                                               ; preds = %102, %29
  %99 = getelementptr inbounds i16, i16* %16, i64 %8
  %100 = add nuw nsw i64 %15, 1
  %101 = icmp eq i64 %100, 16
  br i1 %101, label %97, label %14

102:                                              ; preds = %14, %102
  %103 = phi i64 [ %119, %102 ], [ 0, %14 ]
  %104 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = sext i16 %105 to i32
  %107 = mul nsw i32 %106, %3
  %108 = ashr i32 %107, 31
  %109 = add i32 %107, 32
  %110 = add i32 %109, %108
  %111 = ashr i32 %110, 6
  %112 = add nsw i32 %111, %7
  %113 = icmp slt i32 %112, 1023
  %114 = select i1 %113, i32 %112, i32 1023
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = trunc i32 %116 to i16
  %118 = getelementptr inbounds i16, i16* %16, i64 %103
  store i16 %117, i16* %118, align 2
  %119 = add nuw nsw i64 %103, 1
  %120 = icmp eq i64 %119, 32
  br i1 %120, label %98, label %102, !llvm.loop !913
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %22, %5
  %13 = phi i64 [ 0, %5 ], [ %26, %22 ]
  %14 = phi i16* [ %6, %5 ], [ %25, %22 ]
  %15 = phi i32 [ 0, %5 ], [ %51, %22 ]
  br label %28

16:                                               ; preds = %22
  %17 = add nsw i32 %51, 256
  %18 = lshr i32 %17, 9
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %54

22:                                               ; preds = %28
  %23 = icmp slt i64 %13, %11
  %24 = getelementptr inbounds i16, i16* %14, i64 %7
  %25 = select i1 %23, i16* %24, i16* %14
  %26 = add nuw nsw i64 %13, 1
  %27 = icmp eq i64 %26, 16
  br i1 %27, label %16, label %12

28:                                               ; preds = %28, %12
  %29 = phi i64 [ 0, %12 ], [ %52, %28 ]
  %30 = phi i32 [ %15, %12 ], [ %51, %28 ]
  %31 = icmp sgt i64 %29, %10
  %32 = trunc i64 %29 to i32
  %33 = select i1 %31, i32 %8, i32 %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i16, i16* %14, i64 %34
  %36 = load i16, i16* %35, align 2
  %37 = shl i16 %36, 3
  %38 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %29
  store i16 %37, i16* %38, align 2
  %39 = sext i16 %37 to i32
  %40 = add nsw i32 %30, %39
  %41 = or i64 %29, 1
  %42 = icmp slt i64 %29, %10
  %43 = trunc i64 %41 to i32
  %44 = select i1 %42, i32 %43, i32 %8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i16, i16* %14, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = shl i16 %47, 3
  %49 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %41
  store i16 %48, i16* %49, align 2
  %50 = sext i16 %48 to i32
  %51 = add nsw i32 %40, %50
  %52 = add nuw nsw i64 %29, 2
  %53 = icmp eq i64 %52, 32
  br i1 %53, label %22, label %28

54:                                               ; preds = %16, %54
  %55 = phi i64 [ 0, %16 ], [ %76, %54 ]
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 0
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = sub <8 x i16> %58, %21
  %60 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2
  %64 = sub <8 x i16> %63, %21
  %65 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = sub <8 x i16> %68, %21
  %70 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 24
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = sub <8 x i16> %73, %21
  %75 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 2
  %76 = add nuw nsw i64 %55, 1
  %77 = icmp eq i64 %76, 16
  br i1 %77, label %78, label %54

78:                                               ; preds = %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %22, %5
  %13 = phi i64 [ 0, %5 ], [ %26, %22 ]
  %14 = phi i16* [ %6, %5 ], [ %25, %22 ]
  %15 = phi i32 [ 0, %5 ], [ %45, %22 ]
  br label %28

16:                                               ; preds = %22
  %17 = add nsw i32 %45, 256
  %18 = lshr i32 %17, 9
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %48

22:                                               ; preds = %28
  %23 = icmp slt i64 %13, %11
  %24 = getelementptr inbounds i16, i16* %14, i64 %7
  %25 = select i1 %23, i16* %24, i16* %14
  %26 = add nuw nsw i64 %13, 1
  %27 = icmp eq i64 %26, 16
  br i1 %27, label %16, label %12

28:                                               ; preds = %28, %12
  %29 = phi i64 [ 0, %12 ], [ %46, %28 ]
  %30 = phi i32 [ %15, %12 ], [ %45, %28 ]
  %31 = shl nuw i64 %29, 1
  %32 = icmp sgt i64 %31, %10
  %33 = trunc i64 %31 to i32
  %34 = select i1 %32, i32 %8, i32 %33
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %14, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = add nsw i64 %35, 1
  %39 = getelementptr inbounds i16, i16* %14, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = add i16 %40, %37
  %42 = shl i16 %41, 2
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %29
  store i16 %42, i16* %43, align 2
  %44 = sext i16 %42 to i32
  %45 = add nsw i32 %30, %44
  %46 = add nuw nsw i64 %29, 1
  %47 = icmp eq i64 %46, 32
  br i1 %47, label %22, label %28

48:                                               ; preds = %16, %48
  %49 = phi i64 [ 0, %16 ], [ %70, %48 ]
  %50 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 0
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2
  %53 = sub <8 x i16> %52, %21
  %54 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> %53, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 8
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2
  %58 = sub <8 x i16> %57, %21
  %59 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 16
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = sub <8 x i16> %62, %21
  %64 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 24
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = sub <8 x i16> %67, %21
  %69 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2
  %70 = add nuw nsw i64 %49, 1
  %71 = icmp eq i64 %70, 16
  br i1 %71, label %72, label %48

72:                                               ; preds = %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi16ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = sext i32 %8 to i64
  %12 = sext i32 %9 to i64
  br label %13

13:                                               ; preds = %23, %5
  %14 = phi i64 [ 0, %5 ], [ %28, %23 ]
  %15 = phi i16* [ %6, %5 ], [ %27, %23 ]
  %16 = phi i32 [ 0, %5 ], [ %55, %23 ]
  br label %30

17:                                               ; preds = %23
  %18 = add nsw i32 %55, 256
  %19 = lshr i32 %18, 9
  %20 = trunc i32 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %58

23:                                               ; preds = %30
  %24 = shl nuw i64 %14, 1
  %25 = icmp slt i64 %24, %12
  %26 = getelementptr inbounds i16, i16* %15, i64 %10
  %27 = select i1 %25, i16* %26, i16* %15
  %28 = add nuw nsw i64 %14, 1
  %29 = icmp eq i64 %28, 16
  br i1 %29, label %17, label %13

30:                                               ; preds = %30, %13
  %31 = phi i64 [ 0, %13 ], [ %56, %30 ]
  %32 = phi i32 [ %16, %13 ], [ %55, %30 ]
  %33 = shl nuw i64 %31, 1
  %34 = icmp sgt i64 %33, %11
  %35 = trunc i64 %33 to i32
  %36 = select i1 %34, i32 %8, i32 %35
  %37 = sext i32 %36 to i64
  %38 = add nsw i64 %7, %37
  %39 = getelementptr inbounds i16, i16* %15, i64 %37
  %40 = load i16, i16* %39, align 2
  %41 = add nsw i64 %37, 1
  %42 = getelementptr inbounds i16, i16* %15, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds i16, i16* %15, i64 %38
  %45 = load i16, i16* %44, align 2
  %46 = add nsw i64 %38, 1
  %47 = getelementptr inbounds i16, i16* %15, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = add i16 %43, %40
  %50 = add i16 %49, %45
  %51 = add i16 %50, %48
  %52 = shl i16 %51, 1
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %14, i64 %31
  store i16 %52, i16* %53, align 2
  %54 = sext i16 %52 to i32
  %55 = add nsw i32 %32, %54
  %56 = add nuw nsw i64 %31, 1
  %57 = icmp eq i64 %56, 32
  br i1 %57, label %23, label %30

58:                                               ; preds = %17, %58
  %59 = phi i64 [ 0, %17 ], [ %80, %58 ]
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 0
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = sub <8 x i16> %62, %22
  %64 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = sub <8 x i16> %67, %22
  %69 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 16
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2
  %73 = sub <8 x i16> %72, %22
  %74 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 24
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2
  %78 = sub <8 x i16> %77, %22
  %79 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %79, align 2
  %80 = add nuw nsw i64 %59, 1
  %81 = icmp eq i64 %80, 16
  br i1 %81, label %82, label %58

82:                                               ; preds = %58
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_119CflIntraPredictor_CILi32ELi32ELi10EtEEvPvlPA32_Ksi(i8* nocapture, i64, [32 x i16]* nocapture readonly, i32) #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = lshr i64 %1, 1
  %9 = and i64 %1, -2
  %10 = insertelement <8 x i32> undef, i32 %3, i32 0
  %11 = shufflevector <8 x i32> %10, <8 x i32> undef, <8 x i32> zeroinitializer
  %12 = insertelement <8 x i32> undef, i32 %7, i32 0
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %14

14:                                               ; preds = %98, %4
  %15 = phi i64 [ 0, %4 ], [ %100, %98 ]
  %16 = phi i16* [ %5, %4 ], [ %99, %98 ]
  %17 = mul i64 %9, %15
  %18 = add nuw i64 %15, 1
  %19 = getelementptr [32 x i16], [32 x i16]* %2, i64 %18, i64 0
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %22 = bitcast i16* %21 to i8*
  %23 = add i64 %17, 64
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = getelementptr i8, i8* %0, i64 %17
  %26 = icmp ult i8* %25, %20
  %27 = icmp ugt i8* %24, %22
  %28 = and i1 %26, %27
  br i1 %28, label %102, label %29

29:                                               ; preds = %14
  %30 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 0
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 2, !alias.scope !914
  %33 = sext <8 x i16> %32 to <8 x i32>
  %34 = mul nsw <8 x i32> %11, %33
  %35 = ashr <8 x i32> %34, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %36 = add <8 x i32> %34, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %37 = add <8 x i32> %36, %35
  %38 = ashr <8 x i32> %37, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %39 = add nsw <8 x i32> %38, %13
  %40 = icmp slt <8 x i32> %39, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %41 = select <8 x i1> %40, <8 x i32> %39, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = icmp sgt <8 x i32> %41, zeroinitializer
  %43 = select <8 x i1> %42, <8 x i32> %41, <8 x i32> zeroinitializer
  %44 = trunc <8 x i32> %43 to <8 x i16>
  %45 = bitcast i16* %16 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %45, align 2, !alias.scope !917, !noalias !914
  %46 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 8
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !914
  %49 = sext <8 x i16> %48 to <8 x i32>
  %50 = mul nsw <8 x i32> %11, %49
  %51 = ashr <8 x i32> %50, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %52 = add <8 x i32> %50, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %53 = add <8 x i32> %52, %51
  %54 = ashr <8 x i32> %53, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %55 = add nsw <8 x i32> %54, %13
  %56 = icmp slt <8 x i32> %55, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %57 = select <8 x i1> %56, <8 x i32> %55, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %58 = icmp sgt <8 x i32> %57, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i32> %57, <8 x i32> zeroinitializer
  %60 = trunc <8 x i32> %59 to <8 x i16>
  %61 = getelementptr inbounds i16, i16* %16, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %62, align 2, !alias.scope !917, !noalias !914
  %63 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 16
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !914
  %66 = sext <8 x i16> %65 to <8 x i32>
  %67 = mul nsw <8 x i32> %11, %66
  %68 = ashr <8 x i32> %67, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %69 = add <8 x i32> %67, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %70 = add <8 x i32> %69, %68
  %71 = ashr <8 x i32> %70, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %72 = add nsw <8 x i32> %71, %13
  %73 = icmp slt <8 x i32> %72, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %74 = select <8 x i1> %73, <8 x i32> %72, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %75 = icmp sgt <8 x i32> %74, zeroinitializer
  %76 = select <8 x i1> %75, <8 x i32> %74, <8 x i32> zeroinitializer
  %77 = trunc <8 x i32> %76 to <8 x i16>
  %78 = getelementptr inbounds i16, i16* %16, i64 16
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %79, align 2, !alias.scope !917, !noalias !914
  %80 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 24
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !914
  %83 = sext <8 x i16> %82 to <8 x i32>
  %84 = mul nsw <8 x i32> %11, %83
  %85 = ashr <8 x i32> %84, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %86 = add <8 x i32> %84, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %87 = add <8 x i32> %86, %85
  %88 = ashr <8 x i32> %87, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %89 = add nsw <8 x i32> %88, %13
  %90 = icmp slt <8 x i32> %89, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %91 = select <8 x i1> %90, <8 x i32> %89, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %92 = icmp sgt <8 x i32> %91, zeroinitializer
  %93 = select <8 x i1> %92, <8 x i32> %91, <8 x i32> zeroinitializer
  %94 = trunc <8 x i32> %93 to <8 x i16>
  %95 = getelementptr inbounds i16, i16* %16, i64 24
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %96, align 2, !alias.scope !917, !noalias !914
  br label %98

97:                                               ; preds = %98
  ret void

98:                                               ; preds = %102, %29
  %99 = getelementptr inbounds i16, i16* %16, i64 %8
  %100 = add nuw nsw i64 %15, 1
  %101 = icmp eq i64 %100, 32
  br i1 %101, label %97, label %14

102:                                              ; preds = %14, %102
  %103 = phi i64 [ %119, %102 ], [ 0, %14 ]
  %104 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 %15, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = sext i16 %105 to i32
  %107 = mul nsw i32 %106, %3
  %108 = ashr i32 %107, 31
  %109 = add i32 %107, 32
  %110 = add i32 %109, %108
  %111 = ashr i32 %110, 6
  %112 = add nsw i32 %111, %7
  %113 = icmp slt i32 %112, 1023
  %114 = select i1 %113, i32 %112, i32 1023
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = trunc i32 %116 to i16
  %118 = getelementptr inbounds i16, i16* %16, i64 %103
  store i16 %117, i16* %118, align 2
  %119 = add nuw nsw i64 %103, 1
  %120 = icmp eq i64 %119, 32
  br i1 %120, label %98, label %102, !llvm.loop !919
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi10EtLi0ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -1
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %22, %5
  %13 = phi i64 [ 0, %5 ], [ %26, %22 ]
  %14 = phi i16* [ %6, %5 ], [ %25, %22 ]
  %15 = phi i32 [ 0, %5 ], [ %51, %22 ]
  br label %28

16:                                               ; preds = %22
  %17 = add nsw i32 %51, 512
  %18 = lshr i32 %17, 10
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %54

22:                                               ; preds = %28
  %23 = icmp slt i64 %13, %11
  %24 = getelementptr inbounds i16, i16* %14, i64 %7
  %25 = select i1 %23, i16* %24, i16* %14
  %26 = add nuw nsw i64 %13, 1
  %27 = icmp eq i64 %26, 32
  br i1 %27, label %16, label %12

28:                                               ; preds = %28, %12
  %29 = phi i64 [ 0, %12 ], [ %52, %28 ]
  %30 = phi i32 [ %15, %12 ], [ %51, %28 ]
  %31 = icmp sgt i64 %29, %10
  %32 = trunc i64 %29 to i32
  %33 = select i1 %31, i32 %8, i32 %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i16, i16* %14, i64 %34
  %36 = load i16, i16* %35, align 2
  %37 = shl i16 %36, 3
  %38 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %29
  store i16 %37, i16* %38, align 2
  %39 = sext i16 %37 to i32
  %40 = add nsw i32 %30, %39
  %41 = or i64 %29, 1
  %42 = icmp slt i64 %29, %10
  %43 = trunc i64 %41 to i32
  %44 = select i1 %42, i32 %43, i32 %8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i16, i16* %14, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = shl i16 %47, 3
  %49 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %41
  store i16 %48, i16* %49, align 2
  %50 = sext i16 %48 to i32
  %51 = add nsw i32 %40, %50
  %52 = add nuw nsw i64 %29, 2
  %53 = icmp eq i64 %52, 32
  br i1 %53, label %22, label %28

54:                                               ; preds = %16, %54
  %55 = phi i64 [ 0, %16 ], [ %76, %54 ]
  %56 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 0
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = sub <8 x i16> %58, %21
  %60 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2
  %64 = sub <8 x i16> %63, %21
  %65 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2
  %66 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 16
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = sub <8 x i16> %68, %21
  %70 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %55, i64 24
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = sub <8 x i16> %73, %21
  %75 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %75, align 2
  %76 = add nuw nsw i64 %55, 1
  %77 = icmp eq i64 %76, 32
  br i1 %77, label %78, label %54

78:                                               ; preds = %54
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi10EtLi1ELi0EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -1
  %10 = sext i32 %8 to i64
  %11 = sext i32 %9 to i64
  br label %12

12:                                               ; preds = %22, %5
  %13 = phi i64 [ 0, %5 ], [ %26, %22 ]
  %14 = phi i16* [ %6, %5 ], [ %25, %22 ]
  %15 = phi i32 [ 0, %5 ], [ %45, %22 ]
  br label %28

16:                                               ; preds = %22
  %17 = add nsw i32 %45, 512
  %18 = lshr i32 %17, 10
  %19 = trunc i32 %18 to i16
  %20 = insertelement <8 x i16> undef, i16 %19, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %48

22:                                               ; preds = %28
  %23 = icmp slt i64 %13, %11
  %24 = getelementptr inbounds i16, i16* %14, i64 %7
  %25 = select i1 %23, i16* %24, i16* %14
  %26 = add nuw nsw i64 %13, 1
  %27 = icmp eq i64 %26, 32
  br i1 %27, label %16, label %12

28:                                               ; preds = %28, %12
  %29 = phi i64 [ 0, %12 ], [ %46, %28 ]
  %30 = phi i32 [ %15, %12 ], [ %45, %28 ]
  %31 = shl nuw i64 %29, 1
  %32 = icmp sgt i64 %31, %10
  %33 = trunc i64 %31 to i32
  %34 = select i1 %32, i32 %8, i32 %33
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %14, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = add nsw i64 %35, 1
  %39 = getelementptr inbounds i16, i16* %14, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = add i16 %40, %37
  %42 = shl i16 %41, 2
  %43 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %13, i64 %29
  store i16 %42, i16* %43, align 2
  %44 = sext i16 %42 to i32
  %45 = add nsw i32 %30, %44
  %46 = add nuw nsw i64 %29, 1
  %47 = icmp eq i64 %46, 32
  br i1 %47, label %22, label %28

48:                                               ; preds = %16, %48
  %49 = phi i64 [ 0, %16 ], [ %70, %48 ]
  %50 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 0
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2
  %53 = sub <8 x i16> %52, %21
  %54 = bitcast i16* %50 to <8 x i16>*
  store <8 x i16> %53, <8 x i16>* %54, align 2
  %55 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 8
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2
  %58 = sub <8 x i16> %57, %21
  %59 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 16
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = sub <8 x i16> %62, %21
  %64 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %49, i64 24
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = sub <8 x i16> %67, %21
  %69 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2
  %70 = add nuw nsw i64 %49, 1
  %71 = icmp eq i64 %70, 32
  br i1 %71, label %72, label %48

72:                                               ; preds = %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115CflSubsampler_CILi32ELi32ELi10EtLi1ELi1EEEvPA32_siiPKvl([32 x i16]* nocapture, i32, i32, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i16*
  %7 = lshr i64 %4, 1
  %8 = add nsw i32 %1, -2
  %9 = add nsw i32 %2, -2
  %10 = and i64 %4, -2
  %11 = sext i32 %8 to i64
  %12 = sext i32 %9 to i64
  br label %13

13:                                               ; preds = %23, %5
  %14 = phi i64 [ 0, %5 ], [ %28, %23 ]
  %15 = phi i16* [ %6, %5 ], [ %27, %23 ]
  %16 = phi i32 [ 0, %5 ], [ %55, %23 ]
  br label %30

17:                                               ; preds = %23
  %18 = add nsw i32 %55, 512
  %19 = lshr i32 %18, 10
  %20 = trunc i32 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %58

23:                                               ; preds = %30
  %24 = shl nuw i64 %14, 1
  %25 = icmp slt i64 %24, %12
  %26 = getelementptr inbounds i16, i16* %15, i64 %10
  %27 = select i1 %25, i16* %26, i16* %15
  %28 = add nuw nsw i64 %14, 1
  %29 = icmp eq i64 %28, 32
  br i1 %29, label %17, label %13

30:                                               ; preds = %30, %13
  %31 = phi i64 [ 0, %13 ], [ %56, %30 ]
  %32 = phi i32 [ %16, %13 ], [ %55, %30 ]
  %33 = shl nuw i64 %31, 1
  %34 = icmp sgt i64 %33, %11
  %35 = trunc i64 %33 to i32
  %36 = select i1 %34, i32 %8, i32 %35
  %37 = sext i32 %36 to i64
  %38 = add nsw i64 %7, %37
  %39 = getelementptr inbounds i16, i16* %15, i64 %37
  %40 = load i16, i16* %39, align 2
  %41 = add nsw i64 %37, 1
  %42 = getelementptr inbounds i16, i16* %15, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds i16, i16* %15, i64 %38
  %45 = load i16, i16* %44, align 2
  %46 = add nsw i64 %38, 1
  %47 = getelementptr inbounds i16, i16* %15, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = add i16 %43, %40
  %50 = add i16 %49, %45
  %51 = add i16 %50, %48
  %52 = shl i16 %51, 1
  %53 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %14, i64 %31
  store i16 %52, i16* %53, align 2
  %54 = sext i16 %52 to i32
  %55 = add nsw i32 %32, %54
  %56 = add nuw nsw i64 %31, 1
  %57 = icmp eq i64 %56, 32
  br i1 %57, label %23, label %30

58:                                               ; preds = %17, %58
  %59 = phi i64 [ 0, %17 ], [ %80, %58 ]
  %60 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 0
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = sub <8 x i16> %62, %22
  %64 = bitcast i16* %60 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = sub <8 x i16> %67, %22
  %69 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2
  %70 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 16
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2
  %73 = sub <8 x i16> %72, %22
  %74 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds [32 x i16], [32 x i16]* %0, i64 %59, i64 24
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2
  %78 = sub <8 x i16> %77, %22
  %79 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %79, align 2
  %80 = add nuw nsw i64 %59, 1
  %81 = icmp eq i64 %80, 32
  br i1 %81, label %82, label %58

82:                                               ; preds = %58
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = !{!16}
!16 = distinct !{!16, !12}
!17 = !{!11, !14}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.isvectorized", i32 1}
!20 = distinct !{!20, !19}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = !{!27}
!27 = distinct !{!27, !23}
!28 = !{!22, !25}
!29 = distinct !{!29, !19}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = !{!36}
!36 = distinct !{!36, !32}
!37 = !{!31, !34}
!38 = distinct !{!38, !19}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !19}
!50 = distinct !{!50, !19}
!51 = !{!52}
!52 = distinct !{!52, !53}
!53 = distinct !{!53, !"LVerDomain"}
!54 = !{!55}
!55 = distinct !{!55, !53}
!56 = distinct !{!56, !19}
!57 = !{!58}
!58 = distinct !{!58, !59}
!59 = distinct !{!59, !"LVerDomain"}
!60 = !{!61}
!61 = distinct !{!61, !59}
!62 = distinct !{!62, !19}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = !{!69}
!69 = distinct !{!69, !65}
!70 = !{!64, !67}
!71 = distinct !{!71, !19}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76}
!76 = distinct !{!76, !74}
!77 = !{!78}
!78 = distinct !{!78, !79}
!79 = distinct !{!79, !"LVerDomain"}
!80 = !{!81}
!81 = distinct !{!81, !79}
!82 = distinct !{!82, !19}
!83 = distinct !{!83, !19}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !19}
!90 = !{!91}
!91 = distinct !{!91, !92}
!92 = distinct !{!92, !"LVerDomain"}
!93 = !{!94}
!94 = distinct !{!94, !92}
!95 = distinct !{!95, !19}
!96 = !{!97}
!97 = distinct !{!97, !98}
!98 = distinct !{!98, !"LVerDomain"}
!99 = !{!100}
!100 = distinct !{!100, !98}
!101 = distinct !{!101, !19}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !19}
!108 = !{!109}
!109 = distinct !{!109, !110}
!110 = distinct !{!110, !"LVerDomain"}
!111 = !{!112}
!112 = distinct !{!112, !110}
!113 = distinct !{!113, !19}
!114 = !{!115}
!115 = distinct !{!115, !116}
!116 = distinct !{!116, !"LVerDomain"}
!117 = !{!118}
!118 = distinct !{!118, !116}
!119 = distinct !{!119, !19}
!120 = !{!121}
!121 = distinct !{!121, !122}
!122 = distinct !{!122, !"LVerDomain"}
!123 = !{!124}
!124 = distinct !{!124, !122}
!125 = !{!126}
!126 = distinct !{!126, !122}
!127 = !{!121, !124}
!128 = distinct !{!128, !19}
!129 = !{!130}
!130 = distinct !{!130, !131}
!131 = distinct !{!131, !"LVerDomain"}
!132 = !{!133}
!133 = distinct !{!133, !131}
!134 = distinct !{!134, !19}
!135 = !{!136}
!136 = distinct !{!136, !137}
!137 = distinct !{!137, !"LVerDomain"}
!138 = !{!139}
!139 = distinct !{!139, !137}
!140 = !{!141}
!141 = distinct !{!141, !137}
!142 = !{!136, !139}
!143 = distinct !{!143, !19}
!144 = !{!145}
!145 = distinct !{!145, !146}
!146 = distinct !{!146, !"LVerDomain"}
!147 = !{!148}
!148 = distinct !{!148, !146}
!149 = distinct !{!149, !19}
!150 = !{!151}
!151 = distinct !{!151, !152}
!152 = distinct !{!152, !"LVerDomain"}
!153 = !{!154}
!154 = distinct !{!154, !152}
!155 = !{!156}
!156 = distinct !{!156, !152}
!157 = !{!151, !154}
!158 = distinct !{!158, !19}
!159 = !{!160}
!160 = distinct !{!160, !161}
!161 = distinct !{!161, !"LVerDomain"}
!162 = !{!163}
!163 = distinct !{!163, !161}
!164 = distinct !{!164, !19}
!165 = !{!166}
!166 = distinct !{!166, !167}
!167 = distinct !{!167, !"LVerDomain"}
!168 = !{!169}
!169 = distinct !{!169, !167}
!170 = !{!171}
!171 = distinct !{!171, !167}
!172 = !{!166, !169}
!173 = distinct !{!173, !19}
!174 = !{!175}
!175 = distinct !{!175, !176}
!176 = distinct !{!176, !"LVerDomain"}
!177 = !{!178}
!178 = distinct !{!178, !176}
!179 = !{!180}
!180 = distinct !{!180, !181}
!181 = distinct !{!181, !"LVerDomain"}
!182 = !{!183}
!183 = distinct !{!183, !181}
!184 = distinct !{!184, !19}
!185 = distinct !{!185, !19}
!186 = !{!187}
!187 = distinct !{!187, !188}
!188 = distinct !{!188, !"LVerDomain"}
!189 = !{!190}
!190 = distinct !{!190, !188}
!191 = distinct !{!191, !19}
!192 = !{!193}
!193 = distinct !{!193, !194}
!194 = distinct !{!194, !"LVerDomain"}
!195 = !{!196}
!196 = distinct !{!196, !194}
!197 = distinct !{!197, !19}
!198 = !{!199}
!199 = distinct !{!199, !200}
!200 = distinct !{!200, !"LVerDomain"}
!201 = !{!202}
!202 = distinct !{!202, !200}
!203 = distinct !{!203, !19}
!204 = !{!205}
!205 = distinct !{!205, !206}
!206 = distinct !{!206, !"LVerDomain"}
!207 = !{!208}
!208 = distinct !{!208, !206}
!209 = distinct !{!209, !19}
!210 = !{!211}
!211 = distinct !{!211, !212}
!212 = distinct !{!212, !"LVerDomain"}
!213 = !{!214}
!214 = distinct !{!214, !212}
!215 = distinct !{!215, !19}
!216 = !{!217}
!217 = distinct !{!217, !218}
!218 = distinct !{!218, !"LVerDomain"}
!219 = !{!220}
!220 = distinct !{!220, !218}
!221 = distinct !{!221, !19}
!222 = !{!223}
!223 = distinct !{!223, !224}
!224 = distinct !{!224, !"LVerDomain"}
!225 = !{!226}
!226 = distinct !{!226, !224}
!227 = !{!228}
!228 = distinct !{!228, !229}
!229 = distinct !{!229, !"LVerDomain"}
!230 = !{!231}
!231 = distinct !{!231, !229}
!232 = distinct !{!232, !19}
!233 = distinct !{!233, !19}
!234 = !{!235}
!235 = distinct !{!235, !236}
!236 = distinct !{!236, !"LVerDomain"}
!237 = !{!238}
!238 = distinct !{!238, !236}
!239 = distinct !{!239, !19}
!240 = !{!241}
!241 = distinct !{!241, !242}
!242 = distinct !{!242, !"LVerDomain"}
!243 = !{!244}
!244 = distinct !{!244, !242}
!245 = distinct !{!245, !19}
!246 = !{!247}
!247 = distinct !{!247, !248}
!248 = distinct !{!248, !"LVerDomain"}
!249 = !{!250}
!250 = distinct !{!250, !248}
!251 = distinct !{!251, !19}
!252 = !{!253}
!253 = distinct !{!253, !254}
!254 = distinct !{!254, !"LVerDomain"}
!255 = !{!256}
!256 = distinct !{!256, !254}
!257 = distinct !{!257, !19}
!258 = !{!259}
!259 = distinct !{!259, !260}
!260 = distinct !{!260, !"LVerDomain"}
!261 = !{!262}
!262 = distinct !{!262, !260}
!263 = distinct !{!263, !19}
!264 = !{!265}
!265 = distinct !{!265, !266}
!266 = distinct !{!266, !"LVerDomain"}
!267 = !{!268}
!268 = distinct !{!268, !266}
!269 = distinct !{!269, !19}
!270 = !{!271}
!271 = distinct !{!271, !272}
!272 = distinct !{!272, !"LVerDomain"}
!273 = !{!274}
!274 = distinct !{!274, !272}
!275 = !{!276}
!276 = distinct !{!276, !272}
!277 = !{!271, !274}
!278 = distinct !{!278, !19}
!279 = !{!280}
!280 = distinct !{!280, !281}
!281 = distinct !{!281, !"LVerDomain"}
!282 = !{!283}
!283 = distinct !{!283, !281}
!284 = distinct !{!284, !19}
!285 = !{!286}
!286 = distinct !{!286, !287}
!287 = distinct !{!287, !"LVerDomain"}
!288 = !{!289}
!289 = distinct !{!289, !287}
!290 = distinct !{!290, !19}
!291 = !{!292}
!292 = distinct !{!292, !293}
!293 = distinct !{!293, !"LVerDomain"}
!294 = !{!295}
!295 = distinct !{!295, !293}
!296 = !{!297}
!297 = distinct !{!297, !293}
!298 = !{!292, !295}
!299 = distinct !{!299, !19}
!300 = !{!301}
!301 = distinct !{!301, !302}
!302 = distinct !{!302, !"LVerDomain"}
!303 = !{!304}
!304 = distinct !{!304, !302}
!305 = distinct !{!305, !19}
!306 = !{!307}
!307 = distinct !{!307, !308}
!308 = distinct !{!308, !"LVerDomain"}
!309 = !{!310}
!310 = distinct !{!310, !308}
!311 = distinct !{!311, !19}
!312 = !{!313}
!313 = distinct !{!313, !314}
!314 = distinct !{!314, !"LVerDomain"}
!315 = !{!316}
!316 = distinct !{!316, !314}
!317 = !{!318}
!318 = distinct !{!318, !314}
!319 = !{!313, !316}
!320 = distinct !{!320, !19}
!321 = !{!322}
!322 = distinct !{!322, !323}
!323 = distinct !{!323, !"LVerDomain"}
!324 = !{!325}
!325 = distinct !{!325, !323}
!326 = distinct !{!326, !19}
!327 = !{!328}
!328 = distinct !{!328, !329}
!329 = distinct !{!329, !"LVerDomain"}
!330 = !{!331}
!331 = distinct !{!331, !329}
!332 = distinct !{!332, !19}
!333 = !{!334}
!334 = distinct !{!334, !335}
!335 = distinct !{!335, !"LVerDomain"}
!336 = !{!337}
!337 = distinct !{!337, !335}
!338 = !{!339}
!339 = distinct !{!339, !335}
!340 = !{!334, !337}
!341 = distinct !{!341, !19}
!342 = !{!343}
!343 = distinct !{!343, !344}
!344 = distinct !{!344, !"LVerDomain"}
!345 = !{!346}
!346 = distinct !{!346, !344}
!347 = distinct !{!347, !19}
!348 = !{!349}
!349 = distinct !{!349, !350}
!350 = distinct !{!350, !"LVerDomain"}
!351 = !{!352}
!352 = distinct !{!352, !350}
!353 = distinct !{!353, !19}
!354 = !{!355}
!355 = distinct !{!355, !356}
!356 = distinct !{!356, !"LVerDomain"}
!357 = !{!358}
!358 = distinct !{!358, !356}
!359 = !{!360}
!360 = distinct !{!360, !356}
!361 = !{!355, !358}
!362 = distinct !{!362, !19}
!363 = !{!364}
!364 = distinct !{!364, !365}
!365 = distinct !{!365, !"LVerDomain"}
!366 = !{!367}
!367 = distinct !{!367, !365}
!368 = distinct !{!368, !19}
!369 = !{!370}
!370 = distinct !{!370, !371}
!371 = distinct !{!371, !"LVerDomain"}
!372 = !{!373}
!373 = distinct !{!373, !371}
!374 = distinct !{!374, !19}
!375 = !{!376}
!376 = distinct !{!376, !377}
!377 = distinct !{!377, !"LVerDomain"}
!378 = !{!379}
!379 = distinct !{!379, !377}
!380 = !{!381}
!381 = distinct !{!381, !377}
!382 = !{!376, !379}
!383 = distinct !{!383, !19}
!384 = !{!385}
!385 = distinct !{!385, !386}
!386 = distinct !{!386, !"LVerDomain"}
!387 = !{!388}
!388 = distinct !{!388, !386}
!389 = distinct !{!389, !19}
!390 = !{!391}
!391 = distinct !{!391, !392}
!392 = distinct !{!392, !"LVerDomain"}
!393 = !{!394}
!394 = distinct !{!394, !392}
!395 = distinct !{!395, !19}
!396 = distinct !{!396, !397}
!397 = !{!"llvm.loop.unroll.disable"}
!398 = distinct !{!398, !397}
!399 = !{!400}
!400 = distinct !{!400, !401}
!401 = distinct !{!401, !"LVerDomain"}
!402 = !{!403}
!403 = distinct !{!403, !401}
!404 = !{!405}
!405 = distinct !{!405, !406}
!406 = distinct !{!406, !"LVerDomain"}
!407 = !{!408}
!408 = distinct !{!408, !406}
!409 = distinct !{!409, !19}
!410 = distinct !{!410, !19}
!411 = !{!412}
!412 = distinct !{!412, !413}
!413 = distinct !{!413, !"LVerDomain"}
!414 = !{!415}
!415 = distinct !{!415, !413}
!416 = distinct !{!416, !19}
!417 = !{!418}
!418 = distinct !{!418, !419}
!419 = distinct !{!419, !"LVerDomain"}
!420 = !{!421}
!421 = distinct !{!421, !419}
!422 = distinct !{!422, !19}
!423 = !{!424}
!424 = distinct !{!424, !425}
!425 = distinct !{!425, !"LVerDomain"}
!426 = !{!427}
!427 = distinct !{!427, !425}
!428 = distinct !{!428, !19}
!429 = !{!430}
!430 = distinct !{!430, !431}
!431 = distinct !{!431, !"LVerDomain"}
!432 = !{!433}
!433 = distinct !{!433, !431}
!434 = distinct !{!434, !19}
!435 = !{!436}
!436 = distinct !{!436, !437}
!437 = distinct !{!437, !"LVerDomain"}
!438 = !{!439}
!439 = distinct !{!439, !437}
!440 = distinct !{!440, !19}
!441 = !{!442}
!442 = distinct !{!442, !443}
!443 = distinct !{!443, !"LVerDomain"}
!444 = !{!445}
!445 = distinct !{!445, !443}
!446 = distinct !{!446, !19}
!447 = !{!448}
!448 = distinct !{!448, !449}
!449 = distinct !{!449, !"LVerDomain"}
!450 = !{!451}
!451 = distinct !{!451, !449}
!452 = distinct !{!452, !19}
!453 = !{!454}
!454 = distinct !{!454, !455}
!455 = distinct !{!455, !"LVerDomain"}
!456 = !{!457}
!457 = distinct !{!457, !455}
!458 = distinct !{!458, !19}
!459 = !{!460}
!460 = distinct !{!460, !461}
!461 = distinct !{!461, !"LVerDomain"}
!462 = !{!463}
!463 = distinct !{!463, !461}
!464 = !{!465}
!465 = distinct !{!465, !461}
!466 = !{!460, !463}
!467 = !{!468}
!468 = distinct !{!468, !469}
!469 = distinct !{!469, !"LVerDomain"}
!470 = !{!471}
!471 = distinct !{!471, !469}
!472 = !{!473}
!473 = distinct !{!473, !469}
!474 = !{!468, !471}
!475 = distinct !{!475, !19}
!476 = distinct !{!476, !19}
!477 = !{!478}
!478 = distinct !{!478, !479}
!479 = distinct !{!479, !"LVerDomain"}
!480 = !{!481}
!481 = distinct !{!481, !479}
!482 = !{!483}
!483 = distinct !{!483, !479}
!484 = !{!478, !481}
!485 = distinct !{!485, !19}
!486 = !{!487}
!487 = distinct !{!487, !488}
!488 = distinct !{!488, !"LVerDomain"}
!489 = !{!490}
!490 = distinct !{!490, !488}
!491 = !{!492}
!492 = distinct !{!492, !488}
!493 = !{!487, !490}
!494 = distinct !{!494, !19}
!495 = !{!496}
!496 = distinct !{!496, !497}
!497 = distinct !{!497, !"LVerDomain"}
!498 = !{!499}
!499 = distinct !{!499, !497}
!500 = !{!501}
!501 = distinct !{!501, !502}
!502 = distinct !{!502, !"LVerDomain"}
!503 = !{!504}
!504 = distinct !{!504, !502}
!505 = distinct !{!505, !19}
!506 = distinct !{!506, !19}
!507 = !{!508}
!508 = distinct !{!508, !509}
!509 = distinct !{!509, !"LVerDomain"}
!510 = !{!511}
!511 = distinct !{!511, !509}
!512 = distinct !{!512, !19}
!513 = !{!514}
!514 = distinct !{!514, !515}
!515 = distinct !{!515, !"LVerDomain"}
!516 = !{!517}
!517 = distinct !{!517, !515}
!518 = distinct !{!518, !19}
!519 = !{!520}
!520 = distinct !{!520, !521}
!521 = distinct !{!521, !"LVerDomain"}
!522 = !{!523}
!523 = distinct !{!523, !521}
!524 = !{!525}
!525 = distinct !{!525, !521}
!526 = !{!520, !523}
!527 = distinct !{!527, !19}
!528 = !{!529}
!529 = distinct !{!529, !530}
!530 = distinct !{!530, !"LVerDomain"}
!531 = !{!532}
!532 = distinct !{!532, !530}
!533 = !{!534}
!534 = distinct !{!534, !535}
!535 = distinct !{!535, !"LVerDomain"}
!536 = !{!537}
!537 = distinct !{!537, !535}
!538 = distinct !{!538, !19}
!539 = distinct !{!539, !19}
!540 = !{!541}
!541 = distinct !{!541, !542}
!542 = distinct !{!542, !"LVerDomain"}
!543 = !{!544}
!544 = distinct !{!544, !542}
!545 = distinct !{!545, !19}
!546 = !{!547}
!547 = distinct !{!547, !548}
!548 = distinct !{!548, !"LVerDomain"}
!549 = !{!550}
!550 = distinct !{!550, !548}
!551 = distinct !{!551, !19}
!552 = !{!553}
!553 = distinct !{!553, !554}
!554 = distinct !{!554, !"LVerDomain"}
!555 = !{!556}
!556 = distinct !{!556, !554}
!557 = distinct !{!557, !19}
!558 = !{!559}
!559 = distinct !{!559, !560}
!560 = distinct !{!560, !"LVerDomain"}
!561 = !{!562}
!562 = distinct !{!562, !560}
!563 = distinct !{!563, !19}
!564 = !{!565}
!565 = distinct !{!565, !566}
!566 = distinct !{!566, !"LVerDomain"}
!567 = !{!568}
!568 = distinct !{!568, !566}
!569 = distinct !{!569, !19}
!570 = !{!571}
!571 = distinct !{!571, !572}
!572 = distinct !{!572, !"LVerDomain"}
!573 = !{!574}
!574 = distinct !{!574, !572}
!575 = distinct !{!575, !19}
!576 = !{!577}
!577 = distinct !{!577, !578}
!578 = distinct !{!578, !"LVerDomain"}
!579 = !{!580}
!580 = distinct !{!580, !578}
!581 = !{!582}
!582 = distinct !{!582, !578}
!583 = !{!577, !580}
!584 = distinct !{!584, !19}
!585 = !{!586}
!586 = distinct !{!586, !587}
!587 = distinct !{!587, !"LVerDomain"}
!588 = !{!589}
!589 = distinct !{!589, !587}
!590 = distinct !{!590, !19}
!591 = !{!592}
!592 = distinct !{!592, !593}
!593 = distinct !{!593, !"LVerDomain"}
!594 = !{!595}
!595 = distinct !{!595, !593}
!596 = !{!597}
!597 = distinct !{!597, !593}
!598 = !{!592, !595}
!599 = distinct !{!599, !19}
!600 = !{!601}
!601 = distinct !{!601, !602}
!602 = distinct !{!602, !"LVerDomain"}
!603 = !{!604}
!604 = distinct !{!604, !602}
!605 = distinct !{!605, !19}
!606 = !{!607}
!607 = distinct !{!607, !608}
!608 = distinct !{!608, !"LVerDomain"}
!609 = !{!610}
!610 = distinct !{!610, !608}
!611 = !{!612}
!612 = distinct !{!612, !608}
!613 = !{!607, !610}
!614 = distinct !{!614, !19}
!615 = !{!616}
!616 = distinct !{!616, !617}
!617 = distinct !{!617, !"LVerDomain"}
!618 = !{!619}
!619 = distinct !{!619, !617}
!620 = distinct !{!620, !19}
!621 = !{!622}
!622 = distinct !{!622, !623}
!623 = distinct !{!623, !"LVerDomain"}
!624 = !{!625}
!625 = distinct !{!625, !623}
!626 = !{!627}
!627 = distinct !{!627, !623}
!628 = !{!622, !625}
!629 = distinct !{!629, !19}
!630 = !{!631}
!631 = distinct !{!631, !632}
!632 = distinct !{!632, !"LVerDomain"}
!633 = !{!634}
!634 = distinct !{!634, !632}
!635 = !{!636}
!636 = distinct !{!636, !637}
!637 = distinct !{!637, !"LVerDomain"}
!638 = !{!639}
!639 = distinct !{!639, !637}
!640 = distinct !{!640, !19}
!641 = distinct !{!641, !19}
!642 = !{!643}
!643 = distinct !{!643, !644}
!644 = distinct !{!644, !"LVerDomain"}
!645 = !{!646}
!646 = distinct !{!646, !644}
!647 = distinct !{!647, !19}
!648 = !{!649}
!649 = distinct !{!649, !650}
!650 = distinct !{!650, !"LVerDomain"}
!651 = !{!652}
!652 = distinct !{!652, !650}
!653 = distinct !{!653, !19}
!654 = !{!655}
!655 = distinct !{!655, !656}
!656 = distinct !{!656, !"LVerDomain"}
!657 = !{!658}
!658 = distinct !{!658, !656}
!659 = distinct !{!659, !19}
!660 = !{!661}
!661 = distinct !{!661, !662}
!662 = distinct !{!662, !"LVerDomain"}
!663 = !{!664}
!664 = distinct !{!664, !662}
!665 = distinct !{!665, !19}
!666 = !{!667}
!667 = distinct !{!667, !668}
!668 = distinct !{!668, !"LVerDomain"}
!669 = !{!670}
!670 = distinct !{!670, !668}
!671 = distinct !{!671, !19}
!672 = !{!673}
!673 = distinct !{!673, !674}
!674 = distinct !{!674, !"LVerDomain"}
!675 = !{!676}
!676 = distinct !{!676, !674}
!677 = distinct !{!677, !19}
!678 = !{!679}
!679 = distinct !{!679, !680}
!680 = distinct !{!680, !"LVerDomain"}
!681 = !{!682}
!682 = distinct !{!682, !680}
!683 = !{!684}
!684 = distinct !{!684, !685}
!685 = distinct !{!685, !"LVerDomain"}
!686 = !{!687}
!687 = distinct !{!687, !685}
!688 = distinct !{!688, !19}
!689 = distinct !{!689, !19}
!690 = !{!691}
!691 = distinct !{!691, !692}
!692 = distinct !{!692, !"LVerDomain"}
!693 = !{!694}
!694 = distinct !{!694, !692}
!695 = distinct !{!695, !19}
!696 = !{!697}
!697 = distinct !{!697, !698}
!698 = distinct !{!698, !"LVerDomain"}
!699 = !{!700}
!700 = distinct !{!700, !698}
!701 = distinct !{!701, !19}
!702 = !{!703}
!703 = distinct !{!703, !704}
!704 = distinct !{!704, !"LVerDomain"}
!705 = !{!706}
!706 = distinct !{!706, !704}
!707 = distinct !{!707, !19}
!708 = !{!709}
!709 = distinct !{!709, !710}
!710 = distinct !{!710, !"LVerDomain"}
!711 = !{!712}
!712 = distinct !{!712, !710}
!713 = distinct !{!713, !19}
!714 = !{!715}
!715 = distinct !{!715, !716}
!716 = distinct !{!716, !"LVerDomain"}
!717 = !{!718}
!718 = distinct !{!718, !716}
!719 = distinct !{!719, !19}
!720 = !{!721}
!721 = distinct !{!721, !722}
!722 = distinct !{!722, !"LVerDomain"}
!723 = !{!724}
!724 = distinct !{!724, !722}
!725 = distinct !{!725, !19}
!726 = !{!727}
!727 = distinct !{!727, !728}
!728 = distinct !{!728, !"LVerDomain"}
!729 = !{!730}
!730 = distinct !{!730, !728}
!731 = !{!732}
!732 = distinct !{!732, !728}
!733 = !{!727, !730}
!734 = distinct !{!734, !19}
!735 = !{!736}
!736 = distinct !{!736, !737}
!737 = distinct !{!737, !"LVerDomain"}
!738 = !{!739}
!739 = distinct !{!739, !737}
!740 = distinct !{!740, !19}
!741 = !{!742}
!742 = distinct !{!742, !743}
!743 = distinct !{!743, !"LVerDomain"}
!744 = !{!745}
!745 = distinct !{!745, !743}
!746 = distinct !{!746, !19}
!747 = !{!748}
!748 = distinct !{!748, !749}
!749 = distinct !{!749, !"LVerDomain"}
!750 = !{!751}
!751 = distinct !{!751, !749}
!752 = !{!753}
!753 = distinct !{!753, !749}
!754 = !{!748, !751}
!755 = distinct !{!755, !19}
!756 = !{!757}
!757 = distinct !{!757, !758}
!758 = distinct !{!758, !"LVerDomain"}
!759 = !{!760}
!760 = distinct !{!760, !758}
!761 = distinct !{!761, !19}
!762 = !{!763}
!763 = distinct !{!763, !764}
!764 = distinct !{!764, !"LVerDomain"}
!765 = !{!766}
!766 = distinct !{!766, !764}
!767 = distinct !{!767, !19}
!768 = !{!769}
!769 = distinct !{!769, !770}
!770 = distinct !{!770, !"LVerDomain"}
!771 = !{!772}
!772 = distinct !{!772, !770}
!773 = !{!774}
!774 = distinct !{!774, !770}
!775 = !{!769, !772}
!776 = distinct !{!776, !19}
!777 = !{!778}
!778 = distinct !{!778, !779}
!779 = distinct !{!779, !"LVerDomain"}
!780 = !{!781}
!781 = distinct !{!781, !779}
!782 = distinct !{!782, !19}
!783 = !{!784}
!784 = distinct !{!784, !785}
!785 = distinct !{!785, !"LVerDomain"}
!786 = !{!787}
!787 = distinct !{!787, !785}
!788 = distinct !{!788, !19}
!789 = !{!790}
!790 = distinct !{!790, !791}
!791 = distinct !{!791, !"LVerDomain"}
!792 = !{!793}
!793 = distinct !{!793, !791}
!794 = !{!795}
!795 = distinct !{!795, !791}
!796 = !{!790, !793}
!797 = distinct !{!797, !19}
!798 = !{!799}
!799 = distinct !{!799, !800}
!800 = distinct !{!800, !"LVerDomain"}
!801 = !{!802}
!802 = distinct !{!802, !800}
!803 = distinct !{!803, !19}
!804 = !{!805}
!805 = distinct !{!805, !806}
!806 = distinct !{!806, !"LVerDomain"}
!807 = !{!808}
!808 = distinct !{!808, !806}
!809 = distinct !{!809, !19}
!810 = !{!811}
!811 = distinct !{!811, !812}
!812 = distinct !{!812, !"LVerDomain"}
!813 = !{!814}
!814 = distinct !{!814, !812}
!815 = !{!816}
!816 = distinct !{!816, !812}
!817 = !{!811, !814}
!818 = distinct !{!818, !19}
!819 = !{!820}
!820 = distinct !{!820, !821}
!821 = distinct !{!821, !"LVerDomain"}
!822 = !{!823}
!823 = distinct !{!823, !821}
!824 = distinct !{!824, !19}
!825 = !{!826}
!826 = distinct !{!826, !827}
!827 = distinct !{!827, !"LVerDomain"}
!828 = !{!829}
!829 = distinct !{!829, !827}
!830 = distinct !{!830, !19}
!831 = !{!832}
!832 = distinct !{!832, !833}
!833 = distinct !{!833, !"LVerDomain"}
!834 = !{!835}
!835 = distinct !{!835, !833}
!836 = !{!837}
!837 = distinct !{!837, !833}
!838 = !{!832, !835}
!839 = distinct !{!839, !19}
!840 = !{!841}
!841 = distinct !{!841, !842}
!842 = distinct !{!842, !"LVerDomain"}
!843 = !{!844}
!844 = distinct !{!844, !842}
!845 = distinct !{!845, !19}
!846 = !{!847}
!847 = distinct !{!847, !848}
!848 = distinct !{!848, !"LVerDomain"}
!849 = !{!850}
!850 = distinct !{!850, !848}
!851 = distinct !{!851, !19}
!852 = distinct !{!852, !19}
!853 = distinct !{!853, !397}
!854 = distinct !{!854, !855, !19}
!855 = !{!"llvm.loop.unroll.runtime.disable"}
!856 = distinct !{!856, !19}
!857 = distinct !{!857, !397}
!858 = distinct !{!858, !855, !19}
!859 = distinct !{!859, !397}
!860 = !{!861}
!861 = distinct !{!861, !862}
!862 = distinct !{!862, !"LVerDomain"}
!863 = !{!864}
!864 = distinct !{!864, !862}
!865 = !{!866}
!866 = distinct !{!866, !867}
!867 = distinct !{!867, !"LVerDomain"}
!868 = !{!869}
!869 = distinct !{!869, !867}
!870 = distinct !{!870, !19}
!871 = distinct !{!871, !19}
!872 = !{!873}
!873 = distinct !{!873, !874}
!874 = distinct !{!874, !"LVerDomain"}
!875 = !{!876}
!876 = distinct !{!876, !874}
!877 = distinct !{!877, !19}
!878 = !{!879}
!879 = distinct !{!879, !880}
!880 = distinct !{!880, !"LVerDomain"}
!881 = !{!882}
!882 = distinct !{!882, !880}
!883 = distinct !{!883, !19}
!884 = !{!885}
!885 = distinct !{!885, !886}
!886 = distinct !{!886, !"LVerDomain"}
!887 = !{!888}
!888 = distinct !{!888, !886}
!889 = distinct !{!889, !19}
!890 = !{!891}
!891 = distinct !{!891, !892}
!892 = distinct !{!892, !"LVerDomain"}
!893 = !{!894}
!894 = distinct !{!894, !892}
!895 = distinct !{!895, !19}
!896 = !{!897}
!897 = distinct !{!897, !898}
!898 = distinct !{!898, !"LVerDomain"}
!899 = !{!900}
!900 = distinct !{!900, !898}
!901 = distinct !{!901, !19}
!902 = !{!903}
!903 = distinct !{!903, !904}
!904 = distinct !{!904, !"LVerDomain"}
!905 = !{!906}
!906 = distinct !{!906, !904}
!907 = distinct !{!907, !19}
!908 = !{!909}
!909 = distinct !{!909, !910}
!910 = distinct !{!910, !"LVerDomain"}
!911 = !{!912}
!912 = distinct !{!912, !910}
!913 = distinct !{!913, !19}
!914 = !{!915}
!915 = distinct !{!915, !916}
!916 = distinct !{!916, !"LVerDomain"}
!917 = !{!918}
!918 = distinct !{!918, !916}
!919 = distinct !{!919, !19}
