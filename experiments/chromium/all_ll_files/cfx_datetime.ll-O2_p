; ModuleID = '../../third_party/pdfium/core/fxcrt/cfx_datetime.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/cfx_datetime.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.timeval = type { i64, i64 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%class.CFX_DateTime = type { i32, i8, i8, i8, i8, i8, i16 }

@_ZN12_GLOBAL__N_120g_FXDaysPerLeapMonthE = internal unnamed_addr constant [12 x i8] c"\1F\1D\1F\1E\1F\1E\1F\1F\1E\1F\1E\1F", align 1
@_ZN12_GLOBAL__N_116g_FXDaysPerMonthE = internal unnamed_addr constant [12 x i8] c"\1F\1C\1F\1E\1F\1E\1F\1F\1E\1F\1E\1F", align 1
@_ZN12_GLOBAL__N_123g_FXDaysBeforeLeapMonthE = internal unnamed_addr constant [12 x i32] [i32 0, i32 31, i32 60, i32 91, i32 121, i32 152, i32 182, i32 213, i32 244, i32 274, i32 305, i32 335], align 16
@_ZN12_GLOBAL__N_119g_FXDaysBeforeMonthE = internal unnamed_addr constant [12 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_Z14FX_DaysInMonthih(i32, i8 zeroext) local_unnamed_addr #0 {
  %3 = and i32 %0, 3
  %4 = icmp eq i32 %3, 0
  %5 = srem i32 %0, 100
  %6 = icmp ne i32 %5, 0
  %7 = and i1 %6, %4
  %8 = srem i32 %0, 400
  %9 = icmp eq i32 %8, 0
  %10 = or i1 %9, %7
  %11 = select i1 %10, [12 x i8]* @_ZN12_GLOBAL__N_120g_FXDaysPerLeapMonthE, [12 x i8]* @_ZN12_GLOBAL__N_116g_FXDaysPerMonthE
  %12 = zext i8 %1 to i64
  %13 = add nsw i64 %12, -1
  %14 = getelementptr inbounds [12 x i8], [12 x i8]* %11, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  ret i8 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_Z13FX_IsLeapYeari(i32) local_unnamed_addr #0 {
  %2 = and i32 %0, 3
  %3 = icmp ne i32 %2, 0
  %4 = srem i32 %0, 100
  %5 = icmp eq i32 %4, 0
  %6 = or i1 %3, %5
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = srem i32 %0, 400
  %9 = icmp eq i32 %8, 0
  br label %10

10:                                               ; preds = %1, %7
  %11 = phi i1 [ %9, %7 ], [ true, %1 ]
  ret i1 %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i32 } @_ZN12CFX_DateTime3NowEv() local_unnamed_addr #2 align 2 {
  %1 = alloca %struct.timeval, align 8
  %2 = alloca %struct.tm, align 8
  %3 = bitcast %struct.timeval* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #6
  %4 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 0
  %5 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 1
  %6 = bitcast %struct.timeval* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  %7 = call i32 @gettimeofday(%struct.timeval* nonnull %1, i8* null) #6
  %8 = bitcast %struct.tm* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 56, i1 false)
  %9 = call %struct.tm* @localtime_r(i64* nonnull %4, %struct.tm* nonnull %2) #6
  %10 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, 1900
  %13 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = load i64, i64* %5, align 8
  %24 = sdiv i64 %23, 1000
  %25 = trunc i64 %24 to i32
  %26 = and i32 %12, 65535
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #6
  %27 = zext i32 %20 to i64
  %28 = shl i64 %27, 56
  %29 = and i32 %18, 255
  %30 = zext i32 %29 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = and i32 %16, 255
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 40
  %35 = add i32 %14, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = shl nuw nsw i64 %37, 32
  %39 = zext i32 %26 to i64
  %40 = or i64 %34, %39
  %41 = or i64 %40, %38
  %42 = or i64 %41, %31
  %43 = or i64 %42, %28
  %44 = shl i32 %25, 16
  %45 = and i32 %22, 255
  %46 = or i32 %44, %45
  %47 = insertvalue { i64, i32 } undef, i64 %43, 0
  %48 = insertvalue { i64, i32 } %47, i32 %46, 1
  ret { i64, i32 } %48
}

; Function Attrs: nofree nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind
declare %struct.tm* @localtime_r(i64*, %struct.tm*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK12CFX_DateTime12GetDayOfWeekEv(%class.CFX_DateTime* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 4
  %6 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 2
  %7 = load i8, i8* %6, align 1
  %8 = and i32 %3, 3
  %9 = icmp eq i32 %8, 0
  %10 = srem i32 %3, 100
  %11 = icmp ne i32 %10, 0
  %12 = and i1 %11, %9
  %13 = srem i32 %3, 400
  %14 = icmp eq i32 %13, 0
  %15 = or i1 %14, %12
  %16 = select i1 %15, [12 x i32]* @_ZN12_GLOBAL__N_123g_FXDaysBeforeLeapMonthE, [12 x i32]* @_ZN12_GLOBAL__N_119g_FXDaysBeforeMonthE
  %17 = zext i8 %5 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr inbounds [12 x i32], [12 x i32]* %16, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  %22 = zext i8 %7 to i64
  %23 = add nsw i64 %21, %22
  %24 = icmp sgt i32 %3, 0
  %25 = select i1 %15, i64 366, i64 365
  %26 = select i1 %24, i32 -1, i32 1
  %27 = select i1 %24, i64 0, i64 %25
  %28 = sub nsw i64 %23, %27
  %29 = add nsw i32 %3, %26
  %30 = sext i32 %29 to i64
  %31 = mul nsw i64 %30, 365
  %32 = add nsw i64 %31, %28
  %33 = sdiv i32 %29, 4
  %34 = sext i32 %33 to i64
  %35 = add nsw i64 %32, %34
  %36 = sdiv i32 %29, -100
  %37 = sext i32 %36 to i64
  %38 = add nsw i64 %35, %37
  %39 = sdiv i32 %29, 400
  %40 = sext i32 %39 to i64
  %41 = add nsw i64 %38, %40
  %42 = srem i64 %41, 7
  %43 = trunc i64 %42 to i32
  %44 = icmp slt i32 %43, 0
  %45 = add nsw i32 %43, 7
  %46 = select i1 %44, i32 %45, i32 %43
  ret i32 %46
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK12CFX_DateTimeeqERKS_(%class.CFX_DateTime* nocapture readonly, %class.CFX_DateTime* nocapture readonly dereferenceable(12)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %44

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 4
  %11 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %1, i64 0, i32 1
  %12 = load i8, i8* %11, align 4
  %13 = icmp eq i8 %10, %12
  br i1 %13, label %14, label %44

14:                                               ; preds = %8
  %15 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 2
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %1, i64 0, i32 2
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %16, %18
  br i1 %19, label %20, label %44

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 3
  %22 = load i8, i8* %21, align 2
  %23 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %1, i64 0, i32 3
  %24 = load i8, i8* %23, align 2
  %25 = icmp eq i8 %22, %24
  br i1 %25, label %26, label %44

26:                                               ; preds = %20
  %27 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 4
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %1, i64 0, i32 4
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %28, %30
  br i1 %31, label %32, label %44

32:                                               ; preds = %26
  %33 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 5
  %34 = load i8, i8* %33, align 4
  %35 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %1, i64 0, i32 5
  %36 = load i8, i8* %35, align 4
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %32
  %39 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %0, i64 0, i32 6
  %40 = load i16, i16* %39, align 2
  %41 = getelementptr inbounds %class.CFX_DateTime, %class.CFX_DateTime* %1, i64 0, i32 6
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %40, %42
  br label %44

44:                                               ; preds = %38, %32, %26, %20, %14, %8, %2
  %45 = phi i1 [ false, %32 ], [ false, %26 ], [ false, %20 ], [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %43, %38 ]
  ret i1 %45
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
