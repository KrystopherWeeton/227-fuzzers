; ModuleID = '../../components/gcm_driver/crypto/p256_key_util.cc'
source_filename = "../../components/gcm_driver/crypto/p256_key_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crypto::ECPrivateKey" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.evp_pkey_st* }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.3 }
%union.anon.3 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%struct.ec_key_st = type opaque
%struct.ec_group_st = type opaque
%struct.ec_point_st = type opaque
%struct.bignum_ctx = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gcm15GetRawPublicKeyERKN6crypto12ECPrivateKeyEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.crypto::ECPrivateKey"* dereferenceable(8), %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #4
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #4
  %7 = call zeroext i1 @_ZNK6crypto12ECPrivateKey18ExportRawPublicKeyEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.crypto::ECPrivateKey"* %0, %"class.std::__1::basic_string"* nonnull %3) #4
  %8 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br i1 %7, label %9, label %37

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  %13 = load i64, i64* %6, align 8
  %14 = zext i8 %11 to i64
  %15 = select i1 %12, i64 %13, i64 %14
  %16 = icmp eq i64 %15, 64
  br i1 %16, label %17, label %37

17:                                               ; preds = %9
  %18 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %18, i64 0, i32 1, i32 0
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %25, align 8
  br label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  store i8 0, i8* %27, align 1
  store i8 0, i8* %19, align 1
  br label %28

28:                                               ; preds = %22, %26
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* %1, i64 65) #4
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %1, i8 signext 4) #4
  %29 = load i8, i8* %10, align 1
  %30 = icmp slt i8 %29, 0
  %31 = load i8*, i8** %5, align 8
  %32 = load i64, i64* %6, align 8
  %33 = zext i8 %29 to i64
  %34 = select i1 %30, i8* %31, i8* %4
  %35 = select i1 %30, i64 %32, i64 %33
  %36 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %1, i8* %34, i64 %35) #4
  br label %37

37:                                               ; preds = %2, %9, %28
  %38 = phi i1 [ false, %9 ], [ true, %28 ], [ false, %2 ]
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %40 = load i8, i8* %39, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = load i8*, i8** %5, align 8
  call void @_ZdlPv(i8* %43) #5
  br label %44

44:                                               ; preds = %37, %42
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #4
  ret i1 %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK6crypto12ECPrivateKey18ExportRawPublicKeyEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.crypto::ECPrivateKey"*, %"class.std::__1::basic_string"*) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gcm16GetRawPrivateKeyERKN6crypto12ECPrivateKeyEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.crypto::ECPrivateKey"* dereferenceable(8), %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #4
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #4
  %7 = call zeroext i1 @_ZNK6crypto12ECPrivateKey16ExportPrivateKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::ECPrivateKey"* %0, %"class.std::__1::vector"* nonnull %3) #4
  br i1 %7, label %8, label %157

8:                                                ; preds = %2
  %9 = load i8*, i8** %5, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = load i8*, i8** %6, align 8
  %12 = ptrtoint i8* %11 to i64
  %13 = sub i64 %12, %10
  %14 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = and i64 %20, 9223372036854775807
  %22 = add nsw i64 %21, -1
  br label %23

23:                                               ; preds = %18, %8
  %24 = phi i64 [ %22, %18 ], [ 22, %8 ]
  %25 = icmp ugt i64 %13, %24
  br i1 %25, label %26, label %36

26:                                               ; preds = %23
  br i1 %17, label %27, label %30

27:                                               ; preds = %26
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  br label %32

30:                                               ; preds = %26
  %31 = zext i8 %16 to i64
  br label %32

32:                                               ; preds = %30, %27
  %33 = phi i64 [ %29, %27 ], [ %31, %30 ]
  %34 = sub i64 %13, %24
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %1, i64 %24, i64 %34, i64 %33, i64 0, i64 %33, i64 0) #4
  %35 = load i8, i8* %15, align 1
  br label %36

36:                                               ; preds = %32, %23
  %37 = phi i8 [ %16, %23 ], [ %35, %32 ]
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %36
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  br label %44

42:                                               ; preds = %36
  %43 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %44

44:                                               ; preds = %42, %39
  %45 = phi i8* [ %41, %39 ], [ %43, %42 ]
  %46 = icmp eq i8* %9, %11
  br i1 %46, label %149, label %47

47:                                               ; preds = %44
  %48 = ptrtoint i8* %11 to i64
  %49 = sub i64 %48, %10
  %50 = icmp ult i64 %49, 32
  br i1 %50, label %139, label %51

51:                                               ; preds = %47
  %52 = ptrtoint i8* %11 to i64
  %53 = sub i64 %52, %10
  %54 = getelementptr i8, i8* %45, i64 %53
  %55 = icmp ult i8* %45, %11
  %56 = icmp ult i8* %9, %54
  %57 = and i1 %55, %56
  br i1 %57, label %139, label %58

58:                                               ; preds = %51
  %59 = and i64 %49, -32
  %60 = getelementptr i8, i8* %45, i64 %59
  %61 = getelementptr i8, i8* %9, i64 %59
  %62 = add i64 %59, -32
  %63 = lshr exact i64 %62, 5
  %64 = add nuw nsw i64 %63, 1
  %65 = and i64 %64, 3
  %66 = icmp ult i64 %62, 96
  br i1 %66, label %118, label %67

67:                                               ; preds = %58
  %68 = sub nsw i64 %64, %65
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %115, %69 ]
  %71 = phi i64 [ %68, %67 ], [ %116, %69 ]
  %72 = getelementptr i8, i8* %45, i64 %70
  %73 = getelementptr i8, i8* %9, i64 %70
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !2
  %76 = getelementptr i8, i8* %73, i64 16
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !2
  %79 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %75, <16 x i8>* %79, align 1, !alias.scope !5, !noalias !2
  %80 = getelementptr i8, i8* %72, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %81, align 1, !alias.scope !5, !noalias !2
  %82 = or i64 %70, 32
  %83 = getelementptr i8, i8* %45, i64 %82
  %84 = getelementptr i8, i8* %9, i64 %82
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !2
  %87 = getelementptr i8, i8* %84, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !2
  %90 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %90, align 1, !alias.scope !5, !noalias !2
  %91 = getelementptr i8, i8* %83, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %92, align 1, !alias.scope !5, !noalias !2
  %93 = or i64 %70, 64
  %94 = getelementptr i8, i8* %45, i64 %93
  %95 = getelementptr i8, i8* %9, i64 %93
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !2
  %98 = getelementptr i8, i8* %95, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !2
  %101 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %101, align 1, !alias.scope !5, !noalias !2
  %102 = getelementptr i8, i8* %94, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %103, align 1, !alias.scope !5, !noalias !2
  %104 = or i64 %70, 96
  %105 = getelementptr i8, i8* %45, i64 %104
  %106 = getelementptr i8, i8* %9, i64 %104
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1, !alias.scope !2
  %109 = getelementptr i8, i8* %106, i64 16
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !2
  %112 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %112, align 1, !alias.scope !5, !noalias !2
  %113 = getelementptr i8, i8* %105, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %114, align 1, !alias.scope !5, !noalias !2
  %115 = add i64 %70, 128
  %116 = add i64 %71, -4
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %69, !llvm.loop !7

118:                                              ; preds = %69, %58
  %119 = phi i64 [ 0, %58 ], [ %115, %69 ]
  %120 = icmp eq i64 %65, 0
  br i1 %120, label %137, label %121

121:                                              ; preds = %118, %121
  %122 = phi i64 [ %134, %121 ], [ %119, %118 ]
  %123 = phi i64 [ %135, %121 ], [ %65, %118 ]
  %124 = getelementptr i8, i8* %45, i64 %122
  %125 = getelementptr i8, i8* %9, i64 %122
  %126 = bitcast i8* %125 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 1, !alias.scope !2
  %128 = getelementptr i8, i8* %125, i64 16
  %129 = bitcast i8* %128 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1, !alias.scope !2
  %131 = bitcast i8* %124 to <16 x i8>*
  store <16 x i8> %127, <16 x i8>* %131, align 1, !alias.scope !5, !noalias !2
  %132 = getelementptr i8, i8* %124, i64 16
  %133 = bitcast i8* %132 to <16 x i8>*
  store <16 x i8> %130, <16 x i8>* %133, align 1, !alias.scope !5, !noalias !2
  %134 = add i64 %122, 32
  %135 = add i64 %123, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %121, !llvm.loop !9

137:                                              ; preds = %121, %118
  %138 = icmp eq i64 %49, %59
  br i1 %138, label %149, label %139

139:                                              ; preds = %137, %51, %47
  %140 = phi i8* [ %45, %51 ], [ %45, %47 ], [ %60, %137 ]
  %141 = phi i8* [ %9, %51 ], [ %9, %47 ], [ %61, %137 ]
  br label %142

142:                                              ; preds = %139, %142
  %143 = phi i8* [ %147, %142 ], [ %140, %139 ]
  %144 = phi i8* [ %146, %142 ], [ %141, %139 ]
  %145 = load i8, i8* %144, align 1
  store i8 %145, i8* %143, align 1
  %146 = getelementptr inbounds i8, i8* %144, i64 1
  %147 = getelementptr inbounds i8, i8* %143, i64 1
  %148 = icmp eq i8* %146, %11
  br i1 %148, label %149, label %142, !llvm.loop !11

149:                                              ; preds = %142, %137, %44
  %150 = phi i8* [ %45, %44 ], [ %60, %137 ], [ %147, %142 ]
  store i8 0, i8* %150, align 1
  %151 = load i8, i8* %15, align 1
  %152 = icmp slt i8 %151, 0
  br i1 %152, label %153, label %155

153:                                              ; preds = %149
  %154 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %13, i64* %154, align 8
  br label %157

155:                                              ; preds = %149
  %156 = trunc i64 %13 to i8
  store i8 %156, i8* %15, align 1
  br label %157

157:                                              ; preds = %155, %153, %2
  %158 = phi i1 [ false, %2 ], [ true, %153 ], [ true, %155 ]
  %159 = load i8*, i8** %5, align 8
  %160 = icmp eq i8* %159, null
  br i1 %160, label %164, label %161

161:                                              ; preds = %157
  %162 = ptrtoint i8* %159 to i64
  %163 = bitcast i8** %6 to i64*
  store i64 %162, i64* %163, align 8
  call void @_ZdlPv(i8* nonnull %159) #5
  br label %164

164:                                              ; preds = %157, %161
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #4
  ret i1 %158
}

declare zeroext i1 @_ZNK6crypto12ECPrivateKey16ExportPrivateKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::ECPrivateKey"*, %"class.std::__1::vector"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gcm23ComputeSharedP256SecretERN6crypto12ECPrivateKeyERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS5_12basic_stringIcS7_NS5_9allocatorIcEEEE(%"class.crypto::ECPrivateKey"* nocapture readonly dereferenceable(8), %"class.base::BasicStringPiece"* nocapture readonly dereferenceable(16), %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %4 = alloca [32 x i8], align 16
  %5 = getelementptr inbounds %"class.crypto::ECPrivateKey", %"class.crypto::ECPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %5, align 8
  %7 = tail call %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st* %6) #4
  %8 = icmp eq %struct.ec_key_st* %7, null
  br i1 %8, label %34, label %9

9:                                                ; preds = %3
  %10 = tail call i32 @EC_KEY_check_key(%struct.ec_key_st* nonnull %7) #4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %34, label %12

12:                                               ; preds = %9
  %13 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* nonnull %7) #4
  %14 = tail call %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st* %13) #4
  %15 = icmp eq %struct.ec_point_st* %14, null
  br i1 %15, label %34, label %16

16:                                               ; preds = %12
  %17 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* nonnull %7) #4
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = tail call i32 @EC_POINT_oct2point(%struct.ec_group_st* %17, %struct.ec_point_st* nonnull %14, i8* %19, i64 %21, %struct.bignum_ctx* null) #4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %32, label %24

24:                                               ; preds = %16
  %25 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 32, i1 false)
  %26 = call i32 @ECDH_compute_key(i8* nonnull %25, i64 32, %struct.ec_point_st* nonnull %14, %struct.ec_key_st* nonnull %7, i8* (i8*, i64, i8*, i64*)* null) #4
  %27 = icmp eq i32 %26, 32
  br i1 %27, label %28, label %30

28:                                               ; preds = %24
  %29 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %2, i8* nonnull %25, i64 32) #4
  br label %30

30:                                               ; preds = %24, %28
  %31 = phi i1 [ true, %28 ], [ false, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #4
  br label %32

32:                                               ; preds = %16, %30
  %33 = phi i1 [ false, %16 ], [ %31, %30 ]
  call void @EC_POINT_free(%struct.ec_point_st* nonnull %14) #4
  br label %34

34:                                               ; preds = %12, %32, %3, %9
  %35 = phi i1 [ false, %9 ], [ false, %3 ], [ %33, %32 ], [ false, %12 ]
  ret i1 %35
}

declare %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st*) local_unnamed_addr #2

declare i32 @EC_KEY_check_key(%struct.ec_key_st*) local_unnamed_addr #2

declare %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st*) local_unnamed_addr #2

declare %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st*) local_unnamed_addr #2

declare i32 @EC_POINT_oct2point(%struct.ec_group_st*, %struct.ec_point_st*, i8*, i64, %struct.bignum_ctx*) local_unnamed_addr #2

declare i32 @ECDH_compute_key(i8*, i64, %struct.ec_point_st*, %struct.ec_key_st*, i8* (i8*, i64, i8*, i64*)*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #2

declare void @EC_POINT_free(%struct.ec_point_st*) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
