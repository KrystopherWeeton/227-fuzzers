; ModuleID = '../../media/base/stream_parser.cc'
source_filename = "../../media/base/stream_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.media::StreamParser::InitParameters" = type { %"class.base::TimeDelta", %"class.base::Time", i32, i32, i32, i32 }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.media::StreamParser" = type { i32 (...)** }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %class.scoped_refptr*, i64 }
%class.scoped_refptr = type { %"class.media::StreamParserBuffer"* }
%"class.media::StreamParserBuffer" = type <{ %"class.media::DecoderBuffer.base", [7 x i8], %"class.media::DecodeTimestamp", i32, i32, i32, [4 x i8], %class.scoped_refptr, i8, [7 x i8] }>
%"class.media::DecoderBuffer.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.std::__1::unique_ptr.2", %"class.base::TimeDelta", %"class.base::TimeDelta", i64, i64, %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.14", %"class.std::__1::unique_ptr.20", %"struct.std::__1::pair", i8 }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i8* }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.media::ReadOnlyUnalignedMapping"* }
%"class.media::ReadOnlyUnalignedMapping" = type { %"class.base::ReadOnlySharedMemoryMapping", i64, i64 }
%"class.base::ReadOnlySharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.media::UnalignedSharedMemory"* }
%"class.media::UnalignedSharedMemory" = type { %"class.base::subtle::PlatformSharedMemoryRegion", %"class.base::WritableSharedMemoryMapping", %"class.base::ReadOnlySharedMemoryMapping", i8, i64, i8* }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.media::DecryptConfig"* }
%"class.media::DecryptConfig" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.absl::optional", [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.media::SubsampleEntry"*, %"struct.media::SubsampleEntry"*, %"class.std::__1::__compressed_pair.26" }
%"struct.media::SubsampleEntry" = type { i32, i32 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.media::SubsampleEntry"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.31 }
%union.anon.31 = type { %"class.media::EncryptionPattern" }
%"class.media::EncryptionPattern" = type { i32, i32 }
%"struct.std::__1::pair" = type { %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.media::DecodeTimestamp" = type { %"class.base::TimeDelta" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.35", %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { i64 }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"class.base::internal::circular_deque_const_iterator"*, %"class.base::internal::circular_deque_const_iterator"*, %"class.std::__1::__compressed_pair.53" }
%"class.base::internal::circular_deque_const_iterator" = type { %"class.base::circular_deque"*, i64 }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.base::internal::circular_deque_const_iterator"* }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"class.base::circular_deque"**, %"class.base::circular_deque"**, %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.base::circular_deque"** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.media::DecoderBuffer" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.std::__1::unique_ptr.2", %"class.base::TimeDelta", %"class.base::TimeDelta", i64, i64, %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.14", %"class.std::__1::unique_ptr.20", %"struct.std::__1::pair", i8, [7 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZNK4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm = comdat any

$_ZN4base14circular_dequeI13scoped_refptrIN5media18StreamParserBufferEEE25ExpandCapacityIfNecessaryEm = comdat any

$_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm = comdat any

$_ZN4base14circular_dequeI13scoped_refptrIN5media18StreamParserBufferEEE10MoveBufferERNS_8internal12VectorBufferIS4_EEmmPS8_PmSB_ = comdat any

$_ZN4base14circular_dequeI13scoped_refptrIN5media18StreamParserBufferEEE13DestructRangeEmm = comdat any

$_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEE13DestructRangeIS5_Li0EEEvPS5_S8_ = comdat any

$_ZZN7logging15CheckOpValueStrIP13scoped_refptrIN5media18StreamParserBufferEEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS6_14remove_pointerIS8_E4typeEEE5valueEPcE4typeESA_ENUlRNS6_13basic_ostreamIcNS6_11char_traitsIcEEEEPKvE_8__invokeESL_SN_ = comdat any

@_ZTVN5media12StreamParserE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::StreamParser"*)* @_ZN5media12StreamParserD2Ev to i8*), i8* bitcast (void (%"class.media::StreamParser"*)* @_ZN5media12StreamParserD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.media::StreamParser"*, %"class.base::circular_deque"*)* @_ZN5media12StreamParser13ProcessChunksENSt3__110unique_ptrIN4base14circular_dequeI13scoped_refptrINS_18StreamParserBufferEEEENS1_14default_deleteIS8_EEEE to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"i <= capacity_\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"../../base/containers/vector_buffer.h\00", align 1
@.str.3 = private unnamed_addr constant [41 x i8] c"!RangesOverlap(from_begin, from_end, to)\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"begin <= end\00", align 1

@_ZN5media12StreamParser14InitParametersC1EN4base9TimeDeltaE = hidden unnamed_addr alias void (%"struct.media::StreamParser::InitParameters"*, i64), void (%"struct.media::StreamParser::InitParameters"*, i64)* @_ZN5media12StreamParser14InitParametersC2EN4base9TimeDeltaE
@_ZN5media12StreamParserD1Ev = hidden unnamed_addr alias void (%"class.media::StreamParser"*), void (%"class.media::StreamParser"*)* @_ZN5media12StreamParserD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media12StreamParser14InitParametersC2EN4base9TimeDeltaE(%"struct.media::StreamParser::InitParameters"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.media::StreamParser::InitParameters", %"struct.media::StreamParser::InitParameters"* %0, i64 0, i32 0, i32 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"struct.media::StreamParser::InitParameters", %"struct.media::StreamParser::InitParameters"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media12StreamParserC2Ev(%"class.media::StreamParser"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::StreamParser", %"class.media::StreamParser"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN5media12StreamParserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media12StreamParserD2Ev(%"class.media::StreamParser"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5media12StreamParserD0Ev(%"class.media::StreamParser"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media12StreamParser13ProcessChunksENSt3__110unique_ptrIN4base14circular_dequeI13scoped_refptrINS_18StreamParserBufferEEEENS1_14default_deleteIS8_EEEE(%"class.media::StreamParser"* nocapture readnone, %"class.base::circular_deque"*) unnamed_addr #5 align 2 {
  %3 = icmp eq %"class.base::circular_deque"* %1, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %1, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  tail call void @_ZN4base14circular_dequeI13scoped_refptrIN5media18StreamParserBufferEEE13DestructRangeEmm(%"class.base::circular_deque"* nonnull %1, i64 %6, i64 %8) #16
  %9 = bitcast %"class.base::circular_deque"* %1 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @free(i8* %10) #16
  %11 = bitcast %"class.base::circular_deque"* %1 to i8*
  tail call void @_ZdlPv(i8* %11) #17
  br label %12

12:                                               ; preds = %2, %4
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media17MergeBufferQueuesERKNSt3__13mapIiN4base14circular_dequeI13scoped_refptrINS_18StreamParserBufferEEEENS0_4lessIiEENS0_9allocatorINS0_4pairIKiS7_EEEEEEPS7_(%"class.std::__1::map"* dereferenceable(24), %"class.base::circular_deque"*) local_unnamed_addr #5 {
  %3 = alloca %"class.std::__1::vector.51", align 8
  %4 = alloca %"class.media::DecodeTimestamp", align 8
  %5 = alloca %"class.media::DecodeTimestamp", align 8
  %6 = alloca %"class.media::DecodeTimestamp", align 8
  %7 = alloca %"class.std::__1::vector.43", align 8
  %8 = bitcast %"class.std::__1::vector.43"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #16
  %9 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %7, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %7, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #16
  %12 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %0, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %15 = icmp eq %"class.std::__1::__tree_end_node"* %13, %14
  br i1 %15, label %22, label %16

16:                                               ; preds = %2
  %17 = bitcast %"class.base::circular_deque"*** %10 to i64*
  %18 = bitcast %"class.std::__1::vector.43"* %7 to i64*
  %19 = bitcast %"class.base::circular_deque"*** %11 to i64*
  br label %35

20:                                               ; preds = %157
  %21 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %12, align 8
  br label %22

22:                                               ; preds = %20, %2
  %23 = phi %"class.base::circular_deque"** [ %123, %20 ], [ null, %2 ]
  %24 = phi %"class.base::circular_deque"** [ %124, %20 ], [ null, %2 ]
  %25 = phi %"class.base::circular_deque"** [ %125, %20 ], [ null, %2 ]
  %26 = phi %"class.base::circular_deque"** [ %126, %20 ], [ null, %2 ]
  %27 = phi i64 [ %128, %20 ], [ 0, %2 ]
  %28 = phi %"class.base::circular_deque"** [ %127, %20 ], [ null, %2 ]
  %29 = phi %"class.std::__1::__tree_end_node"* [ %21, %20 ], [ %13, %2 ]
  %30 = icmp eq %"class.std::__1::__tree_end_node"* %29, %14
  br i1 %30, label %160, label %31

31:                                               ; preds = %22
  %32 = bitcast %"class.base::circular_deque"*** %10 to i64*
  %33 = bitcast %"class.std::__1::vector.43"* %7 to i64*
  %34 = bitcast %"class.base::circular_deque"*** %11 to i64*
  br label %401

35:                                               ; preds = %16, %157
  %36 = phi %"class.base::circular_deque"** [ null, %16 ], [ %123, %157 ]
  %37 = phi %"class.base::circular_deque"** [ null, %16 ], [ %124, %157 ]
  %38 = phi %"class.base::circular_deque"** [ null, %16 ], [ %125, %157 ]
  %39 = phi %"class.base::circular_deque"** [ null, %16 ], [ %126, %157 ]
  %40 = phi %"class.base::circular_deque"** [ null, %16 ], [ %127, %157 ]
  %41 = phi i64 [ 0, %16 ], [ %128, %157 ]
  %42 = phi %"class.base::circular_deque"** [ null, %16 ], [ %129, %157 ]
  %43 = phi %"class.std::__1::__tree_end_node"* [ %13, %16 ], [ %158, %157 ]
  %44 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %43, i64 5
  %45 = bitcast %"class.std::__1::__tree_end_node"* %44 to %"class.base::internal::VectorBuffer"*
  %46 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %43, i64 6
  %47 = bitcast %"class.std::__1::__tree_end_node"* %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %43, i64 7
  %50 = bitcast %"class.std::__1::__tree_end_node"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %43, i64 8
  %53 = bitcast %"class.std::__1::__tree_end_node"* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = icmp ule i64 %51, %54
  %56 = icmp ne i64 %48, %51
  %57 = or i1 %56, %55
  %58 = select i1 %57, i64 %51, i64 0
  %59 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %45, i64 %58) #16
  %60 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %59, i64 0, i32 0
  %61 = load %"class.media::StreamParserBuffer"*, %"class.media::StreamParserBuffer"** %60, align 8
  %62 = getelementptr inbounds %"class.media::StreamParserBuffer", %"class.media::StreamParserBuffer"* %61, i64 0, i32 4
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 1
  br i1 %64, label %65, label %122

65:                                               ; preds = %35
  %66 = ptrtoint %"class.std::__1::__tree_end_node"* %44 to i64
  %67 = load %"class.base::circular_deque"**, %"class.base::circular_deque"*** %11, align 8
  %68 = icmp ult %"class.base::circular_deque"** %42, %67
  %69 = ptrtoint %"class.base::circular_deque"** %67 to i64
  br i1 %68, label %70, label %74

70:                                               ; preds = %65
  %71 = bitcast %"class.base::circular_deque"** %42 to i64*
  store i64 %66, i64* %71, align 8
  %72 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %42, i64 1
  %73 = ptrtoint %"class.base::circular_deque"** %72 to i64
  store i64 %73, i64* %17, align 8
  br label %122

74:                                               ; preds = %65
  %75 = ptrtoint %"class.base::circular_deque"** %42 to i64
  %76 = load i64, i64* %18, align 8
  %77 = sub i64 %75, %76
  %78 = ashr exact i64 %77, 3
  %79 = add nsw i64 %78, 1
  %80 = icmp ugt i64 %79, 2305843009213693951
  br i1 %80, label %81, label %83

81:                                               ; preds = %74
  %82 = bitcast %"class.std::__1::vector.43"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %82) #15
  unreachable

83:                                               ; preds = %74
  %84 = sub i64 %69, %76
  %85 = ashr exact i64 %84, 3
  %86 = icmp ult i64 %85, 1152921504606846975
  br i1 %86, label %87, label %95

87:                                               ; preds = %83
  %88 = ashr exact i64 %84, 2
  %89 = icmp ult i64 %88, %79
  %90 = select i1 %89, i64 %79, i64 %88
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %100, label %92

92:                                               ; preds = %87
  %93 = icmp ugt i64 %90, 2305843009213693951
  br i1 %93, label %94, label %95

94:                                               ; preds = %92
  tail call void @abort() #15
  unreachable

95:                                               ; preds = %92, %83
  %96 = phi i64 [ %90, %92 ], [ 2305843009213693951, %83 ]
  %97 = shl i64 %96, 3
  %98 = tail call i8* @_Znwm(i64 %97) #17
  %99 = bitcast i8* %98 to %"class.base::circular_deque"**
  br label %100

100:                                              ; preds = %95, %87
  %101 = phi i64 [ %96, %95 ], [ 0, %87 ]
  %102 = phi %"class.base::circular_deque"** [ %99, %95 ], [ null, %87 ]
  %103 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %102, i64 %78
  %104 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %102, i64 %101
  %105 = ptrtoint %"class.base::circular_deque"** %104 to i64
  %106 = bitcast %"class.base::circular_deque"** %103 to i64*
  store i64 %66, i64* %106, align 8
  %107 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %103, i64 1
  %108 = ptrtoint %"class.base::circular_deque"** %107 to i64
  %109 = sub i64 %41, %76
  %110 = ashr exact i64 %109, 3
  %111 = sub nsw i64 0, %110
  %112 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %103, i64 %111
  %113 = ptrtoint %"class.base::circular_deque"** %112 to i64
  %114 = icmp sgt i64 %109, 0
  br i1 %114, label %115, label %118

115:                                              ; preds = %100
  %116 = bitcast %"class.base::circular_deque"** %112 to i8*
  %117 = inttoptr i64 %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 %109, i1 false) #16
  br label %118

118:                                              ; preds = %115, %100
  store i64 %113, i64* %18, align 8
  store i64 %108, i64* %17, align 8
  store i64 %105, i64* %19, align 8
  %119 = icmp eq i64 %76, 0
  br i1 %119, label %122, label %120

120:                                              ; preds = %118
  %121 = inttoptr i64 %76 to i8*
  tail call void @_ZdlPv(i8* %121) #17
  br label %122

122:                                              ; preds = %120, %118, %70, %35
  %123 = phi %"class.base::circular_deque"** [ %112, %120 ], [ %112, %118 ], [ %36, %70 ], [ %36, %35 ]
  %124 = phi %"class.base::circular_deque"** [ %112, %120 ], [ %112, %118 ], [ %37, %70 ], [ %37, %35 ]
  %125 = phi %"class.base::circular_deque"** [ %107, %120 ], [ %107, %118 ], [ %72, %70 ], [ %38, %35 ]
  %126 = phi %"class.base::circular_deque"** [ %112, %120 ], [ %112, %118 ], [ %39, %70 ], [ %39, %35 ]
  %127 = phi %"class.base::circular_deque"** [ %107, %120 ], [ %107, %118 ], [ %72, %70 ], [ %40, %35 ]
  %128 = phi i64 [ %108, %120 ], [ %108, %118 ], [ %73, %70 ], [ %41, %35 ]
  %129 = phi %"class.base::circular_deque"** [ %107, %120 ], [ %107, %118 ], [ %72, %70 ], [ %42, %35 ]
  %130 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %43, i64 1, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %133, label %141

133:                                              ; preds = %122
  %134 = bitcast %"class.std::__1::__tree_end_node"* %43 to %"class.std::__1::__tree_node_base"*
  %135 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %43, i64 2
  %136 = bitcast %"class.std::__1::__tree_end_node"* %135 to %"class.std::__1::__tree_end_node"**
  %137 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %136, align 8
  %138 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %137, i64 0, i32 0
  %139 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %138, align 8
  %140 = icmp eq %"class.std::__1::__tree_node_base"* %139, %134
  br i1 %140, label %157, label %148

141:                                              ; preds = %122, %141
  %142 = phi %"class.std::__1::__tree_node_base"* [ %144, %141 ], [ %131, %122 ]
  %143 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, null
  br i1 %145, label %146, label %141

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %142, i64 0, i32 0
  br label %157

148:                                              ; preds = %133, %148
  %149 = phi %"class.std::__1::__tree_end_node"** [ %152, %148 ], [ %136, %133 ]
  %150 = bitcast %"class.std::__1::__tree_end_node"** %149 to %"class.std::__1::__tree_node_base"**
  %151 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %150, align 8
  %152 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %151, i64 0, i32 2
  %153 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %152, align 8
  %154 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %153, i64 0, i32 0
  %155 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %154, align 8
  %156 = icmp eq %"class.std::__1::__tree_node_base"* %155, %151
  br i1 %156, label %157, label %148

157:                                              ; preds = %148, %133, %146
  %158 = phi %"class.std::__1::__tree_end_node"* [ %147, %146 ], [ %137, %133 ], [ %153, %148 ]
  %159 = icmp eq %"class.std::__1::__tree_end_node"* %158, %14
  br i1 %159, label %20, label %35

160:                                              ; preds = %517, %22
  %161 = phi %"class.base::circular_deque"** [ %24, %22 ], [ %486, %517 ]
  %162 = phi %"class.base::circular_deque"** [ %25, %22 ], [ %487, %517 ]
  %163 = phi %"class.base::circular_deque"** [ %26, %22 ], [ %486, %517 ]
  %164 = icmp eq %"class.base::circular_deque"** %163, %162
  br i1 %164, label %392, label %165

165:                                              ; preds = %160
  %166 = ptrtoint %"class.base::circular_deque"** %163 to i64
  %167 = ptrtoint %"class.base::circular_deque"** %162 to i64
  %168 = sub i64 %167, %166
  %169 = ashr exact i64 %168, 3
  %170 = bitcast %"class.std::__1::vector.51"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %170) #16
  %171 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %3, i64 0, i32 0, i32 0
  %172 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %3, i64 0, i32 0, i32 1
  %173 = getelementptr inbounds %"class.std::__1::vector.51", %"class.std::__1::vector.51"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %170, i8 0, i64 24, i1 false) #16
  %174 = icmp eq i64 %168, 0
  br i1 %174, label %229, label %175

175:                                              ; preds = %165
  %176 = icmp ugt i64 %169, 1152921504606846975
  br i1 %176, label %177, label %179

177:                                              ; preds = %175
  %178 = bitcast %"class.std::__1::vector.51"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %178) #15
  unreachable

179:                                              ; preds = %175
  %180 = shl i64 %168, 1
  %181 = tail call i8* @_Znwm(i64 %180) #17
  %182 = bitcast i8* %181 to %"class.base::internal::circular_deque_const_iterator"*
  %183 = bitcast %"class.std::__1::vector.51"* %3 to i8**
  store i8* %181, i8** %183, align 8
  %184 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %182, i64 %169
  store %"class.base::internal::circular_deque_const_iterator"* %184, %"class.base::internal::circular_deque_const_iterator"** %173, align 8
  %185 = bitcast %"class.base::internal::circular_deque_const_iterator"** %172 to i64*
  %186 = ptrtoint i8* %181 to i64
  %187 = add nsw i64 %169, -1
  %188 = getelementptr %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %182, i64 %187, i32 0
  %189 = ptrtoint %"class.base::circular_deque"** %188 to i64
  %190 = sub i64 16, %186
  %191 = add i64 %190, %189
  %192 = and i64 %191, -16
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %181, i8 0, i64 %192, i1 false) #16
  %193 = ptrtoint %"class.base::internal::circular_deque_const_iterator"* %184 to i64
  store i64 %193, i64* %185, align 8
  %194 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %163, align 8
  %195 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %194, i64 0, i32 1
  %196 = load i64, i64* %195, align 8
  %197 = bitcast i8* %181 to %"class.base::circular_deque"**
  store %"class.base::circular_deque"* %194, %"class.base::circular_deque"** %197, align 8
  %198 = getelementptr inbounds i8, i8* %181, i64 8
  %199 = bitcast i8* %198 to i64*
  store i64 %196, i64* %199, align 8
  %200 = icmp ugt i64 %169, 1
  br i1 %200, label %201, label %229

201:                                              ; preds = %179
  %202 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %161, i64 1
  %203 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %202, align 8
  %204 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %203, i64 0, i32 1
  %205 = load i64, i64* %204, align 8
  %206 = getelementptr inbounds i8, i8* %181, i64 16
  %207 = bitcast i8* %206 to %"class.base::circular_deque"**
  store %"class.base::circular_deque"* %203, %"class.base::circular_deque"** %207, align 8
  %208 = getelementptr inbounds i8, i8* %181, i64 24
  %209 = bitcast i8* %208 to i64*
  store i64 %205, i64* %209, align 8
  %210 = icmp eq i64 %168, 16
  br i1 %210, label %229, label %211

211:                                              ; preds = %201
  %212 = add nsw i64 %169, -2
  %213 = and i64 %212, 1
  %214 = icmp eq i64 %168, 24
  br i1 %214, label %217, label %215

215:                                              ; preds = %211
  %216 = sub nsw i64 %212, %213
  br label %235

217:                                              ; preds = %235, %211
  %218 = phi i64 [ 2, %211 ], [ %255, %235 ]
  %219 = icmp eq i64 %213, 0
  br i1 %219, label %229, label %220

220:                                              ; preds = %217
  %221 = load %"class.base::circular_deque"**, %"class.base::circular_deque"*** %9, align 8
  %222 = load %"class.base::internal::circular_deque_const_iterator"*, %"class.base::internal::circular_deque_const_iterator"** %171, align 8
  %223 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %221, i64 %218
  %224 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %223, align 8
  %225 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %224, i64 0, i32 1
  %226 = load i64, i64* %225, align 8
  %227 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %222, i64 %218, i32 0
  store %"class.base::circular_deque"* %224, %"class.base::circular_deque"** %227, align 8
  %228 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %222, i64 %218, i32 1
  store i64 %226, i64* %228, align 8
  br label %229

229:                                              ; preds = %220, %217, %201, %179, %165
  %230 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %1, i64 0, i32 1
  %231 = load i64, i64* %230, align 8
  %232 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %1, i64 0, i32 2
  %233 = load i64, i64* %232, align 8
  %234 = icmp eq i64 %231, %233
  br i1 %234, label %273, label %258

235:                                              ; preds = %235, %215
  %236 = phi i64 [ 2, %215 ], [ %255, %235 ]
  %237 = phi i64 [ %216, %215 ], [ %256, %235 ]
  %238 = load %"class.base::circular_deque"**, %"class.base::circular_deque"*** %9, align 8
  %239 = load %"class.base::internal::circular_deque_const_iterator"*, %"class.base::internal::circular_deque_const_iterator"** %171, align 8
  %240 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %238, i64 %236
  %241 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %240, align 8
  %242 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %241, i64 0, i32 1
  %243 = load i64, i64* %242, align 8
  %244 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %239, i64 %236, i32 0
  store %"class.base::circular_deque"* %241, %"class.base::circular_deque"** %244, align 8
  %245 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %239, i64 %236, i32 1
  store i64 %243, i64* %245, align 8
  %246 = or i64 %236, 1
  %247 = load %"class.base::circular_deque"**, %"class.base::circular_deque"*** %9, align 8
  %248 = load %"class.base::internal::circular_deque_const_iterator"*, %"class.base::internal::circular_deque_const_iterator"** %171, align 8
  %249 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %247, i64 %246
  %250 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %249, align 8
  %251 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %250, i64 0, i32 1
  %252 = load i64, i64* %251, align 8
  %253 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %248, i64 %246, i32 0
  store %"class.base::circular_deque"* %250, %"class.base::circular_deque"** %253, align 8
  %254 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %248, i64 %246, i32 1
  store i64 %252, i64* %254, align 8
  %255 = add nuw i64 %236, 2
  %256 = add i64 %237, -2
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %217, label %235

258:                                              ; preds = %229
  %259 = bitcast %"class.media::DecodeTimestamp"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %259) #16
  %260 = icmp eq i64 %233, 0
  br i1 %260, label %261, label %264

261:                                              ; preds = %258
  %262 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %1, i64 0, i32 0, i32 1
  %263 = load i64, i64* %262, align 8
  br label %264

264:                                              ; preds = %261, %258
  %265 = phi i64 [ %263, %261 ], [ %233, %258 ]
  %266 = add i64 %265, -1
  %267 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %1, i64 0, i32 0
  %268 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %267, i64 %266) #16
  %269 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %268, i64 0, i32 0
  %270 = load %"class.media::StreamParserBuffer"*, %"class.media::StreamParserBuffer"** %269, align 8
  call void @_ZNK5media18StreamParserBuffer18GetDecodeTimestampEv(%"class.media::DecodeTimestamp"* nonnull sret %4, %"class.media::StreamParserBuffer"* %270) #16
  %271 = getelementptr inbounds %"class.media::DecodeTimestamp", %"class.media::DecodeTimestamp"* %4, i64 0, i32 0, i32 0
  %272 = load i64, i64* %271, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %259) #16
  br label %273

273:                                              ; preds = %264, %229
  %274 = phi i64 [ -9223372036854775808, %229 ], [ %272, %264 ]
  %275 = bitcast %"class.media::DecodeTimestamp"* %5 to i8*
  %276 = getelementptr inbounds %"class.media::DecodeTimestamp", %"class.media::DecodeTimestamp"* %5, i64 0, i32 0, i32 0
  %277 = bitcast %"class.media::DecodeTimestamp"* %6 to i8*
  %278 = getelementptr inbounds %"class.media::DecodeTimestamp", %"class.media::DecodeTimestamp"* %6, i64 0, i32 0, i32 0
  %279 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %1, i64 0, i32 0
  %280 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %1, i64 0, i32 0, i32 1
  br i1 %174, label %382, label %281

281:                                              ; preds = %273, %381
  %282 = phi i64 [ %339, %381 ], [ %274, %273 ]
  %283 = icmp ne i64 %282, -9223372036854775808
  br label %284

284:                                              ; preds = %315, %281
  %285 = phi i64 [ 0, %281 ], [ %318, %315 ]
  %286 = phi i32 [ -1, %281 ], [ %317, %315 ]
  %287 = phi i64 [ -9223372036854775808, %281 ], [ %316, %315 ]
  %288 = load %"class.base::internal::circular_deque_const_iterator"*, %"class.base::internal::circular_deque_const_iterator"** %171, align 8
  %289 = load %"class.base::circular_deque"**, %"class.base::circular_deque"*** %9, align 8
  %290 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %289, i64 %285
  %291 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %290, align 8
  %292 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %291, i64 0, i32 2
  %293 = load i64, i64* %292, align 8
  %294 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %288, i64 %285, i32 1
  %295 = load i64, i64* %294, align 8
  %296 = icmp eq i64 %295, %293
  br i1 %296, label %315, label %297

297:                                              ; preds = %284
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %275) #16
  store i64 -6148914691236517206, i64* %276, align 8
  %298 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %288, i64 %285, i32 0
  %299 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %298, align 8
  %300 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %299, i64 0, i32 0
  %301 = load i64, i64* %294, align 8
  %302 = call dereferenceable(8) %class.scoped_refptr* @_ZNK4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %300, i64 %301) #16
  %303 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %302, i64 0, i32 0
  %304 = load %"class.media::StreamParserBuffer"*, %"class.media::StreamParserBuffer"** %303, align 8
  call void @_ZNK5media18StreamParserBuffer18GetDecodeTimestampEv(%"class.media::DecodeTimestamp"* nonnull sret %5, %"class.media::StreamParserBuffer"* %304) #16
  %305 = load i64, i64* %276, align 8
  %306 = icmp slt i64 %305, %282
  %307 = and i1 %283, %306
  br i1 %307, label %320, label %308

308:                                              ; preds = %297
  %309 = icmp slt i64 %305, %287
  %310 = icmp eq i64 %287, -9223372036854775808
  %311 = or i1 %310, %309
  %312 = trunc i64 %285 to i32
  %313 = select i1 %311, i64 %305, i64 %287
  %314 = select i1 %311, i32 %312, i32 %286
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %275) #16
  br label %315

315:                                              ; preds = %308, %284
  %316 = phi i64 [ %287, %284 ], [ %313, %308 ]
  %317 = phi i32 [ %286, %284 ], [ %314, %308 ]
  %318 = add nuw i64 %285, 1
  %319 = icmp ult i64 %318, %169
  br i1 %319, label %284, label %321

320:                                              ; preds = %297
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %275) #16
  br label %382

321:                                              ; preds = %315
  %322 = icmp eq i32 %317, -1
  br i1 %322, label %382, label %323

323:                                              ; preds = %321
  %324 = sext i32 %317 to i64
  %325 = load %"class.base::internal::circular_deque_const_iterator"*, %"class.base::internal::circular_deque_const_iterator"** %171, align 8
  %326 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %325, i64 %324, i32 0
  %327 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %325, i64 %324, i32 1
  %328 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %326, align 8
  %329 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %328, i64 0, i32 0
  %330 = load i64, i64* %327, align 8
  %331 = call dereferenceable(8) %class.scoped_refptr* @_ZNK4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %329, i64 %330) #16
  %332 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %331, i64 0, i32 0
  %333 = load %"class.media::StreamParserBuffer"*, %"class.media::StreamParserBuffer"** %332, align 8
  %334 = icmp eq %"class.media::StreamParserBuffer"* %333, null
  br i1 %334, label %338, label %335

335:                                              ; preds = %323
  %336 = getelementptr inbounds %"class.media::StreamParserBuffer", %"class.media::StreamParserBuffer"* %333, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %337 = atomicrmw add i32* %336, i32 1 monotonic
  br label %338

338:                                              ; preds = %335, %323
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %277) #16
  call void @_ZNK5media18StreamParserBuffer18GetDecodeTimestampEv(%"class.media::DecodeTimestamp"* nonnull sret %6, %"class.media::StreamParserBuffer"* %333) #16
  %339 = load i64, i64* %278, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %277) #16
  call void @_ZN4base14circular_dequeI13scoped_refptrIN5media18StreamParserBufferEEE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"* %1, i64 1) #16
  %340 = load i64, i64* %232, align 8
  %341 = call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %279, i64 %340) #16
  %342 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %341, i64 0, i32 0
  store %"class.media::StreamParserBuffer"* %333, %"class.media::StreamParserBuffer"** %342, align 8
  br i1 %334, label %346, label %343

343:                                              ; preds = %338
  %344 = getelementptr inbounds %"class.media::StreamParserBuffer", %"class.media::StreamParserBuffer"* %333, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %345 = atomicrmw add i32* %344, i32 1 monotonic
  br label %346

346:                                              ; preds = %343, %338
  %347 = load i64, i64* %232, align 8
  %348 = load i64, i64* %280, align 8
  %349 = add i64 %348, -1
  %350 = icmp eq i64 %347, %349
  br i1 %350, label %351, label %352

351:                                              ; preds = %346
  store i64 0, i64* %232, align 8
  br label %355

352:                                              ; preds = %346
  %353 = add i64 %347, 1
  store i64 %353, i64* %232, align 8
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %355, label %356

355:                                              ; preds = %352, %351
  br label %356

356:                                              ; preds = %355, %352
  %357 = phi i64 [ %349, %355 ], [ %347, %352 ]
  %358 = call dereferenceable(8) %class.scoped_refptr* @_ZNK4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %279, i64 %357) #16
  %359 = load %"class.base::internal::circular_deque_const_iterator"*, %"class.base::internal::circular_deque_const_iterator"** %171, align 8
  %360 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %359, i64 %324, i32 0
  %361 = getelementptr inbounds %"class.base::internal::circular_deque_const_iterator", %"class.base::internal::circular_deque_const_iterator"* %359, i64 %324, i32 1
  %362 = load i64, i64* %361, align 8
  %363 = add i64 %362, 1
  store i64 %363, i64* %361, align 8
  %364 = load %"class.base::circular_deque"*, %"class.base::circular_deque"** %360, align 8
  %365 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %364, i64 0, i32 0, i32 1
  %366 = load i64, i64* %365, align 8
  %367 = icmp eq i64 %363, %366
  %368 = select i1 %367, i64 0, i64 %363
  store i64 %368, i64* %361, align 8
  br i1 %334, label %381, label %369

369:                                              ; preds = %356
  %370 = getelementptr inbounds %"class.media::StreamParserBuffer", %"class.media::StreamParserBuffer"* %333, i64 0, i32 0, i32 1
  %371 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %370, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %372 = atomicrmw sub i32* %371, i32 1 acq_rel
  %373 = icmp eq i32 %372, 1
  br i1 %373, label %374, label %381

374:                                              ; preds = %369
  %375 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %370, i64 -2
  %376 = bitcast %"class.base::RefCountedThreadSafe"* %375 to %"class.media::DecoderBuffer"*
  %377 = bitcast %"class.base::RefCountedThreadSafe"* %375 to void (%"class.media::DecoderBuffer"*)***
  %378 = load void (%"class.media::DecoderBuffer"*)**, void (%"class.media::DecoderBuffer"*)*** %377, align 8
  %379 = getelementptr inbounds void (%"class.media::DecoderBuffer"*)*, void (%"class.media::DecoderBuffer"*)** %378, i64 2
  %380 = load void (%"class.media::DecoderBuffer"*)*, void (%"class.media::DecoderBuffer"*)** %379, align 8
  call void %380(%"class.media::DecoderBuffer"* nonnull %376) #16
  br label %381

381:                                              ; preds = %374, %369, %356
  br label %281

382:                                              ; preds = %321, %273, %320
  %383 = phi i1 [ false, %320 ], [ true, %273 ], [ true, %321 ]
  %384 = load %"class.base::internal::circular_deque_const_iterator"*, %"class.base::internal::circular_deque_const_iterator"** %171, align 8
  %385 = icmp eq %"class.base::internal::circular_deque_const_iterator"* %384, null
  br i1 %385, label %390, label %386

386:                                              ; preds = %382
  %387 = ptrtoint %"class.base::internal::circular_deque_const_iterator"* %384 to i64
  %388 = bitcast %"class.base::internal::circular_deque_const_iterator"** %172 to i64*
  store i64 %387, i64* %388, align 8
  %389 = bitcast %"class.base::internal::circular_deque_const_iterator"* %384 to i8*
  call void @_ZdlPv(i8* %389) #17
  br label %390

390:                                              ; preds = %386, %382
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %170) #16
  %391 = load %"class.base::circular_deque"**, %"class.base::circular_deque"*** %9, align 8
  br label %392

392:                                              ; preds = %160, %390
  %393 = phi %"class.base::circular_deque"** [ %162, %160 ], [ %391, %390 ]
  %394 = phi i1 [ true, %160 ], [ %383, %390 ]
  %395 = icmp eq %"class.base::circular_deque"** %393, null
  br i1 %395, label %400, label %396

396:                                              ; preds = %392
  %397 = ptrtoint %"class.base::circular_deque"** %393 to i64
  %398 = bitcast %"class.base::circular_deque"*** %10 to i64*
  store i64 %397, i64* %398, align 8
  %399 = bitcast %"class.base::circular_deque"** %393 to i8*
  call void @_ZdlPv(i8* %399) #17
  br label %400

400:                                              ; preds = %392, %396
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #16
  ret i1 %394

401:                                              ; preds = %31, %517
  %402 = phi %"class.base::circular_deque"** [ %23, %31 ], [ %486, %517 ]
  %403 = phi %"class.base::circular_deque"** [ %25, %31 ], [ %487, %517 ]
  %404 = phi i64 [ %27, %31 ], [ %488, %517 ]
  %405 = phi %"class.base::circular_deque"** [ %28, %31 ], [ %489, %517 ]
  %406 = phi %"class.std::__1::__tree_end_node"* [ %29, %31 ], [ %518, %517 ]
  %407 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %406, i64 5
  %408 = bitcast %"class.std::__1::__tree_end_node"* %407 to %"class.base::internal::VectorBuffer"*
  %409 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %406, i64 6
  %410 = bitcast %"class.std::__1::__tree_end_node"* %409 to i64*
  %411 = load i64, i64* %410, align 8
  %412 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %406, i64 7
  %413 = bitcast %"class.std::__1::__tree_end_node"* %412 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %406, i64 8
  %416 = bitcast %"class.std::__1::__tree_end_node"* %415 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = icmp ule i64 %414, %417
  %419 = icmp ne i64 %411, %414
  %420 = or i1 %419, %418
  %421 = select i1 %420, i64 %414, i64 0
  %422 = tail call dereferenceable(8) %class.scoped_refptr* @_ZNK4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %408, i64 %421) #16
  %423 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %422, i64 0, i32 0
  %424 = load %"class.media::StreamParserBuffer"*, %"class.media::StreamParserBuffer"** %423, align 8
  %425 = getelementptr inbounds %"class.media::StreamParserBuffer", %"class.media::StreamParserBuffer"* %424, i64 0, i32 4
  %426 = load i32, i32* %425, align 4
  %427 = icmp eq i32 %426, 1
  br i1 %427, label %485, label %428

428:                                              ; preds = %401
  %429 = ptrtoint %"class.std::__1::__tree_end_node"* %407 to i64
  %430 = load %"class.base::circular_deque"**, %"class.base::circular_deque"*** %11, align 8
  %431 = icmp ult %"class.base::circular_deque"** %405, %430
  %432 = ptrtoint %"class.base::circular_deque"** %430 to i64
  br i1 %431, label %433, label %437

433:                                              ; preds = %428
  %434 = bitcast %"class.base::circular_deque"** %405 to i64*
  store i64 %429, i64* %434, align 8
  %435 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %405, i64 1
  %436 = ptrtoint %"class.base::circular_deque"** %435 to i64
  store i64 %436, i64* %32, align 8
  br label %485

437:                                              ; preds = %428
  %438 = ptrtoint %"class.base::circular_deque"** %405 to i64
  %439 = load i64, i64* %33, align 8
  %440 = sub i64 %438, %439
  %441 = ashr exact i64 %440, 3
  %442 = add nsw i64 %441, 1
  %443 = icmp ugt i64 %442, 2305843009213693951
  br i1 %443, label %444, label %446

444:                                              ; preds = %437
  %445 = bitcast %"class.std::__1::vector.43"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %445) #15
  unreachable

446:                                              ; preds = %437
  %447 = sub i64 %432, %439
  %448 = ashr exact i64 %447, 3
  %449 = icmp ult i64 %448, 1152921504606846975
  br i1 %449, label %450, label %458

450:                                              ; preds = %446
  %451 = ashr exact i64 %447, 2
  %452 = icmp ult i64 %451, %442
  %453 = select i1 %452, i64 %442, i64 %451
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %463, label %455

455:                                              ; preds = %450
  %456 = icmp ugt i64 %453, 2305843009213693951
  br i1 %456, label %457, label %458

457:                                              ; preds = %455
  tail call void @abort() #15
  unreachable

458:                                              ; preds = %455, %446
  %459 = phi i64 [ %453, %455 ], [ 2305843009213693951, %446 ]
  %460 = shl i64 %459, 3
  %461 = tail call i8* @_Znwm(i64 %460) #17
  %462 = bitcast i8* %461 to %"class.base::circular_deque"**
  br label %463

463:                                              ; preds = %458, %450
  %464 = phi i64 [ %459, %458 ], [ 0, %450 ]
  %465 = phi %"class.base::circular_deque"** [ %462, %458 ], [ null, %450 ]
  %466 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %465, i64 %441
  %467 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %465, i64 %464
  %468 = ptrtoint %"class.base::circular_deque"** %467 to i64
  %469 = bitcast %"class.base::circular_deque"** %466 to i64*
  store i64 %429, i64* %469, align 8
  %470 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %466, i64 1
  %471 = ptrtoint %"class.base::circular_deque"** %470 to i64
  %472 = sub i64 %404, %439
  %473 = ashr exact i64 %472, 3
  %474 = sub nsw i64 0, %473
  %475 = getelementptr inbounds %"class.base::circular_deque"*, %"class.base::circular_deque"** %466, i64 %474
  %476 = ptrtoint %"class.base::circular_deque"** %475 to i64
  %477 = icmp sgt i64 %472, 0
  br i1 %477, label %478, label %481

478:                                              ; preds = %463
  %479 = bitcast %"class.base::circular_deque"** %475 to i8*
  %480 = inttoptr i64 %439 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %479, i8* align 8 %480, i64 %472, i1 false) #16
  br label %481

481:                                              ; preds = %478, %463
  store i64 %476, i64* %33, align 8
  store i64 %471, i64* %32, align 8
  store i64 %468, i64* %34, align 8
  %482 = icmp eq i64 %439, 0
  br i1 %482, label %485, label %483

483:                                              ; preds = %481
  %484 = inttoptr i64 %439 to i8*
  tail call void @_ZdlPv(i8* %484) #17
  br label %485

485:                                              ; preds = %483, %481, %433, %401
  %486 = phi %"class.base::circular_deque"** [ %475, %483 ], [ %475, %481 ], [ %402, %433 ], [ %402, %401 ]
  %487 = phi %"class.base::circular_deque"** [ %470, %483 ], [ %470, %481 ], [ %435, %433 ], [ %403, %401 ]
  %488 = phi i64 [ %471, %483 ], [ %471, %481 ], [ %436, %433 ], [ %404, %401 ]
  %489 = phi %"class.base::circular_deque"** [ %470, %483 ], [ %470, %481 ], [ %435, %433 ], [ %405, %401 ]
  %490 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %406, i64 1, i32 0
  %491 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %490, align 8
  %492 = icmp eq %"class.std::__1::__tree_node_base"* %491, null
  br i1 %492, label %493, label %501

493:                                              ; preds = %485
  %494 = bitcast %"class.std::__1::__tree_end_node"* %406 to %"class.std::__1::__tree_node_base"*
  %495 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %406, i64 2
  %496 = bitcast %"class.std::__1::__tree_end_node"* %495 to %"class.std::__1::__tree_end_node"**
  %497 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %496, align 8
  %498 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %497, i64 0, i32 0
  %499 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %498, align 8
  %500 = icmp eq %"class.std::__1::__tree_node_base"* %499, %494
  br i1 %500, label %517, label %508

501:                                              ; preds = %485, %501
  %502 = phi %"class.std::__1::__tree_node_base"* [ %504, %501 ], [ %491, %485 ]
  %503 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %502, i64 0, i32 0, i32 0
  %504 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %503, align 8
  %505 = icmp eq %"class.std::__1::__tree_node_base"* %504, null
  br i1 %505, label %506, label %501

506:                                              ; preds = %501
  %507 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %502, i64 0, i32 0
  br label %517

508:                                              ; preds = %493, %508
  %509 = phi %"class.std::__1::__tree_end_node"** [ %512, %508 ], [ %496, %493 ]
  %510 = bitcast %"class.std::__1::__tree_end_node"** %509 to %"class.std::__1::__tree_node_base"**
  %511 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %510, align 8
  %512 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %511, i64 0, i32 2
  %513 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %512, align 8
  %514 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %513, i64 0, i32 0
  %515 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %514, align 8
  %516 = icmp eq %"class.std::__1::__tree_node_base"* %515, %511
  br i1 %516, label %517, label %508

517:                                              ; preds = %508, %493, %506
  %518 = phi %"class.std::__1::__tree_end_node"* [ %507, %506 ], [ %497, %493 ], [ %513, %508 ]
  %519 = icmp eq %"class.std::__1::__tree_end_node"* %518, %14
  br i1 %519, label %160, label %401
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZNK5media18StreamParserBuffer18GetDecodeTimestampEv(%"class.media::DecodeTimestamp"* sret, %"class.media::StreamParserBuffer"*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %class.scoped_refptr* @_ZNK4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #16
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #16
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #16
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %14, i8* %15) #16
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #16
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 89, %"class.logging::CheckOpResult"* nonnull %4) #16
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #16
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #16
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #16
  %23 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 0
  %24 = load %class.scoped_refptr*, %class.scoped_refptr** %23, align 8
  %25 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %24, i64 %1
  ret %class.scoped_refptr* %25
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #6

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #10

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #6

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeI13scoped_refptrIN5media18StreamParserBufferEEE25ExpandCapacityIfNecessaryEm(%"class.base::circular_deque"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"class.base::internal::VectorBuffer"*
  %5 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %6
  br i1 %9, label %14, label %10

10:                                               ; preds = %2
  %11 = sub i64 %8, %6
  %12 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %19

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %8, %6
  %18 = add i64 %17, %16
  br label %19

19:                                               ; preds = %10, %14
  %20 = phi i64 [ %13, %10 ], [ %16, %14 ]
  %21 = phi i64 [ %11, %10 ], [ %18, %14 ]
  %22 = add i64 %21, %1
  %23 = icmp eq i64 %20, 0
  %24 = add i64 %20, -1
  %25 = select i1 %23, i64 0, i64 %24
  %26 = icmp ult i64 %25, %22
  br i1 %26, label %27, label %49

27:                                               ; preds = %19
  %28 = icmp ugt i64 %22, 3
  %29 = select i1 %28, i64 %22, i64 3
  %30 = lshr i64 %25, 2
  %31 = add i64 %30, %25
  %32 = icmp ult i64 %29, %31
  %33 = select i1 %32, i64 %31, i64 %29
  %34 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #16
  %35 = add i64 %33, 1
  %36 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %35, i64 8) #16
  %37 = extractvalue { i64, i1 } %36, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 16, i1 false) #16
  br i1 %37, label %38, label %39, !prof !2

38:                                               ; preds = %27
  tail call void @llvm.trap() #16
  unreachable

39:                                               ; preds = %27
  %40 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %4, i64 0, i32 1
  %41 = extractvalue { i64, i1 } %36, 0
  %42 = tail call noalias i8* @malloc(i64 %41) #16
  %43 = bitcast <2 x i64>* %3 to i8**
  store i8* %42, i8** %43, align 16
  store i64 %35, i64* %40, align 8
  %44 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  call void @_ZN4base14circular_dequeI13scoped_refptrIN5media18StreamParserBufferEEE10MoveBufferERNS_8internal12VectorBufferIS4_EEmmPS8_PmSB_(%"class.base::internal::VectorBuffer"* dereferenceable(16) %44, i64 %6, i64 %8, %"class.base::internal::VectorBuffer"* nonnull %4, i64* %5, i64* %7) #16
  %45 = bitcast %"class.base::circular_deque"* %0 to i8**
  %46 = load i8*, i8** %45, align 8
  call void @free(i8* %46) #16
  %47 = load <2 x i64>, <2 x i64>* %3, align 16
  %48 = bitcast %"class.base::circular_deque"* %0 to <2 x i64>*
  store <2 x i64> %47, <2 x i64>* %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #16
  br label %49

49:                                               ; preds = %19, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"*, i64) local_unnamed_addr #5 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #16
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #16
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #16
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %14, i8* %15) #16
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #16
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %4) #16
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #16
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #16
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #16
  %23 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 0
  %24 = load %class.scoped_refptr*, %class.scoped_refptr** %23, align 8
  %25 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %24, i64 %1
  ret %class.scoped_refptr* %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeI13scoped_refptrIN5media18StreamParserBufferEEE10MoveBufferERNS_8internal12VectorBufferIS4_EEmmPS8_PmSB_(%"class.base::internal::VectorBuffer"* dereferenceable(16), i64, i64, %"class.base::internal::VectorBuffer"*, i64*, i64*) local_unnamed_addr #5 comdat align 2 {
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  store i64 0, i64* %4, align 8
  %12 = icmp ugt i64 %2, %1
  br i1 %12, label %13, label %116

13:                                               ; preds = %6
  %14 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %1)
  %15 = ptrtoint %class.scoped_refptr* %14 to i64
  %16 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %2)
  %17 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 0
  %18 = load %class.scoped_refptr*, %class.scoped_refptr** %17, align 8
  %19 = icmp ult %class.scoped_refptr* %18, %16
  br i1 %19, label %20, label %36

20:                                               ; preds = %13
  %21 = ptrtoint %class.scoped_refptr* %18 to i64
  %22 = ptrtoint %class.scoped_refptr* %16 to i64
  %23 = tail call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %22, i64 %15) #16
  %24 = extractvalue { i64, i1 } %23, 1
  %25 = extractvalue { i64, i1 } %23, 0
  %26 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %21, i64 %25) #16
  %27 = extractvalue { i64, i1 } %26, 1
  %28 = or i1 %24, %27
  br i1 %28, label %29, label %30, !prof !2

29:                                               ; preds = %20
  tail call void @llvm.trap() #16
  unreachable

30:                                               ; preds = %20
  %31 = extractvalue { i64, i1 } %26, 0
  %32 = icmp ugt i64 %31, %15
  br i1 %32, label %33, label %36

33:                                               ; preds = %30
  %34 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #16
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0)) #16
  %35 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #16
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #16
  br label %36

36:                                               ; preds = %33, %30, %13
  %37 = icmp eq %class.scoped_refptr* %14, %16
  br i1 %37, label %114, label %38

38:                                               ; preds = %36
  %39 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %16, i64 -1, i32 0
  %40 = ptrtoint %"class.media::StreamParserBuffer"** %39 to i64
  %41 = sub i64 %40, %15
  %42 = lshr i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = and i64 %43, 7
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %58, label %46

46:                                               ; preds = %38, %46
  %47 = phi %class.scoped_refptr* [ %55, %46 ], [ %18, %38 ]
  %48 = phi %class.scoped_refptr* [ %54, %46 ], [ %14, %38 ]
  %49 = phi i64 [ %56, %46 ], [ %44, %38 ]
  %50 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %48, i64 0, i32 0
  %51 = bitcast %class.scoped_refptr* %48 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %class.scoped_refptr* %47 to i64*
  store i64 %52, i64* %53, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %50, align 8
  %54 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %48, i64 1
  %55 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %47, i64 1
  %56 = add i64 %49, -1
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %46, !llvm.loop !3

58:                                               ; preds = %46, %38
  %59 = phi %class.scoped_refptr* [ %18, %38 ], [ %55, %46 ]
  %60 = phi %class.scoped_refptr* [ %14, %38 ], [ %54, %46 ]
  %61 = icmp ult i64 %41, 56
  br i1 %61, label %114, label %62

62:                                               ; preds = %58, %62
  %63 = phi %class.scoped_refptr* [ %112, %62 ], [ %59, %58 ]
  %64 = phi %class.scoped_refptr* [ %111, %62 ], [ %60, %58 ]
  %65 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 0, i32 0
  %66 = bitcast %class.scoped_refptr* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %class.scoped_refptr* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %65, align 8
  %69 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 1
  %70 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %63, i64 1
  %71 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %69, i64 0, i32 0
  %72 = bitcast %class.scoped_refptr* %69 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = bitcast %class.scoped_refptr* %70 to i64*
  store i64 %73, i64* %74, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %71, align 8
  %75 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 2
  %76 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %63, i64 2
  %77 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %75, i64 0, i32 0
  %78 = bitcast %class.scoped_refptr* %75 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %class.scoped_refptr* %76 to i64*
  store i64 %79, i64* %80, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %77, align 8
  %81 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 3
  %82 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %63, i64 3
  %83 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %81, i64 0, i32 0
  %84 = bitcast %class.scoped_refptr* %81 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %class.scoped_refptr* %82 to i64*
  store i64 %85, i64* %86, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %83, align 8
  %87 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 4
  %88 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %63, i64 4
  %89 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %87, i64 0, i32 0
  %90 = bitcast %class.scoped_refptr* %87 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %class.scoped_refptr* %88 to i64*
  store i64 %91, i64* %92, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %89, align 8
  %93 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 5
  %94 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %63, i64 5
  %95 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %93, i64 0, i32 0
  %96 = bitcast %class.scoped_refptr* %93 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = bitcast %class.scoped_refptr* %94 to i64*
  store i64 %97, i64* %98, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %95, align 8
  %99 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 6
  %100 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %63, i64 6
  %101 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %99, i64 0, i32 0
  %102 = bitcast %class.scoped_refptr* %99 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %class.scoped_refptr* %100 to i64*
  store i64 %103, i64* %104, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %101, align 8
  %105 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 7
  %106 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %63, i64 7
  %107 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %105, i64 0, i32 0
  %108 = bitcast %class.scoped_refptr* %105 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %class.scoped_refptr* %106 to i64*
  store i64 %109, i64* %110, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %107, align 8
  %111 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 8
  %112 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %63, i64 8
  %113 = icmp eq %class.scoped_refptr* %111, %16
  br i1 %113, label %114, label %62

114:                                              ; preds = %58, %62, %36
  %115 = sub i64 %2, %1
  br label %322

116:                                              ; preds = %6
  %117 = icmp ult i64 %2, %1
  br i1 %117, label %118, label %322

118:                                              ; preds = %116
  %119 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %1)
  %120 = ptrtoint %class.scoped_refptr* %119 to i64
  %121 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %11)
  %122 = getelementptr inbounds %"class.base::internal::VectorBuffer", %"class.base::internal::VectorBuffer"* %3, i64 0, i32 0
  %123 = load %class.scoped_refptr*, %class.scoped_refptr** %122, align 8
  %124 = icmp ult %class.scoped_refptr* %123, %121
  br i1 %124, label %125, label %141

125:                                              ; preds = %118
  %126 = ptrtoint %class.scoped_refptr* %123 to i64
  %127 = ptrtoint %class.scoped_refptr* %121 to i64
  %128 = tail call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %127, i64 %120) #16
  %129 = extractvalue { i64, i1 } %128, 1
  %130 = extractvalue { i64, i1 } %128, 0
  %131 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %126, i64 %130) #16
  %132 = extractvalue { i64, i1 } %131, 1
  %133 = or i1 %129, %132
  br i1 %133, label %134, label %135, !prof !2

134:                                              ; preds = %125
  tail call void @llvm.trap() #16
  unreachable

135:                                              ; preds = %125
  %136 = extractvalue { i64, i1 } %131, 0
  %137 = icmp ugt i64 %136, %120
  br i1 %137, label %138, label %141

138:                                              ; preds = %135
  %139 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %139) #16
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0)) #16
  %140 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #16
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %139) #16
  br label %141

141:                                              ; preds = %138, %135, %118
  %142 = icmp eq %class.scoped_refptr* %119, %121
  br i1 %142, label %219, label %143

143:                                              ; preds = %141
  %144 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %121, i64 -1, i32 0
  %145 = ptrtoint %"class.media::StreamParserBuffer"** %144 to i64
  %146 = sub i64 %145, %120
  %147 = lshr i64 %146, 3
  %148 = add nuw nsw i64 %147, 1
  %149 = and i64 %148, 7
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %163, label %151

151:                                              ; preds = %143, %151
  %152 = phi %class.scoped_refptr* [ %160, %151 ], [ %123, %143 ]
  %153 = phi %class.scoped_refptr* [ %159, %151 ], [ %119, %143 ]
  %154 = phi i64 [ %161, %151 ], [ %149, %143 ]
  %155 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %153, i64 0, i32 0
  %156 = bitcast %class.scoped_refptr* %153 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = bitcast %class.scoped_refptr* %152 to i64*
  store i64 %157, i64* %158, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %155, align 8
  %159 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %153, i64 1
  %160 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %152, i64 1
  %161 = add i64 %154, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %151, !llvm.loop !5

163:                                              ; preds = %151, %143
  %164 = phi %class.scoped_refptr* [ %123, %143 ], [ %160, %151 ]
  %165 = phi %class.scoped_refptr* [ %119, %143 ], [ %159, %151 ]
  %166 = icmp ult i64 %146, 56
  br i1 %166, label %219, label %167

167:                                              ; preds = %163, %167
  %168 = phi %class.scoped_refptr* [ %217, %167 ], [ %164, %163 ]
  %169 = phi %class.scoped_refptr* [ %216, %167 ], [ %165, %163 ]
  %170 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 0, i32 0
  %171 = bitcast %class.scoped_refptr* %169 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = bitcast %class.scoped_refptr* %168 to i64*
  store i64 %172, i64* %173, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %170, align 8
  %174 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 1
  %175 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %168, i64 1
  %176 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %174, i64 0, i32 0
  %177 = bitcast %class.scoped_refptr* %174 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %class.scoped_refptr* %175 to i64*
  store i64 %178, i64* %179, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %176, align 8
  %180 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 2
  %181 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %168, i64 2
  %182 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %180, i64 0, i32 0
  %183 = bitcast %class.scoped_refptr* %180 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = bitcast %class.scoped_refptr* %181 to i64*
  store i64 %184, i64* %185, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %182, align 8
  %186 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 3
  %187 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %168, i64 3
  %188 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %186, i64 0, i32 0
  %189 = bitcast %class.scoped_refptr* %186 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %class.scoped_refptr* %187 to i64*
  store i64 %190, i64* %191, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %188, align 8
  %192 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 4
  %193 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %168, i64 4
  %194 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %192, i64 0, i32 0
  %195 = bitcast %class.scoped_refptr* %192 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = bitcast %class.scoped_refptr* %193 to i64*
  store i64 %196, i64* %197, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %194, align 8
  %198 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 5
  %199 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %168, i64 5
  %200 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %198, i64 0, i32 0
  %201 = bitcast %class.scoped_refptr* %198 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %class.scoped_refptr* %199 to i64*
  store i64 %202, i64* %203, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %200, align 8
  %204 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 6
  %205 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %168, i64 6
  %206 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %204, i64 0, i32 0
  %207 = bitcast %class.scoped_refptr* %204 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %class.scoped_refptr* %205 to i64*
  store i64 %208, i64* %209, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %206, align 8
  %210 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 7
  %211 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %168, i64 7
  %212 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %210, i64 0, i32 0
  %213 = bitcast %class.scoped_refptr* %210 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = bitcast %class.scoped_refptr* %211 to i64*
  store i64 %214, i64* %215, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %212, align 8
  %216 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %169, i64 8
  %217 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %168, i64 8
  %218 = icmp eq %class.scoped_refptr* %216, %121
  br i1 %218, label %219, label %167

219:                                              ; preds = %163, %167, %141
  %220 = sub i64 %11, %1
  %221 = call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 0)
  %222 = ptrtoint %class.scoped_refptr* %221 to i64
  %223 = call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %0, i64 %2)
  %224 = call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %3, i64 %220)
  %225 = icmp ult %class.scoped_refptr* %224, %223
  br i1 %225, label %226, label %242

226:                                              ; preds = %219
  %227 = ptrtoint %class.scoped_refptr* %224 to i64
  %228 = ptrtoint %class.scoped_refptr* %223 to i64
  %229 = call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %228, i64 %222) #16
  %230 = extractvalue { i64, i1 } %229, 1
  %231 = extractvalue { i64, i1 } %229, 0
  %232 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %227, i64 %231) #16
  %233 = extractvalue { i64, i1 } %232, 1
  %234 = or i1 %230, %233
  br i1 %234, label %235, label %236, !prof !2

235:                                              ; preds = %226
  call void @llvm.trap() #16
  unreachable

236:                                              ; preds = %226
  %237 = extractvalue { i64, i1 } %232, 0
  %238 = icmp ugt i64 %237, %222
  br i1 %238, label %239, label %242

239:                                              ; preds = %236
  %240 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %240) #16
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0)) #16
  %241 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #16
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %240) #16
  br label %242

242:                                              ; preds = %239, %236, %219
  %243 = icmp eq %class.scoped_refptr* %221, %223
  br i1 %243, label %320, label %244

244:                                              ; preds = %242
  %245 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %223, i64 -1, i32 0
  %246 = ptrtoint %"class.media::StreamParserBuffer"** %245 to i64
  %247 = sub i64 %246, %222
  %248 = lshr i64 %247, 3
  %249 = add nuw nsw i64 %248, 1
  %250 = and i64 %249, 7
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %264, label %252

252:                                              ; preds = %244, %252
  %253 = phi %class.scoped_refptr* [ %261, %252 ], [ %224, %244 ]
  %254 = phi %class.scoped_refptr* [ %260, %252 ], [ %221, %244 ]
  %255 = phi i64 [ %262, %252 ], [ %250, %244 ]
  %256 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %254, i64 0, i32 0
  %257 = bitcast %class.scoped_refptr* %254 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = bitcast %class.scoped_refptr* %253 to i64*
  store i64 %258, i64* %259, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %256, align 8
  %260 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %254, i64 1
  %261 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %253, i64 1
  %262 = add i64 %255, -1
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %252, !llvm.loop !6

264:                                              ; preds = %252, %244
  %265 = phi %class.scoped_refptr* [ %224, %244 ], [ %261, %252 ]
  %266 = phi %class.scoped_refptr* [ %221, %244 ], [ %260, %252 ]
  %267 = icmp ult i64 %247, 56
  br i1 %267, label %320, label %268

268:                                              ; preds = %264, %268
  %269 = phi %class.scoped_refptr* [ %318, %268 ], [ %265, %264 ]
  %270 = phi %class.scoped_refptr* [ %317, %268 ], [ %266, %264 ]
  %271 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %270, i64 0, i32 0
  %272 = bitcast %class.scoped_refptr* %270 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %class.scoped_refptr* %269 to i64*
  store i64 %273, i64* %274, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %271, align 8
  %275 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %270, i64 1
  %276 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %269, i64 1
  %277 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %275, i64 0, i32 0
  %278 = bitcast %class.scoped_refptr* %275 to i64*
  %279 = load i64, i64* %278, align 8
  %280 = bitcast %class.scoped_refptr* %276 to i64*
  store i64 %279, i64* %280, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %277, align 8
  %281 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %270, i64 2
  %282 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %269, i64 2
  %283 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %281, i64 0, i32 0
  %284 = bitcast %class.scoped_refptr* %281 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %class.scoped_refptr* %282 to i64*
  store i64 %285, i64* %286, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %283, align 8
  %287 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %270, i64 3
  %288 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %269, i64 3
  %289 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %287, i64 0, i32 0
  %290 = bitcast %class.scoped_refptr* %287 to i64*
  %291 = load i64, i64* %290, align 8
  %292 = bitcast %class.scoped_refptr* %288 to i64*
  store i64 %291, i64* %292, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %289, align 8
  %293 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %270, i64 4
  %294 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %269, i64 4
  %295 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %293, i64 0, i32 0
  %296 = bitcast %class.scoped_refptr* %293 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = bitcast %class.scoped_refptr* %294 to i64*
  store i64 %297, i64* %298, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %295, align 8
  %299 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %270, i64 5
  %300 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %269, i64 5
  %301 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %299, i64 0, i32 0
  %302 = bitcast %class.scoped_refptr* %299 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = bitcast %class.scoped_refptr* %300 to i64*
  store i64 %303, i64* %304, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %301, align 8
  %305 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %270, i64 6
  %306 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %269, i64 6
  %307 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %305, i64 0, i32 0
  %308 = bitcast %class.scoped_refptr* %305 to i64*
  %309 = load i64, i64* %308, align 8
  %310 = bitcast %class.scoped_refptr* %306 to i64*
  store i64 %309, i64* %310, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %307, align 8
  %311 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %270, i64 7
  %312 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %269, i64 7
  %313 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %311, i64 0, i32 0
  %314 = bitcast %class.scoped_refptr* %311 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %class.scoped_refptr* %312 to i64*
  store i64 %315, i64* %316, align 8
  store %"class.media::StreamParserBuffer"* null, %"class.media::StreamParserBuffer"** %313, align 8
  %317 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %270, i64 8
  %318 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %269, i64 8
  %319 = icmp eq %class.scoped_refptr* %317, %223
  br i1 %319, label %320, label %268

320:                                              ; preds = %264, %268, %242
  %321 = add i64 %220, %2
  br label %322

322:                                              ; preds = %116, %320, %114
  %323 = phi i64 [ %321, %320 ], [ %115, %114 ], [ 0, %116 ]
  store i64 %323, i64* %5, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #12

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #12

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.usub.with.overflow.i64(i64, i64) #12

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base14circular_dequeI13scoped_refptrIN5media18StreamParserBufferEEE13DestructRangeEmm(%"class.base::circular_deque"*, i64, i64) local_unnamed_addr #5 comdat align 2 {
  %4 = icmp eq i64 %2, %1
  br i1 %4, label %17, label %5

5:                                                ; preds = %3
  %6 = icmp ugt i64 %2, %1
  %7 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0
  %8 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %7, i64 %1)
  br i1 %6, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %7, i64 %11)
  tail call void @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEE13DestructRangeIS5_Li0EEEvPS5_S8_(%"class.base::internal::VectorBuffer"* %7, %class.scoped_refptr* %8, %class.scoped_refptr* %12)
  %13 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %7, i64 0)
  br label %14

14:                                               ; preds = %5, %9
  %15 = phi %class.scoped_refptr* [ %13, %9 ], [ %8, %5 ]
  %16 = tail call dereferenceable(8) %class.scoped_refptr* @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEEixEm(%"class.base::internal::VectorBuffer"* %7, i64 %2)
  tail call void @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEE13DestructRangeIS5_Li0EEEvPS5_S8_(%"class.base::internal::VectorBuffer"* %7, %class.scoped_refptr* %15, %class.scoped_refptr* %16)
  br label %17

17:                                               ; preds = %14, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal12VectorBufferI13scoped_refptrIN5media18StreamParserBufferEEE13DestructRangeIS5_Li0EEEvPS5_S8_(%"class.base::internal::VectorBuffer"*, %class.scoped_refptr*, %class.scoped_refptr*) local_unnamed_addr #5 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %class.scoped_refptr*, align 8
  %6 = alloca %class.scoped_refptr*, align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  store %class.scoped_refptr* %1, %class.scoped_refptr** %5, align 8
  store %class.scoped_refptr* %2, %class.scoped_refptr** %6, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #16
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt %class.scoped_refptr* %1, %2
  br i1 %12, label %14, label %13

13:                                               ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %25

14:                                               ; preds = %3
  %15 = bitcast %class.scoped_refptr** %5 to i8*
  %16 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %15, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIP13scoped_refptrIN5media18StreamParserBufferEEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS6_14remove_pointerIS8_E4typeEEE5valueEPcE4typeESA_ENUlRNS6_13basic_ostreamIcNS6_11char_traitsIcEEEEPKvE_8__invokeESL_SN_) #16
  %17 = bitcast %class.scoped_refptr** %6 to i8*
  %18 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %17, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIP13scoped_refptrIN5media18StreamParserBufferEEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS6_14remove_pointerIS8_E4typeEEE5valueEPcE4typeESA_ENUlRNS6_13basic_ostreamIcNS6_11char_traitsIcEEEEPKvE_8__invokeESL_SN_) #16
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i8* %16, i8* %18) #16
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %20, i8** %10, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %14
  %23 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #16
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0), i32 110, %"class.logging::CheckOpResult"* nonnull %7) #16
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #16
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #16
  br label %25

25:                                               ; preds = %13, %14, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #16
  %26 = load %class.scoped_refptr*, %class.scoped_refptr** %5, align 8
  %27 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %28 = icmp eq %class.scoped_refptr* %26, %27
  br i1 %28, label %51, label %29

29:                                               ; preds = %25, %46
  %30 = phi %class.scoped_refptr* [ %48, %46 ], [ %26, %25 ]
  %31 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %30, i64 0, i32 0
  %32 = load %"class.media::StreamParserBuffer"*, %"class.media::StreamParserBuffer"** %31, align 8
  %33 = icmp eq %"class.media::StreamParserBuffer"* %32, null
  br i1 %33, label %46, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.media::StreamParserBuffer", %"class.media::StreamParserBuffer"* %32, i64 0, i32 0, i32 1
  %36 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = atomicrmw sub i32* %36, i32 1 acq_rel
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %46

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %35, i64 -2
  %41 = bitcast %"class.base::RefCountedThreadSafe"* %40 to %"class.media::DecoderBuffer"*
  %42 = bitcast %"class.base::RefCountedThreadSafe"* %40 to void (%"class.media::DecoderBuffer"*)***
  %43 = load void (%"class.media::DecoderBuffer"*)**, void (%"class.media::DecoderBuffer"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.media::DecoderBuffer"*)*, void (%"class.media::DecoderBuffer"*)** %43, i64 2
  %45 = load void (%"class.media::DecoderBuffer"*)*, void (%"class.media::DecoderBuffer"*)** %44, align 8
  call void %45(%"class.media::DecoderBuffer"* nonnull %41) #16
  br label %46

46:                                               ; preds = %29, %34, %39
  %47 = load %class.scoped_refptr*, %class.scoped_refptr** %5, align 8
  %48 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %47, i64 1
  store %class.scoped_refptr* %48, %class.scoped_refptr** %5, align 8
  %49 = load %class.scoped_refptr*, %class.scoped_refptr** %6, align 8
  %50 = icmp eq %class.scoped_refptr* %48, %49
  br i1 %50, label %51, label %29

51:                                               ; preds = %46, %25
  ret void
}

declare i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8*, void (%"class.std::__1::basic_ostream"*, i8*)*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN7logging15CheckOpValueStrIP13scoped_refptrIN5media18StreamParserBufferEEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS6_14remove_pointerIS8_E4typeEEE5valueEPcE4typeESA_ENUlRNS6_13basic_ostreamIcNS6_11char_traitsIcEEEEPKvE_8__invokeESL_SN_(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*) #14 comdat align 2 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"* %0, i8* %4) #16
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"*, i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone speculatable }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind }
attributes #17 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
